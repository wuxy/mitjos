
obj/net/ns:     file format elf32-i386

Disassembly of section .text:

00800020 <_start>:
.text
.globl _start
_start:
	// See if we were started with arguments on the stack
	cmpl $USTACKTOP, %esp
  800020:	81 fc 00 e0 bf ee    	cmp    $0xeebfe000,%esp
	jne args_exist
  800026:	75 04                	jne    80002c <args_exist>

	// If not, push dummy argc/argv arguments.
	// This happens when we are loaded by the kernel,内核启动该进程，内核不知道传递什么参数
	// because the kernel does not know about passing arguments.
	pushl $0
  800028:	6a 00                	push   $0x0
	pushl $0
  80002a:	6a 00                	push   $0x0

0080002c <args_exist>:

args_exist:
	call libmain
  80002c:	e8 e3 07 00 00       	call   800814 <libmain>
1:	jmp 1b
  800031:	eb fe                	jmp    800031 <args_exist+0x5>
	...

00800040 <put_buffer>:
	return va;
}

static void
put_buffer(void *va) {
  800040:	55                   	push   %ebp
  800041:	89 e5                	mov    %esp,%ebp
	int i = ((uint32_t)va - REQVA) / PGSIZE;
	buse[i] = 0;
  800043:	2d 00 b0 fe 0f       	sub    $0xffeb000,%eax
  800048:	c1 e8 0c             	shr    $0xc,%eax
  80004b:	c7 04 85 80 83 81 00 	movl   $0x0,0x818380(,%eax,4)
  800052:	00 00 00 00 
}
  800056:	5d                   	pop    %ebp
  800057:	c3                   	ret    

00800058 <umain>:

static void
lwip_init(struct netif *nif, void *if_state,
	  uint32_t init_addr, uint32_t init_mask, uint32_t init_gw)
{
	struct ip_addr ipaddr, netmask, gateway;
	ipaddr.addr  = init_addr;
	netmask.addr = init_mask;
	gateway.addr = init_gw;

	if (0 == netif_add(nif, &ipaddr, &netmask, &gateway,
			   if_state,
			   jif_init,
			   ip_input))
		panic("lwip_init: error in netif_add\n");

	netif_set_default(nif);
	netif_set_up(nif);
}

static void __attribute__((noreturn))
net_timer(uint32_t arg)
{
	struct timer_thread *t = (struct timer_thread *) arg;

	for (;;) {
		uint32_t cur = sys_time_msec();

		lwip_core_lock();
		t->func();
		lwip_core_unlock();

		thread_wait(0, 0, cur + t->msec);
	}
}

static void
start_timer(struct timer_thread *t, void (*func)(void), const char *name, int msec)
{
	t->msec = msec;
	t->func = func;
	t->name = name;
	int r = thread_create(0, name, &net_timer, (uint32_t)t);
	if (r < 0)
		panic("cannot create timer thread: %s", e2s(r));
}

static void
tcpip_init_done(void *arg)
{
	uint32_t *done = arg;
	*done = 1;
	thread_wakeup(done);
}

void
serve_init(uint32_t ipaddr, uint32_t netmask, uint32_t gw)
{
	int r;
	lwip_core_lock();

	uint32_t done = 0;
	tcpip_init(&tcpip_init_done, &done);
	lwip_core_unlock();
	thread_wait(&done, 0, (uint32_t)~0);
	lwip_core_lock();

	lwip_init(&nif, &output_envid, ipaddr, netmask, gw);

	start_timer(&t_arp, &etharp_tmr, "arp timer", ARP_TMR_INTERVAL);
	start_timer(&t_tcpf, &tcp_fasttmr, "tcp f timer", TCP_FAST_INTERVAL);
	start_timer(&t_tcps, &tcp_slowtmr, "tcp s timer", TCP_SLOW_INTERVAL);

	struct in_addr ia = {ipaddr};
	cprintf("ns: %02x:%02x:%02x:%02x:%02x:%02x" 
		" bound to static IP %s\n", 
		nif.hwaddr[0], nif.hwaddr[1], nif.hwaddr[2],
		nif.hwaddr[3], nif.hwaddr[4], nif.hwaddr[5],
		inet_ntoa(ia));

	lwip_core_unlock();

	cprintf("NS: TCP/IP initialized.\n");
}

static void
process_timer(envid_t envid) {
	uint32_t start, now, to;

	if (envid != timer_envid) {
		cprintf("NS: received timer interrupt from envid %x not timer env\n", envid);
		return;
	}

	start = sys_time_msec();
	thread_yield();
	now = sys_time_msec();

	to = TIMER_INTERVAL - (now - start);
	ipc_send(envid, to, 0, 0);
}

struct st_args {
	int32_t reqno;
	uint32_t whom;
	union Nsipc *req;
};

static void
serve_thread(uint32_t a) {
	struct st_args *args = (struct st_args *)a;
	union Nsipc *req = args->req;
	int r;

	switch (args->reqno) {
	case NSREQ_ACCEPT:
	{
		struct Nsret_accept ret;
		r = lwip_accept(req->accept.req_s, &ret.ret_addr,
				&ret.ret_addrlen);
		memmove(req, &ret, sizeof ret);
		break;
	}
	case NSREQ_BIND:
		r = lwip_bind(req->bind.req_s, &req->bind.req_name,
			      req->bind.req_namelen);
		break;
	case NSREQ_SHUTDOWN:
		r = lwip_shutdown(req->shutdown.req_s, req->shutdown.req_how);
		break;
	case NSREQ_CLOSE:
		r = lwip_close(req->close.req_s);
		break;
	case NSREQ_CONNECT:
		r = lwip_connect(req->connect.req_s, &req->connect.req_name,
				 req->connect.req_namelen);
		break;
	case NSREQ_LISTEN:
		r = lwip_listen(req->listen.req_s, req->listen.req_backlog);
		break;
	case NSREQ_RECV:
		// Note that we read the request fields before we
		// overwrite it with the response data.
		r = lwip_recv(req->recv.req_s, req->recvRet.ret_buf,
			      req->recv.req_len, req->recv.req_flags);
		break;
	case NSREQ_SEND:
		r = lwip_send(req->send.req_s, &req->send.req_buf,
			      req->send.req_size, req->send.req_flags);
		break;
	case NSREQ_SOCKET:
		r = lwip_socket(req->socket.req_domain, req->socket.req_type,
				req->socket.req_protocol);
		break;
	case NSREQ_INPUT:
		jif_input(&nif, (void *)&req->pkt);
		r = 0;
		break;
	default:
		cprintf("Invalid request code %d from %08x\n", args->whom, args->req);
		r = -E_INVAL;
		break;
	}

	if (r == -1) {
		char buf[100];
		snprintf(buf, sizeof buf, "ns req type %d", args->reqno);
		perror(buf);
	}

	if (args->reqno != NSREQ_INPUT)
		ipc_send(args->whom, r, 0, 0);

	put_buffer(args->req);
	sys_page_unmap(0, (void*) args->req);
	free(args);
}

void
serve(void) {
	int32_t reqno;
	uint32_t whom;
	int i, perm;
	void *va;
	
	while (1) {
		// ipc_recv will block the entire process, so we flush
		// all pending work from other threads.  We limit the
		// number of yields in case there's a rogue thread.
		for (i = 0; thread_wakeups_pending() && i < 32; ++i)
			thread_yield();

		perm = 0;
		va = get_buffer();
		reqno = ipc_recv((int32_t *) &whom, (void *) va, &perm);
		if (debug) {
			cprintf("ns req %d from %08x\n", reqno, whom);
		}

		// first take care of requests that do not contain an argument page
		if (reqno == NSREQ_TIMER) {
			process_timer(whom);
			put_buffer(va);
			continue;
		}

		// All remaining requests must contain an argument page
		if (!(perm & PTE_P)) {
			cprintf("Invalid request from %08x: no argument page\n", whom);
			continue; // just leave it hanging...
		}

		// Since some lwIP socket calls will block, create a thread and
		// process the rest of the request in the thread.
		struct st_args *args = malloc(sizeof(struct st_args));
		if (!args)
			panic("could not allocate thread args structure");

		args->reqno = reqno;
		args->whom = whom;
		args->req = va;

		thread_create(0, "serve_thread", serve_thread, (uint32_t)args);
		thread_yield(); // let the thread created run
	}
}

static void
tmain(uint32_t arg) {
	serve_init(inet_addr(IP),
		   inet_addr(MASK),
		   inet_addr(DEFAULT));
	serve();
}

void
umain(void)
{
  800058:	55                   	push   %ebp
  800059:	89 e5                	mov    %esp,%ebp
  80005b:	53                   	push   %ebx
  80005c:	83 ec 14             	sub    $0x14,%esp
	envid_t ns_envid = sys_getenvid();
  80005f:	e8 39 17 00 00       	call   80179d <sys_getenvid>
  800064:	89 c3                	mov    %eax,%ebx

	binaryname = "ns";
  800066:	c7 05 00 80 81 00 a0 	movl   $0x8120a0,0x818000
  80006d:	20 81 00 

	// fork off the timer thread which will send us periodic messages
	timer_envid = fork();
  800070:	e8 04 1c 00 00       	call   801c79 <fork>
  800075:	a3 64 83 81 00       	mov    %eax,0x818364
	if (timer_envid < 0)
  80007a:	85 c0                	test   %eax,%eax
  80007c:	79 1c                	jns    80009a <umain+0x42>
		panic("error forking");
  80007e:	c7 44 24 08 a3 20 81 	movl   $0x8120a3,0x8(%esp)
  800085:	00 
  800086:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
  80008d:	00 
  80008e:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  800095:	e8 f2 07 00 00       	call   80088c <_panic>
	else if (timer_envid == 0) {
  80009a:	85 c0                	test   %eax,%eax
  80009c:	75 15                	jne    8000b3 <umain+0x5b>
		timer(ns_envid, TIMER_INTERVAL);
  80009e:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  8000a5:	00 
  8000a6:	89 1c 24             	mov    %ebx,(%esp)
  8000a9:	e8 b2 06 00 00       	call   800760 <timer>
  8000ae:	e9 a3 00 00 00       	jmp    800156 <umain+0xfe>
		return;
	}

	// fork off the input thread which will poll the NIC driver for input
	// packets
	input_envid = fork();
  8000b3:	e8 c1 1b 00 00       	call   801c79 <fork>
  8000b8:	a3 68 83 81 00       	mov    %eax,0x818368
	if (input_envid < 0)
  8000bd:	85 c0                	test   %eax,%eax
  8000bf:	79 1c                	jns    8000dd <umain+0x85>
		panic("error forking");
  8000c1:	c7 44 24 08 a3 20 81 	movl   $0x8120a3,0x8(%esp)
  8000c8:	00 
  8000c9:	c7 44 24 04 4d 01 00 	movl   $0x14d,0x4(%esp)
  8000d0:	00 
  8000d1:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  8000d8:	e8 af 07 00 00       	call   80088c <_panic>
	else if (input_envid == 0) {
  8000dd:	85 c0                	test   %eax,%eax
  8000df:	75 0a                	jne    8000eb <umain+0x93>
		input(ns_envid);
  8000e1:	89 1c 24             	mov    %ebx,(%esp)
  8000e4:	e8 0b 07 00 00       	call   8007f4 <input>
  8000e9:	eb 6b                	jmp    800156 <umain+0xfe>
		return;
	}

	// fork off the output thread that will send the packets to the NIC
	// driver
	output_envid = fork();
  8000eb:	90                   	nop    
  8000ec:	8d 74 26 00          	lea    0x0(%esi),%esi
  8000f0:	e8 84 1b 00 00       	call   801c79 <fork>
  8000f5:	a3 6c 83 81 00       	mov    %eax,0x81836c
	if (output_envid < 0)
  8000fa:	85 c0                	test   %eax,%eax
  8000fc:	79 1c                	jns    80011a <umain+0xc2>
		panic("error forking");
  8000fe:	c7 44 24 08 a3 20 81 	movl   $0x8120a3,0x8(%esp)
  800105:	00 
  800106:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
  80010d:	00 
  80010e:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  800115:	e8 72 07 00 00       	call   80088c <_panic>
	else if (output_envid == 0) {
  80011a:	85 c0                	test   %eax,%eax
  80011c:	75 0a                	jne    800128 <umain+0xd0>
		output(ns_envid);
  80011e:	89 1c 24             	mov    %ebx,(%esp)
  800121:	e8 de 06 00 00       	call   800804 <output>
  800126:	eb 2e                	jmp    800156 <umain+0xfe>
		return;
	}

	// lwIP requires a user threading library; start the library and jump
	// into a thread to continue initialization. 
	thread_init();
  800128:	e8 23 d9 00 00       	call   80da50 <thread_init>
	thread_create(0, "main", tmain, 0);
  80012d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  800134:	00 
  800135:	c7 44 24 08 f2 06 80 	movl   $0x8006f2,0x8(%esp)
  80013c:	00 
  80013d:	c7 44 24 04 bc 20 81 	movl   $0x8120bc,0x4(%esp)
  800144:	00 
  800145:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80014c:	e8 e1 da 00 00       	call   80dc32 <thread_create>
	thread_yield();
  800151:	e8 a0 d9 00 00       	call   80daf6 <thread_yield>
	// never coming here!
}
  800156:	83 c4 14             	add    $0x14,%esp
  800159:	5b                   	pop    %ebx
  80015a:	5d                   	pop    %ebp
  80015b:	c3                   	ret    

0080015c <serve>:
  80015c:	55                   	push   %ebp
  80015d:	89 e5                	mov    %esp,%ebp
  80015f:	57                   	push   %edi
  800160:	56                   	push   %esi
  800161:	53                   	push   %ebx
  800162:	83 ec 2c             	sub    $0x2c,%esp
  800165:	bb 00 00 00 00       	mov    $0x0,%ebx
  80016a:	eb 08                	jmp    800174 <serve+0x18>
  80016c:	e8 85 d9 00 00       	call   80daf6 <thread_yield>
  800171:	83 c3 01             	add    $0x1,%ebx
  800174:	e8 28 d9 00 00       	call   80daa1 <thread_wakeups_pending>
  800179:	85 c0                	test   %eax,%eax
  80017b:	74 05                	je     800182 <serve+0x26>
  80017d:	83 fb 20             	cmp    $0x20,%ebx
  800180:	75 ea                	jne    80016c <serve+0x10>
  800182:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  800189:	ba 00 00 00 00       	mov    $0x0,%edx
  80018e:	83 3c 95 80 83 81 00 	cmpl   $0x0,0x818380(,%edx,4)
  800195:	00 
  800196:	74 24                	je     8001bc <serve+0x60>
  800198:	83 c2 01             	add    $0x1,%edx
  80019b:	83 fa 14             	cmp    $0x14,%edx
  80019e:	75 ee                	jne    80018e <serve+0x32>
  8001a0:	c7 44 24 08 c1 20 81 	movl   $0x8120c1,0x8(%esp)
  8001a7:	00 
  8001a8:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
  8001af:	00 
  8001b0:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  8001b7:	e8 d0 06 00 00       	call   80088c <_panic>
  8001bc:	89 d0                	mov    %edx,%eax
  8001be:	c1 e0 0c             	shl    $0xc,%eax
  8001c1:	8d b0 00 b0 fe 0f    	lea    0xffeb000(%eax),%esi
  8001c7:	c7 04 95 80 83 81 00 	movl   $0x1,0x818380(,%edx,4)
  8001ce:	01 00 00 00 
  8001d2:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  8001d5:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  8001d8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8001dc:	89 74 24 04          	mov    %esi,0x4(%esp)
  8001e0:	89 14 24             	mov    %edx,(%esp)
  8001e3:	e8 4c 1c 00 00       	call   801e34 <ipc_recv>
  8001e8:	89 c3                	mov    %eax,%ebx
  8001ea:	83 f8 0c             	cmp    $0xc,%eax
  8001ed:	75 5f                	jne    80024e <serve+0xf2>
  8001ef:	8b 7d f0             	mov    0xfffffff0(%ebp),%edi
  8001f2:	3b 3d 64 83 81 00    	cmp    0x818364,%edi
  8001f8:	74 12                	je     80020c <serve+0xb0>
  8001fa:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8001fe:	c7 04 24 50 21 81 00 	movl   $0x812150,(%esp)
  800205:	e8 4f 07 00 00       	call   800959 <cprintf>
  80020a:	eb 36                	jmp    800242 <serve+0xe6>
  80020c:	e8 5a 12 00 00       	call   80146b <sys_time_msec>
  800211:	89 c3                	mov    %eax,%ebx
  800213:	e8 de d8 00 00       	call   80daf6 <thread_yield>
  800218:	e8 4e 12 00 00       	call   80146b <sys_time_msec>
  80021d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  800224:	00 
  800225:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80022c:	00 
  80022d:	29 d8                	sub    %ebx,%eax
  80022f:	ba fa 00 00 00       	mov    $0xfa,%edx
  800234:	29 c2                	sub    %eax,%edx
  800236:	89 54 24 04          	mov    %edx,0x4(%esp)
  80023a:	89 3c 24             	mov    %edi,(%esp)
  80023d:	e8 3e 1b 00 00       	call   801d80 <ipc_send>
  800242:	89 f0                	mov    %esi,%eax
  800244:	e8 f7 fd ff ff       	call   800040 <put_buffer>
  800249:	e9 17 ff ff ff       	jmp    800165 <serve+0x9>
  80024e:	f6 45 ec 01          	testb  $0x1,0xffffffec(%ebp)
  800252:	75 18                	jne    80026c <serve+0x110>
  800254:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  800257:	89 44 24 04          	mov    %eax,0x4(%esp)
  80025b:	c7 04 24 8c 21 81 00 	movl   $0x81218c,(%esp)
  800262:	e8 f2 06 00 00       	call   800959 <cprintf>
  800267:	e9 f9 fe ff ff       	jmp    800165 <serve+0x9>
  80026c:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  800273:	e8 5c 2b 00 00       	call   802dd4 <malloc>
  800278:	89 c2                	mov    %eax,%edx
  80027a:	85 c0                	test   %eax,%eax
  80027c:	75 1c                	jne    80029a <serve+0x13e>
  80027e:	c7 44 24 08 bc 21 81 	movl   $0x8121bc,0x8(%esp)
  800285:	00 
  800286:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
  80028d:	00 
  80028e:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  800295:	e8 f2 05 00 00       	call   80088c <_panic>
  80029a:	89 18                	mov    %ebx,(%eax)
  80029c:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80029f:	89 42 04             	mov    %eax,0x4(%edx)
  8002a2:	89 72 08             	mov    %esi,0x8(%edx)
  8002a5:	89 54 24 0c          	mov    %edx,0xc(%esp)
  8002a9:	c7 44 24 08 cf 02 80 	movl   $0x8002cf,0x8(%esp)
  8002b0:	00 
  8002b1:	c7 44 24 04 d5 20 81 	movl   $0x8120d5,0x4(%esp)
  8002b8:	00 
  8002b9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8002c0:	e8 6d d9 00 00       	call   80dc32 <thread_create>
  8002c5:	e8 2c d8 00 00       	call   80daf6 <thread_yield>
  8002ca:	e9 96 fe ff ff       	jmp    800165 <serve+0x9>

008002cf <serve_thread>:
  8002cf:	55                   	push   %ebp
  8002d0:	89 e5                	mov    %esp,%ebp
  8002d2:	81 ec 98 00 00 00    	sub    $0x98,%esp
  8002d8:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8002db:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8002de:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8002e1:	8b 75 08             	mov    0x8(%ebp),%esi
  8002e4:	8b 7e 08             	mov    0x8(%esi),%edi
  8002e7:	83 3e 0a             	cmpl   $0xa,(%esi)
  8002ea:	0f 87 34 01 00 00    	ja     800424 <serve_thread+0x155>
  8002f0:	8b 06                	mov    (%esi),%eax
  8002f2:	ff 24 85 88 22 81 00 	jmp    *0x812288(,%eax,4)
  8002f9:	8d 45 a0             	lea    0xffffffa0(%ebp),%eax
  8002fc:	89 44 24 08          	mov    %eax,0x8(%esp)
  800300:	8d 45 90             	lea    0xffffff90(%ebp),%eax
  800303:	89 44 24 04          	mov    %eax,0x4(%esp)
  800307:	8b 07                	mov    (%edi),%eax
  800309:	89 04 24             	mov    %eax,(%esp)
  80030c:	e8 c6 45 00 00       	call   8048d7 <lwip_accept>
  800311:	89 c3                	mov    %eax,%ebx
  800313:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  80031a:	00 
  80031b:	8d 45 90             	lea    0xffffff90(%ebp),%eax
  80031e:	89 44 24 04          	mov    %eax,0x4(%esp)
  800322:	89 3c 24             	mov    %edi,(%esp)
  800325:	e8 c0 0e 00 00       	call   8011ea <memmove>
  80032a:	e9 13 01 00 00       	jmp    800442 <serve_thread+0x173>
  80032f:	8b 47 14             	mov    0x14(%edi),%eax
  800332:	89 44 24 08          	mov    %eax,0x8(%esp)
  800336:	8d 47 04             	lea    0x4(%edi),%eax
  800339:	89 44 24 04          	mov    %eax,0x4(%esp)
  80033d:	8b 07                	mov    (%edi),%eax
  80033f:	89 04 24             	mov    %eax,(%esp)
  800342:	e8 d7 44 00 00       	call   80481e <lwip_bind>
  800347:	89 c3                	mov    %eax,%ebx
  800349:	e9 f4 00 00 00       	jmp    800442 <serve_thread+0x173>
  80034e:	8b 47 04             	mov    0x4(%edi),%eax
  800351:	89 44 24 04          	mov    %eax,0x4(%esp)
  800355:	8b 07                	mov    (%edi),%eax
  800357:	89 04 24             	mov    %eax,(%esp)
  80035a:	e8 69 43 00 00       	call   8046c8 <lwip_shutdown>
  80035f:	89 c3                	mov    %eax,%ebx
  800361:	e9 dc 00 00 00       	jmp    800442 <serve_thread+0x173>
  800366:	8b 07                	mov    (%edi),%eax
  800368:	89 04 24             	mov    %eax,(%esp)
  80036b:	e8 dc 42 00 00       	call   80464c <lwip_close>
  800370:	89 c3                	mov    %eax,%ebx
  800372:	e9 cb 00 00 00       	jmp    800442 <serve_thread+0x173>
  800377:	8b 47 14             	mov    0x14(%edi),%eax
  80037a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80037e:	8d 47 04             	lea    0x4(%edi),%eax
  800381:	89 44 24 04          	mov    %eax,0x4(%esp)
  800385:	8b 07                	mov    (%edi),%eax
  800387:	89 04 24             	mov    %eax,(%esp)
  80038a:	e8 d6 43 00 00       	call   804765 <lwip_connect>
  80038f:	89 c3                	mov    %eax,%ebx
  800391:	e9 ac 00 00 00       	jmp    800442 <serve_thread+0x173>
  800396:	8b 47 04             	mov    0x4(%edi),%eax
  800399:	89 44 24 04          	mov    %eax,0x4(%esp)
  80039d:	8b 07                	mov    (%edi),%eax
  80039f:	89 04 24             	mov    %eax,(%esp)
  8003a2:	e8 34 43 00 00       	call   8046db <lwip_listen>
  8003a7:	89 c3                	mov    %eax,%ebx
  8003a9:	e9 94 00 00 00       	jmp    800442 <serve_thread+0x173>
  8003ae:	8b 47 08             	mov    0x8(%edi),%eax
  8003b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8003b5:	8b 47 04             	mov    0x4(%edi),%eax
  8003b8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8003bc:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8003c0:	8b 07                	mov    (%edi),%eax
  8003c2:	89 04 24             	mov    %eax,(%esp)
  8003c5:	e8 11 42 00 00       	call   8045db <lwip_recv>
  8003ca:	89 c3                	mov    %eax,%ebx
  8003cc:	eb 74                	jmp    800442 <serve_thread+0x173>
  8003ce:	8b 47 08             	mov    0x8(%edi),%eax
  8003d1:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8003d5:	8b 47 04             	mov    0x4(%edi),%eax
  8003d8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8003dc:	8d 47 0c             	lea    0xc(%edi),%eax
  8003df:	89 44 24 04          	mov    %eax,0x4(%esp)
  8003e3:	8b 07                	mov    (%edi),%eax
  8003e5:	89 04 24             	mov    %eax,(%esp)
  8003e8:	e8 5f 3d 00 00       	call   80414c <lwip_send>
  8003ed:	89 c3                	mov    %eax,%ebx
  8003ef:	eb 51                	jmp    800442 <serve_thread+0x173>
  8003f1:	8b 47 08             	mov    0x8(%edi),%eax
  8003f4:	89 44 24 08          	mov    %eax,0x8(%esp)
  8003f8:	8b 47 04             	mov    0x4(%edi),%eax
  8003fb:	89 44 24 04          	mov    %eax,0x4(%esp)
  8003ff:	8b 07                	mov    (%edi),%eax
  800401:	89 04 24             	mov    %eax,(%esp)
  800404:	e8 5d 3c 00 00       	call   804066 <lwip_socket>
  800409:	89 c3                	mov    %eax,%ebx
  80040b:	eb 35                	jmp    800442 <serve_thread+0x173>
  80040d:	89 7c 24 04          	mov    %edi,0x4(%esp)
  800411:	c7 04 24 80 e5 b3 00 	movl   $0xb3e580,(%esp)
  800418:	e8 64 dc 00 00       	call   80e081 <jif_input>
  80041d:	bb 00 00 00 00       	mov    $0x0,%ebx
  800422:	eb 4c                	jmp    800470 <serve_thread+0x1a1>
  800424:	89 7c 24 08          	mov    %edi,0x8(%esp)
  800428:	8b 46 04             	mov    0x4(%esi),%eax
  80042b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80042f:	c7 04 24 e8 21 81 00 	movl   $0x8121e8,(%esp)
  800436:	e8 1e 05 00 00       	call   800959 <cprintf>
  80043b:	bb fd ff ff ff       	mov    $0xfffffffd,%ebx
  800440:	eb 2e                	jmp    800470 <serve_thread+0x1a1>
  800442:	83 fb ff             	cmp    $0xffffffff,%ebx
  800445:	75 29                	jne    800470 <serve_thread+0x1a1>
  800447:	8b 06                	mov    (%esi),%eax
  800449:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80044d:	c7 44 24 08 e2 20 81 	movl   $0x8120e2,0x8(%esp)
  800454:	00 
  800455:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
  80045c:	00 
  80045d:	8d 7d 90             	lea    0xffffff90(%ebp),%edi
  800460:	89 3c 24             	mov    %edi,(%esp)
  800463:	e8 c7 0a 00 00       	call   800f2f <snprintf>
  800468:	89 3c 24             	mov    %edi,(%esp)
  80046b:	e8 d7 d9 00 00       	call   80de47 <perror>
  800470:	83 3e 0a             	cmpl   $0xa,(%esi)
  800473:	74 1f                	je     800494 <serve_thread+0x1c5>
  800475:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80047c:	00 
  80047d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  800484:	00 
  800485:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  800489:	8b 46 04             	mov    0x4(%esi),%eax
  80048c:	89 04 24             	mov    %eax,(%esp)
  80048f:	e8 ec 18 00 00       	call   801d80 <ipc_send>
  800494:	8b 46 08             	mov    0x8(%esi),%eax
  800497:	e8 a4 fb ff ff       	call   800040 <put_buffer>
  80049c:	8b 46 08             	mov    0x8(%esi),%eax
  80049f:	89 44 24 04          	mov    %eax,0x4(%esp)
  8004a3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8004aa:	e8 9f 11 00 00       	call   80164e <sys_page_unmap>
  8004af:	89 34 24             	mov    %esi,(%esp)
  8004b2:	e8 49 28 00 00       	call   802d00 <free>
  8004b7:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8004ba:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8004bd:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8004c0:	89 ec                	mov    %ebp,%esp
  8004c2:	5d                   	pop    %ebp
  8004c3:	c3                   	ret    

008004c4 <net_timer>:
  8004c4:	55                   	push   %ebp
  8004c5:	89 e5                	mov    %esp,%ebp
  8004c7:	56                   	push   %esi
  8004c8:	53                   	push   %ebx
  8004c9:	83 ec 10             	sub    $0x10,%esp
  8004cc:	8b 75 08             	mov    0x8(%ebp),%esi
  8004cf:	e8 97 0f 00 00       	call   80146b <sys_time_msec>
  8004d4:	89 c3                	mov    %eax,%ebx
  8004d6:	e8 7b cc 00 00       	call   80d156 <lwip_core_lock>
  8004db:	ff 56 04             	call   *0x4(%esi)
  8004de:	66 90                	xchg   %ax,%ax
  8004e0:	e8 76 cc 00 00       	call   80d15b <lwip_core_unlock>
  8004e5:	89 d8                	mov    %ebx,%eax
  8004e7:	03 06                	add    (%esi),%eax
  8004e9:	89 44 24 08          	mov    %eax,0x8(%esp)
  8004ed:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8004f4:	00 
  8004f5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8004fc:	e8 7b d8 00 00       	call   80dd7c <thread_wait>
  800501:	eb cc                	jmp    8004cf <net_timer+0xb>

00800503 <start_timer>:
  800503:	55                   	push   %ebp
  800504:	89 e5                	mov    %esp,%ebp
  800506:	53                   	push   %ebx
  800507:	83 ec 14             	sub    $0x14,%esp
  80050a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80050d:	89 18                	mov    %ebx,(%eax)
  80050f:	89 50 04             	mov    %edx,0x4(%eax)
  800512:	89 48 08             	mov    %ecx,0x8(%eax)
  800515:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800519:	c7 44 24 08 c4 04 80 	movl   $0x8004c4,0x8(%esp)
  800520:	00 
  800521:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  800525:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80052c:	e8 01 d7 00 00       	call   80dc32 <thread_create>
  800531:	85 c0                	test   %eax,%eax
  800533:	79 28                	jns    80055d <start_timer+0x5a>
  800535:	89 04 24             	mov    %eax,(%esp)
  800538:	e8 fb d8 00 00       	call   80de38 <e2s>
  80053d:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800541:	c7 44 24 08 0c 22 81 	movl   $0x81220c,0x8(%esp)
  800548:	00 
  800549:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
  800550:	00 
  800551:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  800558:	e8 2f 03 00 00       	call   80088c <_panic>
  80055d:	83 c4 14             	add    $0x14,%esp
  800560:	5b                   	pop    %ebx
  800561:	5d                   	pop    %ebp
  800562:	c3                   	ret    

00800563 <serve_init>:
  800563:	55                   	push   %ebp
  800564:	89 e5                	mov    %esp,%ebp
  800566:	56                   	push   %esi
  800567:	53                   	push   %ebx
  800568:	83 ec 30             	sub    $0x30,%esp
  80056b:	8b 75 08             	mov    0x8(%ebp),%esi
  80056e:	e8 e3 cb 00 00       	call   80d156 <lwip_core_lock>
  800573:	c7 45 f4 00 00 00 00 	movl   $0x0,0xfffffff4(%ebp)
  80057a:	8d 5d f4             	lea    0xfffffff4(%ebp),%ebx
  80057d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  800581:	c7 04 24 45 07 80 00 	movl   $0x800745,(%esp)
  800588:	e8 46 45 00 00       	call   804ad3 <tcpip_init>
  80058d:	e8 c9 cb 00 00       	call   80d15b <lwip_core_unlock>
  800592:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%esp)
  800599:	ff 
  80059a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8005a1:	00 
  8005a2:	89 1c 24             	mov    %ebx,(%esp)
  8005a5:	e8 d2 d7 00 00       	call   80dd7c <thread_wait>
  8005aa:	e8 a7 cb 00 00       	call   80d156 <lwip_core_lock>
  8005af:	89 75 f0             	mov    %esi,0xfffffff0(%ebp)
  8005b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  8005b5:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  8005b8:	8b 45 10             	mov    0x10(%ebp),%eax
  8005bb:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  8005be:	c7 44 24 18 74 97 80 	movl   $0x809774,0x18(%esp)
  8005c5:	00 
  8005c6:	c7 44 24 14 80 de 80 	movl   $0x80de80,0x14(%esp)
  8005cd:	00 
  8005ce:	c7 44 24 10 6c 83 81 	movl   $0x81836c,0x10(%esp)
  8005d5:	00 
  8005d6:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  8005d9:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8005dd:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  8005e0:	89 44 24 08          	mov    %eax,0x8(%esp)
  8005e4:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  8005e7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8005eb:	c7 04 24 80 e5 b3 00 	movl   $0xb3e580,(%esp)
  8005f2:	e8 c6 6f 00 00       	call   8075bd <netif_add>
  8005f7:	85 c0                	test   %eax,%eax
  8005f9:	75 1c                	jne    800617 <serve_init+0xb4>
  8005fb:	c7 44 24 08 2c 22 81 	movl   $0x81222c,0x8(%esp)
  800602:	00 
  800603:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
  80060a:	00 
  80060b:	c7 04 24 b1 20 81 00 	movl   $0x8120b1,(%esp)
  800612:	e8 75 02 00 00       	call   80088c <_panic>
  800617:	c7 04 24 80 e5 b3 00 	movl   $0xb3e580,(%esp)
  80061e:	e8 21 6e 00 00       	call   807444 <netif_set_default>
  800623:	c7 04 24 80 e5 b3 00 	movl   $0xb3e580,(%esp)
  80062a:	e8 9e 6e 00 00       	call   8074cd <netif_set_up>
  80062f:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  800636:	b9 f1 20 81 00       	mov    $0x8120f1,%ecx
  80063b:	ba ab cd 80 00       	mov    $0x80cdab,%edx
  800640:	b8 40 83 81 00       	mov    $0x818340,%eax
  800645:	e8 b9 fe ff ff       	call   800503 <start_timer>
  80064a:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  800651:	b9 fb 20 81 00       	mov    $0x8120fb,%ecx
  800656:	ba 58 85 80 00       	mov    $0x808558,%edx
  80065b:	b8 4c 83 81 00       	mov    $0x81834c,%eax
  800660:	e8 9e fe ff ff       	call   800503 <start_timer>
  800665:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  80066c:	b9 07 21 81 00       	mov    $0x812107,%ecx
  800671:	ba 80 8e 80 00       	mov    $0x808e80,%edx
  800676:	b8 58 83 81 00       	mov    $0x818358,%eax
  80067b:	e8 83 fe ff ff       	call   800503 <start_timer>
  800680:	89 34 24             	mov    %esi,(%esp)
  800683:	e8 28 a1 00 00       	call   80a7b0 <inet_ntoa>
  800688:	89 44 24 1c          	mov    %eax,0x1c(%esp)
  80068c:	0f b6 05 aa e5 b3 00 	movzbl 0xb3e5aa,%eax
  800693:	89 44 24 18          	mov    %eax,0x18(%esp)
  800697:	0f b6 05 a9 e5 b3 00 	movzbl 0xb3e5a9,%eax
  80069e:	89 44 24 14          	mov    %eax,0x14(%esp)
  8006a2:	0f b6 05 a8 e5 b3 00 	movzbl 0xb3e5a8,%eax
  8006a9:	89 44 24 10          	mov    %eax,0x10(%esp)
  8006ad:	0f b6 05 a7 e5 b3 00 	movzbl 0xb3e5a7,%eax
  8006b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8006b8:	0f b6 05 a6 e5 b3 00 	movzbl 0xb3e5a6,%eax
  8006bf:	89 44 24 08          	mov    %eax,0x8(%esp)
  8006c3:	0f b6 05 a5 e5 b3 00 	movzbl 0xb3e5a5,%eax
  8006ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  8006ce:	c7 04 24 4c 22 81 00 	movl   $0x81224c,(%esp)
  8006d5:	e8 7f 02 00 00       	call   800959 <cprintf>
  8006da:	e8 7c ca 00 00       	call   80d15b <lwip_core_unlock>
  8006df:	c7 04 24 13 21 81 00 	movl   $0x812113,(%esp)
  8006e6:	e8 6e 02 00 00       	call   800959 <cprintf>
  8006eb:	83 c4 30             	add    $0x30,%esp
  8006ee:	5b                   	pop    %ebx
  8006ef:	5e                   	pop    %esi
  8006f0:	5d                   	pop    %ebp
  8006f1:	c3                   	ret    

008006f2 <tmain>:
  8006f2:	55                   	push   %ebp
  8006f3:	89 e5                	mov    %esp,%ebp
  8006f5:	83 ec 18             	sub    $0x18,%esp
  8006f8:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  8006fb:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  8006fe:	c7 04 24 2c 21 81 00 	movl   $0x81212c,(%esp)
  800705:	e8 6e a3 00 00       	call   80aa78 <inet_addr>
  80070a:	89 c6                	mov    %eax,%esi
  80070c:	c7 04 24 35 21 81 00 	movl   $0x812135,(%esp)
  800713:	e8 60 a3 00 00       	call   80aa78 <inet_addr>
  800718:	89 c3                	mov    %eax,%ebx
  80071a:	c7 04 24 43 21 81 00 	movl   $0x812143,(%esp)
  800721:	e8 52 a3 00 00       	call   80aa78 <inet_addr>
  800726:	89 74 24 08          	mov    %esi,0x8(%esp)
  80072a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80072e:	89 04 24             	mov    %eax,(%esp)
  800731:	e8 2d fe ff ff       	call   800563 <serve_init>
  800736:	e8 21 fa ff ff       	call   80015c <serve>
  80073b:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80073e:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  800741:	89 ec                	mov    %ebp,%esp
  800743:	5d                   	pop    %ebp
  800744:	c3                   	ret    

00800745 <tcpip_init_done>:
  800745:	55                   	push   %ebp
  800746:	89 e5                	mov    %esp,%ebp
  800748:	83 ec 08             	sub    $0x8,%esp
  80074b:	8b 45 08             	mov    0x8(%ebp),%eax
  80074e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  800754:	89 04 24             	mov    %eax,(%esp)
  800757:	e8 23 d3 00 00       	call   80da7f <thread_wakeup>
  80075c:	c9                   	leave  
  80075d:	c3                   	ret    
	...

00800760 <timer>:
#include "ns.h"

void
timer(envid_t ns_envid, uint32_t initial_to) {
  800760:	55                   	push   %ebp
  800761:	89 e5                	mov    %esp,%ebp
  800763:	57                   	push   %edi
  800764:	56                   	push   %esi
  800765:	53                   	push   %ebx
  800766:	83 ec 2c             	sub    $0x2c,%esp
  800769:	8b 7d 08             	mov    0x8(%ebp),%edi
	uint32_t stop = sys_time_msec() + initial_to;
  80076c:	e8 fa 0c 00 00       	call   80146b <sys_time_msec>
  800771:	89 c3                	mov    %eax,%ebx
  800773:	03 5d 0c             	add    0xc(%ebp),%ebx

	binaryname = "ns_timer";
  800776:	c7 05 00 80 81 00 b4 	movl   $0x8122b4,0x818000
  80077d:	22 81 00 
  800780:	eb 05                	jmp    800787 <timer+0x27>

	while (1) {
		while(sys_time_msec() < stop) {
			sys_yield();
  800782:	e8 e2 0f 00 00       	call   801769 <sys_yield>
  800787:	e8 df 0c 00 00       	call   80146b <sys_time_msec>
  80078c:	39 c3                	cmp    %eax,%ebx
  80078e:	66 90                	xchg   %ax,%ax
  800790:	77 f0                	ja     800782 <timer+0x22>
		}

		ipc_send(ns_envid, NSREQ_TIMER, 0, 0);
  800792:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  800799:	00 
  80079a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8007a1:	00 
  8007a2:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
  8007a9:	00 
  8007aa:	89 3c 24             	mov    %edi,(%esp)
  8007ad:	e8 ce 15 00 00       	call   801d80 <ipc_send>
  8007b2:	8d 75 f0             	lea    0xfffffff0(%ebp),%esi

		while (1) {
			uint32_t to, whom;
			to = ipc_recv((int32_t *) &whom, 0, 0);
  8007b5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8007bc:	00 
  8007bd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8007c4:	00 
  8007c5:	89 34 24             	mov    %esi,(%esp)
  8007c8:	e8 67 16 00 00       	call   801e34 <ipc_recv>
  8007cd:	89 c3                	mov    %eax,%ebx

			if (whom != ns_envid) {
  8007cf:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  8007d2:	39 c7                	cmp    %eax,%edi
  8007d4:	74 12                	je     8007e8 <timer+0x88>
				cprintf("NS TIMER: timer thread got IPC message from env %x not NS\n", whom);
  8007d6:	89 44 24 04          	mov    %eax,0x4(%esp)
  8007da:	c7 04 24 c0 22 81 00 	movl   $0x8122c0,(%esp)
  8007e1:	e8 73 01 00 00       	call   800959 <cprintf>
  8007e6:	eb cd                	jmp    8007b5 <timer+0x55>
				continue;
			}

			stop = sys_time_msec() + to;
  8007e8:	e8 7e 0c 00 00       	call   80146b <sys_time_msec>
  8007ed:	01 c3                	add    %eax,%ebx
  8007ef:	90                   	nop    
  8007f0:	eb 95                	jmp    800787 <timer+0x27>
	...

008007f4 <input>:
extern union Nsipc nsipcbuf;

void
input(envid_t ns_envid)
{
  8007f4:	55                   	push   %ebp
  8007f5:	89 e5                	mov    %esp,%ebp
	binaryname = "ns_input";
  8007f7:	c7 05 00 80 81 00 fb 	movl   $0x8122fb,0x818000
  8007fe:	22 81 00 

	// LAB 6: Your code here:
	// 	- read a packet from the device driver
	//	- send it to the network server
	// Hint: When you IPC a page to the network server, it will be
	// reading from it for a while, so don't immediately receive
	// another packet in to the same physical page.
}
  800801:	5d                   	pop    %ebp
  800802:	c3                   	ret    
	...

00800804 <output>:
extern union Nsipc nsipcbuf;

void
output(envid_t ns_envid)
{
  800804:	55                   	push   %ebp
  800805:	89 e5                	mov    %esp,%ebp
	binaryname = "ns_output";
  800807:	c7 05 00 80 81 00 04 	movl   $0x812304,0x818000
  80080e:	23 81 00 

	// LAB 6: Your code here:
	// 	- read a packet from the network server
	//	- send the packet to the device driver
}
  800811:	5d                   	pop    %ebp
  800812:	c3                   	ret    
	...

00800814 <libmain>:
char *binaryname = "(PROGRAM NAME UNKNOWN)";

void
libmain(int argc, char **argv)
{
  800814:	55                   	push   %ebp
  800815:	89 e5                	mov    %esp,%ebp
  800817:	83 ec 18             	sub    $0x18,%esp
  80081a:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80081d:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  800820:	8b 75 08             	mov    0x8(%ebp),%esi
  800823:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	// set env to point at our env structure in envs[].
	// LAB 3: Your code here.
	env = 0;
  800826:	c7 05 b4 e5 b3 00 00 	movl   $0x0,0xb3e5b4
  80082d:	00 00 00 
	env = &envs[ENVX(sys_getenvid())];
  800830:	e8 68 0f 00 00       	call   80179d <sys_getenvid>
  800835:	25 ff 03 00 00       	and    $0x3ff,%eax
  80083a:	6b c0 7c             	imul   $0x7c,%eax,%eax
  80083d:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  800842:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
	// save the name of the program so that panic() can use it
	if (argc > 0)
  800847:	85 f6                	test   %esi,%esi
  800849:	7e 07                	jle    800852 <libmain+0x3e>
		binaryname = argv[0];
  80084b:	8b 03                	mov    (%ebx),%eax
  80084d:	a3 00 80 81 00       	mov    %eax,0x818000

	// call user main routine调用用户主例程
	umain(argc, argv);
  800852:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  800856:	89 34 24             	mov    %esi,(%esp)
  800859:	e8 fa f7 ff ff       	call   800058 <umain>

	// exit gracefully
	exit();
  80085e:	e8 0d 00 00 00       	call   800870 <exit>
}
  800863:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  800866:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  800869:	89 ec                	mov    %ebp,%esp
  80086b:	5d                   	pop    %ebp
  80086c:	c3                   	ret    
  80086d:	00 00                	add    %al,(%eax)
	...

00800870 <exit>:
#include <inc/lib.h>

void
exit(void)
{
  800870:	55                   	push   %ebp
  800871:	89 e5                	mov    %esp,%ebp
  800873:	83 ec 08             	sub    $0x8,%esp
	close_all();
  800876:	e8 9b 1c 00 00       	call   802516 <close_all>
	sys_env_destroy(0);
  80087b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  800882:	e8 4a 0f 00 00       	call   8017d1 <sys_env_destroy>
}
  800887:	c9                   	leave  
  800888:	c3                   	ret    
  800889:	00 00                	add    %al,(%eax)
	...

0080088c <_panic>:
 * which causes JOS to enter the JOS kernel monitor.
 */
void
_panic(const char *file, int line, const char *fmt,...)
{
  80088c:	55                   	push   %ebp
  80088d:	89 e5                	mov    %esp,%ebp
  80088f:	83 ec 28             	sub    $0x28,%esp
	va_list ap;

	va_start(ap, fmt);
  800892:	8d 45 14             	lea    0x14(%ebp),%eax
  800895:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)

	// Print the panic message
	if (argv0)
  800898:	a1 b8 e5 b3 00       	mov    0xb3e5b8,%eax
  80089d:	85 c0                	test   %eax,%eax
  80089f:	74 10                	je     8008b1 <_panic+0x25>
		cprintf("%s: ", argv0);
  8008a1:	89 44 24 04          	mov    %eax,0x4(%esp)
  8008a5:	c7 04 24 25 23 81 00 	movl   $0x812325,(%esp)
  8008ac:	e8 a8 00 00 00       	call   800959 <cprintf>
	cprintf("user panic in %s at %s:%d: ", binaryname, file, line);
  8008b1:	8b 45 0c             	mov    0xc(%ebp),%eax
  8008b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8008b8:	8b 45 08             	mov    0x8(%ebp),%eax
  8008bb:	89 44 24 08          	mov    %eax,0x8(%esp)
  8008bf:	a1 00 80 81 00       	mov    0x818000,%eax
  8008c4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8008c8:	c7 04 24 2a 23 81 00 	movl   $0x81232a,(%esp)
  8008cf:	e8 85 00 00 00       	call   800959 <cprintf>
	vcprintf(fmt, ap);
  8008d4:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  8008d7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8008db:	8b 45 10             	mov    0x10(%ebp),%eax
  8008de:	89 04 24             	mov    %eax,(%esp)
  8008e1:	e8 12 00 00 00       	call   8008f8 <vcprintf>
	cprintf("\n");
  8008e6:	c7 04 24 2a 21 81 00 	movl   $0x81212a,(%esp)
  8008ed:	e8 67 00 00 00       	call   800959 <cprintf>

	// Cause a breakpoint exception
	while (1)
		asm volatile("int3");
  8008f2:	cc                   	int3   
  8008f3:	eb fd                	jmp    8008f2 <_panic+0x66>
  8008f5:	00 00                	add    %al,(%eax)
	...

008008f8 <vcprintf>:
}

int
vcprintf(const char *fmt, va_list ap)
{
  8008f8:	55                   	push   %ebp
  8008f9:	89 e5                	mov    %esp,%ebp
  8008fb:	81 ec 28 01 00 00    	sub    $0x128,%esp
	struct printbuf b;

	b.idx = 0;
  800901:	c7 85 f8 fe ff ff 00 	movl   $0x0,0xfffffef8(%ebp)
  800908:	00 00 00 
	b.cnt = 0;
  80090b:	c7 85 fc fe ff ff 00 	movl   $0x0,0xfffffefc(%ebp)
  800912:	00 00 00 
	vprintfmt((void*)putch, &b, fmt, ap);
  800915:	8b 45 0c             	mov    0xc(%ebp),%eax
  800918:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80091c:	8b 45 08             	mov    0x8(%ebp),%eax
  80091f:	89 44 24 08          	mov    %eax,0x8(%esp)
  800923:	8d 85 f8 fe ff ff    	lea    0xfffffef8(%ebp),%eax
  800929:	89 44 24 04          	mov    %eax,0x4(%esp)
  80092d:	c7 04 24 76 09 80 00 	movl   $0x800976,(%esp)
  800934:	e8 c8 01 00 00       	call   800b01 <vprintfmt>
	sys_cputs(b.buf, b.idx);
  800939:	8b 85 f8 fe ff ff    	mov    0xfffffef8(%ebp),%eax
  80093f:	89 44 24 04          	mov    %eax,0x4(%esp)
  800943:	8d 85 00 ff ff ff    	lea    0xffffff00(%ebp),%eax
  800949:	89 04 24             	mov    %eax,(%esp)
  80094c:	e8 e7 0a 00 00       	call   801438 <sys_cputs>
  800951:	8b 85 fc fe ff ff    	mov    0xfffffefc(%ebp),%eax

	return b.cnt;
}
  800957:	c9                   	leave  
  800958:	c3                   	ret    

00800959 <cprintf>:

int
cprintf(const char *fmt, ...)
{
  800959:	55                   	push   %ebp
  80095a:	89 e5                	mov    %esp,%ebp
  80095c:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
  80095f:	8d 45 0c             	lea    0xc(%ebp),%eax
  800962:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
	cnt = vcprintf(fmt, ap);
  800965:	89 44 24 04          	mov    %eax,0x4(%esp)
  800969:	8b 45 08             	mov    0x8(%ebp),%eax
  80096c:	89 04 24             	mov    %eax,(%esp)
  80096f:	e8 84 ff ff ff       	call   8008f8 <vcprintf>
	va_end(ap);

	return cnt;
}
  800974:	c9                   	leave  
  800975:	c3                   	ret    

00800976 <putch>:
  800976:	55                   	push   %ebp
  800977:	89 e5                	mov    %esp,%ebp
  800979:	53                   	push   %ebx
  80097a:	83 ec 14             	sub    $0x14,%esp
  80097d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  800980:	8b 03                	mov    (%ebx),%eax
  800982:	8b 55 08             	mov    0x8(%ebp),%edx
  800985:	88 54 03 08          	mov    %dl,0x8(%ebx,%eax,1)
  800989:	83 c0 01             	add    $0x1,%eax
  80098c:	89 03                	mov    %eax,(%ebx)
  80098e:	3d ff 00 00 00       	cmp    $0xff,%eax
  800993:	75 19                	jne    8009ae <putch+0x38>
  800995:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
  80099c:	00 
  80099d:	8d 43 08             	lea    0x8(%ebx),%eax
  8009a0:	89 04 24             	mov    %eax,(%esp)
  8009a3:	e8 90 0a 00 00       	call   801438 <sys_cputs>
  8009a8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  8009ae:	83 43 04 01          	addl   $0x1,0x4(%ebx)
  8009b2:	83 c4 14             	add    $0x14,%esp
  8009b5:	5b                   	pop    %ebx
  8009b6:	5d                   	pop    %ebp
  8009b7:	c3                   	ret    
	...

008009c0 <printnum>:
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
  8009c0:	55                   	push   %ebp
  8009c1:	89 e5                	mov    %esp,%ebp
  8009c3:	57                   	push   %edi
  8009c4:	56                   	push   %esi
  8009c5:	53                   	push   %ebx
  8009c6:	83 ec 3c             	sub    $0x3c,%esp
  8009c9:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  8009cc:	89 d7                	mov    %edx,%edi
  8009ce:	8b 45 08             	mov    0x8(%ebp),%eax
  8009d1:	8b 55 0c             	mov    0xc(%ebp),%edx
  8009d4:	89 45 d8             	mov    %eax,0xffffffd8(%ebp)
  8009d7:	89 55 dc             	mov    %edx,0xffffffdc(%ebp)
  8009da:	8b 55 10             	mov    0x10(%ebp),%edx
  8009dd:	8b 45 14             	mov    0x14(%ebp),%eax
  8009e0:	8b 75 18             	mov    0x18(%ebp),%esi
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
  8009e3:	89 55 e8             	mov    %edx,0xffffffe8(%ebp)
  8009e6:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  8009ed:	8b 4d dc             	mov    0xffffffdc(%ebp),%ecx
  8009f0:	39 4d ec             	cmp    %ecx,0xffffffec(%ebp)
  8009f3:	72 11                	jb     800a06 <printnum+0x46>
  8009f5:	8b 4d d8             	mov    0xffffffd8(%ebp),%ecx
  8009f8:	39 4d e8             	cmp    %ecx,0xffffffe8(%ebp)
  8009fb:	76 09                	jbe    800a06 <printnum+0x46>
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
  8009fd:	8d 58 ff             	lea    0xffffffff(%eax),%ebx
  800a00:	85 db                	test   %ebx,%ebx
  800a02:	7f 54                	jg     800a58 <printnum+0x98>
  800a04:	eb 61                	jmp    800a67 <printnum+0xa7>
  800a06:	89 74 24 10          	mov    %esi,0x10(%esp)
  800a0a:	83 e8 01             	sub    $0x1,%eax
  800a0d:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800a11:	89 54 24 08          	mov    %edx,0x8(%esp)
  800a15:	8b 5c 24 08          	mov    0x8(%esp),%ebx
  800a19:	8b 74 24 0c          	mov    0xc(%esp),%esi
  800a1d:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  800a20:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  800a23:	89 44 24 08          	mov    %eax,0x8(%esp)
  800a27:	89 54 24 0c          	mov    %edx,0xc(%esp)
  800a2b:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  800a2e:	8b 4d dc             	mov    0xffffffdc(%ebp),%ecx
  800a31:	89 14 24             	mov    %edx,(%esp)
  800a34:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  800a38:	e8 a3 13 01 00       	call   811de0 <__udivdi3>
  800a3d:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  800a41:	89 74 24 0c          	mov    %esi,0xc(%esp)
  800a45:	89 04 24             	mov    %eax,(%esp)
  800a48:	89 54 24 04          	mov    %edx,0x4(%esp)
  800a4c:	89 fa                	mov    %edi,%edx
  800a4e:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  800a51:	e8 6a ff ff ff       	call   8009c0 <printnum>
  800a56:	eb 0f                	jmp    800a67 <printnum+0xa7>
			putch(padc, putdat);
  800a58:	89 7c 24 04          	mov    %edi,0x4(%esp)
  800a5c:	89 34 24             	mov    %esi,(%esp)
  800a5f:	ff 55 e4             	call   *0xffffffe4(%ebp)
  800a62:	83 eb 01             	sub    $0x1,%ebx
  800a65:	75 f1                	jne    800a58 <printnum+0x98>
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
  800a67:	89 7c 24 04          	mov    %edi,0x4(%esp)
  800a6b:	8b 74 24 04          	mov    0x4(%esp),%esi
  800a6f:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  800a72:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  800a75:	89 44 24 08          	mov    %eax,0x8(%esp)
  800a79:	89 54 24 0c          	mov    %edx,0xc(%esp)
  800a7d:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  800a80:	8b 4d dc             	mov    0xffffffdc(%ebp),%ecx
  800a83:	89 14 24             	mov    %edx,(%esp)
  800a86:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  800a8a:	e8 81 14 01 00       	call   811f10 <__umoddi3>
  800a8f:	89 74 24 04          	mov    %esi,0x4(%esp)
  800a93:	0f be 80 46 23 81 00 	movsbl 0x812346(%eax),%eax
  800a9a:	89 04 24             	mov    %eax,(%esp)
  800a9d:	ff 55 e4             	call   *0xffffffe4(%ebp)
}
  800aa0:	83 c4 3c             	add    $0x3c,%esp
  800aa3:	5b                   	pop    %ebx
  800aa4:	5e                   	pop    %esi
  800aa5:	5f                   	pop    %edi
  800aa6:	5d                   	pop    %ebp
  800aa7:	c3                   	ret    

00800aa8 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
  800aa8:	55                   	push   %ebp
  800aa9:	89 e5                	mov    %esp,%ebp
  800aab:	89 c1                	mov    %eax,%ecx
	if (lflag >= 2)
  800aad:	83 fa 01             	cmp    $0x1,%edx
  800ab0:	7e 0e                	jle    800ac0 <getuint+0x18>
		return va_arg(*ap, unsigned long long);
  800ab2:	8b 10                	mov    (%eax),%edx
  800ab4:	8d 42 08             	lea    0x8(%edx),%eax
  800ab7:	89 01                	mov    %eax,(%ecx)
  800ab9:	8b 02                	mov    (%edx),%eax
  800abb:	8b 52 04             	mov    0x4(%edx),%edx
  800abe:	eb 22                	jmp    800ae2 <getuint+0x3a>
	else if (lflag)
  800ac0:	85 d2                	test   %edx,%edx
  800ac2:	74 10                	je     800ad4 <getuint+0x2c>
		return va_arg(*ap, unsigned long);
  800ac4:	8b 10                	mov    (%eax),%edx
  800ac6:	8d 42 04             	lea    0x4(%edx),%eax
  800ac9:	89 01                	mov    %eax,(%ecx)
  800acb:	8b 02                	mov    (%edx),%eax
  800acd:	ba 00 00 00 00       	mov    $0x0,%edx
  800ad2:	eb 0e                	jmp    800ae2 <getuint+0x3a>
	else
		return va_arg(*ap, unsigned int);
  800ad4:	8b 10                	mov    (%eax),%edx
  800ad6:	8d 42 04             	lea    0x4(%edx),%eax
  800ad9:	89 01                	mov    %eax,(%ecx)
  800adb:	8b 02                	mov    (%edx),%eax
  800add:	ba 00 00 00 00       	mov    $0x0,%edx
}
  800ae2:	5d                   	pop    %ebp
  800ae3:	c3                   	ret    

00800ae4 <sprintputch>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
	if (lflag >= 2)
		return va_arg(*ap, long long);
	else if (lflag)
		return va_arg(*ap, long);
	else
		return va_arg(*ap, int);
}


// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
	register const char *p;
	register int ch, err;
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
		width = -1;
		precision = -1;
		lflag = 0;
		altflag = 0;
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {

		// flag to pad on the right
		case '-':
			padc = '-';
			goto reswitch;
			
		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
			goto reswitch;

		// width field
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
			goto process_precision;

		case '.':
			if (width < 0)
				width = 0;
			goto reswitch;

		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
				width = precision, precision = -1;
			goto reswitch;

		// long flag (doubled for long long)
		case 'l':
			lflag++;
			goto reswitch;

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
			break;

		// error message
		case 'e':
			err = va_arg(ap, int);
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
			break;

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
				putch(' ', putdat);
			break;

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
			if ((long long) num < 0) {
				putch('-', putdat);
				num = -(long long) num;
			}
			base = 10;
			goto number;

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
			base = 10;
			goto number;

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			//putch('X', putdat);
			//putch('X', putdat);
			//putch('X', putdat);
			num = getuint(&ap,lflag);
			base=8;
			break;

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
				(uintptr_t) va_arg(ap, void *);
			base = 16;
			goto number;

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
			base = 16;
		number:
			printnum(putch, putdat, num, base, width, padc);
			break;

		// escaped '%' character
		case '%':
			putch(ch, putdat);
			break;
			
		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	vprintfmt(putch, putdat, fmt, ap);
	va_end(ap);
}

struct sprintbuf {
	char *buf;
	char *ebuf;
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
  800ae4:	55                   	push   %ebp
  800ae5:	89 e5                	mov    %esp,%ebp
  800ae7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	b->cnt++;
  800aea:	83 41 08 01          	addl   $0x1,0x8(%ecx)
	if (b->buf < b->ebuf)
  800aee:	8b 11                	mov    (%ecx),%edx
  800af0:	3b 51 04             	cmp    0x4(%ecx),%edx
  800af3:	73 0a                	jae    800aff <sprintputch+0x1b>
		*b->buf++ = ch;
  800af5:	8b 45 08             	mov    0x8(%ebp),%eax
  800af8:	88 02                	mov    %al,(%edx)
  800afa:	8d 42 01             	lea    0x1(%edx),%eax
  800afd:	89 01                	mov    %eax,(%ecx)
}
  800aff:	5d                   	pop    %ebp
  800b00:	c3                   	ret    

00800b01 <vprintfmt>:
  800b01:	55                   	push   %ebp
  800b02:	89 e5                	mov    %esp,%ebp
  800b04:	57                   	push   %edi
  800b05:	56                   	push   %esi
  800b06:	53                   	push   %ebx
  800b07:	83 ec 4c             	sub    $0x4c,%esp
  800b0a:	8b 7d 08             	mov    0x8(%ebp),%edi
  800b0d:	8b 5d 10             	mov    0x10(%ebp),%ebx
  800b10:	eb 03                	jmp    800b15 <vprintfmt+0x14>
  800b12:	8b 5d e8             	mov    0xffffffe8(%ebp),%ebx
  800b15:	0f b6 03             	movzbl (%ebx),%eax
  800b18:	83 c3 01             	add    $0x1,%ebx
  800b1b:	3c 25                	cmp    $0x25,%al
  800b1d:	74 30                	je     800b4f <vprintfmt+0x4e>
  800b1f:	84 c0                	test   %al,%al
  800b21:	0f 84 a8 03 00 00    	je     800ecf <vprintfmt+0x3ce>
  800b27:	0f b6 d0             	movzbl %al,%edx
  800b2a:	eb 0a                	jmp    800b36 <vprintfmt+0x35>
  800b2c:	84 c0                	test   %al,%al
  800b2e:	66 90                	xchg   %ax,%ax
  800b30:	0f 84 99 03 00 00    	je     800ecf <vprintfmt+0x3ce>
  800b36:	8b 45 0c             	mov    0xc(%ebp),%eax
  800b39:	89 44 24 04          	mov    %eax,0x4(%esp)
  800b3d:	89 14 24             	mov    %edx,(%esp)
  800b40:	ff d7                	call   *%edi
  800b42:	0f b6 03             	movzbl (%ebx),%eax
  800b45:	0f b6 d0             	movzbl %al,%edx
  800b48:	83 c3 01             	add    $0x1,%ebx
  800b4b:	3c 25                	cmp    $0x25,%al
  800b4d:	75 dd                	jne    800b2c <vprintfmt+0x2b>
  800b4f:	b9 00 00 00 00       	mov    $0x0,%ecx
  800b54:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,0xffffffec(%ebp)
  800b5b:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,0xffffffe4(%ebp)
  800b62:	c7 45 dc 00 00 00 00 	movl   $0x0,0xffffffdc(%ebp)
  800b69:	c6 45 e3 20          	movb   $0x20,0xffffffe3(%ebp)
  800b6d:	eb 07                	jmp    800b76 <vprintfmt+0x75>
  800b6f:	c7 45 dc 01 00 00 00 	movl   $0x1,0xffffffdc(%ebp)
  800b76:	0f b6 03             	movzbl (%ebx),%eax
  800b79:	0f b6 d0             	movzbl %al,%edx
  800b7c:	83 c3 01             	add    $0x1,%ebx
  800b7f:	83 e8 23             	sub    $0x23,%eax
  800b82:	3c 55                	cmp    $0x55,%al
  800b84:	0f 87 11 03 00 00    	ja     800e9b <vprintfmt+0x39a>
  800b8a:	0f b6 c0             	movzbl %al,%eax
  800b8d:	ff 24 85 80 24 81 00 	jmp    *0x812480(,%eax,4)
  800b94:	c6 45 e3 30          	movb   $0x30,0xffffffe3(%ebp)
  800b98:	eb dc                	jmp    800b76 <vprintfmt+0x75>
  800b9a:	83 ea 30             	sub    $0x30,%edx
  800b9d:	89 55 e4             	mov    %edx,0xffffffe4(%ebp)
  800ba0:	0f be 13             	movsbl (%ebx),%edx
  800ba3:	8d 42 d0             	lea    0xffffffd0(%edx),%eax
  800ba6:	83 f8 09             	cmp    $0x9,%eax
  800ba9:	76 08                	jbe    800bb3 <vprintfmt+0xb2>
  800bab:	eb 42                	jmp    800bef <vprintfmt+0xee>
  800bad:	c6 45 e3 2d          	movb   $0x2d,0xffffffe3(%ebp)
  800bb1:	eb c3                	jmp    800b76 <vprintfmt+0x75>
  800bb3:	83 c3 01             	add    $0x1,%ebx
  800bb6:	8b 75 e4             	mov    0xffffffe4(%ebp),%esi
  800bb9:	8d 04 b6             	lea    (%esi,%esi,4),%eax
  800bbc:	8d 44 42 d0          	lea    0xffffffd0(%edx,%eax,2),%eax
  800bc0:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  800bc3:	0f be 13             	movsbl (%ebx),%edx
  800bc6:	8d 42 d0             	lea    0xffffffd0(%edx),%eax
  800bc9:	83 f8 09             	cmp    $0x9,%eax
  800bcc:	77 21                	ja     800bef <vprintfmt+0xee>
  800bce:	eb e3                	jmp    800bb3 <vprintfmt+0xb2>
  800bd0:	8b 55 14             	mov    0x14(%ebp),%edx
  800bd3:	8d 42 04             	lea    0x4(%edx),%eax
  800bd6:	89 45 14             	mov    %eax,0x14(%ebp)
  800bd9:	8b 12                	mov    (%edx),%edx
  800bdb:	89 55 e4             	mov    %edx,0xffffffe4(%ebp)
  800bde:	eb 0f                	jmp    800bef <vprintfmt+0xee>
  800be0:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  800be4:	79 90                	jns    800b76 <vprintfmt+0x75>
  800be6:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  800bed:	eb 87                	jmp    800b76 <vprintfmt+0x75>
  800bef:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  800bf3:	79 81                	jns    800b76 <vprintfmt+0x75>
  800bf5:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  800bf8:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  800bfb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,0xffffffe4(%ebp)
  800c02:	e9 6f ff ff ff       	jmp    800b76 <vprintfmt+0x75>
  800c07:	83 c1 01             	add    $0x1,%ecx
  800c0a:	e9 67 ff ff ff       	jmp    800b76 <vprintfmt+0x75>
  800c0f:	8b 45 14             	mov    0x14(%ebp),%eax
  800c12:	8d 50 04             	lea    0x4(%eax),%edx
  800c15:	89 55 14             	mov    %edx,0x14(%ebp)
  800c18:	8b 55 0c             	mov    0xc(%ebp),%edx
  800c1b:	89 54 24 04          	mov    %edx,0x4(%esp)
  800c1f:	8b 00                	mov    (%eax),%eax
  800c21:	89 04 24             	mov    %eax,(%esp)
  800c24:	ff d7                	call   *%edi
  800c26:	e9 ea fe ff ff       	jmp    800b15 <vprintfmt+0x14>
  800c2b:	8b 55 14             	mov    0x14(%ebp),%edx
  800c2e:	8d 42 04             	lea    0x4(%edx),%eax
  800c31:	89 45 14             	mov    %eax,0x14(%ebp)
  800c34:	8b 02                	mov    (%edx),%eax
  800c36:	89 c2                	mov    %eax,%edx
  800c38:	c1 fa 1f             	sar    $0x1f,%edx
  800c3b:	31 d0                	xor    %edx,%eax
  800c3d:	29 d0                	sub    %edx,%eax
  800c3f:	83 f8 0f             	cmp    $0xf,%eax
  800c42:	7f 0b                	jg     800c4f <vprintfmt+0x14e>
  800c44:	8b 14 85 e0 25 81 00 	mov    0x8125e0(,%eax,4),%edx
  800c4b:	85 d2                	test   %edx,%edx
  800c4d:	75 20                	jne    800c6f <vprintfmt+0x16e>
  800c4f:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800c53:	c7 44 24 08 57 23 81 	movl   $0x812357,0x8(%esp)
  800c5a:	00 
  800c5b:	8b 75 0c             	mov    0xc(%ebp),%esi
  800c5e:	89 74 24 04          	mov    %esi,0x4(%esp)
  800c62:	89 3c 24             	mov    %edi,(%esp)
  800c65:	e8 f0 02 00 00       	call   800f5a <printfmt>
  800c6a:	e9 a6 fe ff ff       	jmp    800b15 <vprintfmt+0x14>
  800c6f:	89 54 24 0c          	mov    %edx,0xc(%esp)
  800c73:	c7 44 24 08 6a 28 81 	movl   $0x81286a,0x8(%esp)
  800c7a:	00 
  800c7b:	8b 45 0c             	mov    0xc(%ebp),%eax
  800c7e:	89 44 24 04          	mov    %eax,0x4(%esp)
  800c82:	89 3c 24             	mov    %edi,(%esp)
  800c85:	e8 d0 02 00 00       	call   800f5a <printfmt>
  800c8a:	e9 86 fe ff ff       	jmp    800b15 <vprintfmt+0x14>
  800c8f:	8b 75 ec             	mov    0xffffffec(%ebp),%esi
  800c92:	8b 4d e4             	mov    0xffffffe4(%ebp),%ecx
  800c95:	89 5d e8             	mov    %ebx,0xffffffe8(%ebp)
  800c98:	8b 55 14             	mov    0x14(%ebp),%edx
  800c9b:	8d 42 04             	lea    0x4(%edx),%eax
  800c9e:	89 45 14             	mov    %eax,0x14(%ebp)
  800ca1:	8b 12                	mov    (%edx),%edx
  800ca3:	89 55 d8             	mov    %edx,0xffffffd8(%ebp)
  800ca6:	85 d2                	test   %edx,%edx
  800ca8:	75 07                	jne    800cb1 <vprintfmt+0x1b0>
  800caa:	c7 45 d8 60 23 81 00 	movl   $0x812360,0xffffffd8(%ebp)
  800cb1:	85 f6                	test   %esi,%esi
  800cb3:	7e 40                	jle    800cf5 <vprintfmt+0x1f4>
  800cb5:	80 7d e3 2d          	cmpb   $0x2d,0xffffffe3(%ebp)
  800cb9:	74 3a                	je     800cf5 <vprintfmt+0x1f4>
  800cbb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  800cbf:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  800cc2:	89 14 24             	mov    %edx,(%esp)
  800cc5:	e8 e6 02 00 00       	call   800fb0 <strnlen>
  800cca:	29 c6                	sub    %eax,%esi
  800ccc:	89 75 ec             	mov    %esi,0xffffffec(%ebp)
  800ccf:	85 f6                	test   %esi,%esi
  800cd1:	7e 22                	jle    800cf5 <vprintfmt+0x1f4>
  800cd3:	0f be 45 e3          	movsbl 0xffffffe3(%ebp),%eax
  800cd7:	89 45 cc             	mov    %eax,0xffffffcc(%ebp)
  800cda:	8b 55 0c             	mov    0xc(%ebp),%edx
  800cdd:	89 54 24 04          	mov    %edx,0x4(%esp)
  800ce1:	8b 45 cc             	mov    0xffffffcc(%ebp),%eax
  800ce4:	89 04 24             	mov    %eax,(%esp)
  800ce7:	ff d7                	call   *%edi
  800ce9:	83 ee 01             	sub    $0x1,%esi
  800cec:	75 ec                	jne    800cda <vprintfmt+0x1d9>
  800cee:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  800cf5:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  800cf8:	0f b6 02             	movzbl (%edx),%eax
  800cfb:	0f be d0             	movsbl %al,%edx
  800cfe:	8b 75 d8             	mov    0xffffffd8(%ebp),%esi
  800d01:	84 c0                	test   %al,%al
  800d03:	75 40                	jne    800d45 <vprintfmt+0x244>
  800d05:	eb 4a                	jmp    800d51 <vprintfmt+0x250>
  800d07:	83 7d dc 00          	cmpl   $0x0,0xffffffdc(%ebp)
  800d0b:	74 1a                	je     800d27 <vprintfmt+0x226>
  800d0d:	8d 42 e0             	lea    0xffffffe0(%edx),%eax
  800d10:	83 f8 5e             	cmp    $0x5e,%eax
  800d13:	76 12                	jbe    800d27 <vprintfmt+0x226>
  800d15:	8b 45 0c             	mov    0xc(%ebp),%eax
  800d18:	89 44 24 04          	mov    %eax,0x4(%esp)
  800d1c:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
  800d23:	ff d7                	call   *%edi
  800d25:	eb 0c                	jmp    800d33 <vprintfmt+0x232>
  800d27:	8b 45 0c             	mov    0xc(%ebp),%eax
  800d2a:	89 44 24 04          	mov    %eax,0x4(%esp)
  800d2e:	89 14 24             	mov    %edx,(%esp)
  800d31:	ff d7                	call   *%edi
  800d33:	83 6d ec 01          	subl   $0x1,0xffffffec(%ebp)
  800d37:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  800d3b:	83 c6 01             	add    $0x1,%esi
  800d3e:	84 c0                	test   %al,%al
  800d40:	74 0f                	je     800d51 <vprintfmt+0x250>
  800d42:	0f be d0             	movsbl %al,%edx
  800d45:	83 7d e4 00          	cmpl   $0x0,0xffffffe4(%ebp)
  800d49:	78 bc                	js     800d07 <vprintfmt+0x206>
  800d4b:	83 6d e4 01          	subl   $0x1,0xffffffe4(%ebp)
  800d4f:	79 b6                	jns    800d07 <vprintfmt+0x206>
  800d51:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  800d55:	0f 8e ba fd ff ff    	jle    800b15 <vprintfmt+0x14>
  800d5b:	8b 55 0c             	mov    0xc(%ebp),%edx
  800d5e:	89 54 24 04          	mov    %edx,0x4(%esp)
  800d62:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  800d69:	ff d7                	call   *%edi
  800d6b:	83 6d ec 01          	subl   $0x1,0xffffffec(%ebp)
  800d6f:	0f 84 9d fd ff ff    	je     800b12 <vprintfmt+0x11>
  800d75:	eb e4                	jmp    800d5b <vprintfmt+0x25a>
  800d77:	83 f9 01             	cmp    $0x1,%ecx
  800d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  800d80:	7e 10                	jle    800d92 <vprintfmt+0x291>
  800d82:	8b 55 14             	mov    0x14(%ebp),%edx
  800d85:	8d 42 08             	lea    0x8(%edx),%eax
  800d88:	89 45 14             	mov    %eax,0x14(%ebp)
  800d8b:	8b 02                	mov    (%edx),%eax
  800d8d:	8b 52 04             	mov    0x4(%edx),%edx
  800d90:	eb 26                	jmp    800db8 <vprintfmt+0x2b7>
  800d92:	85 c9                	test   %ecx,%ecx
  800d94:	74 12                	je     800da8 <vprintfmt+0x2a7>
  800d96:	8b 45 14             	mov    0x14(%ebp),%eax
  800d99:	8d 50 04             	lea    0x4(%eax),%edx
  800d9c:	89 55 14             	mov    %edx,0x14(%ebp)
  800d9f:	8b 00                	mov    (%eax),%eax
  800da1:	89 c2                	mov    %eax,%edx
  800da3:	c1 fa 1f             	sar    $0x1f,%edx
  800da6:	eb 10                	jmp    800db8 <vprintfmt+0x2b7>
  800da8:	8b 45 14             	mov    0x14(%ebp),%eax
  800dab:	8d 50 04             	lea    0x4(%eax),%edx
  800dae:	89 55 14             	mov    %edx,0x14(%ebp)
  800db1:	8b 00                	mov    (%eax),%eax
  800db3:	89 c2                	mov    %eax,%edx
  800db5:	c1 fa 1f             	sar    $0x1f,%edx
  800db8:	89 d1                	mov    %edx,%ecx
  800dba:	89 c2                	mov    %eax,%edx
  800dbc:	89 45 d0             	mov    %eax,0xffffffd0(%ebp)
  800dbf:	89 4d d4             	mov    %ecx,0xffffffd4(%ebp)
  800dc2:	be 0a 00 00 00       	mov    $0xa,%esi
  800dc7:	85 c9                	test   %ecx,%ecx
  800dc9:	0f 89 92 00 00 00    	jns    800e61 <vprintfmt+0x360>
  800dcf:	8b 75 0c             	mov    0xc(%ebp),%esi
  800dd2:	89 74 24 04          	mov    %esi,0x4(%esp)
  800dd6:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
  800ddd:	ff d7                	call   *%edi
  800ddf:	8b 55 d0             	mov    0xffffffd0(%ebp),%edx
  800de2:	8b 4d d4             	mov    0xffffffd4(%ebp),%ecx
  800de5:	f7 da                	neg    %edx
  800de7:	83 d1 00             	adc    $0x0,%ecx
  800dea:	f7 d9                	neg    %ecx
  800dec:	be 0a 00 00 00       	mov    $0xa,%esi
  800df1:	eb 6e                	jmp    800e61 <vprintfmt+0x360>
  800df3:	8d 45 14             	lea    0x14(%ebp),%eax
  800df6:	89 ca                	mov    %ecx,%edx
  800df8:	e8 ab fc ff ff       	call   800aa8 <getuint>
  800dfd:	89 d1                	mov    %edx,%ecx
  800dff:	89 c2                	mov    %eax,%edx
  800e01:	be 0a 00 00 00       	mov    $0xa,%esi
  800e06:	eb 59                	jmp    800e61 <vprintfmt+0x360>
  800e08:	8d 45 14             	lea    0x14(%ebp),%eax
  800e0b:	89 ca                	mov    %ecx,%edx
  800e0d:	e8 96 fc ff ff       	call   800aa8 <getuint>
  800e12:	e9 fe fc ff ff       	jmp    800b15 <vprintfmt+0x14>
  800e17:	8b 45 0c             	mov    0xc(%ebp),%eax
  800e1a:	89 44 24 04          	mov    %eax,0x4(%esp)
  800e1e:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
  800e25:	ff d7                	call   *%edi
  800e27:	8b 55 0c             	mov    0xc(%ebp),%edx
  800e2a:	89 54 24 04          	mov    %edx,0x4(%esp)
  800e2e:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
  800e35:	ff d7                	call   *%edi
  800e37:	8b 55 14             	mov    0x14(%ebp),%edx
  800e3a:	8d 42 04             	lea    0x4(%edx),%eax
  800e3d:	89 45 14             	mov    %eax,0x14(%ebp)
  800e40:	8b 12                	mov    (%edx),%edx
  800e42:	b9 00 00 00 00       	mov    $0x0,%ecx
  800e47:	be 10 00 00 00       	mov    $0x10,%esi
  800e4c:	eb 13                	jmp    800e61 <vprintfmt+0x360>
  800e4e:	8d 45 14             	lea    0x14(%ebp),%eax
  800e51:	89 ca                	mov    %ecx,%edx
  800e53:	e8 50 fc ff ff       	call   800aa8 <getuint>
  800e58:	89 d1                	mov    %edx,%ecx
  800e5a:	89 c2                	mov    %eax,%edx
  800e5c:	be 10 00 00 00       	mov    $0x10,%esi
  800e61:	0f be 45 e3          	movsbl 0xffffffe3(%ebp),%eax
  800e65:	89 44 24 10          	mov    %eax,0x10(%esp)
  800e69:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  800e6c:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800e70:	89 74 24 08          	mov    %esi,0x8(%esp)
  800e74:	89 14 24             	mov    %edx,(%esp)
  800e77:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  800e7b:	8b 55 0c             	mov    0xc(%ebp),%edx
  800e7e:	89 f8                	mov    %edi,%eax
  800e80:	e8 3b fb ff ff       	call   8009c0 <printnum>
  800e85:	e9 8b fc ff ff       	jmp    800b15 <vprintfmt+0x14>
  800e8a:	8b 75 0c             	mov    0xc(%ebp),%esi
  800e8d:	89 74 24 04          	mov    %esi,0x4(%esp)
  800e91:	89 14 24             	mov    %edx,(%esp)
  800e94:	ff d7                	call   *%edi
  800e96:	e9 7a fc ff ff       	jmp    800b15 <vprintfmt+0x14>
  800e9b:	89 de                	mov    %ebx,%esi
  800e9d:	8b 45 0c             	mov    0xc(%ebp),%eax
  800ea0:	89 44 24 04          	mov    %eax,0x4(%esp)
  800ea4:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
  800eab:	ff d7                	call   *%edi
  800ead:	83 eb 01             	sub    $0x1,%ebx
  800eb0:	80 7b ff 25          	cmpb   $0x25,0xffffffff(%ebx)
  800eb4:	0f 84 5b fc ff ff    	je     800b15 <vprintfmt+0x14>
  800eba:	8d 56 fd             	lea    0xfffffffd(%esi),%edx
  800ebd:	0f b6 02             	movzbl (%edx),%eax
  800ec0:	83 ea 01             	sub    $0x1,%edx
  800ec3:	3c 25                	cmp    $0x25,%al
  800ec5:	75 f6                	jne    800ebd <vprintfmt+0x3bc>
  800ec7:	8d 5a 02             	lea    0x2(%edx),%ebx
  800eca:	e9 46 fc ff ff       	jmp    800b15 <vprintfmt+0x14>
  800ecf:	83 c4 4c             	add    $0x4c,%esp
  800ed2:	5b                   	pop    %ebx
  800ed3:	5e                   	pop    %esi
  800ed4:	5f                   	pop    %edi
  800ed5:	5d                   	pop    %ebp
  800ed6:	c3                   	ret    

00800ed7 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
  800ed7:	55                   	push   %ebp
  800ed8:	89 e5                	mov    %esp,%ebp
  800eda:	83 ec 28             	sub    $0x28,%esp
  800edd:	8b 55 08             	mov    0x8(%ebp),%edx
  800ee0:	8b 45 0c             	mov    0xc(%ebp),%eax
	struct sprintbuf b = {buf, buf+n-1, 0};

	if (buf == NULL || n < 1)
  800ee3:	85 d2                	test   %edx,%edx
  800ee5:	74 04                	je     800eeb <vsnprintf+0x14>
  800ee7:	85 c0                	test   %eax,%eax
  800ee9:	7f 07                	jg     800ef2 <vsnprintf+0x1b>
  800eeb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800ef0:	eb 3b                	jmp    800f2d <vsnprintf+0x56>
  800ef2:	c7 45 fc 00 00 00 00 	movl   $0x0,0xfffffffc(%ebp)
  800ef9:	8d 44 02 ff          	lea    0xffffffff(%edx,%eax,1),%eax
  800efd:	89 45 f8             	mov    %eax,0xfffffff8(%ebp)
  800f00:	89 55 f4             	mov    %edx,0xfffffff4(%ebp)
		return -E_INVAL;

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
  800f03:	8b 45 14             	mov    0x14(%ebp),%eax
  800f06:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800f0a:	8b 45 10             	mov    0x10(%ebp),%eax
  800f0d:	89 44 24 08          	mov    %eax,0x8(%esp)
  800f11:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  800f14:	89 44 24 04          	mov    %eax,0x4(%esp)
  800f18:	c7 04 24 e4 0a 80 00 	movl   $0x800ae4,(%esp)
  800f1f:	e8 dd fb ff ff       	call   800b01 <vprintfmt>

	// null terminate the buffer
	*b.buf = '\0';
  800f24:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  800f27:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
  800f2a:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
}
  800f2d:	c9                   	leave  
  800f2e:	c3                   	ret    

00800f2f <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
  800f2f:	55                   	push   %ebp
  800f30:	89 e5                	mov    %esp,%ebp
  800f32:	83 ec 28             	sub    $0x28,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
  800f35:	8d 45 14             	lea    0x14(%ebp),%eax
  800f38:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
  800f3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800f3f:	8b 45 10             	mov    0x10(%ebp),%eax
  800f42:	89 44 24 08          	mov    %eax,0x8(%esp)
  800f46:	8b 45 0c             	mov    0xc(%ebp),%eax
  800f49:	89 44 24 04          	mov    %eax,0x4(%esp)
  800f4d:	8b 45 08             	mov    0x8(%ebp),%eax
  800f50:	89 04 24             	mov    %eax,(%esp)
  800f53:	e8 7f ff ff ff       	call   800ed7 <vsnprintf>
	va_end(ap);

	return rc;
}
  800f58:	c9                   	leave  
  800f59:	c3                   	ret    

00800f5a <printfmt>:
  800f5a:	55                   	push   %ebp
  800f5b:	89 e5                	mov    %esp,%ebp
  800f5d:	83 ec 28             	sub    $0x28,%esp
  800f60:	8d 45 14             	lea    0x14(%ebp),%eax
  800f63:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
  800f66:	89 44 24 0c          	mov    %eax,0xc(%esp)
  800f6a:	8b 45 10             	mov    0x10(%ebp),%eax
  800f6d:	89 44 24 08          	mov    %eax,0x8(%esp)
  800f71:	8b 45 0c             	mov    0xc(%ebp),%eax
  800f74:	89 44 24 04          	mov    %eax,0x4(%esp)
  800f78:	8b 45 08             	mov    0x8(%ebp),%eax
  800f7b:	89 04 24             	mov    %eax,(%esp)
  800f7e:	e8 7e fb ff ff       	call   800b01 <vprintfmt>
  800f83:	c9                   	leave  
  800f84:	c3                   	ret    
	...

00800f90 <strlen>:
#define ASM 1

int
strlen(const char *s)
{
  800f90:	55                   	push   %ebp
  800f91:	89 e5                	mov    %esp,%ebp
  800f93:	8b 55 08             	mov    0x8(%ebp),%edx
	int n;

	for (n = 0; *s != '\0'; s++)
  800f96:	b8 00 00 00 00       	mov    $0x0,%eax
  800f9b:	80 3a 00             	cmpb   $0x0,(%edx)
  800f9e:	74 0e                	je     800fae <strlen+0x1e>
  800fa0:	b8 00 00 00 00       	mov    $0x0,%eax
		n++;
  800fa5:	83 c0 01             	add    $0x1,%eax
  800fa8:	80 3c 10 00          	cmpb   $0x0,(%eax,%edx,1)
  800fac:	75 f7                	jne    800fa5 <strlen+0x15>
	return n;
}
  800fae:	5d                   	pop    %ebp
  800faf:	c3                   	ret    

00800fb0 <strnlen>:

int
strnlen(const char *s, size_t size)
{
  800fb0:	55                   	push   %ebp
  800fb1:	89 e5                	mov    %esp,%ebp
  800fb3:	8b 4d 08             	mov    0x8(%ebp),%ecx
  800fb6:	8b 55 0c             	mov    0xc(%ebp),%edx
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
  800fb9:	85 d2                	test   %edx,%edx
  800fbb:	74 19                	je     800fd6 <strnlen+0x26>
  800fbd:	80 39 00             	cmpb   $0x0,(%ecx)
  800fc0:	74 14                	je     800fd6 <strnlen+0x26>
  800fc2:	b8 00 00 00 00       	mov    $0x0,%eax
		n++;
  800fc7:	83 c0 01             	add    $0x1,%eax
  800fca:	39 d0                	cmp    %edx,%eax
  800fcc:	74 0d                	je     800fdb <strnlen+0x2b>
  800fce:	80 3c 08 00          	cmpb   $0x0,(%eax,%ecx,1)
  800fd2:	74 07                	je     800fdb <strnlen+0x2b>
  800fd4:	eb f1                	jmp    800fc7 <strnlen+0x17>
  800fd6:	b8 00 00 00 00       	mov    $0x0,%eax
	return n;
}
  800fdb:	5d                   	pop    %ebp
  800fdc:	8d 74 26 00          	lea    0x0(%esi),%esi
  800fe0:	c3                   	ret    

00800fe1 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
  800fe1:	55                   	push   %ebp
  800fe2:	89 e5                	mov    %esp,%ebp
  800fe4:	53                   	push   %ebx
  800fe5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  800fe8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  800feb:	89 da                	mov    %ebx,%edx
	char *ret;

	ret = dst;
	while ((*dst++ = *src++) != '\0')
  800fed:	0f b6 01             	movzbl (%ecx),%eax
  800ff0:	88 02                	mov    %al,(%edx)
  800ff2:	83 c2 01             	add    $0x1,%edx
  800ff5:	83 c1 01             	add    $0x1,%ecx
  800ff8:	84 c0                	test   %al,%al
  800ffa:	75 f1                	jne    800fed <strcpy+0xc>
		/* do nothing */;
	return ret;
}
  800ffc:	89 d8                	mov    %ebx,%eax
  800ffe:	5b                   	pop    %ebx
  800fff:	5d                   	pop    %ebp
  801000:	c3                   	ret    

00801001 <strncpy>:

char *
strncpy(char *dst, const char *src, size_t size) {
  801001:	55                   	push   %ebp
  801002:	89 e5                	mov    %esp,%ebp
  801004:	57                   	push   %edi
  801005:	56                   	push   %esi
  801006:	53                   	push   %ebx
  801007:	8b 7d 08             	mov    0x8(%ebp),%edi
  80100a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80100d:	8b 75 10             	mov    0x10(%ebp),%esi
	size_t i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
  801010:	85 f6                	test   %esi,%esi
  801012:	74 1c                	je     801030 <strncpy+0x2f>
  801014:	89 fa                	mov    %edi,%edx
  801016:	bb 00 00 00 00       	mov    $0x0,%ebx
		*dst++ = *src;
  80101b:	0f b6 01             	movzbl (%ecx),%eax
  80101e:	88 02                	mov    %al,(%edx)
  801020:	83 c2 01             	add    $0x1,%edx
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
  801023:	80 39 01             	cmpb   $0x1,(%ecx)
  801026:	83 d9 ff             	sbb    $0xffffffff,%ecx
  801029:	83 c3 01             	add    $0x1,%ebx
  80102c:	39 f3                	cmp    %esi,%ebx
  80102e:	75 eb                	jne    80101b <strncpy+0x1a>
	}
	return ret;
}
  801030:	89 f8                	mov    %edi,%eax
  801032:	5b                   	pop    %ebx
  801033:	5e                   	pop    %esi
  801034:	5f                   	pop    %edi
  801035:	5d                   	pop    %ebp
  801036:	c3                   	ret    

00801037 <strlcpy>:

size_t
strlcpy(char *dst, const char *src, size_t size)
{
  801037:	55                   	push   %ebp
  801038:	89 e5                	mov    %esp,%ebp
  80103a:	56                   	push   %esi
  80103b:	53                   	push   %ebx
  80103c:	8b 75 08             	mov    0x8(%ebp),%esi
  80103f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801042:	8b 55 10             	mov    0x10(%ebp),%edx
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
  801045:	89 f0                	mov    %esi,%eax
  801047:	85 d2                	test   %edx,%edx
  801049:	74 2c                	je     801077 <strlcpy+0x40>
		while (--size > 0 && *src != '\0')
  80104b:	89 d3                	mov    %edx,%ebx
  80104d:	83 eb 01             	sub    $0x1,%ebx
  801050:	74 20                	je     801072 <strlcpy+0x3b>
  801052:	0f b6 11             	movzbl (%ecx),%edx
  801055:	84 d2                	test   %dl,%dl
  801057:	74 19                	je     801072 <strlcpy+0x3b>
  801059:	89 f0                	mov    %esi,%eax
			*dst++ = *src++;
  80105b:	88 10                	mov    %dl,(%eax)
  80105d:	83 c0 01             	add    $0x1,%eax
  801060:	83 eb 01             	sub    $0x1,%ebx
  801063:	74 0f                	je     801074 <strlcpy+0x3d>
  801065:	0f b6 51 01          	movzbl 0x1(%ecx),%edx
  801069:	83 c1 01             	add    $0x1,%ecx
  80106c:	84 d2                	test   %dl,%dl
  80106e:	74 04                	je     801074 <strlcpy+0x3d>
  801070:	eb e9                	jmp    80105b <strlcpy+0x24>
  801072:	89 f0                	mov    %esi,%eax
		*dst = '\0';
  801074:	c6 00 00             	movb   $0x0,(%eax)
  801077:	29 f0                	sub    %esi,%eax
	}
	return dst - dst_in;
}
  801079:	5b                   	pop    %ebx
  80107a:	5e                   	pop    %esi
  80107b:	5d                   	pop    %ebp
  80107c:	c3                   	ret    

0080107d <pstrcpy>:
//i386-disassember Lab3:your code here pstrcpy()
void pstrcpy(char *buf, int buf_size, const char *str)
{   
  80107d:	55                   	push   %ebp
  80107e:	89 e5                	mov    %esp,%ebp
  801080:	57                   	push   %edi
  801081:	56                   	push   %esi
  801082:	53                   	push   %ebx
  801083:	8b 55 08             	mov    0x8(%ebp),%edx
  801086:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801089:	8b 7d 10             	mov    0x10(%ebp),%edi
    int c;
    char *q = buf;

    if (buf_size <= 0)
  80108c:	85 c9                	test   %ecx,%ecx
  80108e:	7e 30                	jle    8010c0 <pstrcpy+0x43>
        return;

    for(;;) {
        c = *str++;
  801090:	0f b6 07             	movzbl (%edi),%eax
        if (c == 0 || q >= buf + buf_size - 1)
  801093:	84 c0                	test   %al,%al
  801095:	74 26                	je     8010bd <pstrcpy+0x40>
  801097:	8d 74 0a ff          	lea    0xffffffff(%edx,%ecx,1),%esi
  80109b:	0f be d8             	movsbl %al,%ebx
  80109e:	89 f9                	mov    %edi,%ecx
  8010a0:	39 f2                	cmp    %esi,%edx
  8010a2:	72 09                	jb     8010ad <pstrcpy+0x30>
  8010a4:	eb 17                	jmp    8010bd <pstrcpy+0x40>
  8010a6:	83 c1 01             	add    $0x1,%ecx
  8010a9:	39 f2                	cmp    %esi,%edx
  8010ab:	73 10                	jae    8010bd <pstrcpy+0x40>
            break;
        *q++ = c;
  8010ad:	88 1a                	mov    %bl,(%edx)
  8010af:	83 c2 01             	add    $0x1,%edx
  8010b2:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
  8010b6:	0f be d8             	movsbl %al,%ebx
  8010b9:	84 c0                	test   %al,%al
  8010bb:	75 e9                	jne    8010a6 <pstrcpy+0x29>
    }
    *q = '\0';
  8010bd:	c6 02 00             	movb   $0x0,(%edx)
}
  8010c0:	5b                   	pop    %ebx
  8010c1:	5e                   	pop    %esi
  8010c2:	5f                   	pop    %edi
  8010c3:	5d                   	pop    %ebp
  8010c4:	c3                   	ret    

008010c5 <strcmp>:
int
strcmp(const char *p, const char *q)
{
  8010c5:	55                   	push   %ebp
  8010c6:	89 e5                	mov    %esp,%ebp
  8010c8:	8b 55 08             	mov    0x8(%ebp),%edx
  8010cb:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	while (*p && *p == *q)
  8010ce:	0f b6 02             	movzbl (%edx),%eax
  8010d1:	84 c0                	test   %al,%al
  8010d3:	74 16                	je     8010eb <strcmp+0x26>
  8010d5:	3a 01                	cmp    (%ecx),%al
  8010d7:	75 12                	jne    8010eb <strcmp+0x26>
		p++, q++;
  8010d9:	83 c1 01             	add    $0x1,%ecx
  8010dc:	0f b6 42 01          	movzbl 0x1(%edx),%eax
  8010e0:	84 c0                	test   %al,%al
  8010e2:	74 07                	je     8010eb <strcmp+0x26>
  8010e4:	83 c2 01             	add    $0x1,%edx
  8010e7:	3a 01                	cmp    (%ecx),%al
  8010e9:	74 ee                	je     8010d9 <strcmp+0x14>
  8010eb:	0f b6 c0             	movzbl %al,%eax
  8010ee:	0f b6 11             	movzbl (%ecx),%edx
  8010f1:	29 d0                	sub    %edx,%eax
	return (int) ((unsigned char) *p - (unsigned char) *q);
}
  8010f3:	5d                   	pop    %ebp
  8010f4:	c3                   	ret    

008010f5 <strncmp>:

int
strncmp(const char *p, const char *q, size_t n)
{
  8010f5:	55                   	push   %ebp
  8010f6:	89 e5                	mov    %esp,%ebp
  8010f8:	53                   	push   %ebx
  8010f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
  8010fc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8010ff:	8b 55 10             	mov    0x10(%ebp),%edx
	while (n > 0 && *p && *p == *q)
  801102:	85 d2                	test   %edx,%edx
  801104:	74 2d                	je     801133 <strncmp+0x3e>
  801106:	0f b6 01             	movzbl (%ecx),%eax
  801109:	84 c0                	test   %al,%al
  80110b:	74 1a                	je     801127 <strncmp+0x32>
  80110d:	3a 03                	cmp    (%ebx),%al
  80110f:	75 16                	jne    801127 <strncmp+0x32>
  801111:	83 ea 01             	sub    $0x1,%edx
  801114:	74 1d                	je     801133 <strncmp+0x3e>
		n--, p++, q++;
  801116:	83 c1 01             	add    $0x1,%ecx
  801119:	83 c3 01             	add    $0x1,%ebx
  80111c:	0f b6 01             	movzbl (%ecx),%eax
  80111f:	84 c0                	test   %al,%al
  801121:	74 04                	je     801127 <strncmp+0x32>
  801123:	3a 03                	cmp    (%ebx),%al
  801125:	74 ea                	je     801111 <strncmp+0x1c>
	if (n == 0)
		return 0;
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
  801127:	0f b6 11             	movzbl (%ecx),%edx
  80112a:	0f b6 03             	movzbl (%ebx),%eax
  80112d:	29 c2                	sub    %eax,%edx
  80112f:	89 d0                	mov    %edx,%eax
  801131:	eb 05                	jmp    801138 <strncmp+0x43>
  801133:	b8 00 00 00 00       	mov    $0x0,%eax
}
  801138:	5b                   	pop    %ebx
  801139:	5d                   	pop    %ebp
  80113a:	c3                   	ret    

0080113b <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
  80113b:	55                   	push   %ebp
  80113c:	89 e5                	mov    %esp,%ebp
  80113e:	8b 45 08             	mov    0x8(%ebp),%eax
  801141:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
  801145:	0f b6 10             	movzbl (%eax),%edx
  801148:	84 d2                	test   %dl,%dl
  80114a:	74 16                	je     801162 <strchr+0x27>
		if (*s == c)
  80114c:	38 ca                	cmp    %cl,%dl
  80114e:	75 06                	jne    801156 <strchr+0x1b>
  801150:	eb 15                	jmp    801167 <strchr+0x2c>
  801152:	38 ca                	cmp    %cl,%dl
  801154:	74 11                	je     801167 <strchr+0x2c>
  801156:	83 c0 01             	add    $0x1,%eax
  801159:	0f b6 10             	movzbl (%eax),%edx
  80115c:	84 d2                	test   %dl,%dl
  80115e:	66 90                	xchg   %ax,%ax
  801160:	75 f0                	jne    801152 <strchr+0x17>
  801162:	b8 00 00 00 00       	mov    $0x0,%eax
			return (char *) s;
	return 0;
}
  801167:	5d                   	pop    %ebp
  801168:	c3                   	ret    

00801169 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
  801169:	55                   	push   %ebp
  80116a:	89 e5                	mov    %esp,%ebp
  80116c:	8b 45 08             	mov    0x8(%ebp),%eax
  80116f:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
	for (; *s; s++)
  801173:	0f b6 10             	movzbl (%eax),%edx
  801176:	84 d2                	test   %dl,%dl
  801178:	74 14                	je     80118e <strfind+0x25>
		if (*s == c)
  80117a:	38 ca                	cmp    %cl,%dl
  80117c:	75 06                	jne    801184 <strfind+0x1b>
  80117e:	eb 0e                	jmp    80118e <strfind+0x25>
  801180:	38 ca                	cmp    %cl,%dl
  801182:	74 0a                	je     80118e <strfind+0x25>
  801184:	83 c0 01             	add    $0x1,%eax
  801187:	0f b6 10             	movzbl (%eax),%edx
  80118a:	84 d2                	test   %dl,%dl
  80118c:	75 f2                	jne    801180 <strfind+0x17>
			break;
	return (char *) s;
}
  80118e:	5d                   	pop    %ebp
  80118f:	90                   	nop    
  801190:	c3                   	ret    

00801191 <memset>:

#if ASM
void *
memset(void *v, int c, size_t n)
{
  801191:	55                   	push   %ebp
  801192:	89 e5                	mov    %esp,%ebp
  801194:	83 ec 08             	sub    $0x8,%esp
  801197:	89 1c 24             	mov    %ebx,(%esp)
  80119a:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80119e:	8b 7d 08             	mov    0x8(%ebp),%edi
  8011a1:	8b 45 0c             	mov    0xc(%ebp),%eax
  8011a4:	8b 5d 10             	mov    0x10(%ebp),%ebx
	char *p;

	if (n == 0)
  8011a7:	85 db                	test   %ebx,%ebx
  8011a9:	74 32                	je     8011dd <memset+0x4c>
		return v;
	if ((int)v%4 == 0 && n%4 == 0) {
  8011ab:	f7 c7 03 00 00 00    	test   $0x3,%edi
  8011b1:	75 25                	jne    8011d8 <memset+0x47>
  8011b3:	f6 c3 03             	test   $0x3,%bl
  8011b6:	75 20                	jne    8011d8 <memset+0x47>
		c &= 0xFF;
  8011b8:	0f b6 d0             	movzbl %al,%edx
		c = (c<<24)|(c<<16)|(c<<8)|c;
		asm volatile("cld; rep stosl\n"
  8011bb:	89 d0                	mov    %edx,%eax
  8011bd:	c1 e0 18             	shl    $0x18,%eax
  8011c0:	89 d1                	mov    %edx,%ecx
  8011c2:	c1 e1 10             	shl    $0x10,%ecx
  8011c5:	09 c8                	or     %ecx,%eax
  8011c7:	09 d0                	or     %edx,%eax
  8011c9:	c1 e2 08             	shl    $0x8,%edx
  8011cc:	09 d0                	or     %edx,%eax
  8011ce:	89 d9                	mov    %ebx,%ecx
  8011d0:	c1 e9 02             	shr    $0x2,%ecx
  8011d3:	fc                   	cld    
  8011d4:	f3 ab                	rep stos %eax,%es:(%edi)
  8011d6:	eb 05                	jmp    8011dd <memset+0x4c>
			:: "D" (v), "a" (c), "c" (n/4)
			: "cc", "memory");
	} else
		asm volatile("cld; rep stosb\n"
  8011d8:	89 d9                	mov    %ebx,%ecx
  8011da:	fc                   	cld    
  8011db:	f3 aa                	rep stos %al,%es:(%edi)
			:: "D" (v), "a" (c), "c" (n)
			: "cc", "memory");
	return v;
}
  8011dd:	89 f8                	mov    %edi,%eax
  8011df:	8b 1c 24             	mov    (%esp),%ebx
  8011e2:	8b 7c 24 04          	mov    0x4(%esp),%edi
  8011e6:	89 ec                	mov    %ebp,%esp
  8011e8:	5d                   	pop    %ebp
  8011e9:	c3                   	ret    

008011ea <memmove>:

void *
memmove(void *dst, const void *src, size_t n)
{
  8011ea:	55                   	push   %ebp
  8011eb:	89 e5                	mov    %esp,%ebp
  8011ed:	83 ec 08             	sub    $0x8,%esp
  8011f0:	89 34 24             	mov    %esi,(%esp)
  8011f3:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8011f7:	8b 45 08             	mov    0x8(%ebp),%eax
  8011fa:	8b 4d 10             	mov    0x10(%ebp),%ecx
	const char *s;
	char *d;
	
	s = src;
  8011fd:	8b 75 0c             	mov    0xc(%ebp),%esi
	d = dst;
  801200:	89 c7                	mov    %eax,%edi
	if (s < d && s + n > d) {
  801202:	39 c6                	cmp    %eax,%esi
  801204:	73 36                	jae    80123c <memmove+0x52>
  801206:	8d 14 0e             	lea    (%esi,%ecx,1),%edx
  801209:	39 d0                	cmp    %edx,%eax
  80120b:	73 2f                	jae    80123c <memmove+0x52>
		s += n;
		d += n;
  80120d:	8d 34 08             	lea    (%eax,%ecx,1),%esi
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
  801210:	f6 c2 03             	test   $0x3,%dl
  801213:	75 1b                	jne    801230 <memmove+0x46>
  801215:	f7 c6 03 00 00 00    	test   $0x3,%esi
  80121b:	75 13                	jne    801230 <memmove+0x46>
  80121d:	f6 c1 03             	test   $0x3,%cl
  801220:	75 0e                	jne    801230 <memmove+0x46>
			asm volatile("std; rep movsl\n"
  801222:	8d 7e fc             	lea    0xfffffffc(%esi),%edi
  801225:	8d 72 fc             	lea    0xfffffffc(%edx),%esi
  801228:	c1 e9 02             	shr    $0x2,%ecx
  80122b:	fd                   	std    
  80122c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  80122e:	eb 09                	jmp    801239 <memmove+0x4f>
				:: "D" (d-4), "S" (s-4), "c" (n/4) : "cc", "memory");
		else
			asm volatile("std; rep movsb\n"
  801230:	8d 7e ff             	lea    0xffffffff(%esi),%edi
  801233:	8d 72 ff             	lea    0xffffffff(%edx),%esi
  801236:	fd                   	std    
  801237:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d-1), "S" (s-1), "c" (n) : "cc", "memory");
		// Some versions of GCC rely on DF being clear
		asm volatile("cld" ::: "cc");
  801239:	fc                   	cld    
  80123a:	eb 21                	jmp    80125d <memmove+0x73>
	} else {
		if ((int)s%4 == 0 && (int)d%4 == 0 && n%4 == 0)
  80123c:	f7 c6 03 00 00 00    	test   $0x3,%esi
  801242:	75 16                	jne    80125a <memmove+0x70>
  801244:	f7 c7 03 00 00 00    	test   $0x3,%edi
  80124a:	75 0e                	jne    80125a <memmove+0x70>
  80124c:	f6 c1 03             	test   $0x3,%cl
  80124f:	90                   	nop    
  801250:	75 08                	jne    80125a <memmove+0x70>
			asm volatile("cld; rep movsl\n"
  801252:	c1 e9 02             	shr    $0x2,%ecx
  801255:	fc                   	cld    
  801256:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
  801258:	eb 03                	jmp    80125d <memmove+0x73>
				:: "D" (d), "S" (s), "c" (n/4) : "cc", "memory");
		else
			asm volatile("cld; rep movsb\n"
  80125a:	fc                   	cld    
  80125b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
				:: "D" (d), "S" (s), "c" (n) : "cc", "memory");
	}
	return dst;
}
  80125d:	8b 34 24             	mov    (%esp),%esi
  801260:	8b 7c 24 04          	mov    0x4(%esp),%edi
  801264:	89 ec                	mov    %ebp,%esp
  801266:	5d                   	pop    %ebp
  801267:	c3                   	ret    

00801268 <memcpy>:

#else

void *
memset(void *v, int c, size_t n)
{
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
		*p++ = c;

	return v;
}

/* no memcpy - use memmove instead */

void *
memmove(void *dst, const void *src, size_t n)
{
	const char *s;
	char *d;
	
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;

	return dst;
}
#endif

/* sigh - gcc emits references to this for structure assignments! */
/* it is *not* prototyped in inc/string.h - do not use directly. */
void *
memcpy(void *dst, void *src, size_t n)
{
  801268:	55                   	push   %ebp
  801269:	89 e5                	mov    %esp,%ebp
  80126b:	83 ec 0c             	sub    $0xc,%esp
	return memmove(dst, src, n);
  80126e:	8b 45 10             	mov    0x10(%ebp),%eax
  801271:	89 44 24 08          	mov    %eax,0x8(%esp)
  801275:	8b 45 0c             	mov    0xc(%ebp),%eax
  801278:	89 44 24 04          	mov    %eax,0x4(%esp)
  80127c:	8b 45 08             	mov    0x8(%ebp),%eax
  80127f:	89 04 24             	mov    %eax,(%esp)
  801282:	e8 63 ff ff ff       	call   8011ea <memmove>
}
  801287:	c9                   	leave  
  801288:	c3                   	ret    

00801289 <memcmp>:

int
memcmp(const void *v1, const void *v2, size_t n)
{
  801289:	55                   	push   %ebp
  80128a:	89 e5                	mov    %esp,%ebp
  80128c:	56                   	push   %esi
  80128d:	53                   	push   %ebx
	const uint8_t *s1 = (const uint8_t *) v1;
	const uint8_t *s2 = (const uint8_t *) v2;

	while (n-- > 0) {
  80128e:	8b 75 10             	mov    0x10(%ebp),%esi
  801291:	83 ee 01             	sub    $0x1,%esi
  801294:	83 fe ff             	cmp    $0xffffffff,%esi
  801297:	74 38                	je     8012d1 <memcmp+0x48>
  801299:	8b 45 08             	mov    0x8(%ebp),%eax
  80129c:	8b 55 0c             	mov    0xc(%ebp),%edx
		if (*s1 != *s2)
  80129f:	0f b6 18             	movzbl (%eax),%ebx
  8012a2:	0f b6 0a             	movzbl (%edx),%ecx
  8012a5:	38 cb                	cmp    %cl,%bl
  8012a7:	74 20                	je     8012c9 <memcmp+0x40>
  8012a9:	eb 12                	jmp    8012bd <memcmp+0x34>
  8012ab:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
  8012af:	0f b6 4a 01          	movzbl 0x1(%edx),%ecx
  8012b3:	83 c0 01             	add    $0x1,%eax
  8012b6:	83 c2 01             	add    $0x1,%edx
  8012b9:	38 cb                	cmp    %cl,%bl
  8012bb:	74 0c                	je     8012c9 <memcmp+0x40>
			return (int) *s1 - (int) *s2;
  8012bd:	0f b6 d3             	movzbl %bl,%edx
  8012c0:	0f b6 c1             	movzbl %cl,%eax
  8012c3:	29 c2                	sub    %eax,%edx
  8012c5:	89 d0                	mov    %edx,%eax
  8012c7:	eb 0d                	jmp    8012d6 <memcmp+0x4d>
  8012c9:	83 ee 01             	sub    $0x1,%esi
  8012cc:	83 fe ff             	cmp    $0xffffffff,%esi
  8012cf:	75 da                	jne    8012ab <memcmp+0x22>
  8012d1:	b8 00 00 00 00       	mov    $0x0,%eax
		s1++, s2++;
	}

	return 0;
}
  8012d6:	5b                   	pop    %ebx
  8012d7:	5e                   	pop    %esi
  8012d8:	5d                   	pop    %ebp
  8012d9:	c3                   	ret    

008012da <memfind>:

void *
memfind(const void *s, int c, size_t n)
{
  8012da:	55                   	push   %ebp
  8012db:	89 e5                	mov    %esp,%ebp
  8012dd:	53                   	push   %ebx
  8012de:	8b 5d 08             	mov    0x8(%ebp),%ebx
	const void *ends = (const char *) s + n;
  8012e1:	89 da                	mov    %ebx,%edx
  8012e3:	03 55 10             	add    0x10(%ebp),%edx
	for (; s < ends; s++)
  8012e6:	39 d3                	cmp    %edx,%ebx
  8012e8:	73 1a                	jae    801304 <memfind+0x2a>
		if (*(const unsigned char *) s == (unsigned char) c)
  8012ea:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
			break;
  8012ee:	89 d8                	mov    %ebx,%eax
  8012f0:	38 0b                	cmp    %cl,(%ebx)
  8012f2:	75 06                	jne    8012fa <memfind+0x20>
  8012f4:	eb 0e                	jmp    801304 <memfind+0x2a>
  8012f6:	38 08                	cmp    %cl,(%eax)
  8012f8:	74 0c                	je     801306 <memfind+0x2c>
  8012fa:	83 c0 01             	add    $0x1,%eax
  8012fd:	39 d0                	cmp    %edx,%eax
  8012ff:	90                   	nop    
  801300:	75 f4                	jne    8012f6 <memfind+0x1c>
  801302:	eb 02                	jmp    801306 <memfind+0x2c>
  801304:	89 d8                	mov    %ebx,%eax
	return (void *) s;
}
  801306:	5b                   	pop    %ebx
  801307:	5d                   	pop    %ebp
  801308:	c3                   	ret    

00801309 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
  801309:	55                   	push   %ebp
  80130a:	89 e5                	mov    %esp,%ebp
  80130c:	57                   	push   %edi
  80130d:	56                   	push   %esi
  80130e:	53                   	push   %ebx
  80130f:	83 ec 04             	sub    $0x4,%esp
  801312:	8b 5d 08             	mov    0x8(%ebp),%ebx
  801315:	8b 75 10             	mov    0x10(%ebp),%esi
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
  801318:	0f b6 03             	movzbl (%ebx),%eax
  80131b:	3c 20                	cmp    $0x20,%al
  80131d:	74 04                	je     801323 <strtol+0x1a>
  80131f:	3c 09                	cmp    $0x9,%al
  801321:	75 0e                	jne    801331 <strtol+0x28>
		s++;
  801323:	83 c3 01             	add    $0x1,%ebx
  801326:	0f b6 03             	movzbl (%ebx),%eax
  801329:	3c 20                	cmp    $0x20,%al
  80132b:	74 f6                	je     801323 <strtol+0x1a>
  80132d:	3c 09                	cmp    $0x9,%al
  80132f:	74 f2                	je     801323 <strtol+0x1a>

	// plus/minus sign
	if (*s == '+')
  801331:	3c 2b                	cmp    $0x2b,%al
  801333:	75 0d                	jne    801342 <strtol+0x39>
		s++;
  801335:	83 c3 01             	add    $0x1,%ebx
  801338:	c7 45 f0 00 00 00 00 	movl   $0x0,0xfffffff0(%ebp)
  80133f:	90                   	nop    
  801340:	eb 15                	jmp    801357 <strtol+0x4e>
	else if (*s == '-')
  801342:	c7 45 f0 00 00 00 00 	movl   $0x0,0xfffffff0(%ebp)
  801349:	3c 2d                	cmp    $0x2d,%al
  80134b:	75 0a                	jne    801357 <strtol+0x4e>
		s++, neg = 1;
  80134d:	83 c3 01             	add    $0x1,%ebx
  801350:	c7 45 f0 01 00 00 00 	movl   $0x1,0xfffffff0(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
  801357:	85 f6                	test   %esi,%esi
  801359:	0f 94 c0             	sete   %al
  80135c:	84 c0                	test   %al,%al
  80135e:	75 05                	jne    801365 <strtol+0x5c>
  801360:	83 fe 10             	cmp    $0x10,%esi
  801363:	75 17                	jne    80137c <strtol+0x73>
  801365:	80 3b 30             	cmpb   $0x30,(%ebx)
  801368:	75 12                	jne    80137c <strtol+0x73>
  80136a:	80 7b 01 78          	cmpb   $0x78,0x1(%ebx)
  80136e:	66 90                	xchg   %ax,%ax
  801370:	75 0a                	jne    80137c <strtol+0x73>
		s += 2, base = 16;
  801372:	83 c3 02             	add    $0x2,%ebx
  801375:	be 10 00 00 00       	mov    $0x10,%esi
  80137a:	eb 1f                	jmp    80139b <strtol+0x92>
	else if (base == 0 && s[0] == '0')
  80137c:	85 f6                	test   %esi,%esi
  80137e:	66 90                	xchg   %ax,%ax
  801380:	75 10                	jne    801392 <strtol+0x89>
  801382:	80 3b 30             	cmpb   $0x30,(%ebx)
  801385:	75 0b                	jne    801392 <strtol+0x89>
		s++, base = 8;
  801387:	83 c3 01             	add    $0x1,%ebx
  80138a:	66 be 08 00          	mov    $0x8,%si
  80138e:	66 90                	xchg   %ax,%ax
  801390:	eb 09                	jmp    80139b <strtol+0x92>
	else if (base == 0)
  801392:	84 c0                	test   %al,%al
  801394:	74 05                	je     80139b <strtol+0x92>
  801396:	be 0a 00 00 00       	mov    $0xa,%esi
  80139b:	bf 00 00 00 00       	mov    $0x0,%edi
		base = 10;

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
  8013a0:	0f b6 13             	movzbl (%ebx),%edx
  8013a3:	89 d1                	mov    %edx,%ecx
  8013a5:	8d 42 d0             	lea    0xffffffd0(%edx),%eax
  8013a8:	3c 09                	cmp    $0x9,%al
  8013aa:	77 08                	ja     8013b4 <strtol+0xab>
			dig = *s - '0';
  8013ac:	0f be c2             	movsbl %dl,%eax
  8013af:	8d 50 d0             	lea    0xffffffd0(%eax),%edx
  8013b2:	eb 1c                	jmp    8013d0 <strtol+0xc7>
		else if (*s >= 'a' && *s <= 'z')
  8013b4:	8d 41 9f             	lea    0xffffff9f(%ecx),%eax
  8013b7:	3c 19                	cmp    $0x19,%al
  8013b9:	77 08                	ja     8013c3 <strtol+0xba>
			dig = *s - 'a' + 10;
  8013bb:	0f be c2             	movsbl %dl,%eax
  8013be:	8d 50 a9             	lea    0xffffffa9(%eax),%edx
  8013c1:	eb 0d                	jmp    8013d0 <strtol+0xc7>
		else if (*s >= 'A' && *s <= 'Z')
  8013c3:	8d 41 bf             	lea    0xffffffbf(%ecx),%eax
  8013c6:	3c 19                	cmp    $0x19,%al
  8013c8:	77 17                	ja     8013e1 <strtol+0xd8>
			dig = *s - 'A' + 10;
  8013ca:	0f be c2             	movsbl %dl,%eax
  8013cd:	8d 50 c9             	lea    0xffffffc9(%eax),%edx
		else
			break;
		if (dig >= base)
  8013d0:	39 f2                	cmp    %esi,%edx
  8013d2:	7d 0d                	jge    8013e1 <strtol+0xd8>
			break;
		s++, val = (val * base) + dig;
  8013d4:	83 c3 01             	add    $0x1,%ebx
  8013d7:	89 f8                	mov    %edi,%eax
  8013d9:	0f af c6             	imul   %esi,%eax
  8013dc:	8d 3c 02             	lea    (%edx,%eax,1),%edi
  8013df:	eb bf                	jmp    8013a0 <strtol+0x97>
		// we don't properly detect overflow!
	}
  8013e1:	89 f8                	mov    %edi,%eax

	if (endptr)
  8013e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  8013e7:	74 05                	je     8013ee <strtol+0xe5>
		*endptr = (char *) s;
  8013e9:	8b 55 0c             	mov    0xc(%ebp),%edx
  8013ec:	89 1a                	mov    %ebx,(%edx)
	return (neg ? -val : val);
  8013ee:	83 7d f0 00          	cmpl   $0x0,0xfffffff0(%ebp)
  8013f2:	74 04                	je     8013f8 <strtol+0xef>
  8013f4:	89 c7                	mov    %eax,%edi
  8013f6:	f7 df                	neg    %edi
}
  8013f8:	89 f8                	mov    %edi,%eax
  8013fa:	83 c4 04             	add    $0x4,%esp
  8013fd:	5b                   	pop    %ebx
  8013fe:	5e                   	pop    %esi
  8013ff:	5f                   	pop    %edi
  801400:	5d                   	pop    %ebp
  801401:	c3                   	ret    
	...

00801404 <sys_cgetc>:
}

int
sys_cgetc(void)
{
  801404:	55                   	push   %ebp
  801405:	89 e5                	mov    %esp,%ebp
  801407:	83 ec 0c             	sub    $0xc,%esp
  80140a:	89 1c 24             	mov    %ebx,(%esp)
  80140d:	89 74 24 04          	mov    %esi,0x4(%esp)
  801411:	89 7c 24 08          	mov    %edi,0x8(%esp)
  801415:	b8 01 00 00 00       	mov    $0x1,%eax
  80141a:	bf 00 00 00 00       	mov    $0x0,%edi
  80141f:	89 fa                	mov    %edi,%edx
  801421:	89 f9                	mov    %edi,%ecx
  801423:	89 fb                	mov    %edi,%ebx
  801425:	89 fe                	mov    %edi,%esi
  801427:	cd 30                	int    $0x30
	return syscall(SYS_cgetc, 0, 0, 0, 0, 0, 0);
}
  801429:	8b 1c 24             	mov    (%esp),%ebx
  80142c:	8b 74 24 04          	mov    0x4(%esp),%esi
  801430:	8b 7c 24 08          	mov    0x8(%esp),%edi
  801434:	89 ec                	mov    %ebp,%esp
  801436:	5d                   	pop    %ebp
  801437:	c3                   	ret    

00801438 <sys_cputs>:
  801438:	55                   	push   %ebp
  801439:	89 e5                	mov    %esp,%ebp
  80143b:	83 ec 0c             	sub    $0xc,%esp
  80143e:	89 1c 24             	mov    %ebx,(%esp)
  801441:	89 74 24 04          	mov    %esi,0x4(%esp)
  801445:	89 7c 24 08          	mov    %edi,0x8(%esp)
  801449:	8b 55 08             	mov    0x8(%ebp),%edx
  80144c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80144f:	bf 00 00 00 00       	mov    $0x0,%edi
  801454:	89 f8                	mov    %edi,%eax
  801456:	89 fb                	mov    %edi,%ebx
  801458:	89 fe                	mov    %edi,%esi
  80145a:	cd 30                	int    $0x30
  80145c:	8b 1c 24             	mov    (%esp),%ebx
  80145f:	8b 74 24 04          	mov    0x4(%esp),%esi
  801463:	8b 7c 24 08          	mov    0x8(%esp),%edi
  801467:	89 ec                	mov    %ebp,%esp
  801469:	5d                   	pop    %ebp
  80146a:	c3                   	ret    

0080146b <sys_time_msec>:

int
sys_env_destroy(envid_t envid)
{
	return syscall(SYS_env_destroy, 1, envid, 0, 0, 0, 0);
}

envid_t
sys_getenvid(void)
{
	 return syscall(SYS_getenvid, 0, 0, 0, 0, 0, 0);
}

void
sys_yield(void)
{
	syscall(SYS_yield, 0, 0, 0, 0, 0, 0);
}

int
sys_page_alloc(envid_t envid, void *va, int perm)
{
	return syscall(SYS_page_alloc, 1, envid, (uint32_t) va, perm, 0, 0);
}

int
sys_page_map(envid_t srcenv, void *srcva, envid_t dstenv, void *dstva, int perm)
{
	return syscall(SYS_page_map, 1, srcenv, (uint32_t) srcva, dstenv, (uint32_t) dstva, perm);
}

int
sys_page_unmap(envid_t envid, void *va)
{
	return syscall(SYS_page_unmap, 1, envid, (uint32_t) va, 0, 0, 0);
}

// sys_exofork is inlined in lib.h

int
sys_env_set_status(envid_t envid, int status)
{
	return syscall(SYS_env_set_status, 1, envid, status, 0, 0, 0);
}

int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
	return syscall(SYS_env_set_trapframe, 1, envid, (uint32_t) tf, 0, 0, 0);
}

int
sys_env_set_pgfault_upcall(envid_t envid, void *upcall)
{
	return syscall(SYS_env_set_pgfault_upcall, 1, envid, (uint32_t) upcall, 0, 0, 0);
}

int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, int perm)
{
	return syscall(SYS_ipc_try_send, 0, envid, value, (uint32_t) srcva, perm, 0);
}

int
sys_ipc_recv(void *dstva)
{
	return syscall(SYS_ipc_recv, 1, (uint32_t)dstva, 0, 0, 0, 0);
}

unsigned int
sys_time_msec(void)
{
  80146b:	55                   	push   %ebp
  80146c:	89 e5                	mov    %esp,%ebp
  80146e:	83 ec 0c             	sub    $0xc,%esp
  801471:	89 1c 24             	mov    %ebx,(%esp)
  801474:	89 74 24 04          	mov    %esi,0x4(%esp)
  801478:	89 7c 24 08          	mov    %edi,0x8(%esp)
  80147c:	b8 0e 00 00 00       	mov    $0xe,%eax
  801481:	bf 00 00 00 00       	mov    $0x0,%edi
  801486:	89 fa                	mov    %edi,%edx
  801488:	89 f9                	mov    %edi,%ecx
  80148a:	89 fb                	mov    %edi,%ebx
  80148c:	89 fe                	mov    %edi,%esi
  80148e:	cd 30                	int    $0x30
	return (unsigned int) syscall(SYS_time_msec, 0, 0, 0, 0, 0, 0);
}
  801490:	8b 1c 24             	mov    (%esp),%ebx
  801493:	8b 74 24 04          	mov    0x4(%esp),%esi
  801497:	8b 7c 24 08          	mov    0x8(%esp),%edi
  80149b:	89 ec                	mov    %ebp,%esp
  80149d:	5d                   	pop    %ebp
  80149e:	c3                   	ret    

0080149f <sys_ipc_recv>:
  80149f:	55                   	push   %ebp
  8014a0:	89 e5                	mov    %esp,%ebp
  8014a2:	83 ec 28             	sub    $0x28,%esp
  8014a5:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8014a8:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8014ab:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8014ae:	8b 55 08             	mov    0x8(%ebp),%edx
  8014b1:	b8 0d 00 00 00       	mov    $0xd,%eax
  8014b6:	bf 00 00 00 00       	mov    $0x0,%edi
  8014bb:	89 f9                	mov    %edi,%ecx
  8014bd:	89 fb                	mov    %edi,%ebx
  8014bf:	89 fe                	mov    %edi,%esi
  8014c1:	cd 30                	int    $0x30
  8014c3:	85 c0                	test   %eax,%eax
  8014c5:	7e 28                	jle    8014ef <sys_ipc_recv+0x50>
  8014c7:	89 44 24 10          	mov    %eax,0x10(%esp)
  8014cb:	c7 44 24 0c 0d 00 00 	movl   $0xd,0xc(%esp)
  8014d2:	00 
  8014d3:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  8014da:	00 
  8014db:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  8014e2:	00 
  8014e3:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  8014ea:	e8 9d f3 ff ff       	call   80088c <_panic>
  8014ef:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8014f2:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8014f5:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8014f8:	89 ec                	mov    %ebp,%esp
  8014fa:	5d                   	pop    %ebp
  8014fb:	c3                   	ret    

008014fc <sys_ipc_try_send>:
  8014fc:	55                   	push   %ebp
  8014fd:	89 e5                	mov    %esp,%ebp
  8014ff:	83 ec 0c             	sub    $0xc,%esp
  801502:	89 1c 24             	mov    %ebx,(%esp)
  801505:	89 74 24 04          	mov    %esi,0x4(%esp)
  801509:	89 7c 24 08          	mov    %edi,0x8(%esp)
  80150d:	8b 55 08             	mov    0x8(%ebp),%edx
  801510:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801513:	8b 5d 10             	mov    0x10(%ebp),%ebx
  801516:	8b 7d 14             	mov    0x14(%ebp),%edi
  801519:	b8 0c 00 00 00       	mov    $0xc,%eax
  80151e:	be 00 00 00 00       	mov    $0x0,%esi
  801523:	cd 30                	int    $0x30
  801525:	8b 1c 24             	mov    (%esp),%ebx
  801528:	8b 74 24 04          	mov    0x4(%esp),%esi
  80152c:	8b 7c 24 08          	mov    0x8(%esp),%edi
  801530:	89 ec                	mov    %ebp,%esp
  801532:	5d                   	pop    %ebp
  801533:	c3                   	ret    

00801534 <sys_env_set_pgfault_upcall>:
  801534:	55                   	push   %ebp
  801535:	89 e5                	mov    %esp,%ebp
  801537:	83 ec 28             	sub    $0x28,%esp
  80153a:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80153d:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  801540:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  801543:	8b 55 08             	mov    0x8(%ebp),%edx
  801546:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801549:	b8 0a 00 00 00       	mov    $0xa,%eax
  80154e:	bf 00 00 00 00       	mov    $0x0,%edi
  801553:	89 fb                	mov    %edi,%ebx
  801555:	89 fe                	mov    %edi,%esi
  801557:	cd 30                	int    $0x30
  801559:	85 c0                	test   %eax,%eax
  80155b:	7e 28                	jle    801585 <sys_env_set_pgfault_upcall+0x51>
  80155d:	89 44 24 10          	mov    %eax,0x10(%esp)
  801561:	c7 44 24 0c 0a 00 00 	movl   $0xa,0xc(%esp)
  801568:	00 
  801569:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  801570:	00 
  801571:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  801578:	00 
  801579:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  801580:	e8 07 f3 ff ff       	call   80088c <_panic>
  801585:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  801588:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80158b:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80158e:	89 ec                	mov    %ebp,%esp
  801590:	5d                   	pop    %ebp
  801591:	c3                   	ret    

00801592 <sys_env_set_trapframe>:
  801592:	55                   	push   %ebp
  801593:	89 e5                	mov    %esp,%ebp
  801595:	83 ec 28             	sub    $0x28,%esp
  801598:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80159b:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80159e:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8015a1:	8b 55 08             	mov    0x8(%ebp),%edx
  8015a4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  8015a7:	b8 09 00 00 00       	mov    $0x9,%eax
  8015ac:	bf 00 00 00 00       	mov    $0x0,%edi
  8015b1:	89 fb                	mov    %edi,%ebx
  8015b3:	89 fe                	mov    %edi,%esi
  8015b5:	cd 30                	int    $0x30
  8015b7:	85 c0                	test   %eax,%eax
  8015b9:	7e 28                	jle    8015e3 <sys_env_set_trapframe+0x51>
  8015bb:	89 44 24 10          	mov    %eax,0x10(%esp)
  8015bf:	c7 44 24 0c 09 00 00 	movl   $0x9,0xc(%esp)
  8015c6:	00 
  8015c7:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  8015ce:	00 
  8015cf:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  8015d6:	00 
  8015d7:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  8015de:	e8 a9 f2 ff ff       	call   80088c <_panic>
  8015e3:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8015e6:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8015e9:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8015ec:	89 ec                	mov    %ebp,%esp
  8015ee:	5d                   	pop    %ebp
  8015ef:	c3                   	ret    

008015f0 <sys_env_set_status>:
  8015f0:	55                   	push   %ebp
  8015f1:	89 e5                	mov    %esp,%ebp
  8015f3:	83 ec 28             	sub    $0x28,%esp
  8015f6:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8015f9:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8015fc:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8015ff:	8b 55 08             	mov    0x8(%ebp),%edx
  801602:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801605:	b8 08 00 00 00       	mov    $0x8,%eax
  80160a:	bf 00 00 00 00       	mov    $0x0,%edi
  80160f:	89 fb                	mov    %edi,%ebx
  801611:	89 fe                	mov    %edi,%esi
  801613:	cd 30                	int    $0x30
  801615:	85 c0                	test   %eax,%eax
  801617:	7e 28                	jle    801641 <sys_env_set_status+0x51>
  801619:	89 44 24 10          	mov    %eax,0x10(%esp)
  80161d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  801624:	00 
  801625:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  80162c:	00 
  80162d:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  801634:	00 
  801635:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  80163c:	e8 4b f2 ff ff       	call   80088c <_panic>
  801641:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  801644:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  801647:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80164a:	89 ec                	mov    %ebp,%esp
  80164c:	5d                   	pop    %ebp
  80164d:	c3                   	ret    

0080164e <sys_page_unmap>:
  80164e:	55                   	push   %ebp
  80164f:	89 e5                	mov    %esp,%ebp
  801651:	83 ec 28             	sub    $0x28,%esp
  801654:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  801657:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80165a:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80165d:	8b 55 08             	mov    0x8(%ebp),%edx
  801660:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  801663:	b8 06 00 00 00       	mov    $0x6,%eax
  801668:	bf 00 00 00 00       	mov    $0x0,%edi
  80166d:	89 fb                	mov    %edi,%ebx
  80166f:	89 fe                	mov    %edi,%esi
  801671:	cd 30                	int    $0x30
  801673:	85 c0                	test   %eax,%eax
  801675:	7e 28                	jle    80169f <sys_page_unmap+0x51>
  801677:	89 44 24 10          	mov    %eax,0x10(%esp)
  80167b:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  801682:	00 
  801683:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  80168a:	00 
  80168b:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  801692:	00 
  801693:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  80169a:	e8 ed f1 ff ff       	call   80088c <_panic>
  80169f:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8016a2:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8016a5:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8016a8:	89 ec                	mov    %ebp,%esp
  8016aa:	5d                   	pop    %ebp
  8016ab:	c3                   	ret    

008016ac <sys_page_map>:
  8016ac:	55                   	push   %ebp
  8016ad:	89 e5                	mov    %esp,%ebp
  8016af:	83 ec 28             	sub    $0x28,%esp
  8016b2:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8016b5:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8016b8:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8016bb:	8b 55 08             	mov    0x8(%ebp),%edx
  8016be:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  8016c1:	8b 5d 10             	mov    0x10(%ebp),%ebx
  8016c4:	8b 7d 14             	mov    0x14(%ebp),%edi
  8016c7:	8b 75 18             	mov    0x18(%ebp),%esi
  8016ca:	b8 05 00 00 00       	mov    $0x5,%eax
  8016cf:	cd 30                	int    $0x30
  8016d1:	85 c0                	test   %eax,%eax
  8016d3:	7e 28                	jle    8016fd <sys_page_map+0x51>
  8016d5:	89 44 24 10          	mov    %eax,0x10(%esp)
  8016d9:	c7 44 24 0c 05 00 00 	movl   $0x5,0xc(%esp)
  8016e0:	00 
  8016e1:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  8016e8:	00 
  8016e9:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  8016f0:	00 
  8016f1:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  8016f8:	e8 8f f1 ff ff       	call   80088c <_panic>
  8016fd:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  801700:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  801703:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  801706:	89 ec                	mov    %ebp,%esp
  801708:	5d                   	pop    %ebp
  801709:	c3                   	ret    

0080170a <sys_page_alloc>:
  80170a:	55                   	push   %ebp
  80170b:	89 e5                	mov    %esp,%ebp
  80170d:	83 ec 28             	sub    $0x28,%esp
  801710:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  801713:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  801716:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  801719:	8b 55 08             	mov    0x8(%ebp),%edx
  80171c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80171f:	8b 5d 10             	mov    0x10(%ebp),%ebx
  801722:	b8 04 00 00 00       	mov    $0x4,%eax
  801727:	bf 00 00 00 00       	mov    $0x0,%edi
  80172c:	89 fe                	mov    %edi,%esi
  80172e:	cd 30                	int    $0x30
  801730:	85 c0                	test   %eax,%eax
  801732:	7e 28                	jle    80175c <sys_page_alloc+0x52>
  801734:	89 44 24 10          	mov    %eax,0x10(%esp)
  801738:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%esp)
  80173f:	00 
  801740:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  801747:	00 
  801748:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  80174f:	00 
  801750:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  801757:	e8 30 f1 ff ff       	call   80088c <_panic>
  80175c:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80175f:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  801762:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  801765:	89 ec                	mov    %ebp,%esp
  801767:	5d                   	pop    %ebp
  801768:	c3                   	ret    

00801769 <sys_yield>:
  801769:	55                   	push   %ebp
  80176a:	89 e5                	mov    %esp,%ebp
  80176c:	83 ec 0c             	sub    $0xc,%esp
  80176f:	89 1c 24             	mov    %ebx,(%esp)
  801772:	89 74 24 04          	mov    %esi,0x4(%esp)
  801776:	89 7c 24 08          	mov    %edi,0x8(%esp)
  80177a:	b8 0b 00 00 00       	mov    $0xb,%eax
  80177f:	bf 00 00 00 00       	mov    $0x0,%edi
  801784:	89 fa                	mov    %edi,%edx
  801786:	89 f9                	mov    %edi,%ecx
  801788:	89 fb                	mov    %edi,%ebx
  80178a:	89 fe                	mov    %edi,%esi
  80178c:	cd 30                	int    $0x30
  80178e:	8b 1c 24             	mov    (%esp),%ebx
  801791:	8b 74 24 04          	mov    0x4(%esp),%esi
  801795:	8b 7c 24 08          	mov    0x8(%esp),%edi
  801799:	89 ec                	mov    %ebp,%esp
  80179b:	5d                   	pop    %ebp
  80179c:	c3                   	ret    

0080179d <sys_getenvid>:
  80179d:	55                   	push   %ebp
  80179e:	89 e5                	mov    %esp,%ebp
  8017a0:	83 ec 0c             	sub    $0xc,%esp
  8017a3:	89 1c 24             	mov    %ebx,(%esp)
  8017a6:	89 74 24 04          	mov    %esi,0x4(%esp)
  8017aa:	89 7c 24 08          	mov    %edi,0x8(%esp)
  8017ae:	b8 02 00 00 00       	mov    $0x2,%eax
  8017b3:	bf 00 00 00 00       	mov    $0x0,%edi
  8017b8:	89 fa                	mov    %edi,%edx
  8017ba:	89 f9                	mov    %edi,%ecx
  8017bc:	89 fb                	mov    %edi,%ebx
  8017be:	89 fe                	mov    %edi,%esi
  8017c0:	cd 30                	int    $0x30
  8017c2:	8b 1c 24             	mov    (%esp),%ebx
  8017c5:	8b 74 24 04          	mov    0x4(%esp),%esi
  8017c9:	8b 7c 24 08          	mov    0x8(%esp),%edi
  8017cd:	89 ec                	mov    %ebp,%esp
  8017cf:	5d                   	pop    %ebp
  8017d0:	c3                   	ret    

008017d1 <sys_env_destroy>:
  8017d1:	55                   	push   %ebp
  8017d2:	89 e5                	mov    %esp,%ebp
  8017d4:	83 ec 28             	sub    $0x28,%esp
  8017d7:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8017da:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8017dd:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8017e0:	8b 55 08             	mov    0x8(%ebp),%edx
  8017e3:	b8 03 00 00 00       	mov    $0x3,%eax
  8017e8:	bf 00 00 00 00       	mov    $0x0,%edi
  8017ed:	89 f9                	mov    %edi,%ecx
  8017ef:	89 fb                	mov    %edi,%ebx
  8017f1:	89 fe                	mov    %edi,%esi
  8017f3:	cd 30                	int    $0x30
  8017f5:	85 c0                	test   %eax,%eax
  8017f7:	7e 28                	jle    801821 <sys_env_destroy+0x50>
  8017f9:	89 44 24 10          	mov    %eax,0x10(%esp)
  8017fd:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  801804:	00 
  801805:	c7 44 24 08 3f 26 81 	movl   $0x81263f,0x8(%esp)
  80180c:	00 
  80180d:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  801814:	00 
  801815:	c7 04 24 5c 26 81 00 	movl   $0x81265c,(%esp)
  80181c:	e8 6b f0 ff ff       	call   80088c <_panic>
  801821:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  801824:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  801827:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80182a:	89 ec                	mov    %ebp,%esp
  80182c:	5d                   	pop    %ebp
  80182d:	c3                   	ret    
	...

00801830 <duppage>:
// It is also OK to panic on error.
// 
static int
duppage(envid_t envid, unsigned pn)
{
  801830:	55                   	push   %ebp
  801831:	89 e5                	mov    %esp,%ebp
  801833:	53                   	push   %ebx
  801834:	83 ec 14             	sub    $0x14,%esp
  801837:	89 c1                	mov    %eax,%ecx
	int r;

	// LAB 4: Your code here.
	pde_t *pde;
	pte_t *pte;
	void *addr=(void*)(pn*PGSIZE);
  801839:	89 d3                	mov    %edx,%ebx
  80183b:	c1 e3 0c             	shl    $0xc,%ebx
	pde =(pde_t*) &vpd[VPD(addr)];
	if(*pde&PTE_P)
  80183e:	89 d8                	mov    %ebx,%eax
  801840:	c1 e8 16             	shr    $0x16,%eax
  801843:	f6 04 85 00 d0 7b ef 	testb  $0x1,0xef7bd000(,%eax,4)
  80184a:	01 
  80184b:	74 14                	je     801861 <duppage+0x31>
	{
		pte=(pte_t*)&vpt[VPN(addr)];
	}
	else    panic("page table for pn page is not exist");
	if((*pte&PTE_W)||(*pte&PTE_COW))
  80184d:	89 d8                	mov    %ebx,%eax
  80184f:	c1 e8 0c             	shr    $0xc,%eax
  801852:	f7 04 85 00 00 40 ef 	testl  $0x802,0xef400000(,%eax,4)
  801859:	02 08 00 00 
  80185d:	75 1e                	jne    80187d <duppage+0x4d>
  80185f:	eb 73                	jmp    8018d4 <duppage+0xa4>
  801861:	c7 44 24 08 6c 26 81 	movl   $0x81266c,0x8(%esp)
  801868:	00 
  801869:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
  801870:	00 
  801871:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801878:	e8 0f f0 ff ff       	call   80088c <_panic>
	{
		if((r=sys_page_map(0,addr,envid,addr,PTE_COW|PTE_U))<0)
  80187d:	c7 44 24 10 04 08 00 	movl   $0x804,0x10(%esp)
  801884:	00 
  801885:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  801889:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80188d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  801891:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801898:	e8 0f fe ff ff       	call   8016ac <sys_page_map>
  80189d:	85 c0                	test   %eax,%eax
  80189f:	78 60                	js     801901 <duppage+0xd1>
			return r;
		if((r=sys_page_map(0,addr,0,addr,PTE_COW|PTE_U))<0)//映射的时候注意env的id
  8018a1:	c7 44 24 10 04 08 00 	movl   $0x804,0x10(%esp)
  8018a8:	00 
  8018a9:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  8018ad:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8018b4:	00 
  8018b5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8018b9:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8018c0:	e8 e7 fd ff ff       	call   8016ac <sys_page_map>
  8018c5:	85 c0                	test   %eax,%eax
  8018c7:	0f 9f c2             	setg   %dl
  8018ca:	0f b6 d2             	movzbl %dl,%edx
  8018cd:	83 ea 01             	sub    $0x1,%edx
  8018d0:	21 d0                	and    %edx,%eax
  8018d2:	eb 2d                	jmp    801901 <duppage+0xd1>
                        return r;
	}
	else{	
		if((r=sys_page_map(0,addr,envid,addr,PTE_U|PTE_P))<0)
  8018d4:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%esp)
  8018db:	00 
  8018dc:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  8018e0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  8018e4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8018e8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8018ef:	e8 b8 fd ff ff       	call   8016ac <sys_page_map>
  8018f4:	85 c0                	test   %eax,%eax
  8018f6:	0f 9f c2             	setg   %dl
  8018f9:	0f b6 d2             	movzbl %dl,%edx
  8018fc:	83 ea 01             	sub    $0x1,%edx
  8018ff:	21 d0                	and    %edx,%eax
			return r;
	}
	//panic("duppage not implemented");
	return 0;
}
  801901:	83 c4 14             	add    $0x14,%esp
  801904:	5b                   	pop    %ebx
  801905:	5d                   	pop    %ebp
  801906:	c3                   	ret    

00801907 <sfork>:

//
// User-level fork with copy-on-write.
// Set up our page fault handler appropriately.
// Create a child.
// Copy our address space and page fault handler setup to the child.
// Then mark the child as runnable and return.
//
// Returns: child's envid to the parent, 0 to the child, < 0 on error.
// It is also OK to panic on error.
//
// Hint:
//   Use vpd, vpt, and duppage.
//   Remember to fix "env" in the child process.
//   Neither user exception stack should ever be marked copy-on-write,
//   so you must allocate a new page for the child's user exception stack.
//
envid_t
fork(void)
{
	// LAB 4: Your code here.	
	int r;
	pde_t *pde;
	pte_t *pte;
	unsigned i;
	uint32_t addr;
	envid_t envid;
	envid = sys_exofork();//创建子环境
	if(envid < 0)
		panic("sys_exofork: %e", envid);
	if(envid==0)//子环境中
	{
		env = &envs[ENVX(sys_getenvid())];
		return 0;
	}
	else{//父环境中
		set_pgfault_handler(pgfault);//设置缺页异常处理函数，这里设置了父环境的缺页异常栈
		for(i=0;i<(unsigned)VPN(UTOP);i++)//重映射writable or copy-to-write的页面
		{
			if(i==(unsigned)VPN(UXSTACKTOP-PGSIZE))//特殊处理，用户层缺页异常栈
				continue;
			addr=i*PGSIZE;
			pde =(pde_t*) &vpd[VPD(addr)];
			if(*pde&PTE_P)//这里只处理有物理页面映射的页表项
			{
				pte=(pte_t*)&vpt[VPN(addr)];
			}
			else    continue;
			if((*pte&PTE_W)||(*pte&PTE_COW))
			{
				if((r=duppage(envid,i))<0)
					return r;
			}
		}
		if((r=sys_page_alloc(envid,(void*)(UXSTACKTOP-PGSIZE),PTE_W|PTE_U|PTE_P))<0)
			return r;//设置子环境的缺页异常栈
		if((r=sys_env_set_pgfault_upcall(envid,(void*)_pgfault_upcall))<0)
			return r;//设置子环境的缺页异常处理入口点
		if((r=sys_env_set_status(envid,ENV_RUNNABLE))<0)
			return r;//设置子环境的状态为可运行
		return envid;
	}
	//panic("fork not implemented");
}
static int
sduppage(envid_t envid, unsigned pn)
{
	int r;

	// LAB 4: Your code here.
	pde_t *pde;
	pte_t *pte;
	void *addr=(void*)(pn*PGSIZE);
	pde =(pde_t*) &vpd[VPD(addr)];
	if(*pde&PTE_P)
	{
		pte=(pte_t*)&vpt[VPN(addr)];
	}
	else    panic("page table for pn page is not exist");
	if(*pte&PTE_W)
	{
		//cprintf("sduppage:addr=%x\n",addr);
		if((r=sys_page_map(0,addr,envid,addr,PTE_W|PTE_U))<0)
			return r;
		if((r=sys_page_map(0,addr,0,addr,PTE_W|PTE_U))<0)//映射的时候注意env的id
                        return r;
	}
	else{	
		if((r=sys_page_map(0,addr,envid,addr,PTE_U|PTE_P))<0)
			return r;
	}
	//panic("duppage not implemented");
	return 0;
}
// Challenge!
int
sfork(void)
{
  801907:	55                   	push   %ebp
  801908:	89 e5                	mov    %esp,%ebp
  80190a:	57                   	push   %edi
  80190b:	56                   	push   %esi
  80190c:	53                   	push   %ebx
  80190d:	83 ec 1c             	sub    $0x1c,%esp
static __inline envid_t
sys_exofork(void)
{
	envid_t ret;
	__asm __volatile("int %2"
  801910:	ba 07 00 00 00       	mov    $0x7,%edx
  801915:	89 d0                	mov    %edx,%eax
  801917:	cd 30                	int    $0x30
  801919:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
	int r;
	pde_t *pde;
	pte_t *pte;
	unsigned i;
	uint32_t addr;
	envid_t envid;
	envid = sys_exofork();//创建子环境
	if(envid < 0)
  80191c:	85 c0                	test   %eax,%eax
  80191e:	79 20                	jns    801940 <sfork+0x39>
		panic("sys_exofork: %e", envid);
  801920:	89 44 24 0c          	mov    %eax,0xc(%esp)
  801924:	c7 44 24 08 35 27 81 	movl   $0x812735,0x8(%esp)
  80192b:	00 
  80192c:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
  801933:	00 
  801934:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  80193b:	e8 4c ef ff ff       	call   80088c <_panic>
	if(envid==0)//子环境中
  801940:	83 7d f0 00          	cmpl   $0x0,0xfffffff0(%ebp)
  801944:	75 21                	jne    801967 <sfork+0x60>
	{
		env = &envs[ENVX(sys_getenvid())];
  801946:	e8 52 fe ff ff       	call   80179d <sys_getenvid>
  80194b:	25 ff 03 00 00       	and    $0x3ff,%eax
  801950:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801953:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801958:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  80195d:	b8 00 00 00 00       	mov    $0x0,%eax
  801962:	e9 83 01 00 00       	jmp    801aea <sfork+0x1e3>
		return 0;
	}
	else{//父环境中,注意：这里需要设置父环境的缺页异常栈，还需要设置子环境的缺页异常栈，
	//父子环境的页异常栈不共享？具体原因还得思考
		env = &envs[ENVX(sys_getenvid())];
  801967:	e8 31 fe ff ff       	call   80179d <sys_getenvid>
  80196c:	25 ff 03 00 00       	and    $0x3ff,%eax
  801971:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801974:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801979:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
		set_pgfault_handler(pgfault);//设置缺页异常处理函数，这里设置了父环境的缺页异常栈
  80197e:	c7 04 24 f2 1a 80 00 	movl   $0x801af2,(%esp)
  801985:	e8 0e 16 00 00       	call   802f98 <set_pgfault_handler>
  80198a:	be 00 00 00 00       	mov    $0x0,%esi
  80198f:	bf 00 00 00 00       	mov    $0x0,%edi
		for(i=0;i<(unsigned)VPN(UTOP);i++)//重映射writable or copy-to-write的页面
		{
			addr=i*PGSIZE;
			pde =(pde_t*) &vpd[VPD(addr)];
  801994:	89 f8                	mov    %edi,%eax
  801996:	c1 e8 16             	shr    $0x16,%eax
  801999:	c1 e0 02             	shl    $0x2,%eax
			if(*pde&PTE_P)//这里只处理有物理页面映射的页表项
  80199c:	f6 80 00 d0 7b ef 01 	testb  $0x1,0xef7bd000(%eax)
  8019a3:	0f 84 dc 00 00 00    	je     801a85 <sfork+0x17e>
			{
				pte=(pte_t*)&vpt[VPN(addr)];
			}
			else    continue;
			if((i==(unsigned)VPN(USTACKTOP-PGSIZE))||(i==(unsigned)VPN(PFTEMP)))
  8019a9:	81 fe fd eb 0e 00    	cmp    $0xeebfd,%esi
  8019af:	74 08                	je     8019b9 <sfork+0xb2>
  8019b1:	81 fe ff 07 00 00    	cmp    $0x7ff,%esi
  8019b7:	75 17                	jne    8019d0 <sfork+0xc9>
								//特殊处理，用户层普通栈
			{	
				if((r=duppage(envid,i))<0)
  8019b9:	89 f2                	mov    %esi,%edx
  8019bb:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  8019be:	e8 6d fe ff ff       	call   801830 <duppage>
  8019c3:	85 c0                	test   %eax,%eax
  8019c5:	0f 89 ba 00 00 00    	jns    801a85 <sfork+0x17e>
  8019cb:	e9 1a 01 00 00       	jmp    801aea <sfork+0x1e3>
  8019d0:	f6 80 00 d0 7b ef 01 	testb  $0x1,0xef7bd000(%eax)
  8019d7:	74 11                	je     8019ea <sfork+0xe3>
  8019d9:	89 f8                	mov    %edi,%eax
  8019db:	c1 e8 0c             	shr    $0xc,%eax
  8019de:	f6 04 85 00 00 40 ef 	testb  $0x2,0xef400000(,%eax,4)
  8019e5:	02 
  8019e6:	75 1e                	jne    801a06 <sfork+0xff>
  8019e8:	eb 74                	jmp    801a5e <sfork+0x157>
  8019ea:	c7 44 24 08 6c 26 81 	movl   $0x81266c,0x8(%esp)
  8019f1:	00 
  8019f2:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
  8019f9:	00 
  8019fa:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801a01:	e8 86 ee ff ff       	call   80088c <_panic>
  801a06:	c7 44 24 10 06 00 00 	movl   $0x6,0x10(%esp)
  801a0d:	00 
  801a0e:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  801a12:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  801a15:	89 44 24 08          	mov    %eax,0x8(%esp)
  801a19:	89 7c 24 04          	mov    %edi,0x4(%esp)
  801a1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801a24:	e8 83 fc ff ff       	call   8016ac <sys_page_map>
  801a29:	85 c0                	test   %eax,%eax
  801a2b:	0f 88 b9 00 00 00    	js     801aea <sfork+0x1e3>
  801a31:	c7 44 24 10 06 00 00 	movl   $0x6,0x10(%esp)
  801a38:	00 
  801a39:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  801a3d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  801a44:	00 
  801a45:	89 7c 24 04          	mov    %edi,0x4(%esp)
  801a49:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801a50:	e8 57 fc ff ff       	call   8016ac <sys_page_map>
  801a55:	85 c0                	test   %eax,%eax
  801a57:	79 2c                	jns    801a85 <sfork+0x17e>
  801a59:	e9 8c 00 00 00       	jmp    801aea <sfork+0x1e3>
  801a5e:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%esp)
  801a65:	00 
  801a66:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  801a6a:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  801a6d:	89 44 24 08          	mov    %eax,0x8(%esp)
  801a71:	89 7c 24 04          	mov    %edi,0x4(%esp)
  801a75:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801a7c:	e8 2b fc ff ff       	call   8016ac <sys_page_map>
  801a81:	85 c0                	test   %eax,%eax
  801a83:	78 65                	js     801aea <sfork+0x1e3>
  801a85:	83 c6 01             	add    $0x1,%esi
  801a88:	81 c7 00 10 00 00    	add    $0x1000,%edi
  801a8e:	81 fe 00 ec 0e 00    	cmp    $0xeec00,%esi
  801a94:	0f 85 fa fe ff ff    	jne    801994 <sfork+0x8d>
					return r;
				continue;
			}
			if((r=sduppage(envid,i))<0)
				return r;
		}
		if((r=sys_page_alloc(envid,(void*)(UXSTACKTOP-PGSIZE),PTE_W|PTE_U|PTE_P))<0)
  801a9a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  801aa1:	00 
  801aa2:	c7 44 24 04 00 f0 bf 	movl   $0xeebff000,0x4(%esp)
  801aa9:	ee 
  801aaa:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  801aad:	89 04 24             	mov    %eax,(%esp)
  801ab0:	e8 55 fc ff ff       	call   80170a <sys_page_alloc>
  801ab5:	85 c0                	test   %eax,%eax
  801ab7:	78 31                	js     801aea <sfork+0x1e3>
                        return r;//设置子环境的缺页异常栈
		if((r=sys_env_set_pgfault_upcall(envid,(void*)_pgfault_upcall))<0)
  801ab9:	c7 44 24 04 1c 30 80 	movl   $0x80301c,0x4(%esp)
  801ac0:	00 
  801ac1:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  801ac4:	89 04 24             	mov    %eax,(%esp)
  801ac7:	e8 68 fa ff ff       	call   801534 <sys_env_set_pgfault_upcall>
  801acc:	85 c0                	test   %eax,%eax
  801ace:	78 1a                	js     801aea <sfork+0x1e3>
			return r;//设置子环境的缺页异常处理入口点
		if((r=sys_env_set_status(envid,ENV_RUNNABLE))<0)
  801ad0:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  801ad7:	00 
  801ad8:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  801adb:	89 04 24             	mov    %eax,(%esp)
  801ade:	e8 0d fb ff ff       	call   8015f0 <sys_env_set_status>
  801ae3:	85 c0                	test   %eax,%eax
  801ae5:	78 03                	js     801aea <sfork+0x1e3>
  801ae7:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
			return r;//设置子环境的状态为可运行
		return envid;
	}
	//panic("sfork not implemented");
	//return -E_INVAL;
}
  801aea:	83 c4 1c             	add    $0x1c,%esp
  801aed:	5b                   	pop    %ebx
  801aee:	5e                   	pop    %esi
  801aef:	5f                   	pop    %edi
  801af0:	5d                   	pop    %ebp
  801af1:	c3                   	ret    

00801af2 <pgfault>:
  801af2:	55                   	push   %ebp
  801af3:	89 e5                	mov    %esp,%ebp
  801af5:	56                   	push   %esi
  801af6:	53                   	push   %ebx
  801af7:	83 ec 20             	sub    $0x20,%esp
  801afa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  801afd:	8b 71 04             	mov    0x4(%ecx),%esi
  801b00:	8b 19                	mov    (%ecx),%ebx
  801b02:	89 d8                	mov    %ebx,%eax
  801b04:	c1 e8 16             	shr    $0x16,%eax
  801b07:	c1 e0 02             	shl    $0x2,%eax
  801b0a:	8d 90 00 d0 7b ef    	lea    0xef7bd000(%eax),%edx
  801b10:	f6 80 00 d0 7b ef 01 	testb  $0x1,0xef7bd000(%eax)
  801b17:	74 16                	je     801b2f <pgfault+0x3d>
  801b19:	89 d8                	mov    %ebx,%eax
  801b1b:	c1 e8 0c             	shr    $0xc,%eax
  801b1e:	8d 04 85 00 00 40 ef 	lea    0xef400000(,%eax,4),%eax
  801b25:	f7 c6 02 00 00 00    	test   $0x2,%esi
  801b2b:	75 3f                	jne    801b6c <pgfault+0x7a>
  801b2d:	eb 43                	jmp    801b72 <pgfault+0x80>
  801b2f:	8b 41 28             	mov    0x28(%ecx),%eax
  801b32:	8b 12                	mov    (%edx),%edx
  801b34:	89 44 24 10          	mov    %eax,0x10(%esp)
  801b38:	89 54 24 0c          	mov    %edx,0xc(%esp)
  801b3c:	89 74 24 08          	mov    %esi,0x8(%esp)
  801b40:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  801b44:	c7 04 24 90 26 81 00 	movl   $0x812690,(%esp)
  801b4b:	e8 09 ee ff ff       	call   800959 <cprintf>
  801b50:	c7 44 24 08 b4 26 81 	movl   $0x8126b4,0x8(%esp)
  801b57:	00 
  801b58:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
  801b5f:	00 
  801b60:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801b67:	e8 20 ed ff ff       	call   80088c <_panic>
  801b6c:	f6 40 01 08          	testb  $0x8,0x1(%eax)
  801b70:	75 49                	jne    801bbb <pgfault+0xc9>
  801b72:	8b 51 28             	mov    0x28(%ecx),%edx
  801b75:	8b 08                	mov    (%eax),%ecx
  801b77:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  801b7c:	8b 40 4c             	mov    0x4c(%eax),%eax
  801b7f:	89 54 24 14          	mov    %edx,0x14(%esp)
  801b83:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  801b87:	89 74 24 0c          	mov    %esi,0xc(%esp)
  801b8b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  801b8f:	89 44 24 04          	mov    %eax,0x4(%esp)
  801b93:	c7 04 24 dc 26 81 00 	movl   $0x8126dc,(%esp)
  801b9a:	e8 ba ed ff ff       	call   800959 <cprintf>
  801b9f:	c7 44 24 08 45 27 81 	movl   $0x812745,0x8(%esp)
  801ba6:	00 
  801ba7:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
  801bae:	00 
  801baf:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801bb6:	e8 d1 ec ff ff       	call   80088c <_panic>
  801bbb:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  801bc2:	00 
  801bc3:	c7 44 24 04 00 f0 7f 	movl   $0x7ff000,0x4(%esp)
  801bca:	00 
  801bcb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801bd2:	e8 33 fb ff ff       	call   80170a <sys_page_alloc>
  801bd7:	85 c0                	test   %eax,%eax
  801bd9:	79 20                	jns    801bfb <pgfault+0x109>
  801bdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
  801bdf:	c7 44 24 08 08 27 81 	movl   $0x812708,0x8(%esp)
  801be6:	00 
  801be7:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
  801bee:	00 
  801bef:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801bf6:	e8 91 ec ff ff       	call   80088c <_panic>
  801bfb:	89 de                	mov    %ebx,%esi
  801bfd:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
  801c03:	89 f2                	mov    %esi,%edx
  801c05:	8d 83 ff 0f 00 00    	lea    0xfff(%ebx),%eax
  801c0b:	89 c3                	mov    %eax,%ebx
  801c0d:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  801c13:	39 de                	cmp    %ebx,%esi
  801c15:	73 13                	jae    801c2a <pgfault+0x138>
  801c17:	b9 00 f0 7f 00       	mov    $0x7ff000,%ecx
  801c1c:	8b 02                	mov    (%edx),%eax
  801c1e:	89 01                	mov    %eax,(%ecx)
  801c20:	83 c1 04             	add    $0x4,%ecx
  801c23:	83 c2 04             	add    $0x4,%edx
  801c26:	39 d3                	cmp    %edx,%ebx
  801c28:	77 f2                	ja     801c1c <pgfault+0x12a>
  801c2a:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
  801c31:	00 
  801c32:	89 74 24 0c          	mov    %esi,0xc(%esp)
  801c36:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  801c3d:	00 
  801c3e:	c7 44 24 04 00 f0 7f 	movl   $0x7ff000,0x4(%esp)
  801c45:	00 
  801c46:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  801c4d:	e8 5a fa ff ff       	call   8016ac <sys_page_map>
  801c52:	85 c0                	test   %eax,%eax
  801c54:	79 1c                	jns    801c72 <pgfault+0x180>
  801c56:	c7 44 24 08 60 27 81 	movl   $0x812760,0x8(%esp)
  801c5d:	00 
  801c5e:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
  801c65:	00 
  801c66:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801c6d:	e8 1a ec ff ff       	call   80088c <_panic>
  801c72:	83 c4 20             	add    $0x20,%esp
  801c75:	5b                   	pop    %ebx
  801c76:	5e                   	pop    %esi
  801c77:	5d                   	pop    %ebp
  801c78:	c3                   	ret    

00801c79 <fork>:
  801c79:	55                   	push   %ebp
  801c7a:	89 e5                	mov    %esp,%ebp
  801c7c:	56                   	push   %esi
  801c7d:	53                   	push   %ebx
  801c7e:	83 ec 10             	sub    $0x10,%esp
static __inline envid_t
sys_exofork(void)
{
	envid_t ret;
	__asm __volatile("int %2"
  801c81:	ba 07 00 00 00       	mov    $0x7,%edx
  801c86:	89 d0                	mov    %edx,%eax
  801c88:	cd 30                	int    $0x30
  801c8a:	89 c6                	mov    %eax,%esi
  801c8c:	85 c0                	test   %eax,%eax
  801c8e:	79 20                	jns    801cb0 <fork+0x37>
  801c90:	89 44 24 0c          	mov    %eax,0xc(%esp)
  801c94:	c7 44 24 08 35 27 81 	movl   $0x812735,0x8(%esp)
  801c9b:	00 
  801c9c:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
  801ca3:	00 
  801ca4:	c7 04 24 2a 27 81 00 	movl   $0x81272a,(%esp)
  801cab:	e8 dc eb ff ff       	call   80088c <_panic>
  801cb0:	85 c0                	test   %eax,%eax
  801cb2:	75 21                	jne    801cd5 <fork+0x5c>
  801cb4:	e8 e4 fa ff ff       	call   80179d <sys_getenvid>
  801cb9:	25 ff 03 00 00       	and    $0x3ff,%eax
  801cbe:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801cc1:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801cc6:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  801ccb:	b8 00 00 00 00       	mov    $0x0,%eax
  801cd0:	e9 9f 00 00 00       	jmp    801d74 <fork+0xfb>
  801cd5:	c7 04 24 f2 1a 80 00 	movl   $0x801af2,(%esp)
  801cdc:	e8 b7 12 00 00       	call   802f98 <set_pgfault_handler>
  801ce1:	bb 00 00 00 00       	mov    $0x0,%ebx
  801ce6:	eb 08                	jmp    801cf0 <fork+0x77>
  801ce8:	81 fb ff eb 0e 00    	cmp    $0xeebff,%ebx
  801cee:	74 3e                	je     801d2e <fork+0xb5>
  801cf0:	89 da                	mov    %ebx,%edx
  801cf2:	c1 e2 0c             	shl    $0xc,%edx
  801cf5:	89 d0                	mov    %edx,%eax
  801cf7:	c1 e8 16             	shr    $0x16,%eax
  801cfa:	f6 04 85 00 d0 7b ef 	testb  $0x1,0xef7bd000(,%eax,4)
  801d01:	01 
  801d02:	74 1f                	je     801d23 <fork+0xaa>
  801d04:	89 d0                	mov    %edx,%eax
  801d06:	c1 e8 0c             	shr    $0xc,%eax
  801d09:	f7 04 85 00 00 40 ef 	testl  $0x802,0xef400000(,%eax,4)
  801d10:	02 08 00 00 
  801d14:	74 0d                	je     801d23 <fork+0xaa>
  801d16:	89 da                	mov    %ebx,%edx
  801d18:	89 f0                	mov    %esi,%eax
  801d1a:	e8 11 fb ff ff       	call   801830 <duppage>
  801d1f:	85 c0                	test   %eax,%eax
  801d21:	78 51                	js     801d74 <fork+0xfb>
  801d23:	83 c3 01             	add    $0x1,%ebx
  801d26:	81 fb 00 ec 0e 00    	cmp    $0xeec00,%ebx
  801d2c:	75 ba                	jne    801ce8 <fork+0x6f>
  801d2e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  801d35:	00 
  801d36:	c7 44 24 04 00 f0 bf 	movl   $0xeebff000,0x4(%esp)
  801d3d:	ee 
  801d3e:	89 34 24             	mov    %esi,(%esp)
  801d41:	e8 c4 f9 ff ff       	call   80170a <sys_page_alloc>
  801d46:	85 c0                	test   %eax,%eax
  801d48:	78 2a                	js     801d74 <fork+0xfb>
  801d4a:	c7 44 24 04 1c 30 80 	movl   $0x80301c,0x4(%esp)
  801d51:	00 
  801d52:	89 34 24             	mov    %esi,(%esp)
  801d55:	e8 da f7 ff ff       	call   801534 <sys_env_set_pgfault_upcall>
  801d5a:	85 c0                	test   %eax,%eax
  801d5c:	78 16                	js     801d74 <fork+0xfb>
  801d5e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  801d65:	00 
  801d66:	89 34 24             	mov    %esi,(%esp)
  801d69:	e8 82 f8 ff ff       	call   8015f0 <sys_env_set_status>
  801d6e:	85 c0                	test   %eax,%eax
  801d70:	78 02                	js     801d74 <fork+0xfb>
  801d72:	89 f0                	mov    %esi,%eax
  801d74:	83 c4 10             	add    $0x10,%esp
  801d77:	5b                   	pop    %ebx
  801d78:	5e                   	pop    %esi
  801d79:	5d                   	pop    %ebp
  801d7a:	c3                   	ret    
  801d7b:	00 00                	add    %al,(%eax)
  801d7d:	00 00                	add    %al,(%eax)
	...

00801d80 <ipc_send>:
//   If 'pg' is null, pass sys_ipc_recv a value that it will understand
//   as meaning "no page".  (Zero is not the right value.)
void
ipc_send(envid_t to_env, uint32_t val, void *pg, int perm)
{
  801d80:	55                   	push   %ebp
  801d81:	89 e5                	mov    %esp,%ebp
  801d83:	57                   	push   %edi
  801d84:	56                   	push   %esi
  801d85:	53                   	push   %ebx
  801d86:	83 ec 1c             	sub    $0x1c,%esp
  801d89:	8b 75 08             	mov    0x8(%ebp),%esi
  801d8c:	8b 7d 14             	mov    0x14(%ebp),%edi
	// LAB 4: Your code here.
	int r,i=0;
	env = &envs[ENVX(sys_getenvid())];
  801d8f:	e8 09 fa ff ff       	call   80179d <sys_getenvid>
  801d94:	25 ff 03 00 00       	and    $0x3ff,%eax
  801d99:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801d9c:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801da1:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
	do{
		//cprintf("%x send value to %x\n",env->env_id,to_env);
		env = &envs[ENVX(sys_getenvid())];
  801da6:	e8 f2 f9 ff ff       	call   80179d <sys_getenvid>
  801dab:	25 ff 03 00 00       	and    $0x3ff,%eax
  801db0:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801db3:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801db8:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
		if(env->env_id==to_env){
  801dbd:	8b 40 4c             	mov    0x4c(%eax),%eax
  801dc0:	39 f0                	cmp    %esi,%eax
  801dc2:	75 0e                	jne    801dd2 <ipc_send+0x52>
			cprintf("send:the reciver is sender\n");
  801dc4:	c7 04 24 74 27 81 00 	movl   $0x812774,(%esp)
  801dcb:	e8 89 eb ff ff       	call   800959 <cprintf>
  801dd0:	eb 5a                	jmp    801e2c <ipc_send+0xac>
			return;
		}
		if((r=sys_ipc_try_send(to_env,val,pg,perm))<0)
  801dd2:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  801dd6:	8b 45 10             	mov    0x10(%ebp),%eax
  801dd9:	89 44 24 08          	mov    %eax,0x8(%esp)
  801ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
  801de0:	89 44 24 04          	mov    %eax,0x4(%esp)
  801de4:	89 34 24             	mov    %esi,(%esp)
  801de7:	e8 10 f7 ff ff       	call   8014fc <sys_ipc_try_send>
  801dec:	89 c3                	mov    %eax,%ebx
  801dee:	85 c0                	test   %eax,%eax
  801df0:	79 25                	jns    801e17 <ipc_send+0x97>
		{	
			if(r!=-E_IPC_NOT_RECV)
  801df2:	83 f8 f9             	cmp    $0xfffffff9,%eax
  801df5:	74 2b                	je     801e22 <ipc_send+0xa2>
				panic("send error:%e",r);
  801df7:	89 44 24 0c          	mov    %eax,0xc(%esp)
  801dfb:	c7 44 24 08 90 27 81 	movl   $0x812790,0x8(%esp)
  801e02:	00 
  801e03:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
  801e0a:	00 
  801e0b:	c7 04 24 9e 27 81 00 	movl   $0x81279e,(%esp)
  801e12:	e8 75 ea ff ff       	call   80088c <_panic>
		}
			sys_yield();
  801e17:	e8 4d f9 ff ff       	call   801769 <sys_yield>
		
	}while(r!=0);
  801e1c:	85 db                	test   %ebx,%ebx
  801e1e:	75 86                	jne    801da6 <ipc_send+0x26>
  801e20:	eb 0a                	jmp    801e2c <ipc_send+0xac>
  801e22:	e8 42 f9 ff ff       	call   801769 <sys_yield>
  801e27:	e9 7a ff ff ff       	jmp    801da6 <ipc_send+0x26>
	return;
	//panic("ipc_send not implemented");
}
  801e2c:	83 c4 1c             	add    $0x1c,%esp
  801e2f:	5b                   	pop    %ebx
  801e30:	5e                   	pop    %esi
  801e31:	5f                   	pop    %edi
  801e32:	5d                   	pop    %ebp
  801e33:	c3                   	ret    

00801e34 <ipc_recv>:
  801e34:	55                   	push   %ebp
  801e35:	89 e5                	mov    %esp,%ebp
  801e37:	57                   	push   %edi
  801e38:	56                   	push   %esi
  801e39:	53                   	push   %ebx
  801e3a:	83 ec 0c             	sub    $0xc,%esp
  801e3d:	8b 75 08             	mov    0x8(%ebp),%esi
  801e40:	8b 7d 10             	mov    0x10(%ebp),%edi
  801e43:	e8 55 f9 ff ff       	call   80179d <sys_getenvid>
  801e48:	25 ff 03 00 00       	and    $0x3ff,%eax
  801e4d:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801e50:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801e55:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  801e5a:	85 f6                	test   %esi,%esi
  801e5c:	74 29                	je     801e87 <ipc_recv+0x53>
  801e5e:	8b 40 4c             	mov    0x4c(%eax),%eax
  801e61:	3b 06                	cmp    (%esi),%eax
  801e63:	75 22                	jne    801e87 <ipc_recv+0x53>
  801e65:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
  801e6b:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
  801e71:	c7 04 24 74 27 81 00 	movl   $0x812774,(%esp)
  801e78:	e8 dc ea ff ff       	call   800959 <cprintf>
  801e7d:	bb 00 00 00 00       	mov    $0x0,%ebx
  801e82:	e9 8a 00 00 00       	jmp    801f11 <ipc_recv+0xdd>
  801e87:	e8 11 f9 ff ff       	call   80179d <sys_getenvid>
  801e8c:	25 ff 03 00 00       	and    $0x3ff,%eax
  801e91:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801e94:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801e99:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  801e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
  801ea1:	89 04 24             	mov    %eax,(%esp)
  801ea4:	e8 f6 f5 ff ff       	call   80149f <sys_ipc_recv>
  801ea9:	89 c3                	mov    %eax,%ebx
  801eab:	85 c0                	test   %eax,%eax
  801ead:	79 1a                	jns    801ec9 <ipc_recv+0x95>
  801eaf:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
  801eb5:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
  801ebb:	c7 04 24 a8 27 81 00 	movl   $0x8127a8,(%esp)
  801ec2:	e8 92 ea ff ff       	call   800959 <cprintf>
  801ec7:	eb 48                	jmp    801f11 <ipc_recv+0xdd>
  801ec9:	e8 cf f8 ff ff       	call   80179d <sys_getenvid>
  801ece:	25 ff 03 00 00       	and    $0x3ff,%eax
  801ed3:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801ed6:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801edb:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  801ee0:	85 f6                	test   %esi,%esi
  801ee2:	74 05                	je     801ee9 <ipc_recv+0xb5>
  801ee4:	8b 40 74             	mov    0x74(%eax),%eax
  801ee7:	89 06                	mov    %eax,(%esi)
  801ee9:	85 ff                	test   %edi,%edi
  801eeb:	74 0a                	je     801ef7 <ipc_recv+0xc3>
  801eed:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  801ef2:	8b 40 78             	mov    0x78(%eax),%eax
  801ef5:	89 07                	mov    %eax,(%edi)
  801ef7:	e8 a1 f8 ff ff       	call   80179d <sys_getenvid>
  801efc:	25 ff 03 00 00       	and    $0x3ff,%eax
  801f01:	6b c0 7c             	imul   $0x7c,%eax,%eax
  801f04:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  801f09:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
  801f0e:	8b 58 70             	mov    0x70(%eax),%ebx
  801f11:	89 d8                	mov    %ebx,%eax
  801f13:	83 c4 0c             	add    $0xc,%esp
  801f16:	5b                   	pop    %ebx
  801f17:	5e                   	pop    %esi
  801f18:	5f                   	pop    %edi
  801f19:	5d                   	pop    %ebp
  801f1a:	c3                   	ret    
  801f1b:	00 00                	add    %al,(%eax)
  801f1d:	00 00                	add    %al,(%eax)
	...

00801f20 <fd2num>:
// --------------------------------------------------------------

int
fd2num(struct Fd *fd)
{
  801f20:	55                   	push   %ebp
  801f21:	89 e5                	mov    %esp,%ebp
  801f23:	8b 45 08             	mov    0x8(%ebp),%eax
  801f26:	05 00 00 00 30       	add    $0x30000000,%eax
  801f2b:	c1 e8 0c             	shr    $0xc,%eax
	return ((uintptr_t) fd - FDTABLE) / PGSIZE;
}
  801f2e:	5d                   	pop    %ebp
  801f2f:	c3                   	ret    

00801f30 <fd2data>:

char*
fd2data(struct Fd *fd)
{
  801f30:	55                   	push   %ebp
  801f31:	89 e5                	mov    %esp,%ebp
  801f33:	83 ec 04             	sub    $0x4,%esp
	return INDEX2DATA(fd2num(fd));
  801f36:	8b 45 08             	mov    0x8(%ebp),%eax
  801f39:	89 04 24             	mov    %eax,(%esp)
  801f3c:	e8 df ff ff ff       	call   801f20 <fd2num>
  801f41:	c1 e0 0c             	shl    $0xc,%eax
  801f44:	2d 00 00 fe 2f       	sub    $0x2ffe0000,%eax
}
  801f49:	c9                   	leave  
  801f4a:	c3                   	ret    

00801f4b <fd_alloc>:

// Finds the smallest i from 0 to MAXFD-1 that doesn't have
// its fd page mapped.
// Sets *fd_store to the corresponding fd page virtual address.
//
// fd_alloc does NOT actually allocate an fd page.
// It is up to the caller to allocate the page somehow.
// This means that if someone calls fd_alloc twice in a row
// without allocating the first page we return, we'll return the same
// page the second time.
//
// Hint: Use INDEX2FD.
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_MAX_FD: no more file descriptors
// On error, *fd_store is set to 0.
int
fd_alloc(struct Fd **fd_store)
{
  801f4b:	55                   	push   %ebp
  801f4c:	89 e5                	mov    %esp,%ebp
  801f4e:	53                   	push   %ebx
  801f4f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  801f52:	ba 00 00 00 d0       	mov    $0xd0000000,%edx
  801f57:	89 d1                	mov    %edx,%ecx
	int i;
	struct Fd *fd;

	for (i = 0; i < MAXFD; i++) {
		fd = INDEX2FD(i);
		if ((vpd[PDX(fd)] & PTE_P) == 0 || (vpt[VPN(fd)] & PTE_P) == 0) {
  801f59:	89 d0                	mov    %edx,%eax
  801f5b:	c1 e8 16             	shr    $0x16,%eax
  801f5e:	8b 04 85 00 d0 7b ef 	mov    0xef7bd000(,%eax,4),%eax
  801f65:	a8 01                	test   $0x1,%al
  801f67:	74 10                	je     801f79 <fd_alloc+0x2e>
  801f69:	89 d0                	mov    %edx,%eax
  801f6b:	c1 e8 0c             	shr    $0xc,%eax
  801f6e:	8b 04 85 00 00 40 ef 	mov    0xef400000(,%eax,4),%eax
  801f75:	a8 01                	test   $0x1,%al
  801f77:	75 09                	jne    801f82 <fd_alloc+0x37>
			*fd_store = fd;
  801f79:	89 0b                	mov    %ecx,(%ebx)
  801f7b:	b8 00 00 00 00       	mov    $0x0,%eax
  801f80:	eb 19                	jmp    801f9b <fd_alloc+0x50>
			return 0;
  801f82:	81 c2 00 10 00 00    	add    $0x1000,%edx
  801f88:	81 fa 00 00 02 d0    	cmp    $0xd0020000,%edx
  801f8e:	75 c7                	jne    801f57 <fd_alloc+0xc>
		}
	}
	*fd_store = 0;
  801f90:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  801f96:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
	return -E_MAX_OPEN;
}
  801f9b:	5b                   	pop    %ebx
  801f9c:	5d                   	pop    %ebp
  801f9d:	c3                   	ret    

00801f9e <fd_lookup>:

// Check that fdnum is in range and mapped.
// If it is, set *fd_store to the fd page virtual address.
//
// Returns 0 on success (the page is in range and mapped), < 0 on error.
// Errors are:
//	-E_INVAL: fdnum was either not in range or not mapped.
int
fd_lookup(int fdnum, struct Fd **fd_store)
{
  801f9e:	55                   	push   %ebp
  801f9f:	89 e5                	mov    %esp,%ebp
  801fa1:	8b 45 08             	mov    0x8(%ebp),%eax
	struct Fd *fd;

	if (fdnum < 0 || fdnum >= MAXFD) {
  801fa4:	83 f8 1f             	cmp    $0x1f,%eax
  801fa7:	77 35                	ja     801fde <fd_lookup+0x40>
		if (debug)
			cprintf("[%08x] bad fd %d\n", env->env_id, fd);
		return -E_INVAL;
	}
	fd = INDEX2FD(fdnum);
  801fa9:	c1 e0 0c             	shl    $0xc,%eax
  801fac:	8d 90 00 00 00 d0    	lea    0xd0000000(%eax),%edx
	if (!(vpd[PDX(fd)] & PTE_P) || !(vpt[VPN(fd)] & PTE_P)) {
  801fb2:	89 d0                	mov    %edx,%eax
  801fb4:	c1 e8 16             	shr    $0x16,%eax
  801fb7:	8b 04 85 00 d0 7b ef 	mov    0xef7bd000(,%eax,4),%eax
  801fbe:	a8 01                	test   $0x1,%al
  801fc0:	74 1c                	je     801fde <fd_lookup+0x40>
  801fc2:	89 d0                	mov    %edx,%eax
  801fc4:	c1 e8 0c             	shr    $0xc,%eax
  801fc7:	8b 04 85 00 00 40 ef 	mov    0xef400000(,%eax,4),%eax
  801fce:	a8 01                	test   $0x1,%al
  801fd0:	74 0c                	je     801fde <fd_lookup+0x40>
		if (debug)
			cprintf("[%08x] closed fd %d\n", env->env_id, fd);
		return -E_INVAL;
	}
	*fd_store = fd;
  801fd2:	8b 45 0c             	mov    0xc(%ebp),%eax
  801fd5:	89 10                	mov    %edx,(%eax)
  801fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  801fdc:	eb 05                	jmp    801fe3 <fd_lookup+0x45>
	return 0;
  801fde:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
  801fe3:	5d                   	pop    %ebp
  801fe4:	c3                   	ret    

00801fe5 <seek>:

// Frees file descriptor 'fd' by closing the corresponding file
// and unmapping the file descriptor page.
// If 'must_exist' is 0, then fd can be a closed or nonexistent file
// descriptor; the function will return 0 and have no other effect.
// If 'must_exist' is 1, then fd_close returns -E_INVAL when passed a
// closed or nonexistent file descriptor.
// Returns 0 on success, < 0 on error.
int
fd_close(struct Fd *fd, bool must_exist)
{
	struct Fd *fd2;
	struct Dev *dev;
	int r;
	if ((r = fd_lookup(fd2num(fd), &fd2)) < 0
	    || fd != fd2)
		return (must_exist ? r : 0);
	if ((r = dev_lookup(fd->fd_dev_id, &dev)) >= 0) {
		if (dev->dev_close)
			r = (*dev->dev_close)(fd);
		else
			r = 0;
	}
	// Make sure fd is unmapped.  Might be a no-op if
	// (*dev->dev_close)(fd) already unmapped it.
	(void) sys_page_unmap(0, fd);
	return r;
}


// --------------------------------------------------------------
// File functions
// --------------------------------------------------------------

static struct Dev *devtab[] =
{
	&devfile,
	&devsock,
	0
};

int
dev_lookup(int dev_id, struct Dev **dev)
{
	int i;
	for (i = 0; devtab[i]; i++)
		if (devtab[i]->dev_id == dev_id) {
			*dev = devtab[i];
			return 0;
		}
	cprintf("[%08x] unknown device type %d\n", env->env_id, dev_id);
	*dev = 0;
	return -E_INVAL;
}

int
close(int fdnum)
{
	struct Fd *fd;
	int r;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
		return r;
	else
		return fd_close(fd, 1);
}

void
close_all(void)
{
	int i;
	for (i = 0; i < MAXFD; i++)
		close(i);
}

// Make file descriptor 'newfdnum' a duplicate of file descriptor 'oldfdnum'.
// For instance, writing onto either file descriptor will affect the
// file and the file offset of the other.
// Closes any previously open file descriptor at 'newfdnum'.
// This is implemented using virtual memory tricks (of course!).
int
dup(int oldfdnum, int newfdnum)
{
	int r;
	char *ova, *nva;
	pte_t pte;
	struct Fd *oldfd, *newfd;

	if ((r = fd_lookup(oldfdnum, &oldfd)) < 0)
		return r;
	close(newfdnum);

	newfd = INDEX2FD(newfdnum);
	ova = fd2data(oldfd);
	nva = fd2data(newfd);

	if ((vpd[PDX(ova)] & PTE_P) && (vpt[VPN(ova)] & PTE_P))
		if ((r = sys_page_map(0, ova, 0, nva, vpt[VPN(ova)] & PTE_USER)) < 0)
			goto err;
	if ((r = sys_page_map(0, oldfd, 0, newfd, vpt[VPN(oldfd)] & PTE_USER)) < 0)
		goto err;

	return newfdnum;

err:
	sys_page_unmap(0, newfd);
	sys_page_unmap(0, nva);
	return r;
}

ssize_t
read(int fdnum, void *buf, size_t n)
{
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_WRONLY) {
		cprintf("[%08x] read %d -- bad mode\n", env->env_id, fdnum); 
		return -E_INVAL;
	}
	if (!dev->dev_read)
		return -E_NOT_SUPP;
	return (*dev->dev_read)(fd, buf, n);
}

ssize_t
readn(int fdnum, void *buf, size_t n)
{
	int m, tot;

	for (tot = 0; tot < n; tot += m) {
		m = read(fdnum, (char*)buf + tot, n - tot);
		if (m < 0)
			return m;
		if (m == 0)
			break;
	}
	return tot;
}

ssize_t
write(int fdnum, const void *buf, size_t n)
{
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_RDONLY) {
		cprintf("[%08x] write %d -- bad mode\n", env->env_id, fdnum);
		return -E_INVAL;
	}
	if (debug)
		cprintf("write %d %p %d via dev %s\n",
			fdnum, buf, n, dev->dev_name);
	if (!dev->dev_write)
		return -E_NOT_SUPP;
	return (*dev->dev_write)(fd, buf, n);
}

int
seek(int fdnum, off_t offset)
{
  801fe5:	55                   	push   %ebp
  801fe6:	89 e5                	mov    %esp,%ebp
  801fe8:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0)
  801feb:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
  801fee:	89 44 24 04          	mov    %eax,0x4(%esp)
  801ff2:	8b 45 08             	mov    0x8(%ebp),%eax
  801ff5:	89 04 24             	mov    %eax,(%esp)
  801ff8:	e8 a1 ff ff ff       	call   801f9e <fd_lookup>
  801ffd:	85 c0                	test   %eax,%eax
  801fff:	78 0e                	js     80200f <seek+0x2a>
		return r;
	fd->fd_offset = offset;
  802001:	8b 55 0c             	mov    0xc(%ebp),%edx
  802004:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  802007:	89 50 04             	mov    %edx,0x4(%eax)
  80200a:	b8 00 00 00 00       	mov    $0x0,%eax
	return 0;
}
  80200f:	c9                   	leave  
  802010:	c3                   	ret    

00802011 <dev_lookup>:
  802011:	55                   	push   %ebp
  802012:	89 e5                	mov    %esp,%ebp
  802014:	53                   	push   %ebx
  802015:	83 ec 14             	sub    $0x14,%esp
  802018:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80201b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  80201e:	ba 04 80 81 00       	mov    $0x818004,%edx
  802023:	b8 00 00 00 00       	mov    $0x0,%eax
  802028:	39 0d 04 80 81 00    	cmp    %ecx,0x818004
  80202e:	75 12                	jne    802042 <dev_lookup+0x31>
  802030:	eb 04                	jmp    802036 <dev_lookup+0x25>
  802032:	39 0a                	cmp    %ecx,(%edx)
  802034:	75 0c                	jne    802042 <dev_lookup+0x31>
  802036:	89 13                	mov    %edx,(%ebx)
  802038:	b8 00 00 00 00       	mov    $0x0,%eax
  80203d:	8d 76 00             	lea    0x0(%esi),%esi
  802040:	eb 35                	jmp    802077 <dev_lookup+0x66>
  802042:	83 c0 01             	add    $0x1,%eax
  802045:	8b 14 85 34 28 81 00 	mov    0x812834(,%eax,4),%edx
  80204c:	85 d2                	test   %edx,%edx
  80204e:	75 e2                	jne    802032 <dev_lookup+0x21>
  802050:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  802055:	8b 40 4c             	mov    0x4c(%eax),%eax
  802058:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80205c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802060:	c7 04 24 b8 27 81 00 	movl   $0x8127b8,(%esp)
  802067:	e8 ed e8 ff ff       	call   800959 <cprintf>
  80206c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  802072:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  802077:	83 c4 14             	add    $0x14,%esp
  80207a:	5b                   	pop    %ebx
  80207b:	5d                   	pop    %ebp
  80207c:	c3                   	ret    

0080207d <fstat>:

int
ftruncate(int fdnum, off_t newsize)
{
	int r;
	struct Dev *dev;
	struct Fd *fd;
	if ((r = fd_lookup(fdnum, &fd)) < 0
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if ((fd->fd_omode & O_ACCMODE) == O_RDONLY) {
		cprintf("[%08x] ftruncate %d -- bad mode\n",
			env->env_id, fdnum); 
		return -E_INVAL;
	}
	if (!dev->dev_trunc)
		return -E_NOT_SUPP;
	return (*dev->dev_trunc)(fd, newsize);
}

int
fstat(int fdnum, struct Stat *stat)
{
  80207d:	55                   	push   %ebp
  80207e:	89 e5                	mov    %esp,%ebp
  802080:	53                   	push   %ebx
  802081:	83 ec 24             	sub    $0x24,%esp
  802084:	8b 5d 0c             	mov    0xc(%ebp),%ebx
	int r;
	struct Dev *dev;
	struct Fd *fd;

	if ((r = fd_lookup(fdnum, &fd)) < 0
  802087:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80208a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80208e:	8b 45 08             	mov    0x8(%ebp),%eax
  802091:	89 04 24             	mov    %eax,(%esp)
  802094:	e8 05 ff ff ff       	call   801f9e <fd_lookup>
  802099:	89 c2                	mov    %eax,%edx
  80209b:	85 c0                	test   %eax,%eax
  80209d:	78 57                	js     8020f6 <fstat+0x79>
  80209f:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  8020a2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8020a6:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8020a9:	8b 00                	mov    (%eax),%eax
  8020ab:	89 04 24             	mov    %eax,(%esp)
  8020ae:	e8 5e ff ff ff       	call   802011 <dev_lookup>
  8020b3:	89 c2                	mov    %eax,%edx
  8020b5:	85 c0                	test   %eax,%eax
  8020b7:	78 3d                	js     8020f6 <fstat+0x79>
	    || (r = dev_lookup(fd->fd_dev_id, &dev)) < 0)
		return r;
	if (!dev->dev_stat)
  8020b9:	ba f1 ff ff ff       	mov    $0xfffffff1,%edx
  8020be:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  8020c1:	83 78 14 00          	cmpl   $0x0,0x14(%eax)
  8020c5:	74 2f                	je     8020f6 <fstat+0x79>
		return -E_NOT_SUPP;
	stat->st_name[0] = 0;
  8020c7:	c6 03 00             	movb   $0x0,(%ebx)
	stat->st_size = 0;
  8020ca:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  8020d1:	00 00 00 
	stat->st_isdir = 0;
  8020d4:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
  8020db:	00 00 00 
	stat->st_dev = dev;
  8020de:	8b 55 f8             	mov    0xfffffff8(%ebp),%edx
  8020e1:	89 93 88 00 00 00    	mov    %edx,0x88(%ebx)
	return (*dev->dev_stat)(fd, stat);
  8020e7:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8020eb:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8020ee:	89 04 24             	mov    %eax,(%esp)
  8020f1:	ff 52 14             	call   *0x14(%edx)
  8020f4:	89 c2                	mov    %eax,%edx
}
  8020f6:	89 d0                	mov    %edx,%eax
  8020f8:	83 c4 24             	add    $0x24,%esp
  8020fb:	5b                   	pop    %ebx
  8020fc:	5d                   	pop    %ebp
  8020fd:	c3                   	ret    

008020fe <ftruncate>:
  8020fe:	55                   	push   %ebp
  8020ff:	89 e5                	mov    %esp,%ebp
  802101:	53                   	push   %ebx
  802102:	83 ec 24             	sub    $0x24,%esp
  802105:	8b 5d 08             	mov    0x8(%ebp),%ebx
  802108:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80210b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80210f:	89 1c 24             	mov    %ebx,(%esp)
  802112:	e8 87 fe ff ff       	call   801f9e <fd_lookup>
  802117:	85 c0                	test   %eax,%eax
  802119:	78 61                	js     80217c <ftruncate+0x7e>
  80211b:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  80211e:	8b 10                	mov    (%eax),%edx
  802120:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  802123:	89 44 24 04          	mov    %eax,0x4(%esp)
  802127:	89 14 24             	mov    %edx,(%esp)
  80212a:	e8 e2 fe ff ff       	call   802011 <dev_lookup>
  80212f:	85 c0                	test   %eax,%eax
  802131:	78 49                	js     80217c <ftruncate+0x7e>
  802133:	8b 4d f4             	mov    0xfffffff4(%ebp),%ecx
  802136:	f6 41 08 03          	testb  $0x3,0x8(%ecx)
  80213a:	75 23                	jne    80215f <ftruncate+0x61>
  80213c:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  802141:	8b 40 4c             	mov    0x4c(%eax),%eax
  802144:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  802148:	89 44 24 04          	mov    %eax,0x4(%esp)
  80214c:	c7 04 24 d8 27 81 00 	movl   $0x8127d8,(%esp)
  802153:	e8 01 e8 ff ff       	call   800959 <cprintf>
  802158:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80215d:	eb 1d                	jmp    80217c <ftruncate+0x7e>
  80215f:	8b 55 f8             	mov    0xfffffff8(%ebp),%edx
  802162:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
  802167:	83 7a 18 00          	cmpl   $0x0,0x18(%edx)
  80216b:	74 0f                	je     80217c <ftruncate+0x7e>
  80216d:	8b 52 18             	mov    0x18(%edx),%edx
  802170:	8b 45 0c             	mov    0xc(%ebp),%eax
  802173:	89 44 24 04          	mov    %eax,0x4(%esp)
  802177:	89 0c 24             	mov    %ecx,(%esp)
  80217a:	ff d2                	call   *%edx
  80217c:	83 c4 24             	add    $0x24,%esp
  80217f:	5b                   	pop    %ebx
  802180:	5d                   	pop    %ebp
  802181:	c3                   	ret    

00802182 <write>:
  802182:	55                   	push   %ebp
  802183:	89 e5                	mov    %esp,%ebp
  802185:	53                   	push   %ebx
  802186:	83 ec 24             	sub    $0x24,%esp
  802189:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80218c:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80218f:	89 44 24 04          	mov    %eax,0x4(%esp)
  802193:	89 1c 24             	mov    %ebx,(%esp)
  802196:	e8 03 fe ff ff       	call   801f9e <fd_lookup>
  80219b:	85 c0                	test   %eax,%eax
  80219d:	78 68                	js     802207 <write+0x85>
  80219f:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8021a2:	8b 10                	mov    (%eax),%edx
  8021a4:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  8021a7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8021ab:	89 14 24             	mov    %edx,(%esp)
  8021ae:	e8 5e fe ff ff       	call   802011 <dev_lookup>
  8021b3:	85 c0                	test   %eax,%eax
  8021b5:	78 50                	js     802207 <write+0x85>
  8021b7:	8b 4d f4             	mov    0xfffffff4(%ebp),%ecx
  8021ba:	f6 41 08 03          	testb  $0x3,0x8(%ecx)
  8021be:	75 23                	jne    8021e3 <write+0x61>
  8021c0:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  8021c5:	8b 40 4c             	mov    0x4c(%eax),%eax
  8021c8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  8021cc:	89 44 24 04          	mov    %eax,0x4(%esp)
  8021d0:	c7 04 24 f9 27 81 00 	movl   $0x8127f9,(%esp)
  8021d7:	e8 7d e7 ff ff       	call   800959 <cprintf>
  8021dc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8021e1:	eb 24                	jmp    802207 <write+0x85>
  8021e3:	8b 55 f8             	mov    0xfffffff8(%ebp),%edx
  8021e6:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
  8021eb:	83 7a 0c 00          	cmpl   $0x0,0xc(%edx)
  8021ef:	74 16                	je     802207 <write+0x85>
  8021f1:	8b 42 0c             	mov    0xc(%edx),%eax
  8021f4:	8b 55 10             	mov    0x10(%ebp),%edx
  8021f7:	89 54 24 08          	mov    %edx,0x8(%esp)
  8021fb:	8b 55 0c             	mov    0xc(%ebp),%edx
  8021fe:	89 54 24 04          	mov    %edx,0x4(%esp)
  802202:	89 0c 24             	mov    %ecx,(%esp)
  802205:	ff d0                	call   *%eax
  802207:	83 c4 24             	add    $0x24,%esp
  80220a:	5b                   	pop    %ebx
  80220b:	5d                   	pop    %ebp
  80220c:	c3                   	ret    

0080220d <read>:
  80220d:	55                   	push   %ebp
  80220e:	89 e5                	mov    %esp,%ebp
  802210:	53                   	push   %ebx
  802211:	83 ec 24             	sub    $0x24,%esp
  802214:	8b 5d 08             	mov    0x8(%ebp),%ebx
  802217:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80221a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80221e:	89 1c 24             	mov    %ebx,(%esp)
  802221:	e8 78 fd ff ff       	call   801f9e <fd_lookup>
  802226:	85 c0                	test   %eax,%eax
  802228:	78 6d                	js     802297 <read+0x8a>
  80222a:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  80222d:	8b 10                	mov    (%eax),%edx
  80222f:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  802232:	89 44 24 04          	mov    %eax,0x4(%esp)
  802236:	89 14 24             	mov    %edx,(%esp)
  802239:	e8 d3 fd ff ff       	call   802011 <dev_lookup>
  80223e:	85 c0                	test   %eax,%eax
  802240:	78 55                	js     802297 <read+0x8a>
  802242:	8b 4d f4             	mov    0xfffffff4(%ebp),%ecx
  802245:	8b 41 08             	mov    0x8(%ecx),%eax
  802248:	83 e0 03             	and    $0x3,%eax
  80224b:	83 f8 01             	cmp    $0x1,%eax
  80224e:	75 23                	jne    802273 <read+0x66>
  802250:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  802255:	8b 40 4c             	mov    0x4c(%eax),%eax
  802258:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80225c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802260:	c7 04 24 16 28 81 00 	movl   $0x812816,(%esp)
  802267:	e8 ed e6 ff ff       	call   800959 <cprintf>
  80226c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  802271:	eb 24                	jmp    802297 <read+0x8a>
  802273:	8b 55 f8             	mov    0xfffffff8(%ebp),%edx
  802276:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
  80227b:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  80227f:	74 16                	je     802297 <read+0x8a>
  802281:	8b 42 08             	mov    0x8(%edx),%eax
  802284:	8b 55 10             	mov    0x10(%ebp),%edx
  802287:	89 54 24 08          	mov    %edx,0x8(%esp)
  80228b:	8b 55 0c             	mov    0xc(%ebp),%edx
  80228e:	89 54 24 04          	mov    %edx,0x4(%esp)
  802292:	89 0c 24             	mov    %ecx,(%esp)
  802295:	ff d0                	call   *%eax
  802297:	83 c4 24             	add    $0x24,%esp
  80229a:	5b                   	pop    %ebx
  80229b:	5d                   	pop    %ebp
  80229c:	c3                   	ret    

0080229d <readn>:
  80229d:	55                   	push   %ebp
  80229e:	89 e5                	mov    %esp,%ebp
  8022a0:	57                   	push   %edi
  8022a1:	56                   	push   %esi
  8022a2:	53                   	push   %ebx
  8022a3:	83 ec 0c             	sub    $0xc,%esp
  8022a6:	8b 7d 0c             	mov    0xc(%ebp),%edi
  8022a9:	8b 75 10             	mov    0x10(%ebp),%esi
  8022ac:	b8 00 00 00 00       	mov    $0x0,%eax
  8022b1:	85 f6                	test   %esi,%esi
  8022b3:	74 36                	je     8022eb <readn+0x4e>
  8022b5:	bb 00 00 00 00       	mov    $0x0,%ebx
  8022ba:	ba 00 00 00 00       	mov    $0x0,%edx
  8022bf:	89 f0                	mov    %esi,%eax
  8022c1:	29 d0                	sub    %edx,%eax
  8022c3:	89 44 24 08          	mov    %eax,0x8(%esp)
  8022c7:	8d 04 17             	lea    (%edi,%edx,1),%eax
  8022ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  8022ce:	8b 45 08             	mov    0x8(%ebp),%eax
  8022d1:	89 04 24             	mov    %eax,(%esp)
  8022d4:	e8 34 ff ff ff       	call   80220d <read>
  8022d9:	85 c0                	test   %eax,%eax
  8022db:	78 0e                	js     8022eb <readn+0x4e>
  8022dd:	85 c0                	test   %eax,%eax
  8022df:	74 08                	je     8022e9 <readn+0x4c>
  8022e1:	01 c3                	add    %eax,%ebx
  8022e3:	89 da                	mov    %ebx,%edx
  8022e5:	39 f3                	cmp    %esi,%ebx
  8022e7:	72 d6                	jb     8022bf <readn+0x22>
  8022e9:	89 d8                	mov    %ebx,%eax
  8022eb:	83 c4 0c             	add    $0xc,%esp
  8022ee:	5b                   	pop    %ebx
  8022ef:	5e                   	pop    %esi
  8022f0:	5f                   	pop    %edi
  8022f1:	5d                   	pop    %ebp
  8022f2:	c3                   	ret    

008022f3 <fd_close>:
  8022f3:	55                   	push   %ebp
  8022f4:	89 e5                	mov    %esp,%ebp
  8022f6:	83 ec 28             	sub    $0x28,%esp
  8022f9:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  8022fc:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  8022ff:	8b 75 08             	mov    0x8(%ebp),%esi
  802302:	89 34 24             	mov    %esi,(%esp)
  802305:	e8 16 fc ff ff       	call   801f20 <fd2num>
  80230a:	8d 55 f4             	lea    0xfffffff4(%ebp),%edx
  80230d:	89 54 24 04          	mov    %edx,0x4(%esp)
  802311:	89 04 24             	mov    %eax,(%esp)
  802314:	e8 85 fc ff ff       	call   801f9e <fd_lookup>
  802319:	89 c3                	mov    %eax,%ebx
  80231b:	85 c0                	test   %eax,%eax
  80231d:	78 05                	js     802324 <fd_close+0x31>
  80231f:	3b 75 f4             	cmp    0xfffffff4(%ebp),%esi
  802322:	74 0e                	je     802332 <fd_close+0x3f>
  802324:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  802328:	75 45                	jne    80236f <fd_close+0x7c>
  80232a:	bb 00 00 00 00       	mov    $0x0,%ebx
  80232f:	90                   	nop    
  802330:	eb 3d                	jmp    80236f <fd_close+0x7c>
  802332:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  802335:	89 44 24 04          	mov    %eax,0x4(%esp)
  802339:	8b 06                	mov    (%esi),%eax
  80233b:	89 04 24             	mov    %eax,(%esp)
  80233e:	e8 ce fc ff ff       	call   802011 <dev_lookup>
  802343:	89 c3                	mov    %eax,%ebx
  802345:	85 c0                	test   %eax,%eax
  802347:	78 16                	js     80235f <fd_close+0x6c>
  802349:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80234c:	8b 40 10             	mov    0x10(%eax),%eax
  80234f:	bb 00 00 00 00       	mov    $0x0,%ebx
  802354:	85 c0                	test   %eax,%eax
  802356:	74 07                	je     80235f <fd_close+0x6c>
  802358:	89 34 24             	mov    %esi,(%esp)
  80235b:	ff d0                	call   *%eax
  80235d:	89 c3                	mov    %eax,%ebx
  80235f:	89 74 24 04          	mov    %esi,0x4(%esp)
  802363:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80236a:	e8 df f2 ff ff       	call   80164e <sys_page_unmap>
  80236f:	89 d8                	mov    %ebx,%eax
  802371:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  802374:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  802377:	89 ec                	mov    %ebp,%esp
  802379:	5d                   	pop    %ebp
  80237a:	c3                   	ret    

0080237b <close>:
  80237b:	55                   	push   %ebp
  80237c:	89 e5                	mov    %esp,%ebp
  80237e:	83 ec 18             	sub    $0x18,%esp
  802381:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
  802384:	89 44 24 04          	mov    %eax,0x4(%esp)
  802388:	8b 45 08             	mov    0x8(%ebp),%eax
  80238b:	89 04 24             	mov    %eax,(%esp)
  80238e:	e8 0b fc ff ff       	call   801f9e <fd_lookup>
  802393:	85 c0                	test   %eax,%eax
  802395:	78 13                	js     8023aa <close+0x2f>
  802397:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80239e:	00 
  80239f:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  8023a2:	89 04 24             	mov    %eax,(%esp)
  8023a5:	e8 49 ff ff ff       	call   8022f3 <fd_close>
  8023aa:	c9                   	leave  
  8023ab:	c3                   	ret    

008023ac <stat>:

int
stat(const char *path, struct Stat *stat)
{
  8023ac:	55                   	push   %ebp
  8023ad:	89 e5                	mov    %esp,%ebp
  8023af:	83 ec 18             	sub    $0x18,%esp
  8023b2:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  8023b5:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
	int fd, r;

	if ((fd = open(path, O_RDONLY)) < 0)
  8023b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8023bf:	00 
  8023c0:	8b 45 08             	mov    0x8(%ebp),%eax
  8023c3:	89 04 24             	mov    %eax,(%esp)
  8023c6:	e8 58 03 00 00       	call   802723 <open>
  8023cb:	89 c6                	mov    %eax,%esi
  8023cd:	85 c0                	test   %eax,%eax
  8023cf:	78 1b                	js     8023ec <stat+0x40>
		return fd;
	r = fstat(fd, stat);
  8023d1:	8b 45 0c             	mov    0xc(%ebp),%eax
  8023d4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8023d8:	89 34 24             	mov    %esi,(%esp)
  8023db:	e8 9d fc ff ff       	call   80207d <fstat>
  8023e0:	89 c3                	mov    %eax,%ebx
	close(fd);
  8023e2:	89 34 24             	mov    %esi,(%esp)
  8023e5:	e8 91 ff ff ff       	call   80237b <close>
  8023ea:	89 de                	mov    %ebx,%esi
	return r;
}
  8023ec:	89 f0                	mov    %esi,%eax
  8023ee:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  8023f1:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  8023f4:	89 ec                	mov    %ebp,%esp
  8023f6:	5d                   	pop    %ebp
  8023f7:	c3                   	ret    

008023f8 <dup>:
  8023f8:	55                   	push   %ebp
  8023f9:	89 e5                	mov    %esp,%ebp
  8023fb:	83 ec 38             	sub    $0x38,%esp
  8023fe:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  802401:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  802404:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  802407:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80240a:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80240d:	89 44 24 04          	mov    %eax,0x4(%esp)
  802411:	8b 45 08             	mov    0x8(%ebp),%eax
  802414:	89 04 24             	mov    %eax,(%esp)
  802417:	e8 82 fb ff ff       	call   801f9e <fd_lookup>
  80241c:	89 c3                	mov    %eax,%ebx
  80241e:	85 c0                	test   %eax,%eax
  802420:	0f 88 e1 00 00 00    	js     802507 <dup+0x10f>
  802426:	89 3c 24             	mov    %edi,(%esp)
  802429:	e8 4d ff ff ff       	call   80237b <close>
  80242e:	89 f8                	mov    %edi,%eax
  802430:	c1 e0 0c             	shl    $0xc,%eax
  802433:	8d b0 00 00 00 d0    	lea    0xd0000000(%eax),%esi
  802439:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80243c:	89 04 24             	mov    %eax,(%esp)
  80243f:	e8 ec fa ff ff       	call   801f30 <fd2data>
  802444:	89 c3                	mov    %eax,%ebx
  802446:	89 34 24             	mov    %esi,(%esp)
  802449:	e8 e2 fa ff ff       	call   801f30 <fd2data>
  80244e:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  802451:	89 d8                	mov    %ebx,%eax
  802453:	c1 e8 16             	shr    $0x16,%eax
  802456:	8b 04 85 00 d0 7b ef 	mov    0xef7bd000(,%eax,4),%eax
  80245d:	a8 01                	test   $0x1,%al
  80245f:	74 45                	je     8024a6 <dup+0xae>
  802461:	89 da                	mov    %ebx,%edx
  802463:	c1 ea 0c             	shr    $0xc,%edx
  802466:	8b 04 95 00 00 40 ef 	mov    0xef400000(,%edx,4),%eax
  80246d:	a8 01                	test   $0x1,%al
  80246f:	74 35                	je     8024a6 <dup+0xae>
  802471:	8b 04 95 00 00 40 ef 	mov    0xef400000(,%edx,4),%eax
  802478:	25 07 0e 00 00       	and    $0xe07,%eax
  80247d:	89 44 24 10          	mov    %eax,0x10(%esp)
  802481:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  802484:	89 44 24 0c          	mov    %eax,0xc(%esp)
  802488:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80248f:	00 
  802490:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802494:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80249b:	e8 0c f2 ff ff       	call   8016ac <sys_page_map>
  8024a0:	89 c3                	mov    %eax,%ebx
  8024a2:	85 c0                	test   %eax,%eax
  8024a4:	78 3e                	js     8024e4 <dup+0xec>
  8024a6:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8024a9:	89 d0                	mov    %edx,%eax
  8024ab:	c1 e8 0c             	shr    $0xc,%eax
  8024ae:	8b 04 85 00 00 40 ef 	mov    0xef400000(,%eax,4),%eax
  8024b5:	25 07 0e 00 00       	and    $0xe07,%eax
  8024ba:	89 44 24 10          	mov    %eax,0x10(%esp)
  8024be:	89 74 24 0c          	mov    %esi,0xc(%esp)
  8024c2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8024c9:	00 
  8024ca:	89 54 24 04          	mov    %edx,0x4(%esp)
  8024ce:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8024d5:	e8 d2 f1 ff ff       	call   8016ac <sys_page_map>
  8024da:	89 c3                	mov    %eax,%ebx
  8024dc:	85 c0                	test   %eax,%eax
  8024de:	78 04                	js     8024e4 <dup+0xec>
  8024e0:	89 fb                	mov    %edi,%ebx
  8024e2:	eb 23                	jmp    802507 <dup+0x10f>
  8024e4:	89 74 24 04          	mov    %esi,0x4(%esp)
  8024e8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8024ef:	e8 5a f1 ff ff       	call   80164e <sys_page_unmap>
  8024f4:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  8024f7:	89 44 24 04          	mov    %eax,0x4(%esp)
  8024fb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802502:	e8 47 f1 ff ff       	call   80164e <sys_page_unmap>
  802507:	89 d8                	mov    %ebx,%eax
  802509:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80250c:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80250f:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  802512:	89 ec                	mov    %ebp,%esp
  802514:	5d                   	pop    %ebp
  802515:	c3                   	ret    

00802516 <close_all>:
  802516:	55                   	push   %ebp
  802517:	89 e5                	mov    %esp,%ebp
  802519:	53                   	push   %ebx
  80251a:	83 ec 04             	sub    $0x4,%esp
  80251d:	bb 00 00 00 00       	mov    $0x0,%ebx
  802522:	89 1c 24             	mov    %ebx,(%esp)
  802525:	e8 51 fe ff ff       	call   80237b <close>
  80252a:	83 c3 01             	add    $0x1,%ebx
  80252d:	83 fb 20             	cmp    $0x20,%ebx
  802530:	75 f0                	jne    802522 <close_all+0xc>
  802532:	83 c4 04             	add    $0x4,%esp
  802535:	5b                   	pop    %ebx
  802536:	5d                   	pop    %ebp
  802537:	c3                   	ret    

00802538 <fsipc>:
// dstva: virtual address at which to receive reply page, 0 if none.
// Returns result from the file server.
static int
fsipc(unsigned type, void *dstva)
{
  802538:	55                   	push   %ebp
  802539:	89 e5                	mov    %esp,%ebp
  80253b:	53                   	push   %ebx
  80253c:	83 ec 14             	sub    $0x14,%esp
  80253f:	89 d3                	mov    %edx,%ebx
	if (debug)
		cprintf("[%08x] fsipc %d %08x\n", env->env_id, type, *(uint32_t *)&fsipcbuf);

	ipc_send(envs[1].env_id, type, &fsipcbuf, PTE_P | PTE_W | PTE_U);
  802541:	8b 15 c8 00 c0 ee    	mov    0xeec000c8,%edx
  802547:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  80254e:	00 
  80254f:	c7 44 24 08 00 50 81 	movl   $0x815000,0x8(%esp)
  802556:	00 
  802557:	89 44 24 04          	mov    %eax,0x4(%esp)
  80255b:	89 14 24             	mov    %edx,(%esp)
  80255e:	e8 1d f8 ff ff       	call   801d80 <ipc_send>
	return ipc_recv(NULL, dstva, NULL);
  802563:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80256a:	00 
  80256b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80256f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802576:	e8 b9 f8 ff ff       	call   801e34 <ipc_recv>
}
  80257b:	83 c4 14             	add    $0x14,%esp
  80257e:	5b                   	pop    %ebx
  80257f:	5d                   	pop    %ebp
  802580:	c3                   	ret    

00802581 <sync>:

static int devfile_flush(struct Fd *fd);
static ssize_t devfile_read(struct Fd *fd, void *buf, size_t n);
static ssize_t devfile_write(struct Fd *fd, const void *buf, size_t n);
static int devfile_stat(struct Fd *fd, struct Stat *stat);
static int devfile_trunc(struct Fd *fd, off_t newsize);

struct Dev devfile =
{
	.dev_id =	'f',
	.dev_name =	"file",
	.dev_read =	devfile_read,
	.dev_write =	devfile_write,
	.dev_close =	devfile_flush,
	.dev_stat =	devfile_stat,
	.dev_trunc =	devfile_trunc
};

// Open a file (or directory).
//
// Returns:
// 	The file descriptor index on success
// 	-E_BAD_PATH if the path is too long (>= MAXPATHLEN)
// 	< 0 for other errors.
int
open(const char *path, int mode)
{
	// Find an unused file descriptor page using fd_alloc.
	// Then send a file-open request to the file server.
	// Include 'path' and 'omode' in request,
	// and map the returned file descriptor page
	// at the appropriate fd address.
	// FSREQ_OPEN returns 0 on success, < 0 on failure.
	//
	// (fd_alloc does not allocate a page, it just returns an
	// unused fd address.  Do you need to allocate a page?)
	//
	// Return the file descriptor index.
	// If any step after fd_alloc fails, use fd_close to free the
	// file descriptor.

	// LAB 5: Your code here.
	struct Fd *fd;
	int r;
	void *page;
	if((r=fd_alloc(&fd))<0){
		fd_close(fd,0);
		return r;
	}
	//cprintf("open:fd=%x\n",fd);
	strcpy(fsipcbuf.open.req_path,path);
	fsipcbuf.open.req_omode=mode;
	page=(void*)fd2data(fd);
	if((r=fsipc(FSREQ_OPEN,(void*)fd))<0)
	{
		fd_close(fd,1);
		return r;	
	}
	//cprintf("open:page=%x\n",page);
	if((r=sys_page_map(0,(void*)fd,0,(void*)page,PTE_P | PTE_W | PTE_U))<0)
	{
		fd_close(fd,1);
		return r;
	}
	//cprintf("open:fileid=%x\n",fd->fd_file.id);
	return fd2num(fd);
	//panic("open not implemented");
}

// Flush the file descriptor.  After this the fileid is invalid.
//
// This function is called by fd_close.  fd_close will take care of
// unmapping the FD page from this environment.  Since the server uses
// the reference counts on the FD pages to detect which files are
// open, unmapping it is enough to free up server-side resources.
// Other than that, we just have to make sure our changes are flushed
// to disk.
static int
devfile_flush(struct Fd *fd)
{
	fsipcbuf.flush.req_fileid = fd->fd_file.id;
	return fsipc(FSREQ_FLUSH, NULL);
}

// Read at most 'n' bytes from 'fd' at the current position into 'buf'.
//
// Returns:
// 	The number of bytes successfully read.
// 	< 0 on error.
static ssize_t
devfile_read(struct Fd *fd, void *buf, size_t n)
{
	// Make an FSREQ_READ request to the file system server after
	// filling fsipcbuf.read with the request arguments.  The
	// bytes read will be written back to fsipcbuf by the file
	// system server.
	// LAB 5: Your code here
	ssize_t readsize;
	if(debug)
		cprintf("devfile_read:fileid=%x readsize=%x\n",fd->fd_file.id,n);
	fsipcbuf.read.req_fileid=fd->fd_file.id;
	fsipcbuf.read.req_n=n;
	readsize=(ssize_t)fsipc(FSREQ_READ,&fsipcbuf);
	//cprintf("readsize=%d\n",readsize);
	if(debug)
		cprintf("devfile_read:buf1=%s\nbuf2=%s\n",(char*)&fsipcbuf,fsipcbuf.readRet.ret_buf);
	if(readsize>0)
		memmove(buf,(void*)&fsipcbuf,(size_t)readsize);
	//cprintf("readsize=%d",readsize);
	return readsize;
	//panic("devfile_read not implemented");
}

// Write at most 'n' bytes from 'buf' to 'fd' at the current seek position.
//
// Returns:
//	 The number of bytes successfully written.
//	 < 0 on error.
static ssize_t
devfile_write(struct Fd *fd, const void *buf, size_t n)
{
	// Make an FSREQ_WRITE request to the file system server.  Be
	// careful: fsipcbuf.write.req_buf is only so large, but
	// remember that write is always allowed to write *fewer*
	// bytes than requested.
	// LAB 5: Your code here
	ssize_t writesize;
	size_t bufsize;
	fsipcbuf.write.req_fileid=fd->fd_file.id;
	bufsize=sizeof(fsipcbuf.write.req_buf);
	if(n<bufsize)
		bufsize=n;	
	fsipcbuf.write.req_n=n;
	memmove((void*)fsipcbuf.write.req_buf,buf,bufsize);
	writesize=(ssize_t)fsipc(FSREQ_WRITE,NULL);
	return writesize;
	//panic("devfile_write not implemented");
}

static int
devfile_stat(struct Fd *fd, struct Stat *st)
{
	int r;

	fsipcbuf.stat.req_fileid = fd->fd_file.id;
	if ((r = fsipc(FSREQ_STAT, NULL)) < 0)
		return r;
	strcpy(st->st_name, fsipcbuf.statRet.ret_name);
	st->st_size = fsipcbuf.statRet.ret_size;
	st->st_isdir = fsipcbuf.statRet.ret_isdir;
	return 0;
}

// Truncate or extend an open file to 'size' bytes
static int
devfile_trunc(struct Fd *fd, off_t newsize)
{
	fsipcbuf.set_size.req_fileid = fd->fd_file.id;
	fsipcbuf.set_size.req_size = newsize;
	return fsipc(FSREQ_SET_SIZE, NULL);
}

// Delete a file
int
remove(const char *path)
{
	if (strlen(path) >= MAXPATHLEN)
		return -E_BAD_PATH;
	strcpy(fsipcbuf.remove.req_path, path);
	return fsipc(FSREQ_REMOVE, NULL);
}

// Synchronize disk with buffer cache
int
sync(void)
{
  802581:	55                   	push   %ebp
  802582:	89 e5                	mov    %esp,%ebp
  802584:	83 ec 08             	sub    $0x8,%esp
	// Ask the file server to update the disk
	// by writing any dirty blocks in the buffer cache.

	return fsipc(FSREQ_SYNC, NULL);
  802587:	ba 00 00 00 00       	mov    $0x0,%edx
  80258c:	b8 08 00 00 00       	mov    $0x8,%eax
  802591:	e8 a2 ff ff ff       	call   802538 <fsipc>
}
  802596:	c9                   	leave  
  802597:	c3                   	ret    

00802598 <devfile_trunc>:
  802598:	55                   	push   %ebp
  802599:	89 e5                	mov    %esp,%ebp
  80259b:	83 ec 08             	sub    $0x8,%esp
  80259e:	8b 45 08             	mov    0x8(%ebp),%eax
  8025a1:	8b 40 0c             	mov    0xc(%eax),%eax
  8025a4:	a3 00 50 81 00       	mov    %eax,0x815000
  8025a9:	8b 45 0c             	mov    0xc(%ebp),%eax
  8025ac:	a3 04 50 81 00       	mov    %eax,0x815004
  8025b1:	ba 00 00 00 00       	mov    $0x0,%edx
  8025b6:	b8 02 00 00 00       	mov    $0x2,%eax
  8025bb:	e8 78 ff ff ff       	call   802538 <fsipc>
  8025c0:	c9                   	leave  
  8025c1:	c3                   	ret    

008025c2 <devfile_flush>:
  8025c2:	55                   	push   %ebp
  8025c3:	89 e5                	mov    %esp,%ebp
  8025c5:	83 ec 08             	sub    $0x8,%esp
  8025c8:	8b 45 08             	mov    0x8(%ebp),%eax
  8025cb:	8b 40 0c             	mov    0xc(%eax),%eax
  8025ce:	a3 00 50 81 00       	mov    %eax,0x815000
  8025d3:	ba 00 00 00 00       	mov    $0x0,%edx
  8025d8:	b8 06 00 00 00       	mov    $0x6,%eax
  8025dd:	e8 56 ff ff ff       	call   802538 <fsipc>
  8025e2:	c9                   	leave  
  8025e3:	c3                   	ret    

008025e4 <devfile_stat>:
  8025e4:	55                   	push   %ebp
  8025e5:	89 e5                	mov    %esp,%ebp
  8025e7:	53                   	push   %ebx
  8025e8:	83 ec 14             	sub    $0x14,%esp
  8025eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8025ee:	8b 45 08             	mov    0x8(%ebp),%eax
  8025f1:	8b 40 0c             	mov    0xc(%eax),%eax
  8025f4:	a3 00 50 81 00       	mov    %eax,0x815000
  8025f9:	ba 00 00 00 00       	mov    $0x0,%edx
  8025fe:	b8 05 00 00 00       	mov    $0x5,%eax
  802603:	e8 30 ff ff ff       	call   802538 <fsipc>
  802608:	85 c0                	test   %eax,%eax
  80260a:	78 2b                	js     802637 <devfile_stat+0x53>
  80260c:	c7 44 24 04 00 50 81 	movl   $0x815000,0x4(%esp)
  802613:	00 
  802614:	89 1c 24             	mov    %ebx,(%esp)
  802617:	e8 c5 e9 ff ff       	call   800fe1 <strcpy>
  80261c:	a1 80 50 81 00       	mov    0x815080,%eax
  802621:	89 83 80 00 00 00    	mov    %eax,0x80(%ebx)
  802627:	a1 84 50 81 00       	mov    0x815084,%eax
  80262c:	89 83 84 00 00 00    	mov    %eax,0x84(%ebx)
  802632:	b8 00 00 00 00       	mov    $0x0,%eax
  802637:	83 c4 14             	add    $0x14,%esp
  80263a:	5b                   	pop    %ebx
  80263b:	5d                   	pop    %ebp
  80263c:	c3                   	ret    

0080263d <devfile_write>:
  80263d:	55                   	push   %ebp
  80263e:	89 e5                	mov    %esp,%ebp
  802640:	83 ec 18             	sub    $0x18,%esp
  802643:	8b 55 10             	mov    0x10(%ebp),%edx
  802646:	8b 45 08             	mov    0x8(%ebp),%eax
  802649:	8b 40 0c             	mov    0xc(%eax),%eax
  80264c:	a3 00 50 81 00       	mov    %eax,0x815000
  802651:	89 d0                	mov    %edx,%eax
  802653:	81 fa f7 0f 00 00    	cmp    $0xff7,%edx
  802659:	76 05                	jbe    802660 <devfile_write+0x23>
  80265b:	b8 f8 0f 00 00       	mov    $0xff8,%eax
  802660:	89 15 04 50 81 00    	mov    %edx,0x815004
  802666:	89 44 24 08          	mov    %eax,0x8(%esp)
  80266a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80266d:	89 44 24 04          	mov    %eax,0x4(%esp)
  802671:	c7 04 24 08 50 81 00 	movl   $0x815008,(%esp)
  802678:	e8 6d eb ff ff       	call   8011ea <memmove>
  80267d:	ba 00 00 00 00       	mov    $0x0,%edx
  802682:	b8 04 00 00 00       	mov    $0x4,%eax
  802687:	e8 ac fe ff ff       	call   802538 <fsipc>
  80268c:	c9                   	leave  
  80268d:	c3                   	ret    

0080268e <devfile_read>:
  80268e:	55                   	push   %ebp
  80268f:	89 e5                	mov    %esp,%ebp
  802691:	53                   	push   %ebx
  802692:	83 ec 14             	sub    $0x14,%esp
  802695:	8b 45 08             	mov    0x8(%ebp),%eax
  802698:	8b 40 0c             	mov    0xc(%eax),%eax
  80269b:	a3 00 50 81 00       	mov    %eax,0x815000
  8026a0:	8b 45 10             	mov    0x10(%ebp),%eax
  8026a3:	a3 04 50 81 00       	mov    %eax,0x815004
  8026a8:	ba 00 50 81 00       	mov    $0x815000,%edx
  8026ad:	b8 03 00 00 00       	mov    $0x3,%eax
  8026b2:	e8 81 fe ff ff       	call   802538 <fsipc>
  8026b7:	89 c3                	mov    %eax,%ebx
  8026b9:	85 c0                	test   %eax,%eax
  8026bb:	7e 17                	jle    8026d4 <devfile_read+0x46>
  8026bd:	89 44 24 08          	mov    %eax,0x8(%esp)
  8026c1:	c7 44 24 04 00 50 81 	movl   $0x815000,0x4(%esp)
  8026c8:	00 
  8026c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  8026cc:	89 04 24             	mov    %eax,(%esp)
  8026cf:	e8 16 eb ff ff       	call   8011ea <memmove>
  8026d4:	89 d8                	mov    %ebx,%eax
  8026d6:	83 c4 14             	add    $0x14,%esp
  8026d9:	5b                   	pop    %ebx
  8026da:	5d                   	pop    %ebp
  8026db:	c3                   	ret    

008026dc <remove>:
  8026dc:	55                   	push   %ebp
  8026dd:	89 e5                	mov    %esp,%ebp
  8026df:	53                   	push   %ebx
  8026e0:	83 ec 14             	sub    $0x14,%esp
  8026e3:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8026e6:	89 1c 24             	mov    %ebx,(%esp)
  8026e9:	e8 a2 e8 ff ff       	call   800f90 <strlen>
  8026ee:	ba f4 ff ff ff       	mov    $0xfffffff4,%edx
  8026f3:	3d ff 03 00 00       	cmp    $0x3ff,%eax
  8026f8:	7f 21                	jg     80271b <remove+0x3f>
  8026fa:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8026fe:	c7 04 24 00 50 81 00 	movl   $0x815000,(%esp)
  802705:	e8 d7 e8 ff ff       	call   800fe1 <strcpy>
  80270a:	ba 00 00 00 00       	mov    $0x0,%edx
  80270f:	b8 07 00 00 00       	mov    $0x7,%eax
  802714:	e8 1f fe ff ff       	call   802538 <fsipc>
  802719:	89 c2                	mov    %eax,%edx
  80271b:	89 d0                	mov    %edx,%eax
  80271d:	83 c4 14             	add    $0x14,%esp
  802720:	5b                   	pop    %ebx
  802721:	5d                   	pop    %ebp
  802722:	c3                   	ret    

00802723 <open>:
  802723:	55                   	push   %ebp
  802724:	89 e5                	mov    %esp,%ebp
  802726:	56                   	push   %esi
  802727:	53                   	push   %ebx
  802728:	83 ec 30             	sub    $0x30,%esp
  80272b:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80272e:	89 04 24             	mov    %eax,(%esp)
  802731:	e8 15 f8 ff ff       	call   801f4b <fd_alloc>
  802736:	89 c3                	mov    %eax,%ebx
  802738:	85 c0                	test   %eax,%eax
  80273a:	79 18                	jns    802754 <open+0x31>
  80273c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  802743:	00 
  802744:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  802747:	89 04 24             	mov    %eax,(%esp)
  80274a:	e8 a4 fb ff ff       	call   8022f3 <fd_close>
  80274f:	e9 9f 00 00 00       	jmp    8027f3 <open+0xd0>
  802754:	8b 45 08             	mov    0x8(%ebp),%eax
  802757:	89 44 24 04          	mov    %eax,0x4(%esp)
  80275b:	c7 04 24 00 50 81 00 	movl   $0x815000,(%esp)
  802762:	e8 7a e8 ff ff       	call   800fe1 <strcpy>
  802767:	8b 45 0c             	mov    0xc(%ebp),%eax
  80276a:	a3 00 54 81 00       	mov    %eax,0x815400
  80276f:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  802772:	89 04 24             	mov    %eax,(%esp)
  802775:	e8 b6 f7 ff ff       	call   801f30 <fd2data>
  80277a:	89 c6                	mov    %eax,%esi
  80277c:	8b 55 f4             	mov    0xfffffff4(%ebp),%edx
  80277f:	b8 01 00 00 00       	mov    $0x1,%eax
  802784:	e8 af fd ff ff       	call   802538 <fsipc>
  802789:	89 c3                	mov    %eax,%ebx
  80278b:	85 c0                	test   %eax,%eax
  80278d:	79 15                	jns    8027a4 <open+0x81>
  80278f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  802796:	00 
  802797:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  80279a:	89 04 24             	mov    %eax,(%esp)
  80279d:	e8 51 fb ff ff       	call   8022f3 <fd_close>
  8027a2:	eb 4f                	jmp    8027f3 <open+0xd0>
  8027a4:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%esp)
  8027ab:	00 
  8027ac:	89 74 24 0c          	mov    %esi,0xc(%esp)
  8027b0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8027b7:	00 
  8027b8:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8027bb:	89 44 24 04          	mov    %eax,0x4(%esp)
  8027bf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8027c6:	e8 e1 ee ff ff       	call   8016ac <sys_page_map>
  8027cb:	89 c3                	mov    %eax,%ebx
  8027cd:	85 c0                	test   %eax,%eax
  8027cf:	79 15                	jns    8027e6 <open+0xc3>
  8027d1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  8027d8:	00 
  8027d9:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8027dc:	89 04 24             	mov    %eax,(%esp)
  8027df:	e8 0f fb ff ff       	call   8022f3 <fd_close>
  8027e4:	eb 0d                	jmp    8027f3 <open+0xd0>
  8027e6:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8027e9:	89 04 24             	mov    %eax,(%esp)
  8027ec:	e8 2f f7 ff ff       	call   801f20 <fd2num>
  8027f1:	89 c3                	mov    %eax,%ebx
  8027f3:	89 d8                	mov    %ebx,%eax
  8027f5:	83 c4 30             	add    $0x30,%esp
  8027f8:	5b                   	pop    %ebx
  8027f9:	5e                   	pop    %esi
  8027fa:	5d                   	pop    %ebp
  8027fb:	c3                   	ret    
  8027fc:	00 00                	add    %al,(%eax)
	...

00802800 <devsock_stat>:
}

static int
devsock_stat(struct Fd *fd, struct Stat *stat)
{
  802800:	55                   	push   %ebp
  802801:	89 e5                	mov    %esp,%ebp
  802803:	83 ec 08             	sub    $0x8,%esp
	strcpy(stat->st_name, "<sock>");
  802806:	c7 44 24 04 40 28 81 	movl   $0x812840,0x4(%esp)
  80280d:	00 
  80280e:	8b 45 0c             	mov    0xc(%ebp),%eax
  802811:	89 04 24             	mov    %eax,(%esp)
  802814:	e8 c8 e7 ff ff       	call   800fe1 <strcpy>
	return 0;
}
  802819:	b8 00 00 00 00       	mov    $0x0,%eax
  80281e:	c9                   	leave  
  80281f:	c3                   	ret    

00802820 <devsock_close>:
  802820:	55                   	push   %ebp
  802821:	89 e5                	mov    %esp,%ebp
  802823:	83 ec 08             	sub    $0x8,%esp
  802826:	8b 45 08             	mov    0x8(%ebp),%eax
  802829:	8b 40 0c             	mov    0xc(%eax),%eax
  80282c:	89 04 24             	mov    %eax,(%esp)
  80282f:	e8 be 02 00 00       	call   802af2 <nsipc_close>
  802834:	c9                   	leave  
  802835:	c3                   	ret    

00802836 <devsock_write>:
  802836:	55                   	push   %ebp
  802837:	89 e5                	mov    %esp,%ebp
  802839:	83 ec 18             	sub    $0x18,%esp
  80283c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  802843:	00 
  802844:	8b 45 10             	mov    0x10(%ebp),%eax
  802847:	89 44 24 08          	mov    %eax,0x8(%esp)
  80284b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80284e:	89 44 24 04          	mov    %eax,0x4(%esp)
  802852:	8b 45 08             	mov    0x8(%ebp),%eax
  802855:	8b 40 0c             	mov    0xc(%eax),%eax
  802858:	89 04 24             	mov    %eax,(%esp)
  80285b:	e8 ce 02 00 00       	call   802b2e <nsipc_send>
  802860:	c9                   	leave  
  802861:	c3                   	ret    

00802862 <devsock_read>:
  802862:	55                   	push   %ebp
  802863:	89 e5                	mov    %esp,%ebp
  802865:	83 ec 18             	sub    $0x18,%esp
  802868:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80286f:	00 
  802870:	8b 45 10             	mov    0x10(%ebp),%eax
  802873:	89 44 24 08          	mov    %eax,0x8(%esp)
  802877:	8b 45 0c             	mov    0xc(%ebp),%eax
  80287a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80287e:	8b 45 08             	mov    0x8(%ebp),%eax
  802881:	8b 40 0c             	mov    0xc(%eax),%eax
  802884:	89 04 24             	mov    %eax,(%esp)
  802887:	e8 15 03 00 00       	call   802ba1 <nsipc_recv>
  80288c:	c9                   	leave  
  80288d:	c3                   	ret    

0080288e <alloc_sockfd>:
  80288e:	55                   	push   %ebp
  80288f:	89 e5                	mov    %esp,%ebp
  802891:	56                   	push   %esi
  802892:	53                   	push   %ebx
  802893:	83 ec 20             	sub    $0x20,%esp
  802896:	89 c6                	mov    %eax,%esi
  802898:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  80289b:	89 04 24             	mov    %eax,(%esp)
  80289e:	e8 a8 f6 ff ff       	call   801f4b <fd_alloc>
  8028a3:	89 c3                	mov    %eax,%ebx
  8028a5:	85 c0                	test   %eax,%eax
  8028a7:	78 21                	js     8028ca <alloc_sockfd+0x3c>
  8028a9:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  8028b0:	00 
  8028b1:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8028b4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8028b8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8028bf:	e8 46 ee ff ff       	call   80170a <sys_page_alloc>
  8028c4:	89 c3                	mov    %eax,%ebx
  8028c6:	85 c0                	test   %eax,%eax
  8028c8:	79 0a                	jns    8028d4 <alloc_sockfd+0x46>
  8028ca:	89 34 24             	mov    %esi,(%esp)
  8028cd:	e8 20 02 00 00       	call   802af2 <nsipc_close>
  8028d2:	eb 28                	jmp    8028fc <alloc_sockfd+0x6e>
  8028d4:	8b 15 20 80 81 00    	mov    0x818020,%edx
  8028da:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8028dd:	89 10                	mov    %edx,(%eax)
  8028df:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8028e2:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%eax)
  8028e9:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8028ec:	89 70 0c             	mov    %esi,0xc(%eax)
  8028ef:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  8028f2:	89 04 24             	mov    %eax,(%esp)
  8028f5:	e8 26 f6 ff ff       	call   801f20 <fd2num>
  8028fa:	89 c3                	mov    %eax,%ebx
  8028fc:	89 d8                	mov    %ebx,%eax
  8028fe:	83 c4 20             	add    $0x20,%esp
  802901:	5b                   	pop    %ebx
  802902:	5e                   	pop    %esi
  802903:	5d                   	pop    %ebp
  802904:	c3                   	ret    

00802905 <socket>:

int
socket(int domain, int type, int protocol)
{
  802905:	55                   	push   %ebp
  802906:	89 e5                	mov    %esp,%ebp
  802908:	83 ec 18             	sub    $0x18,%esp
	int r;
	if ((r = nsipc_socket(domain, type, protocol)) < 0)
  80290b:	8b 45 10             	mov    0x10(%ebp),%eax
  80290e:	89 44 24 08          	mov    %eax,0x8(%esp)
  802912:	8b 45 0c             	mov    0xc(%ebp),%eax
  802915:	89 44 24 04          	mov    %eax,0x4(%esp)
  802919:	8b 45 08             	mov    0x8(%ebp),%eax
  80291c:	89 04 24             	mov    %eax,(%esp)
  80291f:	e8 82 01 00 00       	call   802aa6 <nsipc_socket>
  802924:	85 c0                	test   %eax,%eax
  802926:	78 05                	js     80292d <socket+0x28>
		return r;
	return alloc_sockfd(r);
  802928:	e8 61 ff ff ff       	call   80288e <alloc_sockfd>
}
  80292d:	c9                   	leave  
  80292e:	66 90                	xchg   %ax,%ax
  802930:	c3                   	ret    

00802931 <fd2sockid>:
  802931:	55                   	push   %ebp
  802932:	89 e5                	mov    %esp,%ebp
  802934:	83 ec 18             	sub    $0x18,%esp
  802937:	8d 55 fc             	lea    0xfffffffc(%ebp),%edx
  80293a:	89 54 24 04          	mov    %edx,0x4(%esp)
  80293e:	89 04 24             	mov    %eax,(%esp)
  802941:	e8 58 f6 ff ff       	call   801f9e <fd_lookup>
  802946:	89 c2                	mov    %eax,%edx
  802948:	85 c0                	test   %eax,%eax
  80294a:	78 15                	js     802961 <fd2sockid+0x30>
  80294c:	8b 4d fc             	mov    0xfffffffc(%ebp),%ecx
  80294f:	8b 01                	mov    (%ecx),%eax
  802951:	ba f1 ff ff ff       	mov    $0xfffffff1,%edx
  802956:	3b 05 20 80 81 00    	cmp    0x818020,%eax
  80295c:	75 03                	jne    802961 <fd2sockid+0x30>
  80295e:	8b 51 0c             	mov    0xc(%ecx),%edx
  802961:	89 d0                	mov    %edx,%eax
  802963:	c9                   	leave  
  802964:	c3                   	ret    

00802965 <listen>:
  802965:	55                   	push   %ebp
  802966:	89 e5                	mov    %esp,%ebp
  802968:	83 ec 08             	sub    $0x8,%esp
  80296b:	8b 45 08             	mov    0x8(%ebp),%eax
  80296e:	e8 be ff ff ff       	call   802931 <fd2sockid>
  802973:	89 c2                	mov    %eax,%edx
  802975:	85 c0                	test   %eax,%eax
  802977:	78 11                	js     80298a <listen+0x25>
  802979:	8b 45 0c             	mov    0xc(%ebp),%eax
  80297c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802980:	89 14 24             	mov    %edx,(%esp)
  802983:	e8 48 01 00 00       	call   802ad0 <nsipc_listen>
  802988:	89 c2                	mov    %eax,%edx
  80298a:	89 d0                	mov    %edx,%eax
  80298c:	c9                   	leave  
  80298d:	c3                   	ret    

0080298e <connect>:
  80298e:	55                   	push   %ebp
  80298f:	89 e5                	mov    %esp,%ebp
  802991:	83 ec 18             	sub    $0x18,%esp
  802994:	8b 45 08             	mov    0x8(%ebp),%eax
  802997:	e8 95 ff ff ff       	call   802931 <fd2sockid>
  80299c:	89 c2                	mov    %eax,%edx
  80299e:	85 c0                	test   %eax,%eax
  8029a0:	78 18                	js     8029ba <connect+0x2c>
  8029a2:	8b 45 10             	mov    0x10(%ebp),%eax
  8029a5:	89 44 24 08          	mov    %eax,0x8(%esp)
  8029a9:	8b 45 0c             	mov    0xc(%ebp),%eax
  8029ac:	89 44 24 04          	mov    %eax,0x4(%esp)
  8029b0:	89 14 24             	mov    %edx,(%esp)
  8029b3:	e8 71 02 00 00       	call   802c29 <nsipc_connect>
  8029b8:	89 c2                	mov    %eax,%edx
  8029ba:	89 d0                	mov    %edx,%eax
  8029bc:	c9                   	leave  
  8029bd:	c3                   	ret    

008029be <shutdown>:
  8029be:	55                   	push   %ebp
  8029bf:	89 e5                	mov    %esp,%ebp
  8029c1:	83 ec 08             	sub    $0x8,%esp
  8029c4:	8b 45 08             	mov    0x8(%ebp),%eax
  8029c7:	e8 65 ff ff ff       	call   802931 <fd2sockid>
  8029cc:	89 c2                	mov    %eax,%edx
  8029ce:	85 c0                	test   %eax,%eax
  8029d0:	78 11                	js     8029e3 <shutdown+0x25>
  8029d2:	8b 45 0c             	mov    0xc(%ebp),%eax
  8029d5:	89 44 24 04          	mov    %eax,0x4(%esp)
  8029d9:	89 14 24             	mov    %edx,(%esp)
  8029dc:	e8 2b 01 00 00       	call   802b0c <nsipc_shutdown>
  8029e1:	89 c2                	mov    %eax,%edx
  8029e3:	89 d0                	mov    %edx,%eax
  8029e5:	c9                   	leave  
  8029e6:	c3                   	ret    

008029e7 <bind>:
  8029e7:	55                   	push   %ebp
  8029e8:	89 e5                	mov    %esp,%ebp
  8029ea:	83 ec 18             	sub    $0x18,%esp
  8029ed:	8b 45 08             	mov    0x8(%ebp),%eax
  8029f0:	e8 3c ff ff ff       	call   802931 <fd2sockid>
  8029f5:	89 c2                	mov    %eax,%edx
  8029f7:	85 c0                	test   %eax,%eax
  8029f9:	78 18                	js     802a13 <bind+0x2c>
  8029fb:	8b 45 10             	mov    0x10(%ebp),%eax
  8029fe:	89 44 24 08          	mov    %eax,0x8(%esp)
  802a02:	8b 45 0c             	mov    0xc(%ebp),%eax
  802a05:	89 44 24 04          	mov    %eax,0x4(%esp)
  802a09:	89 14 24             	mov    %edx,(%esp)
  802a0c:	e8 57 02 00 00       	call   802c68 <nsipc_bind>
  802a11:	89 c2                	mov    %eax,%edx
  802a13:	89 d0                	mov    %edx,%eax
  802a15:	c9                   	leave  
  802a16:	c3                   	ret    

00802a17 <accept>:
  802a17:	55                   	push   %ebp
  802a18:	89 e5                	mov    %esp,%ebp
  802a1a:	83 ec 18             	sub    $0x18,%esp
  802a1d:	8b 45 08             	mov    0x8(%ebp),%eax
  802a20:	e8 0c ff ff ff       	call   802931 <fd2sockid>
  802a25:	89 c2                	mov    %eax,%edx
  802a27:	85 c0                	test   %eax,%eax
  802a29:	78 23                	js     802a4e <accept+0x37>
  802a2b:	8b 45 10             	mov    0x10(%ebp),%eax
  802a2e:	89 44 24 08          	mov    %eax,0x8(%esp)
  802a32:	8b 45 0c             	mov    0xc(%ebp),%eax
  802a35:	89 44 24 04          	mov    %eax,0x4(%esp)
  802a39:	89 14 24             	mov    %edx,(%esp)
  802a3c:	e8 66 02 00 00       	call   802ca7 <nsipc_accept>
  802a41:	89 c2                	mov    %eax,%edx
  802a43:	85 c0                	test   %eax,%eax
  802a45:	78 07                	js     802a4e <accept+0x37>
  802a47:	e8 42 fe ff ff       	call   80288e <alloc_sockfd>
  802a4c:	89 c2                	mov    %eax,%edx
  802a4e:	89 d0                	mov    %edx,%eax
  802a50:	c9                   	leave  
  802a51:	c3                   	ret    
	...

00802a60 <nsipc>:
// type: request code, passed as the simple integer IPC value.
// Returns 0 if successful, < 0 on failure.
static int
nsipc(unsigned type)
{
  802a60:	55                   	push   %ebp
  802a61:	89 e5                	mov    %esp,%ebp
  802a63:	83 ec 18             	sub    $0x18,%esp
	if (debug)
		cprintf("[%08x] nsipc %d\n", env->env_id, type);

	ipc_send(envs[2].env_id, type, &nsipcbuf, PTE_P|PTE_W|PTE_U);
  802a66:	8b 15 44 01 c0 ee    	mov    0xeec00144,%edx
  802a6c:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  802a73:	00 
  802a74:	c7 44 24 08 00 70 81 	movl   $0x817000,0x8(%esp)
  802a7b:	00 
  802a7c:	89 44 24 04          	mov    %eax,0x4(%esp)
  802a80:	89 14 24             	mov    %edx,(%esp)
  802a83:	e8 f8 f2 ff ff       	call   801d80 <ipc_send>
	return ipc_recv(NULL, NULL, NULL);
  802a88:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  802a8f:	00 
  802a90:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  802a97:	00 
  802a98:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802a9f:	e8 90 f3 ff ff       	call   801e34 <ipc_recv>
}
  802aa4:	c9                   	leave  
  802aa5:	c3                   	ret    

00802aa6 <nsipc_socket>:

int
nsipc_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
	int r;
	
	nsipcbuf.accept.req_s = s;
	if ((r = nsipc(NSREQ_ACCEPT)) >= 0) {
		struct Nsret_accept *ret = &nsipcbuf.acceptRet;
		memmove(addr, &ret->ret_addr, ret->ret_addrlen);
		*addrlen = ret->ret_addrlen;
	}
	return r;
}

int
nsipc_bind(int s, struct sockaddr *name, socklen_t namelen)
{
	nsipcbuf.bind.req_s = s;
	memmove(&nsipcbuf.bind.req_name, name, namelen);
	nsipcbuf.bind.req_namelen = namelen;
	return nsipc(NSREQ_BIND);
}

int
nsipc_shutdown(int s, int how)
{
	nsipcbuf.shutdown.req_s = s;
	nsipcbuf.shutdown.req_how = how;
	return nsipc(NSREQ_SHUTDOWN);
}

int
nsipc_close(int s)
{
	nsipcbuf.close.req_s = s;
	return nsipc(NSREQ_CLOSE);
}

int
nsipc_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
	nsipcbuf.connect.req_s = s;
	memmove(&nsipcbuf.connect.req_name, name, namelen);
	nsipcbuf.connect.req_namelen = namelen;
	return nsipc(NSREQ_CONNECT);
}

int
nsipc_listen(int s, int backlog)
{
	nsipcbuf.listen.req_s = s;
	nsipcbuf.listen.req_backlog = backlog;
	return nsipc(NSREQ_LISTEN);
}

int
nsipc_recv(int s, void *mem, int len, unsigned int flags)
{
	int r;

	nsipcbuf.recv.req_s = s;
	nsipcbuf.recv.req_len = len;
	nsipcbuf.recv.req_flags = flags;

	if ((r = nsipc(NSREQ_RECV)) >= 0) {
		assert(r < 1600 && r <= len);
		memmove(mem, nsipcbuf.recvRet.ret_buf, r);
	}

	return r;
}

int
nsipc_send(int s, const void *buf, int size, unsigned int flags)
{
	nsipcbuf.send.req_s = s;
	assert(size < 1600);
	memmove(&nsipcbuf.send.req_buf, buf, size);
	nsipcbuf.send.req_size = size;
	nsipcbuf.send.req_flags = flags;
	return nsipc(NSREQ_SEND);
}

int
nsipc_socket(int domain, int type, int protocol)
{
  802aa6:	55                   	push   %ebp
  802aa7:	89 e5                	mov    %esp,%ebp
  802aa9:	83 ec 08             	sub    $0x8,%esp
	nsipcbuf.socket.req_domain = domain;
  802aac:	8b 45 08             	mov    0x8(%ebp),%eax
  802aaf:	a3 00 70 81 00       	mov    %eax,0x817000
	nsipcbuf.socket.req_type = type;
  802ab4:	8b 45 0c             	mov    0xc(%ebp),%eax
  802ab7:	a3 04 70 81 00       	mov    %eax,0x817004
	nsipcbuf.socket.req_protocol = protocol;
  802abc:	8b 45 10             	mov    0x10(%ebp),%eax
  802abf:	a3 08 70 81 00       	mov    %eax,0x817008
	return nsipc(NSREQ_SOCKET);
  802ac4:	b8 09 00 00 00       	mov    $0x9,%eax
  802ac9:	e8 92 ff ff ff       	call   802a60 <nsipc>
}
  802ace:	c9                   	leave  
  802acf:	c3                   	ret    

00802ad0 <nsipc_listen>:
  802ad0:	55                   	push   %ebp
  802ad1:	89 e5                	mov    %esp,%ebp
  802ad3:	83 ec 08             	sub    $0x8,%esp
  802ad6:	8b 45 08             	mov    0x8(%ebp),%eax
  802ad9:	a3 00 70 81 00       	mov    %eax,0x817000
  802ade:	8b 45 0c             	mov    0xc(%ebp),%eax
  802ae1:	a3 04 70 81 00       	mov    %eax,0x817004
  802ae6:	b8 06 00 00 00       	mov    $0x6,%eax
  802aeb:	e8 70 ff ff ff       	call   802a60 <nsipc>
  802af0:	c9                   	leave  
  802af1:	c3                   	ret    

00802af2 <nsipc_close>:
  802af2:	55                   	push   %ebp
  802af3:	89 e5                	mov    %esp,%ebp
  802af5:	83 ec 08             	sub    $0x8,%esp
  802af8:	8b 45 08             	mov    0x8(%ebp),%eax
  802afb:	a3 00 70 81 00       	mov    %eax,0x817000
  802b00:	b8 04 00 00 00       	mov    $0x4,%eax
  802b05:	e8 56 ff ff ff       	call   802a60 <nsipc>
  802b0a:	c9                   	leave  
  802b0b:	c3                   	ret    

00802b0c <nsipc_shutdown>:
  802b0c:	55                   	push   %ebp
  802b0d:	89 e5                	mov    %esp,%ebp
  802b0f:	83 ec 08             	sub    $0x8,%esp
  802b12:	8b 45 08             	mov    0x8(%ebp),%eax
  802b15:	a3 00 70 81 00       	mov    %eax,0x817000
  802b1a:	8b 45 0c             	mov    0xc(%ebp),%eax
  802b1d:	a3 04 70 81 00       	mov    %eax,0x817004
  802b22:	b8 03 00 00 00       	mov    $0x3,%eax
  802b27:	e8 34 ff ff ff       	call   802a60 <nsipc>
  802b2c:	c9                   	leave  
  802b2d:	c3                   	ret    

00802b2e <nsipc_send>:
  802b2e:	55                   	push   %ebp
  802b2f:	89 e5                	mov    %esp,%ebp
  802b31:	53                   	push   %ebx
  802b32:	83 ec 14             	sub    $0x14,%esp
  802b35:	8b 5d 10             	mov    0x10(%ebp),%ebx
  802b38:	8b 45 08             	mov    0x8(%ebp),%eax
  802b3b:	a3 00 70 81 00       	mov    %eax,0x817000
  802b40:	81 fb 3f 06 00 00    	cmp    $0x63f,%ebx
  802b46:	7e 24                	jle    802b6c <nsipc_send+0x3e>
  802b48:	c7 44 24 0c 4c 28 81 	movl   $0x81284c,0xc(%esp)
  802b4f:	00 
  802b50:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  802b57:	00 
  802b58:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
  802b5f:	00 
  802b60:	c7 04 24 6d 28 81 00 	movl   $0x81286d,(%esp)
  802b67:	e8 20 dd ff ff       	call   80088c <_panic>
  802b6c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  802b70:	8b 45 0c             	mov    0xc(%ebp),%eax
  802b73:	89 44 24 04          	mov    %eax,0x4(%esp)
  802b77:	c7 04 24 0c 70 81 00 	movl   $0x81700c,(%esp)
  802b7e:	e8 67 e6 ff ff       	call   8011ea <memmove>
  802b83:	89 1d 04 70 81 00    	mov    %ebx,0x817004
  802b89:	8b 45 14             	mov    0x14(%ebp),%eax
  802b8c:	a3 08 70 81 00       	mov    %eax,0x817008
  802b91:	b8 08 00 00 00       	mov    $0x8,%eax
  802b96:	e8 c5 fe ff ff       	call   802a60 <nsipc>
  802b9b:	83 c4 14             	add    $0x14,%esp
  802b9e:	5b                   	pop    %ebx
  802b9f:	5d                   	pop    %ebp
  802ba0:	c3                   	ret    

00802ba1 <nsipc_recv>:
  802ba1:	55                   	push   %ebp
  802ba2:	89 e5                	mov    %esp,%ebp
  802ba4:	83 ec 18             	sub    $0x18,%esp
  802ba7:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  802baa:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  802bad:	8b 75 10             	mov    0x10(%ebp),%esi
  802bb0:	8b 45 08             	mov    0x8(%ebp),%eax
  802bb3:	a3 00 70 81 00       	mov    %eax,0x817000
  802bb8:	89 35 04 70 81 00    	mov    %esi,0x817004
  802bbe:	8b 45 14             	mov    0x14(%ebp),%eax
  802bc1:	a3 08 70 81 00       	mov    %eax,0x817008
  802bc6:	b8 07 00 00 00       	mov    $0x7,%eax
  802bcb:	e8 90 fe ff ff       	call   802a60 <nsipc>
  802bd0:	89 c3                	mov    %eax,%ebx
  802bd2:	85 c0                	test   %eax,%eax
  802bd4:	78 47                	js     802c1d <nsipc_recv+0x7c>
  802bd6:	3d 3f 06 00 00       	cmp    $0x63f,%eax
  802bdb:	7f 05                	jg     802be2 <nsipc_recv+0x41>
  802bdd:	39 c6                	cmp    %eax,%esi
  802bdf:	90                   	nop    
  802be0:	7d 24                	jge    802c06 <nsipc_recv+0x65>
  802be2:	c7 44 24 0c 79 28 81 	movl   $0x812879,0xc(%esp)
  802be9:	00 
  802bea:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  802bf1:	00 
  802bf2:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
  802bf9:	00 
  802bfa:	c7 04 24 6d 28 81 00 	movl   $0x81286d,(%esp)
  802c01:	e8 86 dc ff ff       	call   80088c <_panic>
  802c06:	89 44 24 08          	mov    %eax,0x8(%esp)
  802c0a:	c7 44 24 04 00 70 81 	movl   $0x817000,0x4(%esp)
  802c11:	00 
  802c12:	8b 45 0c             	mov    0xc(%ebp),%eax
  802c15:	89 04 24             	mov    %eax,(%esp)
  802c18:	e8 cd e5 ff ff       	call   8011ea <memmove>
  802c1d:	89 d8                	mov    %ebx,%eax
  802c1f:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  802c22:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  802c25:	89 ec                	mov    %ebp,%esp
  802c27:	5d                   	pop    %ebp
  802c28:	c3                   	ret    

00802c29 <nsipc_connect>:
  802c29:	55                   	push   %ebp
  802c2a:	89 e5                	mov    %esp,%ebp
  802c2c:	53                   	push   %ebx
  802c2d:	83 ec 14             	sub    $0x14,%esp
  802c30:	8b 5d 10             	mov    0x10(%ebp),%ebx
  802c33:	8b 45 08             	mov    0x8(%ebp),%eax
  802c36:	a3 00 70 81 00       	mov    %eax,0x817000
  802c3b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  802c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
  802c42:	89 44 24 04          	mov    %eax,0x4(%esp)
  802c46:	c7 04 24 04 70 81 00 	movl   $0x817004,(%esp)
  802c4d:	e8 98 e5 ff ff       	call   8011ea <memmove>
  802c52:	89 1d 14 70 81 00    	mov    %ebx,0x817014
  802c58:	b8 05 00 00 00       	mov    $0x5,%eax
  802c5d:	e8 fe fd ff ff       	call   802a60 <nsipc>
  802c62:	83 c4 14             	add    $0x14,%esp
  802c65:	5b                   	pop    %ebx
  802c66:	5d                   	pop    %ebp
  802c67:	c3                   	ret    

00802c68 <nsipc_bind>:
  802c68:	55                   	push   %ebp
  802c69:	89 e5                	mov    %esp,%ebp
  802c6b:	53                   	push   %ebx
  802c6c:	83 ec 14             	sub    $0x14,%esp
  802c6f:	8b 5d 10             	mov    0x10(%ebp),%ebx
  802c72:	8b 45 08             	mov    0x8(%ebp),%eax
  802c75:	a3 00 70 81 00       	mov    %eax,0x817000
  802c7a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  802c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
  802c81:	89 44 24 04          	mov    %eax,0x4(%esp)
  802c85:	c7 04 24 04 70 81 00 	movl   $0x817004,(%esp)
  802c8c:	e8 59 e5 ff ff       	call   8011ea <memmove>
  802c91:	89 1d 14 70 81 00    	mov    %ebx,0x817014
  802c97:	b8 02 00 00 00       	mov    $0x2,%eax
  802c9c:	e8 bf fd ff ff       	call   802a60 <nsipc>
  802ca1:	83 c4 14             	add    $0x14,%esp
  802ca4:	5b                   	pop    %ebx
  802ca5:	5d                   	pop    %ebp
  802ca6:	c3                   	ret    

00802ca7 <nsipc_accept>:
  802ca7:	55                   	push   %ebp
  802ca8:	89 e5                	mov    %esp,%ebp
  802caa:	53                   	push   %ebx
  802cab:	83 ec 14             	sub    $0x14,%esp
  802cae:	8b 45 08             	mov    0x8(%ebp),%eax
  802cb1:	a3 00 70 81 00       	mov    %eax,0x817000
  802cb6:	b8 01 00 00 00       	mov    $0x1,%eax
  802cbb:	e8 a0 fd ff ff       	call   802a60 <nsipc>
  802cc0:	89 c3                	mov    %eax,%ebx
  802cc2:	85 c0                	test   %eax,%eax
  802cc4:	78 27                	js     802ced <nsipc_accept+0x46>
  802cc6:	a1 10 70 81 00       	mov    0x817010,%eax
  802ccb:	89 44 24 08          	mov    %eax,0x8(%esp)
  802ccf:	c7 44 24 04 00 70 81 	movl   $0x817000,0x4(%esp)
  802cd6:	00 
  802cd7:	8b 45 0c             	mov    0xc(%ebp),%eax
  802cda:	89 04 24             	mov    %eax,(%esp)
  802cdd:	e8 08 e5 ff ff       	call   8011ea <memmove>
  802ce2:	8b 15 10 70 81 00    	mov    0x817010,%edx
  802ce8:	8b 45 10             	mov    0x10(%ebp),%eax
  802ceb:	89 10                	mov    %edx,(%eax)
  802ced:	89 d8                	mov    %ebx,%eax
  802cef:	83 c4 14             	add    $0x14,%esp
  802cf2:	5b                   	pop    %ebx
  802cf3:	5d                   	pop    %ebp
  802cf4:	c3                   	ret    
	...

00802d00 <free>:
}

void
free(void *v)
{
  802d00:	55                   	push   %ebp
  802d01:	89 e5                	mov    %esp,%ebp
  802d03:	57                   	push   %edi
  802d04:	56                   	push   %esi
  802d05:	53                   	push   %ebx
  802d06:	83 ec 1c             	sub    $0x1c,%esp
  802d09:	8b 45 08             	mov    0x8(%ebp),%eax
	uint8_t *c;
	uint32_t *ref;

	if (v == 0)
  802d0c:	85 c0                	test   %eax,%eax
  802d0e:	0f 84 b8 00 00 00    	je     802dcc <free+0xcc>
		return;
	assert(mbegin <= (uint8_t*) v && (uint8_t*) v < mend);
  802d14:	8b 3d e4 28 81 00    	mov    0x8128e4,%edi
  802d1a:	39 c7                	cmp    %eax,%edi
  802d1c:	77 0a                	ja     802d28 <free+0x28>
  802d1e:	8b 35 e8 28 81 00    	mov    0x8128e8,%esi
  802d24:	39 f0                	cmp    %esi,%eax
  802d26:	72 24                	jb     802d4c <free+0x4c>
  802d28:	c7 44 24 0c 90 28 81 	movl   $0x812890,0xc(%esp)
  802d2f:	00 
  802d30:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  802d37:	00 
  802d38:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
  802d3f:	00 
  802d40:	c7 04 24 be 28 81 00 	movl   $0x8128be,(%esp)
  802d47:	e8 40 db ff ff       	call   80088c <_panic>

	c = ROUNDDOWN(v, PGSIZE);
  802d4c:	89 c3                	mov    %eax,%ebx
  802d4e:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
  802d54:	eb 42                	jmp    802d98 <free+0x98>

	while (vpt[VPN(c)] & PTE_CONTINUED) {
		sys_page_unmap(0, c);
  802d56:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802d5a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802d61:	e8 e8 e8 ff ff       	call   80164e <sys_page_unmap>
		c += PGSIZE;
  802d66:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		assert(mbegin <= c && c < mend);
  802d6c:	39 df                	cmp    %ebx,%edi
  802d6e:	77 04                	ja     802d74 <free+0x74>
  802d70:	39 de                	cmp    %ebx,%esi
  802d72:	77 24                	ja     802d98 <free+0x98>
  802d74:	c7 44 24 0c cb 28 81 	movl   $0x8128cb,0xc(%esp)
  802d7b:	00 
  802d7c:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  802d83:	00 
  802d84:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
  802d8b:	00 
  802d8c:	c7 04 24 be 28 81 00 	movl   $0x8128be,(%esp)
  802d93:	e8 f4 da ff ff       	call   80088c <_panic>
  802d98:	89 d8                	mov    %ebx,%eax
  802d9a:	c1 e8 0c             	shr    $0xc,%eax
  802d9d:	8b 04 85 00 00 40 ef 	mov    0xef400000(,%eax,4),%eax
  802da4:	f6 c4 04             	test   $0x4,%ah
  802da7:	75 ad                	jne    802d56 <free+0x56>
	}

	/*
	 * c is just a piece of this page, so dec the ref count
	 * and maybe free the page.
	 */
	ref = (uint32_t*) (c + PGSIZE - 4);
	if (--(*ref) == 0)
  802da9:	8b 83 fc 0f 00 00    	mov    0xffc(%ebx),%eax
  802daf:	83 e8 01             	sub    $0x1,%eax
  802db2:	89 83 fc 0f 00 00    	mov    %eax,0xffc(%ebx)
  802db8:	85 c0                	test   %eax,%eax
  802dba:	75 10                	jne    802dcc <free+0xcc>
		sys_page_unmap(0, c);	
  802dbc:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  802dc0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802dc7:	e8 82 e8 ff ff       	call   80164e <sys_page_unmap>
}
  802dcc:	83 c4 1c             	add    $0x1c,%esp
  802dcf:	5b                   	pop    %ebx
  802dd0:	5e                   	pop    %esi
  802dd1:	5f                   	pop    %edi
  802dd2:	5d                   	pop    %ebp
  802dd3:	c3                   	ret    

00802dd4 <malloc>:
  802dd4:	55                   	push   %ebp
  802dd5:	89 e5                	mov    %esp,%ebp
  802dd7:	57                   	push   %edi
  802dd8:	56                   	push   %esi
  802dd9:	53                   	push   %ebx
  802dda:	83 ec 1c             	sub    $0x1c,%esp
  802ddd:	83 3d d0 83 81 00 00 	cmpl   $0x0,0x8183d0
  802de4:	75 0a                	jne    802df0 <malloc+0x1c>
  802de6:	a1 e4 28 81 00       	mov    0x8128e4,%eax
  802deb:	a3 d0 83 81 00       	mov    %eax,0x8183d0
  802df0:	8b 45 08             	mov    0x8(%ebp),%eax
  802df3:	83 c0 03             	add    $0x3,%eax
  802df6:	83 e0 fc             	and    $0xfffffffc,%eax
  802df9:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  802dfc:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  802e01:	0f 87 80 01 00 00    	ja     802f87 <malloc+0x1b3>
  802e07:	8b 0d d0 83 81 00    	mov    0x8183d0,%ecx
  802e0d:	f7 c1 ff 0f 00 00    	test   $0xfff,%ecx
  802e13:	74 4a                	je     802e5f <malloc+0x8b>
  802e15:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
  802e18:	89 ca                	mov    %ecx,%edx
  802e1a:	c1 ea 0c             	shr    $0xc,%edx
  802e1d:	8d 43 03             	lea    0x3(%ebx),%eax
  802e20:	c1 e8 0c             	shr    $0xc,%eax
  802e23:	39 c2                	cmp    %eax,%edx
  802e25:	75 1c                	jne    802e43 <malloc+0x6f>
  802e27:	8d 81 ff 0f 00 00    	lea    0xfff(%ecx),%eax
  802e2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  802e32:	83 40 fc 01          	addl   $0x1,0xfffffffc(%eax)
  802e36:	89 ca                	mov    %ecx,%edx
  802e38:	89 1d d0 83 81 00    	mov    %ebx,0x8183d0
  802e3e:	e9 49 01 00 00       	jmp    802f8c <malloc+0x1b8>
  802e43:	89 0c 24             	mov    %ecx,(%esp)
  802e46:	e8 b5 fe ff ff       	call   802d00 <free>
  802e4b:	a1 d0 83 81 00       	mov    0x8183d0,%eax
  802e50:	05 00 10 00 00       	add    $0x1000,%eax
  802e55:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  802e5a:	a3 d0 83 81 00       	mov    %eax,0x8183d0
  802e5f:	8b 35 e8 28 81 00    	mov    0x8128e8,%esi
  802e65:	8b 1d d0 83 81 00    	mov    0x8183d0,%ebx
  802e6b:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  802e72:	eb 06                	jmp    802e7a <malloc+0xa6>
  802e74:	8b 1d e4 28 81 00    	mov    0x8128e4,%ebx
  802e7a:	8b 7d f0             	mov    0xfffffff0(%ebp),%edi
  802e7d:	83 c7 04             	add    $0x4,%edi
  802e80:	89 da                	mov    %ebx,%edx
  802e82:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
  802e85:	39 cb                	cmp    %ecx,%ebx
  802e87:	0f 83 cc 00 00 00    	jae    802f59 <malloc+0x185>
  802e8d:	39 f3                	cmp    %esi,%ebx
  802e8f:	72 06                	jb     802e97 <malloc+0xc3>
  802e91:	eb 3e                	jmp    802ed1 <malloc+0xfd>
  802e93:	39 d6                	cmp    %edx,%esi
  802e95:	76 3a                	jbe    802ed1 <malloc+0xfd>
  802e97:	89 d0                	mov    %edx,%eax
  802e99:	c1 e8 16             	shr    $0x16,%eax
  802e9c:	8b 04 85 00 d0 7b ef 	mov    0xef7bd000(,%eax,4),%eax
  802ea3:	a8 01                	test   $0x1,%al
  802ea5:	74 10                	je     802eb7 <malloc+0xe3>
  802ea7:	89 d0                	mov    %edx,%eax
  802ea9:	c1 e8 0c             	shr    $0xc,%eax
  802eac:	8b 04 85 00 00 40 ef 	mov    0xef400000(,%eax,4),%eax
  802eb3:	a8 01                	test   $0x1,%al
  802eb5:	75 1a                	jne    802ed1 <malloc+0xfd>
  802eb7:	81 c2 00 10 00 00    	add    $0x1000,%edx
  802ebd:	39 d1                	cmp    %edx,%ecx
  802ebf:	77 d2                	ja     802e93 <malloc+0xbf>
  802ec1:	89 1d d0 83 81 00    	mov    %ebx,0x8183d0
  802ec7:	be 00 00 00 00       	mov    $0x0,%esi
  802ecc:	e9 96 00 00 00       	jmp    802f67 <malloc+0x193>
  802ed1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
  802ed7:	3b 1d e8 28 81 00    	cmp    0x8128e8,%ebx
  802edd:	75 9b                	jne    802e7a <malloc+0xa6>
  802edf:	83 45 ec 01          	addl   $0x1,0xffffffec(%ebp)
  802ee3:	83 7d ec 02          	cmpl   $0x2,0xffffffec(%ebp)
  802ee7:	75 8b                	jne    802e74 <malloc+0xa0>
  802ee9:	a1 e4 28 81 00       	mov    0x8128e4,%eax
  802eee:	a3 d0 83 81 00       	mov    %eax,0x8183d0
  802ef3:	ba 00 00 00 00       	mov    $0x0,%edx
  802ef8:	e9 8f 00 00 00       	jmp    802f8c <malloc+0x1b8>
  802efd:	8d 9e 00 10 00 00    	lea    0x1000(%esi),%ebx
  802f03:	39 fb                	cmp    %edi,%ebx
  802f05:	19 c0                	sbb    %eax,%eax
  802f07:	25 00 04 00 00       	and    $0x400,%eax
  802f0c:	83 c8 07             	or     $0x7,%eax
  802f0f:	89 44 24 08          	mov    %eax,0x8(%esp)
  802f13:	8d 83 00 f0 ff ff    	lea    0xfffff000(%ebx),%eax
  802f19:	03 05 d0 83 81 00    	add    0x8183d0,%eax
  802f1f:	89 44 24 04          	mov    %eax,0x4(%esp)
  802f23:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802f2a:	e8 db e7 ff ff       	call   80170a <sys_page_alloc>
  802f2f:	85 c0                	test   %eax,%eax
  802f31:	79 32                	jns    802f65 <malloc+0x191>
  802f33:	85 f6                	test   %esi,%esi
  802f35:	78 50                	js     802f87 <malloc+0x1b3>
  802f37:	89 f0                	mov    %esi,%eax
  802f39:	03 05 d0 83 81 00    	add    0x8183d0,%eax
  802f3f:	89 44 24 04          	mov    %eax,0x4(%esp)
  802f43:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  802f4a:	e8 ff e6 ff ff       	call   80164e <sys_page_unmap>
  802f4f:	81 ee 00 10 00 00    	sub    $0x1000,%esi
  802f55:	78 30                	js     802f87 <malloc+0x1b3>
  802f57:	eb de                	jmp    802f37 <malloc+0x163>
  802f59:	89 1d d0 83 81 00    	mov    %ebx,0x8183d0
  802f5f:	90                   	nop    
  802f60:	e9 62 ff ff ff       	jmp    802ec7 <malloc+0xf3>
  802f65:	89 de                	mov    %ebx,%esi
  802f67:	39 fe                	cmp    %edi,%esi
  802f69:	72 92                	jb     802efd <malloc+0x129>
  802f6b:	a1 d0 83 81 00       	mov    0x8183d0,%eax
  802f70:	c7 44 30 fc 02 00 00 	movl   $0x2,0xfffffffc(%eax,%esi,1)
  802f77:	00 
  802f78:	89 c2                	mov    %eax,%edx
  802f7a:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  802f7d:	8d 04 08             	lea    (%eax,%ecx,1),%eax
  802f80:	a3 d0 83 81 00       	mov    %eax,0x8183d0
  802f85:	eb 05                	jmp    802f8c <malloc+0x1b8>
  802f87:	ba 00 00 00 00       	mov    $0x0,%edx
  802f8c:	89 d0                	mov    %edx,%eax
  802f8e:	83 c4 1c             	add    $0x1c,%esp
  802f91:	5b                   	pop    %ebx
  802f92:	5e                   	pop    %esi
  802f93:	5f                   	pop    %edi
  802f94:	5d                   	pop    %ebp
  802f95:	c3                   	ret    
	...

00802f98 <set_pgfault_handler>:
// _pgfault_upcall routine when a page fault occurs.
//
void
set_pgfault_handler(void (*handler)(struct UTrapframe *utf))
{
  802f98:	55                   	push   %ebp
  802f99:	89 e5                	mov    %esp,%ebp
  802f9b:	83 ec 18             	sub    $0x18,%esp
	int r;

	if (_pgfault_handler == 0) {
  802f9e:	83 3d bc e5 b3 00 00 	cmpl   $0x0,0xb3e5bc
  802fa5:	75 6a                	jne    803011 <set_pgfault_handler+0x79>
		// First time through!
		// LAB 4: Your code here.
		env=(struct Env*)&envs[ENVX(sys_getenvid())];
  802fa7:	e8 f1 e7 ff ff       	call   80179d <sys_getenvid>
  802fac:	25 ff 03 00 00       	and    $0x3ff,%eax
  802fb1:	6b c0 7c             	imul   $0x7c,%eax,%eax
  802fb4:	05 00 00 c0 ee       	add    $0xeec00000,%eax
  802fb9:	a3 b4 e5 b3 00       	mov    %eax,0xb3e5b4
		if((r=sys_page_alloc(env->env_id,(void*)(UXSTACKTOP-PGSIZE),PTE_W|PTE_U|PTE_P))<0)
  802fbe:	8b 40 4c             	mov    0x4c(%eax),%eax
  802fc1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  802fc8:	00 
  802fc9:	c7 44 24 04 00 f0 bf 	movl   $0xeebff000,0x4(%esp)
  802fd0:	ee 
  802fd1:	89 04 24             	mov    %eax,(%esp)
  802fd4:	e8 31 e7 ff ff       	call   80170a <sys_page_alloc>
  802fd9:	85 c0                	test   %eax,%eax
  802fdb:	79 1c                	jns    802ff9 <set_pgfault_handler+0x61>
		{
			panic("Alloc a page for an exception stack failed");
  802fdd:	c7 44 24 08 ec 28 81 	movl   $0x8128ec,0x8(%esp)
  802fe4:	00 
  802fe5:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  802fec:	00 
  802fed:	c7 04 24 17 29 81 00 	movl   $0x812917,(%esp)
  802ff4:	e8 93 d8 ff ff       	call   80088c <_panic>
		}
		sys_env_set_pgfault_upcall(env->env_id,(void*)_pgfault_upcall);
  802ff9:	a1 b4 e5 b3 00       	mov    0xb3e5b4,%eax
  802ffe:	8b 40 4c             	mov    0x4c(%eax),%eax
  803001:	c7 44 24 04 1c 30 80 	movl   $0x80301c,0x4(%esp)
  803008:	00 
  803009:	89 04 24             	mov    %eax,(%esp)
  80300c:	e8 23 e5 ff ff       	call   801534 <sys_env_set_pgfault_upcall>
		//panic("set_pgfault_handler not implemented");
	}

	// Save handler pointer for assembly to call.
	_pgfault_handler = handler;
  803011:	8b 45 08             	mov    0x8(%ebp),%eax
  803014:	a3 bc e5 b3 00       	mov    %eax,0xb3e5bc
}
  803019:	c9                   	leave  
  80301a:	c3                   	ret    
	...

0080301c <_pgfault_upcall>:
.text
.globl _pgfault_upcall
_pgfault_upcall:
	// Call the C page fault handler.
	pushl %esp			// function argument: pointer to UTF
  80301c:	54                   	push   %esp
	movl _pgfault_handler, %eax
  80301d:	a1 bc e5 b3 00       	mov    0xb3e5bc,%eax
	call *%eax
  803022:	ff d0                	call   *%eax
	addl $4, %esp			// pop function argument
  803024:	83 c4 04             	add    $0x4,%esp
	
	// Now the C page fault handler has returned and you must return
	// to the trap time state.
	// Push trap-time %eip onto the trap-time stack.
	//
	// Explanation:
	//   We must prepare the trap-time stack for our eventual return to
	//   re-execute the instruction that faulted.
	//   Unfortunately, we can't return directly from the exception stack:
	//   We can't call 'jmp', since that requires that we load the address
	//   into a register, and all registers must have their trap-time
	//   values after the return.
	//   We can't call 'ret' from the exception stack either, since if we
	//   did, %esp would have the wrong value.
	//   So instead, we push the trap-time %eip onto the *trap-time* stack!
	//   Below we'll switch to that stack and call 'ret', which will
	//   restore %eip to its pre-fault value.
	//
	//   In the case of a recursive fault on the exception stack,
	//   note that the word we're pushing now will fit in the
	//   blank word that the kernel reserved for us.
	//
	// Throughout the remaining code, think carefully about what
	// registers are available for intermediate calculations.  You
	// may find that you have to rearrange your code in non-obvious
	// ways as registers become unavailable as scratch space.
	//
	// LAB 4: Your code here.这个有点难度，需要认真编写
	movl  0x28(%esp),%eax //把utf->utf_eip入栈
  803027:	8b 44 24 28          	mov    0x28(%esp),%eax
	pushl %eax
  80302b:	50                   	push   %eax
	movl %esp,%eax
  80302c:	89 e0                	mov    %esp,%eax
	movl 0x34(%eax),%esp  //切换到用户普通栈，压入utf_eip
  80302e:	8b 60 34             	mov    0x34(%eax),%esp
	pushl (%eax)
  803031:	ff 30                	pushl  (%eax)
	movl %eax,%esp	     //切到用户异常栈
  803033:	89 c4                	mov    %eax,%esp
	subl $0x4,0x34(%esp) //将utf->utf_esp减去4,指向返回地址,后面不能算术操作，就在这算
  803035:	83 6c 24 34 04       	subl   $0x4,0x34(%esp)
	// Restore the trap-time registers.  After you do this, you
	// can no longer modify any general-purpose registers.
	// LAB 4: Your code here.
	addl $0xc,%esp     //恢复通用寄存器
  80303a:	83 c4 0c             	add    $0xc,%esp
	popal
  80303d:	61                   	popa   
	// Restore eflags from the stack.  After you do this, you can
	// no longer use arithmetic operations or anything else that
	// modifies eflags.
	// LAB 4: Your code here.
	addl $0x4,%esp  //恢复eflags
  80303e:	83 c4 04             	add    $0x4,%esp
	popfl          //在用户态，该指令能否修改eflags?可以的
  803041:	9d                   	popf   
		       //执行完这个指令后，不能进行算术任何算术运算哦，否则eflags里面的值不对
	// Switch back to the adjusted trap-time stack.
	// LAB 4: Your code here.
	popl %esp     //切换到用户普通栈，用户从异常处理退出后，需要继续使用该栈
  803042:	5c                   	pop    %esp
	// Return to re-execute the instruction that faulted.
	// LAB 4: Your code here.
	ret
  803043:	c3                   	ret    
	...

00803050 <get_socket>:
 * @return struct lwip_socket for the socket or NULL if not found
 */
static struct lwip_socket *
get_socket(int s)
{
  803050:	55                   	push   %ebp
  803051:	89 e5                	mov    %esp,%ebp
  struct lwip_socket *sock;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  803053:	83 f8 1f             	cmp    $0x1f,%eax
  803056:	76 11                	jbe    803069 <get_socket+0x19>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s));
    set_errno(EBADF);
  803058:	c7 05 60 e5 b3 00 09 	movl   $0x9,0xb3e560
  80305f:	00 00 00 
  803062:	ba 00 00 00 00       	mov    $0x0,%edx
  803067:	eb 24                	jmp    80308d <get_socket+0x3d>
    return NULL;
  }

  sock = &sockets[s];
  803069:	8d 04 80             	lea    (%eax,%eax,4),%eax
  80306c:	c1 e0 02             	shl    $0x2,%eax
  80306f:	8d 90 e0 83 81 00    	lea    0x8183e0(%eax),%edx

  if (!sock->conn) {
  803075:	83 b8 e0 83 81 00 00 	cmpl   $0x0,0x8183e0(%eax)
  80307c:	75 0f                	jne    80308d <get_socket+0x3d>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s));
    set_errno(EBADF);
  80307e:	c7 05 60 e5 b3 00 09 	movl   $0x9,0xb3e560
  803085:	00 00 00 
  803088:	ba 00 00 00 00       	mov    $0x0,%edx
    return NULL;
  }

  return sock;
}
  80308d:	89 d0                	mov    %edx,%eax
  80308f:	5d                   	pop    %ebp
  803090:	c3                   	ret    

00803091 <lwip_ioctl>:

/**
 * Allocate a new socket for a given netconn.
 *
 * @param newconn the netconn for which to allocate a socket
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn)
{
  int i;

  /* Protect socket array */
  sys_sem_wait(socksem);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
    if (!sockets[i].conn) {
      sockets[i].conn       = newconn;
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
      sockets[i].rcvevent   = 0;
      sockets[i].sendevent  = 1; /* TCP send buf is empty */
      sockets[i].flags      = 0;
      sockets[i].err        = 0;
      sys_sem_signal(socksem);
      return i;
    }
  }
  sys_sem_signal(socksem);
  return -1;
}

/* Below this, the well-known socket functions are implemented.
 * Use google.com or opengroup.org to get a good description :-)
 *
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  struct lwip_socket *sock, *nsock;
  struct netconn *newconn;
  struct ip_addr naddr;
  u16_t port;
  int newsock;
  struct sockaddr_in sin;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  if (!sock)
    return -1;

  newconn = netconn_accept(sock->conn);
  if (!newconn) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) failed, err=%d\n", s, sock->conn->err));
    sock_set_errno(sock, err_to_errno(sock->conn->err));
    return -1;
  }

  /* get the IP address and port of the remote host */
  err = netconn_peer(newconn, &naddr, &port);
  if (err != ERR_OK) {
    netconn_delete(newconn);
    sock_set_errno(sock, err_to_errno(err));
    return -1;
  }

  memset(&sin, 0, sizeof(sin));
  sin.sin_len = sizeof(sin);
  sin.sin_family = AF_INET;
  sin.sin_port = htons(port);
  sin.sin_addr.s_addr = naddr.addr;

  if (*addrlen > sizeof(sin))
    *addrlen = sizeof(sin);

  SMEMCPY(addr, &sin, *addrlen);

  newsock = alloc_socket(newconn);
  if (newsock == -1) {
    netconn_delete(newconn);
    sock_set_errno(sock, ENFILE);
    return -1;
  }
  LWIP_ASSERT("invalid socket index", (newsock >= 0) && (newsock < NUM_SOCKETS));
  newconn->callback = event_callback;
  nsock = &sockets[newsock];
  LWIP_ASSERT("invalid socket pointer", nsock != NULL);

  sys_sem_wait(socksem);
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  nsock->rcvevent += -1 - newconn->socket;
  newconn->socket = newsock;
  sys_sem_signal(socksem);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d addr=", s, newsock));
  //ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u\n", port));

  sock_set_errno(sock, 0);
  return newsock;
}

int
lwip_bind(int s, struct sockaddr *name, socklen_t namelen)
{
  struct lwip_socket *sock;
  struct ip_addr local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  if (!sock)
    return -1;

  LWIP_ERROR("lwip_bind: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
             ((((struct sockaddr_in *)name)->sin_family) == AF_INET)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  local_addr.addr = ((struct sockaddr_in *)name)->sin_addr.s_addr;
  local_port = ((struct sockaddr_in *)name)->sin_port;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d, addr=", s));
  //ip_addr_debug_print(SOCKETS_DEBUG, &local_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u)\n", ntohs(local_port)));

  err = netconn_bind(sock->conn, &local_addr, ntohs(local_port));

  if (err != ERR_OK) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
    return -1;
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  return 0;
}

int
lwip_close(int s)
{
  struct lwip_socket *sock;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  if (!sock) {
    return -1;
  }

  netconn_delete(sock->conn);

  sys_sem_wait(socksem);
  if (sock->lastdata) {
    netbuf_delete(sock->lastdata);
  }
  sock->lastdata   = NULL;
  sock->lastoffset = 0;
  sock->conn       = NULL;
  sock_set_errno(sock, 0);
  sys_sem_signal(socksem);
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  struct lwip_socket *sock;
  err_t err;

  sock = get_socket(s);
  if (!sock)
    return -1;

  LWIP_ERROR("lwip_connect: invalid address", ((namelen == sizeof(struct sockaddr_in)) &&
             ((((struct sockaddr_in *)name)->sin_family) == AF_INET)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (((struct sockaddr_in *)name)->sin_family == AF_UNSPEC) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  } else {
    struct ip_addr remote_addr;
    u16_t remote_port;

    remote_addr.addr = ((struct sockaddr_in *)name)->sin_addr.s_addr;
    remote_port = ((struct sockaddr_in *)name)->sin_port;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, addr=", s));
    //ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u)\n", ntohs(remote_port)));

    err = netconn_connect(sock->conn, &remote_addr, ntohs(remote_port));
  }

  if (err != ERR_OK) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
    return -1;
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  return 0;
}

/**
 * Set a socket into listen mode.
 * The socket may not have been used for another connection previously.
 *
 * @param s the socket to set to listening mode
 * @param backlog (ATTENTION: need TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  struct lwip_socket *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  if (!sock)
    return -1;

  /* limit the "backlog" parameter to fit in an u8_t */
  if (backlog < 0) {
    backlog = 0;
  }
  if (backlog > 0xff) {
    backlog = 0xff;
  }

  err = netconn_listen_with_backlog(sock->conn, backlog);

  if (err != ERR_OK) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
    return -1;
  }

  sock_set_errno(sock, 0);
  return 0;
}

int
lwip_recvfrom(int s, void *mem, int len, unsigned int flags,
        struct sockaddr *from, socklen_t *fromlen)
{
  struct lwip_socket *sock;
  struct netbuf      *buf;
  u16_t               buflen, copylen, off = 0;
  struct ip_addr     *addr;
  u16_t               port;
  u8_t                done = 0;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %d, 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  if (!sock)
    return -1;

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", (void*)sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
      buf = sock->lastdata;
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || (sock->flags & O_NONBLOCK)) && !sock->rcvevent) {
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        sock_set_errno(sock, EWOULDBLOCK);
        return -1;
      }

      /* No data was left from the previous operation, so we try to get
      some from the network. */
      sock->lastdata = buf = netconn_recv(sock->conn);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv netbuf=%p\n", (void*)buf));

      if (!buf) {
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL!\n", s));
        sock_set_errno(sock, (((sock->conn->pcb.ip!=NULL) && (sock->conn->err==ERR_OK))?ETIMEDOUT:err_to_errno(sock->conn->err)));
        return 0;
      }
    }

    buflen = netbuf_len(buf);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%d len=%d off=%d sock->lastoffset=%d\n", buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;

    if (len > buflen) {
      copylen = buflen;
    } else {
      copylen = len;
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    netbuf_copy_partial(buf, (u8_t*)mem + off, copylen, sock->lastoffset);

    off += copylen;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      len -= copylen;
      if ( (len <= 0) || (buf->p->flags & PBUF_FLAG_PUSH) || !sock->rcvevent) {
        done = 1;
      }
    } else {
      done = 1;
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK)==0) {
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((sock->conn->type == NETCONN_TCP) && (buflen - copylen > 0)) {
        sock->lastdata = buf;
        sock->lastoffset += copylen;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", (void*)buf));
      } else {
        sock->lastdata = NULL;
        sock->lastoffset = 0;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", (void*)buf));
        netbuf_delete(buf);
      }
    } else {
      done = 1;
    }
  } while (!done);

  /* Check to see from where the data was.*/
  if (from && fromlen) {
    struct sockaddr_in sin;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
      netconn_getaddr(sock->conn, addr, &port, 0);
    } else {
      addr = netbuf_fromaddr(buf);
      port = netbuf_fromport(buf);
    }

    memset(&sin, 0, sizeof(sin));
    sin.sin_len = sizeof(sin);
    sin.sin_family = AF_INET;
    sin.sin_port = htons(port);
    sin.sin_addr.s_addr = addr->addr;

    if (*fromlen > sizeof(sin))
      *fromlen = sizeof(sin);

    SMEMCPY(from, &sin, *fromlen);

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
    //ip_addr_debug_print(SOCKETS_DEBUG, addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u len=%u\n", port, off));
  } else {
#if SOCKETS_DEBUG
    struct sockaddr_in sin;

    if (netconn_type(sock->conn) == NETCONN_TCP) {
      addr = (struct ip_addr*)&(sin.sin_addr.s_addr);
      netconn_getaddr(sock->conn, addr, &port, 0);
    } else {
      addr = netbuf_fromaddr(buf);
      port = netbuf_fromport(buf);
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
    //ip_addr_debug_print(SOCKETS_DEBUG, addr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u len=%u\n", port, off));
#endif /*  SOCKETS_DEBUG */
  }

  sock_set_errno(sock, 0);
  return off;
}

int
lwip_read(int s, void *mem, int len)
{
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, int len, unsigned int flags)
{
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
}

int
lwip_send(int s, const void *data, int size, unsigned int flags)
{
  struct lwip_socket *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%d, flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  if (!sock)
    return -1;

  if (sock->conn->type!=NETCONN_TCP) {
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
#else
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  err = netconn_write(sock->conn, data, size, NETCONN_COPY | ((flags & MSG_MORE)?NETCONN_MORE:0));

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d size=%d\n", s, err, size));
  sock_set_errno(sock, err_to_errno(err));
  return (err==ERR_OK?size:-1);
}

int
lwip_sendto(int s, const void *data, int size, unsigned int flags,
       struct sockaddr *to, socklen_t tolen)
{
  struct lwip_socket *sock;
  struct ip_addr remote_addr;
  int err;
#if !LWIP_TCPIP_CORE_LOCKING
  struct netbuf buf;
  u16_t remote_port;
#endif

  sock = get_socket(s);
  if (!sock)
    return -1;

  if (sock->conn->type==NETCONN_TCP) {
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
#else
    sock_set_errno(sock, err_to_errno(ERR_ARG));
    return -1;
#endif /* LWIP_TCP */
  }

  LWIP_ASSERT("lwip_sendto: size must fit in u16_t",
              ((size >= 0) && (size <= 0xffff)));
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
             ((tolen == sizeof(struct sockaddr_in)) &&
             ((((struct sockaddr_in *)to)->sin_family) == AF_INET))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

#if LWIP_TCPIP_CORE_LOCKING
  /* Should only be consider like a sample or a simple way to experiment this option (no check of "to" field...) */
  { struct pbuf* p;
  
    p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
    if (p == NULL) {
      err = ERR_MEM;
    } else {
      p->payload = (void*)data;
      p->len = p->tot_len = size;
      
      remote_addr.addr = ((struct sockaddr_in *)to)->sin_addr.s_addr;
      
      LOCK_TCPIP_CORE();
      if (sock->conn->type==NETCONN_RAW) {
        err = sock->conn->err = raw_sendto(sock->conn->pcb.raw, p, &remote_addr);
      } else {
        err = sock->conn->err = udp_sendto(sock->conn->pcb.udp, p, &remote_addr, ntohs(((struct sockaddr_in *)to)->sin_port));
      }
      UNLOCK_TCPIP_CORE();
      
      pbuf_free(p);
    }
  }
#else
  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  if (to) {
    remote_addr.addr = ((struct sockaddr_in *)to)->sin_addr.s_addr;
    remote_port      = ntohs(((struct sockaddr_in *)to)->sin_port);
    buf.addr         = &remote_addr;
    buf.port         = remote_port;
  } else {
    remote_addr.addr = 0;
    remote_port      = 0;
    buf.addr         = NULL;
    buf.port         = 0;
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_sendto(%d, data=%p, size=%d, flags=0x%x to=",
              s, data, size, flags));
  //ip_addr_debug_print(SOCKETS_DEBUG, &remote_addr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%u\n", remote_port));
    
  /* make the buffer point to the data that should be sent */
  if ((err = netbuf_ref(&buf, data, size)) == ERR_OK) {
    /* send the data */
    err = netconn_send(sock->conn, &buf);
  }

  /* deallocated the buffer */
  if (buf.p != NULL) {
    pbuf_free(buf.p);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
  sock_set_errno(sock, err_to_errno(err));
  return (err==ERR_OK?size:-1);
}

int
lwip_socket(int domain, int type, int protocol)
{
  struct netconn *conn;
  int i;

  LWIP_UNUSED_ARG(domain);

  /* create a netconn */
  switch (type) {
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(NETCONN_RAW, (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  case SOCK_DGRAM:
    conn = netconn_new_with_callback( (protocol == IPPROTO_UDPLITE) ?
                 NETCONN_UDPLITE : NETCONN_UDP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  case SOCK_STREAM:
    conn = netconn_new_with_callback(NETCONN_TCP, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
    return -1;
  }

  if (!conn) {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
    return -1;
  }

  i = alloc_socket(conn);

  if (i == -1) {
    netconn_delete(conn);
    set_errno(ENFILE);
    return -1;
  }
  conn->socket = i;
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
}

int
lwip_write(int s, const void *data, int size)
{
  return lwip_send(s, data, size, 0);
}

/**
 * Go through the readset and writeset lists and see which socket of the sockets
 * set in the sets has events. On return, readset, writeset and exceptset have
 * the sockets enabled that had events.
 *
 * exceptset is not used for now!!!
 *
 * @param maxfdp1 the highest socket index in the sets
 * @param readset in: set of sockets to check for read events;
 *                out: set of sockets that had read events
 * @param writeset in: set of sockets to check for write events;
 *                 out: set of sockets that had write events
 * @param exceptset not yet implemented
 * @return number of sockets that had events (read+write)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset)
{
  int i, nready = 0;
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_socket *p_sock;
  
  FD_ZERO(&lreadset);
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);
  
  /* Go through each socket in each list to count number of sockets which
  currently match */
  for(i = 0; i < maxfdp1; i++) {
    if (FD_ISSET(i, readset)) {
      /* See if netconn of this socket is ready for read */
      p_sock = get_socket(i);
      if (p_sock && (p_sock->lastdata || p_sock->rcvevent)) {
        FD_SET(i, &lreadset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
      }
    }
    if (FD_ISSET(i, writeset)) {
      /* See if netconn of this socket is ready for write */
      p_sock = get_socket(i);
      if (p_sock && p_sock->sendevent) {
        FD_SET(i, &lwriteset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
      }
    }
  }
  *readset = lreadset;
  *writeset = lwriteset;
  FD_ZERO(exceptset);
  
  return nready;
}


/**
 * Processing exceptset is not yet implemented.
 */
int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
               struct timeval *timeout)
{
  int i;
  int nready;
  fd_set lreadset, lwriteset, lexceptset;
  u32_t msectimeout;
  struct lwip_select_cb select_cb;
  struct lwip_select_cb *p_selcb;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%ld tvusec=%ld)\n",
                  maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                  timeout ? timeout->tv_sec : -1L, timeout ? timeout->tv_usec : -1L));

  select_cb.next = 0;
  select_cb.readset = readset;
  select_cb.writeset = writeset;
  select_cb.exceptset = exceptset;
  select_cb.sem_signalled = 0;

  /* Protect ourselves searching through the list */
  sys_sem_wait(selectsem);

  if (readset)
    lreadset = *readset;
  else
    FD_ZERO(&lreadset);
  if (writeset)
    lwriteset = *writeset;
  else
    FD_ZERO(&lwriteset);
  if (exceptset)
    lexceptset = *exceptset;
  else
    FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
      sys_sem_signal(selectsem);
      if (readset)
        FD_ZERO(readset);
      if (writeset)
        FD_ZERO(writeset);
      if (exceptset)
        FD_ZERO(exceptset);
  
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: no timeout, returning 0\n"));
      set_errno(0);
  
      return 0;
    }
    
    /* add our semaphore to list */
    /* We don't actually need any dynamic memory. Our entry on the
     * list is only valid while we are in this function, so it's ok
     * to use local variables */
    
    select_cb.sem = sys_sem_new(0);
    /* Note that we are still protected */
    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
    select_cb_list = &select_cb;
    
    /* Now we can safely unprotect */
    sys_sem_signal(selectsem);
    
    /* Now just wait to be woken */
    if (timeout == 0)
      /* Wait forever */
      msectimeout = 0;
    else {
      msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
      if(msectimeout == 0)
        msectimeout = 1;
    }
    
    i = sys_sem_wait_timeout(select_cb.sem, msectimeout);
    
    /* Take us off the list */
    sys_sem_wait(selectsem);
    if (select_cb_list == &select_cb)
      select_cb_list = select_cb.next;
    else
      for (p_selcb = select_cb_list; p_selcb; p_selcb = p_selcb->next) {
        if (p_selcb->next == &select_cb) {
          p_selcb->next = select_cb.next;
          break;
        }
      }
    
    sys_sem_signal(selectsem);
    
    sys_sem_free(select_cb.sem);
    if (i == 0)  {
      /* Timeout */
      if (readset)
        FD_ZERO(readset);
      if (writeset)
        FD_ZERO(writeset);
      if (exceptset)
        FD_ZERO(exceptset);
  
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
      set_errno(0);
  
      return 0;
    }
    
    if (readset)
      lreadset = *readset;
    else
      FD_ZERO(&lreadset);
    if (writeset)
      lwriteset = *writeset;
    else
      FD_ZERO(&lwriteset);
    if (exceptset)
      lexceptset = *exceptset;
    else
      FD_ZERO(&lexceptset);
    
    /* See what's set */
    nready = lwip_selscan(maxfdp1, &lreadset, &lwriteset, &lexceptset);
  } else
    sys_sem_signal(selectsem);
  
  if (readset)
    *readset = lreadset;
  if (writeset)
    *writeset = lwriteset;
  if (exceptset)
    *exceptset = lexceptset;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  set_errno(0);
  
  return nready;
}

/**
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  int s;
  struct lwip_socket *sock;
  struct lwip_select_cb *scb;

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
    s = conn->socket;
    if (s < 0) {
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      sys_sem_wait(socksem);
      if (conn->socket < 0) {
        if (evt == NETCONN_EVT_RCVPLUS) {
          conn->socket--;
        }
        sys_sem_signal(socksem);
        return;
      }
      sys_sem_signal(socksem);
    }

    sock = get_socket(s);
    if (!sock) {
      return;
    }
  } else {
    return;
  }

  sys_sem_wait(selectsem);
  /* Set event as required */
  switch (evt) {
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
      break;
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
      break;
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
      break;
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
      break;
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
  }
  sys_sem_signal(selectsem);

  /* Now decide if anyone is waiting for this socket */
  /* NOTE: This code is written this way to protect the select link list
     but to avoid a deadlock situation by releasing socksem before
     signalling for the select. This means we need to go through the list
     multiple times ONLY IF a select was actually waiting. We go through
     the list the number of waiting select calls + 1. This list is
     expected to be small. */
  while (1) {
    sys_sem_wait(selectsem);
    for (scb = select_cb_list; scb; scb = scb->next) {
      if (scb->sem_signalled == 0) {
        /* Test this select call for our socket */
        if (scb->readset && FD_ISSET(s, scb->readset))
          if (sock->rcvevent)
            break;
        if (scb->writeset && FD_ISSET(s, scb->writeset))
          if (sock->sendevent)
            break;
      }
    }
    if (scb) {
      scb->sem_signalled = 1;
      sys_sem_signal(selectsem);
      sys_sem_signal(scb->sem);
    } else {
      sys_sem_signal(selectsem);
      break;
    }
  }
}

/**
 * Unimplemented: Close one end of a full-duplex connection.
 * Currently, the full connection is closed.
 */
int
lwip_shutdown(int s, int how)
{
  LWIP_UNUSED_ARG(how);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));
  return lwip_close(s); /* XXX temporary hack until proper implementation */
}

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  struct lwip_socket *sock;
  struct sockaddr_in sin;
  struct ip_addr naddr;

  sock = get_socket(s);
  if (!sock)
    return -1;

  memset(&sin, 0, sizeof(sin));
  sin.sin_len = sizeof(sin);
  sin.sin_family = AF_INET;

  /* get the IP address and port */
  netconn_getaddr(sock->conn, &naddr, &sin.sin_port, local);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  //ip_addr_debug_print(SOCKETS_DEBUG, &naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%d)\n", sin.sin_port));

  sin.sin_port = htons(sin.sin_port);
  sin.sin_addr.s_addr = naddr.addr;

  if (*namelen > sizeof(sin))
    *namelen = sizeof(sin);

  SMEMCPY(name, &sin, *namelen);
  sock_set_errno(sock, 0);
  return 0;
}

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  return lwip_getaddrname(s, name, namelen, 0);
}

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  return lwip_getaddrname(s, name, namelen, 1);
}

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  err_t err = ERR_OK;
  struct lwip_socket *sock = get_socket(s);
  struct lwip_setgetsockopt_data data;

  if (!sock)
    return -1;

  if ((NULL == optval) || (NULL == optlen)) {
    sock_set_errno(sock, EFAULT);
    return -1;
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
       
    case SO_ACCEPTCONN:
    case SO_BROADCAST:
    /* UNIMPL case SO_DEBUG: */
    /* UNIMPL case SO_DONTROUTE: */
    case SO_ERROR:
    case SO_KEEPALIVE:
    /* UNIMPL case SO_CONTIMEO: */
    /* UNIMPL case SO_SNDTIMEO: */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
#endif /* LWIP_SO_RCVBUF */
    /* UNIMPL case SO_OOBINLINE: */
    /* UNIMPL case SO_SNDBUF: */
    /* UNIMPL case SO_RCVLOWAT: */
    /* UNIMPL case SO_SNDLOWAT: */
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    case SO_TYPE:
    /* UNIMPL case SO_USELOOPBACK: */
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;

    case SO_NO_CHECK:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
                     
/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (*optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
#if LWIP_IGMP
    case IP_MULTICAST_TTL:
      if (*optlen < sizeof(u8_t)) {
        err = EINVAL;
      }
      break;
    case IP_MULTICAST_IF:
      if (*optlen < sizeof(struct in_addr)) {
        err = EINVAL;
      }
      break;
#endif /* LWIP_IGMP */

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
         
#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (*optlen < sizeof(int)) {
      err = EINVAL;
      break;
    }
    
    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
      return 0;

    switch (optname) {
    case TCP_NODELAY:
    case TCP_KEEPALIVE:
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
#endif /* LWIP_TCP */
#if LWIP_UDP && LWIP_UDPLITE
/* Level: IPPROTO_UDPLITE */
  case IPPROTO_UDPLITE:
    if (*optlen < sizeof(int)) {
      err = EINVAL;
      break;
    }
    
    /* If this is no UDP lite socket, ignore any options. */
    if (sock->conn->type != NETCONN_UDPLITE)
      return 0;

    switch (optname) {
    case UDPLITE_SEND_CSCOV:
    case UDPLITE_RECV_CSCOV:
      break;
       
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP && LWIP_UDPLITE*/
/* UNDEFINED LEVEL */
  default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
  }  /* switch */

   
  if (err != ERR_OK) {
    sock_set_errno(sock, err);
    return -1;
  }

  /* Now do the actual option processing */
  data.sock = sock;
  data.level = level;
  data.optname = optname;
  data.optval = optval;
  data.optlen = optlen;
  data.err = err;
  tcpip_callback(lwip_getsockopt_internal, &data);
  sys_arch_sem_wait(sock->conn->op_completed, 0);
  /* maybe lwip_getsockopt_internal has changed err */
  err = data.err;

  sock_set_errno(sock, err);
  return err ? -1 : 0;
}

static void
lwip_getsockopt_internal(void *arg)
{
  struct lwip_socket *sock;
#ifdef LWIP_DEBUG
  int s;
#endif /* LWIP_DEBUG */
  int level, optname;
  void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
  sock = data->sock;
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
  optname = data->optname;
  optval = data->optval;

  switch (level) {
   
/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {

    /* The option flags */
    case SO_ACCEPTCONN:
    case SO_BROADCAST:
    /* UNIMPL case SO_DEBUG: */
    /* UNIMPL case SO_DONTROUTE: */
    case SO_KEEPALIVE:
    /* UNIMPL case SO_OOBINCLUDE: */
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /*case SO_USELOOPBACK: UNIMPL */
      *(int*)optval = sock->conn->pcb.ip->so_options & optname;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;

    case SO_TYPE:
      switch (NETCONNTYPE_GROUP(sock->conn->type)) {
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
        break;
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
        break;
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
        break;
      default: /* unrecognized socket type */
        *(int*)optval = sock->conn->type;
        LWIP_DEBUGF(SOCKETS_DEBUG,
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (sock->conn->type) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;

    case SO_ERROR:
      if (sock->err == 0) {
        sock_set_errno(sock, err_to_errno(sock->conn->err));
      } 
      *(int *)optval = sock->err;
      sock->err = 0;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;

#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      *(int *)optval = sock->conn->recv_timeout;
      break;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      *(int *)optval = sock->conn->recv_bufsize;
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
      break;
#endif /* LWIP_UDP*/
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      *(int*)optval = sock->conn->pcb.ip->ttl;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
    case IP_TOS:
      *(int*)optval = sock->conn->pcb.ip->tos;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
#if LWIP_IGMP
    case IP_MULTICAST_TTL:
      *(u8_t*)optval = sock->conn->pcb.ip->ttl;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
    case IP_MULTICAST_IF:
      ((struct in_addr*) optval)->s_addr = sock->conn->pcb.udp->multicast_ip.addr;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%x\n",
                  s, *(u32_t *)optval));
      break;
#endif /* LWIP_IGMP */
    }  /* switch (optname) */
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
    case TCP_NODELAY:
      *(int*)optval = (sock->conn->pcb.tcp->flags & TF_NODELAY);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
#endif /* LWIP_TCP_KEEPALIVE */

    }  /* switch (optname) */
    break;
#endif /* LWIP_TCP */
#if LWIP_UDP && LWIP_UDPLITE
  /* Level: IPPROTO_UDPLITE */
  case IPPROTO_UDPLITE:
    switch (optname) {
    case UDPLITE_SEND_CSCOV:
      *(int*)optval = sock->conn->pcb.udp->chksum_len_tx;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",
                  s, (*(int*)optval)) );
      break;
    case UDPLITE_RECV_CSCOV:
      *(int*)optval = sock->conn->pcb.udp->chksum_len_rx;
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",
                  s, (*(int*)optval)) );
      break;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  } /* switch (level) */
  sys_sem_signal(sock->conn->op_completed);
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  struct lwip_socket *sock = get_socket(s);
  int err = ERR_OK;
  struct lwip_setgetsockopt_data data;

  if (!sock)
    return -1;

  if (NULL == optval) {
    sock_set_errno(sock, EFAULT);
    return -1;
  }

  /* Do length and type checks for the various options first, to keep it readable. */
  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {

    case SO_BROADCAST:
    /* UNIMPL case SO_DEBUG: */
    /* UNIMPL case SO_DONTROUTE: */
    case SO_KEEPALIVE:
    /* UNIMPL case case SO_CONTIMEO: */
    /* UNIMPL case case SO_SNDTIMEO: */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
#endif /* LWIP_SO_RCVBUF */
    /* UNIMPL case SO_OOBINLINE: */
    /* UNIMPL case SO_SNDBUF: */
    /* UNIMPL case SO_RCVLOWAT: */
    /* UNIMPL case SO_SNDLOWAT: */
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
    case SO_NO_CHECK:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
#if LWIP_UDP
      if ((sock->conn->type != NETCONN_UDP) ||
          ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0)) {
        /* this flag is only available for UDP, not for UDP lite */
        err = EAFNOSUPPORT;
      }
#endif /* LWIP_UDP */
      break;
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    /* UNIMPL case IP_HDRINCL: */
    /* UNIMPL case IP_RCVDSTADDR: */
    /* UNIMPL case IP_RCVIF: */
    case IP_TTL:
    case IP_TOS:
      if (optlen < sizeof(int)) {
        err = EINVAL;
      }
      break;
#if LWIP_IGMP
    case IP_MULTICAST_TTL:
      if (optlen < sizeof(u8_t)) {
        err = EINVAL;
      }
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
        err = EAFNOSUPPORT;
      }
      break;
    case IP_MULTICAST_IF:
      if (optlen < sizeof(struct in_addr)) {
        err = EINVAL;
      }
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
        err = EAFNOSUPPORT;
      }
      break;
    case IP_ADD_MEMBERSHIP:
    case IP_DROP_MEMBERSHIP:
      if (optlen < sizeof(struct ip_mreq)) {
        err = EINVAL;
      }
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP) {
        err = EAFNOSUPPORT;
      }
      break;
#endif /* LWIP_IGMP */
      default:
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                    s, optname));
        err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    if (optlen < sizeof(int)) {
      err = EINVAL;
      break;
    }

    /* If this is no TCP socket, ignore any options. */
    if (sock->conn->type != NETCONN_TCP)
      return 0;

    switch (optname) {
    case TCP_NODELAY:
    case TCP_KEEPALIVE:
#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
    case TCP_KEEPINTVL:
    case TCP_KEEPCNT:
#endif /* LWIP_TCP_KEEPALIVE */
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
#endif /* LWIP_TCP */
#if LWIP_UDP && LWIP_UDPLITE
/* Level: IPPROTO_UDPLITE */
  case IPPROTO_UDPLITE:
    if (optlen < sizeof(int)) {
      err = EINVAL;
      break;
    }

    /* If this is no UDP lite socket, ignore any options. */
    if (sock->conn->type != NETCONN_UDPLITE)
      return 0;

    switch (optname) {
    case UDPLITE_SEND_CSCOV:
    case UDPLITE_RECV_CSCOV:
      break;

    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP && LWIP_UDPLITE */
/* UNDEFINED LEVEL */
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  }  /* switch (level) */


  if (err != ERR_OK) {
    sock_set_errno(sock, err);
    return -1;
  }


  /* Now do the actual option processing */
  data.sock = sock;
  data.level = level;
  data.optname = optname;
  data.optval = (void*)optval;
  data.optlen = &optlen;
  data.err = err;
  tcpip_callback(lwip_setsockopt_internal, &data);
  sys_arch_sem_wait(sock->conn->op_completed, 0);
  /* maybe lwip_setsockopt_internal has changed err */
  err = data.err;

  sock_set_errno(sock, err);
  return err ? -1 : 0;
}

static void
lwip_setsockopt_internal(void *arg)
{
  struct lwip_socket *sock;
#ifdef LWIP_DEBUG
  int s;
#endif /* LWIP_DEBUG */
  int level, optname;
  const void *optval;
  struct lwip_setgetsockopt_data *data;

  LWIP_ASSERT("arg != NULL", arg != NULL);

  data = (struct lwip_setgetsockopt_data*)arg;
  sock = data->sock;
#ifdef LWIP_DEBUG
  s = data->s;
#endif /* LWIP_DEBUG */
  level = data->level;
  optname = data->optname;
  optval = data->optval;

  switch (level) {

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {

    /* The option flags */
    case SO_BROADCAST:
    /* UNIMPL case SO_DEBUG: */
    /* UNIMPL case SO_DONTROUTE: */
    case SO_KEEPALIVE:
    /* UNIMPL case SO_OOBINCLUDE: */
#if SO_REUSE
    case SO_REUSEADDR:
    case SO_REUSEPORT:
#endif /* SO_REUSE */
    /* UNIMPL case SO_USELOOPBACK: */
      if (*(int*)optval) {
        sock->conn->pcb.ip->so_options |= optname;
      } else {
        sock->conn->pcb.ip->so_options &= ~optname;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(int*)optval?"on":"off")));
      break;
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      sock->conn->recv_timeout = ( *(int*)optval );
      break;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      sock->conn->recv_bufsize = ( *(int*)optval );
      break;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_UDP
    case SO_NO_CHECK:
      if (*(int*)optval) {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
#endif /* LWIP_UDP */
    }  /* switch (optname) */
    break;

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
    case IP_TTL:
      sock->conn->pcb.ip->ttl = (u8_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %u\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
    case IP_TOS:
      sock->conn->pcb.ip->tos = (u8_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %u\n",
                  s, sock->conn->pcb.ip->tos));
      break;
#if LWIP_IGMP
    case IP_MULTICAST_TTL:
      sock->conn->pcb.udp->ttl = (u8_t)(*(u8_t*)optval);
      break;
    case IP_MULTICAST_IF:
      sock->conn->pcb.udp->multicast_ip.addr = ((struct in_addr*) optval)->s_addr;
      break;
    case IP_ADD_MEMBERSHIP:
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        struct ip_mreq *imr = (struct ip_mreq *)optval;
        if(optname == IP_ADD_MEMBERSHIP){
          data->err = igmp_joingroup((struct ip_addr*)&(imr->imr_interface.s_addr), (struct ip_addr*)&(imr->imr_multiaddr.s_addr));
        } else {
          data->err = igmp_leavegroup((struct ip_addr*)&(imr->imr_interface.s_addr), (struct ip_addr*)&(imr->imr_multiaddr.s_addr));
        }
        if(data->err != ERR_OK) {
          data->err = EADDRNOTAVAIL;
        }
      }
      break;
#endif /* LWIP_IGMP */
    }  /* switch (optname) */
    break;

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    switch (optname) {
    case TCP_NODELAY:
      if (*(int*)optval) {
        sock->conn->pcb.tcp->flags |= TF_NODELAY;
      } else {
        sock->conn->pcb.tcp->flags &= ~TF_NODELAY;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(int *)optval)?"on":"off") );
      break;
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %lu\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %lu\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %lu\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(int*)optval);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %lu\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
#endif /* LWIP_TCP_KEEPALIVE */

    }  /* switch (optname) */
    break;
#endif /* LWIP_TCP*/
#if LWIP_UDP && LWIP_UDPLITE
  /* Level: IPPROTO_UDPLITE */
  case IPPROTO_UDPLITE:
    switch (optname) {
    case UDPLITE_SEND_CSCOV:
      if ((*(int*)optval != 0) && (*(int*)optval < 8)) {
        /* don't allow illegal values! */
        sock->conn->pcb.udp->chksum_len_tx = 8;
      } else {
        sock->conn->pcb.udp->chksum_len_tx = *(int*)optval;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",
                  s, (*(int*)optval)) );
      break;
    case UDPLITE_RECV_CSCOV:
      if ((*(int*)optval != 0) && (*(int*)optval < 8)) {
        /* don't allow illegal values! */
        sock->conn->pcb.udp->chksum_len_rx = 8;
      } else {
        sock->conn->pcb.udp->chksum_len_rx = *(int*)optval;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",
                  s, (*(int*)optval)) );
      break;
    }  /* switch (optname) */
    break;
#endif /* LWIP_UDP */
  }  /* switch (level) */
  sys_sem_signal(sock->conn->op_completed);
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
  803091:	55                   	push   %ebp
  803092:	89 e5                	mov    %esp,%ebp
  803094:	83 ec 08             	sub    $0x8,%esp
  803097:	89 1c 24             	mov    %ebx,(%esp)
  80309a:	89 74 24 04          	mov    %esi,0x4(%esp)
  80309e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8030a1:	8b 75 10             	mov    0x10(%ebp),%esi
  struct lwip_socket *sock = get_socket(s);
  8030a4:	8b 45 08             	mov    0x8(%ebp),%eax
  8030a7:	e8 a4 ff ff ff       	call   803050 <get_socket>
  8030ac:	89 c2                	mov    %eax,%edx
  u16_t buflen = 0;

  if (!sock)
  8030ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8030b3:	85 d2                	test   %edx,%edx
  8030b5:	0f 84 ac 00 00 00    	je     803167 <lwip_ioctl+0xd6>
    return -1;

  switch (cmd) {
  8030bb:	81 fb 7e 66 04 80    	cmp    $0x8004667e,%ebx
  8030c1:	74 5f                	je     803122 <lwip_ioctl+0x91>
  8030c3:	81 fb 7f 66 04 40    	cmp    $0x4004667f,%ebx
  8030c9:	0f 85 82 00 00 00    	jne    803151 <lwip_ioctl+0xc0>
  case FIONREAD:
    if (!argp) {
  8030cf:	85 f6                	test   %esi,%esi
  8030d1:	75 18                	jne    8030eb <lwip_ioctl+0x5a>
      sock_set_errno(sock, EINVAL);
  8030d3:	c7 42 10 16 00 00 00 	movl   $0x16,0x10(%edx)
  8030da:	c7 05 60 e5 b3 00 16 	movl   $0x16,0xb3e560
  8030e1:	00 00 00 
  8030e4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8030e9:	eb 7c                	jmp    803167 <lwip_ioctl+0xd6>
      return -1;
    }

    SYS_ARCH_GET(sock->conn->recv_avail, *((u16_t*)argp));
  8030eb:	8b 02                	mov    (%edx),%eax
  8030ed:	0f b7 48 20          	movzwl 0x20(%eax),%ecx
  8030f1:	66 89 0e             	mov    %cx,(%esi)

    /* Check if there is data left from the last recv operation. /maq 041215 */
    if (sock->lastdata) {
  8030f4:	8b 42 04             	mov    0x4(%edx),%eax
  8030f7:	85 c0                	test   %eax,%eax
  8030f9:	74 0f                	je     80310a <lwip_ioctl+0x79>
      buflen = netbuf_len(sock->lastdata);
  8030fb:	8b 00                	mov    (%eax),%eax
      buflen -= sock->lastoffset;

      *((u16_t*)argp) += buflen;
  8030fd:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  803101:	01 c8                	add    %ecx,%eax
  803103:	66 2b 42 08          	sub    0x8(%edx),%ax
  803107:	66 89 06             	mov    %ax,(%esi)
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %u\n", s, argp, *((u16_t*)argp)));
    sock_set_errno(sock, 0);
  80310a:	c7 42 10 00 00 00 00 	movl   $0x0,0x10(%edx)
  803111:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  803118:	00 00 00 
  80311b:	b8 00 00 00 00       	mov    $0x0,%eax
  803120:	eb 45                	jmp    803167 <lwip_ioctl+0xd6>
    return 0;

  case FIONBIO:
    if (argp && *(u32_t*)argp)
  803122:	85 f6                	test   %esi,%esi
  803124:	74 0d                	je     803133 <lwip_ioctl+0xa2>
  803126:	83 3e 00             	cmpl   $0x0,(%esi)
  803129:	74 08                	je     803133 <lwip_ioctl+0xa2>
      sock->flags |= O_NONBLOCK;
  80312b:	66 81 4a 0e 00 08    	orw    $0x800,0xe(%edx)
  803131:	eb 06                	jmp    803139 <lwip_ioctl+0xa8>
    else
      sock->flags &= ~O_NONBLOCK;
  803133:	66 81 62 0e ff f7    	andw   $0xf7ff,0xe(%edx)
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, !!(sock->flags & O_NONBLOCK)));
    sock_set_errno(sock, 0);
  803139:	c7 42 10 00 00 00 00 	movl   $0x0,0x10(%edx)
  803140:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  803147:	00 00 00 
  80314a:	b8 00 00 00 00       	mov    $0x0,%eax
  80314f:	eb 16                	jmp    803167 <lwip_ioctl+0xd6>
    return 0;

  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  803151:	c7 42 10 26 00 00 00 	movl   $0x26,0x10(%edx)
  803158:	c7 05 60 e5 b3 00 26 	movl   $0x26,0xb3e560
  80315f:	00 00 00 
  803162:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    return -1;
  } /* switch (cmd) */
}
  803167:	8b 1c 24             	mov    (%esp),%ebx
  80316a:	8b 74 24 04          	mov    0x4(%esp),%esi
  80316e:	89 ec                	mov    %ebp,%esp
  803170:	5d                   	pop    %ebp
  803171:	c3                   	ret    

00803172 <lwip_setsockopt>:
  803172:	55                   	push   %ebp
  803173:	89 e5                	mov    %esp,%ebp
  803175:	83 ec 38             	sub    $0x38,%esp
  803178:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80317b:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80317e:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  803181:	8b 75 0c             	mov    0xc(%ebp),%esi
  803184:	8b 7d 10             	mov    0x10(%ebp),%edi
  803187:	8b 45 08             	mov    0x8(%ebp),%eax
  80318a:	e8 c1 fe ff ff       	call   803050 <get_socket>
  80318f:	89 c3                	mov    %eax,%ebx
  803191:	85 c0                	test   %eax,%eax
  803193:	0f 84 3a 01 00 00    	je     8032d3 <lwip_setsockopt+0x161>
  803199:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  80319d:	75 1b                	jne    8031ba <lwip_setsockopt+0x48>
  80319f:	c7 40 10 0e 00 00 00 	movl   $0xe,0x10(%eax)
  8031a6:	c7 05 60 e5 b3 00 0e 	movl   $0xe,0xb3e560
  8031ad:	00 00 00 
  8031b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8031b5:	e9 3b 01 00 00       	jmp    8032f5 <lwip_setsockopt+0x183>
  8031ba:	83 fe 06             	cmp    $0x6,%esi
  8031bd:	74 73                	je     803232 <lwip_setsockopt+0xc0>
  8031bf:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
  8031c5:	74 0e                	je     8031d5 <lwip_setsockopt+0x63>
  8031c7:	85 f6                	test   %esi,%esi
  8031c9:	74 50                	je     80321b <lwip_setsockopt+0xa9>
  8031cb:	90                   	nop    
  8031cc:	8d 74 26 00          	lea    0x0(%esi),%esi
  8031d0:	e9 86 00 00 00       	jmp    80325b <lwip_setsockopt+0xe9>
  8031d5:	83 ff 20             	cmp    $0x20,%edi
  8031d8:	74 0d                	je     8031e7 <lwip_setsockopt+0x75>
  8031da:	81 ff 0a 10 00 00    	cmp    $0x100a,%edi
  8031e0:	74 16                	je     8031f8 <lwip_setsockopt+0x86>
  8031e2:	83 ff 08             	cmp    $0x8,%edi
  8031e5:	75 74                	jne    80325b <lwip_setsockopt+0xe9>
  8031e7:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  8031eb:	90                   	nop    
  8031ec:	8d 74 26 00          	lea    0x0(%esi),%esi
  8031f0:	0f 86 eb 00 00 00    	jbe    8032e1 <lwip_setsockopt+0x16f>
  8031f6:	eb 7f                	jmp    803277 <lwip_setsockopt+0x105>
  8031f8:	83 7d 18 04          	cmpl   $0x4,0x18(%ebp)
  8031fc:	19 d2                	sbb    %edx,%edx
  8031fe:	83 e2 16             	and    $0x16,%edx
  803201:	8b 00                	mov    (%eax),%eax
  803203:	83 38 20             	cmpl   $0x20,(%eax)
  803206:	0f 85 df 00 00 00    	jne    8032eb <lwip_setsockopt+0x179>
  80320c:	8b 40 08             	mov    0x8(%eax),%eax
  80320f:	f6 40 10 02          	testb  $0x2,0x10(%eax)
  803213:	0f 85 d2 00 00 00    	jne    8032eb <lwip_setsockopt+0x179>
  803219:	eb 45                	jmp    803260 <lwip_setsockopt+0xee>
  80321b:	8d 47 ff             	lea    0xffffffff(%edi),%eax
  80321e:	83 f8 01             	cmp    $0x1,%eax
  803221:	77 38                	ja     80325b <lwip_setsockopt+0xe9>
  803223:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  803227:	0f 86 b4 00 00 00    	jbe    8032e1 <lwip_setsockopt+0x16f>
  80322d:	8d 76 00             	lea    0x0(%esi),%esi
  803230:	eb 45                	jmp    803277 <lwip_setsockopt+0x105>
  803232:	83 7d 18 03          	cmpl   $0x3,0x18(%ebp)
  803236:	0f 86 a5 00 00 00    	jbe    8032e1 <lwip_setsockopt+0x16f>
  80323c:	8b 00                	mov    (%eax),%eax
  80323e:	83 38 10             	cmpl   $0x10,(%eax)
  803241:	0f 85 93 00 00 00    	jne    8032da <lwip_setsockopt+0x168>
  803247:	8d 47 ff             	lea    0xffffffff(%edi),%eax
  80324a:	ba 5c 00 00 00       	mov    $0x5c,%edx
  80324f:	83 f8 01             	cmp    $0x1,%eax
  803252:	77 10                	ja     803264 <lwip_setsockopt+0xf2>
  803254:	ba 00 00 00 00       	mov    $0x0,%edx
  803259:	eb 05                	jmp    803260 <lwip_setsockopt+0xee>
  80325b:	ba 5c 00 00 00       	mov    $0x5c,%edx
  803260:	85 d2                	test   %edx,%edx
  803262:	74 13                	je     803277 <lwip_setsockopt+0x105>
  803264:	89 53 10             	mov    %edx,0x10(%ebx)
  803267:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  80326d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  803272:	e9 7e 00 00 00       	jmp    8032f5 <lwip_setsockopt+0x183>
  803277:	89 5d d8             	mov    %ebx,0xffffffd8(%ebp)
  80327a:	89 75 e0             	mov    %esi,0xffffffe0(%ebp)
  80327d:	89 7d e4             	mov    %edi,0xffffffe4(%ebp)
  803280:	8b 45 14             	mov    0x14(%ebp),%eax
  803283:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  803286:	8d 45 18             	lea    0x18(%ebp),%eax
  803289:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80328c:	c6 45 f0 00          	movb   $0x0,0xfffffff0(%ebp)
  803290:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  803297:	00 
  803298:	8d 45 d8             	lea    0xffffffd8(%ebp),%eax
  80329b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80329f:	c7 04 24 dc 34 80 00 	movl   $0x8034dc,(%esp)
  8032a6:	e8 98 1b 00 00       	call   804e43 <tcpip_callback_with_block>
  8032ab:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8032b2:	00 
  8032b3:	8b 03                	mov    (%ebx),%eax
  8032b5:	8b 40 10             	mov    0x10(%eax),%eax
  8032b8:	89 04 24             	mov    %eax,(%esp)
  8032bb:	e8 0f a2 00 00       	call   80d4cf <sys_arch_sem_wait>
  8032c0:	0f b6 55 f0          	movzbl 0xfffffff0(%ebp),%edx
  8032c4:	0f be c2             	movsbl %dl,%eax
  8032c7:	89 43 10             	mov    %eax,0x10(%ebx)
  8032ca:	a3 60 e5 b3 00       	mov    %eax,0xb3e560
  8032cf:	84 d2                	test   %dl,%dl
  8032d1:	74 07                	je     8032da <lwip_setsockopt+0x168>
  8032d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8032d8:	eb 1b                	jmp    8032f5 <lwip_setsockopt+0x183>
  8032da:	b8 00 00 00 00       	mov    $0x0,%eax
  8032df:	eb 14                	jmp    8032f5 <lwip_setsockopt+0x183>
  8032e1:	ba 16 00 00 00       	mov    $0x16,%edx
  8032e6:	e9 79 ff ff ff       	jmp    803264 <lwip_setsockopt+0xf2>
  8032eb:	ba 61 00 00 00       	mov    $0x61,%edx
  8032f0:	e9 6f ff ff ff       	jmp    803264 <lwip_setsockopt+0xf2>
  8032f5:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8032f8:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8032fb:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8032fe:	89 ec                	mov    %ebp,%esp
  803300:	5d                   	pop    %ebp
  803301:	c3                   	ret    

00803302 <lwip_getsockopt>:
  803302:	55                   	push   %ebp
  803303:	89 e5                	mov    %esp,%ebp
  803305:	83 ec 38             	sub    $0x38,%esp
  803308:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80330b:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80330e:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  803311:	8b 7d 0c             	mov    0xc(%ebp),%edi
  803314:	8b 75 10             	mov    0x10(%ebp),%esi
  803317:	8b 45 08             	mov    0x8(%ebp),%eax
  80331a:	e8 31 fd ff ff       	call   803050 <get_socket>
  80331f:	89 c3                	mov    %eax,%ebx
  803321:	85 c0                	test   %eax,%eax
  803323:	0f 84 83 01 00 00    	je     8034ac <lwip_getsockopt+0x1aa>
  803329:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  80332d:	74 06                	je     803335 <lwip_getsockopt+0x33>
  80332f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  803333:	75 1b                	jne    803350 <lwip_getsockopt+0x4e>
  803335:	c7 43 10 0e 00 00 00 	movl   $0xe,0x10(%ebx)
  80333c:	c7 05 60 e5 b3 00 0e 	movl   $0xe,0xb3e560
  803343:	00 00 00 
  803346:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80334b:	e9 7f 01 00 00       	jmp    8034cf <lwip_getsockopt+0x1cd>
  803350:	83 ff 06             	cmp    $0x6,%edi
  803353:	0f 84 af 00 00 00    	je     803408 <lwip_getsockopt+0x106>
  803359:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
  80335f:	74 14                	je     803375 <lwip_getsockopt+0x73>
  803361:	85 ff                	test   %edi,%edi
  803363:	0f 84 87 00 00 00    	je     8033f0 <lwip_getsockopt+0xee>
  803369:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  803370:	e9 c0 00 00 00       	jmp    803435 <lwip_getsockopt+0x133>
  803375:	83 fe 20             	cmp    $0x20,%esi
  803378:	74 3e                	je     8033b8 <lwip_getsockopt+0xb6>
  80337a:	83 fe 20             	cmp    $0x20,%esi
  80337d:	8d 76 00             	lea    0x0(%esi),%esi
  803380:	7f 10                	jg     803392 <lwip_getsockopt+0x90>
  803382:	83 fe 02             	cmp    $0x2,%esi
  803385:	74 31                	je     8033b8 <lwip_getsockopt+0xb6>
  803387:	83 fe 08             	cmp    $0x8,%esi
  80338a:	0f 85 a5 00 00 00    	jne    803435 <lwip_getsockopt+0x133>
  803390:	eb 26                	jmp    8033b8 <lwip_getsockopt+0xb6>
  803392:	81 fe 07 10 00 00    	cmp    $0x1007,%esi
  803398:	0f 8c 97 00 00 00    	jl     803435 <lwip_getsockopt+0x133>
  80339e:	81 fe 08 10 00 00    	cmp    $0x1008,%esi
  8033a4:	7e 12                	jle    8033b8 <lwip_getsockopt+0xb6>
  8033a6:	81 fe 0a 10 00 00    	cmp    $0x100a,%esi
  8033ac:	8d 74 26 00          	lea    0x0(%esi),%esi
  8033b0:	0f 85 7f 00 00 00    	jne    803435 <lwip_getsockopt+0x133>
  8033b6:	eb 13                	jmp    8033cb <lwip_getsockopt+0xc9>
  8033b8:	8b 45 18             	mov    0x18(%ebp),%eax
  8033bb:	83 38 03             	cmpl   $0x3,(%eax)
  8033be:	66 90                	xchg   %ax,%ax
  8033c0:	0f 86 f4 00 00 00    	jbe    8034ba <lwip_getsockopt+0x1b8>
  8033c6:	e9 85 00 00 00       	jmp    803450 <lwip_getsockopt+0x14e>
  8033cb:	8b 45 18             	mov    0x18(%ebp),%eax
  8033ce:	83 38 04             	cmpl   $0x4,(%eax)
  8033d1:	19 d2                	sbb    %edx,%edx
  8033d3:	83 e2 16             	and    $0x16,%edx
  8033d6:	8b 03                	mov    (%ebx),%eax
  8033d8:	83 38 20             	cmpl   $0x20,(%eax)
  8033db:	0f 85 e4 00 00 00    	jne    8034c5 <lwip_getsockopt+0x1c3>
  8033e1:	8b 40 08             	mov    0x8(%eax),%eax
  8033e4:	f6 40 10 02          	testb  $0x2,0x10(%eax)
  8033e8:	0f 85 d7 00 00 00    	jne    8034c5 <lwip_getsockopt+0x1c3>
  8033ee:	eb 4a                	jmp    80343a <lwip_getsockopt+0x138>
  8033f0:	8d 46 ff             	lea    0xffffffff(%esi),%eax
  8033f3:	83 f8 01             	cmp    $0x1,%eax
  8033f6:	77 3d                	ja     803435 <lwip_getsockopt+0x133>
  8033f8:	8b 45 18             	mov    0x18(%ebp),%eax
  8033fb:	83 38 03             	cmpl   $0x3,(%eax)
  8033fe:	66 90                	xchg   %ax,%ax
  803400:	0f 86 b4 00 00 00    	jbe    8034ba <lwip_getsockopt+0x1b8>
  803406:	eb 48                	jmp    803450 <lwip_getsockopt+0x14e>
  803408:	8b 45 18             	mov    0x18(%ebp),%eax
  80340b:	83 38 03             	cmpl   $0x3,(%eax)
  80340e:	66 90                	xchg   %ax,%ax
  803410:	0f 86 a4 00 00 00    	jbe    8034ba <lwip_getsockopt+0x1b8>
  803416:	8b 03                	mov    (%ebx),%eax
  803418:	83 38 10             	cmpl   $0x10,(%eax)
  80341b:	0f 85 92 00 00 00    	jne    8034b3 <lwip_getsockopt+0x1b1>
  803421:	8d 46 ff             	lea    0xffffffff(%esi),%eax
  803424:	ba 5c 00 00 00       	mov    $0x5c,%edx
  803429:	83 f8 01             	cmp    $0x1,%eax
  80342c:	77 10                	ja     80343e <lwip_getsockopt+0x13c>
  80342e:	ba 00 00 00 00       	mov    $0x0,%edx
  803433:	eb 05                	jmp    80343a <lwip_getsockopt+0x138>
  803435:	ba 5c 00 00 00       	mov    $0x5c,%edx
  80343a:	84 d2                	test   %dl,%dl
  80343c:	74 12                	je     803450 <lwip_getsockopt+0x14e>
  80343e:	0f be c2             	movsbl %dl,%eax
  803441:	89 43 10             	mov    %eax,0x10(%ebx)
  803444:	a3 60 e5 b3 00       	mov    %eax,0xb3e560
  803449:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80344e:	eb 7f                	jmp    8034cf <lwip_getsockopt+0x1cd>
  803450:	89 5d d8             	mov    %ebx,0xffffffd8(%ebp)
  803453:	89 7d e0             	mov    %edi,0xffffffe0(%ebp)
  803456:	89 75 e4             	mov    %esi,0xffffffe4(%ebp)
  803459:	8b 45 14             	mov    0x14(%ebp),%eax
  80345c:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80345f:	8b 45 18             	mov    0x18(%ebp),%eax
  803462:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  803465:	c6 45 f0 00          	movb   $0x0,0xfffffff0(%ebp)
  803469:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  803470:	00 
  803471:	8d 45 d8             	lea    0xffffffd8(%ebp),%eax
  803474:	89 44 24 04          	mov    %eax,0x4(%esp)
  803478:	c7 04 24 ee 35 80 00 	movl   $0x8035ee,(%esp)
  80347f:	e8 bf 19 00 00       	call   804e43 <tcpip_callback_with_block>
  803484:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80348b:	00 
  80348c:	8b 03                	mov    (%ebx),%eax
  80348e:	8b 40 10             	mov    0x10(%eax),%eax
  803491:	89 04 24             	mov    %eax,(%esp)
  803494:	e8 36 a0 00 00       	call   80d4cf <sys_arch_sem_wait>
  803499:	0f b6 55 f0          	movzbl 0xfffffff0(%ebp),%edx
  80349d:	0f be c2             	movsbl %dl,%eax
  8034a0:	89 43 10             	mov    %eax,0x10(%ebx)
  8034a3:	a3 60 e5 b3 00       	mov    %eax,0xb3e560
  8034a8:	84 d2                	test   %dl,%dl
  8034aa:	74 07                	je     8034b3 <lwip_getsockopt+0x1b1>
  8034ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8034b1:	eb 1c                	jmp    8034cf <lwip_getsockopt+0x1cd>
  8034b3:	b8 00 00 00 00       	mov    $0x0,%eax
  8034b8:	eb 15                	jmp    8034cf <lwip_getsockopt+0x1cd>
  8034ba:	ba 16 00 00 00       	mov    $0x16,%edx
  8034bf:	90                   	nop    
  8034c0:	e9 79 ff ff ff       	jmp    80343e <lwip_getsockopt+0x13c>
  8034c5:	ba 61 00 00 00       	mov    $0x61,%edx
  8034ca:	e9 6f ff ff ff       	jmp    80343e <lwip_getsockopt+0x13c>
  8034cf:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8034d2:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8034d5:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8034d8:	89 ec                	mov    %ebp,%esp
  8034da:	5d                   	pop    %ebp
  8034db:	c3                   	ret    

008034dc <lwip_setsockopt_internal>:
  8034dc:	55                   	push   %ebp
  8034dd:	89 e5                	mov    %esp,%ebp
  8034df:	56                   	push   %esi
  8034e0:	53                   	push   %ebx
  8034e1:	83 ec 10             	sub    $0x10,%esp
  8034e4:	8b 45 08             	mov    0x8(%ebp),%eax
  8034e7:	85 c0                	test   %eax,%eax
  8034e9:	75 1c                	jne    803507 <lwip_setsockopt_internal+0x2b>
  8034eb:	c7 44 24 08 25 29 81 	movl   $0x812925,0x8(%esp)
  8034f2:	00 
  8034f3:	c7 44 24 04 ae 06 00 	movl   $0x6ae,0x4(%esp)
  8034fa:	00 
  8034fb:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  803502:	e8 85 d3 ff ff       	call   80088c <_panic>
  803507:	8b 18                	mov    (%eax),%ebx
  803509:	8b 48 0c             	mov    0xc(%eax),%ecx
  80350c:	8b 70 10             	mov    0x10(%eax),%esi
  80350f:	8b 40 08             	mov    0x8(%eax),%eax
  803512:	83 f8 06             	cmp    $0x6,%eax
  803515:	0f 84 8a 00 00 00    	je     8035a5 <lwip_setsockopt_internal+0xc9>
  80351b:	3d ff 0f 00 00       	cmp    $0xfff,%eax
  803520:	74 09                	je     80352b <lwip_setsockopt_internal+0x4f>
  803522:	85 c0                	test   %eax,%eax
  803524:	74 5d                	je     803583 <lwip_setsockopt_internal+0xa7>
  803526:	e9 af 00 00 00       	jmp    8035da <lwip_setsockopt_internal+0xfe>
  80352b:	83 f9 20             	cmp    $0x20,%ecx
  80352e:	66 90                	xchg   %ax,%ax
  803530:	74 14                	je     803546 <lwip_setsockopt_internal+0x6a>
  803532:	81 f9 0a 10 00 00    	cmp    $0x100a,%ecx
  803538:	74 2e                	je     803568 <lwip_setsockopt_internal+0x8c>
  80353a:	83 f9 08             	cmp    $0x8,%ecx
  80353d:	8d 76 00             	lea    0x0(%esi),%esi
  803540:	0f 85 94 00 00 00    	jne    8035da <lwip_setsockopt_internal+0xfe>
  803546:	83 3e 00             	cmpl   $0x0,(%esi)
  803549:	74 0e                	je     803559 <lwip_setsockopt_internal+0x7d>
  80354b:	8b 03                	mov    (%ebx),%eax
  80354d:	8b 40 08             	mov    0x8(%eax),%eax
  803550:	66 09 48 08          	or     %cx,0x8(%eax)
  803554:	e9 81 00 00 00       	jmp    8035da <lwip_setsockopt_internal+0xfe>
  803559:	8b 03                	mov    (%ebx),%eax
  80355b:	8b 50 08             	mov    0x8(%eax),%edx
  80355e:	89 c8                	mov    %ecx,%eax
  803560:	f7 d0                	not    %eax
  803562:	66 21 42 08          	and    %ax,0x8(%edx)
  803566:	eb 72                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  803568:	83 3e 00             	cmpl   $0x0,(%esi)
  80356b:	74 0b                	je     803578 <lwip_setsockopt_internal+0x9c>
  80356d:	8b 03                	mov    (%ebx),%eax
  80356f:	8b 40 08             	mov    0x8(%eax),%eax
  803572:	80 48 10 01          	orb    $0x1,0x10(%eax)
  803576:	eb 62                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  803578:	8b 03                	mov    (%ebx),%eax
  80357a:	8b 40 08             	mov    0x8(%eax),%eax
  80357d:	80 60 10 fe          	andb   $0xfe,0x10(%eax)
  803581:	eb 57                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  803583:	83 f9 01             	cmp    $0x1,%ecx
  803586:	74 11                	je     803599 <lwip_setsockopt_internal+0xbd>
  803588:	83 f9 02             	cmp    $0x2,%ecx
  80358b:	75 4d                	jne    8035da <lwip_setsockopt_internal+0xfe>
  80358d:	8b 03                	mov    (%ebx),%eax
  80358f:	8b 50 08             	mov    0x8(%eax),%edx
  803592:	8b 06                	mov    (%esi),%eax
  803594:	88 42 0b             	mov    %al,0xb(%edx)
  803597:	eb 41                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  803599:	8b 03                	mov    (%ebx),%eax
  80359b:	8b 50 08             	mov    0x8(%eax),%edx
  80359e:	8b 06                	mov    (%esi),%eax
  8035a0:	88 42 0a             	mov    %al,0xa(%edx)
  8035a3:	eb 35                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  8035a5:	83 f9 01             	cmp    $0x1,%ecx
  8035a8:	74 08                	je     8035b2 <lwip_setsockopt_internal+0xd6>
  8035aa:	83 f9 02             	cmp    $0x2,%ecx
  8035ad:	75 2b                	jne    8035da <lwip_setsockopt_internal+0xfe>
  8035af:	90                   	nop    
  8035b0:	eb 1b                	jmp    8035cd <lwip_setsockopt_internal+0xf1>
  8035b2:	83 3e 00             	cmpl   $0x0,(%esi)
  8035b5:	74 0b                	je     8035c2 <lwip_setsockopt_internal+0xe6>
  8035b7:	8b 03                	mov    (%ebx),%eax
  8035b9:	8b 40 08             	mov    0x8(%eax),%eax
  8035bc:	80 48 20 40          	orb    $0x40,0x20(%eax)
  8035c0:	eb 18                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  8035c2:	8b 03                	mov    (%ebx),%eax
  8035c4:	8b 40 08             	mov    0x8(%eax),%eax
  8035c7:	80 60 20 bf          	andb   $0xbf,0x20(%eax)
  8035cb:	eb 0d                	jmp    8035da <lwip_setsockopt_internal+0xfe>
  8035cd:	8b 03                	mov    (%ebx),%eax
  8035cf:	8b 50 08             	mov    0x8(%eax),%edx
  8035d2:	8b 06                	mov    (%esi),%eax
  8035d4:	89 82 9c 00 00 00    	mov    %eax,0x9c(%edx)
  8035da:	8b 03                	mov    (%ebx),%eax
  8035dc:	8b 40 10             	mov    0x10(%eax),%eax
  8035df:	89 04 24             	mov    %eax,(%esp)
  8035e2:	e8 cb a1 00 00       	call   80d7b2 <sys_sem_signal>
  8035e7:	83 c4 10             	add    $0x10,%esp
  8035ea:	5b                   	pop    %ebx
  8035eb:	5e                   	pop    %esi
  8035ec:	5d                   	pop    %ebp
  8035ed:	c3                   	ret    

008035ee <lwip_getsockopt_internal>:
  8035ee:	55                   	push   %ebp
  8035ef:	89 e5                	mov    %esp,%ebp
  8035f1:	53                   	push   %ebx
  8035f2:	83 ec 14             	sub    $0x14,%esp
  8035f5:	8b 45 08             	mov    0x8(%ebp),%eax
  8035f8:	85 c0                	test   %eax,%eax
  8035fa:	75 1c                	jne    803618 <lwip_getsockopt_internal+0x2a>
  8035fc:	c7 44 24 08 25 29 81 	movl   $0x812925,0x8(%esp)
  803603:	00 
  803604:	c7 44 24 04 38 05 00 	movl   $0x538,0x4(%esp)
  80360b:	00 
  80360c:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  803613:	e8 74 d2 ff ff       	call   80088c <_panic>
  803618:	8b 08                	mov    (%eax),%ecx
  80361a:	8b 50 0c             	mov    0xc(%eax),%edx
  80361d:	8b 58 10             	mov    0x10(%eax),%ebx
  803620:	8b 40 08             	mov    0x8(%eax),%eax
  803623:	83 f8 06             	cmp    $0x6,%eax
  803626:	0f 84 2a 01 00 00    	je     803756 <lwip_getsockopt_internal+0x168>
  80362c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
  803631:	74 12                	je     803645 <lwip_getsockopt_internal+0x57>
  803633:	85 c0                	test   %eax,%eax
  803635:	0f 84 f7 00 00 00    	je     803732 <lwip_getsockopt_internal+0x144>
  80363b:	90                   	nop    
  80363c:	8d 74 26 00          	lea    0x0(%esi),%esi
  803640:	e9 3a 01 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  803645:	83 fa 20             	cmp    $0x20,%edx
  803648:	74 3e                	je     803688 <lwip_getsockopt_internal+0x9a>
  80364a:	83 fa 20             	cmp    $0x20,%edx
  80364d:	8d 76 00             	lea    0x0(%esi),%esi
  803650:	7f 10                	jg     803662 <lwip_getsockopt_internal+0x74>
  803652:	83 fa 02             	cmp    $0x2,%edx
  803655:	74 31                	je     803688 <lwip_getsockopt_internal+0x9a>
  803657:	83 fa 08             	cmp    $0x8,%edx
  80365a:	0f 85 1f 01 00 00    	jne    80377f <lwip_getsockopt_internal+0x191>
  803660:	eb 26                	jmp    803688 <lwip_getsockopt_internal+0x9a>
  803662:	81 fa 08 10 00 00    	cmp    $0x1008,%edx
  803668:	74 30                	je     80369a <lwip_getsockopt_internal+0xac>
  80366a:	81 fa 0a 10 00 00    	cmp    $0x100a,%edx
  803670:	0f 84 ac 00 00 00    	je     803722 <lwip_getsockopt_internal+0x134>
  803676:	81 fa 07 10 00 00    	cmp    $0x1007,%edx
  80367c:	8d 74 26 00          	lea    0x0(%esi),%esi
  803680:	0f 85 f9 00 00 00    	jne    80377f <lwip_getsockopt_internal+0x191>
  803686:	eb 64                	jmp    8036ec <lwip_getsockopt_internal+0xfe>
  803688:	8b 01                	mov    (%ecx),%eax
  80368a:	8b 40 08             	mov    0x8(%eax),%eax
  80368d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  803691:	21 d0                	and    %edx,%eax
  803693:	89 03                	mov    %eax,(%ebx)
  803695:	e9 e5 00 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  80369a:	8b 01                	mov    (%ecx),%eax
  80369c:	8b 00                	mov    (%eax),%eax
  80369e:	89 c2                	mov    %eax,%edx
  8036a0:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  8036a6:	83 fa 20             	cmp    $0x20,%edx
  8036a9:	74 2a                	je     8036d5 <lwip_getsockopt_internal+0xe7>
  8036ab:	83 fa 40             	cmp    $0x40,%edx
  8036ae:	74 07                	je     8036b7 <lwip_getsockopt_internal+0xc9>
  8036b0:	83 fa 10             	cmp    $0x10,%edx
  8036b3:	75 30                	jne    8036e5 <lwip_getsockopt_internal+0xf7>
  8036b5:	eb 0e                	jmp    8036c5 <lwip_getsockopt_internal+0xd7>
  8036b7:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
  8036bd:	8d 76 00             	lea    0x0(%esi),%esi
  8036c0:	e9 ba 00 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  8036c5:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
  8036cb:	90                   	nop    
  8036cc:	8d 74 26 00          	lea    0x0(%esi),%esi
  8036d0:	e9 aa 00 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  8036d5:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
  8036db:	90                   	nop    
  8036dc:	8d 74 26 00          	lea    0x0(%esi),%esi
  8036e0:	e9 9a 00 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  8036e5:	89 03                	mov    %eax,(%ebx)
  8036e7:	e9 93 00 00 00       	jmp    80377f <lwip_getsockopt_internal+0x191>
  8036ec:	83 79 10 00          	cmpl   $0x0,0x10(%ecx)
  8036f0:	75 22                	jne    803714 <lwip_getsockopt_internal+0x126>
  8036f2:	8b 01                	mov    (%ecx),%eax
  8036f4:	0f be 40 0c          	movsbl 0xc(%eax),%eax
  8036f8:	f7 d8                	neg    %eax
  8036fa:	ba 05 00 00 00       	mov    $0x5,%edx
  8036ff:	83 f8 0e             	cmp    $0xe,%eax
  803702:	77 07                	ja     80370b <lwip_getsockopt_internal+0x11d>
  803704:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  80370b:	89 51 10             	mov    %edx,0x10(%ecx)
  80370e:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  803714:	8b 41 10             	mov    0x10(%ecx),%eax
  803717:	89 03                	mov    %eax,(%ebx)
  803719:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
  803720:	eb 5d                	jmp    80377f <lwip_getsockopt_internal+0x191>
  803722:	8b 01                	mov    (%ecx),%eax
  803724:	8b 40 08             	mov    0x8(%eax),%eax
  803727:	0f b6 40 10          	movzbl 0x10(%eax),%eax
  80372b:	83 e0 01             	and    $0x1,%eax
  80372e:	89 03                	mov    %eax,(%ebx)
  803730:	eb 4d                	jmp    80377f <lwip_getsockopt_internal+0x191>
  803732:	83 fa 01             	cmp    $0x1,%edx
  803735:	74 12                	je     803749 <lwip_getsockopt_internal+0x15b>
  803737:	83 fa 02             	cmp    $0x2,%edx
  80373a:	75 43                	jne    80377f <lwip_getsockopt_internal+0x191>
  80373c:	8b 01                	mov    (%ecx),%eax
  80373e:	8b 40 08             	mov    0x8(%eax),%eax
  803741:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
  803745:	89 03                	mov    %eax,(%ebx)
  803747:	eb 36                	jmp    80377f <lwip_getsockopt_internal+0x191>
  803749:	8b 01                	mov    (%ecx),%eax
  80374b:	8b 40 08             	mov    0x8(%eax),%eax
  80374e:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
  803752:	89 03                	mov    %eax,(%ebx)
  803754:	eb 29                	jmp    80377f <lwip_getsockopt_internal+0x191>
  803756:	83 fa 01             	cmp    $0x1,%edx
  803759:	74 07                	je     803762 <lwip_getsockopt_internal+0x174>
  80375b:	83 fa 02             	cmp    $0x2,%edx
  80375e:	75 1f                	jne    80377f <lwip_getsockopt_internal+0x191>
  803760:	eb 10                	jmp    803772 <lwip_getsockopt_internal+0x184>
  803762:	8b 01                	mov    (%ecx),%eax
  803764:	8b 40 08             	mov    0x8(%eax),%eax
  803767:	0f b6 40 20          	movzbl 0x20(%eax),%eax
  80376b:	83 e0 40             	and    $0x40,%eax
  80376e:	89 03                	mov    %eax,(%ebx)
  803770:	eb 0d                	jmp    80377f <lwip_getsockopt_internal+0x191>
  803772:	8b 01                	mov    (%ecx),%eax
  803774:	8b 40 08             	mov    0x8(%eax),%eax
  803777:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
  80377d:	89 03                	mov    %eax,(%ebx)
  80377f:	8b 01                	mov    (%ecx),%eax
  803781:	8b 40 10             	mov    0x10(%eax),%eax
  803784:	89 04 24             	mov    %eax,(%esp)
  803787:	e8 26 a0 00 00       	call   80d7b2 <sys_sem_signal>
  80378c:	83 c4 14             	add    $0x14,%esp
  80378f:	5b                   	pop    %ebx
  803790:	5d                   	pop    %ebp
  803791:	c3                   	ret    

00803792 <lwip_selscan>:
  803792:	55                   	push   %ebp
  803793:	89 e5                	mov    %esp,%ebp
  803795:	57                   	push   %edi
  803796:	56                   	push   %esi
  803797:	53                   	push   %ebx
  803798:	83 ec 2c             	sub    $0x2c,%esp
  80379b:	89 45 dc             	mov    %eax,0xffffffdc(%ebp)
  80379e:	89 55 d8             	mov    %edx,0xffffffd8(%ebp)
  8037a1:	89 4d d4             	mov    %ecx,0xffffffd4(%ebp)
  8037a4:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  8037ab:	00 
  8037ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8037b3:	00 
  8037b4:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  8037b7:	89 04 24             	mov    %eax,(%esp)
  8037ba:	e8 d2 d9 ff ff       	call   801191 <memset>
  8037bf:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  8037c6:	00 
  8037c7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8037ce:	00 
  8037cf:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  8037d2:	89 04 24             	mov    %eax,(%esp)
  8037d5:	e8 b7 d9 ff ff       	call   801191 <memset>
  8037da:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  8037e1:	00 
  8037e2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8037e9:	00 
  8037ea:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  8037ed:	89 04 24             	mov    %eax,(%esp)
  8037f0:	e8 9c d9 ff ff       	call   801191 <memset>
  8037f5:	c7 45 e0 00 00 00 00 	movl   $0x0,0xffffffe0(%ebp)
  8037fc:	83 7d dc 00          	cmpl   $0x0,0xffffffdc(%ebp)
  803800:	0f 8e 9b 00 00 00    	jle    8038a1 <lwip_selscan+0x10f>
  803806:	bb 00 00 00 00       	mov    $0x0,%ebx
  80380b:	c7 45 e0 00 00 00 00 	movl   $0x0,0xffffffe0(%ebp)
  803812:	89 d8                	mov    %ebx,%eax
  803814:	c1 f8 1f             	sar    $0x1f,%eax
  803817:	c1 e8 1d             	shr    $0x1d,%eax
  80381a:	01 d8                	add    %ebx,%eax
  80381c:	89 c6                	mov    %eax,%esi
  80381e:	c1 fe 03             	sar    $0x3,%esi
  803821:	89 df                	mov    %ebx,%edi
  803823:	83 e7 07             	and    $0x7,%edi
  803826:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  803829:	0f b6 04 32          	movzbl (%edx,%esi,1),%eax
  80382d:	89 f9                	mov    %edi,%ecx
  80382f:	d3 f8                	sar    %cl,%eax
  803831:	a8 01                	test   $0x1,%al
  803833:	74 2e                	je     803863 <lwip_selscan+0xd1>
  803835:	89 d8                	mov    %ebx,%eax
  803837:	e8 14 f8 ff ff       	call   803050 <get_socket>
  80383c:	85 c0                	test   %eax,%eax
  80383e:	74 23                	je     803863 <lwip_selscan+0xd1>
  803840:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
  803844:	75 0c                	jne    803852 <lwip_selscan+0xc0>
  803846:	66 83 78 0a 00       	cmpw   $0x0,0xa(%eax)
  80384b:	90                   	nop    
  80384c:	8d 74 26 00          	lea    0x0(%esi),%esi
  803850:	74 11                	je     803863 <lwip_selscan+0xd1>
  803852:	b8 01 00 00 00       	mov    $0x1,%eax
  803857:	89 f9                	mov    %edi,%ecx
  803859:	d3 e0                	shl    %cl,%eax
  80385b:	08 44 35 f0          	or     %al,0xfffffff0(%ebp,%esi,1)
  80385f:	83 45 e0 01          	addl   $0x1,0xffffffe0(%ebp)
  803863:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  803866:	0f b6 04 32          	movzbl (%edx,%esi,1),%eax
  80386a:	89 f9                	mov    %edi,%ecx
  80386c:	d3 f8                	sar    %cl,%eax
  80386e:	a8 01                	test   $0x1,%al
  803870:	74 23                	je     803895 <lwip_selscan+0x103>
  803872:	89 d8                	mov    %ebx,%eax
  803874:	e8 d7 f7 ff ff       	call   803050 <get_socket>
  803879:	85 c0                	test   %eax,%eax
  80387b:	74 18                	je     803895 <lwip_selscan+0x103>
  80387d:	66 83 78 0c 00       	cmpw   $0x0,0xc(%eax)
  803882:	74 11                	je     803895 <lwip_selscan+0x103>
  803884:	b8 01 00 00 00       	mov    $0x1,%eax
  803889:	89 f9                	mov    %edi,%ecx
  80388b:	d3 e0                	shl    %cl,%eax
  80388d:	08 44 35 ec          	or     %al,0xffffffec(%ebp,%esi,1)
  803891:	83 45 e0 01          	addl   $0x1,0xffffffe0(%ebp)
  803895:	83 c3 01             	add    $0x1,%ebx
  803898:	3b 5d dc             	cmp    0xffffffdc(%ebp),%ebx
  80389b:	0f 85 71 ff ff ff    	jne    803812 <lwip_selscan+0x80>
  8038a1:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  8038a4:	8b 55 d8             	mov    0xffffffd8(%ebp),%edx
  8038a7:	89 02                	mov    %eax,(%edx)
  8038a9:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  8038ac:	8b 4d d4             	mov    0xffffffd4(%ebp),%ecx
  8038af:	89 01                	mov    %eax,(%ecx)
  8038b1:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  8038b8:	00 
  8038b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8038c0:	00 
  8038c1:	8b 45 08             	mov    0x8(%ebp),%eax
  8038c4:	89 04 24             	mov    %eax,(%esp)
  8038c7:	e8 c5 d8 ff ff       	call   801191 <memset>
  8038cc:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  8038cf:	83 c4 2c             	add    $0x2c,%esp
  8038d2:	5b                   	pop    %ebx
  8038d3:	5e                   	pop    %esi
  8038d4:	5f                   	pop    %edi
  8038d5:	5d                   	pop    %ebp
  8038d6:	c3                   	ret    

008038d7 <lwip_getaddrname>:
  8038d7:	55                   	push   %ebp
  8038d8:	89 e5                	mov    %esp,%ebp
  8038da:	83 ec 48             	sub    $0x48,%esp
  8038dd:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8038e0:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8038e3:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8038e6:	89 55 d0             	mov    %edx,0xffffffd0(%ebp)
  8038e9:	89 ce                	mov    %ecx,%esi
  8038eb:	0f b6 7d 08          	movzbl 0x8(%ebp),%edi
  8038ef:	e8 5c f7 ff ff       	call   803050 <get_socket>
  8038f4:	89 c3                	mov    %eax,%ebx
  8038f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8038fb:	85 db                	test   %ebx,%ebx
  8038fd:	0f 84 93 00 00 00    	je     803996 <lwip_getaddrname+0xbf>
  803903:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  80390a:	00 
  80390b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803912:	00 
  803913:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  803916:	89 04 24             	mov    %eax,(%esp)
  803919:	e8 73 d8 ff ff       	call   801191 <memset>
  80391e:	c6 45 e4 10          	movb   $0x10,0xffffffe4(%ebp)
  803922:	c6 45 e5 02          	movb   $0x2,0xffffffe5(%ebp)
  803926:	89 fa                	mov    %edi,%edx
  803928:	0f b6 c2             	movzbl %dl,%eax
  80392b:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80392f:	8d 45 e6             	lea    0xffffffe6(%ebp),%eax
  803932:	89 44 24 08          	mov    %eax,0x8(%esp)
  803936:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  803939:	89 44 24 04          	mov    %eax,0x4(%esp)
  80393d:	8b 03                	mov    (%ebx),%eax
  80393f:	89 04 24             	mov    %eax,(%esp)
  803942:	e8 ff aa 00 00       	call   80e446 <netconn_getaddr>
  803947:	0f b7 45 e6          	movzwl 0xffffffe6(%ebp),%eax
  80394b:	89 04 24             	mov    %eax,(%esp)
  80394e:	e8 0c 6f 00 00       	call   80a85f <htons>
  803953:	66 89 45 e6          	mov    %ax,0xffffffe6(%ebp)
  803957:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  80395a:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80395d:	83 3e 10             	cmpl   $0x10,(%esi)
  803960:	76 06                	jbe    803968 <lwip_getaddrname+0x91>
  803962:	c7 06 10 00 00 00    	movl   $0x10,(%esi)
  803968:	8b 06                	mov    (%esi),%eax
  80396a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80396e:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  803971:	89 44 24 04          	mov    %eax,0x4(%esp)
  803975:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  803978:	89 04 24             	mov    %eax,(%esp)
  80397b:	e8 e8 d8 ff ff       	call   801268 <memcpy>
  803980:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  803987:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  80398e:	00 00 00 
  803991:	b8 00 00 00 00       	mov    $0x0,%eax
  803996:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  803999:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80399c:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80399f:	89 ec                	mov    %ebp,%esp
  8039a1:	5d                   	pop    %ebp
  8039a2:	c3                   	ret    

008039a3 <lwip_getsockname>:
  8039a3:	55                   	push   %ebp
  8039a4:	89 e5                	mov    %esp,%ebp
  8039a6:	83 ec 08             	sub    $0x8,%esp
  8039a9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  8039b0:	8b 4d 10             	mov    0x10(%ebp),%ecx
  8039b3:	8b 55 0c             	mov    0xc(%ebp),%edx
  8039b6:	8b 45 08             	mov    0x8(%ebp),%eax
  8039b9:	e8 19 ff ff ff       	call   8038d7 <lwip_getaddrname>
  8039be:	c9                   	leave  
  8039bf:	c3                   	ret    

008039c0 <lwip_getpeername>:
  8039c0:	55                   	push   %ebp
  8039c1:	89 e5                	mov    %esp,%ebp
  8039c3:	83 ec 08             	sub    $0x8,%esp
  8039c6:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8039cd:	8b 4d 10             	mov    0x10(%ebp),%ecx
  8039d0:	8b 55 0c             	mov    0xc(%ebp),%edx
  8039d3:	8b 45 08             	mov    0x8(%ebp),%eax
  8039d6:	e8 fc fe ff ff       	call   8038d7 <lwip_getaddrname>
  8039db:	c9                   	leave  
  8039dc:	c3                   	ret    

008039dd <event_callback>:
  8039dd:	55                   	push   %ebp
  8039de:	89 e5                	mov    %esp,%ebp
  8039e0:	57                   	push   %edi
  8039e1:	56                   	push   %esi
  8039e2:	53                   	push   %ebx
  8039e3:	83 ec 1c             	sub    $0x1c,%esp
  8039e6:	8b 75 08             	mov    0x8(%ebp),%esi
  8039e9:	8b 7d 0c             	mov    0xc(%ebp),%edi
  8039ec:	85 f6                	test   %esi,%esi
  8039ee:	0f 84 62 01 00 00    	je     803b56 <event_callback+0x179>
  8039f4:	8b 5e 1c             	mov    0x1c(%esi),%ebx
  8039f7:	85 db                	test   %ebx,%ebx
  8039f9:	79 3d                	jns    803a38 <event_callback+0x5b>
  8039fb:	a1 64 86 81 00       	mov    0x818664,%eax
  803a00:	89 04 24             	mov    %eax,(%esp)
  803a03:	e8 93 47 00 00       	call   80819b <sys_sem_wait>
  803a08:	8b 46 1c             	mov    0x1c(%esi),%eax
  803a0b:	85 c0                	test   %eax,%eax
  803a0d:	79 1c                	jns    803a2b <event_callback+0x4e>
  803a0f:	85 ff                	test   %edi,%edi
  803a11:	75 06                	jne    803a19 <event_callback+0x3c>
  803a13:	83 e8 01             	sub    $0x1,%eax
  803a16:	89 46 1c             	mov    %eax,0x1c(%esi)
  803a19:	a1 64 86 81 00       	mov    0x818664,%eax
  803a1e:	89 04 24             	mov    %eax,(%esp)
  803a21:	e8 8c 9d 00 00       	call   80d7b2 <sys_sem_signal>
  803a26:	e9 2b 01 00 00       	jmp    803b56 <event_callback+0x179>
  803a2b:	a1 64 86 81 00       	mov    0x818664,%eax
  803a30:	89 04 24             	mov    %eax,(%esp)
  803a33:	e8 7a 9d 00 00       	call   80d7b2 <sys_sem_signal>
  803a38:	89 d8                	mov    %ebx,%eax
  803a3a:	e8 11 f6 ff ff       	call   803050 <get_socket>
  803a3f:	89 c6                	mov    %eax,%esi
  803a41:	85 c0                	test   %eax,%eax
  803a43:	0f 84 0d 01 00 00    	je     803b56 <event_callback+0x179>
  803a49:	a1 68 86 81 00       	mov    0x818668,%eax
  803a4e:	89 04 24             	mov    %eax,(%esp)
  803a51:	e8 45 47 00 00       	call   80819b <sys_sem_wait>
  803a56:	83 ff 01             	cmp    $0x1,%edi
  803a59:	74 1e                	je     803a79 <event_callback+0x9c>
  803a5b:	83 ff 01             	cmp    $0x1,%edi
  803a5e:	72 12                	jb     803a72 <event_callback+0x95>
  803a60:	83 ff 02             	cmp    $0x2,%edi
  803a63:	74 1d                	je     803a82 <event_callback+0xa5>
  803a65:	83 ff 03             	cmp    $0x3,%edi
  803a68:	75 28                	jne    803a92 <event_callback+0xb5>
  803a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  803a70:	eb 18                	jmp    803a8a <event_callback+0xad>
  803a72:	66 83 46 0a 01       	addw   $0x1,0xa(%esi)
  803a77:	eb 35                	jmp    803aae <event_callback+0xd1>
  803a79:	66 83 6e 0a 01       	subw   $0x1,0xa(%esi)
  803a7e:	66 90                	xchg   %ax,%ax
  803a80:	eb 2c                	jmp    803aae <event_callback+0xd1>
  803a82:	66 c7 46 0c 01 00    	movw   $0x1,0xc(%esi)
  803a88:	eb 24                	jmp    803aae <event_callback+0xd1>
  803a8a:	66 c7 46 0c 00 00    	movw   $0x0,0xc(%esi)
  803a90:	eb 1c                	jmp    803aae <event_callback+0xd1>
  803a92:	c7 44 24 08 48 29 81 	movl   $0x812948,0x8(%esp)
  803a99:	00 
  803a9a:	c7 44 24 04 17 04 00 	movl   $0x417,0x4(%esp)
  803aa1:	00 
  803aa2:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  803aa9:	e8 de cd ff ff       	call   80088c <_panic>
  803aae:	a1 68 86 81 00       	mov    0x818668,%eax
  803ab3:	89 04 24             	mov    %eax,(%esp)
  803ab6:	e8 f7 9c 00 00       	call   80d7b2 <sys_sem_signal>
  803abb:	89 d8                	mov    %ebx,%eax
  803abd:	c1 f8 1f             	sar    $0x1f,%eax
  803ac0:	c1 e8 1d             	shr    $0x1d,%eax
  803ac3:	01 d8                	add    %ebx,%eax
  803ac5:	89 c7                	mov    %eax,%edi
  803ac7:	c1 ff 03             	sar    $0x3,%edi
  803aca:	83 e3 07             	and    $0x7,%ebx
  803acd:	89 5d f0             	mov    %ebx,0xfffffff0(%ebp)
  803ad0:	a1 68 86 81 00       	mov    0x818668,%eax
  803ad5:	89 04 24             	mov    %eax,(%esp)
  803ad8:	e8 be 46 00 00       	call   80819b <sys_sem_wait>
  803add:	8b 1d 60 86 81 00    	mov    0x818660,%ebx
  803ae3:	85 db                	test   %ebx,%ebx
  803ae5:	74 62                	je     803b49 <event_callback+0x16c>
  803ae7:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  803aea:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  803aee:	75 30                	jne    803b20 <event_callback+0x143>
  803af0:	8b 43 04             	mov    0x4(%ebx),%eax
  803af3:	85 c0                	test   %eax,%eax
  803af5:	74 11                	je     803b08 <event_callback+0x12b>
  803af7:	0f b6 04 38          	movzbl (%eax,%edi,1),%eax
  803afb:	d3 f8                	sar    %cl,%eax
  803afd:	a8 01                	test   $0x1,%al
  803aff:	74 07                	je     803b08 <event_callback+0x12b>
  803b01:	66 83 7e 0a 00       	cmpw   $0x0,0xa(%esi)
  803b06:	75 20                	jne    803b28 <event_callback+0x14b>
  803b08:	8b 43 08             	mov    0x8(%ebx),%eax
  803b0b:	85 c0                	test   %eax,%eax
  803b0d:	74 11                	je     803b20 <event_callback+0x143>
  803b0f:	0f b6 04 38          	movzbl (%eax,%edi,1),%eax
  803b13:	d3 f8                	sar    %cl,%eax
  803b15:	a8 01                	test   $0x1,%al
  803b17:	74 07                	je     803b20 <event_callback+0x143>
  803b19:	66 83 7e 0c 00       	cmpw   $0x0,0xc(%esi)
  803b1e:	75 08                	jne    803b28 <event_callback+0x14b>
  803b20:	8b 1b                	mov    (%ebx),%ebx
  803b22:	85 db                	test   %ebx,%ebx
  803b24:	74 23                	je     803b49 <event_callback+0x16c>
  803b26:	eb c2                	jmp    803aea <event_callback+0x10d>
  803b28:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%ebx)
  803b2f:	a1 68 86 81 00       	mov    0x818668,%eax
  803b34:	89 04 24             	mov    %eax,(%esp)
  803b37:	e8 76 9c 00 00       	call   80d7b2 <sys_sem_signal>
  803b3c:	8b 43 14             	mov    0x14(%ebx),%eax
  803b3f:	89 04 24             	mov    %eax,(%esp)
  803b42:	e8 6b 9c 00 00       	call   80d7b2 <sys_sem_signal>
  803b47:	eb 87                	jmp    803ad0 <event_callback+0xf3>
  803b49:	a1 68 86 81 00       	mov    0x818668,%eax
  803b4e:	89 04 24             	mov    %eax,(%esp)
  803b51:	e8 5c 9c 00 00       	call   80d7b2 <sys_sem_signal>
  803b56:	83 c4 1c             	add    $0x1c,%esp
  803b59:	5b                   	pop    %ebx
  803b5a:	5e                   	pop    %esi
  803b5b:	5f                   	pop    %edi
  803b5c:	5d                   	pop    %ebp
  803b5d:	c3                   	ret    

00803b5e <alloc_socket>:
  803b5e:	55                   	push   %ebp
  803b5f:	89 e5                	mov    %esp,%ebp
  803b61:	56                   	push   %esi
  803b62:	53                   	push   %ebx
  803b63:	83 ec 10             	sub    $0x10,%esp
  803b66:	89 c6                	mov    %eax,%esi
  803b68:	a1 64 86 81 00       	mov    0x818664,%eax
  803b6d:	89 04 24             	mov    %eax,(%esp)
  803b70:	e8 26 46 00 00       	call   80819b <sys_sem_wait>
  803b75:	bb 00 00 00 00       	mov    $0x0,%ebx
  803b7a:	b8 00 00 00 00       	mov    $0x0,%eax
  803b7f:	83 b8 e0 83 81 00 00 	cmpl   $0x0,0x8183e0(%eax)
  803b86:	75 53                	jne    803bdb <alloc_socket+0x7d>
  803b88:	8d 04 9b             	lea    (%ebx,%ebx,4),%eax
  803b8b:	c1 e0 02             	shl    $0x2,%eax
  803b8e:	89 b0 e0 83 81 00    	mov    %esi,0x8183e0(%eax)
  803b94:	c7 80 e4 83 81 00 00 	movl   $0x0,0x8183e4(%eax)
  803b9b:	00 00 00 
  803b9e:	66 c7 80 e8 83 81 00 	movw   $0x0,0x8183e8(%eax)
  803ba5:	00 00 
  803ba7:	66 c7 80 ea 83 81 00 	movw   $0x0,0x8183ea(%eax)
  803bae:	00 00 
  803bb0:	66 c7 80 ec 83 81 00 	movw   $0x1,0x8183ec(%eax)
  803bb7:	01 00 
  803bb9:	66 c7 80 ee 83 81 00 	movw   $0x0,0x8183ee(%eax)
  803bc0:	00 00 
  803bc2:	c7 80 f0 83 81 00 00 	movl   $0x0,0x8183f0(%eax)
  803bc9:	00 00 00 
  803bcc:	a1 64 86 81 00       	mov    0x818664,%eax
  803bd1:	89 04 24             	mov    %eax,(%esp)
  803bd4:	e8 d9 9b 00 00       	call   80d7b2 <sys_sem_signal>
  803bd9:	eb 1d                	jmp    803bf8 <alloc_socket+0x9a>
  803bdb:	83 c3 01             	add    $0x1,%ebx
  803bde:	83 c0 14             	add    $0x14,%eax
  803be1:	83 fb 20             	cmp    $0x20,%ebx
  803be4:	75 99                	jne    803b7f <alloc_socket+0x21>
  803be6:	a1 64 86 81 00       	mov    0x818664,%eax
  803beb:	89 04 24             	mov    %eax,(%esp)
  803bee:	e8 bf 9b 00 00       	call   80d7b2 <sys_sem_signal>
  803bf3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  803bf8:	89 d8                	mov    %ebx,%eax
  803bfa:	83 c4 10             	add    $0x10,%esp
  803bfd:	5b                   	pop    %ebx
  803bfe:	5e                   	pop    %esi
  803bff:	5d                   	pop    %ebp
  803c00:	c3                   	ret    

00803c01 <lwip_socket_init>:
  803c01:	55                   	push   %ebp
  803c02:	89 e5                	mov    %esp,%ebp
  803c04:	83 ec 08             	sub    $0x8,%esp
  803c07:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  803c0e:	e8 fa 99 00 00       	call   80d60d <sys_sem_new>
  803c13:	a3 64 86 81 00       	mov    %eax,0x818664
  803c18:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  803c1f:	e8 e9 99 00 00       	call   80d60d <sys_sem_new>
  803c24:	a3 68 86 81 00       	mov    %eax,0x818668
  803c29:	c9                   	leave  
  803c2a:	c3                   	ret    

00803c2b <lwip_select>:
  803c2b:	55                   	push   %ebp
  803c2c:	89 e5                	mov    %esp,%ebp
  803c2e:	57                   	push   %edi
  803c2f:	56                   	push   %esi
  803c30:	53                   	push   %ebx
  803c31:	83 ec 4c             	sub    $0x4c,%esp
  803c34:	8b 75 0c             	mov    0xc(%ebp),%esi
  803c37:	8b 7d 10             	mov    0x10(%ebp),%edi
  803c3a:	c7 45 d0 00 00 00 00 	movl   $0x0,0xffffffd0(%ebp)
  803c41:	89 75 d4             	mov    %esi,0xffffffd4(%ebp)
  803c44:	89 7d d8             	mov    %edi,0xffffffd8(%ebp)
  803c47:	8b 45 14             	mov    0x14(%ebp),%eax
  803c4a:	89 45 dc             	mov    %eax,0xffffffdc(%ebp)
  803c4d:	c7 45 e0 00 00 00 00 	movl   $0x0,0xffffffe0(%ebp)
  803c54:	a1 68 86 81 00       	mov    0x818668,%eax
  803c59:	89 04 24             	mov    %eax,(%esp)
  803c5c:	e8 3a 45 00 00       	call   80819b <sys_sem_wait>
  803c61:	85 f6                	test   %esi,%esi
  803c63:	74 1d                	je     803c82 <lwip_select+0x57>
  803c65:	0f b6 56 02          	movzbl 0x2(%esi),%edx
  803c69:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
  803c6d:	0f b6 1e             	movzbl (%esi),%ebx
  803c70:	0f b6 46 03          	movzbl 0x3(%esi),%eax
  803c74:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  803c77:	88 55 f2             	mov    %dl,0xfffffff2(%ebp)
  803c7a:	88 4d f1             	mov    %cl,0xfffffff1(%ebp)
  803c7d:	88 5d f0             	mov    %bl,0xfffffff0(%ebp)
  803c80:	eb 1b                	jmp    803c9d <lwip_select+0x72>
  803c82:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803c89:	00 
  803c8a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803c91:	00 
  803c92:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  803c95:	89 04 24             	mov    %eax,(%esp)
  803c98:	e8 f4 d4 ff ff       	call   801191 <memset>
  803c9d:	85 ff                	test   %edi,%edi
  803c9f:	74 1d                	je     803cbe <lwip_select+0x93>
  803ca1:	0f b6 57 02          	movzbl 0x2(%edi),%edx
  803ca5:	0f b6 4f 01          	movzbl 0x1(%edi),%ecx
  803ca9:	0f b6 1f             	movzbl (%edi),%ebx
  803cac:	0f b6 47 03          	movzbl 0x3(%edi),%eax
  803cb0:	88 45 ef             	mov    %al,0xffffffef(%ebp)
  803cb3:	88 55 ee             	mov    %dl,0xffffffee(%ebp)
  803cb6:	88 4d ed             	mov    %cl,0xffffffed(%ebp)
  803cb9:	88 5d ec             	mov    %bl,0xffffffec(%ebp)
  803cbc:	eb 1b                	jmp    803cd9 <lwip_select+0xae>
  803cbe:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803cc5:	00 
  803cc6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803ccd:	00 
  803cce:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  803cd1:	89 04 24             	mov    %eax,(%esp)
  803cd4:	e8 b8 d4 ff ff       	call   801191 <memset>
  803cd9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  803cdd:	74 22                	je     803d01 <lwip_select+0xd6>
  803cdf:	8b 4d 14             	mov    0x14(%ebp),%ecx
  803ce2:	0f b6 51 02          	movzbl 0x2(%ecx),%edx
  803ce6:	89 c8                	mov    %ecx,%eax
  803ce8:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
  803cec:	0f b6 18             	movzbl (%eax),%ebx
  803cef:	0f b6 40 03          	movzbl 0x3(%eax),%eax
  803cf3:	88 45 eb             	mov    %al,0xffffffeb(%ebp)
  803cf6:	88 55 ea             	mov    %dl,0xffffffea(%ebp)
  803cf9:	88 4d e9             	mov    %cl,0xffffffe9(%ebp)
  803cfc:	88 5d e8             	mov    %bl,0xffffffe8(%ebp)
  803cff:	eb 1b                	jmp    803d1c <lwip_select+0xf1>
  803d01:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803d08:	00 
  803d09:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803d10:	00 
  803d11:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  803d14:	89 04 24             	mov    %eax,(%esp)
  803d17:	e8 75 d4 ff ff       	call   801191 <memset>
  803d1c:	8d 4d ec             	lea    0xffffffec(%ebp),%ecx
  803d1f:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  803d22:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  803d25:	89 04 24             	mov    %eax,(%esp)
  803d28:	8b 45 08             	mov    0x8(%ebp),%eax
  803d2b:	e8 62 fa ff ff       	call   803792 <lwip_selscan>
  803d30:	89 c3                	mov    %eax,%ebx
  803d32:	85 c0                	test   %eax,%eax
  803d34:	0f 85 81 02 00 00    	jne    803fbb <lwip_select+0x390>
  803d3a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  803d3e:	0f 84 8b 00 00 00    	je     803dcf <lwip_select+0x1a4>
  803d44:	8b 55 18             	mov    0x18(%ebp),%edx
  803d47:	83 3a 00             	cmpl   $0x0,(%edx)
  803d4a:	0f 85 a4 02 00 00    	jne    803ff4 <lwip_select+0x3c9>
  803d50:	83 7a 04 00          	cmpl   $0x0,0x4(%edx)
  803d54:	0f 85 9a 02 00 00    	jne    803ff4 <lwip_select+0x3c9>
  803d5a:	a1 68 86 81 00       	mov    0x818668,%eax
  803d5f:	89 04 24             	mov    %eax,(%esp)
  803d62:	e8 4b 9a 00 00       	call   80d7b2 <sys_sem_signal>
  803d67:	85 f6                	test   %esi,%esi
  803d69:	74 18                	je     803d83 <lwip_select+0x158>
  803d6b:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803d72:	00 
  803d73:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803d7a:	00 
  803d7b:	89 34 24             	mov    %esi,(%esp)
  803d7e:	e8 0e d4 ff ff       	call   801191 <memset>
  803d83:	85 ff                	test   %edi,%edi
  803d85:	74 18                	je     803d9f <lwip_select+0x174>
  803d87:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803d8e:	00 
  803d8f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803d96:	00 
  803d97:	89 3c 24             	mov    %edi,(%esp)
  803d9a:	e8 f2 d3 ff ff       	call   801191 <memset>
  803d9f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  803da3:	74 1b                	je     803dc0 <lwip_select+0x195>
  803da5:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803dac:	00 
  803dad:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803db4:	00 
  803db5:	8b 4d 14             	mov    0x14(%ebp),%ecx
  803db8:	89 0c 24             	mov    %ecx,(%esp)
  803dbb:	e8 d1 d3 ff ff       	call   801191 <memset>
  803dc0:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  803dc7:	00 00 00 
  803dca:	e9 8d 02 00 00       	jmp    80405c <lwip_select+0x431>
  803dcf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  803dd6:	e8 32 98 00 00       	call   80d60d <sys_sem_new>
  803ddb:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  803dde:	a1 60 86 81 00       	mov    0x818660,%eax
  803de3:	89 45 d0             	mov    %eax,0xffffffd0(%ebp)
  803de6:	8d 45 d0             	lea    0xffffffd0(%ebp),%eax
  803de9:	a3 60 86 81 00       	mov    %eax,0x818660
  803dee:	a1 68 86 81 00       	mov    0x818668,%eax
  803df3:	89 04 24             	mov    %eax,(%esp)
  803df6:	e8 b7 99 00 00       	call   80d7b2 <sys_sem_signal>
  803dfb:	b9 00 00 00 00       	mov    $0x0,%ecx
  803e00:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  803e04:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  803e07:	89 04 24             	mov    %eax,(%esp)
  803e0a:	e8 19 44 00 00       	call   808228 <sys_sem_wait_timeout>
  803e0f:	89 45 c0             	mov    %eax,0xffffffc0(%ebp)
  803e12:	a1 68 86 81 00       	mov    0x818668,%eax
  803e17:	89 04 24             	mov    %eax,(%esp)
  803e1a:	e8 7c 43 00 00       	call   80819b <sys_sem_wait>
  803e1f:	8b 15 60 86 81 00    	mov    0x818660,%edx
  803e25:	8d 45 d0             	lea    0xffffffd0(%ebp),%eax
  803e28:	39 d0                	cmp    %edx,%eax
  803e2a:	75 24                	jne    803e50 <lwip_select+0x225>
  803e2c:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  803e2f:	a3 60 86 81 00       	mov    %eax,0x818660
  803e34:	eb 2c                	jmp    803e62 <lwip_select+0x237>
  803e36:	8b 11                	mov    (%ecx),%edx
  803e38:	8d 45 d0             	lea    0xffffffd0(%ebp),%eax
  803e3b:	39 c2                	cmp    %eax,%edx
  803e3d:	74 0a                	je     803e49 <lwip_select+0x21e>
  803e3f:	89 d1                	mov    %edx,%ecx
  803e41:	85 c9                	test   %ecx,%ecx
  803e43:	75 f1                	jne    803e36 <lwip_select+0x20b>
  803e45:	eb 1b                	jmp    803e62 <lwip_select+0x237>
  803e47:	89 d1                	mov    %edx,%ecx
  803e49:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  803e4c:	89 01                	mov    %eax,(%ecx)
  803e4e:	eb 12                	jmp    803e62 <lwip_select+0x237>
  803e50:	85 d2                	test   %edx,%edx
  803e52:	74 0e                	je     803e62 <lwip_select+0x237>
  803e54:	8b 0a                	mov    (%edx),%ecx
  803e56:	8d 45 d0             	lea    0xffffffd0(%ebp),%eax
  803e59:	39 c1                	cmp    %eax,%ecx
  803e5b:	75 e4                	jne    803e41 <lwip_select+0x216>
  803e5d:	8d 76 00             	lea    0x0(%esi),%esi
  803e60:	eb e5                	jmp    803e47 <lwip_select+0x21c>
  803e62:	a1 68 86 81 00       	mov    0x818668,%eax
  803e67:	89 04 24             	mov    %eax,(%esp)
  803e6a:	e8 43 99 00 00       	call   80d7b2 <sys_sem_signal>
  803e6f:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  803e72:	89 04 24             	mov    %eax,(%esp)
  803e75:	e8 e6 92 00 00       	call   80d160 <sys_sem_free>
  803e7a:	83 7d c0 00          	cmpl   $0x0,0xffffffc0(%ebp)
  803e7e:	75 68                	jne    803ee8 <lwip_select+0x2bd>
  803e80:	85 f6                	test   %esi,%esi
  803e82:	74 18                	je     803e9c <lwip_select+0x271>
  803e84:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803e8b:	00 
  803e8c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803e93:	00 
  803e94:	89 34 24             	mov    %esi,(%esp)
  803e97:	e8 f5 d2 ff ff       	call   801191 <memset>
  803e9c:	85 ff                	test   %edi,%edi
  803e9e:	74 18                	je     803eb8 <lwip_select+0x28d>
  803ea0:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803ea7:	00 
  803ea8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803eaf:	00 
  803eb0:	89 3c 24             	mov    %edi,(%esp)
  803eb3:	e8 d9 d2 ff ff       	call   801191 <memset>
  803eb8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  803ebc:	74 1b                	je     803ed9 <lwip_select+0x2ae>
  803ebe:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803ec5:	00 
  803ec6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803ecd:	00 
  803ece:	8b 45 14             	mov    0x14(%ebp),%eax
  803ed1:	89 04 24             	mov    %eax,(%esp)
  803ed4:	e8 b8 d2 ff ff       	call   801191 <memset>
  803ed9:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  803ee0:	00 00 00 
  803ee3:	e9 74 01 00 00       	jmp    80405c <lwip_select+0x431>
  803ee8:	85 f6                	test   %esi,%esi
  803eea:	74 1d                	je     803f09 <lwip_select+0x2de>
  803eec:	0f b6 56 02          	movzbl 0x2(%esi),%edx
  803ef0:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
  803ef4:	0f b6 1e             	movzbl (%esi),%ebx
  803ef7:	0f b6 46 03          	movzbl 0x3(%esi),%eax
  803efb:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  803efe:	88 55 f2             	mov    %dl,0xfffffff2(%ebp)
  803f01:	88 4d f1             	mov    %cl,0xfffffff1(%ebp)
  803f04:	88 5d f0             	mov    %bl,0xfffffff0(%ebp)
  803f07:	eb 1b                	jmp    803f24 <lwip_select+0x2f9>
  803f09:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803f10:	00 
  803f11:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803f18:	00 
  803f19:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  803f1c:	89 04 24             	mov    %eax,(%esp)
  803f1f:	e8 6d d2 ff ff       	call   801191 <memset>
  803f24:	85 ff                	test   %edi,%edi
  803f26:	74 1d                	je     803f45 <lwip_select+0x31a>
  803f28:	0f b6 57 02          	movzbl 0x2(%edi),%edx
  803f2c:	0f b6 4f 01          	movzbl 0x1(%edi),%ecx
  803f30:	0f b6 1f             	movzbl (%edi),%ebx
  803f33:	0f b6 47 03          	movzbl 0x3(%edi),%eax
  803f37:	88 45 ef             	mov    %al,0xffffffef(%ebp)
  803f3a:	88 55 ee             	mov    %dl,0xffffffee(%ebp)
  803f3d:	88 4d ed             	mov    %cl,0xffffffed(%ebp)
  803f40:	88 5d ec             	mov    %bl,0xffffffec(%ebp)
  803f43:	eb 1b                	jmp    803f60 <lwip_select+0x335>
  803f45:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803f4c:	00 
  803f4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803f54:	00 
  803f55:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  803f58:	89 04 24             	mov    %eax,(%esp)
  803f5b:	e8 31 d2 ff ff       	call   801191 <memset>
  803f60:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  803f64:	74 22                	je     803f88 <lwip_select+0x35d>
  803f66:	8b 4d 14             	mov    0x14(%ebp),%ecx
  803f69:	0f b6 51 02          	movzbl 0x2(%ecx),%edx
  803f6d:	89 c8                	mov    %ecx,%eax
  803f6f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx
  803f73:	0f b6 18             	movzbl (%eax),%ebx
  803f76:	0f b6 40 03          	movzbl 0x3(%eax),%eax
  803f7a:	88 45 eb             	mov    %al,0xffffffeb(%ebp)
  803f7d:	88 55 ea             	mov    %dl,0xffffffea(%ebp)
  803f80:	88 4d e9             	mov    %cl,0xffffffe9(%ebp)
  803f83:	88 5d e8             	mov    %bl,0xffffffe8(%ebp)
  803f86:	eb 1b                	jmp    803fa3 <lwip_select+0x378>
  803f88:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  803f8f:	00 
  803f90:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  803f97:	00 
  803f98:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  803f9b:	89 04 24             	mov    %eax,(%esp)
  803f9e:	e8 ee d1 ff ff       	call   801191 <memset>
  803fa3:	8d 4d ec             	lea    0xffffffec(%ebp),%ecx
  803fa6:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  803fa9:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  803fac:	89 04 24             	mov    %eax,(%esp)
  803faf:	8b 45 08             	mov    0x8(%ebp),%eax
  803fb2:	e8 db f7 ff ff       	call   803792 <lwip_selscan>
  803fb7:	89 c3                	mov    %eax,%ebx
  803fb9:	eb 0d                	jmp    803fc8 <lwip_select+0x39d>
  803fbb:	a1 68 86 81 00       	mov    0x818668,%eax
  803fc0:	89 04 24             	mov    %eax,(%esp)
  803fc3:	e8 ea 97 00 00       	call   80d7b2 <sys_sem_signal>
  803fc8:	85 f6                	test   %esi,%esi
  803fca:	74 05                	je     803fd1 <lwip_select+0x3a6>
  803fcc:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  803fcf:	89 06                	mov    %eax,(%esi)
  803fd1:	85 ff                	test   %edi,%edi
  803fd3:	74 05                	je     803fda <lwip_select+0x3af>
  803fd5:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  803fd8:	89 07                	mov    %eax,(%edi)
  803fda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
  803fde:	74 08                	je     803fe8 <lwip_select+0x3bd>
  803fe0:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  803fe3:	8b 55 14             	mov    0x14(%ebp),%edx
  803fe6:	89 02                	mov    %eax,(%edx)
  803fe8:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  803fef:	00 00 00 
  803ff2:	eb 68                	jmp    80405c <lwip_select+0x431>
  803ff4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  803ffb:	e8 0d 96 00 00       	call   80d60d <sys_sem_new>
  804000:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  804003:	a1 60 86 81 00       	mov    0x818660,%eax
  804008:	89 45 d0             	mov    %eax,0xffffffd0(%ebp)
  80400b:	8d 45 d0             	lea    0xffffffd0(%ebp),%eax
  80400e:	a3 60 86 81 00       	mov    %eax,0x818660
  804013:	a1 68 86 81 00       	mov    0x818668,%eax
  804018:	89 04 24             	mov    %eax,(%esp)
  80401b:	e8 92 97 00 00       	call   80d7b2 <sys_sem_signal>
  804020:	8b 45 18             	mov    0x18(%ebp),%eax
  804023:	8b 48 04             	mov    0x4(%eax),%ecx
  804026:	81 c1 f4 01 00 00    	add    $0x1f4,%ecx
  80402c:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  804031:	89 c8                	mov    %ecx,%eax
  804033:	f7 ea                	imul   %edx
  804035:	c1 fa 06             	sar    $0x6,%edx
  804038:	89 c8                	mov    %ecx,%eax
  80403a:	c1 f8 1f             	sar    $0x1f,%eax
  80403d:	29 c2                	sub    %eax,%edx
  80403f:	8b 4d 18             	mov    0x18(%ebp),%ecx
  804042:	69 01 e8 03 00 00    	imul   $0x3e8,(%ecx),%eax
  804048:	b9 01 00 00 00       	mov    $0x1,%ecx
  80404d:	01 d0                	add    %edx,%eax
  80404f:	0f 84 ab fd ff ff    	je     803e00 <lwip_select+0x1d5>
  804055:	89 c1                	mov    %eax,%ecx
  804057:	e9 a4 fd ff ff       	jmp    803e00 <lwip_select+0x1d5>
  80405c:	89 d8                	mov    %ebx,%eax
  80405e:	83 c4 4c             	add    $0x4c,%esp
  804061:	5b                   	pop    %ebx
  804062:	5e                   	pop    %esi
  804063:	5f                   	pop    %edi
  804064:	5d                   	pop    %ebp
  804065:	c3                   	ret    

00804066 <lwip_socket>:
  804066:	55                   	push   %ebp
  804067:	89 e5                	mov    %esp,%ebp
  804069:	56                   	push   %esi
  80406a:	53                   	push   %ebx
  80406b:	83 ec 10             	sub    $0x10,%esp
  80406e:	8b 55 0c             	mov    0xc(%ebp),%edx
  804071:	8b 45 10             	mov    0x10(%ebp),%eax
  804074:	83 fa 02             	cmp    $0x2,%edx
  804077:	74 2b                	je     8040a4 <lwip_socket+0x3e>
  804079:	83 fa 03             	cmp    $0x3,%edx
  80407c:	74 07                	je     804085 <lwip_socket+0x1f>
  80407e:	83 fa 01             	cmp    $0x1,%edx
  804081:	75 6b                	jne    8040ee <lwip_socket+0x88>
  804083:	eb 49                	jmp    8040ce <lwip_socket+0x68>
  804085:	c7 44 24 08 dd 39 80 	movl   $0x8039dd,0x8(%esp)
  80408c:	00 
  80408d:	0f b6 c0             	movzbl %al,%eax
  804090:	89 44 24 04          	mov    %eax,0x4(%esp)
  804094:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  80409b:	e8 b5 a6 00 00       	call   80e755 <netconn_new_with_proto_and_callback>
  8040a0:	89 c3                	mov    %eax,%ebx
  8040a2:	eb 5b                	jmp    8040ff <lwip_socket+0x99>
  8040a4:	3d 88 00 00 00       	cmp    $0x88,%eax
  8040a9:	0f 94 c0             	sete   %al
  8040ac:	0f b6 c0             	movzbl %al,%eax
  8040af:	83 c0 20             	add    $0x20,%eax
  8040b2:	c7 44 24 08 dd 39 80 	movl   $0x8039dd,0x8(%esp)
  8040b9:	00 
  8040ba:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8040c1:	00 
  8040c2:	89 04 24             	mov    %eax,(%esp)
  8040c5:	e8 8b a6 00 00       	call   80e755 <netconn_new_with_proto_and_callback>
  8040ca:	89 c3                	mov    %eax,%ebx
  8040cc:	eb 31                	jmp    8040ff <lwip_socket+0x99>
  8040ce:	c7 44 24 08 dd 39 80 	movl   $0x8039dd,0x8(%esp)
  8040d5:	00 
  8040d6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8040dd:	00 
  8040de:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  8040e5:	e8 6b a6 00 00       	call   80e755 <netconn_new_with_proto_and_callback>
  8040ea:	89 c3                	mov    %eax,%ebx
  8040ec:	eb 11                	jmp    8040ff <lwip_socket+0x99>
  8040ee:	c7 05 60 e5 b3 00 16 	movl   $0x16,0xb3e560
  8040f5:	00 00 00 
  8040f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
  8040fd:	eb 44                	jmp    804143 <lwip_socket+0xdd>
  8040ff:	85 db                	test   %ebx,%ebx
  804101:	75 11                	jne    804114 <lwip_socket+0xae>
  804103:	c7 05 60 e5 b3 00 69 	movl   $0x69,0xb3e560
  80410a:	00 00 00 
  80410d:	be ff ff ff ff       	mov    $0xffffffff,%esi
  804112:	eb 2f                	jmp    804143 <lwip_socket+0xdd>
  804114:	89 d8                	mov    %ebx,%eax
  804116:	e8 43 fa ff ff       	call   803b5e <alloc_socket>
  80411b:	89 c6                	mov    %eax,%esi
  80411d:	83 f8 ff             	cmp    $0xffffffff,%eax
  804120:	75 14                	jne    804136 <lwip_socket+0xd0>
  804122:	89 1c 24             	mov    %ebx,(%esp)
  804125:	e8 ee a5 00 00       	call   80e718 <netconn_delete>
  80412a:	c7 05 60 e5 b3 00 17 	movl   $0x17,0xb3e560
  804131:	00 00 00 
  804134:	eb 0d                	jmp    804143 <lwip_socket+0xdd>
  804136:	89 43 1c             	mov    %eax,0x1c(%ebx)
  804139:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  804140:	00 00 00 
  804143:	89 f0                	mov    %esi,%eax
  804145:	83 c4 10             	add    $0x10,%esp
  804148:	5b                   	pop    %ebx
  804149:	5e                   	pop    %esi
  80414a:	5d                   	pop    %ebp
  80414b:	c3                   	ret    

0080414c <lwip_send>:
  80414c:	55                   	push   %ebp
  80414d:	89 e5                	mov    %esp,%ebp
  80414f:	83 ec 28             	sub    $0x28,%esp
  804152:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  804155:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  804158:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80415b:	8b 7d 08             	mov    0x8(%ebp),%edi
  80415e:	8b 75 10             	mov    0x10(%ebp),%esi
  804161:	89 f8                	mov    %edi,%eax
  804163:	e8 e8 ee ff ff       	call   803050 <get_socket>
  804168:	89 c3                	mov    %eax,%ebx
  80416a:	85 c0                	test   %eax,%eax
  80416c:	0f 84 82 00 00 00    	je     8041f4 <lwip_send+0xa8>
  804172:	8b 10                	mov    (%eax),%edx
  804174:	83 3a 10             	cmpl   $0x10,(%edx)
  804177:	74 2e                	je     8041a7 <lwip_send+0x5b>
  804179:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  804180:	00 
  804181:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  804188:	00 
  804189:	8b 45 14             	mov    0x14(%ebp),%eax
  80418c:	89 44 24 0c          	mov    %eax,0xc(%esp)
  804190:	89 74 24 08          	mov    %esi,0x8(%esp)
  804194:	8b 45 0c             	mov    0xc(%ebp),%eax
  804197:	89 44 24 04          	mov    %eax,0x4(%esp)
  80419b:	89 3c 24             	mov    %edi,(%esp)
  80419e:	e8 8e 00 00 00       	call   804231 <lwip_sendto>
  8041a3:	89 c6                	mov    %eax,%esi
  8041a5:	eb 52                	jmp    8041f9 <lwip_send+0xad>
  8041a7:	8b 45 14             	mov    0x14(%ebp),%eax
  8041aa:	83 e0 10             	and    $0x10,%eax
  8041ad:	83 f8 01             	cmp    $0x1,%eax
  8041b0:	19 c0                	sbb    %eax,%eax
  8041b2:	83 e0 fe             	and    $0xfffffffe,%eax
  8041b5:	83 c0 03             	add    $0x3,%eax
  8041b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8041bc:	89 74 24 08          	mov    %esi,0x8(%esp)
  8041c0:	8b 45 0c             	mov    0xc(%ebp),%eax
  8041c3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8041c7:	89 14 24             	mov    %edx,(%esp)
  8041ca:	e8 37 a0 00 00       	call   80e206 <netconn_write>
  8041cf:	89 c1                	mov    %eax,%ecx
  8041d1:	0f be c0             	movsbl %al,%eax
  8041d4:	f7 d8                	neg    %eax
  8041d6:	ba 05 00 00 00       	mov    $0x5,%edx
  8041db:	83 f8 0e             	cmp    $0xe,%eax
  8041de:	77 07                	ja     8041e7 <lwip_send+0x9b>
  8041e0:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  8041e7:	89 53 10             	mov    %edx,0x10(%ebx)
  8041ea:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  8041f0:	84 c9                	test   %cl,%cl
  8041f2:	74 05                	je     8041f9 <lwip_send+0xad>
  8041f4:	be ff ff ff ff       	mov    $0xffffffff,%esi
  8041f9:	89 f0                	mov    %esi,%eax
  8041fb:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8041fe:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  804201:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  804204:	89 ec                	mov    %ebp,%esp
  804206:	5d                   	pop    %ebp
  804207:	c3                   	ret    

00804208 <lwip_write>:
  804208:	55                   	push   %ebp
  804209:	89 e5                	mov    %esp,%ebp
  80420b:	83 ec 18             	sub    $0x18,%esp
  80420e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  804215:	00 
  804216:	8b 45 10             	mov    0x10(%ebp),%eax
  804219:	89 44 24 08          	mov    %eax,0x8(%esp)
  80421d:	8b 45 0c             	mov    0xc(%ebp),%eax
  804220:	89 44 24 04          	mov    %eax,0x4(%esp)
  804224:	8b 45 08             	mov    0x8(%ebp),%eax
  804227:	89 04 24             	mov    %eax,(%esp)
  80422a:	e8 1d ff ff ff       	call   80414c <lwip_send>
  80422f:	c9                   	leave  
  804230:	c3                   	ret    

00804231 <lwip_sendto>:
  804231:	55                   	push   %ebp
  804232:	89 e5                	mov    %esp,%ebp
  804234:	83 ec 48             	sub    $0x48,%esp
  804237:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80423a:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80423d:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  804240:	8b 7d 10             	mov    0x10(%ebp),%edi
  804243:	8b 5d 18             	mov    0x18(%ebp),%ebx
  804246:	8b 45 08             	mov    0x8(%ebp),%eax
  804249:	e8 02 ee ff ff       	call   803050 <get_socket>
  80424e:	89 c6                	mov    %eax,%esi
  804250:	85 c0                	test   %eax,%eax
  804252:	0f 84 2e 01 00 00    	je     804386 <lwip_sendto+0x155>
  804258:	8b 00                	mov    (%eax),%eax
  80425a:	83 38 10             	cmpl   $0x10,(%eax)
  80425d:	75 24                	jne    804283 <lwip_sendto+0x52>
  80425f:	8b 45 14             	mov    0x14(%ebp),%eax
  804262:	89 44 24 0c          	mov    %eax,0xc(%esp)
  804266:	89 7c 24 08          	mov    %edi,0x8(%esp)
  80426a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80426d:	89 44 24 04          	mov    %eax,0x4(%esp)
  804271:	8b 45 08             	mov    0x8(%ebp),%eax
  804274:	89 04 24             	mov    %eax,(%esp)
  804277:	e8 d0 fe ff ff       	call   80414c <lwip_send>
  80427c:	89 c7                	mov    %eax,%edi
  80427e:	e9 08 01 00 00       	jmp    80438b <lwip_sendto+0x15a>
  804283:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
  804289:	76 1c                	jbe    8042a7 <lwip_sendto+0x76>
  80428b:	c7 44 24 08 d8 29 81 	movl   $0x8129d8,0x8(%esp)
  804292:	00 
  804293:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
  80429a:	00 
  80429b:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  8042a2:	e8 e5 c5 ff ff       	call   80088c <_panic>
  8042a7:	85 db                	test   %ebx,%ebx
  8042a9:	0f 95 c0             	setne  %al
  8042ac:	84 c0                	test   %al,%al
  8042ae:	75 06                	jne    8042b6 <lwip_sendto+0x85>
  8042b0:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  8042b4:	74 28                	je     8042de <lwip_sendto+0xad>
  8042b6:	83 7d 1c 10          	cmpl   $0x10,0x1c(%ebp)
  8042ba:	75 06                	jne    8042c2 <lwip_sendto+0x91>
  8042bc:	80 7b 01 02          	cmpb   $0x2,0x1(%ebx)
  8042c0:	74 1c                	je     8042de <lwip_sendto+0xad>
  8042c2:	c7 44 24 08 56 29 81 	movl   $0x812956,0x8(%esp)
  8042c9:	00 
  8042ca:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
  8042d1:	00 
  8042d2:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  8042d9:	e8 ae c5 ff ff       	call   80088c <_panic>
  8042de:	c7 45 e4 00 00 00 00 	movl   $0x0,0xffffffe4(%ebp)
  8042e5:	c7 45 e0 00 00 00 00 	movl   $0x0,0xffffffe0(%ebp)
  8042ec:	84 c0                	test   %al,%al
  8042ee:	74 1e                	je     80430e <lwip_sendto+0xdd>
  8042f0:	8b 43 04             	mov    0x4(%ebx),%eax
  8042f3:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  8042f6:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  8042fa:	89 04 24             	mov    %eax,(%esp)
  8042fd:	e8 73 65 00 00       	call   80a875 <ntohs>
  804302:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  804305:	89 55 e8             	mov    %edx,0xffffffe8(%ebp)
  804308:	66 89 45 ec          	mov    %ax,0xffffffec(%ebp)
  80430c:	eb 14                	jmp    804322 <lwip_sendto+0xf1>
  80430e:	c7 45 f0 00 00 00 00 	movl   $0x0,0xfffffff0(%ebp)
  804315:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  80431c:	66 c7 45 ec 00 00    	movw   $0x0,0xffffffec(%ebp)
  804322:	0f b7 c7             	movzwl %di,%eax
  804325:	89 44 24 08          	mov    %eax,0x8(%esp)
  804329:	8b 45 0c             	mov    0xc(%ebp),%eax
  80432c:	89 44 24 04          	mov    %eax,0x4(%esp)
  804330:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  804333:	89 04 24             	mov    %eax,(%esp)
  804336:	e8 cb 0e 00 00       	call   805206 <netbuf_ref>
  80433b:	0f be d8             	movsbl %al,%ebx
  80433e:	84 c0                	test   %al,%al
  804340:	75 14                	jne    804356 <lwip_sendto+0x125>
  804342:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  804345:	89 44 24 04          	mov    %eax,0x4(%esp)
  804349:	8b 06                	mov    (%esi),%eax
  80434b:	89 04 24             	mov    %eax,(%esp)
  80434e:	e8 30 9f 00 00       	call   80e283 <netconn_send>
  804353:	0f be d8             	movsbl %al,%ebx
  804356:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  804359:	85 c0                	test   %eax,%eax
  80435b:	74 08                	je     804365 <lwip_sendto+0x134>
  80435d:	89 04 24             	mov    %eax,(%esp)
  804360:	e8 2f 37 00 00       	call   807a94 <pbuf_free>
  804365:	89 da                	mov    %ebx,%edx
  804367:	f7 da                	neg    %edx
  804369:	b8 05 00 00 00       	mov    $0x5,%eax
  80436e:	83 fa 0e             	cmp    $0xe,%edx
  804371:	77 07                	ja     80437a <lwip_sendto+0x149>
  804373:	8b 04 95 00 2a 81 00 	mov    0x812a00(,%edx,4),%eax
  80437a:	89 46 10             	mov    %eax,0x10(%esi)
  80437d:	a3 60 e5 b3 00       	mov    %eax,0xb3e560
  804382:	85 db                	test   %ebx,%ebx
  804384:	74 05                	je     80438b <lwip_sendto+0x15a>
  804386:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  80438b:	89 f8                	mov    %edi,%eax
  80438d:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  804390:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  804393:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  804396:	89 ec                	mov    %ebp,%esp
  804398:	5d                   	pop    %ebp
  804399:	c3                   	ret    

0080439a <lwip_recvfrom>:
  80439a:	55                   	push   %ebp
  80439b:	89 e5                	mov    %esp,%ebp
  80439d:	57                   	push   %edi
  80439e:	56                   	push   %esi
  80439f:	53                   	push   %ebx
  8043a0:	83 ec 3c             	sub    $0x3c,%esp
  8043a3:	8b 45 08             	mov    0x8(%ebp),%eax
  8043a6:	e8 a5 ec ff ff       	call   803050 <get_socket>
  8043ab:	89 c3                	mov    %eax,%ebx
  8043ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8043b2:	85 db                	test   %ebx,%ebx
  8043b4:	0f 84 19 02 00 00    	je     8045d3 <lwip_recvfrom+0x239>
  8043ba:	66 c7 45 d0 00 00    	movw   $0x0,0xffffffd0(%ebp)
  8043c0:	c6 45 d3 00          	movb   $0x0,0xffffffd3(%ebp)
  8043c4:	8b 73 04             	mov    0x4(%ebx),%esi
  8043c7:	85 f6                	test   %esi,%esi
  8043c9:	75 6b                	jne    804436 <lwip_recvfrom+0x9c>
  8043cb:	f6 45 14 08          	testb  $0x8,0x14(%ebp)
  8043cf:	75 06                	jne    8043d7 <lwip_recvfrom+0x3d>
  8043d1:	f6 43 0f 08          	testb  $0x8,0xf(%ebx)
  8043d5:	74 0f                	je     8043e6 <lwip_recvfrom+0x4c>
  8043d7:	66 83 7b 0a 00       	cmpw   $0x0,0xa(%ebx)
  8043dc:	8d 74 26 00          	lea    0x0(%esi),%esi
  8043e0:	0f 84 51 01 00 00    	je     804537 <lwip_recvfrom+0x19d>
  8043e6:	8b 03                	mov    (%ebx),%eax
  8043e8:	89 04 24             	mov    %eax,(%esp)
  8043eb:	e8 7c a1 00 00       	call   80e56c <netconn_recv>
  8043f0:	89 c6                	mov    %eax,%esi
  8043f2:	89 43 04             	mov    %eax,0x4(%ebx)
  8043f5:	85 c0                	test   %eax,%eax
  8043f7:	75 3d                	jne    804436 <lwip_recvfrom+0x9c>
  8043f9:	8b 03                	mov    (%ebx),%eax
  8043fb:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  8043ff:	74 0b                	je     80440c <lwip_recvfrom+0x72>
  804401:	ba 6e 00 00 00       	mov    $0x6e,%edx
  804406:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80440a:	74 17                	je     804423 <lwip_recvfrom+0x89>
  80440c:	0f be 40 0c          	movsbl 0xc(%eax),%eax
  804410:	f7 d8                	neg    %eax
  804412:	ba 05 00 00 00       	mov    $0x5,%edx
  804417:	83 f8 0e             	cmp    $0xe,%eax
  80441a:	77 07                	ja     804423 <lwip_recvfrom+0x89>
  80441c:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  804423:	89 53 10             	mov    %edx,0x10(%ebx)
  804426:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  80442c:	b8 00 00 00 00       	mov    $0x0,%eax
  804431:	e9 9d 01 00 00       	jmp    8045d3 <lwip_recvfrom+0x239>
  804436:	8b 0e                	mov    (%esi),%ecx
  804438:	0f b7 41 08          	movzwl 0x8(%ecx),%eax
  80443c:	0f b7 53 08          	movzwl 0x8(%ebx),%edx
  804440:	66 29 d0             	sub    %dx,%ax
  804443:	0f b7 f8             	movzwl %ax,%edi
  804446:	89 7d c8             	mov    %edi,0xffffffc8(%ebp)
  804449:	89 c7                	mov    %eax,%edi
  80444b:	8b 45 c8             	mov    0xffffffc8(%ebp),%eax
  80444e:	39 45 10             	cmp    %eax,0x10(%ebp)
  804451:	7f 04                	jg     804457 <lwip_recvfrom+0xbd>
  804453:	0f b7 7d 10          	movzwl 0x10(%ebp),%edi
  804457:	0f b7 c7             	movzwl %di,%eax
  80445a:	89 45 cc             	mov    %eax,0xffffffcc(%ebp)
  80445d:	0f b7 c2             	movzwl %dx,%eax
  804460:	89 44 24 0c          	mov    %eax,0xc(%esp)
  804464:	8b 55 cc             	mov    0xffffffcc(%ebp),%edx
  804467:	89 54 24 08          	mov    %edx,0x8(%esp)
  80446b:	0f b7 45 d0          	movzwl 0xffffffd0(%ebp),%eax
  80446f:	03 45 0c             	add    0xc(%ebp),%eax
  804472:	89 44 24 04          	mov    %eax,0x4(%esp)
  804476:	89 0c 24             	mov    %ecx,(%esp)
  804479:	e8 95 33 00 00       	call   807813 <pbuf_copy_partial>
  80447e:	66 01 7d d0          	add    %di,0xffffffd0(%ebp)
  804482:	8b 03                	mov    (%ebx),%eax
  804484:	89 04 24             	mov    %eax,(%esp)
  804487:	e8 04 9d 00 00       	call   80e190 <netconn_type>
  80448c:	83 f8 10             	cmp    $0x10,%eax
  80448f:	75 1b                	jne    8044ac <lwip_recvfrom+0x112>
  804491:	8b 45 cc             	mov    0xffffffcc(%ebp),%eax
  804494:	29 45 10             	sub    %eax,0x10(%ebp)
  804497:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  80449b:	7e 0f                	jle    8044ac <lwip_recvfrom+0x112>
  80449d:	8b 06                	mov    (%esi),%eax
  80449f:	f6 40 0d 01          	testb  $0x1,0xd(%eax)
  8044a3:	75 07                	jne    8044ac <lwip_recvfrom+0x112>
  8044a5:	66 83 7b 0a 00       	cmpw   $0x0,0xa(%ebx)
  8044aa:	75 04                	jne    8044b0 <lwip_recvfrom+0x116>
  8044ac:	c6 45 d3 01          	movb   $0x1,0xffffffd3(%ebp)
  8044b0:	f6 45 14 01          	testb  $0x1,0x14(%ebp)
  8044b4:	75 39                	jne    8044ef <lwip_recvfrom+0x155>
  8044b6:	8b 03                	mov    (%ebx),%eax
  8044b8:	83 38 10             	cmpl   $0x10,(%eax)
  8044bb:	75 13                	jne    8044d0 <lwip_recvfrom+0x136>
  8044bd:	8b 45 c8             	mov    0xffffffc8(%ebp),%eax
  8044c0:	2b 45 cc             	sub    0xffffffcc(%ebp),%eax
  8044c3:	85 c0                	test   %eax,%eax
  8044c5:	7e 09                	jle    8044d0 <lwip_recvfrom+0x136>
  8044c7:	89 73 04             	mov    %esi,0x4(%ebx)
  8044ca:	66 01 7b 08          	add    %di,0x8(%ebx)
  8044ce:	eb 15                	jmp    8044e5 <lwip_recvfrom+0x14b>
  8044d0:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  8044d7:	66 c7 43 08 00 00    	movw   $0x0,0x8(%ebx)
  8044dd:	89 34 24             	mov    %esi,(%esp)
  8044e0:	e8 e2 0c 00 00       	call   8051c7 <netbuf_delete>
  8044e5:	80 7d d3 00          	cmpb   $0x0,0xffffffd3(%ebp)
  8044e9:	0f 84 d5 fe ff ff    	je     8043c4 <lwip_recvfrom+0x2a>
  8044ef:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
  8044f3:	0f 84 c5 00 00 00    	je     8045be <lwip_recvfrom+0x224>
  8044f9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  8044fd:	8d 76 00             	lea    0x0(%esi),%esi
  804500:	0f 84 b8 00 00 00    	je     8045be <lwip_recvfrom+0x224>
  804506:	8b 03                	mov    (%ebx),%eax
  804508:	89 04 24             	mov    %eax,(%esp)
  80450b:	e8 80 9c 00 00       	call   80e190 <netconn_type>
  804510:	83 f8 10             	cmp    $0x10,%eax
  804513:	75 3d                	jne    804552 <lwip_recvfrom+0x1b8>
  804515:	8d 7d e4             	lea    0xffffffe4(%ebp),%edi
  804518:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80451f:	00 
  804520:	8d 45 f2             	lea    0xfffffff2(%ebp),%eax
  804523:	89 44 24 08          	mov    %eax,0x8(%esp)
  804527:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80452b:	8b 03                	mov    (%ebx),%eax
  80452d:	89 04 24             	mov    %eax,(%esp)
  804530:	e8 11 9f 00 00       	call   80e446 <netconn_getaddr>
  804535:	eb 26                	jmp    80455d <lwip_recvfrom+0x1c3>
  804537:	c7 43 10 0b 00 00 00 	movl   $0xb,0x10(%ebx)
  80453e:	c7 05 60 e5 b3 00 0b 	movl   $0xb,0xb3e560
  804545:	00 00 00 
  804548:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80454d:	e9 81 00 00 00       	jmp    8045d3 <lwip_recvfrom+0x239>
  804552:	8b 7e 08             	mov    0x8(%esi),%edi
  804555:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  804559:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  80455d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  804564:	00 
  804565:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80456c:	00 
  80456d:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  804570:	89 04 24             	mov    %eax,(%esp)
  804573:	e8 19 cc ff ff       	call   801191 <memset>
  804578:	c6 45 e0 10          	movb   $0x10,0xffffffe0(%ebp)
  80457c:	c6 45 e1 02          	movb   $0x2,0xffffffe1(%ebp)
  804580:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  804584:	89 04 24             	mov    %eax,(%esp)
  804587:	e8 d3 62 00 00       	call   80a85f <htons>
  80458c:	66 89 45 e2          	mov    %ax,0xffffffe2(%ebp)
  804590:	8b 07                	mov    (%edi),%eax
  804592:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  804595:	8b 55 1c             	mov    0x1c(%ebp),%edx
  804598:	83 3a 10             	cmpl   $0x10,(%edx)
  80459b:	76 06                	jbe    8045a3 <lwip_recvfrom+0x209>
  80459d:	c7 02 10 00 00 00    	movl   $0x10,(%edx)
  8045a3:	8b 7d 1c             	mov    0x1c(%ebp),%edi
  8045a6:	8b 07                	mov    (%edi),%eax
  8045a8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8045ac:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  8045af:	89 44 24 04          	mov    %eax,0x4(%esp)
  8045b3:	8b 45 18             	mov    0x18(%ebp),%eax
  8045b6:	89 04 24             	mov    %eax,(%esp)
  8045b9:	e8 aa cc ff ff       	call   801268 <memcpy>
  8045be:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  8045c5:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  8045cc:	00 00 00 
  8045cf:	0f b7 45 d0          	movzwl 0xffffffd0(%ebp),%eax
  8045d3:	83 c4 3c             	add    $0x3c,%esp
  8045d6:	5b                   	pop    %ebx
  8045d7:	5e                   	pop    %esi
  8045d8:	5f                   	pop    %edi
  8045d9:	5d                   	pop    %ebp
  8045da:	c3                   	ret    

008045db <lwip_recv>:
  8045db:	55                   	push   %ebp
  8045dc:	89 e5                	mov    %esp,%ebp
  8045de:	83 ec 18             	sub    $0x18,%esp
  8045e1:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  8045e8:	00 
  8045e9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  8045f0:	00 
  8045f1:	8b 45 14             	mov    0x14(%ebp),%eax
  8045f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8045f8:	8b 45 10             	mov    0x10(%ebp),%eax
  8045fb:	89 44 24 08          	mov    %eax,0x8(%esp)
  8045ff:	8b 45 0c             	mov    0xc(%ebp),%eax
  804602:	89 44 24 04          	mov    %eax,0x4(%esp)
  804606:	8b 45 08             	mov    0x8(%ebp),%eax
  804609:	89 04 24             	mov    %eax,(%esp)
  80460c:	e8 89 fd ff ff       	call   80439a <lwip_recvfrom>
  804611:	c9                   	leave  
  804612:	c3                   	ret    

00804613 <lwip_read>:
  804613:	55                   	push   %ebp
  804614:	89 e5                	mov    %esp,%ebp
  804616:	83 ec 18             	sub    $0x18,%esp
  804619:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  804620:	00 
  804621:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  804628:	00 
  804629:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  804630:	00 
  804631:	8b 45 10             	mov    0x10(%ebp),%eax
  804634:	89 44 24 08          	mov    %eax,0x8(%esp)
  804638:	8b 45 0c             	mov    0xc(%ebp),%eax
  80463b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80463f:	8b 45 08             	mov    0x8(%ebp),%eax
  804642:	89 04 24             	mov    %eax,(%esp)
  804645:	e8 50 fd ff ff       	call   80439a <lwip_recvfrom>
  80464a:	c9                   	leave  
  80464b:	c3                   	ret    

0080464c <lwip_close>:
  80464c:	55                   	push   %ebp
  80464d:	89 e5                	mov    %esp,%ebp
  80464f:	53                   	push   %ebx
  804650:	83 ec 04             	sub    $0x4,%esp
  804653:	8b 45 08             	mov    0x8(%ebp),%eax
  804656:	e8 f5 e9 ff ff       	call   803050 <get_socket>
  80465b:	89 c3                	mov    %eax,%ebx
  80465d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804662:	85 db                	test   %ebx,%ebx
  804664:	74 5c                	je     8046c2 <lwip_close+0x76>
  804666:	8b 03                	mov    (%ebx),%eax
  804668:	89 04 24             	mov    %eax,(%esp)
  80466b:	e8 a8 a0 00 00       	call   80e718 <netconn_delete>
  804670:	a1 64 86 81 00       	mov    0x818664,%eax
  804675:	89 04 24             	mov    %eax,(%esp)
  804678:	e8 1e 3b 00 00       	call   80819b <sys_sem_wait>
  80467d:	8b 43 04             	mov    0x4(%ebx),%eax
  804680:	85 c0                	test   %eax,%eax
  804682:	74 08                	je     80468c <lwip_close+0x40>
  804684:	89 04 24             	mov    %eax,(%esp)
  804687:	e8 3b 0b 00 00       	call   8051c7 <netbuf_delete>
  80468c:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  804693:	66 c7 43 08 00 00    	movw   $0x0,0x8(%ebx)
  804699:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  80469f:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  8046a6:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  8046ad:	00 00 00 
  8046b0:	a1 64 86 81 00       	mov    0x818664,%eax
  8046b5:	89 04 24             	mov    %eax,(%esp)
  8046b8:	e8 f5 90 00 00       	call   80d7b2 <sys_sem_signal>
  8046bd:	b8 00 00 00 00       	mov    $0x0,%eax
  8046c2:	83 c4 04             	add    $0x4,%esp
  8046c5:	5b                   	pop    %ebx
  8046c6:	5d                   	pop    %ebp
  8046c7:	c3                   	ret    

008046c8 <lwip_shutdown>:
  8046c8:	55                   	push   %ebp
  8046c9:	89 e5                	mov    %esp,%ebp
  8046cb:	83 ec 08             	sub    $0x8,%esp
  8046ce:	8b 45 08             	mov    0x8(%ebp),%eax
  8046d1:	89 04 24             	mov    %eax,(%esp)
  8046d4:	e8 73 ff ff ff       	call   80464c <lwip_close>
  8046d9:	c9                   	leave  
  8046da:	c3                   	ret    

008046db <lwip_listen>:
  8046db:	55                   	push   %ebp
  8046dc:	89 e5                	mov    %esp,%ebp
  8046de:	53                   	push   %ebx
  8046df:	83 ec 14             	sub    $0x14,%esp
  8046e2:	8b 45 08             	mov    0x8(%ebp),%eax
  8046e5:	e8 66 e9 ff ff       	call   803050 <get_socket>
  8046ea:	89 c3                	mov    %eax,%ebx
  8046ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8046f1:	85 db                	test   %ebx,%ebx
  8046f3:	74 6a                	je     80475f <lwip_listen+0x84>
  8046f5:	8b 55 0c             	mov    0xc(%ebp),%edx
  8046f8:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  8046fe:	7e 05                	jle    804705 <lwip_listen+0x2a>
  804700:	ba ff 00 00 00       	mov    $0xff,%edx
  804705:	89 d0                	mov    %edx,%eax
  804707:	c1 f8 1f             	sar    $0x1f,%eax
  80470a:	f7 d0                	not    %eax
  80470c:	21 d0                	and    %edx,%eax
  80470e:	0f b6 c0             	movzbl %al,%eax
  804711:	89 44 24 04          	mov    %eax,0x4(%esp)
  804715:	8b 03                	mov    (%ebx),%eax
  804717:	89 04 24             	mov    %eax,(%esp)
  80471a:	e8 e7 9b 00 00       	call   80e306 <netconn_listen_with_backlog>
  80471f:	84 c0                	test   %al,%al
  804721:	74 26                	je     804749 <lwip_listen+0x6e>
  804723:	0f be c0             	movsbl %al,%eax
  804726:	f7 d8                	neg    %eax
  804728:	ba 05 00 00 00       	mov    $0x5,%edx
  80472d:	83 f8 0e             	cmp    $0xe,%eax
  804730:	77 07                	ja     804739 <lwip_listen+0x5e>
  804732:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  804739:	89 53 10             	mov    %edx,0x10(%ebx)
  80473c:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  804742:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804747:	eb 16                	jmp    80475f <lwip_listen+0x84>
  804749:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  804750:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  804757:	00 00 00 
  80475a:	b8 00 00 00 00       	mov    $0x0,%eax
  80475f:	83 c4 14             	add    $0x14,%esp
  804762:	5b                   	pop    %ebx
  804763:	5d                   	pop    %ebp
  804764:	c3                   	ret    

00804765 <lwip_connect>:
  804765:	55                   	push   %ebp
  804766:	89 e5                	mov    %esp,%ebp
  804768:	53                   	push   %ebx
  804769:	83 ec 24             	sub    $0x24,%esp
  80476c:	8b 45 08             	mov    0x8(%ebp),%eax
  80476f:	e8 dc e8 ff ff       	call   803050 <get_socket>
  804774:	89 c3                	mov    %eax,%ebx
  804776:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80477b:	85 db                	test   %ebx,%ebx
  80477d:	0f 84 95 00 00 00    	je     804818 <lwip_connect+0xb3>
  804783:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
  804787:	75 09                	jne    804792 <lwip_connect+0x2d>
  804789:	8b 55 0c             	mov    0xc(%ebp),%edx
  80478c:	80 7a 01 02          	cmpb   $0x2,0x1(%edx)
  804790:	74 1c                	je     8047ae <lwip_connect+0x49>
  804792:	c7 44 24 08 73 29 81 	movl   $0x812973,0x8(%esp)
  804799:	00 
  80479a:	c7 44 24 04 86 01 00 	movl   $0x186,0x4(%esp)
  8047a1:	00 
  8047a2:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  8047a9:	e8 de c0 ff ff       	call   80088c <_panic>
  8047ae:	8b 42 04             	mov    0x4(%edx),%eax
  8047b1:	89 45 f8             	mov    %eax,0xfffffff8(%ebp)
  8047b4:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  8047b8:	89 04 24             	mov    %eax,(%esp)
  8047bb:	e8 b5 60 00 00       	call   80a875 <ntohs>
  8047c0:	0f b7 c0             	movzwl %ax,%eax
  8047c3:	89 44 24 08          	mov    %eax,0x8(%esp)
  8047c7:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  8047ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  8047ce:	8b 03                	mov    (%ebx),%eax
  8047d0:	89 04 24             	mov    %eax,(%esp)
  8047d3:	e8 c0 9b 00 00       	call   80e398 <netconn_connect>
  8047d8:	84 c0                	test   %al,%al
  8047da:	74 26                	je     804802 <lwip_connect+0x9d>
  8047dc:	0f be c0             	movsbl %al,%eax
  8047df:	f7 d8                	neg    %eax
  8047e1:	ba 05 00 00 00       	mov    $0x5,%edx
  8047e6:	83 f8 0e             	cmp    $0xe,%eax
  8047e9:	77 07                	ja     8047f2 <lwip_connect+0x8d>
  8047eb:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  8047f2:	89 53 10             	mov    %edx,0x10(%ebx)
  8047f5:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  8047fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804800:	eb 16                	jmp    804818 <lwip_connect+0xb3>
  804802:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  804809:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  804810:	00 00 00 
  804813:	b8 00 00 00 00       	mov    $0x0,%eax
  804818:	83 c4 24             	add    $0x24,%esp
  80481b:	5b                   	pop    %ebx
  80481c:	5d                   	pop    %ebp
  80481d:	c3                   	ret    

0080481e <lwip_bind>:
  80481e:	55                   	push   %ebp
  80481f:	89 e5                	mov    %esp,%ebp
  804821:	53                   	push   %ebx
  804822:	83 ec 24             	sub    $0x24,%esp
  804825:	8b 45 08             	mov    0x8(%ebp),%eax
  804828:	e8 23 e8 ff ff       	call   803050 <get_socket>
  80482d:	89 c3                	mov    %eax,%ebx
  80482f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804834:	85 db                	test   %ebx,%ebx
  804836:	0f 84 95 00 00 00    	je     8048d1 <lwip_bind+0xb3>
  80483c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
  804840:	75 09                	jne    80484b <lwip_bind+0x2d>
  804842:	8b 55 0c             	mov    0xc(%ebp),%edx
  804845:	80 7a 01 02          	cmpb   $0x2,0x1(%edx)
  804849:	74 1c                	je     804867 <lwip_bind+0x49>
  80484b:	c7 44 24 08 91 29 81 	movl   $0x812991,0x8(%esp)
  804852:	00 
  804853:	c7 44 24 04 4a 01 00 	movl   $0x14a,0x4(%esp)
  80485a:	00 
  80485b:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  804862:	e8 25 c0 ff ff       	call   80088c <_panic>
  804867:	8b 42 04             	mov    0x4(%edx),%eax
  80486a:	89 45 f8             	mov    %eax,0xfffffff8(%ebp)
  80486d:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  804871:	89 04 24             	mov    %eax,(%esp)
  804874:	e8 fc 5f 00 00       	call   80a875 <ntohs>
  804879:	0f b7 c0             	movzwl %ax,%eax
  80487c:	89 44 24 08          	mov    %eax,0x8(%esp)
  804880:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  804883:	89 44 24 04          	mov    %eax,0x4(%esp)
  804887:	8b 03                	mov    (%ebx),%eax
  804889:	89 04 24             	mov    %eax,(%esp)
  80488c:	e8 5e 9b 00 00       	call   80e3ef <netconn_bind>
  804891:	84 c0                	test   %al,%al
  804893:	74 26                	je     8048bb <lwip_bind+0x9d>
  804895:	0f be c0             	movsbl %al,%eax
  804898:	f7 d8                	neg    %eax
  80489a:	ba 05 00 00 00       	mov    $0x5,%edx
  80489f:	83 f8 0e             	cmp    $0xe,%eax
  8048a2:	77 07                	ja     8048ab <lwip_bind+0x8d>
  8048a4:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  8048ab:	89 53 10             	mov    %edx,0x10(%ebx)
  8048ae:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  8048b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8048b9:	eb 16                	jmp    8048d1 <lwip_bind+0xb3>
  8048bb:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  8048c2:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  8048c9:	00 00 00 
  8048cc:	b8 00 00 00 00       	mov    $0x0,%eax
  8048d1:	83 c4 24             	add    $0x24,%esp
  8048d4:	5b                   	pop    %ebx
  8048d5:	5d                   	pop    %ebp
  8048d6:	c3                   	ret    

008048d7 <lwip_accept>:
  8048d7:	55                   	push   %ebp
  8048d8:	89 e5                	mov    %esp,%ebp
  8048da:	57                   	push   %edi
  8048db:	56                   	push   %esi
  8048dc:	53                   	push   %ebx
  8048dd:	83 ec 3c             	sub    $0x3c,%esp
  8048e0:	8b 45 08             	mov    0x8(%ebp),%eax
  8048e3:	e8 68 e7 ff ff       	call   803050 <get_socket>
  8048e8:	89 c7                	mov    %eax,%edi
  8048ea:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,0xffffffd0(%ebp)
  8048f1:	85 c0                	test   %eax,%eax
  8048f3:	0f 84 b3 01 00 00    	je     804aac <lwip_accept+0x1d5>
  8048f9:	8b 00                	mov    (%eax),%eax
  8048fb:	89 04 24             	mov    %eax,(%esp)
  8048fe:	e8 df 9b 00 00       	call   80e4e2 <netconn_accept>
  804903:	89 c6                	mov    %eax,%esi
  804905:	85 c0                	test   %eax,%eax
  804907:	75 2e                	jne    804937 <lwip_accept+0x60>
  804909:	8b 07                	mov    (%edi),%eax
  80490b:	0f be 40 0c          	movsbl 0xc(%eax),%eax
  80490f:	f7 d8                	neg    %eax
  804911:	ba 05 00 00 00       	mov    $0x5,%edx
  804916:	83 f8 0e             	cmp    $0xe,%eax
  804919:	77 07                	ja     804922 <lwip_accept+0x4b>
  80491b:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  804922:	89 57 10             	mov    %edx,0x10(%edi)
  804925:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  80492b:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,0xffffffd0(%ebp)
  804932:	e9 75 01 00 00       	jmp    804aac <lwip_accept+0x1d5>
  804937:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80493e:	00 
  80493f:	8d 45 ee             	lea    0xffffffee(%ebp),%eax
  804942:	89 44 24 08          	mov    %eax,0x8(%esp)
  804946:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  804949:	89 44 24 04          	mov    %eax,0x4(%esp)
  80494d:	89 34 24             	mov    %esi,(%esp)
  804950:	e8 f1 9a 00 00       	call   80e446 <netconn_getaddr>
  804955:	89 c3                	mov    %eax,%ebx
  804957:	84 c0                	test   %al,%al
  804959:	74 33                	je     80498e <lwip_accept+0xb7>
  80495b:	89 34 24             	mov    %esi,(%esp)
  80495e:	e8 b5 9d 00 00       	call   80e718 <netconn_delete>
  804963:	0f be c3             	movsbl %bl,%eax
  804966:	f7 d8                	neg    %eax
  804968:	ba 05 00 00 00       	mov    $0x5,%edx
  80496d:	83 f8 0e             	cmp    $0xe,%eax
  804970:	77 07                	ja     804979 <lwip_accept+0xa2>
  804972:	8b 14 85 00 2a 81 00 	mov    0x812a00(,%eax,4),%edx
  804979:	89 57 10             	mov    %edx,0x10(%edi)
  80497c:	89 15 60 e5 b3 00    	mov    %edx,0xb3e560
  804982:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,0xffffffd0(%ebp)
  804989:	e9 1e 01 00 00       	jmp    804aac <lwip_accept+0x1d5>
  80498e:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  804995:	00 
  804996:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80499d:	00 
  80499e:	8d 45 dc             	lea    0xffffffdc(%ebp),%eax
  8049a1:	89 04 24             	mov    %eax,(%esp)
  8049a4:	e8 e8 c7 ff ff       	call   801191 <memset>
  8049a9:	c6 45 dc 10          	movb   $0x10,0xffffffdc(%ebp)
  8049ad:	c6 45 dd 02          	movb   $0x2,0xffffffdd(%ebp)
  8049b1:	0f b7 45 ee          	movzwl 0xffffffee(%ebp),%eax
  8049b5:	89 04 24             	mov    %eax,(%esp)
  8049b8:	e8 a2 5e 00 00       	call   80a85f <htons>
  8049bd:	66 89 45 de          	mov    %ax,0xffffffde(%ebp)
  8049c1:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  8049c4:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  8049c7:	8b 45 10             	mov    0x10(%ebp),%eax
  8049ca:	83 38 10             	cmpl   $0x10,(%eax)
  8049cd:	76 06                	jbe    8049d5 <lwip_accept+0xfe>
  8049cf:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
  8049d5:	8b 55 10             	mov    0x10(%ebp),%edx
  8049d8:	8b 02                	mov    (%edx),%eax
  8049da:	89 44 24 08          	mov    %eax,0x8(%esp)
  8049de:	8d 45 dc             	lea    0xffffffdc(%ebp),%eax
  8049e1:	89 44 24 04          	mov    %eax,0x4(%esp)
  8049e5:	8b 45 0c             	mov    0xc(%ebp),%eax
  8049e8:	89 04 24             	mov    %eax,(%esp)
  8049eb:	e8 78 c8 ff ff       	call   801268 <memcpy>
  8049f0:	89 f0                	mov    %esi,%eax
  8049f2:	e8 67 f1 ff ff       	call   803b5e <alloc_socket>
  8049f7:	89 45 d0             	mov    %eax,0xffffffd0(%ebp)
  8049fa:	83 f8 ff             	cmp    $0xffffffff,%eax
  8049fd:	75 1e                	jne    804a1d <lwip_accept+0x146>
  8049ff:	89 34 24             	mov    %esi,(%esp)
  804a02:	e8 11 9d 00 00       	call   80e718 <netconn_delete>
  804a07:	c7 47 10 17 00 00 00 	movl   $0x17,0x10(%edi)
  804a0e:	c7 05 60 e5 b3 00 17 	movl   $0x17,0xb3e560
  804a15:	00 00 00 
  804a18:	e9 8f 00 00 00       	jmp    804aac <lwip_accept+0x1d5>
  804a1d:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  804a20:	83 f8 1f             	cmp    $0x1f,%eax
  804a23:	76 1c                	jbe    804a41 <lwip_accept+0x16a>
  804a25:	c7 44 24 08 ac 29 81 	movl   $0x8129ac,0x8(%esp)
  804a2c:	00 
  804a2d:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
  804a34:	00 
  804a35:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  804a3c:	e8 4b be ff ff       	call   80088c <_panic>
  804a41:	c7 46 2c dd 39 80 00 	movl   $0x8039dd,0x2c(%esi)
  804a48:	8d 04 80             	lea    (%eax,%eax,4),%eax
  804a4b:	8d 1c 85 e0 83 81 00 	lea    0x8183e0(,%eax,4),%ebx
  804a52:	85 db                	test   %ebx,%ebx
  804a54:	75 1c                	jne    804a72 <lwip_accept+0x19b>
  804a56:	c7 44 24 08 c1 29 81 	movl   $0x8129c1,0x8(%esp)
  804a5d:	00 
  804a5e:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
  804a65:	00 
  804a66:	c7 04 24 31 29 81 00 	movl   $0x812931,(%esp)
  804a6d:	e8 1a be ff ff       	call   80088c <_panic>
  804a72:	a1 64 86 81 00       	mov    0x818664,%eax
  804a77:	89 04 24             	mov    %eax,(%esp)
  804a7a:	e8 1c 37 00 00       	call   80819b <sys_sem_wait>
  804a7f:	8b 46 1c             	mov    0x1c(%esi),%eax
  804a82:	f7 d0                	not    %eax
  804a84:	66 01 43 0a          	add    %ax,0xa(%ebx)
  804a88:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  804a8b:	89 46 1c             	mov    %eax,0x1c(%esi)
  804a8e:	a1 64 86 81 00       	mov    0x818664,%eax
  804a93:	89 04 24             	mov    %eax,(%esp)
  804a96:	e8 17 8d 00 00       	call   80d7b2 <sys_sem_signal>
  804a9b:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
  804aa2:	c7 05 60 e5 b3 00 00 	movl   $0x0,0xb3e560
  804aa9:	00 00 00 
  804aac:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  804aaf:	83 c4 3c             	add    $0x3c,%esp
  804ab2:	5b                   	pop    %ebx
  804ab3:	5e                   	pop    %esi
  804ab4:	5f                   	pop    %edi
  804ab5:	5d                   	pop    %ebp
  804ab6:	c3                   	ret    
	...

00804ac0 <pbuf_free_int>:
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  804ac0:	55                   	push   %ebp
  804ac1:	89 e5                	mov    %esp,%ebp
  804ac3:	83 ec 08             	sub    $0x8,%esp
  struct pbuf *q = p;
  pbuf_free(q);
  804ac6:	8b 45 08             	mov    0x8(%ebp),%eax
  804ac9:	89 04 24             	mov    %eax,(%esp)
  804acc:	e8 c3 2f 00 00       	call   807a94 <pbuf_free>
}
  804ad1:	c9                   	leave  
  804ad2:	c3                   	ret    

00804ad3 <tcpip_init>:
  804ad3:	55                   	push   %ebp
  804ad4:	89 e5                	mov    %esp,%ebp
  804ad6:	83 ec 18             	sub    $0x18,%esp
  804ad9:	e8 92 08 00 00       	call   805370 <lwip_init>
  804ade:	8b 45 08             	mov    0x8(%ebp),%eax
  804ae1:	a3 6c 86 81 00       	mov    %eax,0x81866c
  804ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
  804ae9:	a3 70 86 81 00       	mov    %eax,0x818670
  804aee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  804af5:	e8 a1 8b 00 00       	call   80d69b <sys_mbox_new>
  804afa:	a3 3c 80 81 00       	mov    %eax,0x81803c
  804aff:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
  804b06:	00 
  804b07:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  804b0e:	00 
  804b0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804b16:	00 
  804b17:	c7 44 24 04 76 4b 80 	movl   $0x804b76,0x4(%esp)
  804b1e:	00 
  804b1f:	c7 04 24 3c 2a 81 00 	movl   $0x812a3c,(%esp)
  804b26:	e8 e6 88 00 00       	call   80d411 <sys_thread_new>
  804b2b:	c9                   	leave  
  804b2c:	c3                   	ret    

00804b2d <tcp_timer_needed>:
  804b2d:	55                   	push   %ebp
  804b2e:	89 e5                	mov    %esp,%ebp
  804b30:	83 ec 18             	sub    $0x18,%esp
  804b33:	83 3d 74 86 81 00 00 	cmpl   $0x0,0x818674
  804b3a:	75 38                	jne    804b74 <tcp_timer_needed+0x47>
  804b3c:	83 3d c8 e5 b3 00 00 	cmpl   $0x0,0xb3e5c8
  804b43:	75 09                	jne    804b4e <tcp_timer_needed+0x21>
  804b45:	83 3d dc e5 b3 00 00 	cmpl   $0x0,0xb3e5dc
  804b4c:	74 26                	je     804b74 <tcp_timer_needed+0x47>
  804b4e:	c7 05 74 86 81 00 01 	movl   $0x1,0x818674
  804b55:	00 00 00 
  804b58:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804b5f:	00 
  804b60:	c7 44 24 04 a2 4f 80 	movl   $0x804fa2,0x4(%esp)
  804b67:	00 
  804b68:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  804b6f:	e8 66 35 00 00       	call   8080da <sys_timeout>
  804b74:	c9                   	leave  
  804b75:	c3                   	ret    

00804b76 <tcpip_thread>:
  804b76:	55                   	push   %ebp
  804b77:	89 e5                	mov    %esp,%ebp
  804b79:	83 ec 28             	sub    $0x28,%esp
  804b7c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804b83:	00 
  804b84:	c7 44 24 04 6b 4d 80 	movl   $0x804d6b,0x4(%esp)
  804b8b:	00 
  804b8c:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
  804b93:	e8 42 35 00 00       	call   8080da <sys_timeout>
  804b98:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804b9f:	00 
  804ba0:	c7 44 24 04 42 4d 80 	movl   $0x804d42,0x4(%esp)
  804ba7:	00 
  804ba8:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  804baf:	e8 26 35 00 00       	call   8080da <sys_timeout>
  804bb4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804bbb:	00 
  804bbc:	c7 44 24 04 19 4d 80 	movl   $0x804d19,0x4(%esp)
  804bc3:	00 
  804bc4:	c7 04 24 60 ea 00 00 	movl   $0xea60,(%esp)
  804bcb:	e8 0a 35 00 00       	call   8080da <sys_timeout>
  804bd0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804bd7:	00 
  804bd8:	c7 44 24 04 f0 4c 80 	movl   $0x804cf0,0x4(%esp)
  804bdf:	00 
  804be0:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  804be7:	e8 ee 34 00 00       	call   8080da <sys_timeout>
  804bec:	8b 15 6c 86 81 00    	mov    0x81866c,%edx
  804bf2:	85 d2                	test   %edx,%edx
  804bf4:	74 0a                	je     804c00 <tcpip_thread+0x8a>
  804bf6:	a1 70 86 81 00       	mov    0x818670,%eax
  804bfb:	89 04 24             	mov    %eax,(%esp)
  804bfe:	ff d2                	call   *%edx
  804c00:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
  804c03:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c07:	a1 3c 80 81 00       	mov    0x81803c,%eax
  804c0c:	89 04 24             	mov    %eax,(%esp)
  804c0f:	e8 a7 36 00 00       	call   8082bb <sys_mbox_fetch>
  804c14:	8b 55 fc             	mov    0xfffffffc(%ebp),%edx
  804c17:	8b 02                	mov    (%edx),%eax
  804c19:	83 f8 01             	cmp    $0x1,%eax
  804c1c:	74 26                	je     804c44 <tcpip_thread+0xce>
  804c1e:	83 f8 01             	cmp    $0x1,%eax
  804c21:	72 11                	jb     804c34 <tcpip_thread+0xbe>
  804c23:	83 f8 02             	cmp    $0x2,%eax
  804c26:	74 5d                	je     804c85 <tcpip_thread+0x10f>
  804c28:	83 f8 03             	cmp    $0x3,%eax
  804c2b:	90                   	nop    
  804c2c:	8d 74 26 00          	lea    0x0(%esi),%esi
  804c30:	75 ce                	jne    804c00 <tcpip_thread+0x8a>
  804c32:	eb 72                	jmp    804ca6 <tcpip_thread+0x130>
  804c34:	8b 52 08             	mov    0x8(%edx),%edx
  804c37:	8d 42 04             	lea    0x4(%edx),%eax
  804c3a:	89 04 24             	mov    %eax,(%esp)
  804c3d:	8d 76 00             	lea    0x0(%esi),%esi
  804c40:	ff 12                	call   *(%edx)
  804c42:	eb bc                	jmp    804c00 <tcpip_thread+0x8a>
  804c44:	8b 42 0c             	mov    0xc(%edx),%eax
  804c47:	f6 40 2e 20          	testb  $0x20,0x2e(%eax)
  804c4b:	74 11                	je     804c5e <tcpip_thread+0xe8>
  804c4d:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c51:	8b 42 08             	mov    0x8(%edx),%eax
  804c54:	89 04 24             	mov    %eax,(%esp)
  804c57:	e8 cd 83 00 00       	call   80d029 <ethernet_input>
  804c5c:	eb 0f                	jmp    804c6d <tcpip_thread+0xf7>
  804c5e:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c62:	8b 42 08             	mov    0x8(%edx),%eax
  804c65:	89 04 24             	mov    %eax,(%esp)
  804c68:	e8 07 4b 00 00       	call   809774 <ip_input>
  804c6d:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  804c70:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c74:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  804c7b:	e8 9c 26 00 00       	call   80731c <memp_free>
  804c80:	e9 7b ff ff ff       	jmp    804c00 <tcpip_thread+0x8a>
  804c85:	8b 42 0c             	mov    0xc(%edx),%eax
  804c88:	89 04 24             	mov    %eax,(%esp)
  804c8b:	ff 52 08             	call   *0x8(%edx)
  804c8e:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  804c91:	89 44 24 04          	mov    %eax,0x4(%esp)
  804c95:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  804c9c:	e8 7b 26 00 00       	call   80731c <memp_free>
  804ca1:	e9 5a ff ff ff       	jmp    804c00 <tcpip_thread+0x8a>
  804ca6:	8b 4a 08             	mov    0x8(%edx),%ecx
  804ca9:	83 f9 ff             	cmp    $0xffffffff,%ecx
  804cac:	74 18                	je     804cc6 <tcpip_thread+0x150>
  804cae:	8b 42 10             	mov    0x10(%edx),%eax
  804cb1:	89 44 24 08          	mov    %eax,0x8(%esp)
  804cb5:	8b 42 0c             	mov    0xc(%edx),%eax
  804cb8:	89 44 24 04          	mov    %eax,0x4(%esp)
  804cbc:	89 0c 24             	mov    %ecx,(%esp)
  804cbf:	e8 16 34 00 00       	call   8080da <sys_timeout>
  804cc4:	eb 12                	jmp    804cd8 <tcpip_thread+0x162>
  804cc6:	8b 42 10             	mov    0x10(%edx),%eax
  804cc9:	89 44 24 04          	mov    %eax,0x4(%esp)
  804ccd:	8b 42 0c             	mov    0xc(%edx),%eax
  804cd0:	89 04 24             	mov    %eax,(%esp)
  804cd3:	e8 75 33 00 00       	call   80804d <sys_untimeout>
  804cd8:	8b 45 fc             	mov    0xfffffffc(%ebp),%eax
  804cdb:	89 44 24 04          	mov    %eax,0x4(%esp)
  804cdf:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  804ce6:	e8 31 26 00 00       	call   80731c <memp_free>
  804ceb:	e9 10 ff ff ff       	jmp    804c00 <tcpip_thread+0x8a>

00804cf0 <dhcp_timer_fine>:
  804cf0:	55                   	push   %ebp
  804cf1:	89 e5                	mov    %esp,%ebp
  804cf3:	83 ec 18             	sub    $0x18,%esp
  804cf6:	e8 fa 1e 00 00       	call   806bf5 <dhcp_fine_tmr>
  804cfb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804d02:	00 
  804d03:	c7 44 24 04 f0 4c 80 	movl   $0x804cf0,0x4(%esp)
  804d0a:	00 
  804d0b:	c7 04 24 f4 01 00 00 	movl   $0x1f4,(%esp)
  804d12:	e8 c3 33 00 00       	call   8080da <sys_timeout>
  804d17:	c9                   	leave  
  804d18:	c3                   	ret    

00804d19 <dhcp_timer_coarse>:
  804d19:	55                   	push   %ebp
  804d1a:	89 e5                	mov    %esp,%ebp
  804d1c:	83 ec 18             	sub    $0x18,%esp
  804d1f:	e8 73 11 00 00       	call   805e97 <dhcp_coarse_tmr>
  804d24:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804d2b:	00 
  804d2c:	c7 44 24 04 19 4d 80 	movl   $0x804d19,0x4(%esp)
  804d33:	00 
  804d34:	c7 04 24 60 ea 00 00 	movl   $0xea60,(%esp)
  804d3b:	e8 9a 33 00 00       	call   8080da <sys_timeout>
  804d40:	c9                   	leave  
  804d41:	c3                   	ret    

00804d42 <arp_timer>:
  804d42:	55                   	push   %ebp
  804d43:	89 e5                	mov    %esp,%ebp
  804d45:	83 ec 18             	sub    $0x18,%esp
  804d48:	e8 5e 80 00 00       	call   80cdab <etharp_tmr>
  804d4d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804d54:	00 
  804d55:	c7 44 24 04 42 4d 80 	movl   $0x804d42,0x4(%esp)
  804d5c:	00 
  804d5d:	c7 04 24 88 13 00 00 	movl   $0x1388,(%esp)
  804d64:	e8 71 33 00 00       	call   8080da <sys_timeout>
  804d69:	c9                   	leave  
  804d6a:	c3                   	ret    

00804d6b <ip_reass_timer>:
  804d6b:	55                   	push   %ebp
  804d6c:	89 e5                	mov    %esp,%ebp
  804d6e:	83 ec 18             	sub    $0x18,%esp
  804d71:	e8 86 56 00 00       	call   80a3fc <ip_reass_tmr>
  804d76:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804d7d:	00 
  804d7e:	c7 44 24 04 6b 4d 80 	movl   $0x804d6b,0x4(%esp)
  804d85:	00 
  804d86:	c7 04 24 e8 03 00 00 	movl   $0x3e8,(%esp)
  804d8d:	e8 48 33 00 00       	call   8080da <sys_timeout>
  804d92:	c9                   	leave  
  804d93:	c3                   	ret    

00804d94 <tcpip_apimsg>:
  804d94:	55                   	push   %ebp
  804d95:	89 e5                	mov    %esp,%ebp
  804d97:	53                   	push   %ebx
  804d98:	83 ec 34             	sub    $0x34,%esp
  804d9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  804d9e:	8b 15 3c 80 81 00    	mov    0x81803c,%edx
  804da4:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  804da9:	83 fa ff             	cmp    $0xffffffff,%edx
  804dac:	74 34                	je     804de2 <tcpip_apimsg+0x4e>
  804dae:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  804db5:	89 5d f0             	mov    %ebx,0xfffffff0(%ebp)
  804db8:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  804dbb:	89 44 24 04          	mov    %eax,0x4(%esp)
  804dbf:	89 14 24             	mov    %edx,(%esp)
  804dc2:	e8 3c 8c 00 00       	call   80da03 <sys_mbox_post>
  804dc7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  804dce:	00 
  804dcf:	8b 43 04             	mov    0x4(%ebx),%eax
  804dd2:	8b 40 10             	mov    0x10(%eax),%eax
  804dd5:	89 04 24             	mov    %eax,(%esp)
  804dd8:	e8 f2 86 00 00       	call   80d4cf <sys_arch_sem_wait>
  804ddd:	b8 00 00 00 00       	mov    $0x0,%eax
  804de2:	83 c4 34             	add    $0x34,%esp
  804de5:	5b                   	pop    %ebx
  804de6:	5d                   	pop    %ebp
  804de7:	c3                   	ret    

00804de8 <tcpip_timeout>:
  804de8:	55                   	push   %ebp
  804de9:	89 e5                	mov    %esp,%ebp
  804deb:	83 ec 08             	sub    $0x8,%esp
  804dee:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  804df3:	83 3d 3c 80 81 00 ff 	cmpl   $0xffffffff,0x81803c
  804dfa:	74 45                	je     804e41 <tcpip_timeout+0x59>
  804dfc:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  804e03:	e8 57 25 00 00       	call   80735f <memp_malloc>
  804e08:	89 c2                	mov    %eax,%edx
  804e0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  804e0f:	85 d2                	test   %edx,%edx
  804e11:	74 2e                	je     804e41 <tcpip_timeout+0x59>
  804e13:	c7 02 03 00 00 00    	movl   $0x3,(%edx)
  804e19:	8b 45 08             	mov    0x8(%ebp),%eax
  804e1c:	89 42 08             	mov    %eax,0x8(%edx)
  804e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
  804e22:	89 42 0c             	mov    %eax,0xc(%edx)
  804e25:	8b 45 10             	mov    0x10(%ebp),%eax
  804e28:	89 42 10             	mov    %eax,0x10(%edx)
  804e2b:	89 54 24 04          	mov    %edx,0x4(%esp)
  804e2f:	a1 3c 80 81 00       	mov    0x81803c,%eax
  804e34:	89 04 24             	mov    %eax,(%esp)
  804e37:	e8 c7 8b 00 00       	call   80da03 <sys_mbox_post>
  804e3c:	b8 00 00 00 00       	mov    $0x0,%eax
  804e41:	c9                   	leave  
  804e42:	c3                   	ret    

00804e43 <tcpip_callback_with_block>:
  804e43:	55                   	push   %ebp
  804e44:	89 e5                	mov    %esp,%ebp
  804e46:	83 ec 18             	sub    $0x18,%esp
  804e49:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  804e4c:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  804e4f:	0f b6 5d 10          	movzbl 0x10(%ebp),%ebx
  804e53:	ba f7 ff ff ff       	mov    $0xfffffff7,%edx
  804e58:	83 3d 3c 80 81 00 ff 	cmpl   $0xffffffff,0x81803c
  804e5f:	74 74                	je     804ed5 <tcpip_callback_with_block+0x92>
  804e61:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  804e68:	e8 f2 24 00 00       	call   80735f <memp_malloc>
  804e6d:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  804e72:	85 c0                	test   %eax,%eax
  804e74:	74 5f                	je     804ed5 <tcpip_callback_with_block+0x92>
  804e76:	89 c6                	mov    %eax,%esi
  804e78:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
  804e7e:	8b 45 08             	mov    0x8(%ebp),%eax
  804e81:	89 46 08             	mov    %eax,0x8(%esi)
  804e84:	8b 45 0c             	mov    0xc(%ebp),%eax
  804e87:	89 46 0c             	mov    %eax,0xc(%esi)
  804e8a:	84 db                	test   %bl,%bl
  804e8c:	74 18                	je     804ea6 <tcpip_callback_with_block+0x63>
  804e8e:	89 74 24 04          	mov    %esi,0x4(%esp)
  804e92:	a1 3c 80 81 00       	mov    0x81803c,%eax
  804e97:	89 04 24             	mov    %eax,(%esp)
  804e9a:	e8 64 8b 00 00       	call   80da03 <sys_mbox_post>
  804e9f:	ba 00 00 00 00       	mov    $0x0,%edx
  804ea4:	eb 2f                	jmp    804ed5 <tcpip_callback_with_block+0x92>
  804ea6:	89 74 24 04          	mov    %esi,0x4(%esp)
  804eaa:	a1 3c 80 81 00       	mov    0x81803c,%eax
  804eaf:	89 04 24             	mov    %eax,(%esp)
  804eb2:	e8 83 8a 00 00       	call   80d93a <sys_mbox_trypost>
  804eb7:	ba 00 00 00 00       	mov    $0x0,%edx
  804ebc:	84 c0                	test   %al,%al
  804ebe:	74 15                	je     804ed5 <tcpip_callback_with_block+0x92>
  804ec0:	89 74 24 04          	mov    %esi,0x4(%esp)
  804ec4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  804ecb:	e8 4c 24 00 00       	call   80731c <memp_free>
  804ed0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  804ed5:	89 d0                	mov    %edx,%eax
  804ed7:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  804eda:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  804edd:	89 ec                	mov    %ebp,%esp
  804edf:	5d                   	pop    %ebp
  804ee0:	c3                   	ret    

00804ee1 <mem_free_callback>:

/**
 * A simple wrapper function that allows you to free a pbuf from interrupt context.
 *
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
}

/**
 * A simple wrapper function that allows you to free heap memory from
 * interrupt context.
 *
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  804ee1:	55                   	push   %ebp
  804ee2:	89 e5                	mov    %esp,%ebp
  804ee4:	83 ec 18             	sub    $0x18,%esp
  return tcpip_callback_with_block(mem_free, m, 0);
  804ee7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804eee:	00 
  804eef:	8b 45 08             	mov    0x8(%ebp),%eax
  804ef2:	89 44 24 04          	mov    %eax,0x4(%esp)
  804ef6:	c7 04 24 92 70 80 00 	movl   $0x807092,(%esp)
  804efd:	e8 41 ff ff ff       	call   804e43 <tcpip_callback_with_block>
  804f02:	0f be c0             	movsbl %al,%eax
}
  804f05:	c9                   	leave  
  804f06:	c3                   	ret    

00804f07 <pbuf_free_callback>:
  804f07:	55                   	push   %ebp
  804f08:	89 e5                	mov    %esp,%ebp
  804f0a:	83 ec 18             	sub    $0x18,%esp
  804f0d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804f14:	00 
  804f15:	8b 45 08             	mov    0x8(%ebp),%eax
  804f18:	89 44 24 04          	mov    %eax,0x4(%esp)
  804f1c:	c7 04 24 c0 4a 80 00 	movl   $0x804ac0,(%esp)
  804f23:	e8 1b ff ff ff       	call   804e43 <tcpip_callback_with_block>
  804f28:	0f be c0             	movsbl %al,%eax
  804f2b:	c9                   	leave  
  804f2c:	c3                   	ret    

00804f2d <tcpip_input>:
  804f2d:	55                   	push   %ebp
  804f2e:	89 e5                	mov    %esp,%ebp
  804f30:	53                   	push   %ebx
  804f31:	83 ec 14             	sub    $0x14,%esp
  804f34:	ba f7 ff ff ff       	mov    $0xfffffff7,%edx
  804f39:	83 3d 3c 80 81 00 ff 	cmpl   $0xffffffff,0x81803c
  804f40:	74 58                	je     804f9a <tcpip_input+0x6d>
  804f42:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  804f49:	e8 11 24 00 00       	call   80735f <memp_malloc>
  804f4e:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  804f53:	85 c0                	test   %eax,%eax
  804f55:	74 43                	je     804f9a <tcpip_input+0x6d>
  804f57:	89 c3                	mov    %eax,%ebx
  804f59:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  804f5f:	8b 45 08             	mov    0x8(%ebp),%eax
  804f62:	89 43 08             	mov    %eax,0x8(%ebx)
  804f65:	8b 45 0c             	mov    0xc(%ebp),%eax
  804f68:	89 43 0c             	mov    %eax,0xc(%ebx)
  804f6b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  804f6f:	a1 3c 80 81 00       	mov    0x81803c,%eax
  804f74:	89 04 24             	mov    %eax,(%esp)
  804f77:	e8 be 89 00 00       	call   80d93a <sys_mbox_trypost>
  804f7c:	ba 00 00 00 00       	mov    $0x0,%edx
  804f81:	84 c0                	test   %al,%al
  804f83:	74 15                	je     804f9a <tcpip_input+0x6d>
  804f85:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  804f89:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  804f90:	e8 87 23 00 00       	call   80731c <memp_free>
  804f95:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  804f9a:	89 d0                	mov    %edx,%eax
  804f9c:	83 c4 14             	add    $0x14,%esp
  804f9f:	5b                   	pop    %ebx
  804fa0:	5d                   	pop    %ebp
  804fa1:	c3                   	ret    

00804fa2 <tcpip_tcp_timer>:
  804fa2:	55                   	push   %ebp
  804fa3:	89 e5                	mov    %esp,%ebp
  804fa5:	83 ec 18             	sub    $0x18,%esp
  804fa8:	e8 3d 43 00 00       	call   8092ea <tcp_tmr>
  804fad:	83 3d c8 e5 b3 00 00 	cmpl   $0x0,0xb3e5c8
  804fb4:	75 09                	jne    804fbf <tcpip_tcp_timer+0x1d>
  804fb6:	83 3d dc e5 b3 00 00 	cmpl   $0x0,0xb3e5dc
  804fbd:	74 1e                	je     804fdd <tcpip_tcp_timer+0x3b>
  804fbf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  804fc6:	00 
  804fc7:	c7 44 24 04 a2 4f 80 	movl   $0x804fa2,0x4(%esp)
  804fce:	00 
  804fcf:	c7 04 24 fa 00 00 00 	movl   $0xfa,(%esp)
  804fd6:	e8 ff 30 00 00       	call   8080da <sys_timeout>
  804fdb:	eb 0a                	jmp    804fe7 <tcpip_tcp_timer+0x45>
  804fdd:	c7 05 74 86 81 00 00 	movl   $0x0,0x818674
  804fe4:	00 00 00 
  804fe7:	c9                   	leave  
  804fe8:	c3                   	ret    
  804fe9:	00 00                	add    %al,(%eax)
	...

00804fec <netbuf_first>:
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  804fec:	55                   	push   %ebp
  804fed:	89 e5                	mov    %esp,%ebp
  804fef:	83 ec 18             	sub    $0x18,%esp
  804ff2:	8b 55 08             	mov    0x8(%ebp),%edx
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  804ff5:	85 d2                	test   %edx,%edx
  804ff7:	75 1c                	jne    805015 <netbuf_first+0x29>
  804ff9:	c7 44 24 08 49 2a 81 	movl   $0x812a49,0x8(%esp)
  805000:	00 
  805001:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
  805008:	00 
  805009:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805010:	e8 77 b8 ff ff       	call   80088c <_panic>
  buf->ptr = buf->p;
  805015:	8b 02                	mov    (%edx),%eax
  805017:	89 42 04             	mov    %eax,0x4(%edx)
}
  80501a:	c9                   	leave  
  80501b:	c3                   	ret    

0080501c <netbuf_next>:
  80501c:	55                   	push   %ebp
  80501d:	89 e5                	mov    %esp,%ebp
  80501f:	83 ec 18             	sub    $0x18,%esp
  805022:	8b 55 08             	mov    0x8(%ebp),%edx
  805025:	85 d2                	test   %edx,%edx
  805027:	75 1c                	jne    805045 <netbuf_next+0x29>
  805029:	c7 44 24 08 49 2a 81 	movl   $0x812a49,0x8(%esp)
  805030:	00 
  805031:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
  805038:	00 
  805039:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805040:	e8 47 b8 ff ff       	call   80088c <_panic>
  805045:	8b 42 04             	mov    0x4(%edx),%eax
  805048:	8b 00                	mov    (%eax),%eax
  80504a:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  80504f:	85 c0                	test   %eax,%eax
  805051:	74 0c                	je     80505f <netbuf_next+0x43>
  805053:	89 42 04             	mov    %eax,0x4(%edx)
  805056:	83 38 00             	cmpl   $0x0,(%eax)
  805059:	0f 94 c0             	sete   %al
  80505c:	0f b6 c8             	movzbl %al,%ecx
  80505f:	89 c8                	mov    %ecx,%eax
  805061:	c9                   	leave  
  805062:	c3                   	ret    

00805063 <netbuf_data>:
  805063:	55                   	push   %ebp
  805064:	89 e5                	mov    %esp,%ebp
  805066:	56                   	push   %esi
  805067:	53                   	push   %ebx
  805068:	83 ec 10             	sub    $0x10,%esp
  80506b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80506e:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  805071:	8b 75 10             	mov    0x10(%ebp),%esi
  805074:	85 c9                	test   %ecx,%ecx
  805076:	75 1c                	jne    805094 <netbuf_data+0x31>
  805078:	c7 44 24 08 78 2a 81 	movl   $0x812a78,0x8(%esp)
  80507f:	00 
  805080:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  805087:	00 
  805088:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  80508f:	e8 f8 b7 ff ff       	call   80088c <_panic>
  805094:	85 db                	test   %ebx,%ebx
  805096:	75 1c                	jne    8050b4 <netbuf_data+0x51>
  805098:	c7 44 24 08 91 2a 81 	movl   $0x812a91,0x8(%esp)
  80509f:	00 
  8050a0:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
  8050a7:	00 
  8050a8:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  8050af:	e8 d8 b7 ff ff       	call   80088c <_panic>
  8050b4:	85 f6                	test   %esi,%esi
  8050b6:	75 1c                	jne    8050d4 <netbuf_data+0x71>
  8050b8:	c7 44 24 08 ae 2a 81 	movl   $0x812aae,0x8(%esp)
  8050bf:	00 
  8050c0:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
  8050c7:	00 
  8050c8:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  8050cf:	e8 b8 b7 ff ff       	call   80088c <_panic>
  8050d4:	8b 51 04             	mov    0x4(%ecx),%edx
  8050d7:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8050dc:	85 d2                	test   %edx,%edx
  8050de:	74 14                	je     8050f4 <netbuf_data+0x91>
  8050e0:	8b 42 04             	mov    0x4(%edx),%eax
  8050e3:	89 03                	mov    %eax,(%ebx)
  8050e5:	8b 41 04             	mov    0x4(%ecx),%eax
  8050e8:	0f b7 40 0a          	movzwl 0xa(%eax),%eax
  8050ec:	66 89 06             	mov    %ax,(%esi)
  8050ef:	b8 00 00 00 00       	mov    $0x0,%eax
  8050f4:	83 c4 10             	add    $0x10,%esp
  8050f7:	5b                   	pop    %ebx
  8050f8:	5e                   	pop    %esi
  8050f9:	5d                   	pop    %ebp
  8050fa:	c3                   	ret    

008050fb <netbuf_chain>:
  8050fb:	55                   	push   %ebp
  8050fc:	89 e5                	mov    %esp,%ebp
  8050fe:	83 ec 18             	sub    $0x18,%esp
  805101:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  805104:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  805107:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80510a:	8b 75 0c             	mov    0xc(%ebp),%esi
  80510d:	85 db                	test   %ebx,%ebx
  80510f:	75 1c                	jne    80512d <netbuf_chain+0x32>
  805111:	c7 44 24 08 c7 2a 81 	movl   $0x812ac7,0x8(%esp)
  805118:	00 
  805119:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
  805120:	00 
  805121:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805128:	e8 5f b7 ff ff       	call   80088c <_panic>
  80512d:	85 f6                	test   %esi,%esi
  80512f:	75 1c                	jne    80514d <netbuf_chain+0x52>
  805131:	c7 44 24 08 e0 2a 81 	movl   $0x812ae0,0x8(%esp)
  805138:	00 
  805139:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
  805140:	00 
  805141:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805148:	e8 3f b7 ff ff       	call   80088c <_panic>
  80514d:	8b 06                	mov    (%esi),%eax
  80514f:	89 44 24 04          	mov    %eax,0x4(%esp)
  805153:	8b 03                	mov    (%ebx),%eax
  805155:	89 04 24             	mov    %eax,(%esp)
  805158:	e8 a4 25 00 00       	call   807701 <pbuf_chain>
  80515d:	8b 03                	mov    (%ebx),%eax
  80515f:	89 43 04             	mov    %eax,0x4(%ebx)
  805162:	89 74 24 04          	mov    %esi,0x4(%esp)
  805166:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80516d:	e8 aa 21 00 00       	call   80731c <memp_free>
  805172:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  805175:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  805178:	89 ec                	mov    %ebp,%esp
  80517a:	5d                   	pop    %ebp
  80517b:	c3                   	ret    

0080517c <netbuf_free>:
  80517c:	55                   	push   %ebp
  80517d:	89 e5                	mov    %esp,%ebp
  80517f:	53                   	push   %ebx
  805180:	83 ec 14             	sub    $0x14,%esp
  805183:	8b 5d 08             	mov    0x8(%ebp),%ebx
  805186:	85 db                	test   %ebx,%ebx
  805188:	75 1c                	jne    8051a6 <netbuf_free+0x2a>
  80518a:	c7 44 24 08 49 2a 81 	movl   $0x812a49,0x8(%esp)
  805191:	00 
  805192:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
  805199:	00 
  80519a:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  8051a1:	e8 e6 b6 ff ff       	call   80088c <_panic>
  8051a6:	8b 03                	mov    (%ebx),%eax
  8051a8:	85 c0                	test   %eax,%eax
  8051aa:	74 08                	je     8051b4 <netbuf_free+0x38>
  8051ac:	89 04 24             	mov    %eax,(%esp)
  8051af:	e8 e0 28 00 00       	call   807a94 <pbuf_free>
  8051b4:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  8051bb:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  8051c1:	83 c4 14             	add    $0x14,%esp
  8051c4:	5b                   	pop    %ebx
  8051c5:	5d                   	pop    %ebp
  8051c6:	c3                   	ret    

008051c7 <netbuf_delete>:
  8051c7:	55                   	push   %ebp
  8051c8:	89 e5                	mov    %esp,%ebp
  8051ca:	53                   	push   %ebx
  8051cb:	83 ec 14             	sub    $0x14,%esp
  8051ce:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8051d1:	85 db                	test   %ebx,%ebx
  8051d3:	74 2b                	je     805200 <netbuf_delete+0x39>
  8051d5:	8b 03                	mov    (%ebx),%eax
  8051d7:	85 c0                	test   %eax,%eax
  8051d9:	74 15                	je     8051f0 <netbuf_delete+0x29>
  8051db:	89 04 24             	mov    %eax,(%esp)
  8051de:	e8 b1 28 00 00       	call   807a94 <pbuf_free>
  8051e3:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  8051ea:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  8051f0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8051f4:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  8051fb:	e8 1c 21 00 00       	call   80731c <memp_free>
  805200:	83 c4 14             	add    $0x14,%esp
  805203:	5b                   	pop    %ebx
  805204:	5d                   	pop    %ebp
  805205:	c3                   	ret    

00805206 <netbuf_ref>:
  805206:	55                   	push   %ebp
  805207:	89 e5                	mov    %esp,%ebp
  805209:	56                   	push   %esi
  80520a:	53                   	push   %ebx
  80520b:	83 ec 10             	sub    $0x10,%esp
  80520e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  805211:	0f b7 75 10          	movzwl 0x10(%ebp),%esi
  805215:	85 db                	test   %ebx,%ebx
  805217:	75 1c                	jne    805235 <netbuf_ref+0x2f>
  805219:	c7 44 24 08 fb 2a 81 	movl   $0x812afb,0x8(%esp)
  805220:	00 
  805221:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  805228:	00 
  805229:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805230:	e8 57 b6 ff ff       	call   80088c <_panic>
  805235:	8b 03                	mov    (%ebx),%eax
  805237:	85 c0                	test   %eax,%eax
  805239:	74 08                	je     805243 <netbuf_ref+0x3d>
  80523b:	89 04 24             	mov    %eax,(%esp)
  80523e:	e8 51 28 00 00       	call   807a94 <pbuf_free>
  805243:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  80524a:	00 
  80524b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  805252:	00 
  805253:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80525a:	e8 f8 2a 00 00       	call   807d57 <pbuf_alloc>
  80525f:	89 c2                	mov    %eax,%edx
  805261:	89 03                	mov    %eax,(%ebx)
  805263:	85 c0                	test   %eax,%eax
  805265:	75 0e                	jne    805275 <netbuf_ref+0x6f>
  805267:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80526e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  805273:	eb 1a                	jmp    80528f <netbuf_ref+0x89>
  805275:	8b 45 0c             	mov    0xc(%ebp),%eax
  805278:	89 42 04             	mov    %eax,0x4(%edx)
  80527b:	8b 03                	mov    (%ebx),%eax
  80527d:	66 89 70 08          	mov    %si,0x8(%eax)
  805281:	66 89 70 0a          	mov    %si,0xa(%eax)
  805285:	8b 03                	mov    (%ebx),%eax
  805287:	89 43 04             	mov    %eax,0x4(%ebx)
  80528a:	b8 00 00 00 00       	mov    $0x0,%eax
  80528f:	83 c4 10             	add    $0x10,%esp
  805292:	5b                   	pop    %ebx
  805293:	5e                   	pop    %esi
  805294:	5d                   	pop    %ebp
  805295:	c3                   	ret    

00805296 <netbuf_alloc>:
  805296:	55                   	push   %ebp
  805297:	89 e5                	mov    %esp,%ebp
  805299:	56                   	push   %esi
  80529a:	53                   	push   %ebx
  80529b:	83 ec 10             	sub    $0x10,%esp
  80529e:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8052a1:	0f b7 75 0c          	movzwl 0xc(%ebp),%esi
  8052a5:	85 db                	test   %ebx,%ebx
  8052a7:	75 1c                	jne    8052c5 <netbuf_alloc+0x2f>
  8052a9:	c7 44 24 08 13 2b 81 	movl   $0x812b13,0x8(%esp)
  8052b0:	00 
  8052b1:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
  8052b8:	00 
  8052b9:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  8052c0:	e8 c7 b5 ff ff       	call   80088c <_panic>
  8052c5:	8b 03                	mov    (%ebx),%eax
  8052c7:	85 c0                	test   %eax,%eax
  8052c9:	74 08                	je     8052d3 <netbuf_alloc+0x3d>
  8052cb:	89 04 24             	mov    %eax,(%esp)
  8052ce:	e8 c1 27 00 00       	call   807a94 <pbuf_free>
  8052d3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8052da:	00 
  8052db:	0f b7 c6             	movzwl %si,%eax
  8052de:	89 44 24 04          	mov    %eax,0x4(%esp)
  8052e2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8052e9:	e8 69 2a 00 00       	call   807d57 <pbuf_alloc>
  8052ee:	89 03                	mov    %eax,(%ebx)
  8052f0:	ba 00 00 00 00       	mov    $0x0,%edx
  8052f5:	85 c0                	test   %eax,%eax
  8052f7:	74 2a                	je     805323 <netbuf_alloc+0x8d>
  8052f9:	66 3b 70 0a          	cmp    0xa(%eax),%si
  8052fd:	76 1c                	jbe    80531b <netbuf_alloc+0x85>
  8052ff:	c7 44 24 08 30 2b 81 	movl   $0x812b30,0x8(%esp)
  805306:	00 
  805307:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
  80530e:	00 
  80530f:	c7 04 24 62 2a 81 00 	movl   $0x812a62,(%esp)
  805316:	e8 71 b5 ff ff       	call   80088c <_panic>
  80531b:	89 43 04             	mov    %eax,0x4(%ebx)
  80531e:	8b 03                	mov    (%ebx),%eax
  805320:	8b 50 04             	mov    0x4(%eax),%edx
  805323:	89 d0                	mov    %edx,%eax
  805325:	83 c4 10             	add    $0x10,%esp
  805328:	5b                   	pop    %ebx
  805329:	5e                   	pop    %esi
  80532a:	5d                   	pop    %ebp
  80532b:	c3                   	ret    

0080532c <netbuf_new>:
  80532c:	55                   	push   %ebp
  80532d:	89 e5                	mov    %esp,%ebp
  80532f:	83 ec 08             	sub    $0x8,%esp
  805332:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  805339:	e8 21 20 00 00       	call   80735f <memp_malloc>
  80533e:	89 c2                	mov    %eax,%edx
  805340:	b8 00 00 00 00       	mov    $0x0,%eax
  805345:	85 d2                	test   %edx,%edx
  805347:	74 16                	je     80535f <netbuf_new+0x33>
  805349:	89 d0                	mov    %edx,%eax
  80534b:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  805351:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
  805358:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
  80535f:	c9                   	leave  
  805360:	c3                   	ret    
	...

00805370 <lwip_init>:
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  805370:	55                   	push   %ebp
  805371:	89 e5                	mov    %esp,%ebp
  805373:	83 ec 08             	sub    $0x8,%esp
  /* Sanity check user-configurable values */
  lwip_sanity_check();

  /* Modules initialization */
  stats_init();
  sys_init();
  805376:	e8 55 7d 00 00       	call   80d0d0 <sys_init>
  mem_init();
  80537b:	e8 9d 1e 00 00       	call   80721d <mem_init>
  memp_init();
  805380:	e8 fb 1e 00 00       	call   807280 <memp_init>
  pbuf_init();
  netif_init();
#if LWIP_SOCKET
  lwip_socket_init();
  805385:	e8 77 e8 ff ff       	call   803c01 <lwip_socket_init>
#endif /* LWIP_SOCKET */
  ip_init();
#if LWIP_ARP
  etharp_init();
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
#endif /* LWIP_TCP */
#if LWIP_AUTOIP
  autoip_init();
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */
}
  80538a:	c9                   	leave  
  80538b:	c3                   	ret    
  80538c:	00 00                	add    %al,(%eax)
	...

00805390 <dhcp_set_state>:
 * TODO: we might also want to reset the timeout here?
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  805390:	55                   	push   %ebp
  805391:	89 e5                	mov    %esp,%ebp
  if (new_state != dhcp->state) {
  805393:	38 10                	cmp    %dl,(%eax)
  805395:	74 06                	je     80539d <dhcp_set_state+0xd>
    dhcp->state = new_state;
  805397:	88 10                	mov    %dl,(%eax)
    dhcp->tries = 0;
  805399:	c6 40 01 00          	movb   $0x0,0x1(%eax)
  }
}
  80539d:	5d                   	pop    %ebp
  80539e:	c3                   	ret    

0080539f <dhcp_get_option_ptr>:

/*
 * Concatenate an option type and length field to the outgoing
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
}
/*
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
}

/**
 * Extract the DHCP message and the DHCP options.
 *
 * Extract the DHCP message and the DHCP options, each into a contiguous
 * piece of memory. As a DHCP message is variable sized by its options,
 * and also allows overriding some fields for options, the easy approach
 * is to first unfold the options into a conitguous piece of memory, and
 * use that further on.
 *
 */
static err_t
dhcp_unfold_reply(struct dhcp *dhcp)
{
  u16_t ret;
  LWIP_ERROR("dhcp != NULL", (dhcp != NULL), return ERR_ARG;);
  LWIP_ERROR("dhcp->p != NULL", (dhcp->p != NULL), return ERR_VAL;);
  /* free any left-overs from previous unfolds */
  dhcp_free_reply(dhcp);
  /* options present? */
  if (dhcp->p->tot_len > (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN)) {
    dhcp->options_in_len = dhcp->p->tot_len - (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
    dhcp->options_in = mem_malloc(dhcp->options_in_len);
    if (dhcp->options_in == NULL) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->options\n"));
      return ERR_MEM;
    }
  }
  dhcp->msg_in = mem_malloc(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  if (dhcp->msg_in == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->msg_in\n"));
    mem_free((void *)dhcp->options_in);
    dhcp->options_in = NULL;
    return ERR_MEM;
  }

  /** copy the DHCP message without options */
  ret = pbuf_copy_partial(dhcp->p, dhcp->msg_in, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN, 0);
  LWIP_ASSERT("ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN", ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes into dhcp->msg_in[]\n",
     sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN));

  if (dhcp->options_in != NULL) {
    /** copy the DHCP options */
    ret = pbuf_copy_partial(dhcp->p, dhcp->options_in, dhcp->options_in_len, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
    LWIP_ASSERT("ret == dhcp->options_in_len", ret == dhcp->options_in_len);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes to dhcp->options_in[]\n",
      dhcp->options_in_len));
  }
  LWIP_UNUSED_ARG(ret);
  return ERR_OK;
}

/**
 * Free the incoming DHCP message including contiguous copy of
 * its DHCP options.
 *
 */
static void dhcp_free_reply(struct dhcp *dhcp)
{
  if (dhcp->msg_in != NULL) {
    mem_free((void *)dhcp->msg_in);
    dhcp->msg_in = NULL;
  }
  if (dhcp->options_in) {
    mem_free((void *)dhcp->options_in);
    dhcp->options_in = NULL;
    dhcp->options_in_len = 0;
  }
  LWIP_DEBUGF(DHCP_DEBUG, ("dhcp_free_reply(): free'd\n"));
}


/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
{
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  u8_t *options_ptr;
  u8_t msg_type;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
    (u16_t)(ntohl(addr->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),
    (u16_t)(ntohl(addr->addr) >>  8 & 0xff), (u16_t)(ntohl(addr->addr) & 0xff), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);
  dhcp->p = p;
  /* TODO: check packet length before reading them */
  if (reply_msg->op != DHCP_BOOTREPLY) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_unfold_reply(dhcp) != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  options_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_MESSAGE_TYPE);
  if (options_ptr == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = dhcp_get_option_byte(options_ptr + 2);
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
      dhcp_handle_ack(netif);
      dhcp->request_timeout = 0;
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
#else
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
      dhcp->request_timeout = 0;
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_NAK received\n"));
    dhcp->request_timeout = 0;
    dhcp_handle_nak(netif);
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  pbuf_free(p);
  dhcp->p = NULL;
}

/**
 * Create a DHCP request, fill in common headers
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_create_request(struct netif *netif)
{
  struct dhcp *dhcp;
  u16_t i;
  LWIP_ERROR("dhcp_create_request: netif != NULL", (netif != NULL), return ERR_ARG;);
  dhcp = netif->dhcp;
  LWIP_ERROR("dhcp_create_request: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  LWIP_ASSERT("dhcp_create_request: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_request: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_create_request(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_request: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* give unique transaction identifier to this request */
  dhcp->xid = xid++;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("transaction id xid++(%"X32_F") dhcp->xid(%"U32_F")\n",xid,dhcp->xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  /* TODO: make link layer independent */
  dhcp->msg_out->hlen = DHCP_HLEN_ETH;
  dhcp->msg_out->hops = 0;
  dhcp->msg_out->xid = htonl(dhcp->xid);
  dhcp->msg_out->secs = 0;
  dhcp->msg_out->flags = 0;
  dhcp->msg_out->ciaddr.addr = netif->ip_addr.addr;
  dhcp->msg_out->yiaddr.addr = 0;
  dhcp->msg_out->siaddr.addr = 0;
  dhcp->msg_out->giaddr.addr = 0;
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = htonl(0x63825363UL);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  return ERR_OK;
}

/**
 * Free previously allocated memory used to send a DHCP request.
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_delete_request(struct netif *netif)
{
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_delete_request: netif != NULL", (netif != NULL), return;);
  dhcp = netif->dhcp;
  LWIP_ERROR("dhcp_delete_request: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_delete_request: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_request: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
    pbuf_free(dhcp->p_out);
  }
  dhcp->p_out = NULL;
  dhcp->msg_out = NULL;
}

/**
 * Add a DHCP message trailer
 *
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while ((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) {
    /* LWIP_DEBUGF(DHCP_DEBUG,("dhcp_option_trailer:dhcp->options_out_len=%"U16_F", DHCP_OPTIONS_LEN=%"U16_F, dhcp->options_out_len, DHCP_OPTIONS_LEN)); */
    LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}

/**
 * Find the offset of a DHCP option inside the DHCP message.
 *
 * @param dhcp DHCP client
 * @param option_type
 *
 * @return a byte offset into the UDP message where the option was found, or
 * zero if the given option was not found.
 */
static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type)
{
  80539f:	55                   	push   %ebp
  8053a0:	89 e5                	mov    %esp,%ebp
  8053a2:	57                   	push   %edi
  8053a3:	56                   	push   %esi
  8053a4:	53                   	push   %ebx
  8053a5:	83 ec 04             	sub    $0x4,%esp
  8053a8:	89 c6                	mov    %eax,%esi
  8053aa:	88 55 f2             	mov    %dl,0xfffffff2(%ebp)
  u8_t overload = DHCP_OVERLOAD_NONE;

  /* options available? */
  if ((dhcp->options_in != NULL) && (dhcp->options_in_len > 0)) {
  8053ad:	8b 40 14             	mov    0x14(%eax),%eax
  8053b0:	85 c0                	test   %eax,%eax
  8053b2:	0f 84 db 00 00 00    	je     805493 <dhcp_get_option_ptr+0xf4>
  8053b8:	0f b7 7e 18          	movzwl 0x18(%esi),%edi
  8053bc:	66 85 ff             	test   %di,%di
  8053bf:	0f 84 ce 00 00 00    	je     805493 <dhcp_get_option_ptr+0xf4>
    /* start with options field */
    u8_t *options = (u8_t *)dhcp->options_in;
  8053c5:	89 c3                	mov    %eax,%ebx
    u16_t offset = 0;
    /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
    while ((offset < dhcp->options_in_len) && (options[offset] != DHCP_OPTION_END)) {
  8053c7:	0f b6 00             	movzbl (%eax),%eax
  8053ca:	3c ff                	cmp    $0xff,%al
  8053cc:	0f 84 c1 00 00 00    	je     805493 <dhcp_get_option_ptr+0xf4>
  8053d2:	89 da                	mov    %ebx,%edx
  8053d4:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  8053d8:	b9 00 00 00 00       	mov    $0x0,%ecx
      /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
      /* are the sname and/or file field overloaded with options? */
      if (options[offset] == DHCP_OPTION_OVERLOAD) {
  8053dd:	3c 34                	cmp    $0x34,%al
  8053df:	75 12                	jne    8053f3 <dhcp_get_option_ptr+0x54>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("overloaded message detected\n"));
        /* skip option type and length */
        offset += 2;
  8053e1:	8d 41 02             	lea    0x2(%ecx),%eax
        overload = options[offset++];
  8053e4:	0f b7 c0             	movzwl %ax,%eax
  8053e7:	0f b6 04 18          	movzbl (%eax,%ebx,1),%eax
  8053eb:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  8053ee:	83 c1 03             	add    $0x3,%ecx
  8053f1:	eb 18                	jmp    80540b <dhcp_get_option_ptr+0x6c>
      }
      /* requested option found */
      else if (options[offset] == option_type) {
  8053f3:	38 45 f2             	cmp    %al,0xfffffff2(%ebp)
  8053f6:	0f 84 9c 00 00 00    	je     805498 <dhcp_get_option_ptr+0xf9>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset %"U16_F" in options\n", offset));
        return &options[offset];
      /* skip option */
      } else {
         LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", options[offset]));
        /* skip option type */
        offset++;
  8053fc:	8d 41 01             	lea    0x1(%ecx),%eax
        /* skip option length, and then length bytes */
        offset += 1 + options[offset];
  8053ff:	0f b7 c0             	movzwl %ax,%eax
  805402:	66 0f b6 04 18       	movzbw (%eax,%ebx,1),%ax
  805407:	8d 4c 01 02          	lea    0x2(%ecx,%eax,1),%ecx
  80540b:	66 39 cf             	cmp    %cx,%di
  80540e:	76 0d                	jbe    80541d <dhcp_get_option_ptr+0x7e>
  805410:	0f b7 c1             	movzwl %cx,%eax
  805413:	8d 14 18             	lea    (%eax,%ebx,1),%edx
  805416:	0f b6 02             	movzbl (%edx),%eax
  805419:	3c ff                	cmp    $0xff,%al
  80541b:	75 c0                	jne    8053dd <dhcp_get_option_ptr+0x3e>
      }
    }
    /* is this an overloaded message? */
    if (overload != DHCP_OVERLOAD_NONE) {
  80541d:	80 7d f3 00          	cmpb   $0x0,0xfffffff3(%ebp)
  805421:	74 70                	je     805493 <dhcp_get_option_ptr+0xf4>
      u16_t field_len;
      if (overload == DHCP_OVERLOAD_FILE) {
  805423:	80 7d f3 01          	cmpb   $0x1,0xfffffff3(%ebp)
  805427:	75 0d                	jne    805436 <dhcp_get_option_ptr+0x97>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded file field\n"));
        options = (u8_t *)&dhcp->msg_in->file;
  805429:	8b 56 10             	mov    0x10(%esi),%edx
  80542c:	83 c2 6c             	add    $0x6c,%edx
  80542f:	be 80 00 00 00       	mov    $0x80,%esi
  805434:	eb 22                	jmp    805458 <dhcp_get_option_ptr+0xb9>
        field_len = DHCP_FILE_LEN;
      } else if (overload == DHCP_OVERLOAD_SNAME) {
  805436:	80 7d f3 02          	cmpb   $0x2,0xfffffff3(%ebp)
  80543a:	75 11                	jne    80544d <dhcp_get_option_ptr+0xae>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname field\n"));
        options = (u8_t *)&dhcp->msg_in->sname;
  80543c:	8b 56 10             	mov    0x10(%esi),%edx
  80543f:	83 c2 2c             	add    $0x2c,%edx
  805442:	be 40 00 00 00       	mov    $0x40,%esi
  805447:	eb 0f                	jmp    805458 <dhcp_get_option_ptr+0xb9>
        field_len = DHCP_SNAME_LEN;
      /* TODO: check if else if () is necessary */
      } else {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname and file field\n"));
        options = (u8_t *)&dhcp->msg_in->sname;
        field_len = DHCP_FILE_LEN + DHCP_SNAME_LEN;
      }
      offset = 0;

      /* at least 1 byte to read and no end marker */
      while ((offset < field_len) && (options[offset] != DHCP_OPTION_END)) {
        if (options[offset] == option_type) {
  805449:	89 c2                	mov    %eax,%edx
  80544b:	eb 4b                	jmp    805498 <dhcp_get_option_ptr+0xf9>
  80544d:	8b 56 10             	mov    0x10(%esi),%edx
  805450:	83 c2 2c             	add    $0x2c,%edx
  805453:	be c0 00 00 00       	mov    $0xc0,%esi
  805458:	0f b6 02             	movzbl (%edx),%eax
  80545b:	3c ff                	cmp    $0xff,%al
  80545d:	74 34                	je     805493 <dhcp_get_option_ptr+0xf4>
  80545f:	bb 00 00 00 00       	mov    $0x0,%ebx
  805464:	3a 45 f2             	cmp    0xfffffff2(%ebp),%al
  805467:	75 09                	jne    805472 <dhcp_get_option_ptr+0xd3>
  805469:	eb 2d                	jmp    805498 <dhcp_get_option_ptr+0xf9>
  80546b:	3a 4d f2             	cmp    0xfffffff2(%ebp),%cl
  80546e:	66 90                	xchg   %ax,%ax
  805470:	74 d7                	je     805449 <dhcp_get_option_ptr+0xaa>
           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset=%"U16_F"\n", offset));
          return &options[offset];
        /* skip option */
        } else {
          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("skipping option %"U16_F"\n", options[offset]));
          /* skip option type */
          offset++;
  805472:	8d 43 01             	lea    0x1(%ebx),%eax
          offset += 1 + options[offset];
  805475:	0f b7 c0             	movzwl %ax,%eax
  805478:	66 0f b6 04 10       	movzbw (%eax,%edx,1),%ax
  80547d:	8d 5c 03 02          	lea    0x2(%ebx,%eax,1),%ebx
  805481:	66 39 de             	cmp    %bx,%si
  805484:	76 0d                	jbe    805493 <dhcp_get_option_ptr+0xf4>
  805486:	0f b7 c3             	movzwl %bx,%eax
  805489:	01 d0                	add    %edx,%eax
  80548b:	0f b6 08             	movzbl (%eax),%ecx
  80548e:	80 f9 ff             	cmp    $0xff,%cl
  805491:	75 d8                	jne    80546b <dhcp_get_option_ptr+0xcc>
  805493:	ba 00 00 00 00       	mov    $0x0,%edx
        }
      }
    }
  }
  return NULL;
}
  805498:	89 d0                	mov    %edx,%eax
  80549a:	83 c4 04             	add    $0x4,%esp
  80549d:	5b                   	pop    %ebx
  80549e:	5e                   	pop    %esi
  80549f:	5f                   	pop    %edi
  8054a0:	5d                   	pop    %ebp
  8054a1:	c3                   	ret    

008054a2 <dhcp_get_option_byte>:

/**
 * Return the byte of DHCP option data.
 *
 * @param client DHCP client.
 * @param ptr pointer obtained by dhcp_get_option_ptr().
 *
 * @return byte value at the given address.
 */
static u8_t
dhcp_get_option_byte(u8_t *ptr)
{
  8054a2:	55                   	push   %ebp
  8054a3:	89 e5                	mov    %esp,%ebp
  8054a5:	0f b6 00             	movzbl (%eax),%eax
  LWIP_DEBUGF(DHCP_DEBUG, ("option byte value=%"U16_F"\n", (u16_t)(*ptr)));
  return *ptr;
}
  8054a8:	5d                   	pop    %ebp
  8054a9:	c3                   	ret    

008054aa <dhcp_get_option_long>:

#if 0 /* currently unused */
/**
 * Return the 16-bit value of DHCP option data.
 *
 * @param client DHCP client.
 * @param ptr pointer obtained by dhcp_get_option_ptr().
 *
 * @return byte value at the given address.
 */
static u16_t
dhcp_get_option_short(u8_t *ptr)
{
  u16_t value;
  value = *ptr++ << 8;
  value |= *ptr;
  LWIP_DEBUGF(DHCP_DEBUG, ("option short value=%"U16_F"\n", value));
  return value;
}
#endif

/**
 * Return the 32-bit value of DHCP option data.
 *
 * @param client DHCP client.
 * @param ptr pointer obtained by dhcp_get_option_ptr().
 *
 * @return byte value at the given address.
 */
static u32_t dhcp_get_option_long(u8_t *ptr)
{
  8054aa:	55                   	push   %ebp
  8054ab:	89 e5                	mov    %esp,%ebp
  8054ad:	89 c1                	mov    %eax,%ecx
  u32_t value;
  value = (u32_t)(*ptr++) << 24;
  8054af:	0f b6 10             	movzbl (%eax),%edx
  8054b2:	c1 e2 18             	shl    $0x18,%edx
  value |= (u32_t)(*ptr++) << 16;
  8054b5:	0f b6 40 01          	movzbl 0x1(%eax),%eax
  8054b9:	c1 e0 10             	shl    $0x10,%eax
  8054bc:	09 d0                	or     %edx,%eax
  value |= (u32_t)(*ptr++) << 8;
  8054be:	0f b6 51 02          	movzbl 0x2(%ecx),%edx
  8054c2:	c1 e2 08             	shl    $0x8,%edx
  8054c5:	09 d0                	or     %edx,%eax
  8054c7:	0f b6 51 03          	movzbl 0x3(%ecx),%edx
  8054cb:	09 d0                	or     %edx,%eax
  value |= (u32_t)(*ptr++);
  LWIP_DEBUGF(DHCP_DEBUG, ("option long value=%"U32_F"\n", value));
  return value;
}
  8054cd:	5d                   	pop    %ebp
  8054ce:	c3                   	ret    

008054cf <dhcp_option_trailer>:
  8054cf:	55                   	push   %ebp
  8054d0:	89 e5                	mov    %esp,%ebp
  8054d2:	53                   	push   %ebx
  8054d3:	83 ec 14             	sub    $0x14,%esp
  8054d6:	89 c3                	mov    %eax,%ebx
  8054d8:	85 c0                	test   %eax,%eax
  8054da:	75 1c                	jne    8054f8 <dhcp_option_trailer+0x29>
  8054dc:	c7 44 24 08 54 2b 81 	movl   $0x812b54,0x8(%esp)
  8054e3:	00 
  8054e4:	c7 44 24 04 80 05 00 	movl   $0x580,0x4(%esp)
  8054eb:	00 
  8054ec:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8054f3:	e8 94 b3 ff ff       	call   80088c <_panic>
  8054f8:	8b 48 20             	mov    0x20(%eax),%ecx
  8054fb:	85 c9                	test   %ecx,%ecx
  8054fd:	75 1c                	jne    80551b <dhcp_option_trailer+0x4c>
  8054ff:	c7 44 24 08 78 2b 81 	movl   $0x812b78,0x8(%esp)
  805506:	00 
  805507:	c7 44 24 04 81 05 00 	movl   $0x581,0x4(%esp)
  80550e:	00 
  80550f:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  805516:	e8 71 b3 ff ff       	call   80088c <_panic>
  80551b:	0f b7 50 24          	movzwl 0x24(%eax),%edx
  80551f:	66 83 fa 43          	cmp    $0x43,%dx
  805523:	76 1c                	jbe    805541 <dhcp_option_trailer+0x72>
  805525:	c7 44 24 08 a4 2b 81 	movl   $0x812ba4,0x8(%esp)
  80552c:	00 
  80552d:	c7 44 24 04 82 05 00 	movl   $0x582,0x4(%esp)
  805534:	00 
  805535:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80553c:	e8 4b b3 ff ff       	call   80088c <_panic>
  805541:	0f b7 c2             	movzwl %dx,%eax
  805544:	c6 84 08 f0 00 00 00 	movb   $0xff,0xf0(%eax,%ecx,1)
  80554b:	ff 
  80554c:	8d 4a 01             	lea    0x1(%edx),%ecx
  80554f:	66 89 4b 24          	mov    %cx,0x24(%ebx)
  805553:	66 83 f9 43          	cmp    $0x43,%cx
  805557:	76 1e                	jbe    805577 <dhcp_option_trailer+0xa8>
  805559:	eb 39                	jmp    805594 <dhcp_option_trailer+0xc5>
  80555b:	c7 44 24 08 a4 2b 81 	movl   $0x812ba4,0x8(%esp)
  805562:	00 
  805563:	c7 44 24 04 87 05 00 	movl   $0x587,0x4(%esp)
  80556a:	00 
  80556b:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  805572:	e8 15 b3 ff ff       	call   80088c <_panic>
  805577:	8b 53 20             	mov    0x20(%ebx),%edx
  80557a:	0f b7 c1             	movzwl %cx,%eax
  80557d:	c6 84 10 f0 00 00 00 	movb   $0x0,0xf0(%eax,%edx,1)
  805584:	00 
  805585:	83 c1 01             	add    $0x1,%ecx
  805588:	66 89 4b 24          	mov    %cx,0x24(%ebx)
  80558c:	66 83 f9 44          	cmp    $0x44,%cx
  805590:	74 07                	je     805599 <dhcp_option_trailer+0xca>
  805592:	eb e3                	jmp    805577 <dhcp_option_trailer+0xa8>
  805594:	f6 c1 03             	test   $0x3,%cl
  805597:	75 c2                	jne    80555b <dhcp_option_trailer+0x8c>
  805599:	83 c4 14             	add    $0x14,%esp
  80559c:	5b                   	pop    %ebx
  80559d:	5d                   	pop    %ebp
  80559e:	66 90                	xchg   %ax,%ax
  8055a0:	c3                   	ret    

008055a1 <dhcp_option_long>:
  8055a1:	55                   	push   %ebp
  8055a2:	89 e5                	mov    %esp,%ebp
  8055a4:	83 ec 28             	sub    $0x28,%esp
  8055a7:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8055aa:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8055ad:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8055b0:	89 c6                	mov    %eax,%esi
  8055b2:	89 d7                	mov    %edx,%edi
  8055b4:	0f b7 58 24          	movzwl 0x24(%eax),%ebx
  8055b8:	0f b7 c3             	movzwl %bx,%eax
  8055bb:	83 c0 04             	add    $0x4,%eax
  8055be:	83 f8 44             	cmp    $0x44,%eax
  8055c1:	76 1c                	jbe    8055df <dhcp_option_long+0x3e>
  8055c3:	c7 44 24 08 e4 2b 81 	movl   $0x812be4,0x8(%esp)
  8055ca:	00 
  8055cb:	c7 44 24 04 74 04 00 	movl   $0x474,0x4(%esp)
  8055d2:	00 
  8055d3:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8055da:	e8 ad b2 ff ff       	call   80088c <_panic>
  8055df:	8b 4e 20             	mov    0x20(%esi),%ecx
  8055e2:	0f b7 d3             	movzwl %bx,%edx
  8055e5:	89 f8                	mov    %edi,%eax
  8055e7:	c1 e8 18             	shr    $0x18,%eax
  8055ea:	88 84 0a f0 00 00 00 	mov    %al,0xf0(%edx,%ecx,1)
  8055f1:	8d 43 01             	lea    0x1(%ebx),%eax
  8055f4:	8b 4e 20             	mov    0x20(%esi),%ecx
  8055f7:	0f b7 c0             	movzwl %ax,%eax
  8055fa:	89 fa                	mov    %edi,%edx
  8055fc:	c1 ea 10             	shr    $0x10,%edx
  8055ff:	88 94 08 f0 00 00 00 	mov    %dl,0xf0(%eax,%ecx,1)
  805606:	8d 43 02             	lea    0x2(%ebx),%eax
  805609:	8b 4e 20             	mov    0x20(%esi),%ecx
  80560c:	0f b7 c0             	movzwl %ax,%eax
  80560f:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  805612:	89 f8                	mov    %edi,%eax
  805614:	0f b6 d4             	movzbl %ah,%edx
  805617:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80561a:	88 94 08 f0 00 00 00 	mov    %dl,0xf0(%eax,%ecx,1)
  805621:	8d 43 03             	lea    0x3(%ebx),%eax
  805624:	8b 56 20             	mov    0x20(%esi),%edx
  805627:	0f b7 c0             	movzwl %ax,%eax
  80562a:	89 f9                	mov    %edi,%ecx
  80562c:	88 8c 10 f0 00 00 00 	mov    %cl,0xf0(%eax,%edx,1)
  805633:	8d 43 04             	lea    0x4(%ebx),%eax
  805636:	66 89 46 24          	mov    %ax,0x24(%esi)
  80563a:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80563d:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  805640:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  805643:	89 ec                	mov    %ebp,%esp
  805645:	5d                   	pop    %ebp
  805646:	c3                   	ret    

00805647 <dhcp_option_short>:
  805647:	55                   	push   %ebp
  805648:	89 e5                	mov    %esp,%ebp
  80564a:	83 ec 28             	sub    $0x28,%esp
  80564d:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  805650:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  805653:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  805656:	89 c6                	mov    %eax,%esi
  805658:	89 d7                	mov    %edx,%edi
  80565a:	0f b7 58 24          	movzwl 0x24(%eax),%ebx
  80565e:	0f b7 c3             	movzwl %bx,%eax
  805661:	83 c0 02             	add    $0x2,%eax
  805664:	83 f8 44             	cmp    $0x44,%eax
  805667:	76 1c                	jbe    805685 <dhcp_option_short+0x3e>
  805669:	c7 44 24 08 24 2c 81 	movl   $0x812c24,0x8(%esp)
  805670:	00 
  805671:	c7 44 24 04 6c 04 00 	movl   $0x46c,0x4(%esp)
  805678:	00 
  805679:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  805680:	e8 07 b2 ff ff       	call   80088c <_panic>
  805685:	8b 4e 20             	mov    0x20(%esi),%ecx
  805688:	0f b7 d3             	movzwl %bx,%edx
  80568b:	89 f8                	mov    %edi,%eax
  80568d:	0f b6 c4             	movzbl %ah,%eax
  805690:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  805693:	88 84 0a f0 00 00 00 	mov    %al,0xf0(%edx,%ecx,1)
  80569a:	8d 43 01             	lea    0x1(%ebx),%eax
  80569d:	8b 56 20             	mov    0x20(%esi),%edx
  8056a0:	0f b7 c0             	movzwl %ax,%eax
  8056a3:	89 f9                	mov    %edi,%ecx
  8056a5:	88 8c 10 f0 00 00 00 	mov    %cl,0xf0(%eax,%edx,1)
  8056ac:	8d 43 02             	lea    0x2(%ebx),%eax
  8056af:	66 89 46 24          	mov    %ax,0x24(%esi)
  8056b3:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8056b6:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8056b9:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8056bc:	89 ec                	mov    %ebp,%esp
  8056be:	5d                   	pop    %ebp
  8056bf:	c3                   	ret    

008056c0 <dhcp_option_byte>:
  8056c0:	55                   	push   %ebp
  8056c1:	89 e5                	mov    %esp,%ebp
  8056c3:	83 ec 18             	sub    $0x18,%esp
  8056c6:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8056c9:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8056cc:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8056cf:	89 c3                	mov    %eax,%ebx
  8056d1:	89 d6                	mov    %edx,%esi
  8056d3:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  8056d7:	66 83 f9 43          	cmp    $0x43,%cx
  8056db:	76 1c                	jbe    8056f9 <dhcp_option_byte+0x39>
  8056dd:	c7 44 24 08 68 2c 81 	movl   $0x812c68,0x8(%esp)
  8056e4:	00 
  8056e5:	c7 44 24 04 65 04 00 	movl   $0x465,0x4(%esp)
  8056ec:	00 
  8056ed:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8056f4:	e8 93 b1 ff ff       	call   80088c <_panic>
  8056f9:	8b 78 20             	mov    0x20(%eax),%edi
  8056fc:	0f b7 d1             	movzwl %cx,%edx
  8056ff:	89 f0                	mov    %esi,%eax
  805701:	88 84 3a f0 00 00 00 	mov    %al,0xf0(%edx,%edi,1)
  805708:	8d 41 01             	lea    0x1(%ecx),%eax
  80570b:	66 89 43 24          	mov    %ax,0x24(%ebx)
  80570f:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  805712:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  805715:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  805718:	89 ec                	mov    %ebp,%esp
  80571a:	5d                   	pop    %ebp
  80571b:	c3                   	ret    

0080571c <dhcp_option>:
  80571c:	55                   	push   %ebp
  80571d:	89 e5                	mov    %esp,%ebp
  80571f:	83 ec 28             	sub    $0x28,%esp
  805722:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  805725:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  805728:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80572b:	89 c3                	mov    %eax,%ebx
  80572d:	88 55 ef             	mov    %dl,0xffffffef(%ebp)
  805730:	89 ce                	mov    %ecx,%esi
  805732:	0f b7 48 24          	movzwl 0x24(%eax),%ecx
  805736:	0f b7 c1             	movzwl %cx,%eax
  805739:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80573c:	89 f0                	mov    %esi,%eax
  80573e:	0f b6 d0             	movzbl %al,%edx
  805741:	8b 7d f0             	mov    0xfffffff0(%ebp),%edi
  805744:	8d 44 17 02          	lea    0x2(%edi,%edx,1),%eax
  805748:	83 f8 44             	cmp    $0x44,%eax
  80574b:	76 1c                	jbe    805769 <dhcp_option+0x4d>
  80574d:	c7 44 24 08 a4 2c 81 	movl   $0x812ca4,0x8(%esp)
  805754:	00 
  805755:	c7 44 24 04 5a 04 00 	movl   $0x45a,0x4(%esp)
  80575c:	00 
  80575d:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  805764:	e8 23 b1 ff ff       	call   80088c <_panic>
  805769:	8b 53 20             	mov    0x20(%ebx),%edx
  80576c:	0f b7 c1             	movzwl %cx,%eax
  80576f:	89 c7                	mov    %eax,%edi
  805771:	0f b6 45 ef          	movzbl 0xffffffef(%ebp),%eax
  805775:	88 84 17 f0 00 00 00 	mov    %al,0xf0(%edi,%edx,1)
  80577c:	8d 41 01             	lea    0x1(%ecx),%eax
  80577f:	8b 53 20             	mov    0x20(%ebx),%edx
  805782:	0f b7 f8             	movzwl %ax,%edi
  805785:	89 f0                	mov    %esi,%eax
  805787:	88 84 17 f0 00 00 00 	mov    %al,0xf0(%edi,%edx,1)
  80578e:	8d 41 02             	lea    0x2(%ecx),%eax
  805791:	66 89 43 24          	mov    %ax,0x24(%ebx)
  805795:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  805798:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80579b:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80579e:	89 ec                	mov    %ebp,%esp
  8057a0:	5d                   	pop    %ebp
  8057a1:	c3                   	ret    

008057a2 <dhcp_delete_request>:
  8057a2:	55                   	push   %ebp
  8057a3:	89 e5                	mov    %esp,%ebp
  8057a5:	53                   	push   %ebx
  8057a6:	83 ec 14             	sub    $0x14,%esp
  8057a9:	85 c0                	test   %eax,%eax
  8057ab:	75 1c                	jne    8057c9 <dhcp_delete_request+0x27>
  8057ad:	c7 44 24 08 ec 2c 81 	movl   $0x812cec,0x8(%esp)
  8057b4:	00 
  8057b5:	c7 44 24 04 69 05 00 	movl   $0x569,0x4(%esp)
  8057bc:	00 
  8057bd:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8057c4:	e8 c3 b0 ff ff       	call   80088c <_panic>
  8057c9:	8b 58 20             	mov    0x20(%eax),%ebx
  8057cc:	85 db                	test   %ebx,%ebx
  8057ce:	75 1c                	jne    8057ec <dhcp_delete_request+0x4a>
  8057d0:	c7 44 24 08 10 2d 81 	movl   $0x812d10,0x8(%esp)
  8057d7:	00 
  8057d8:	c7 44 24 04 6b 05 00 	movl   $0x56b,0x4(%esp)
  8057df:	00 
  8057e0:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8057e7:	e8 a0 b0 ff ff       	call   80088c <_panic>
  8057ec:	8b 43 1c             	mov    0x1c(%ebx),%eax
  8057ef:	85 c0                	test   %eax,%eax
  8057f1:	75 1c                	jne    80580f <dhcp_delete_request+0x6d>
  8057f3:	c7 44 24 08 34 2d 81 	movl   $0x812d34,0x8(%esp)
  8057fa:	00 
  8057fb:	c7 44 24 04 6c 05 00 	movl   $0x56c,0x4(%esp)
  805802:	00 
  805803:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80580a:	e8 7d b0 ff ff       	call   80088c <_panic>
  80580f:	83 7b 20 00          	cmpl   $0x0,0x20(%ebx)
  805813:	75 1c                	jne    805831 <dhcp_delete_request+0x8f>
  805815:	c7 44 24 08 60 2d 81 	movl   $0x812d60,0x8(%esp)
  80581c:	00 
  80581d:	c7 44 24 04 6d 05 00 	movl   $0x56d,0x4(%esp)
  805824:	00 
  805825:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80582c:	e8 5b b0 ff ff       	call   80088c <_panic>
  805831:	89 04 24             	mov    %eax,(%esp)
  805834:	e8 5b 22 00 00       	call   807a94 <pbuf_free>
  805839:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%ebx)
  805840:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
  805847:	83 c4 14             	add    $0x14,%esp
  80584a:	5b                   	pop    %ebx
  80584b:	5d                   	pop    %ebp
  80584c:	c3                   	ret    

0080584d <dhcp_free_reply>:
  80584d:	55                   	push   %ebp
  80584e:	89 e5                	mov    %esp,%ebp
  805850:	53                   	push   %ebx
  805851:	83 ec 04             	sub    $0x4,%esp
  805854:	89 c3                	mov    %eax,%ebx
  805856:	8b 40 10             	mov    0x10(%eax),%eax
  805859:	85 c0                	test   %eax,%eax
  80585b:	74 0f                	je     80586c <dhcp_free_reply+0x1f>
  80585d:	89 04 24             	mov    %eax,(%esp)
  805860:	e8 2d 18 00 00       	call   807092 <mem_free>
  805865:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  80586c:	8b 43 14             	mov    0x14(%ebx),%eax
  80586f:	85 c0                	test   %eax,%eax
  805871:	74 15                	je     805888 <dhcp_free_reply+0x3b>
  805873:	89 04 24             	mov    %eax,(%esp)
  805876:	e8 17 18 00 00       	call   807092 <mem_free>
  80587b:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
  805882:	66 c7 43 18 00 00    	movw   $0x0,0x18(%ebx)
  805888:	83 c4 04             	add    $0x4,%esp
  80588b:	5b                   	pop    %ebx
  80588c:	5d                   	pop    %ebp
  80588d:	c3                   	ret    

0080588e <dhcp_stop>:
  80588e:	55                   	push   %ebp
  80588f:	89 e5                	mov    %esp,%ebp
  805891:	56                   	push   %esi
  805892:	53                   	push   %ebx
  805893:	83 ec 10             	sub    $0x10,%esp
  805896:	8b 75 08             	mov    0x8(%ebp),%esi
  805899:	8b 5e 20             	mov    0x20(%esi),%ebx
  80589c:	85 f6                	test   %esi,%esi
  80589e:	75 1c                	jne    8058bc <dhcp_stop+0x2e>
  8058a0:	c7 44 24 08 b7 2e 81 	movl   $0x812eb7,0x8(%esp)
  8058a7:	00 
  8058a8:	c7 44 24 04 2c 04 00 	movl   $0x42c,0x4(%esp)
  8058af:	00 
  8058b0:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8058b7:	e8 d0 af ff ff       	call   80088c <_panic>
  8058bc:	80 66 2e f7          	andb   $0xf7,0x2e(%esi)
  8058c0:	85 db                	test   %ebx,%ebx
  8058c2:	74 42                	je     805906 <dhcp_stop+0x78>
  8058c4:	8b 43 08             	mov    0x8(%ebx),%eax
  8058c7:	85 c0                	test   %eax,%eax
  8058c9:	74 0f                	je     8058da <dhcp_stop+0x4c>
  8058cb:	89 04 24             	mov    %eax,(%esp)
  8058ce:	e8 c9 63 00 00       	call   80bc9c <udp_remove>
  8058d3:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  8058da:	8b 43 0c             	mov    0xc(%ebx),%eax
  8058dd:	85 c0                	test   %eax,%eax
  8058df:	74 0f                	je     8058f0 <dhcp_stop+0x62>
  8058e1:	89 04 24             	mov    %eax,(%esp)
  8058e4:	e8 ab 21 00 00       	call   807a94 <pbuf_free>
  8058e9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  8058f0:	89 d8                	mov    %ebx,%eax
  8058f2:	e8 56 ff ff ff       	call   80584d <dhcp_free_reply>
  8058f7:	89 1c 24             	mov    %ebx,(%esp)
  8058fa:	e8 93 17 00 00       	call   807092 <mem_free>
  8058ff:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
  805906:	83 c4 10             	add    $0x10,%esp
  805909:	5b                   	pop    %ebx
  80590a:	5e                   	pop    %esi
  80590b:	5d                   	pop    %ebp
  80590c:	c3                   	ret    

0080590d <dhcp_create_request>:
  80590d:	55                   	push   %ebp
  80590e:	89 e5                	mov    %esp,%ebp
  805910:	57                   	push   %edi
  805911:	56                   	push   %esi
  805912:	53                   	push   %ebx
  805913:	83 ec 1c             	sub    $0x1c,%esp
  805916:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  805919:	85 c0                	test   %eax,%eax
  80591b:	75 1c                	jne    805939 <dhcp_create_request+0x2c>
  80591d:	c7 44 24 08 8c 2d 81 	movl   $0x812d8c,0x8(%esp)
  805924:	00 
  805925:	c7 44 24 04 2d 05 00 	movl   $0x52d,0x4(%esp)
  80592c:	00 
  80592d:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  805934:	e8 53 af ff ff       	call   80088c <_panic>
  805939:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80593c:	8b 70 20             	mov    0x20(%eax),%esi
  80593f:	85 f6                	test   %esi,%esi
  805941:	75 1c                	jne    80595f <dhcp_create_request+0x52>
  805943:	c7 44 24 08 b0 2d 81 	movl   $0x812db0,0x8(%esp)
  80594a:	00 
  80594b:	c7 44 24 04 2f 05 00 	movl   $0x52f,0x4(%esp)
  805952:	00 
  805953:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80595a:	e8 2d af ff ff       	call   80088c <_panic>
  80595f:	83 7e 1c 00          	cmpl   $0x0,0x1c(%esi)
  805963:	74 1c                	je     805981 <dhcp_create_request+0x74>
  805965:	c7 44 24 08 d4 2d 81 	movl   $0x812dd4,0x8(%esp)
  80596c:	00 
  80596d:	c7 44 24 04 30 05 00 	movl   $0x530,0x4(%esp)
  805974:	00 
  805975:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80597c:	e8 0b af ff ff       	call   80088c <_panic>
  805981:	83 7e 20 00          	cmpl   $0x0,0x20(%esi)
  805985:	74 1c                	je     8059a3 <dhcp_create_request+0x96>
  805987:	c7 44 24 08 00 2e 81 	movl   $0x812e00,0x8(%esp)
  80598e:	00 
  80598f:	c7 44 24 04 31 05 00 	movl   $0x531,0x4(%esp)
  805996:	00 
  805997:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80599e:	e8 e9 ae ff ff       	call   80088c <_panic>
  8059a3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8059aa:	00 
  8059ab:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
  8059b2:	00 
  8059b3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8059ba:	e8 98 23 00 00       	call   807d57 <pbuf_alloc>
  8059bf:	89 46 1c             	mov    %eax,0x1c(%esi)
  8059c2:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8059c7:	85 c0                	test   %eax,%eax
  8059c9:	0f 84 2f 01 00 00    	je     805afe <dhcp_create_request+0x1f1>
  8059cf:	66 81 78 0a 33 01    	cmpw   $0x133,0xa(%eax)
  8059d5:	77 1c                	ja     8059f3 <dhcp_create_request+0xe6>
  8059d7:	c7 44 24 08 2c 2e 81 	movl   $0x812e2c,0x8(%esp)
  8059de:	00 
  8059df:	c7 44 24 04 38 05 00 	movl   $0x538,0x4(%esp)
  8059e6:	00 
  8059e7:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8059ee:	e8 99 ae ff ff       	call   80088c <_panic>
  8059f3:	a1 40 80 81 00       	mov    0x818040,%eax
  8059f8:	89 46 04             	mov    %eax,0x4(%esi)
  8059fb:	83 c0 01             	add    $0x1,%eax
  8059fe:	a3 40 80 81 00       	mov    %eax,0x818040
  805a03:	8b 46 1c             	mov    0x1c(%esi),%eax
  805a06:	8b 40 04             	mov    0x4(%eax),%eax
  805a09:	89 46 20             	mov    %eax,0x20(%esi)
  805a0c:	c6 00 01             	movb   $0x1,(%eax)
  805a0f:	8b 46 20             	mov    0x20(%esi),%eax
  805a12:	c6 40 01 01          	movb   $0x1,0x1(%eax)
  805a16:	8b 46 20             	mov    0x20(%esi),%eax
  805a19:	c6 40 02 06          	movb   $0x6,0x2(%eax)
  805a1d:	8b 46 20             	mov    0x20(%esi),%eax
  805a20:	c6 40 03 00          	movb   $0x0,0x3(%eax)
  805a24:	8b 5e 20             	mov    0x20(%esi),%ebx
  805a27:	8b 46 04             	mov    0x4(%esi),%eax
  805a2a:	89 04 24             	mov    %eax,(%esp)
  805a2d:	e8 5a 4e 00 00       	call   80a88c <htonl>
  805a32:	89 43 04             	mov    %eax,0x4(%ebx)
  805a35:	8b 46 20             	mov    0x20(%esi),%eax
  805a38:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
  805a3e:	8b 46 20             	mov    0x20(%esi),%eax
  805a41:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%eax)
  805a47:	8b 56 20             	mov    0x20(%esi),%edx
  805a4a:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  805a4d:	8b 41 04             	mov    0x4(%ecx),%eax
  805a50:	89 42 0c             	mov    %eax,0xc(%edx)
  805a53:	8b 46 20             	mov    0x20(%esi),%eax
  805a56:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
  805a5d:	8b 46 20             	mov    0x20(%esi),%eax
  805a60:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  805a67:	8b 46 20             	mov    0x20(%esi),%eax
  805a6a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
  805a71:	ba 00 00 00 00       	mov    $0x0,%edx
  805a76:	8b 5e 20             	mov    0x20(%esi),%ebx
  805a79:	89 d1                	mov    %edx,%ecx
  805a7b:	8b 7d f0             	mov    0xfffffff0(%ebp),%edi
  805a7e:	66 0f b6 47 24       	movzbw 0x24(%edi),%ax
  805a83:	bf 00 00 00 00       	mov    $0x0,%edi
  805a88:	66 39 d0             	cmp    %dx,%ax
  805a8b:	76 08                	jbe    805a95 <dhcp_create_request+0x188>
  805a8d:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  805a90:	0f b6 7c 02 25       	movzbl 0x25(%edx,%eax,1),%edi
  805a95:	89 f8                	mov    %edi,%eax
  805a97:	88 44 19 1c          	mov    %al,0x1c(%ecx,%ebx,1)
  805a9b:	83 c2 01             	add    $0x1,%edx
  805a9e:	83 fa 10             	cmp    $0x10,%edx
  805aa1:	75 d3                	jne    805a76 <dhcp_create_request+0x169>
  805aa3:	b2 00                	mov    $0x0,%dl
  805aa5:	8b 46 20             	mov    0x20(%esi),%eax
  805aa8:	c6 44 02 2c 00       	movb   $0x0,0x2c(%edx,%eax,1)
  805aad:	83 c2 01             	add    $0x1,%edx
  805ab0:	83 fa 40             	cmp    $0x40,%edx
  805ab3:	75 f0                	jne    805aa5 <dhcp_create_request+0x198>
  805ab5:	b2 00                	mov    $0x0,%dl
  805ab7:	8b 46 20             	mov    0x20(%esi),%eax
  805aba:	c6 44 02 6c 00       	movb   $0x0,0x6c(%edx,%eax,1)
  805abf:	83 c2 01             	add    $0x1,%edx
  805ac2:	81 fa 80 00 00 00    	cmp    $0x80,%edx
  805ac8:	75 ed                	jne    805ab7 <dhcp_create_request+0x1aa>
  805aca:	8b 5e 20             	mov    0x20(%esi),%ebx
  805acd:	c7 04 24 63 53 82 63 	movl   $0x63825363,(%esp)
  805ad4:	e8 b3 4d 00 00       	call   80a88c <htonl>
  805ad9:	89 83 ec 00 00 00    	mov    %eax,0xec(%ebx)
  805adf:	66 c7 46 24 00 00    	movw   $0x0,0x24(%esi)
  805ae5:	ba 00 00 00 00       	mov    $0x0,%edx
  805aea:	8b 46 20             	mov    0x20(%esi),%eax
  805aed:	88 94 02 f0 00 00 00 	mov    %dl,0xf0(%edx,%eax,1)
  805af4:	83 c2 01             	add    $0x1,%edx
  805af7:	83 fa 44             	cmp    $0x44,%edx
  805afa:	75 ee                	jne    805aea <dhcp_create_request+0x1dd>
  805afc:	b2 00                	mov    $0x0,%dl
  805afe:	89 d0                	mov    %edx,%eax
  805b00:	83 c4 1c             	add    $0x1c,%esp
  805b03:	5b                   	pop    %ebx
  805b04:	5e                   	pop    %esi
  805b05:	5f                   	pop    %edi
  805b06:	5d                   	pop    %ebp
  805b07:	c3                   	ret    

00805b08 <dhcp_release>:
  805b08:	55                   	push   %ebp
  805b09:	89 e5                	mov    %esp,%ebp
  805b0b:	57                   	push   %edi
  805b0c:	56                   	push   %esi
  805b0d:	53                   	push   %ebx
  805b0e:	83 ec 1c             	sub    $0x1c,%esp
  805b11:	8b 7d 08             	mov    0x8(%ebp),%edi
  805b14:	8b 77 20             	mov    0x20(%edi),%esi
  805b17:	ba 0d 00 00 00       	mov    $0xd,%edx
  805b1c:	89 f0                	mov    %esi,%eax
  805b1e:	e8 6d f8 ff ff       	call   805390 <dhcp_set_state>
  805b23:	c7 46 2c 00 00 00 00 	movl   $0x0,0x2c(%esi)
  805b2a:	c7 46 34 00 00 00 00 	movl   $0x0,0x34(%esi)
  805b31:	c7 46 30 00 00 00 00 	movl   $0x0,0x30(%esi)
  805b38:	c7 46 3c 00 00 00 00 	movl   $0x0,0x3c(%esi)
  805b3f:	c7 46 38 00 00 00 00 	movl   $0x0,0x38(%esi)
  805b46:	c7 46 54 00 00 00 00 	movl   $0x0,0x54(%esi)
  805b4d:	c7 46 50 00 00 00 00 	movl   $0x0,0x50(%esi)
  805b54:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
  805b5b:	c7 46 40 00 00 00 00 	movl   $0x0,0x40(%esi)
  805b62:	89 f8                	mov    %edi,%eax
  805b64:	e8 a4 fd ff ff       	call   80590d <dhcp_create_request>
  805b69:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  805b6c:	84 c0                	test   %al,%al
  805b6e:	0f 85 81 00 00 00    	jne    805bf5 <dhcp_release+0xed>
  805b74:	b9 01 00 00 00       	mov    $0x1,%ecx
  805b79:	ba 35 00 00 00       	mov    $0x35,%edx
  805b7e:	89 f0                	mov    %esi,%eax
  805b80:	e8 97 fb ff ff       	call   80571c <dhcp_option>
  805b85:	ba 07 00 00 00       	mov    $0x7,%edx
  805b8a:	89 f0                	mov    %esi,%eax
  805b8c:	e8 2f fb ff ff       	call   8056c0 <dhcp_option_byte>
  805b91:	89 f0                	mov    %esi,%eax
  805b93:	e8 37 f9 ff ff       	call   8054cf <dhcp_option_trailer>
  805b98:	0f b7 46 24          	movzwl 0x24(%esi),%eax
  805b9c:	66 05 f0 00          	add    $0xf0,%ax
  805ba0:	0f b7 c0             	movzwl %ax,%eax
  805ba3:	89 44 24 04          	mov    %eax,0x4(%esp)
  805ba7:	8b 46 1c             	mov    0x1c(%esi),%eax
  805baa:	89 04 24             	mov    %eax,(%esp)
  805bad:	e8 72 20 00 00       	call   807c24 <pbuf_realloc>
  805bb2:	8d 5e 2c             	lea    0x2c(%esi),%ebx
  805bb5:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  805bbc:	00 
  805bbd:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805bc1:	8b 46 08             	mov    0x8(%esi),%eax
  805bc4:	89 04 24             	mov    %eax,(%esp)
  805bc7:	e8 f8 61 00 00       	call   80bdc4 <udp_connect>
  805bcc:	89 7c 24 10          	mov    %edi,0x10(%esp)
  805bd0:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  805bd7:	00 
  805bd8:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  805bdc:	8b 46 1c             	mov    0x1c(%esi),%eax
  805bdf:	89 44 24 04          	mov    %eax,0x4(%esp)
  805be3:	8b 46 08             	mov    0x8(%esi),%eax
  805be6:	89 04 24             	mov    %eax,(%esp)
  805be9:	e8 5d 62 00 00       	call   80be4b <udp_sendto_if>
  805bee:	89 f8                	mov    %edi,%eax
  805bf0:	e8 ad fb ff ff       	call   8057a2 <dhcp_delete_request>
  805bf5:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  805bf9:	83 c0 01             	add    $0x1,%eax
  805bfc:	88 46 01             	mov    %al,0x1(%esi)
  805bff:	ba 10 27 00 00       	mov    $0x2710,%edx
  805c04:	3c 09                	cmp    $0x9,%al
  805c06:	77 08                	ja     805c10 <dhcp_release+0x108>
  805c08:	0f b6 c0             	movzbl %al,%eax
  805c0b:	66 69 d0 e8 03       	imul   $0x3e8,%ax,%dx
  805c10:	0f b7 d2             	movzwl %dx,%edx
  805c13:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  805c19:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  805c1e:	f7 ea                	imul   %edx
  805c20:	c1 fa 05             	sar    $0x5,%edx
  805c23:	66 89 56 26          	mov    %dx,0x26(%esi)
  805c27:	89 3c 24             	mov    %edi,(%esp)
  805c2a:	e8 79 18 00 00       	call   8074a8 <netif_set_down>
  805c2f:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  805c36:	00 
  805c37:	89 3c 24             	mov    %edi,(%esp)
  805c3a:	e8 c2 18 00 00       	call   807501 <netif_set_ipaddr>
  805c3f:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  805c46:	00 
  805c47:	89 3c 24             	mov    %edi,(%esp)
  805c4a:	e8 c3 17 00 00       	call   807412 <netif_set_gw>
  805c4f:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  805c56:	00 
  805c57:	89 3c 24             	mov    %edi,(%esp)
  805c5a:	e8 cc 17 00 00       	call   80742b <netif_set_netmask>
  805c5f:	0f be 45 f3          	movsbl 0xfffffff3(%ebp),%eax
  805c63:	83 c4 1c             	add    $0x1c,%esp
  805c66:	5b                   	pop    %ebx
  805c67:	5e                   	pop    %esi
  805c68:	5f                   	pop    %edi
  805c69:	5d                   	pop    %ebp
  805c6a:	c3                   	ret    

00805c6b <dhcp_rebind>:
  805c6b:	55                   	push   %ebp
  805c6c:	89 e5                	mov    %esp,%ebp
  805c6e:	83 ec 28             	sub    $0x28,%esp
  805c71:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  805c74:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  805c77:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  805c7a:	89 c6                	mov    %eax,%esi
  805c7c:	8b 58 20             	mov    0x20(%eax),%ebx
  805c7f:	ba 04 00 00 00       	mov    $0x4,%edx
  805c84:	89 d8                	mov    %ebx,%eax
  805c86:	e8 05 f7 ff ff       	call   805390 <dhcp_set_state>
  805c8b:	89 f0                	mov    %esi,%eax
  805c8d:	e8 7b fc ff ff       	call   80590d <dhcp_create_request>
  805c92:	89 c7                	mov    %eax,%edi
  805c94:	84 c0                	test   %al,%al
  805c96:	0f 85 a3 00 00 00    	jne    805d3f <dhcp_rebind+0xd4>
  805c9c:	b9 01 00 00 00       	mov    $0x1,%ecx
  805ca1:	ba 35 00 00 00       	mov    $0x35,%edx
  805ca6:	89 d8                	mov    %ebx,%eax
  805ca8:	e8 6f fa ff ff       	call   80571c <dhcp_option>
  805cad:	ba 03 00 00 00       	mov    $0x3,%edx
  805cb2:	89 d8                	mov    %ebx,%eax
  805cb4:	e8 07 fa ff ff       	call   8056c0 <dhcp_option_byte>
  805cb9:	b9 02 00 00 00       	mov    $0x2,%ecx
  805cbe:	ba 39 00 00 00       	mov    $0x39,%edx
  805cc3:	89 d8                	mov    %ebx,%eax
  805cc5:	e8 52 fa ff ff       	call   80571c <dhcp_option>
  805cca:	ba 40 02 00 00       	mov    $0x240,%edx
  805ccf:	89 d8                	mov    %ebx,%eax
  805cd1:	e8 71 f9 ff ff       	call   805647 <dhcp_option_short>
  805cd6:	89 d8                	mov    %ebx,%eax
  805cd8:	e8 f2 f7 ff ff       	call   8054cf <dhcp_option_trailer>
  805cdd:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  805ce1:	66 05 f0 00          	add    $0xf0,%ax
  805ce5:	0f b7 c0             	movzwl %ax,%eax
  805ce8:	89 44 24 04          	mov    %eax,0x4(%esp)
  805cec:	8b 43 1c             	mov    0x1c(%ebx),%eax
  805cef:	89 04 24             	mov    %eax,(%esp)
  805cf2:	e8 2d 1f 00 00       	call   807c24 <pbuf_realloc>
  805cf7:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  805cfe:	00 
  805cff:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  805d06:	00 
  805d07:	8b 43 08             	mov    0x8(%ebx),%eax
  805d0a:	89 04 24             	mov    %eax,(%esp)
  805d0d:	e8 b2 60 00 00       	call   80bdc4 <udp_connect>
  805d12:	89 74 24 10          	mov    %esi,0x10(%esp)
  805d16:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  805d1d:	00 
  805d1e:	c7 44 24 08 d4 37 81 	movl   $0x8137d4,0x8(%esp)
  805d25:	00 
  805d26:	8b 43 1c             	mov    0x1c(%ebx),%eax
  805d29:	89 44 24 04          	mov    %eax,0x4(%esp)
  805d2d:	8b 43 08             	mov    0x8(%ebx),%eax
  805d30:	89 04 24             	mov    %eax,(%esp)
  805d33:	e8 13 61 00 00       	call   80be4b <udp_sendto_if>
  805d38:	89 f0                	mov    %esi,%eax
  805d3a:	e8 63 fa ff ff       	call   8057a2 <dhcp_delete_request>
  805d3f:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  805d43:	83 c0 01             	add    $0x1,%eax
  805d46:	88 43 01             	mov    %al,0x1(%ebx)
  805d49:	ba 10 27 00 00       	mov    $0x2710,%edx
  805d4e:	3c 09                	cmp    $0x9,%al
  805d50:	77 08                	ja     805d5a <dhcp_rebind+0xef>
  805d52:	0f b6 c0             	movzbl %al,%eax
  805d55:	66 69 d0 e8 03       	imul   $0x3e8,%ax,%dx
  805d5a:	0f b7 d2             	movzwl %dx,%edx
  805d5d:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  805d63:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  805d68:	f7 ea                	imul   %edx
  805d6a:	c1 fa 05             	sar    $0x5,%edx
  805d6d:	66 89 53 26          	mov    %dx,0x26(%ebx)
  805d71:	89 fa                	mov    %edi,%edx
  805d73:	0f be c2             	movsbl %dl,%eax
  805d76:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  805d79:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  805d7c:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  805d7f:	89 ec                	mov    %ebp,%esp
  805d81:	5d                   	pop    %ebp
  805d82:	c3                   	ret    

00805d83 <dhcp_renew>:
  805d83:	55                   	push   %ebp
  805d84:	89 e5                	mov    %esp,%ebp
  805d86:	83 ec 28             	sub    $0x28,%esp
  805d89:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  805d8c:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  805d8f:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  805d92:	8b 7d 08             	mov    0x8(%ebp),%edi
  805d95:	8b 77 20             	mov    0x20(%edi),%esi
  805d98:	ba 05 00 00 00       	mov    $0x5,%edx
  805d9d:	89 f0                	mov    %esi,%eax
  805d9f:	e8 ec f5 ff ff       	call   805390 <dhcp_set_state>
  805da4:	89 f8                	mov    %edi,%eax
  805da6:	e8 62 fb ff ff       	call   80590d <dhcp_create_request>
  805dab:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  805dae:	84 c0                	test   %al,%al
  805db0:	0f 85 9e 00 00 00    	jne    805e54 <dhcp_renew+0xd1>
  805db6:	b9 01 00 00 00       	mov    $0x1,%ecx
  805dbb:	ba 35 00 00 00       	mov    $0x35,%edx
  805dc0:	89 f0                	mov    %esi,%eax
  805dc2:	e8 55 f9 ff ff       	call   80571c <dhcp_option>
  805dc7:	ba 03 00 00 00       	mov    $0x3,%edx
  805dcc:	89 f0                	mov    %esi,%eax
  805dce:	e8 ed f8 ff ff       	call   8056c0 <dhcp_option_byte>
  805dd3:	b9 02 00 00 00       	mov    $0x2,%ecx
  805dd8:	ba 39 00 00 00       	mov    $0x39,%edx
  805ddd:	89 f0                	mov    %esi,%eax
  805ddf:	e8 38 f9 ff ff       	call   80571c <dhcp_option>
  805de4:	ba 40 02 00 00       	mov    $0x240,%edx
  805de9:	89 f0                	mov    %esi,%eax
  805deb:	e8 57 f8 ff ff       	call   805647 <dhcp_option_short>
  805df0:	89 f0                	mov    %esi,%eax
  805df2:	e8 d8 f6 ff ff       	call   8054cf <dhcp_option_trailer>
  805df7:	0f b7 46 24          	movzwl 0x24(%esi),%eax
  805dfb:	66 05 f0 00          	add    $0xf0,%ax
  805dff:	0f b7 c0             	movzwl %ax,%eax
  805e02:	89 44 24 04          	mov    %eax,0x4(%esp)
  805e06:	8b 46 1c             	mov    0x1c(%esi),%eax
  805e09:	89 04 24             	mov    %eax,(%esp)
  805e0c:	e8 13 1e 00 00       	call   807c24 <pbuf_realloc>
  805e11:	8d 5e 2c             	lea    0x2c(%esi),%ebx
  805e14:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  805e1b:	00 
  805e1c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  805e20:	8b 46 08             	mov    0x8(%esi),%eax
  805e23:	89 04 24             	mov    %eax,(%esp)
  805e26:	e8 99 5f 00 00       	call   80bdc4 <udp_connect>
  805e2b:	89 7c 24 10          	mov    %edi,0x10(%esp)
  805e2f:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  805e36:	00 
  805e37:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  805e3b:	8b 46 1c             	mov    0x1c(%esi),%eax
  805e3e:	89 44 24 04          	mov    %eax,0x4(%esp)
  805e42:	8b 46 08             	mov    0x8(%esi),%eax
  805e45:	89 04 24             	mov    %eax,(%esp)
  805e48:	e8 fe 5f 00 00       	call   80be4b <udp_sendto_if>
  805e4d:	89 f8                	mov    %edi,%eax
  805e4f:	e8 4e f9 ff ff       	call   8057a2 <dhcp_delete_request>
  805e54:	0f b6 46 01          	movzbl 0x1(%esi),%eax
  805e58:	83 c0 01             	add    $0x1,%eax
  805e5b:	88 46 01             	mov    %al,0x1(%esi)
  805e5e:	ba 20 4e 00 00       	mov    $0x4e20,%edx
  805e63:	3c 09                	cmp    $0x9,%al
  805e65:	77 08                	ja     805e6f <dhcp_renew+0xec>
  805e67:	0f b6 c0             	movzbl %al,%eax
  805e6a:	66 69 d0 d0 07       	imul   $0x7d0,%ax,%dx
  805e6f:	0f b7 d2             	movzwl %dx,%edx
  805e72:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  805e78:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  805e7d:	f7 ea                	imul   %edx
  805e7f:	c1 fa 05             	sar    $0x5,%edx
  805e82:	66 89 56 26          	mov    %dx,0x26(%esi)
  805e86:	0f be 45 f3          	movsbl 0xfffffff3(%ebp),%eax
  805e8a:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  805e8d:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  805e90:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  805e93:	89 ec                	mov    %ebp,%esp
  805e95:	5d                   	pop    %ebp
  805e96:	c3                   	ret    

00805e97 <dhcp_coarse_tmr>:
  805e97:	55                   	push   %ebp
  805e98:	89 e5                	mov    %esp,%ebp
  805e9a:	53                   	push   %ebx
  805e9b:	83 ec 04             	sub    $0x4,%esp
  805e9e:	8b 1d c0 e5 b3 00    	mov    0xb3e5c0,%ebx
  805ea4:	85 db                	test   %ebx,%ebx
  805ea6:	74 65                	je     805f0d <dhcp_coarse_tmr+0x76>
  805ea8:	8b 53 20             	mov    0x20(%ebx),%edx
  805eab:	85 d2                	test   %edx,%edx
  805ead:	74 58                	je     805f07 <dhcp_coarse_tmr+0x70>
  805eaf:	0f b7 42 2a          	movzwl 0x2a(%edx),%eax
  805eb3:	83 e8 01             	sub    $0x1,%eax
  805eb6:	66 89 42 2a          	mov    %ax,0x2a(%edx)
  805eba:	66 85 c0             	test   %ax,%ax
  805ebd:	75 1b                	jne    805eda <dhcp_coarse_tmr+0x43>
  805ebf:	8b 43 20             	mov    0x20(%ebx),%eax
  805ec2:	0f b6 00             	movzbl (%eax),%eax
  805ec5:	3c 01                	cmp    $0x1,%al
  805ec7:	74 08                	je     805ed1 <dhcp_coarse_tmr+0x3a>
  805ec9:	3c 0a                	cmp    $0xa,%al
  805ecb:	74 04                	je     805ed1 <dhcp_coarse_tmr+0x3a>
  805ecd:	3c 05                	cmp    $0x5,%al
  805ecf:	75 36                	jne    805f07 <dhcp_coarse_tmr+0x70>
  805ed1:	89 d8                	mov    %ebx,%eax
  805ed3:	e8 93 fd ff ff       	call   805c6b <dhcp_rebind>
  805ed8:	eb 2d                	jmp    805f07 <dhcp_coarse_tmr+0x70>
  805eda:	8b 43 20             	mov    0x20(%ebx),%eax
  805edd:	0f b7 50 28          	movzwl 0x28(%eax),%edx
  805ee1:	83 ea 01             	sub    $0x1,%edx
  805ee4:	66 89 50 28          	mov    %dx,0x28(%eax)
  805ee8:	66 85 d2             	test   %dx,%dx
  805eeb:	75 1a                	jne    805f07 <dhcp_coarse_tmr+0x70>
  805eed:	8b 43 20             	mov    0x20(%ebx),%eax
  805ef0:	0f b6 00             	movzbl (%eax),%eax
  805ef3:	3c 01                	cmp    $0x1,%al
  805ef5:	74 08                	je     805eff <dhcp_coarse_tmr+0x68>
  805ef7:	3c 0a                	cmp    $0xa,%al
  805ef9:	74 04                	je     805eff <dhcp_coarse_tmr+0x68>
  805efb:	3c 05                	cmp    $0x5,%al
  805efd:	75 08                	jne    805f07 <dhcp_coarse_tmr+0x70>
  805eff:	89 1c 24             	mov    %ebx,(%esp)
  805f02:	e8 7c fe ff ff       	call   805d83 <dhcp_renew>
  805f07:	8b 1b                	mov    (%ebx),%ebx
  805f09:	85 db                	test   %ebx,%ebx
  805f0b:	75 9b                	jne    805ea8 <dhcp_coarse_tmr+0x11>
  805f0d:	83 c4 04             	add    $0x4,%esp
  805f10:	5b                   	pop    %ebx
  805f11:	5d                   	pop    %ebp
  805f12:	c3                   	ret    

00805f13 <dhcp_discover>:
  805f13:	55                   	push   %ebp
  805f14:	89 e5                	mov    %esp,%ebp
  805f16:	57                   	push   %edi
  805f17:	56                   	push   %esi
  805f18:	53                   	push   %ebx
  805f19:	83 ec 1c             	sub    $0x1c,%esp
  805f1c:	89 c6                	mov    %eax,%esi
  805f1e:	8b 58 20             	mov    0x20(%eax),%ebx
  805f21:	a1 d0 37 81 00       	mov    0x8137d0,%eax
  805f26:	89 43 30             	mov    %eax,0x30(%ebx)
  805f29:	89 f0                	mov    %esi,%eax
  805f2b:	e8 dd f9 ff ff       	call   80590d <dhcp_create_request>
  805f30:	89 c7                	mov    %eax,%edi
  805f32:	84 c0                	test   %al,%al
  805f34:	0f 85 f0 00 00 00    	jne    80602a <dhcp_discover+0x117>
  805f3a:	b9 01 00 00 00       	mov    $0x1,%ecx
  805f3f:	ba 35 00 00 00       	mov    $0x35,%edx
  805f44:	89 d8                	mov    %ebx,%eax
  805f46:	e8 d1 f7 ff ff       	call   80571c <dhcp_option>
  805f4b:	ba 01 00 00 00       	mov    $0x1,%edx
  805f50:	89 d8                	mov    %ebx,%eax
  805f52:	e8 69 f7 ff ff       	call   8056c0 <dhcp_option_byte>
  805f57:	b9 02 00 00 00       	mov    $0x2,%ecx
  805f5c:	ba 39 00 00 00       	mov    $0x39,%edx
  805f61:	89 d8                	mov    %ebx,%eax
  805f63:	e8 b4 f7 ff ff       	call   80571c <dhcp_option>
  805f68:	ba 40 02 00 00       	mov    $0x240,%edx
  805f6d:	89 d8                	mov    %ebx,%eax
  805f6f:	e8 d3 f6 ff ff       	call   805647 <dhcp_option_short>
  805f74:	b9 04 00 00 00       	mov    $0x4,%ecx
  805f79:	ba 37 00 00 00       	mov    $0x37,%edx
  805f7e:	89 d8                	mov    %ebx,%eax
  805f80:	e8 97 f7 ff ff       	call   80571c <dhcp_option>
  805f85:	ba 01 00 00 00       	mov    $0x1,%edx
  805f8a:	89 d8                	mov    %ebx,%eax
  805f8c:	e8 2f f7 ff ff       	call   8056c0 <dhcp_option_byte>
  805f91:	ba 03 00 00 00       	mov    $0x3,%edx
  805f96:	89 d8                	mov    %ebx,%eax
  805f98:	e8 23 f7 ff ff       	call   8056c0 <dhcp_option_byte>
  805f9d:	ba 1c 00 00 00       	mov    $0x1c,%edx
  805fa2:	89 d8                	mov    %ebx,%eax
  805fa4:	e8 17 f7 ff ff       	call   8056c0 <dhcp_option_byte>
  805fa9:	ba 06 00 00 00       	mov    $0x6,%edx
  805fae:	89 d8                	mov    %ebx,%eax
  805fb0:	e8 0b f7 ff ff       	call   8056c0 <dhcp_option_byte>
  805fb5:	89 d8                	mov    %ebx,%eax
  805fb7:	e8 13 f5 ff ff       	call   8054cf <dhcp_option_trailer>
  805fbc:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  805fc0:	66 05 f0 00          	add    $0xf0,%ax
  805fc4:	0f b7 c0             	movzwl %ax,%eax
  805fc7:	89 44 24 04          	mov    %eax,0x4(%esp)
  805fcb:	8b 43 1c             	mov    0x1c(%ebx),%eax
  805fce:	89 04 24             	mov    %eax,(%esp)
  805fd1:	e8 4e 1c 00 00       	call   807c24 <pbuf_realloc>
  805fd6:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  805fdd:	00 
  805fde:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  805fe5:	00 
  805fe6:	8b 43 08             	mov    0x8(%ebx),%eax
  805fe9:	89 04 24             	mov    %eax,(%esp)
  805fec:	e8 d3 5d 00 00       	call   80bdc4 <udp_connect>
  805ff1:	89 74 24 10          	mov    %esi,0x10(%esp)
  805ff5:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  805ffc:	00 
  805ffd:	c7 44 24 08 d4 37 81 	movl   $0x8137d4,0x8(%esp)
  806004:	00 
  806005:	8b 43 1c             	mov    0x1c(%ebx),%eax
  806008:	89 44 24 04          	mov    %eax,0x4(%esp)
  80600c:	8b 43 08             	mov    0x8(%ebx),%eax
  80600f:	89 04 24             	mov    %eax,(%esp)
  806012:	e8 34 5e 00 00       	call   80be4b <udp_sendto_if>
  806017:	89 f0                	mov    %esi,%eax
  806019:	e8 84 f7 ff ff       	call   8057a2 <dhcp_delete_request>
  80601e:	ba 06 00 00 00       	mov    $0x6,%edx
  806023:	89 d8                	mov    %ebx,%eax
  806025:	e8 66 f3 ff ff       	call   805390 <dhcp_set_state>
  80602a:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  80602e:	83 c0 01             	add    $0x1,%eax
  806031:	88 43 01             	mov    %al,0x1(%ebx)
  806034:	ba 10 27 00 00       	mov    $0x2710,%edx
  806039:	3c 03                	cmp    $0x3,%al
  80603b:	77 0f                	ja     80604c <dhcp_discover+0x139>
  80603d:	0f b6 c0             	movzbl %al,%eax
  806040:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  806046:	8d 90 e8 03 00 00    	lea    0x3e8(%eax),%edx
  80604c:	0f b7 d2             	movzwl %dx,%edx
  80604f:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  806055:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  80605a:	f7 ea                	imul   %edx
  80605c:	c1 fa 05             	sar    $0x5,%edx
  80605f:	66 89 53 26          	mov    %dx,0x26(%ebx)
  806063:	89 fa                	mov    %edi,%edx
  806065:	0f be c2             	movsbl %dl,%eax
  806068:	83 c4 1c             	add    $0x1c,%esp
  80606b:	5b                   	pop    %ebx
  80606c:	5e                   	pop    %esi
  80606d:	5f                   	pop    %edi
  80606e:	5d                   	pop    %ebp
  80606f:	c3                   	ret    

00806070 <dhcp_arp_reply>:
  806070:	55                   	push   %ebp
  806071:	89 e5                	mov    %esp,%ebp
  806073:	83 ec 28             	sub    $0x28,%esp
  806076:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  806079:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80607c:	8b 75 08             	mov    0x8(%ebp),%esi
  80607f:	85 f6                	test   %esi,%esi
  806081:	75 1c                	jne    80609f <dhcp_arp_reply+0x2f>
  806083:	c7 44 24 08 db 2e 81 	movl   $0x812edb,0x8(%esp)
  80608a:	00 
  80608b:	c7 44 24 04 b5 02 00 	movl   $0x2b5,0x4(%esp)
  806092:	00 
  806093:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80609a:	e8 ed a7 ff ff       	call   80088c <_panic>
  80609f:	8b 5e 20             	mov    0x20(%esi),%ebx
  8060a2:	85 db                	test   %ebx,%ebx
  8060a4:	0f 84 04 01 00 00    	je     8061ae <dhcp_arp_reply+0x13e>
  8060aa:	80 3b 08             	cmpb   $0x8,(%ebx)
  8060ad:	0f 85 fb 00 00 00    	jne    8061ae <dhcp_arp_reply+0x13e>
  8060b3:	8b 45 0c             	mov    0xc(%ebp),%eax
  8060b6:	8b 00                	mov    (%eax),%eax
  8060b8:	3b 43 30             	cmp    0x30(%ebx),%eax
  8060bb:	0f 85 ed 00 00 00    	jne    8061ae <dhcp_arp_reply+0x13e>
  8060c1:	ba 0c 00 00 00       	mov    $0xc,%edx
  8060c6:	89 d8                	mov    %ebx,%eax
  8060c8:	e8 c3 f2 ff ff       	call   805390 <dhcp_set_state>
  8060cd:	89 f0                	mov    %esi,%eax
  8060cf:	e8 39 f8 ff ff       	call   80590d <dhcp_create_request>
  8060d4:	84 c0                	test   %al,%al
  8060d6:	0f 85 c8 00 00 00    	jne    8061a4 <dhcp_arp_reply+0x134>
  8060dc:	b9 01 00 00 00       	mov    $0x1,%ecx
  8060e1:	ba 35 00 00 00       	mov    $0x35,%edx
  8060e6:	89 d8                	mov    %ebx,%eax
  8060e8:	e8 2f f6 ff ff       	call   80571c <dhcp_option>
  8060ed:	ba 04 00 00 00       	mov    $0x4,%edx
  8060f2:	89 d8                	mov    %ebx,%eax
  8060f4:	e8 c7 f5 ff ff       	call   8056c0 <dhcp_option_byte>
  8060f9:	b9 02 00 00 00       	mov    $0x2,%ecx
  8060fe:	ba 39 00 00 00       	mov    $0x39,%edx
  806103:	89 d8                	mov    %ebx,%eax
  806105:	e8 12 f6 ff ff       	call   80571c <dhcp_option>
  80610a:	ba 40 02 00 00       	mov    $0x240,%edx
  80610f:	89 d8                	mov    %ebx,%eax
  806111:	e8 31 f5 ff ff       	call   805647 <dhcp_option_short>
  806116:	b9 04 00 00 00       	mov    $0x4,%ecx
  80611b:	ba 32 00 00 00       	mov    $0x32,%edx
  806120:	89 d8                	mov    %ebx,%eax
  806122:	e8 f5 f5 ff ff       	call   80571c <dhcp_option>
  806127:	8b 43 30             	mov    0x30(%ebx),%eax
  80612a:	89 04 24             	mov    %eax,(%esp)
  80612d:	e8 68 49 00 00       	call   80aa9a <ntohl>
  806132:	89 c2                	mov    %eax,%edx
  806134:	89 d8                	mov    %ebx,%eax
  806136:	e8 66 f4 ff ff       	call   8055a1 <dhcp_option_long>
  80613b:	89 d8                	mov    %ebx,%eax
  80613d:	e8 8d f3 ff ff       	call   8054cf <dhcp_option_trailer>
  806142:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  806146:	66 05 f0 00          	add    $0xf0,%ax
  80614a:	0f b7 c0             	movzwl %ax,%eax
  80614d:	89 44 24 04          	mov    %eax,0x4(%esp)
  806151:	8b 43 1c             	mov    0x1c(%ebx),%eax
  806154:	89 04 24             	mov    %eax,(%esp)
  806157:	e8 c8 1a 00 00       	call   807c24 <pbuf_realloc>
  80615c:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  806163:	00 
  806164:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  80616b:	00 
  80616c:	8b 43 08             	mov    0x8(%ebx),%eax
  80616f:	89 04 24             	mov    %eax,(%esp)
  806172:	e8 4d 5c 00 00       	call   80bdc4 <udp_connect>
  806177:	89 74 24 10          	mov    %esi,0x10(%esp)
  80617b:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  806182:	00 
  806183:	c7 44 24 08 d4 37 81 	movl   $0x8137d4,0x8(%esp)
  80618a:	00 
  80618b:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80618e:	89 44 24 04          	mov    %eax,0x4(%esp)
  806192:	8b 43 08             	mov    0x8(%ebx),%eax
  806195:	89 04 24             	mov    %eax,(%esp)
  806198:	e8 ae 5c 00 00       	call   80be4b <udp_sendto_if>
  80619d:	89 f0                	mov    %esi,%eax
  80619f:	e8 fe f5 ff ff       	call   8057a2 <dhcp_delete_request>
  8061a4:	80 43 01 01          	addb   $0x1,0x1(%ebx)
  8061a8:	66 c7 43 26 14 00    	movw   $0x14,0x26(%ebx)
  8061ae:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  8061b1:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  8061b4:	89 ec                	mov    %ebp,%esp
  8061b6:	5d                   	pop    %ebp
  8061b7:	c3                   	ret    

008061b8 <dhcp_select>:
  8061b8:	55                   	push   %ebp
  8061b9:	89 e5                	mov    %esp,%ebp
  8061bb:	57                   	push   %edi
  8061bc:	56                   	push   %esi
  8061bd:	53                   	push   %ebx
  8061be:	83 ec 1c             	sub    $0x1c,%esp
  8061c1:	89 c6                	mov    %eax,%esi
  8061c3:	8b 58 20             	mov    0x20(%eax),%ebx
  8061c6:	e8 42 f7 ff ff       	call   80590d <dhcp_create_request>
  8061cb:	89 c7                	mov    %eax,%edi
  8061cd:	84 c0                	test   %al,%al
  8061cf:	0f 85 3a 01 00 00    	jne    80630f <dhcp_select+0x157>
  8061d5:	b9 01 00 00 00       	mov    $0x1,%ecx
  8061da:	ba 35 00 00 00       	mov    $0x35,%edx
  8061df:	89 d8                	mov    %ebx,%eax
  8061e1:	e8 36 f5 ff ff       	call   80571c <dhcp_option>
  8061e6:	ba 03 00 00 00       	mov    $0x3,%edx
  8061eb:	89 d8                	mov    %ebx,%eax
  8061ed:	e8 ce f4 ff ff       	call   8056c0 <dhcp_option_byte>
  8061f2:	b9 02 00 00 00       	mov    $0x2,%ecx
  8061f7:	ba 39 00 00 00       	mov    $0x39,%edx
  8061fc:	89 d8                	mov    %ebx,%eax
  8061fe:	e8 19 f5 ff ff       	call   80571c <dhcp_option>
  806203:	ba 40 02 00 00       	mov    $0x240,%edx
  806208:	89 d8                	mov    %ebx,%eax
  80620a:	e8 38 f4 ff ff       	call   805647 <dhcp_option_short>
  80620f:	b9 04 00 00 00       	mov    $0x4,%ecx
  806214:	ba 32 00 00 00       	mov    $0x32,%edx
  806219:	89 d8                	mov    %ebx,%eax
  80621b:	e8 fc f4 ff ff       	call   80571c <dhcp_option>
  806220:	8b 43 30             	mov    0x30(%ebx),%eax
  806223:	89 04 24             	mov    %eax,(%esp)
  806226:	e8 6f 48 00 00       	call   80aa9a <ntohl>
  80622b:	89 c2                	mov    %eax,%edx
  80622d:	89 d8                	mov    %ebx,%eax
  80622f:	e8 6d f3 ff ff       	call   8055a1 <dhcp_option_long>
  806234:	b9 04 00 00 00       	mov    $0x4,%ecx
  806239:	ba 36 00 00 00       	mov    $0x36,%edx
  80623e:	89 d8                	mov    %ebx,%eax
  806240:	e8 d7 f4 ff ff       	call   80571c <dhcp_option>
  806245:	8b 43 2c             	mov    0x2c(%ebx),%eax
  806248:	89 04 24             	mov    %eax,(%esp)
  80624b:	e8 4a 48 00 00       	call   80aa9a <ntohl>
  806250:	89 c2                	mov    %eax,%edx
  806252:	89 d8                	mov    %ebx,%eax
  806254:	e8 48 f3 ff ff       	call   8055a1 <dhcp_option_long>
  806259:	b9 04 00 00 00       	mov    $0x4,%ecx
  80625e:	ba 37 00 00 00       	mov    $0x37,%edx
  806263:	89 d8                	mov    %ebx,%eax
  806265:	e8 b2 f4 ff ff       	call   80571c <dhcp_option>
  80626a:	ba 01 00 00 00       	mov    $0x1,%edx
  80626f:	89 d8                	mov    %ebx,%eax
  806271:	e8 4a f4 ff ff       	call   8056c0 <dhcp_option_byte>
  806276:	ba 03 00 00 00       	mov    $0x3,%edx
  80627b:	89 d8                	mov    %ebx,%eax
  80627d:	e8 3e f4 ff ff       	call   8056c0 <dhcp_option_byte>
  806282:	ba 1c 00 00 00       	mov    $0x1c,%edx
  806287:	89 d8                	mov    %ebx,%eax
  806289:	e8 32 f4 ff ff       	call   8056c0 <dhcp_option_byte>
  80628e:	ba 06 00 00 00       	mov    $0x6,%edx
  806293:	89 d8                	mov    %ebx,%eax
  806295:	e8 26 f4 ff ff       	call   8056c0 <dhcp_option_byte>
  80629a:	89 d8                	mov    %ebx,%eax
  80629c:	e8 2e f2 ff ff       	call   8054cf <dhcp_option_trailer>
  8062a1:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  8062a5:	66 05 f0 00          	add    $0xf0,%ax
  8062a9:	0f b7 c0             	movzwl %ax,%eax
  8062ac:	89 44 24 04          	mov    %eax,0x4(%esp)
  8062b0:	8b 43 1c             	mov    0x1c(%ebx),%eax
  8062b3:	89 04 24             	mov    %eax,(%esp)
  8062b6:	e8 69 19 00 00       	call   807c24 <pbuf_realloc>
  8062bb:	89 74 24 10          	mov    %esi,0x10(%esp)
  8062bf:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  8062c6:	00 
  8062c7:	c7 44 24 08 d4 37 81 	movl   $0x8137d4,0x8(%esp)
  8062ce:	00 
  8062cf:	8b 43 1c             	mov    0x1c(%ebx),%eax
  8062d2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8062d6:	8b 43 08             	mov    0x8(%ebx),%eax
  8062d9:	89 04 24             	mov    %eax,(%esp)
  8062dc:	e8 6a 5b 00 00       	call   80be4b <udp_sendto_if>
  8062e1:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  8062e8:	00 
  8062e9:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  8062f0:	00 
  8062f1:	8b 43 08             	mov    0x8(%ebx),%eax
  8062f4:	89 04 24             	mov    %eax,(%esp)
  8062f7:	e8 c8 5a 00 00       	call   80bdc4 <udp_connect>
  8062fc:	89 f0                	mov    %esi,%eax
  8062fe:	e8 9f f4 ff ff       	call   8057a2 <dhcp_delete_request>
  806303:	ba 01 00 00 00       	mov    $0x1,%edx
  806308:	89 d8                	mov    %ebx,%eax
  80630a:	e8 81 f0 ff ff       	call   805390 <dhcp_set_state>
  80630f:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  806313:	83 c0 01             	add    $0x1,%eax
  806316:	88 43 01             	mov    %al,0x1(%ebx)
  806319:	ba a0 0f 00 00       	mov    $0xfa0,%edx
  80631e:	3c 03                	cmp    $0x3,%al
  806320:	77 08                	ja     80632a <dhcp_select+0x172>
  806322:	0f b6 c0             	movzbl %al,%eax
  806325:	66 69 d0 e8 03       	imul   $0x3e8,%ax,%dx
  80632a:	0f b7 d2             	movzwl %dx,%edx
  80632d:	81 c2 f3 01 00 00    	add    $0x1f3,%edx
  806333:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  806338:	f7 ea                	imul   %edx
  80633a:	c1 fa 05             	sar    $0x5,%edx
  80633d:	66 89 53 26          	mov    %dx,0x26(%ebx)
  806341:	89 fa                	mov    %edi,%edx
  806343:	0f be c2             	movsbl %dl,%eax
  806346:	83 c4 1c             	add    $0x1c,%esp
  806349:	5b                   	pop    %ebx
  80634a:	5e                   	pop    %esi
  80634b:	5f                   	pop    %edi
  80634c:	5d                   	pop    %ebp
  80634d:	c3                   	ret    

0080634e <dhcp_inform>:
  80634e:	55                   	push   %ebp
  80634f:	89 e5                	mov    %esp,%ebp
  806351:	83 ec 28             	sub    $0x28,%esp
  806354:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  806357:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80635a:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80635d:	8b 75 08             	mov    0x8(%ebp),%esi
  806360:	8b 7e 20             	mov    0x20(%esi),%edi
  806363:	c7 04 24 58 00 00 00 	movl   $0x58,(%esp)
  80636a:	e8 81 09 00 00       	call   806cf0 <mem_malloc>
  80636f:	85 c0                	test   %eax,%eax
  806371:	0f 84 3f 01 00 00    	je     8064b6 <dhcp_inform+0x168>
  806377:	89 c3                	mov    %eax,%ebx
  806379:	89 46 20             	mov    %eax,0x20(%esi)
  80637c:	c7 44 24 08 58 00 00 	movl   $0x58,0x8(%esp)
  806383:	00 
  806384:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80638b:	00 
  80638c:	89 04 24             	mov    %eax,(%esp)
  80638f:	e8 fd ad ff ff       	call   801191 <memset>
  806394:	e8 c6 58 00 00       	call   80bc5f <udp_new>
  806399:	89 43 08             	mov    %eax,0x8(%ebx)
  80639c:	85 c0                	test   %eax,%eax
  80639e:	75 0d                	jne    8063ad <dhcp_inform+0x5f>
  8063a0:	89 1c 24             	mov    %ebx,(%esp)
  8063a3:	e8 ea 0c 00 00       	call   807092 <mem_free>
  8063a8:	e9 09 01 00 00       	jmp    8064b6 <dhcp_inform+0x168>
  8063ad:	89 f0                	mov    %esi,%eax
  8063af:	e8 59 f5 ff ff       	call   80590d <dhcp_create_request>
  8063b4:	84 c0                	test   %al,%al
  8063b6:	0f 85 d9 00 00 00    	jne    806495 <dhcp_inform+0x147>
  8063bc:	b9 01 00 00 00       	mov    $0x1,%ecx
  8063c1:	ba 35 00 00 00       	mov    $0x35,%edx
  8063c6:	89 d8                	mov    %ebx,%eax
  8063c8:	e8 4f f3 ff ff       	call   80571c <dhcp_option>
  8063cd:	ba 08 00 00 00       	mov    $0x8,%edx
  8063d2:	89 d8                	mov    %ebx,%eax
  8063d4:	e8 e7 f2 ff ff       	call   8056c0 <dhcp_option_byte>
  8063d9:	b9 02 00 00 00       	mov    $0x2,%ecx
  8063de:	ba 39 00 00 00       	mov    $0x39,%edx
  8063e3:	89 d8                	mov    %ebx,%eax
  8063e5:	e8 32 f3 ff ff       	call   80571c <dhcp_option>
  8063ea:	ba 40 02 00 00       	mov    $0x240,%edx
  8063ef:	89 d8                	mov    %ebx,%eax
  8063f1:	e8 51 f2 ff ff       	call   805647 <dhcp_option_short>
  8063f6:	89 d8                	mov    %ebx,%eax
  8063f8:	e8 d2 f0 ff ff       	call   8054cf <dhcp_option_trailer>
  8063fd:	0f b7 43 24          	movzwl 0x24(%ebx),%eax
  806401:	66 05 f0 00          	add    $0xf0,%ax
  806405:	0f b7 c0             	movzwl %ax,%eax
  806408:	89 44 24 04          	mov    %eax,0x4(%esp)
  80640c:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80640f:	89 04 24             	mov    %eax,(%esp)
  806412:	e8 0d 18 00 00       	call   807c24 <pbuf_realloc>
  806417:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
  80641e:	00 
  80641f:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806426:	00 
  806427:	8b 43 08             	mov    0x8(%ebx),%eax
  80642a:	89 04 24             	mov    %eax,(%esp)
  80642d:	e8 b6 58 00 00       	call   80bce8 <udp_bind>
  806432:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  806439:	00 
  80643a:	c7 44 24 04 d4 37 81 	movl   $0x8137d4,0x4(%esp)
  806441:	00 
  806442:	8b 43 08             	mov    0x8(%ebx),%eax
  806445:	89 04 24             	mov    %eax,(%esp)
  806448:	e8 77 59 00 00       	call   80bdc4 <udp_connect>
  80644d:	89 74 24 10          	mov    %esi,0x10(%esp)
  806451:	c7 44 24 0c 43 00 00 	movl   $0x43,0xc(%esp)
  806458:	00 
  806459:	c7 44 24 08 d4 37 81 	movl   $0x8137d4,0x8(%esp)
  806460:	00 
  806461:	8b 43 1c             	mov    0x1c(%ebx),%eax
  806464:	89 44 24 04          	mov    %eax,0x4(%esp)
  806468:	8b 43 08             	mov    0x8(%ebx),%eax
  80646b:	89 04 24             	mov    %eax,(%esp)
  80646e:	e8 d8 59 00 00       	call   80be4b <udp_sendto_if>
  806473:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  80647a:	00 
  80647b:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806482:	00 
  806483:	8b 43 08             	mov    0x8(%ebx),%eax
  806486:	89 04 24             	mov    %eax,(%esp)
  806489:	e8 36 59 00 00       	call   80bdc4 <udp_connect>
  80648e:	89 f0                	mov    %esi,%eax
  806490:	e8 0d f3 ff ff       	call   8057a2 <dhcp_delete_request>
  806495:	8b 43 08             	mov    0x8(%ebx),%eax
  806498:	85 c0                	test   %eax,%eax
  80649a:	74 08                	je     8064a4 <dhcp_inform+0x156>
  80649c:	89 04 24             	mov    %eax,(%esp)
  80649f:	e8 f8 57 00 00       	call   80bc9c <udp_remove>
  8064a4:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  8064ab:	89 1c 24             	mov    %ebx,(%esp)
  8064ae:	e8 df 0b 00 00       	call   807092 <mem_free>
  8064b3:	89 7e 20             	mov    %edi,0x20(%esi)
  8064b6:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  8064b9:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  8064bc:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  8064bf:	89 ec                	mov    %ebp,%esp
  8064c1:	5d                   	pop    %ebp
  8064c2:	c3                   	ret    

008064c3 <dhcp_start>:
  8064c3:	55                   	push   %ebp
  8064c4:	89 e5                	mov    %esp,%ebp
  8064c6:	56                   	push   %esi
  8064c7:	53                   	push   %ebx
  8064c8:	83 ec 10             	sub    $0x10,%esp
  8064cb:	8b 75 08             	mov    0x8(%ebp),%esi
  8064ce:	85 f6                	test   %esi,%esi
  8064d0:	75 1c                	jne    8064ee <dhcp_start+0x2b>
  8064d2:	c7 44 24 08 db 2e 81 	movl   $0x812edb,0x8(%esp)
  8064d9:	00 
  8064da:	c7 44 24 04 38 02 00 	movl   $0x238,0x4(%esp)
  8064e1:	00 
  8064e2:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8064e9:	e8 9e a3 ff ff       	call   80088c <_panic>
  8064ee:	8b 5e 20             	mov    0x20(%esi),%ebx
  8064f1:	80 66 2e f7          	andb   $0xf7,0x2e(%esi)
  8064f5:	85 db                	test   %ebx,%ebx
  8064f7:	75 20                	jne    806519 <dhcp_start+0x56>
  8064f9:	c7 04 24 58 00 00 00 	movl   $0x58,(%esp)
  806500:	e8 eb 07 00 00       	call   806cf0 <mem_malloc>
  806505:	89 c2                	mov    %eax,%edx
  806507:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80650c:	85 d2                	test   %edx,%edx
  80650e:	0f 84 ac 00 00 00    	je     8065c0 <dhcp_start+0xfd>
  806514:	89 d3                	mov    %edx,%ebx
  806516:	89 56 20             	mov    %edx,0x20(%esi)
  806519:	c7 44 24 08 58 00 00 	movl   $0x58,0x8(%esp)
  806520:	00 
  806521:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  806528:	00 
  806529:	89 1c 24             	mov    %ebx,(%esp)
  80652c:	e8 60 ac ff ff       	call   801191 <memset>
  806531:	e8 29 57 00 00       	call   80bc5f <udp_new>
  806536:	89 43 08             	mov    %eax,0x8(%ebx)
  806539:	85 c0                	test   %eax,%eax
  80653b:	75 16                	jne    806553 <dhcp_start+0x90>
  80653d:	89 1c 24             	mov    %ebx,(%esp)
  806540:	e8 4d 0b 00 00       	call   807092 <mem_free>
  806545:	c7 46 20 00 00 00 00 	movl   $0x0,0x20(%esi)
  80654c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  806551:	eb 6d                	jmp    8065c0 <dhcp_start+0xfd>
  806553:	c7 44 24 08 44 00 00 	movl   $0x44,0x8(%esp)
  80655a:	00 
  80655b:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806562:	00 
  806563:	89 04 24             	mov    %eax,(%esp)
  806566:	e8 7d 57 00 00       	call   80bce8 <udp_bind>
  80656b:	c7 44 24 08 43 00 00 	movl   $0x43,0x8(%esp)
  806572:	00 
  806573:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  80657a:	00 
  80657b:	8b 43 08             	mov    0x8(%ebx),%eax
  80657e:	89 04 24             	mov    %eax,(%esp)
  806581:	e8 3e 58 00 00       	call   80bdc4 <udp_connect>
  806586:	89 74 24 08          	mov    %esi,0x8(%esp)
  80658a:	c7 44 24 04 8c 67 80 	movl   $0x80678c,0x4(%esp)
  806591:	00 
  806592:	8b 43 08             	mov    0x8(%ebx),%eax
  806595:	89 04 24             	mov    %eax,(%esp)
  806598:	e8 ae 56 00 00       	call   80bc4b <udp_recv>
  80659d:	89 f0                	mov    %esi,%eax
  80659f:	e8 6f f9 ff ff       	call   805f13 <dhcp_discover>
  8065a4:	84 c0                	test   %al,%al
  8065a6:	74 0f                	je     8065b7 <dhcp_start+0xf4>
  8065a8:	89 34 24             	mov    %esi,(%esp)
  8065ab:	e8 de f2 ff ff       	call   80588e <dhcp_stop>
  8065b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8065b5:	eb 09                	jmp    8065c0 <dhcp_start+0xfd>
  8065b7:	80 4e 2e 08          	orb    $0x8,0x2e(%esi)
  8065bb:	b8 00 00 00 00       	mov    $0x0,%eax
  8065c0:	83 c4 10             	add    $0x10,%esp
  8065c3:	5b                   	pop    %ebx
  8065c4:	5e                   	pop    %esi
  8065c5:	5d                   	pop    %ebp
  8065c6:	c3                   	ret    

008065c7 <dhcp_check>:
  8065c7:	55                   	push   %ebp
  8065c8:	89 e5                	mov    %esp,%ebp
  8065ca:	53                   	push   %ebx
  8065cb:	83 ec 14             	sub    $0x14,%esp
  8065ce:	8b 58 20             	mov    0x20(%eax),%ebx
  8065d1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8065d8:	00 
  8065d9:	8d 53 30             	lea    0x30(%ebx),%edx
  8065dc:	89 54 24 04          	mov    %edx,0x4(%esp)
  8065e0:	89 04 24             	mov    %eax,(%esp)
  8065e3:	e8 79 62 00 00       	call   80c861 <etharp_query>
  8065e8:	80 43 01 01          	addb   $0x1,0x1(%ebx)
  8065ec:	66 c7 43 26 01 00    	movw   $0x1,0x26(%ebx)
  8065f2:	ba 08 00 00 00       	mov    $0x8,%edx
  8065f7:	89 d8                	mov    %ebx,%eax
  8065f9:	e8 92 ed ff ff       	call   805390 <dhcp_set_state>
  8065fe:	83 c4 14             	add    $0x14,%esp
  806601:	5b                   	pop    %ebx
  806602:	5d                   	pop    %ebp
  806603:	c3                   	ret    

00806604 <dhcp_bind>:
  806604:	55                   	push   %ebp
  806605:	89 e5                	mov    %esp,%ebp
  806607:	57                   	push   %edi
  806608:	56                   	push   %esi
  806609:	53                   	push   %ebx
  80660a:	83 ec 1c             	sub    $0x1c,%esp
  80660d:	89 c7                	mov    %eax,%edi
  80660f:	85 c0                	test   %eax,%eax
  806611:	75 1c                	jne    80662f <dhcp_bind+0x2b>
  806613:	c7 44 24 08 d0 2e 81 	movl   $0x812ed0,0x8(%esp)
  80661a:	00 
  80661b:	c7 44 24 04 3d 03 00 	movl   $0x33d,0x4(%esp)
  806622:	00 
  806623:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80662a:	e8 5d a2 ff ff       	call   80088c <_panic>
  80662f:	8b 70 20             	mov    0x20(%eax),%esi
  806632:	85 f6                	test   %esi,%esi
  806634:	75 1c                	jne    806652 <dhcp_bind+0x4e>
  806636:	c7 44 24 08 e9 2e 81 	movl   $0x812ee9,0x8(%esp)
  80663d:	00 
  80663e:	c7 44 24 04 3f 03 00 	movl   $0x33f,0x4(%esp)
  806645:	00 
  806646:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80664d:	e8 3a a2 ff ff       	call   80088c <_panic>
  806652:	8b 46 50             	mov    0x50(%esi),%eax
  806655:	83 f8 ff             	cmp    $0xffffffff,%eax
  806658:	74 29                	je     806683 <dhcp_bind+0x7f>
  80665a:	8d 50 1e             	lea    0x1e(%eax),%edx
  80665d:	b8 89 88 88 88       	mov    $0x88888889,%eax
  806662:	f7 e2                	mul    %edx
  806664:	89 d0                	mov    %edx,%eax
  806666:	c1 e8 05             	shr    $0x5,%eax
  806669:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80666e:	0f 87 02 01 00 00    	ja     806776 <dhcp_bind+0x172>
  806674:	66 89 46 28          	mov    %ax,0x28(%esi)
  806678:	66 85 c0             	test   %ax,%ax
  80667b:	75 06                	jne    806683 <dhcp_bind+0x7f>
  80667d:	66 c7 46 28 01 00    	movw   $0x1,0x28(%esi)
  806683:	8b 46 54             	mov    0x54(%esi),%eax
  806686:	83 f8 ff             	cmp    $0xffffffff,%eax
  806689:	74 29                	je     8066b4 <dhcp_bind+0xb0>
  80668b:	8d 50 1e             	lea    0x1e(%eax),%edx
  80668e:	b8 89 88 88 88       	mov    $0x88888889,%eax
  806693:	f7 e2                	mul    %edx
  806695:	89 d0                	mov    %edx,%eax
  806697:	c1 e8 05             	shr    $0x5,%eax
  80669a:	3d ff ff 00 00       	cmp    $0xffff,%eax
  80669f:	0f 87 dc 00 00 00    	ja     806781 <dhcp_bind+0x17d>
  8066a5:	66 89 46 2a          	mov    %ax,0x2a(%esi)
  8066a9:	66 85 c0             	test   %ax,%ax
  8066ac:	75 06                	jne    8066b4 <dhcp_bind+0xb0>
  8066ae:	66 c7 46 2a 01 00    	movw   $0x1,0x2a(%esi)
  8066b4:	8b 46 34             	mov    0x34(%esi),%eax
  8066b7:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  8066ba:	85 c0                	test   %eax,%eax
  8066bc:	75 4b                	jne    806709 <dhcp_bind+0x105>
  8066be:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8066c5:	e8 d0 43 00 00       	call   80aa9a <ntohl>
  8066ca:	c1 e8 18             	shr    $0x18,%eax
  8066cd:	84 c0                	test   %al,%al
  8066cf:	78 11                	js     8066e2 <dhcp_bind+0xde>
  8066d1:	c7 04 24 00 00 00 ff 	movl   $0xff000000,(%esp)
  8066d8:	e8 af 41 00 00       	call   80a88c <htonl>
  8066dd:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  8066e0:	eb 27                	jmp    806709 <dhcp_bind+0x105>
  8066e2:	3c bf                	cmp    $0xbf,%al
  8066e4:	76 14                	jbe    8066fa <dhcp_bind+0xf6>
  8066e6:	c7 04 24 00 ff ff ff 	movl   $0xffffff00,(%esp)
  8066ed:	8d 76 00             	lea    0x0(%esi),%esi
  8066f0:	e8 97 41 00 00       	call   80a88c <htonl>
  8066f5:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  8066f8:	eb 0f                	jmp    806709 <dhcp_bind+0x105>
  8066fa:	c7 04 24 00 00 ff ff 	movl   $0xffff0000,(%esp)
  806701:	e8 86 41 00 00       	call   80a88c <htonl>
  806706:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  806709:	8b 46 38             	mov    0x38(%esi),%eax
  80670c:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80670f:	85 c0                	test   %eax,%eax
  806711:	75 1a                	jne    80672d <dhcp_bind+0x129>
  806713:	8b 5e 30             	mov    0x30(%esi),%ebx
  806716:	23 5d f0             	and    0xfffffff0(%ebp),%ebx
  806719:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80671c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  806723:	e8 64 41 00 00       	call   80a88c <htonl>
  806728:	09 d8                	or     %ebx,%eax
  80672a:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80672d:	8d 46 30             	lea    0x30(%esi),%eax
  806730:	89 44 24 04          	mov    %eax,0x4(%esp)
  806734:	89 3c 24             	mov    %edi,(%esp)
  806737:	e8 c5 0d 00 00       	call   807501 <netif_set_ipaddr>
  80673c:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80673f:	89 44 24 04          	mov    %eax,0x4(%esp)
  806743:	89 3c 24             	mov    %edi,(%esp)
  806746:	e8 e0 0c 00 00       	call   80742b <netif_set_netmask>
  80674b:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  80674e:	89 44 24 04          	mov    %eax,0x4(%esp)
  806752:	89 3c 24             	mov    %edi,(%esp)
  806755:	e8 b8 0c 00 00       	call   807412 <netif_set_gw>
  80675a:	89 3c 24             	mov    %edi,(%esp)
  80675d:	e8 6b 0d 00 00       	call   8074cd <netif_set_up>
  806762:	ba 0a 00 00 00       	mov    $0xa,%edx
  806767:	89 f0                	mov    %esi,%eax
  806769:	e8 22 ec ff ff       	call   805390 <dhcp_set_state>
  80676e:	83 c4 1c             	add    $0x1c,%esp
  806771:	5b                   	pop    %ebx
  806772:	5e                   	pop    %esi
  806773:	5f                   	pop    %edi
  806774:	5d                   	pop    %ebp
  806775:	c3                   	ret    
  806776:	66 c7 46 28 ff ff    	movw   $0xffff,0x28(%esi)
  80677c:	e9 02 ff ff ff       	jmp    806683 <dhcp_bind+0x7f>
  806781:	66 c7 46 2a ff ff    	movw   $0xffff,0x2a(%esi)
  806787:	e9 28 ff ff ff       	jmp    8066b4 <dhcp_bind+0xb0>

0080678c <dhcp_recv>:
  80678c:	55                   	push   %ebp
  80678d:	89 e5                	mov    %esp,%ebp
  80678f:	57                   	push   %edi
  806790:	56                   	push   %esi
  806791:	53                   	push   %ebx
  806792:	83 ec 1c             	sub    $0x1c,%esp
  806795:	8b 7d 08             	mov    0x8(%ebp),%edi
  806798:	8b 47 20             	mov    0x20(%edi),%eax
  80679b:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80679e:	8b 55 10             	mov    0x10(%ebp),%edx
  8067a1:	8b 5a 04             	mov    0x4(%edx),%ebx
  8067a4:	89 50 0c             	mov    %edx,0xc(%eax)
  8067a7:	80 3b 02             	cmpb   $0x2,(%ebx)
  8067aa:	0f 85 11 04 00 00    	jne    806bc1 <dhcp_recv+0x435>
  8067b0:	0f b6 77 24          	movzbl 0x24(%edi),%esi
  8067b4:	89 f1                	mov    %esi,%ecx
  8067b6:	84 c9                	test   %cl,%cl
  8067b8:	74 2e                	je     8067e8 <dhcp_recv+0x5c>
  8067ba:	0f b6 47 25          	movzbl 0x25(%edi),%eax
  8067be:	b9 00 00 00 00       	mov    $0x0,%ecx
  8067c3:	3a 43 1c             	cmp    0x1c(%ebx),%al
  8067c6:	74 17                	je     8067df <dhcp_recv+0x53>
  8067c8:	e9 f4 03 00 00       	jmp    806bc1 <dhcp_recv+0x435>
  8067cd:	0f b6 d1             	movzbl %cl,%edx
  8067d0:	0f b6 44 3a 25       	movzbl 0x25(%edx,%edi,1),%eax
  8067d5:	3a 44 1a 1c          	cmp    0x1c(%edx,%ebx,1),%al
  8067d9:	0f 85 e2 03 00 00    	jne    806bc1 <dhcp_recv+0x435>
  8067df:	83 c1 01             	add    $0x1,%ecx
  8067e2:	89 f0                	mov    %esi,%eax
  8067e4:	38 c1                	cmp    %al,%cl
  8067e6:	75 e5                	jne    8067cd <dhcp_recv+0x41>
  8067e8:	8b 43 04             	mov    0x4(%ebx),%eax
  8067eb:	89 04 24             	mov    %eax,(%esp)
  8067ee:	e8 a7 42 00 00       	call   80aa9a <ntohl>
  8067f3:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  8067f6:	3b 42 04             	cmp    0x4(%edx),%eax
  8067f9:	0f 85 c2 03 00 00    	jne    806bc1 <dhcp_recv+0x435>
  8067ff:	85 d2                	test   %edx,%edx
  806801:	75 1c                	jne    80681f <dhcp_recv+0x93>
  806803:	c7 44 24 08 f4 2e 81 	movl   $0x812ef4,0x8(%esp)
  80680a:	00 
  80680b:	c7 44 24 04 89 04 00 	movl   $0x489,0x4(%esp)
  806812:	00 
  806813:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80681a:	e8 6d a0 ff ff       	call   80088c <_panic>
  80681f:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806822:	83 79 0c 00          	cmpl   $0x0,0xc(%ecx)
  806826:	75 1c                	jne    806844 <dhcp_recv+0xb8>
  806828:	c7 44 24 08 01 2f 81 	movl   $0x812f01,0x8(%esp)
  80682f:	00 
  806830:	c7 44 24 04 8a 04 00 	movl   $0x48a,0x4(%esp)
  806837:	00 
  806838:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  80683f:	e8 48 a0 ff ff       	call   80088c <_panic>
  806844:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806847:	e8 01 f0 ff ff       	call   80584d <dhcp_free_reply>
  80684c:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80684f:	8b 42 0c             	mov    0xc(%edx),%eax
  806852:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  806856:	66 3d f0 00          	cmp    $0xf0,%ax
  80685a:	76 21                	jbe    80687d <dhcp_recv+0xf1>
  80685c:	66 2d f0 00          	sub    $0xf0,%ax
  806860:	66 89 42 18          	mov    %ax,0x18(%edx)
  806864:	0f b7 c0             	movzwl %ax,%eax
  806867:	89 04 24             	mov    %eax,(%esp)
  80686a:	e8 81 04 00 00       	call   806cf0 <mem_malloc>
  80686f:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806872:	89 41 14             	mov    %eax,0x14(%ecx)
  806875:	85 c0                	test   %eax,%eax
  806877:	0f 84 44 03 00 00    	je     806bc1 <dhcp_recv+0x435>
  80687d:	c7 04 24 f0 00 00 00 	movl   $0xf0,(%esp)
  806884:	e8 67 04 00 00       	call   806cf0 <mem_malloc>
  806889:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80688c:	89 42 10             	mov    %eax,0x10(%edx)
  80688f:	85 c0                	test   %eax,%eax
  806891:	75 1a                	jne    8068ad <dhcp_recv+0x121>
  806893:	8b 42 14             	mov    0x14(%edx),%eax
  806896:	89 04 24             	mov    %eax,(%esp)
  806899:	e8 f4 07 00 00       	call   807092 <mem_free>
  80689e:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  8068a1:	c7 41 14 00 00 00 00 	movl   $0x0,0x14(%ecx)
  8068a8:	e9 14 03 00 00       	jmp    806bc1 <dhcp_recv+0x435>
  8068ad:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  8068b4:	00 
  8068b5:	c7 44 24 08 f0 00 00 	movl   $0xf0,0x8(%esp)
  8068bc:	00 
  8068bd:	89 44 24 04          	mov    %eax,0x4(%esp)
  8068c1:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  8068c4:	8b 42 0c             	mov    0xc(%edx),%eax
  8068c7:	89 04 24             	mov    %eax,(%esp)
  8068ca:	e8 44 0f 00 00       	call   807813 <pbuf_copy_partial>
  8068cf:	66 3d f0 00          	cmp    $0xf0,%ax
  8068d3:	74 1c                	je     8068f1 <dhcp_recv+0x165>
  8068d5:	c7 44 24 08 70 2e 81 	movl   $0x812e70,0x8(%esp)
  8068dc:	00 
  8068dd:	c7 44 24 04 a0 04 00 	movl   $0x4a0,0x4(%esp)
  8068e4:	00 
  8068e5:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  8068ec:	e8 9b 9f ff ff       	call   80088c <_panic>
  8068f1:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  8068f4:	8b 51 14             	mov    0x14(%ecx),%edx
  8068f7:	85 d2                	test   %edx,%edx
  8068f9:	0f 84 df 02 00 00    	je     806bde <dhcp_recv+0x452>
  8068ff:	c7 44 24 0c f0 00 00 	movl   $0xf0,0xc(%esp)
  806906:	00 
  806907:	0f b7 41 18          	movzwl 0x18(%ecx),%eax
  80690b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80690f:	89 54 24 04          	mov    %edx,0x4(%esp)
  806913:	8b 41 0c             	mov    0xc(%ecx),%eax
  806916:	89 04 24             	mov    %eax,(%esp)
  806919:	e8 f5 0e 00 00       	call   807813 <pbuf_copy_partial>
  80691e:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  806921:	66 3b 42 18          	cmp    0x18(%edx),%ax
  806925:	0f 84 b3 02 00 00    	je     806bde <dhcp_recv+0x452>
  80692b:	c7 44 24 08 11 2f 81 	movl   $0x812f11,0x8(%esp)
  806932:	00 
  806933:	c7 44 24 04 a7 04 00 	movl   $0x4a7,0x4(%esp)
  80693a:	00 
  80693b:	c7 04 24 a2 2e 81 00 	movl   $0x812ea2,(%esp)
  806942:	e8 45 9f ff ff       	call   80088c <_panic>
  806947:	83 c0 02             	add    $0x2,%eax
  80694a:	e8 53 eb ff ff       	call   8054a2 <dhcp_get_option_byte>
  80694f:	3c 05                	cmp    $0x5,%al
  806951:	0f 85 a1 01 00 00    	jne    806af8 <dhcp_recv+0x36c>
  806957:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  80695a:	0f b6 01             	movzbl (%ecx),%eax
  80695d:	3c 01                	cmp    $0x1,%al
  80695f:	0f 85 73 01 00 00    	jne    806ad8 <dhcp_recv+0x34c>
  806965:	8b 77 20             	mov    0x20(%edi),%esi
  806968:	c7 46 34 00 00 00 00 	movl   $0x0,0x34(%esi)
  80696f:	c7 46 38 00 00 00 00 	movl   $0x0,0x38(%esi)
  806976:	c7 46 3c 00 00 00 00 	movl   $0x0,0x3c(%esi)
  80697d:	ba 33 00 00 00       	mov    $0x33,%edx
  806982:	89 f0                	mov    %esi,%eax
  806984:	e8 16 ea ff ff       	call   80539f <dhcp_get_option_ptr>
  806989:	85 c0                	test   %eax,%eax
  80698b:	74 0b                	je     806998 <dhcp_recv+0x20c>
  80698d:	83 c0 02             	add    $0x2,%eax
  806990:	e8 15 eb ff ff       	call   8054aa <dhcp_get_option_long>
  806995:	89 46 4c             	mov    %eax,0x4c(%esi)
  806998:	ba 3a 00 00 00       	mov    $0x3a,%edx
  80699d:	89 f0                	mov    %esi,%eax
  80699f:	e8 fb e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  8069a4:	85 c0                	test   %eax,%eax
  8069a6:	74 0d                	je     8069b5 <dhcp_recv+0x229>
  8069a8:	83 c0 02             	add    $0x2,%eax
  8069ab:	e8 fa ea ff ff       	call   8054aa <dhcp_get_option_long>
  8069b0:	89 46 50             	mov    %eax,0x50(%esi)
  8069b3:	eb 08                	jmp    8069bd <dhcp_recv+0x231>
  8069b5:	8b 46 4c             	mov    0x4c(%esi),%eax
  8069b8:	d1 e8                	shr    %eax
  8069ba:	89 46 50             	mov    %eax,0x50(%esi)
  8069bd:	ba 3b 00 00 00       	mov    $0x3b,%edx
  8069c2:	89 f0                	mov    %esi,%eax
  8069c4:	e8 d6 e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  8069c9:	85 c0                	test   %eax,%eax
  8069cb:	74 0d                	je     8069da <dhcp_recv+0x24e>
  8069cd:	83 c0 02             	add    $0x2,%eax
  8069d0:	e8 d5 ea ff ff       	call   8054aa <dhcp_get_option_long>
  8069d5:	89 46 54             	mov    %eax,0x54(%esi)
  8069d8:	eb 06                	jmp    8069e0 <dhcp_recv+0x254>
  8069da:	8b 46 4c             	mov    0x4c(%esi),%eax
  8069dd:	89 46 54             	mov    %eax,0x54(%esi)
  8069e0:	8b 46 10             	mov    0x10(%esi),%eax
  8069e3:	ba 00 00 00 00       	mov    $0x0,%edx
  8069e8:	83 f8 f0             	cmp    $0xfffffff0,%eax
  8069eb:	74 03                	je     8069f0 <dhcp_recv+0x264>
  8069ed:	8b 50 10             	mov    0x10(%eax),%edx
  8069f0:	89 56 30             	mov    %edx,0x30(%esi)
  8069f3:	ba 01 00 00 00       	mov    $0x1,%edx
  8069f8:	89 f0                	mov    %esi,%eax
  8069fa:	e8 a0 e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  8069ff:	85 c0                	test   %eax,%eax
  806a01:	74 13                	je     806a16 <dhcp_recv+0x28a>
  806a03:	83 c0 02             	add    $0x2,%eax
  806a06:	e8 9f ea ff ff       	call   8054aa <dhcp_get_option_long>
  806a0b:	89 04 24             	mov    %eax,(%esp)
  806a0e:	e8 79 3e 00 00       	call   80a88c <htonl>
  806a13:	89 46 34             	mov    %eax,0x34(%esi)
  806a16:	ba 03 00 00 00       	mov    $0x3,%edx
  806a1b:	89 f0                	mov    %esi,%eax
  806a1d:	e8 7d e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  806a22:	85 c0                	test   %eax,%eax
  806a24:	74 13                	je     806a39 <dhcp_recv+0x2ad>
  806a26:	83 c0 02             	add    $0x2,%eax
  806a29:	e8 7c ea ff ff       	call   8054aa <dhcp_get_option_long>
  806a2e:	89 04 24             	mov    %eax,(%esp)
  806a31:	e8 56 3e 00 00       	call   80a88c <htonl>
  806a36:	89 46 38             	mov    %eax,0x38(%esi)
  806a39:	ba 1c 00 00 00       	mov    $0x1c,%edx
  806a3e:	89 f0                	mov    %esi,%eax
  806a40:	e8 5a e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  806a45:	85 c0                	test   %eax,%eax
  806a47:	74 13                	je     806a5c <dhcp_recv+0x2d0>
  806a49:	83 c0 02             	add    $0x2,%eax
  806a4c:	e8 59 ea ff ff       	call   8054aa <dhcp_get_option_long>
  806a51:	89 04 24             	mov    %eax,(%esp)
  806a54:	e8 33 3e 00 00       	call   80a88c <htonl>
  806a59:	89 46 3c             	mov    %eax,0x3c(%esi)
  806a5c:	ba 06 00 00 00       	mov    $0x6,%edx
  806a61:	89 f0                	mov    %esi,%eax
  806a63:	e8 37 e9 ff ff       	call   80539f <dhcp_get_option_ptr>
  806a68:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  806a6b:	85 c0                	test   %eax,%eax
  806a6d:	74 54                	je     806ac3 <dhcp_recv+0x337>
  806a6f:	83 c0 01             	add    $0x1,%eax
  806a72:	e8 2b ea ff ff       	call   8054a2 <dhcp_get_option_byte>
  806a77:	89 c2                	mov    %eax,%edx
  806a79:	c0 ea 02             	shr    $0x2,%dl
  806a7c:	0f b6 c2             	movzbl %dl,%eax
  806a7f:	89 46 40             	mov    %eax,0x40(%esi)
  806a82:	83 f8 02             	cmp    $0x2,%eax
  806a85:	76 0d                	jbe    806a94 <dhcp_recv+0x308>
  806a87:	c7 46 40 02 00 00 00 	movl   $0x2,0x40(%esi)
  806a8e:	c6 45 ef 00          	movb   $0x0,0xffffffef(%ebp)
  806a92:	eb 06                	jmp    806a9a <dhcp_recv+0x30e>
  806a94:	84 d2                	test   %dl,%dl
  806a96:	75 f6                	jne    806a8e <dhcp_recv+0x302>
  806a98:	eb 29                	jmp    806ac3 <dhcp_recv+0x337>
  806a9a:	0f b6 5d ef          	movzbl 0xffffffef(%ebp),%ebx
  806a9e:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  806aa1:	8d 44 9a 02          	lea    0x2(%edx,%ebx,4),%eax
  806aa5:	e8 00 ea ff ff       	call   8054aa <dhcp_get_option_long>
  806aaa:	89 04 24             	mov    %eax,(%esp)
  806aad:	e8 da 3d 00 00       	call   80a88c <htonl>
  806ab2:	89 44 9e 44          	mov    %eax,0x44(%esi,%ebx,4)
  806ab6:	80 45 ef 01          	addb   $0x1,0xffffffef(%ebp)
  806aba:	0f b6 45 ef          	movzbl 0xffffffef(%ebp),%eax
  806abe:	3b 46 40             	cmp    0x40(%esi),%eax
  806ac1:	72 d7                	jb     806a9a <dhcp_recv+0x30e>
  806ac3:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806ac6:	66 c7 41 26 00 00    	movw   $0x0,0x26(%ecx)
  806acc:	89 f8                	mov    %edi,%eax
  806ace:	e8 f4 fa ff ff       	call   8065c7 <dhcp_check>
  806ad3:	e9 e9 00 00 00       	jmp    806bc1 <dhcp_recv+0x435>
  806ad8:	83 e8 03             	sub    $0x3,%eax
  806adb:	3c 02                	cmp    $0x2,%al
  806add:	0f 87 de 00 00 00    	ja     806bc1 <dhcp_recv+0x435>
  806ae3:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806ae6:	66 c7 40 26 00 00    	movw   $0x0,0x26(%eax)
  806aec:	89 f8                	mov    %edi,%eax
  806aee:	e8 11 fb ff ff       	call   806604 <dhcp_bind>
  806af3:	e9 c9 00 00 00       	jmp    806bc1 <dhcp_recv+0x435>
  806af8:	3c 06                	cmp    $0x6,%al
  806afa:	75 73                	jne    806b6f <dhcp_recv+0x3e3>
  806afc:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  806aff:	0f b6 02             	movzbl (%edx),%eax
  806b02:	3c 03                	cmp    $0x3,%al
  806b04:	74 10                	je     806b16 <dhcp_recv+0x38a>
  806b06:	3c 01                	cmp    $0x1,%al
  806b08:	74 0c                	je     806b16 <dhcp_recv+0x38a>
  806b0a:	3c 04                	cmp    $0x4,%al
  806b0c:	74 08                	je     806b16 <dhcp_recv+0x38a>
  806b0e:	3c 05                	cmp    $0x5,%al
  806b10:	0f 85 ab 00 00 00    	jne    806bc1 <dhcp_recv+0x435>
  806b16:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806b19:	66 c7 41 26 00 00    	movw   $0x0,0x26(%ecx)
  806b1f:	8b 5f 20             	mov    0x20(%edi),%ebx
  806b22:	89 3c 24             	mov    %edi,(%esp)
  806b25:	e8 7e 09 00 00       	call   8074a8 <netif_set_down>
  806b2a:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806b31:	00 
  806b32:	89 3c 24             	mov    %edi,(%esp)
  806b35:	e8 c7 09 00 00       	call   807501 <netif_set_ipaddr>
  806b3a:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806b41:	00 
  806b42:	89 3c 24             	mov    %edi,(%esp)
  806b45:	e8 c8 08 00 00       	call   807412 <netif_set_gw>
  806b4a:	c7 44 24 04 d0 37 81 	movl   $0x8137d0,0x4(%esp)
  806b51:	00 
  806b52:	89 3c 24             	mov    %edi,(%esp)
  806b55:	e8 d1 08 00 00       	call   80742b <netif_set_netmask>
  806b5a:	ba 0c 00 00 00       	mov    $0xc,%edx
  806b5f:	89 d8                	mov    %ebx,%eax
  806b61:	e8 2a e8 ff ff       	call   805390 <dhcp_set_state>
  806b66:	89 f8                	mov    %edi,%eax
  806b68:	e8 a6 f3 ff ff       	call   805f13 <dhcp_discover>
  806b6d:	eb 52                	jmp    806bc1 <dhcp_recv+0x435>
  806b6f:	3c 02                	cmp    $0x2,%al
  806b71:	75 4e                	jne    806bc1 <dhcp_recv+0x435>
  806b73:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806b76:	80 38 06             	cmpb   $0x6,(%eax)
  806b79:	75 46                	jne    806bc1 <dhcp_recv+0x435>
  806b7b:	66 c7 40 26 00 00    	movw   $0x0,0x26(%eax)
  806b81:	8b 5f 20             	mov    0x20(%edi),%ebx
  806b84:	ba 36 00 00 00       	mov    $0x36,%edx
  806b89:	89 d8                	mov    %ebx,%eax
  806b8b:	e8 0f e8 ff ff       	call   80539f <dhcp_get_option_ptr>
  806b90:	85 c0                	test   %eax,%eax
  806b92:	74 2d                	je     806bc1 <dhcp_recv+0x435>
  806b94:	83 c0 02             	add    $0x2,%eax
  806b97:	e8 0e e9 ff ff       	call   8054aa <dhcp_get_option_long>
  806b9c:	89 04 24             	mov    %eax,(%esp)
  806b9f:	e8 e8 3c 00 00       	call   80a88c <htonl>
  806ba4:	89 43 2c             	mov    %eax,0x2c(%ebx)
  806ba7:	8b 43 10             	mov    0x10(%ebx),%eax
  806baa:	ba 00 00 00 00       	mov    $0x0,%edx
  806baf:	83 f8 f0             	cmp    $0xfffffff0,%eax
  806bb2:	74 03                	je     806bb7 <dhcp_recv+0x42b>
  806bb4:	8b 50 10             	mov    0x10(%eax),%edx
  806bb7:	89 53 30             	mov    %edx,0x30(%ebx)
  806bba:	89 f8                	mov    %edi,%eax
  806bbc:	e8 f7 f5 ff ff       	call   8061b8 <dhcp_select>
  806bc1:	8b 55 10             	mov    0x10(%ebp),%edx
  806bc4:	89 14 24             	mov    %edx,(%esp)
  806bc7:	e8 c8 0e 00 00       	call   807a94 <pbuf_free>
  806bcc:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806bcf:	c7 41 0c 00 00 00 00 	movl   $0x0,0xc(%ecx)
  806bd6:	83 c4 1c             	add    $0x1c,%esp
  806bd9:	5b                   	pop    %ebx
  806bda:	5e                   	pop    %esi
  806bdb:	5f                   	pop    %edi
  806bdc:	5d                   	pop    %ebp
  806bdd:	c3                   	ret    
  806bde:	ba 35 00 00 00       	mov    $0x35,%edx
  806be3:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806be6:	e8 b4 e7 ff ff       	call   80539f <dhcp_get_option_ptr>
  806beb:	85 c0                	test   %eax,%eax
  806bed:	0f 85 54 fd ff ff    	jne    806947 <dhcp_recv+0x1bb>
  806bf3:	eb cc                	jmp    806bc1 <dhcp_recv+0x435>

00806bf5 <dhcp_fine_tmr>:
  806bf5:	55                   	push   %ebp
  806bf6:	89 e5                	mov    %esp,%ebp
  806bf8:	53                   	push   %ebx
  806bf9:	83 ec 04             	sub    $0x4,%esp
  806bfc:	8b 1d c0 e5 b3 00    	mov    0xb3e5c0,%ebx
  806c02:	85 db                	test   %ebx,%ebx
  806c04:	0f 84 d1 00 00 00    	je     806cdb <dhcp_fine_tmr+0xe6>
  806c0a:	8b 53 20             	mov    0x20(%ebx),%edx
  806c0d:	85 d2                	test   %edx,%edx
  806c0f:	0f 84 bc 00 00 00    	je     806cd1 <dhcp_fine_tmr+0xdc>
  806c15:	0f b7 42 26          	movzwl 0x26(%edx),%eax
  806c19:	66 83 f8 01          	cmp    $0x1,%ax
  806c1d:	76 0c                	jbe    806c2b <dhcp_fine_tmr+0x36>
  806c1f:	83 e8 01             	sub    $0x1,%eax
  806c22:	66 89 42 26          	mov    %ax,0x26(%edx)
  806c26:	e9 a6 00 00 00       	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c2b:	66 83 f8 01          	cmp    $0x1,%ax
  806c2f:	0f 85 9c 00 00 00    	jne    806cd1 <dhcp_fine_tmr+0xdc>
  806c35:	66 c7 42 26 00 00    	movw   $0x0,0x26(%edx)
  806c3b:	8b 53 20             	mov    0x20(%ebx),%edx
  806c3e:	0f b6 02             	movzbl (%edx),%eax
  806c41:	3c 0c                	cmp    $0xc,%al
  806c43:	74 04                	je     806c49 <dhcp_fine_tmr+0x54>
  806c45:	3c 06                	cmp    $0x6,%al
  806c47:	75 09                	jne    806c52 <dhcp_fine_tmr+0x5d>
  806c49:	89 d8                	mov    %ebx,%eax
  806c4b:	e8 c3 f2 ff ff       	call   805f13 <dhcp_discover>
  806c50:	eb 7f                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c52:	3c 01                	cmp    $0x1,%al
  806c54:	75 26                	jne    806c7c <dhcp_fine_tmr+0x87>
  806c56:	80 7a 01 05          	cmpb   $0x5,0x1(%edx)
  806c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  806c60:	77 09                	ja     806c6b <dhcp_fine_tmr+0x76>
  806c62:	89 d8                	mov    %ebx,%eax
  806c64:	e8 4f f5 ff ff       	call   8061b8 <dhcp_select>
  806c69:	eb 66                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c6b:	89 1c 24             	mov    %ebx,(%esp)
  806c6e:	e8 95 ee ff ff       	call   805b08 <dhcp_release>
  806c73:	89 d8                	mov    %ebx,%eax
  806c75:	e8 99 f2 ff ff       	call   805f13 <dhcp_discover>
  806c7a:	eb 55                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c7c:	3c 08                	cmp    $0x8,%al
  806c7e:	66 90                	xchg   %ax,%ax
  806c80:	75 19                	jne    806c9b <dhcp_fine_tmr+0xa6>
  806c82:	80 7a 01 01          	cmpb   $0x1,0x1(%edx)
  806c86:	77 0a                	ja     806c92 <dhcp_fine_tmr+0x9d>
  806c88:	89 d8                	mov    %ebx,%eax
  806c8a:	e8 38 f9 ff ff       	call   8065c7 <dhcp_check>
  806c8f:	90                   	nop    
  806c90:	eb 3f                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c92:	89 d8                	mov    %ebx,%eax
  806c94:	e8 6b f9 ff ff       	call   806604 <dhcp_bind>
  806c99:	eb 36                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806c9b:	3c 05                	cmp    $0x5,%al
  806c9d:	8d 76 00             	lea    0x0(%esi),%esi
  806ca0:	75 0a                	jne    806cac <dhcp_fine_tmr+0xb7>
  806ca2:	89 1c 24             	mov    %ebx,(%esp)
  806ca5:	e8 d9 f0 ff ff       	call   805d83 <dhcp_renew>
  806caa:	eb 25                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806cac:	3c 04                	cmp    $0x4,%al
  806cae:	66 90                	xchg   %ax,%ax
  806cb0:	75 1f                	jne    806cd1 <dhcp_fine_tmr+0xdc>
  806cb2:	80 7a 01 08          	cmpb   $0x8,0x1(%edx)
  806cb6:	77 0a                	ja     806cc2 <dhcp_fine_tmr+0xcd>
  806cb8:	89 d8                	mov    %ebx,%eax
  806cba:	e8 ac ef ff ff       	call   805c6b <dhcp_rebind>
  806cbf:	90                   	nop    
  806cc0:	eb 0f                	jmp    806cd1 <dhcp_fine_tmr+0xdc>
  806cc2:	89 1c 24             	mov    %ebx,(%esp)
  806cc5:	e8 3e ee ff ff       	call   805b08 <dhcp_release>
  806cca:	89 d8                	mov    %ebx,%eax
  806ccc:	e8 42 f2 ff ff       	call   805f13 <dhcp_discover>
  806cd1:	8b 1b                	mov    (%ebx),%ebx
  806cd3:	85 db                	test   %ebx,%ebx
  806cd5:	0f 85 2f ff ff ff    	jne    806c0a <dhcp_fine_tmr+0x15>
  806cdb:	83 c4 04             	add    $0x4,%esp
  806cde:	5b                   	pop    %ebx
  806cdf:	5d                   	pop    %ebp
  806ce0:	c3                   	ret    
	...

00806cf0 <mem_malloc>:
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  806cf0:	55                   	push   %ebp
  806cf1:	89 e5                	mov    %esp,%ebp
  806cf3:	57                   	push   %edi
  806cf4:	56                   	push   %esi
  806cf5:	53                   	push   %ebx
  806cf6:	83 ec 1c             	sub    $0x1c,%esp
  806cf9:	8b 45 08             	mov    0x8(%ebp),%eax
  mem_size_t ptr, ptr2;
  struct mem *mem, *mem2;
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  806cfc:	85 c0                	test   %eax,%eax
  806cfe:	0f 84 c2 01 00 00    	je     806ec6 <mem_malloc+0x1d6>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  806d04:	83 c0 03             	add    $0x3,%eax
  806d07:	83 e0 fc             	and    $0xfffffffc,%eax
  806d0a:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)

  if(size < MIN_SIZE_ALIGNED) {
  806d0d:	83 f8 0b             	cmp    $0xb,%eax
  806d10:	77 09                	ja     806d1b <mem_malloc+0x2b>
  806d12:	c7 45 f0 0c 00 00 00 	movl   $0xc,0xfffffff0(%ebp)
  806d19:	eb 0d                	jmp    806d28 <mem_malloc+0x38>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
  806d1b:	81 7d f0 00 00 22 00 	cmpl   $0x220000,0xfffffff0(%ebp)
  806d22:	0f 87 9e 01 00 00    	ja     806ec6 <mem_malloc+0x1d6>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_arch_sem_wait(mem_sem, 0);
  806d28:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  806d2f:	00 
  806d30:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  806d35:	89 04 24             	mov    %eax,(%esp)
  806d38:	e8 92 67 00 00       	call   80d4cf <sys_arch_sem_wait>
  LWIP_MEM_ALLOC_PROTECT();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  /* run as long as a mem_free disturbed mem_malloc */
  do {
    local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (u8_t *)lfree - ram; ptr < MEM_SIZE_ALIGNED - size;
  806d3d:	a1 a4 86 a3 00       	mov    0xa386a4,%eax
  806d42:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  806d45:	8b 15 9c 86 a3 00    	mov    0xa3869c,%edx
  806d4b:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  806d4e:	89 c2                	mov    %eax,%edx
  806d50:	2b 55 ec             	sub    0xffffffec(%ebp),%edx
  806d53:	b8 00 00 22 00       	mov    $0x220000,%eax
  806d58:	89 c7                	mov    %eax,%edi
  806d5a:	2b 7d f0             	sub    0xfffffff0(%ebp),%edi
  806d5d:	39 fa                	cmp    %edi,%edx
  806d5f:	0f 83 4d 01 00 00    	jae    806eb2 <mem_malloc+0x1c2>
         ptr = ((struct mem *)&ram[ptr])->next) {
      mem = (struct mem *)&ram[ptr];
  806d65:	8b 5d ec             	mov    0xffffffec(%ebp),%ebx
  806d68:	01 d3                	add    %edx,%ebx
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
      mem_free_count = 0;
      LWIP_MEM_ALLOC_UNPROTECT();
      /* allow mem_free to run */
      LWIP_MEM_ALLOC_PROTECT();
      if (mem_free_count != 0) {
        local_mem_free_count = mem_free_count;
      }
      mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  806d6a:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  806d6e:	0f 85 34 01 00 00    	jne    806ea8 <mem_malloc+0x1b8>
  806d74:	8b 33                	mov    (%ebx),%esi
  806d76:	89 f0                	mov    %esi,%eax
  806d78:	29 d0                	sub    %edx,%eax
  806d7a:	8d 48 f4             	lea    0xfffffff4(%eax),%ecx
  806d7d:	3b 4d f0             	cmp    0xfffffff0(%ebp),%ecx
  806d80:	0f 82 22 01 00 00    	jb     806ea8 <mem_malloc+0x1b8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  806d86:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  806d89:	83 c0 18             	add    $0x18,%eax
  806d8c:	39 c1                	cmp    %eax,%ecx
  806d8e:	72 2d                	jb     806dbd <mem_malloc+0xcd>
          /* (in addition to the above, we test if another struct mem (SIZEOF_STRUCT_MEM) containing
           * at least MIN_SIZE_ALIGNED of data also fits in the 'user data space' of 'mem')
           * -> split large block, create empty remainder,
           * remainder must be large enough to contain MIN_SIZE_ALIGNED data: if
           * mem->next - (ptr + (2*SIZEOF_STRUCT_MEM)) == size,
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  806d90:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  806d93:	8d 4c 10 0c          	lea    0xc(%eax,%edx,1),%ecx
          /* create mem2 struct */
          mem2 = (struct mem *)&ram[ptr2];
  806d97:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  806d9a:	01 c8                	add    %ecx,%eax
          mem2->used = 0;
  806d9c:	c6 40 08 00          	movb   $0x0,0x8(%eax)
          mem2->next = mem->next;
  806da0:	89 30                	mov    %esi,(%eax)
          mem2->prev = ptr;
  806da2:	89 50 04             	mov    %edx,0x4(%eax)
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  806da5:	89 0b                	mov    %ecx,(%ebx)
          mem->used = 1;
  806da7:	c6 43 08 01          	movb   $0x1,0x8(%ebx)

          if (mem2->next != MEM_SIZE_ALIGNED) {
  806dab:	8b 00                	mov    (%eax),%eax
  806dad:	3d 00 00 22 00       	cmp    $0x220000,%eax
  806db2:	74 0d                	je     806dc1 <mem_malloc+0xd1>
            ((struct mem *)&ram[mem2->next])->prev = ptr2;
  806db4:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  806db7:	89 4c 02 04          	mov    %ecx,0x4(%edx,%eax,1)
  806dbb:	eb 04                	jmp    806dc1 <mem_malloc+0xd1>
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
        } else {
          /* (a mem2 struct does no fit into the user data space of mem and mem->next will always
           * be used at this point: if not we have 2 unused structs in a row, plug_holes should have
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  806dbd:	c6 43 08 01          	movb   $0x1,0x8(%ebx)
          MEM_STATS_INC_USED(used, mem->next - ((u8_t *)mem - ram));
        }

        if (mem == lfree) {
  806dc1:	39 5d e8             	cmp    %ebx,0xffffffe8(%ebp)
  806dc4:	75 66                	jne    806e2c <mem_malloc+0x13c>
          /* Find next free block after mem and update lowest free pointer */
          while (lfree->used && lfree != ram_end) {
  806dc6:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806dc9:	0f b6 41 08          	movzbl 0x8(%ecx),%eax
  806dcd:	84 c0                	test   %al,%al
  806dcf:	74 30                	je     806e01 <mem_malloc+0x111>
  806dd1:	8b 15 a0 86 a3 00    	mov    0xa386a0,%edx
  806dd7:	39 d1                	cmp    %edx,%ecx
  806dd9:	74 51                	je     806e2c <mem_malloc+0x13c>
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            lfree = (struct mem *)&ram[lfree->next];
  806ddb:	8b 4d ec             	mov    0xffffffec(%ebp),%ecx
  806dde:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806de1:	03 08                	add    (%eax),%ecx
  806de3:	89 4d e8             	mov    %ecx,0xffffffe8(%ebp)
  806de6:	0f b6 41 08          	movzbl 0x8(%ecx),%eax
  806dea:	84 c0                	test   %al,%al
  806dec:	74 0a                	je     806df8 <mem_malloc+0x108>
  806dee:	39 d1                	cmp    %edx,%ecx
  806df0:	0f 84 d7 00 00 00    	je     806ecd <mem_malloc+0x1dd>
  806df6:	eb e3                	jmp    806ddb <mem_malloc+0xeb>
  806df8:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  806dfb:	89 15 a4 86 a3 00    	mov    %edx,0xa386a4
          }
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
  806e01:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  806e04:	3b 0d a0 86 a3 00    	cmp    0xa386a0,%ecx
  806e0a:	74 20                	je     806e2c <mem_malloc+0x13c>
  806e0c:	84 c0                	test   %al,%al
  806e0e:	74 1c                	je     806e2c <mem_malloc+0x13c>
  806e10:	c7 44 24 08 2d 2f 81 	movl   $0x812f2d,0x8(%esp)
  806e17:	00 
  806e18:	c7 44 24 04 46 02 00 	movl   $0x246,0x4(%esp)
  806e1f:	00 
  806e20:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806e27:	e8 60 9a ff ff       	call   80088c <_panic>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_sem_signal(mem_sem);
  806e2c:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  806e31:	89 04 24             	mov    %eax,(%esp)
  806e34:	e8 79 69 00 00       	call   80d7b2 <sys_sem_signal>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
  806e39:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  806e3c:	8d 44 19 0c          	lea    0xc(%ecx,%ebx,1),%eax
  806e40:	3b 05 a0 86 a3 00    	cmp    0xa386a0,%eax
  806e46:	76 1c                	jbe    806e64 <mem_malloc+0x174>
  806e48:	c7 44 24 08 d0 2f 81 	movl   $0x812fd0,0x8(%esp)
  806e4f:	00 
  806e50:	c7 44 24 04 4b 02 00 	movl   $0x24b,0x4(%esp)
  806e57:	00 
  806e58:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806e5f:	e8 28 9a ff ff       	call   80088c <_panic>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
  806e64:	8d 43 0c             	lea    0xc(%ebx),%eax
  806e67:	a8 03                	test   $0x3,%al
  806e69:	74 1c                	je     806e87 <mem_malloc+0x197>
  806e6b:	c7 44 24 08 00 30 81 	movl   $0x813000,0x8(%esp)
  806e72:	00 
  806e73:	c7 44 24 04 4d 02 00 	movl   $0x24d,0x4(%esp)
  806e7a:	00 
  806e7b:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806e82:	e8 05 9a ff ff       	call   80088c <_panic>
         (unsigned long)((u8_t *)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
  806e87:	f6 c3 03             	test   $0x3,%bl
  806e8a:	74 4e                	je     806eda <mem_malloc+0x1ea>
  806e8c:	c7 44 24 08 30 30 81 	movl   $0x813030,0x8(%esp)
  806e93:	00 
  806e94:	c7 44 24 04 4f 02 00 	movl   $0x24f,0x4(%esp)
  806e9b:	00 
  806e9c:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806ea3:	e8 e4 99 ff ff       	call   80088c <_panic>
  806ea8:	8b 13                	mov    (%ebx),%edx
  806eaa:	39 fa                	cmp    %edi,%edx
  806eac:	0f 82 b3 fe ff ff    	jb     806d65 <mem_malloc+0x75>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
      }
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while(local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | 2, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_sem_signal(mem_sem);
  806eb2:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  806eb7:	89 04 24             	mov    %eax,(%esp)
  806eba:	e8 f3 68 00 00       	call   80d7b2 <sys_sem_signal>
  806ebf:	b8 00 00 00 00       	mov    $0x0,%eax
  806ec4:	eb 14                	jmp    806eda <mem_malloc+0x1ea>
  return NULL;
  806ec6:	b8 00 00 00 00       	mov    $0x0,%eax
  806ecb:	eb 0d                	jmp    806eda <mem_malloc+0x1ea>
  806ecd:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  806ed0:	a3 a4 86 a3 00       	mov    %eax,0xa386a4
  806ed5:	e9 52 ff ff ff       	jmp    806e2c <mem_malloc+0x13c>
}
  806eda:	83 c4 1c             	add    $0x1c,%esp
  806edd:	5b                   	pop    %ebx
  806ede:	5e                   	pop    %esi
  806edf:	5f                   	pop    %edi
  806ee0:	5d                   	pop    %ebp
  806ee1:	c3                   	ret    

00806ee2 <mem_calloc>:

#endif /* MEM_USE_POOLS */
/**
 * Contiguously allocates enough space for count objects that are size bytes
 * of memory each and returns a pointer to the allocated memory.
 *
 * The allocated memory is filled with bytes of value zero.
 *
 * @param count number of objects to allocate
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *mem_calloc(mem_size_t count, mem_size_t size)
{
  806ee2:	55                   	push   %ebp
  806ee3:	89 e5                	mov    %esp,%ebp
  806ee5:	83 ec 18             	sub    $0x18,%esp
  806ee8:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  806eeb:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  void *p;

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc(count * size);
  806eee:	8b 45 0c             	mov    0xc(%ebp),%eax
  806ef1:	89 c6                	mov    %eax,%esi
  806ef3:	0f af 75 08          	imul   0x8(%ebp),%esi
  806ef7:	89 34 24             	mov    %esi,(%esp)
  806efa:	e8 f1 fd ff ff       	call   806cf0 <mem_malloc>
  806eff:	89 c3                	mov    %eax,%ebx
  if (p) {
  806f01:	85 c0                	test   %eax,%eax
  806f03:	74 14                	je     806f19 <mem_calloc+0x37>
    /* zero the memory */
    memset(p, 0, count * size);
  806f05:	89 74 24 08          	mov    %esi,0x8(%esp)
  806f09:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  806f10:	00 
  806f11:	89 04 24             	mov    %eax,(%esp)
  806f14:	e8 78 a2 ff ff       	call   801191 <memset>
  }
  return p;
}
  806f19:	89 d8                	mov    %ebx,%eax
  806f1b:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  806f1e:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  806f21:	89 ec                	mov    %ebp,%esp
  806f23:	5d                   	pop    %ebp
  806f24:	c3                   	ret    

00806f25 <mem_realloc>:
  806f25:	55                   	push   %ebp
  806f26:	89 e5                	mov    %esp,%ebp
  806f28:	83 ec 28             	sub    $0x28,%esp
  806f2b:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  806f2e:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  806f31:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  806f34:	8b 7d 08             	mov    0x8(%ebp),%edi
  806f37:	8b 45 0c             	mov    0xc(%ebp),%eax
  806f3a:	83 c0 03             	add    $0x3,%eax
  806f3d:	89 c3                	mov    %eax,%ebx
  806f3f:	83 e3 fc             	and    $0xfffffffc,%ebx
  806f42:	83 fb 0b             	cmp    $0xb,%ebx
  806f45:	77 07                	ja     806f4e <mem_realloc+0x29>
  806f47:	bb 0c 00 00 00       	mov    $0xc,%ebx
  806f4c:	eb 17                	jmp    806f65 <mem_realloc+0x40>
  806f4e:	81 fb 00 00 22 00    	cmp    $0x220000,%ebx
  806f54:	76 0f                	jbe    806f65 <mem_realloc+0x40>
  806f56:	bf 00 00 00 00       	mov    $0x0,%edi
  806f5b:	90                   	nop    
  806f5c:	8d 74 26 00          	lea    0x0(%esi),%esi
  806f60:	e9 1e 01 00 00       	jmp    807083 <mem_realloc+0x15e>
  806f65:	a1 9c 86 a3 00       	mov    0xa3869c,%eax
  806f6a:	39 c7                	cmp    %eax,%edi
  806f6c:	72 08                	jb     806f76 <mem_realloc+0x51>
  806f6e:	3b 3d a0 86 a3 00    	cmp    0xa386a0,%edi
  806f74:	72 1c                	jb     806f92 <mem_realloc+0x6d>
  806f76:	c7 44 24 08 5a 2f 81 	movl   $0x812f5a,0x8(%esp)
  806f7d:	00 
  806f7e:	c7 44 24 04 79 01 00 	movl   $0x179,0x4(%esp)
  806f85:	00 
  806f86:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806f8d:	e8 fa 98 ff ff       	call   80088c <_panic>
  806f92:	8d 4f f4             	lea    0xfffffff4(%edi),%ecx
  806f95:	89 4d f0             	mov    %ecx,0xfffffff0(%ebp)
  806f98:	29 c1                	sub    %eax,%ecx
  806f9a:	89 4d ec             	mov    %ecx,0xffffffec(%ebp)
  806f9d:	8b 47 f4             	mov    0xfffffff4(%edi),%eax
  806fa0:	29 c8                	sub    %ecx,%eax
  806fa2:	8d 70 f4             	lea    0xfffffff4(%eax),%esi
  806fa5:	39 de                	cmp    %ebx,%esi
  806fa7:	73 1c                	jae    806fc5 <mem_realloc+0xa0>
  806fa9:	c7 44 24 08 54 30 81 	movl   $0x813054,0x8(%esp)
  806fb0:	00 
  806fb1:	c7 44 24 04 8a 01 00 	movl   $0x18a,0x4(%esp)
  806fb8:	00 
  806fb9:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  806fc0:	e8 c7 98 ff ff       	call   80088c <_panic>
  806fc5:	39 f3                	cmp    %esi,%ebx
  806fc7:	0f 84 b6 00 00 00    	je     807083 <mem_realloc+0x15e>
  806fcd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  806fd4:	00 
  806fd5:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  806fda:	89 04 24             	mov    %eax,(%esp)
  806fdd:	e8 ed 64 00 00       	call   80d4cf <sys_arch_sem_wait>
  806fe2:	8b 0d 9c 86 a3 00    	mov    0xa3869c,%ecx
  806fe8:	89 c8                	mov    %ecx,%eax
  806fea:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  806fed:	03 02                	add    (%edx),%eax
  806fef:	80 78 08 00          	cmpb   $0x0,0x8(%eax)
  806ff3:	75 42                	jne    807037 <mem_realloc+0x112>
  806ff5:	8b 30                	mov    (%eax),%esi
  806ff7:	89 75 e8             	mov    %esi,0xffffffe8(%ebp)
  806ffa:	8b 75 ec             	mov    0xffffffec(%ebp),%esi
  806ffd:	8d 54 1e 0c          	lea    0xc(%esi,%ebx,1),%edx
  807001:	39 05 a4 86 a3 00    	cmp    %eax,0xa386a4
  807007:	75 08                	jne    807011 <mem_realloc+0xec>
  807009:	8d 04 11             	lea    (%ecx,%edx,1),%eax
  80700c:	a3 a4 86 a3 00       	mov    %eax,0xa386a4
  807011:	8d 04 11             	lea    (%ecx,%edx,1),%eax
  807014:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  807018:	8b 5d e8             	mov    0xffffffe8(%ebp),%ebx
  80701b:	89 18                	mov    %ebx,(%eax)
  80701d:	8b 75 ec             	mov    0xffffffec(%ebp),%esi
  807020:	89 70 04             	mov    %esi,0x4(%eax)
  807023:	8b 5d f0             	mov    0xfffffff0(%ebp),%ebx
  807026:	89 13                	mov    %edx,(%ebx)
  807028:	8b 00                	mov    (%eax),%eax
  80702a:	3d 00 00 22 00       	cmp    $0x220000,%eax
  80702f:	74 45                	je     807076 <mem_realloc+0x151>
  807031:	89 54 01 04          	mov    %edx,0x4(%ecx,%eax,1)
  807035:	eb 3f                	jmp    807076 <mem_realloc+0x151>
  807037:	8d 43 18             	lea    0x18(%ebx),%eax
  80703a:	39 c6                	cmp    %eax,%esi
  80703c:	72 38                	jb     807076 <mem_realloc+0x151>
  80703e:	8b 75 ec             	mov    0xffffffec(%ebp),%esi
  807041:	8d 5c 1e 0c          	lea    0xc(%esi,%ebx,1),%ebx
  807045:	8d 14 19             	lea    (%ecx,%ebx,1),%edx
  807048:	3b 15 a4 86 a3 00    	cmp    0xa386a4,%edx
  80704e:	73 06                	jae    807056 <mem_realloc+0x131>
  807050:	89 15 a4 86 a3 00    	mov    %edx,0xa386a4
  807056:	c6 42 08 00          	movb   $0x0,0x8(%edx)
  80705a:	8b 75 f0             	mov    0xfffffff0(%ebp),%esi
  80705d:	8b 06                	mov    (%esi),%eax
  80705f:	89 02                	mov    %eax,(%edx)
  807061:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  807064:	89 42 04             	mov    %eax,0x4(%edx)
  807067:	89 1e                	mov    %ebx,(%esi)
  807069:	8b 02                	mov    (%edx),%eax
  80706b:	3d 00 00 22 00       	cmp    $0x220000,%eax
  807070:	74 04                	je     807076 <mem_realloc+0x151>
  807072:	89 5c 01 04          	mov    %ebx,0x4(%ecx,%eax,1)
  807076:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  80707b:	89 04 24             	mov    %eax,(%esp)
  80707e:	e8 2f 67 00 00       	call   80d7b2 <sys_sem_signal>
  807083:	89 f8                	mov    %edi,%eax
  807085:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  807088:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80708b:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80708e:	89 ec                	mov    %ebp,%esp
  807090:	5d                   	pop    %ebp
  807091:	c3                   	ret    

00807092 <mem_free>:
  807092:	55                   	push   %ebp
  807093:	89 e5                	mov    %esp,%ebp
  807095:	56                   	push   %esi
  807096:	53                   	push   %ebx
  807097:	83 ec 10             	sub    $0x10,%esp
  80709a:	8b 45 08             	mov    0x8(%ebp),%eax
  80709d:	85 c0                	test   %eax,%eax
  80709f:	0f 84 71 01 00 00    	je     807216 <mem_free+0x184>
  8070a5:	a8 03                	test   $0x3,%al
  8070a7:	74 1c                	je     8070c5 <mem_free+0x33>
  8070a9:	c7 44 24 08 78 30 81 	movl   $0x813078,0x8(%esp)
  8070b0:	00 
  8070b1:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
  8070b8:	00 
  8070b9:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  8070c0:	e8 c7 97 ff ff       	call   80088c <_panic>
  8070c5:	89 c3                	mov    %eax,%ebx
  8070c7:	3b 05 9c 86 a3 00    	cmp    0xa3869c,%eax
  8070cd:	72 08                	jb     8070d7 <mem_free+0x45>
  8070cf:	3b 05 a0 86 a3 00    	cmp    0xa386a0,%eax
  8070d5:	72 1c                	jb     8070f3 <mem_free+0x61>
  8070d7:	c7 44 24 08 74 2f 81 	movl   $0x812f74,0x8(%esp)
  8070de:	00 
  8070df:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
  8070e6:	00 
  8070e7:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  8070ee:	e8 99 97 ff ff       	call   80088c <_panic>
  8070f3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8070fa:	00 
  8070fb:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  807100:	89 04 24             	mov    %eax,(%esp)
  807103:	e8 c7 63 00 00       	call   80d4cf <sys_arch_sem_wait>
  807108:	8d 4b f4             	lea    0xfffffff4(%ebx),%ecx
  80710b:	80 79 08 00          	cmpb   $0x0,0x8(%ecx)
  80710f:	75 1c                	jne    80712d <mem_free+0x9b>
  807111:	c7 44 24 08 8b 2f 81 	movl   $0x812f8b,0x8(%esp)
  807118:	00 
  807119:	c7 44 24 04 43 01 00 	movl   $0x143,0x4(%esp)
  807120:	00 
  807121:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  807128:	e8 5f 97 ff ff       	call   80088c <_panic>
  80712d:	c6 41 08 00          	movb   $0x0,0x8(%ecx)
  807131:	3b 0d a4 86 a3 00    	cmp    0xa386a4,%ecx
  807137:	73 06                	jae    80713f <mem_free+0xad>
  807139:	89 0d a4 86 a3 00    	mov    %ecx,0xa386a4
  80713f:	8b 35 9c 86 a3 00    	mov    0xa3869c,%esi
  807145:	39 f1                	cmp    %esi,%ecx
  807147:	73 1c                	jae    807165 <mem_free+0xd3>
  807149:	c7 44 24 08 9f 2f 81 	movl   $0x812f9f,0x8(%esp)
  807150:	00 
  807151:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
  807158:	00 
  807159:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  807160:	e8 27 97 ff ff       	call   80088c <_panic>
  807165:	8b 1d a0 86 a3 00    	mov    0xa386a0,%ebx
  80716b:	39 d9                	cmp    %ebx,%ecx
  80716d:	72 1c                	jb     80718b <mem_free+0xf9>
  80716f:	c7 44 24 08 b6 2f 81 	movl   $0x812fb6,0x8(%esp)
  807176:	00 
  807177:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
  80717e:	00 
  80717f:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  807186:	e8 01 97 ff ff       	call   80088c <_panic>
  80718b:	8b 01                	mov    (%ecx),%eax
  80718d:	3d 00 00 22 00       	cmp    $0x220000,%eax
  807192:	76 1c                	jbe    8071b0 <mem_free+0x11e>
  807194:	c7 44 24 08 9c 30 81 	movl   $0x81309c,0x8(%esp)
  80719b:	00 
  80719c:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
  8071a3:	00 
  8071a4:	c7 04 24 46 2f 81 00 	movl   $0x812f46,(%esp)
  8071ab:	e8 dc 96 ff ff       	call   80088c <_panic>
  8071b0:	8d 14 06             	lea    (%esi,%eax,1),%edx
  8071b3:	39 d1                	cmp    %edx,%ecx
  8071b5:	74 27                	je     8071de <mem_free+0x14c>
  8071b7:	80 7a 08 00          	cmpb   $0x0,0x8(%edx)
  8071bb:	75 21                	jne    8071de <mem_free+0x14c>
  8071bd:	39 d3                	cmp    %edx,%ebx
  8071bf:	90                   	nop    
  8071c0:	74 1c                	je     8071de <mem_free+0x14c>
  8071c2:	39 15 a4 86 a3 00    	cmp    %edx,0xa386a4
  8071c8:	75 06                	jne    8071d0 <mem_free+0x13e>
  8071ca:	89 0d a4 86 a3 00    	mov    %ecx,0xa386a4
  8071d0:	8b 02                	mov    (%edx),%eax
  8071d2:	89 01                	mov    %eax,(%ecx)
  8071d4:	8b 12                	mov    (%edx),%edx
  8071d6:	89 c8                	mov    %ecx,%eax
  8071d8:	29 f0                	sub    %esi,%eax
  8071da:	89 44 16 04          	mov    %eax,0x4(%esi,%edx,1)
  8071de:	89 f3                	mov    %esi,%ebx
  8071e0:	03 59 04             	add    0x4(%ecx),%ebx
  8071e3:	39 d9                	cmp    %ebx,%ecx
  8071e5:	74 22                	je     807209 <mem_free+0x177>
  8071e7:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
  8071eb:	75 1c                	jne    807209 <mem_free+0x177>
  8071ed:	3b 0d a4 86 a3 00    	cmp    0xa386a4,%ecx
  8071f3:	75 06                	jne    8071fb <mem_free+0x169>
  8071f5:	89 1d a4 86 a3 00    	mov    %ebx,0xa386a4
  8071fb:	8b 01                	mov    (%ecx),%eax
  8071fd:	89 03                	mov    %eax,(%ebx)
  8071ff:	8b 11                	mov    (%ecx),%edx
  807201:	89 d8                	mov    %ebx,%eax
  807203:	29 f0                	sub    %esi,%eax
  807205:	89 44 16 04          	mov    %eax,0x4(%esi,%edx,1)
  807209:	a1 a8 86 a3 00       	mov    0xa386a8,%eax
  80720e:	89 04 24             	mov    %eax,(%esp)
  807211:	e8 9c 65 00 00       	call   80d7b2 <sys_sem_signal>
  807216:	83 c4 10             	add    $0x10,%esp
  807219:	5b                   	pop    %ebx
  80721a:	5e                   	pop    %esi
  80721b:	5d                   	pop    %ebp
  80721c:	c3                   	ret    

0080721d <mem_init>:
  80721d:	55                   	push   %ebp
  80721e:	89 e5                	mov    %esp,%ebp
  807220:	83 ec 08             	sub    $0x8,%esp
  807223:	b8 83 86 81 00       	mov    $0x818683,%eax
  807228:	83 e0 fc             	and    $0xfffffffc,%eax
  80722b:	a3 9c 86 a3 00       	mov    %eax,0xa3869c
  807230:	c7 00 00 00 22 00    	movl   $0x220000,(%eax)
  807236:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  80723d:	c6 40 08 00          	movb   $0x0,0x8(%eax)
  807241:	8d 90 00 00 22 00    	lea    0x220000(%eax),%edx
  807247:	89 15 a0 86 a3 00    	mov    %edx,0xa386a0
  80724d:	c6 42 08 01          	movb   $0x1,0x8(%edx)
  807251:	c7 80 00 00 22 00 00 	movl   $0x220000,0x220000(%eax)
  807258:	00 22 00 
  80725b:	c7 42 04 00 00 22 00 	movl   $0x220000,0x4(%edx)
  807262:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  807269:	e8 9f 63 00 00       	call   80d60d <sys_sem_new>
  80726e:	a3 a8 86 a3 00       	mov    %eax,0xa386a8
  807273:	a1 9c 86 a3 00       	mov    0xa3869c,%eax
  807278:	a3 a4 86 a3 00       	mov    %eax,0xa386a4
  80727d:	c9                   	leave  
  80727e:	c3                   	ret    
	...

00807280 <memp_init>:
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  807280:	55                   	push   %ebp
  807281:	89 e5                	mov    %esp,%ebp
  807283:	57                   	push   %edi
  807284:	56                   	push   %esi
  807285:	53                   	push   %ebx
  807286:	83 ec 10             	sub    $0x10,%esp
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
    MEMP_STATS_AVAIL(used, i, 0);
    MEMP_STATS_AVAIL(max, i, 0);
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

  memp = LWIP_MEM_ALIGN(memp_memory);
  807289:	b8 03 87 a3 00       	mov    $0xa38703,%eax
  80728e:	83 e0 fc             	and    $0xfffffffc,%eax
  807291:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  807294:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  80729b:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80729e:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_tab[i] = NULL;
  8072a1:	c7 04 85 c0 86 a3 00 	movl   $0x0,0xa386c0(,%eax,4)
  8072a8:	00 00 00 00 
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  8072ac:	0f b7 9c 00 5a 31 81 	movzwl 0x81315a(%eax,%eax,1),%ebx
  8072b3:	00 
  8072b4:	66 85 db             	test   %bx,%bx
  8072b7:	74 51                	je     80730a <memp_init+0x8a>
      memp->next = memp_tab[i];
      memp_tab[i] = memp;
      memp = (struct memp *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]);
  8072b9:	0f b7 84 00 3e 31 81 	movzwl 0x81313e(%eax,%eax,1),%eax
  8072c0:	00 
  8072c1:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  8072c4:	be 00 00 00 00       	mov    $0x0,%esi
  8072c9:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  8072cc:	ba 00 00 00 00       	mov    $0x0,%edx
  8072d1:	89 c7                	mov    %eax,%edi
  8072d3:	89 31                	mov    %esi,(%ecx)
  8072d5:	8d 04 39             	lea    (%ecx,%edi,1),%eax
  8072d8:	83 c2 01             	add    $0x1,%edx
  8072db:	66 39 da             	cmp    %bx,%dx
  8072de:	74 06                	je     8072e6 <memp_init+0x66>
  8072e0:	89 ce                	mov    %ecx,%esi
  8072e2:	89 c1                	mov    %eax,%ecx
  8072e4:	eb ed                	jmp    8072d3 <memp_init+0x53>
  8072e6:	8d 43 ff             	lea    0xffffffff(%ebx),%eax
  8072e9:	0f b7 c0             	movzwl %ax,%eax
  8072ec:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  8072ef:	03 4d e4             	add    0xffffffe4(%ebp),%ecx
  8072f2:	0f af c7             	imul   %edi,%eax
  8072f5:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8072f8:	01 c2                	add    %eax,%edx
  8072fa:	8b 5d ec             	mov    0xffffffec(%ebp),%ebx
  8072fd:	89 14 9d c0 86 a3 00 	mov    %edx,0xa386c0(,%ebx,4)
  807304:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  807307:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80730a:	83 45 e8 01          	addl   $0x1,0xffffffe8(%ebp)
  80730e:	83 7d e8 0e          	cmpl   $0xe,0xffffffe8(%ebp)
  807312:	75 87                	jne    80729b <memp_init+0x1b>
    }
  }
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  807314:	83 c4 10             	add    $0x10,%esp
  807317:	5b                   	pop    %ebx
  807318:	5e                   	pop    %esi
  807319:	5f                   	pop    %edi
  80731a:	5d                   	pop    %ebp
  80731b:	c3                   	ret    

0080731c <memp_free>:

/**
 * Get an element from a specific pool.
 *
 * @param type the pool to get an element from
 *
 * the debug version has two more parameters:
 * @param file file name calling this function
 * @param line number of line where this function is called
 *
 * @return a pointer to the allocated memory or a NULL pointer on error
 */
void *
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);

  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  
  if (memp != NULL) {    
    memp_tab[type] = memp->next;    
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
    memp->file = file;
    memp->line = line;
#endif /* MEMP_OVERFLOW_CHECK */
    MEMP_STATS_INC_USED(used, type);
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
    memp = (struct memp*)((u8_t*)memp + MEMP_SIZE);
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | 2, ("memp_malloc: out of memory in pool %s\n", memp_desc[type]));
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}

/**
 * Put an element back into its pool.
 *
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  80731c:	55                   	push   %ebp
  80731d:	89 e5                	mov    %esp,%ebp
  80731f:	83 ec 18             	sub    $0x18,%esp
  807322:	8b 4d 08             	mov    0x8(%ebp),%ecx
  807325:	8b 55 0c             	mov    0xc(%ebp),%edx
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  807328:	85 d2                	test   %edx,%edx
  80732a:	74 31                	je     80735d <memp_free+0x41>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
  80732c:	f6 c2 03             	test   $0x3,%dl
  80732f:	74 1c                	je     80734d <memp_free+0x31>
  807331:	c7 44 24 08 c8 30 81 	movl   $0x8130c8,0x8(%esp)
  807338:	00 
  807339:	c7 44 24 04 5b 01 00 	movl   $0x15b,0x4(%esp)
  807340:	00 
  807341:	c7 04 24 0b 31 81 00 	movl   $0x81310b,(%esp)
  807348:	e8 3f 95 ff ff       	call   80088c <_panic>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#else
  memp_overflow_check_element(memp, memp_sizes[type]);
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  80734d:	8b 04 8d c0 86 a3 00 	mov    0xa386c0(,%ecx,4),%eax
  807354:	89 02                	mov    %eax,(%edx)
  memp_tab[type] = memp;
  807356:	89 14 8d c0 86 a3 00 	mov    %edx,0xa386c0(,%ecx,4)

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
  80735d:	c9                   	leave  
  80735e:	c3                   	ret    

0080735f <memp_malloc>:
  80735f:	55                   	push   %ebp
  807360:	89 e5                	mov    %esp,%ebp
  807362:	83 ec 18             	sub    $0x18,%esp
  807365:	8b 4d 08             	mov    0x8(%ebp),%ecx
  807368:	83 f9 0d             	cmp    $0xd,%ecx
  80736b:	76 1c                	jbe    807389 <memp_malloc+0x2a>
  80736d:	c7 44 24 08 20 31 81 	movl   $0x813120,0x8(%esp)
  807374:	00 
  807375:	c7 44 24 04 2d 01 00 	movl   $0x12d,0x4(%esp)
  80737c:	00 
  80737d:	c7 04 24 0b 31 81 00 	movl   $0x81310b,(%esp)
  807384:	e8 03 95 ff ff       	call   80088c <_panic>
  807389:	8b 14 8d c0 86 a3 00 	mov    0xa386c0(,%ecx,4),%edx
  807390:	85 d2                	test   %edx,%edx
  807392:	74 2a                	je     8073be <memp_malloc+0x5f>
  807394:	8b 02                	mov    (%edx),%eax
  807396:	89 04 8d c0 86 a3 00 	mov    %eax,0xa386c0(,%ecx,4)
  80739d:	f6 c2 03             	test   $0x3,%dl
  8073a0:	74 1c                	je     8073be <memp_malloc+0x5f>
  8073a2:	c7 44 24 08 e8 30 81 	movl   $0x8130e8,0x8(%esp)
  8073a9:	00 
  8073aa:	c7 44 24 04 3f 01 00 	movl   $0x13f,0x4(%esp)
  8073b1:	00 
  8073b2:	c7 04 24 0b 31 81 00 	movl   $0x81310b,(%esp)
  8073b9:	e8 ce 94 ff ff       	call   80088c <_panic>
  8073be:	89 d0                	mov    %edx,%eax
  8073c0:	c9                   	leave  
  8073c1:	c3                   	ret    
	...

008073d0 <netif_find>:
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(char *name)
{
  8073d0:	55                   	push   %ebp
  8073d1:	89 e5                	mov    %esp,%ebp
  8073d3:	53                   	push   %ebx
  8073d4:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  8073d7:	ba 00 00 00 00       	mov    $0x0,%edx
  8073dc:	85 db                	test   %ebx,%ebx
  8073de:	74 2d                	je     80740d <netif_find+0x3d>
    return NULL;
  }

  num = name[2] - '0';
  8073e0:	0f b6 4b 02          	movzbl 0x2(%ebx),%ecx
  8073e4:	83 e9 30             	sub    $0x30,%ecx

  for(netif = netif_list; netif != NULL; netif = netif->next) {
  8073e7:	8b 15 c0 e5 b3 00    	mov    0xb3e5c0,%edx
  8073ed:	85 d2                	test   %edx,%edx
  8073ef:	74 1c                	je     80740d <netif_find+0x3d>
    if (num == netif->num &&
  8073f1:	38 4a 31             	cmp    %cl,0x31(%edx)
  8073f4:	75 11                	jne    807407 <netif_find+0x37>
  8073f6:	0f b6 03             	movzbl (%ebx),%eax
  8073f9:	3a 42 2f             	cmp    0x2f(%edx),%al
  8073fc:	75 09                	jne    807407 <netif_find+0x37>
  8073fe:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
  807402:	3a 42 30             	cmp    0x30(%edx),%al
  807405:	74 06                	je     80740d <netif_find+0x3d>
  807407:	8b 12                	mov    (%edx),%edx
  807409:	85 d2                	test   %edx,%edx
  80740b:	75 e4                	jne    8073f1 <netif_find+0x21>
       name[0] == netif->name[0] &&
       name[1] == netif->name[1]) {
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
}
  80740d:	89 d0                	mov    %edx,%eax
  80740f:	5b                   	pop    %ebx
  807410:	5d                   	pop    %ebp
  807411:	c3                   	ret    

00807412 <netif_set_gw>:

/**
 * Change the IP address of a network interface
 *
 * @param netif the network interface to change
 * @param ipaddr the new IP address
 *
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, struct ip_addr *ipaddr)
{
  /* TODO: Handling of obsolete pcbs */
  /* See:  http://mail.gnu.org/archive/html/lwip-users/2003-03/msg00118.html */
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if ((ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0)
  {
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | 1, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
    while (pcb != NULL) {
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
        LWIP_DEBUGF(NETIF_DEBUG | 1, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
        pcb = next;
      } else {
        pcb = pcb->next;
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
      }
    }
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  snmp_insert_ipaddridx_tree(netif);
  snmp_insert_iprteidx_tree(0,netif);

  LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 3, ("netif: IP address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->ip_addr),
    ip4_addr2(&netif->ip_addr),
    ip4_addr3(&netif->ip_addr),
    ip4_addr4(&netif->ip_addr)));
}

/**
 * Change the default gateway for a network interface
 *
 * @param netif the network interface to change
 * @param gw the new default gateway
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, struct ip_addr *gw)
{
  807412:	55                   	push   %ebp
  807413:	89 e5                	mov    %esp,%ebp
  807415:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&(netif->gw), gw);
  807418:	ba 00 00 00 00       	mov    $0x0,%edx
  80741d:	85 c0                	test   %eax,%eax
  80741f:	74 02                	je     807423 <netif_set_gw+0x11>
  807421:	8b 10                	mov    (%eax),%edx
  807423:	8b 45 08             	mov    0x8(%ebp),%eax
  807426:	89 50 0c             	mov    %edx,0xc(%eax)
  LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 3, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->gw),
    ip4_addr2(&netif->gw),
    ip4_addr3(&netif->gw),
    ip4_addr4(&netif->gw)));
}
  807429:	5d                   	pop    %ebp
  80742a:	c3                   	ret    

0080742b <netif_set_netmask>:

/**
 * Change the netmask of a network interface
 *
 * @param netif the network interface to change
 * @param netmask the new netmask
 *
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, struct ip_addr *netmask)
{
  80742b:	55                   	push   %ebp
  80742c:	89 e5                	mov    %esp,%ebp
  80742e:	8b 45 0c             	mov    0xc(%ebp),%eax
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  807431:	ba 00 00 00 00       	mov    $0x0,%edx
  807436:	85 c0                	test   %eax,%eax
  807438:	74 02                	je     80743c <netif_set_netmask+0x11>
  80743a:	8b 10                	mov    (%eax),%edx
  80743c:	8b 45 08             	mov    0x8(%ebp),%eax
  80743f:	89 50 08             	mov    %edx,0x8(%eax)
  snmp_insert_iprteidx_tree(0, netif);
  LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 3, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
    netif->name[0], netif->name[1],
    ip4_addr1(&netif->netmask),
    ip4_addr2(&netif->netmask),
    ip4_addr3(&netif->netmask),
    ip4_addr4(&netif->netmask)));
}
  807442:	5d                   	pop    %ebp
  807443:	c3                   	ret    

00807444 <netif_set_default>:

/**
 * Set a network interface as the default network interface
 * (used to output all packets for which no specific route is found)
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  807444:	55                   	push   %ebp
  807445:	89 e5                	mov    %esp,%ebp
  if (netif == NULL)
  {
    /* remove default route */
    snmp_delete_iprteidx_tree(1, netif);
  }
  else
  {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  807447:	8b 45 08             	mov    0x8(%ebp),%eax
  80744a:	a3 c4 e5 b3 00       	mov    %eax,0xb3e5c4
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  80744f:	5d                   	pop    %ebp
  807450:	c3                   	ret    

00807451 <netif_remove>:
  807451:	55                   	push   %ebp
  807452:	89 e5                	mov    %esp,%ebp
  807454:	83 ec 04             	sub    $0x4,%esp
  807457:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80745a:	85 c9                	test   %ecx,%ecx
  80745c:	74 48                	je     8074a6 <netif_remove+0x55>
  80745e:	a1 c0 e5 b3 00       	mov    0xb3e5c0,%eax
  807463:	39 c8                	cmp    %ecx,%eax
  807465:	75 1f                	jne    807486 <netif_remove+0x35>
  807467:	8b 01                	mov    (%ecx),%eax
  807469:	a3 c0 e5 b3 00       	mov    %eax,0xb3e5c0
  80746e:	eb 22                	jmp    807492 <netif_remove+0x41>
  807470:	8b 02                	mov    (%edx),%eax
  807472:	39 c8                	cmp    %ecx,%eax
  807474:	74 0a                	je     807480 <netif_remove+0x2f>
  807476:	89 c2                	mov    %eax,%edx
  807478:	85 d2                	test   %edx,%edx
  80747a:	75 f4                	jne    807470 <netif_remove+0x1f>
  80747c:	eb 28                	jmp    8074a6 <netif_remove+0x55>
  80747e:	89 c2                	mov    %eax,%edx
  807480:	8b 01                	mov    (%ecx),%eax
  807482:	89 02                	mov    %eax,(%edx)
  807484:	eb 0c                	jmp    807492 <netif_remove+0x41>
  807486:	85 c0                	test   %eax,%eax
  807488:	74 1c                	je     8074a6 <netif_remove+0x55>
  80748a:	8b 10                	mov    (%eax),%edx
  80748c:	39 ca                	cmp    %ecx,%edx
  80748e:	75 e8                	jne    807478 <netif_remove+0x27>
  807490:	eb ec                	jmp    80747e <netif_remove+0x2d>
  807492:	39 0d c4 e5 b3 00    	cmp    %ecx,0xb3e5c4
  807498:	75 0c                	jne    8074a6 <netif_remove+0x55>
  80749a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8074a1:	e8 9e ff ff ff       	call   807444 <netif_set_default>
  8074a6:	c9                   	leave  
  8074a7:	c3                   	ret    

008074a8 <netif_set_down>:

/**
 * Bring an interface up, available for processing
 * traffic.
 * 
 * @note: Enabling DHCP on a down interface will make it come
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  if ( !(netif->flags & NETIF_FLAG_UP )) {
    netif->flags |= NETIF_FLAG_UP;
    
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_LINK_CALLBACK(netif);
    NETIF_STATUS_CALLBACK(netif);

#if LWIP_ARP
    /** For Ethernet network interfaces, we would like to send a
     *  "gratuitous ARP"; this is an ARP packet sent by a node in order
     *  to spontaneously cause other nodes to update an entry in their
     *  ARP cache. From RFC 3220 "IP Mobility Support for IPv4" section 4.6.
     */ 
    if (netif->flags & NETIF_FLAG_ETHARP) {
      etharp_query(netif, &(netif->ip_addr), NULL);
    }
#endif /* LWIP_ARP */
    
  }
}

/**
 * Bring an interface down, disabling any traffic processing.
 *
 * @note: Enabling DHCP on a down interface will make it come
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  8074a8:	55                   	push   %ebp
  8074a9:	89 e5                	mov    %esp,%ebp
  8074ab:	8b 55 08             	mov    0x8(%ebp),%edx
  if ( netif->flags & NETIF_FLAG_UP )
  8074ae:	0f b6 42 2e          	movzbl 0x2e(%edx),%eax
  8074b2:	a8 01                	test   $0x1,%al
  8074b4:	74 06                	je     8074bc <netif_set_down+0x14>
    {
      netif->flags &= ~NETIF_FLAG_UP;
  8074b6:	83 e0 fe             	and    $0xfffffffe,%eax
  8074b9:	88 42 2e             	mov    %al,0x2e(%edx)
#if LWIP_SNMP
      snmp_get_sysuptime(&netif->ts);
#endif
      
      NETIF_LINK_CALLBACK(netif);
      NETIF_STATUS_CALLBACK(netif);
    }
}
  8074bc:	5d                   	pop    %ebp
  8074bd:	c3                   	ret    

008074be <netif_is_up>:

/**
 * Ask if an interface is up
 */ 
u8_t netif_is_up(struct netif *netif)
{
  8074be:	55                   	push   %ebp
  8074bf:	89 e5                	mov    %esp,%ebp
  8074c1:	8b 45 08             	mov    0x8(%ebp),%eax
  8074c4:	0f b6 40 2e          	movzbl 0x2e(%eax),%eax
  8074c8:	83 e0 01             	and    $0x1,%eax
  return (netif->flags & NETIF_FLAG_UP)?1:0;
}
  8074cb:	5d                   	pop    %ebp
  8074cc:	c3                   	ret    

008074cd <netif_set_up>:
  8074cd:	55                   	push   %ebp
  8074ce:	89 e5                	mov    %esp,%ebp
  8074d0:	83 ec 18             	sub    $0x18,%esp
  8074d3:	8b 55 08             	mov    0x8(%ebp),%edx
  8074d6:	0f b6 42 2e          	movzbl 0x2e(%edx),%eax
  8074da:	a8 01                	test   $0x1,%al
  8074dc:	75 21                	jne    8074ff <netif_set_up+0x32>
  8074de:	83 c8 01             	or     $0x1,%eax
  8074e1:	88 42 2e             	mov    %al,0x2e(%edx)
  8074e4:	a8 20                	test   $0x20,%al
  8074e6:	74 17                	je     8074ff <netif_set_up+0x32>
  8074e8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8074ef:	00 
  8074f0:	8d 42 04             	lea    0x4(%edx),%eax
  8074f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8074f7:	89 14 24             	mov    %edx,(%esp)
  8074fa:	e8 62 53 00 00       	call   80c861 <etharp_query>
  8074ff:	c9                   	leave  
  807500:	c3                   	ret    

00807501 <netif_set_ipaddr>:
  807501:	55                   	push   %ebp
  807502:	89 e5                	mov    %esp,%ebp
  807504:	57                   	push   %edi
  807505:	56                   	push   %esi
  807506:	53                   	push   %ebx
  807507:	83 ec 0c             	sub    $0xc,%esp
  80750a:	8b 75 08             	mov    0x8(%ebp),%esi
  80750d:	8b 7d 0c             	mov    0xc(%ebp),%edi
  807510:	8b 07                	mov    (%edi),%eax
  807512:	3b 46 04             	cmp    0x4(%esi),%eax
  807515:	74 53                	je     80756a <netif_set_ipaddr+0x69>
  807517:	8b 15 c8 e5 b3 00    	mov    0xb3e5c8,%edx
  80751d:	85 d2                	test   %edx,%edx
  80751f:	74 1d                	je     80753e <netif_set_ipaddr+0x3d>
  807521:	8b 02                	mov    (%edx),%eax
  807523:	3b 46 04             	cmp    0x4(%esi),%eax
  807526:	75 0f                	jne    807537 <netif_set_ipaddr+0x36>
  807528:	8b 5a 0c             	mov    0xc(%edx),%ebx
  80752b:	89 14 24             	mov    %edx,(%esp)
  80752e:	e8 a6 16 00 00       	call   808bd9 <tcp_abort>
  807533:	89 da                	mov    %ebx,%edx
  807535:	eb 03                	jmp    80753a <netif_set_ipaddr+0x39>
  807537:	8b 52 0c             	mov    0xc(%edx),%edx
  80753a:	85 d2                	test   %edx,%edx
  80753c:	75 e3                	jne    807521 <netif_set_ipaddr+0x20>
  80753e:	a1 d0 e5 b3 00       	mov    0xb3e5d0,%eax
  807543:	85 c0                	test   %eax,%eax
  807545:	74 23                	je     80756a <netif_set_ipaddr+0x69>
  807547:	85 c0                	test   %eax,%eax
  807549:	74 18                	je     807563 <netif_set_ipaddr+0x62>
  80754b:	8b 10                	mov    (%eax),%edx
  80754d:	85 d2                	test   %edx,%edx
  80754f:	74 12                	je     807563 <netif_set_ipaddr+0x62>
  807551:	3b 56 04             	cmp    0x4(%esi),%edx
  807554:	75 0d                	jne    807563 <netif_set_ipaddr+0x62>
  807556:	ba 00 00 00 00       	mov    $0x0,%edx
  80755b:	85 ff                	test   %edi,%edi
  80755d:	74 02                	je     807561 <netif_set_ipaddr+0x60>
  80755f:	8b 17                	mov    (%edi),%edx
  807561:	89 10                	mov    %edx,(%eax)
  807563:	8b 40 0c             	mov    0xc(%eax),%eax
  807566:	85 c0                	test   %eax,%eax
  807568:	75 dd                	jne    807547 <netif_set_ipaddr+0x46>
  80756a:	b8 00 00 00 00       	mov    $0x0,%eax
  80756f:	85 ff                	test   %edi,%edi
  807571:	74 02                	je     807575 <netif_set_ipaddr+0x74>
  807573:	8b 07                	mov    (%edi),%eax
  807575:	89 46 04             	mov    %eax,0x4(%esi)
  807578:	83 c4 0c             	add    $0xc,%esp
  80757b:	5b                   	pop    %ebx
  80757c:	5e                   	pop    %esi
  80757d:	5f                   	pop    %edi
  80757e:	5d                   	pop    %ebp
  80757f:	c3                   	ret    

00807580 <netif_set_addr>:
  807580:	55                   	push   %ebp
  807581:	89 e5                	mov    %esp,%ebp
  807583:	53                   	push   %ebx
  807584:	83 ec 14             	sub    $0x14,%esp
  807587:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80758a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80758d:	89 44 24 04          	mov    %eax,0x4(%esp)
  807591:	89 1c 24             	mov    %ebx,(%esp)
  807594:	e8 68 ff ff ff       	call   807501 <netif_set_ipaddr>
  807599:	8b 45 10             	mov    0x10(%ebp),%eax
  80759c:	89 44 24 04          	mov    %eax,0x4(%esp)
  8075a0:	89 1c 24             	mov    %ebx,(%esp)
  8075a3:	e8 83 fe ff ff       	call   80742b <netif_set_netmask>
  8075a8:	8b 45 14             	mov    0x14(%ebp),%eax
  8075ab:	89 44 24 04          	mov    %eax,0x4(%esp)
  8075af:	89 1c 24             	mov    %ebx,(%esp)
  8075b2:	e8 5b fe ff ff       	call   807412 <netif_set_gw>
  8075b7:	83 c4 14             	add    $0x14,%esp
  8075ba:	5b                   	pop    %ebx
  8075bb:	5d                   	pop    %ebp
  8075bc:	c3                   	ret    

008075bd <netif_add>:
  8075bd:	55                   	push   %ebp
  8075be:	89 e5                	mov    %esp,%ebp
  8075c0:	53                   	push   %ebx
  8075c1:	83 ec 14             	sub    $0x14,%esp
  8075c4:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8075c7:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  8075ce:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  8075d5:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  8075dc:	c6 43 2e 00          	movb   $0x0,0x2e(%ebx)
  8075e0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
  8075e7:	8b 45 18             	mov    0x18(%ebp),%eax
  8075ea:	89 43 1c             	mov    %eax,0x1c(%ebx)
  8075ed:	0f b6 05 64 77 b3 00 	movzbl 0xb37764,%eax
  8075f4:	88 43 31             	mov    %al,0x31(%ebx)
  8075f7:	83 c0 01             	add    $0x1,%eax
  8075fa:	a2 64 77 b3 00       	mov    %al,0xb37764
  8075ff:	8b 45 20             	mov    0x20(%ebp),%eax
  807602:	89 43 10             	mov    %eax,0x10(%ebx)
  807605:	8b 45 14             	mov    0x14(%ebp),%eax
  807608:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80760c:	8b 45 10             	mov    0x10(%ebp),%eax
  80760f:	89 44 24 08          	mov    %eax,0x8(%esp)
  807613:	8b 45 0c             	mov    0xc(%ebp),%eax
  807616:	89 44 24 04          	mov    %eax,0x4(%esp)
  80761a:	89 1c 24             	mov    %ebx,(%esp)
  80761d:	e8 5e ff ff ff       	call   807580 <netif_set_addr>
  807622:	89 1c 24             	mov    %ebx,(%esp)
  807625:	ff 55 1c             	call   *0x1c(%ebp)
  807628:	84 c0                	test   %al,%al
  80762a:	74 07                	je     807633 <netif_add+0x76>
  80762c:	bb 00 00 00 00       	mov    $0x0,%ebx
  807631:	eb 0d                	jmp    807640 <netif_add+0x83>
  807633:	a1 c0 e5 b3 00       	mov    0xb3e5c0,%eax
  807638:	89 03                	mov    %eax,(%ebx)
  80763a:	89 1d c0 e5 b3 00    	mov    %ebx,0xb3e5c0
  807640:	89 d8                	mov    %ebx,%eax
  807642:	83 c4 14             	add    $0x14,%esp
  807645:	5b                   	pop    %ebx
  807646:	5d                   	pop    %ebp
  807647:	c3                   	ret    
	...

00807650 <pbuf_clen>:
 */

u8_t
pbuf_clen(struct pbuf *p)
{
  807650:	55                   	push   %ebp
  807651:	89 e5                	mov    %esp,%ebp
  807653:	8b 55 08             	mov    0x8(%ebp),%edx
  u8_t len;

  len = 0;
  while (p != NULL) {
  807656:	b8 00 00 00 00       	mov    $0x0,%eax
  80765b:	85 d2                	test   %edx,%edx
  80765d:	74 0e                	je     80766d <pbuf_clen+0x1d>
  80765f:	b8 00 00 00 00       	mov    $0x0,%eax
    ++len;
  807664:	83 c0 01             	add    $0x1,%eax
    p = p->next;
  807667:	8b 12                	mov    (%edx),%edx
  807669:	85 d2                	test   %edx,%edx
  80766b:	75 f7                	jne    807664 <pbuf_clen+0x14>
  80766d:	0f b6 c0             	movzbl %al,%eax
  }
  return len;
}
  807670:	5d                   	pop    %ebp
  807671:	c3                   	ret    

00807672 <pbuf_ref>:

/**
 * Increment the reference count of the pbuf.
 *
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  807672:	55                   	push   %ebp
  807673:	89 e5                	mov    %esp,%ebp
  807675:	8b 45 08             	mov    0x8(%ebp),%eax
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  807678:	85 c0                	test   %eax,%eax
  80767a:	74 05                	je     807681 <pbuf_ref+0xf>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  80767c:	66 83 40 0e 01       	addw   $0x1,0xe(%eax)
    SYS_ARCH_UNPROTECT(old_level);
  }
}
  807681:	5d                   	pop    %ebp
  807682:	c3                   	ret    

00807683 <pbuf_cat>:

/**
 * Concatenate two pbufs (each may be a pbuf chain) and take over
 * the caller's reference of the tail pbuf.
 * 
 * @note The caller MAY NOT reference the tail pbuf afterwards.
 * Use pbuf_chain() for that purpose.
 * 
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  807683:	55                   	push   %ebp
  807684:	89 e5                	mov    %esp,%ebp
  807686:	83 ec 18             	sub    $0x18,%esp
  807689:	8b 45 08             	mov    0x8(%ebp),%eax
  80768c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  80768f:	85 c0                	test   %eax,%eax
  807691:	74 0f                	je     8076a2 <pbuf_cat+0x1f>
  807693:	85 c9                	test   %ecx,%ecx
  807695:	74 0b                	je     8076a2 <pbuf_cat+0x1f>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  807697:	89 c2                	mov    %eax,%edx
  807699:	83 38 00             	cmpl   $0x0,(%eax)
  80769c:	74 31                	je     8076cf <pbuf_cat+0x4c>
  80769e:	66 90                	xchg   %ax,%ax
  8076a0:	eb 1c                	jmp    8076be <pbuf_cat+0x3b>
  8076a2:	c7 44 24 08 78 31 81 	movl   $0x813178,0x8(%esp)
  8076a9:	00 
  8076aa:	c7 44 24 04 42 02 00 	movl   $0x242,0x4(%esp)
  8076b1:	00 
  8076b2:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  8076b9:	e8 ce 91 ff ff       	call   80088c <_panic>
  8076be:	89 c2                	mov    %eax,%edx
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  8076c0:	0f b7 41 08          	movzwl 0x8(%ecx),%eax
  8076c4:	66 01 42 08          	add    %ax,0x8(%edx)
  8076c8:	8b 12                	mov    (%edx),%edx
  8076ca:	83 3a 00             	cmpl   $0x0,(%edx)
  8076cd:	75 f1                	jne    8076c0 <pbuf_cat+0x3d>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  8076cf:	0f b7 42 08          	movzwl 0x8(%edx),%eax
  8076d3:	66 3b 42 0a          	cmp    0xa(%edx),%ax
  8076d7:	74 1c                	je     8076f5 <pbuf_cat+0x72>
  8076d9:	c7 44 24 08 b0 31 81 	movl   $0x8131b0,0x8(%esp)
  8076e0:	00 
  8076e1:	c7 44 24 04 4a 02 00 	movl   $0x24a,0x4(%esp)
  8076e8:	00 
  8076e9:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  8076f0:	e8 97 91 ff ff       	call   80088c <_panic>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  8076f5:	66 03 41 08          	add    0x8(%ecx),%ax
  8076f9:	66 89 42 08          	mov    %ax,0x8(%edx)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  8076fd:	89 0a                	mov    %ecx,(%edx)
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  8076ff:	c9                   	leave  
  807700:	c3                   	ret    

00807701 <pbuf_chain>:

/**
 * Chain two pbufs (or pbuf chains) together.
 * 
 * The caller MUST call pbuf_free(t) once it has stopped
 * using it. Use pbuf_cat() instead if you no longer use t.
 * 
 * @param h head pbuf (chain)
 * @param t tail pbuf (chain)
 * @note The pbufs MUST belong to the same packet.
 * @note MAY NOT be called on a packet queue.
 *
 * The ->tot_len fields of all pbufs of the head chain are adjusted.
 * The ->next field of the last pbuf of the head chain is adjusted.
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  807701:	55                   	push   %ebp
  807702:	89 e5                	mov    %esp,%ebp
  807704:	53                   	push   %ebx
  807705:	83 ec 14             	sub    $0x14,%esp
  807708:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  pbuf_cat(h, t);
  80770b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80770f:	8b 45 08             	mov    0x8(%ebp),%eax
  807712:	89 04 24             	mov    %eax,(%esp)
  807715:	e8 69 ff ff ff       	call   807683 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  80771a:	89 1c 24             	mov    %ebx,(%esp)
  80771d:	e8 50 ff ff ff       	call   807672 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_FRESH | 2, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  807722:	83 c4 14             	add    $0x14,%esp
  807725:	5b                   	pop    %ebx
  807726:	5d                   	pop    %ebp
  807727:	c3                   	ret    

00807728 <pbuf_header>:
  807728:	55                   	push   %ebp
  807729:	89 e5                	mov    %esp,%ebp
  80772b:	56                   	push   %esi
  80772c:	53                   	push   %ebx
  80772d:	83 ec 10             	sub    $0x10,%esp
  807730:	8b 5d 08             	mov    0x8(%ebp),%ebx
  807733:	0f b7 4d 0c          	movzwl 0xc(%ebp),%ecx
  807737:	85 db                	test   %ebx,%ebx
  807739:	75 1c                	jne    807757 <pbuf_header+0x2f>
  80773b:	c7 44 24 08 39 34 81 	movl   $0x813439,0x8(%esp)
  807742:	00 
  807743:	c7 44 24 04 64 01 00 	movl   $0x164,0x4(%esp)
  80774a:	00 
  80774b:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807752:	e8 35 91 ff ff       	call   80088c <_panic>
  807757:	b8 00 00 00 00       	mov    $0x0,%eax
  80775c:	66 85 c9             	test   %cx,%cx
  80775f:	0f 84 a7 00 00 00    	je     80780c <pbuf_header+0xe4>
  807765:	89 ca                	mov    %ecx,%edx
  807767:	66 85 c9             	test   %cx,%cx
  80776a:	79 24                	jns    807790 <pbuf_header+0x68>
  80776c:	f7 da                	neg    %edx
  80776e:	66 3b 53 0a          	cmp    0xa(%ebx),%dx
  807772:	76 1c                	jbe    807790 <pbuf_header+0x68>
  807774:	c7 44 24 08 80 33 81 	movl   $0x813380,0x8(%esp)
  80777b:	00 
  80777c:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
  807783:	00 
  807784:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  80778b:	e8 fc 90 ff ff       	call   80088c <_panic>
  807790:	66 0f b6 43 0c       	movzbw 0xc(%ebx),%ax
  807795:	8b 73 04             	mov    0x4(%ebx),%esi
  807798:	66 85 c0             	test   %ax,%ax
  80779b:	74 06                	je     8077a3 <pbuf_header+0x7b>
  80779d:	66 83 f8 03          	cmp    $0x3,%ax
  8077a1:	75 1b                	jne    8077be <pbuf_header+0x96>
  8077a3:	0f bf c1             	movswl %cx,%eax
  8077a6:	89 f2                	mov    %esi,%edx
  8077a8:	29 c2                	sub    %eax,%edx
  8077aa:	89 53 04             	mov    %edx,0x4(%ebx)
  8077ad:	8d 43 10             	lea    0x10(%ebx),%eax
  8077b0:	39 c2                	cmp    %eax,%edx
  8077b2:	73 44                	jae    8077f8 <pbuf_header+0xd0>
  8077b4:	89 73 04             	mov    %esi,0x4(%ebx)
  8077b7:	b8 01 00 00 00       	mov    $0x1,%eax
  8077bc:	eb 4e                	jmp    80780c <pbuf_header+0xe4>
  8077be:	83 e8 01             	sub    $0x1,%eax
  8077c1:	66 83 f8 01          	cmp    $0x1,%ax
  8077c5:	77 15                	ja     8077dc <pbuf_header+0xb4>
  8077c7:	66 85 c9             	test   %cx,%cx
  8077ca:	79 3b                	jns    807807 <pbuf_header+0xdf>
  8077cc:	66 3b 53 0a          	cmp    0xa(%ebx),%dx
  8077d0:	77 35                	ja     807807 <pbuf_header+0xdf>
  8077d2:	0f bf c1             	movswl %cx,%eax
  8077d5:	29 c6                	sub    %eax,%esi
  8077d7:	89 73 04             	mov    %esi,0x4(%ebx)
  8077da:	eb 1c                	jmp    8077f8 <pbuf_header+0xd0>
  8077dc:	c7 44 24 08 9e 33 81 	movl   $0x81339e,0x8(%esp)
  8077e3:	00 
  8077e4:	c7 44 24 04 9a 01 00 	movl   $0x19a,0x4(%esp)
  8077eb:	00 
  8077ec:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  8077f3:	e8 94 90 ff ff       	call   80088c <_panic>
  8077f8:	66 01 4b 0a          	add    %cx,0xa(%ebx)
  8077fc:	66 01 4b 08          	add    %cx,0x8(%ebx)
  807800:	b8 00 00 00 00       	mov    $0x0,%eax
  807805:	eb 05                	jmp    80780c <pbuf_header+0xe4>
  807807:	b8 01 00 00 00       	mov    $0x1,%eax
  80780c:	83 c4 10             	add    $0x10,%esp
  80780f:	5b                   	pop    %ebx
  807810:	5e                   	pop    %esi
  807811:	5d                   	pop    %ebp
  807812:	c3                   	ret    

00807813 <pbuf_copy_partial>:

/**
 * Dechains the first pbuf from its succeeding pbufs in the chain.
 *
 * Makes p->tot_len field equal to p->len.
 * @param p pbuf to dechain
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  struct pbuf *q;
  u8_t tail_gone = 1;
  /* tail */
  q = p->next;
  /* pbuf has successor in chain? */
  if (q != NULL) {
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
    /* decouple pbuf from remainder */
    p->next = NULL;
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_STATE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
    if (tail_gone > 0) {
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_STATE,
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  return ((tail_gone > 0) ? NULL : q);
}

/**
 *
 * Create PBUF_RAM copies of pbufs.
 *
 * Used to queue packets on behalf of the lwIP stack, such as
 * ARP based queueing.
 *
 * @note You MUST explicitly use p = pbuf_take(p);
 *
 * @note Only one packet is copied, no packet queue!
 *
 * @param p_to pbuf destination of the copy
 * @param p_from pbuf source of the copy
 *
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  u16_t offset_to=0, offset_from=0, len;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 3, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do
  {
    LWIP_ASSERT("p_to != NULL", p_to != NULL);
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
    }
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE | 1, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}

/**
 * Copy (part of) the contents of a packet buffer
 * to an application supplied buffer.
 *
 * @param buf the pbuf from which to copy data
 * @param dataptr the application supplied buffer
 * @param len length of data to copy (dataptr must be big enough)
 * @param offset offset into the packet buffer from where to begin copying len bytes
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  807813:	55                   	push   %ebp
  807814:	89 e5                	mov    %esp,%ebp
  807816:	57                   	push   %edi
  807817:	56                   	push   %esi
  807818:	53                   	push   %ebx
  807819:	83 ec 1c             	sub    $0x1c,%esp
  80781c:	8b 45 08             	mov    0x8(%ebp),%eax
  80781f:	0f b7 7d 10          	movzwl 0x10(%ebp),%edi
  807823:	0f b7 55 14          	movzwl 0x14(%ebp),%edx
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("netbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  807827:	85 c0                	test   %eax,%eax
  807829:	75 1c                	jne    807847 <pbuf_copy_partial+0x34>
  80782b:	c7 44 24 08 e0 31 81 	movl   $0x8131e0,0x8(%esp)
  807832:	00 
  807833:	c7 44 24 04 ef 02 00 	movl   $0x2ef,0x4(%esp)
  80783a:	00 
  80783b:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807842:	e8 45 90 ff ff       	call   80088c <_panic>
  LWIP_ERROR("netbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  807847:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80784b:	75 1c                	jne    807869 <pbuf_copy_partial+0x56>
  80784d:	c7 44 24 08 04 32 81 	movl   $0x813204,0x8(%esp)
  807854:	00 
  807855:	c7 44 24 04 f0 02 00 	movl   $0x2f0,0x4(%esp)
  80785c:	00 
  80785d:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807864:	e8 23 90 ff ff       	call   80088c <_panic>

  left = 0;

  if((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  807869:	66 c7 45 f2 00 00    	movw   $0x0,0xfffffff2(%ebp)
  80786f:	66 85 ff             	test   %di,%di
  807872:	74 6c                	je     8078e0 <pbuf_copy_partial+0xcd>
  807874:	89 c6                	mov    %eax,%esi
  807876:	66 c7 45 f0 00 00    	movw   $0x0,0xfffffff0(%ebp)
  80787c:	66 c7 45 f2 00 00    	movw   $0x0,0xfffffff2(%ebp)
    if ((offset != 0) && (offset >= p->len)) {
  807882:	66 85 d2             	test   %dx,%dx
  807885:	74 0e                	je     807895 <pbuf_copy_partial+0x82>
  807887:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  80788b:	66 39 d0             	cmp    %dx,%ax
  80788e:	77 05                	ja     807895 <pbuf_copy_partial+0x82>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  807890:	66 29 c2             	sub    %ax,%dx
  807893:	eb 40                	jmp    8078d5 <pbuf_copy_partial+0xc2>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  807895:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  807899:	89 c3                	mov    %eax,%ebx
  80789b:	66 29 d3             	sub    %dx,%bx
  80789e:	66 39 fb             	cmp    %di,%bx
  8078a1:	76 02                	jbe    8078a5 <pbuf_copy_partial+0x92>
  8078a3:	89 fb                	mov    %edi,%ebx
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  8078a5:	0f b7 c3             	movzwl %bx,%eax
  8078a8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8078ac:	0f b7 c2             	movzwl %dx,%eax
  8078af:	03 46 04             	add    0x4(%esi),%eax
  8078b2:	89 44 24 04          	mov    %eax,0x4(%esp)
  8078b6:	0f b7 45 f0          	movzwl 0xfffffff0(%ebp),%eax
  8078ba:	03 45 0c             	add    0xc(%ebp),%eax
  8078bd:	89 04 24             	mov    %eax,(%esp)
  8078c0:	e8 a3 99 ff ff       	call   801268 <memcpy>
      copied_total += buf_copy_len;
  8078c5:	66 01 5d f2          	add    %bx,0xfffffff2(%ebp)
      left += buf_copy_len;
  8078c9:	66 01 5d f0          	add    %bx,0xfffffff0(%ebp)
      len -= buf_copy_len;
  8078cd:	66 29 df             	sub    %bx,%di
  8078d0:	ba 00 00 00 00       	mov    $0x0,%edx
  8078d5:	8b 36                	mov    (%esi),%esi
  8078d7:	66 85 ff             	test   %di,%di
  8078da:	74 04                	je     8078e0 <pbuf_copy_partial+0xcd>
  8078dc:	85 f6                	test   %esi,%esi
  8078de:	75 a2                	jne    807882 <pbuf_copy_partial+0x6f>
  8078e0:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
      offset = 0;
    }
  }
  return copied_total;
}
  8078e4:	83 c4 1c             	add    $0x1c,%esp
  8078e7:	5b                   	pop    %ebx
  8078e8:	5e                   	pop    %esi
  8078e9:	5f                   	pop    %edi
  8078ea:	5d                   	pop    %ebp
  8078eb:	c3                   	ret    

008078ec <pbuf_copy>:
  8078ec:	55                   	push   %ebp
  8078ed:	89 e5                	mov    %esp,%ebp
  8078ef:	57                   	push   %edi
  8078f0:	56                   	push   %esi
  8078f1:	53                   	push   %ebx
  8078f2:	83 ec 1c             	sub    $0x1c,%esp
  8078f5:	8b 7d 08             	mov    0x8(%ebp),%edi
  8078f8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8078fb:	85 ff                	test   %edi,%edi
  8078fd:	0f 94 c2             	sete   %dl
  807900:	84 d2                	test   %dl,%dl
  807902:	75 0e                	jne    807912 <pbuf_copy+0x26>
  807904:	85 db                	test   %ebx,%ebx
  807906:	74 0a                	je     807912 <pbuf_copy+0x26>
  807908:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80790c:	66 3b 43 08          	cmp    0x8(%ebx),%ax
  807910:	73 1c                	jae    80792e <pbuf_copy+0x42>
  807912:	c7 44 24 08 2c 32 81 	movl   $0x81322c,0x8(%esp)
  807919:	00 
  80791a:	c7 44 24 04 b1 02 00 	movl   $0x2b1,0x4(%esp)
  807921:	00 
  807922:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807929:	e8 5e 8f ff ff       	call   80088c <_panic>
  80792e:	66 c7 45 f0 00 00    	movw   $0x0,0xfffffff0(%ebp)
  807934:	66 c7 45 f2 00 00    	movw   $0x0,0xfffffff2(%ebp)
  80793a:	84 d2                	test   %dl,%dl
  80793c:	74 22                	je     807960 <pbuf_copy+0x74>
  80793e:	eb 04                	jmp    807944 <pbuf_copy+0x58>
  807940:	85 ff                	test   %edi,%edi
  807942:	75 1c                	jne    807960 <pbuf_copy+0x74>
  807944:	c7 44 24 08 ac 33 81 	movl   $0x8133ac,0x8(%esp)
  80794b:	00 
  80794c:	c7 44 24 04 b6 02 00 	movl   $0x2b6,0x4(%esp)
  807953:	00 
  807954:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  80795b:	e8 2c 8f ff ff       	call   80088c <_panic>
  807960:	0f b7 47 0a          	movzwl 0xa(%edi),%eax
  807964:	66 89 45 ee          	mov    %ax,0xffffffee(%ebp)
  807968:	0f b7 73 0a          	movzwl 0xa(%ebx),%esi
  80796c:	0f b7 c8             	movzwl %ax,%ecx
  80796f:	0f b7 45 f0          	movzwl 0xfffffff0(%ebp),%eax
  807973:	29 c1                	sub    %eax,%ecx
  807975:	0f b7 c6             	movzwl %si,%eax
  807978:	0f b7 55 f2          	movzwl 0xfffffff2(%ebp),%edx
  80797c:	29 d0                	sub    %edx,%eax
  80797e:	39 c1                	cmp    %eax,%ecx
  807980:	7c 06                	jl     807988 <pbuf_copy+0x9c>
  807982:	66 2b 75 f2          	sub    0xfffffff2(%ebp),%si
  807986:	eb 08                	jmp    807990 <pbuf_copy+0xa4>
  807988:	0f b7 75 ee          	movzwl 0xffffffee(%ebp),%esi
  80798c:	66 2b 75 f0          	sub    0xfffffff0(%ebp),%si
  807990:	0f b7 c6             	movzwl %si,%eax
  807993:	89 44 24 08          	mov    %eax,0x8(%esp)
  807997:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  80799b:	03 43 04             	add    0x4(%ebx),%eax
  80799e:	89 44 24 04          	mov    %eax,0x4(%esp)
  8079a2:	0f b7 45 f0          	movzwl 0xfffffff0(%ebp),%eax
  8079a6:	03 47 04             	add    0x4(%edi),%eax
  8079a9:	89 04 24             	mov    %eax,(%esp)
  8079ac:	e8 b7 98 ff ff       	call   801268 <memcpy>
  8079b1:	66 01 75 f0          	add    %si,0xfffffff0(%ebp)
  8079b5:	0f b7 47 0a          	movzwl 0xa(%edi),%eax
  8079b9:	66 39 45 f0          	cmp    %ax,0xfffffff0(%ebp)
  8079bd:	76 1c                	jbe    8079db <pbuf_copy+0xef>
  8079bf:	c7 44 24 08 b9 33 81 	movl   $0x8133b9,0x8(%esp)
  8079c6:	00 
  8079c7:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
  8079ce:	00 
  8079cf:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  8079d6:	e8 b1 8e ff ff       	call   80088c <_panic>
  8079db:	66 39 45 f0          	cmp    %ax,0xfffffff0(%ebp)
  8079df:	75 08                	jne    8079e9 <pbuf_copy+0xfd>
  8079e1:	8b 3f                	mov    (%edi),%edi
  8079e3:	66 c7 45 f0 00 00    	movw   $0x0,0xfffffff0(%ebp)
  8079e9:	66 01 75 f2          	add    %si,0xfffffff2(%ebp)
  8079ed:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  8079f1:	66 39 45 f2          	cmp    %ax,0xfffffff2(%ebp)
  8079f5:	76 1c                	jbe    807a13 <pbuf_copy+0x127>
  8079f7:	c7 44 24 08 d0 33 81 	movl   $0x8133d0,0x8(%esp)
  8079fe:	00 
  8079ff:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
  807a06:	00 
  807a07:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807a0e:	e8 79 8e ff ff       	call   80088c <_panic>
  807a13:	66 39 45 f2          	cmp    %ax,0xfffffff2(%ebp)
  807a17:	72 08                	jb     807a21 <pbuf_copy+0x135>
  807a19:	8b 1b                	mov    (%ebx),%ebx
  807a1b:	66 c7 45 f2 00 00    	movw   $0x0,0xfffffff2(%ebp)
  807a21:	85 db                	test   %ebx,%ebx
  807a23:	74 2b                	je     807a50 <pbuf_copy+0x164>
  807a25:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  807a29:	66 3b 43 08          	cmp    0x8(%ebx),%ax
  807a2d:	75 21                	jne    807a50 <pbuf_copy+0x164>
  807a2f:	83 3b 00             	cmpl   $0x0,(%ebx)
  807a32:	74 1c                	je     807a50 <pbuf_copy+0x164>
  807a34:	c7 44 24 08 5c 32 81 	movl   $0x81325c,0x8(%esp)
  807a3b:	00 
  807a3c:	c7 44 24 04 d2 02 00 	movl   $0x2d2,0x4(%esp)
  807a43:	00 
  807a44:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807a4b:	e8 3c 8e ff ff       	call   80088c <_panic>
  807a50:	85 ff                	test   %edi,%edi
  807a52:	74 2b                	je     807a7f <pbuf_copy+0x193>
  807a54:	0f b7 47 0a          	movzwl 0xa(%edi),%eax
  807a58:	66 3b 47 08          	cmp    0x8(%edi),%ax
  807a5c:	75 21                	jne    807a7f <pbuf_copy+0x193>
  807a5e:	83 3f 00             	cmpl   $0x0,(%edi)
  807a61:	74 1c                	je     807a7f <pbuf_copy+0x193>
  807a63:	c7 44 24 08 5c 32 81 	movl   $0x81325c,0x8(%esp)
  807a6a:	00 
  807a6b:	c7 44 24 04 d7 02 00 	movl   $0x2d7,0x4(%esp)
  807a72:	00 
  807a73:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807a7a:	e8 0d 8e ff ff       	call   80088c <_panic>
  807a7f:	85 db                	test   %ebx,%ebx
  807a81:	0f 85 b9 fe ff ff    	jne    807940 <pbuf_copy+0x54>
  807a87:	b8 00 00 00 00       	mov    $0x0,%eax
  807a8c:	83 c4 1c             	add    $0x1c,%esp
  807a8f:	5b                   	pop    %ebx
  807a90:	5e                   	pop    %esi
  807a91:	5f                   	pop    %edi
  807a92:	5d                   	pop    %ebp
  807a93:	c3                   	ret    

00807a94 <pbuf_free>:
  807a94:	55                   	push   %ebp
  807a95:	89 e5                	mov    %esp,%ebp
  807a97:	56                   	push   %esi
  807a98:	53                   	push   %ebx
  807a99:	83 ec 10             	sub    $0x10,%esp
  807a9c:	8b 55 08             	mov    0x8(%ebp),%edx
  807a9f:	85 d2                	test   %edx,%edx
  807aa1:	75 1c                	jne    807abf <pbuf_free+0x2b>
  807aa3:	c7 44 24 08 39 34 81 	movl   $0x813439,0x8(%esp)
  807aaa:	00 
  807aab:	c7 44 24 04 d0 01 00 	movl   $0x1d0,0x4(%esp)
  807ab2:	00 
  807ab3:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807aba:	e8 cd 8d ff ff       	call   80088c <_panic>
  807abf:	be 00 00 00 00       	mov    $0x0,%esi
  807ac4:	80 7a 0c 03          	cmpb   $0x3,0xc(%edx)
  807ac8:	76 1c                	jbe    807ae6 <pbuf_free+0x52>
  807aca:	c7 44 24 08 eb 33 81 	movl   $0x8133eb,0x8(%esp)
  807ad1:	00 
  807ad2:	c7 44 24 04 db 01 00 	movl   $0x1db,0x4(%esp)
  807ad9:	00 
  807ada:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807ae1:	e8 a6 8d ff ff       	call   80088c <_panic>
  807ae6:	0f b7 42 0e          	movzwl 0xe(%edx),%eax
  807aea:	66 85 c0             	test   %ax,%ax
  807aed:	75 1c                	jne    807b0b <pbuf_free+0x77>
  807aef:	c7 44 24 08 00 34 81 	movl   $0x813400,0x8(%esp)
  807af6:	00 
  807af7:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
  807afe:	00 
  807aff:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807b06:	e8 81 8d ff ff       	call   80088c <_panic>
  807b0b:	83 e8 01             	sub    $0x1,%eax
  807b0e:	66 89 42 0e          	mov    %ax,0xe(%edx)
  807b12:	66 85 c0             	test   %ax,%ax
  807b15:	75 4c                	jne    807b63 <pbuf_free+0xcf>
  807b17:	8b 1a                	mov    (%edx),%ebx
  807b19:	0f b6 42 0c          	movzbl 0xc(%edx),%eax
  807b1d:	3c 03                	cmp    $0x3,%al
  807b1f:	75 12                	jne    807b33 <pbuf_free+0x9f>
  807b21:	89 54 24 04          	mov    %edx,0x4(%esp)
  807b25:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  807b2c:	e8 eb f7 ff ff       	call   80731c <memp_free>
  807b31:	eb 27                	jmp    807b5a <pbuf_free+0xc6>
  807b33:	66 0f b6 c0          	movzbw %al,%ax
  807b37:	83 e8 01             	sub    $0x1,%eax
  807b3a:	66 83 f8 01          	cmp    $0x1,%ax
  807b3e:	77 12                	ja     807b52 <pbuf_free+0xbe>
  807b40:	89 54 24 04          	mov    %edx,0x4(%esp)
  807b44:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  807b4b:	e8 cc f7 ff ff       	call   80731c <memp_free>
  807b50:	eb 08                	jmp    807b5a <pbuf_free+0xc6>
  807b52:	89 14 24             	mov    %edx,(%esp)
  807b55:	e8 38 f5 ff ff       	call   807092 <mem_free>
  807b5a:	83 c6 01             	add    $0x1,%esi
  807b5d:	89 da                	mov    %ebx,%edx
  807b5f:	85 db                	test   %ebx,%ebx
  807b61:	75 83                	jne    807ae6 <pbuf_free+0x52>
  807b63:	89 f2                	mov    %esi,%edx
  807b65:	0f b6 c2             	movzbl %dl,%eax
  807b68:	83 c4 10             	add    $0x10,%esp
  807b6b:	5b                   	pop    %ebx
  807b6c:	5e                   	pop    %esi
  807b6d:	5d                   	pop    %ebp
  807b6e:	c3                   	ret    

00807b6f <pbuf_dechain>:
  807b6f:	55                   	push   %ebp
  807b70:	89 e5                	mov    %esp,%ebp
  807b72:	83 ec 28             	sub    $0x28,%esp
  807b75:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  807b78:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  807b7b:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  807b7e:	8b 75 08             	mov    0x8(%ebp),%esi
  807b81:	8b 1e                	mov    (%esi),%ebx
  807b83:	ba 01 00 00 00       	mov    $0x1,%edx
  807b88:	85 db                	test   %ebx,%ebx
  807b8a:	74 5c                	je     807be8 <pbuf_dechain+0x79>
  807b8c:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  807b90:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  807b94:	0f b7 7e 0a          	movzwl 0xa(%esi),%edi
  807b98:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  807b9c:	0f b7 55 f2          	movzwl 0xfffffff2(%ebp),%edx
  807ba0:	0f b7 cf             	movzwl %di,%ecx
  807ba3:	29 ca                	sub    %ecx,%edx
  807ba5:	39 d0                	cmp    %edx,%eax
  807ba7:	74 1c                	je     807bc5 <pbuf_dechain+0x56>
  807ba9:	c7 44 24 08 88 32 81 	movl   $0x813288,0x8(%esp)
  807bb0:	00 
  807bb1:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
  807bb8:	00 
  807bb9:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807bc0:	e8 c7 8c ff ff       	call   80088c <_panic>
  807bc5:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  807bc9:	66 29 f8             	sub    %di,%ax
  807bcc:	66 89 43 08          	mov    %ax,0x8(%ebx)
  807bd0:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
  807bd6:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  807bda:	66 89 46 08          	mov    %ax,0x8(%esi)
  807bde:	89 1c 24             	mov    %ebx,(%esp)
  807be1:	e8 ae fe ff ff       	call   807a94 <pbuf_free>
  807be6:	89 c2                	mov    %eax,%edx
  807be8:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  807bec:	66 3b 46 0a          	cmp    0xa(%esi),%ax
  807bf0:	74 1c                	je     807c0e <pbuf_dechain+0x9f>
  807bf2:	c7 44 24 08 16 34 81 	movl   $0x813416,0x8(%esp)
  807bf9:	00 
  807bfa:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
  807c01:	00 
  807c02:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807c09:	e8 7e 8c ff ff       	call   80088c <_panic>
  807c0e:	80 fa 01             	cmp    $0x1,%dl
  807c11:	19 c0                	sbb    %eax,%eax
  807c13:	21 c3                	and    %eax,%ebx
  807c15:	89 d8                	mov    %ebx,%eax
  807c17:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  807c1a:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  807c1d:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  807c20:	89 ec                	mov    %ebp,%esp
  807c22:	5d                   	pop    %ebp
  807c23:	c3                   	ret    

00807c24 <pbuf_realloc>:
  807c24:	55                   	push   %ebp
  807c25:	89 e5                	mov    %esp,%ebp
  807c27:	56                   	push   %esi
  807c28:	53                   	push   %ebx
  807c29:	83 ec 10             	sub    $0x10,%esp
  807c2c:	8b 5d 08             	mov    0x8(%ebp),%ebx
  807c2f:	0f b7 4d 0c          	movzwl 0xc(%ebp),%ecx
  807c33:	85 db                	test   %ebx,%ebx
  807c35:	75 1c                	jne    807c53 <pbuf_realloc+0x2f>
  807c37:	c7 44 24 08 2b 34 81 	movl   $0x81342b,0x8(%esp)
  807c3e:	00 
  807c3f:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
  807c46:	00 
  807c47:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807c4e:	e8 39 8c ff ff       	call   80088c <_panic>
  807c53:	0f b6 43 0c          	movzbl 0xc(%ebx),%eax
  807c57:	3c 03                	cmp    $0x3,%al
  807c59:	74 28                	je     807c83 <pbuf_realloc+0x5f>
  807c5b:	3c 01                	cmp    $0x1,%al
  807c5d:	74 24                	je     807c83 <pbuf_realloc+0x5f>
  807c5f:	84 c0                	test   %al,%al
  807c61:	74 20                	je     807c83 <pbuf_realloc+0x5f>
  807c63:	3c 02                	cmp    $0x2,%al
  807c65:	74 1c                	je     807c83 <pbuf_realloc+0x5f>
  807c67:	c7 44 24 08 43 34 81 	movl   $0x813443,0x8(%esp)
  807c6e:	00 
  807c6f:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
  807c76:	00 
  807c77:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807c7e:	e8 09 8c ff ff       	call   80088c <_panic>
  807c83:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  807c87:	66 39 c8             	cmp    %cx,%ax
  807c8a:	0f 86 c0 00 00 00    	jbe    807d50 <pbuf_realloc+0x12c>
  807c90:	0f b7 d1             	movzwl %cx,%edx
  807c93:	0f b7 c0             	movzwl %ax,%eax
  807c96:	29 c2                	sub    %eax,%edx
  807c98:	89 d0                	mov    %edx,%eax
  807c9a:	89 ce                	mov    %ecx,%esi
  807c9c:	eb 4c                	jmp    807cea <pbuf_realloc+0xc6>
  807c9e:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  807ca3:	7e 1c                	jle    807cc1 <pbuf_realloc+0x9d>
  807ca5:	c7 44 24 08 5e 34 81 	movl   $0x81345e,0x8(%esp)
  807cac:	00 
  807cad:	c7 44 24 04 2b 01 00 	movl   $0x12b,0x4(%esp)
  807cb4:	00 
  807cb5:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807cbc:	e8 cb 8b ff ff       	call   80088c <_panic>
  807cc1:	66 01 43 08          	add    %ax,0x8(%ebx)
  807cc5:	8b 1b                	mov    (%ebx),%ebx
  807cc7:	85 db                	test   %ebx,%ebx
  807cc9:	75 1c                	jne    807ce7 <pbuf_realloc+0xc3>
  807ccb:	c7 44 24 08 6f 34 81 	movl   $0x81346f,0x8(%esp)
  807cd2:	00 
  807cd3:	c7 44 24 04 2f 01 00 	movl   $0x12f,0x4(%esp)
  807cda:	00 
  807cdb:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807ce2:	e8 a5 8b ff ff       	call   80088c <_panic>
  807ce7:	66 29 ce             	sub    %cx,%si
  807cea:	0f b7 4b 0a          	movzwl 0xa(%ebx),%ecx
  807cee:	66 39 ce             	cmp    %cx,%si
  807cf1:	77 ab                	ja     807c9e <pbuf_realloc+0x7a>
  807cf3:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  807cf7:	75 3b                	jne    807d34 <pbuf_realloc+0x110>
  807cf9:	66 39 ce             	cmp    %cx,%si
  807cfc:	74 36                	je     807d34 <pbuf_realloc+0x110>
  807cfe:	0f b7 c6             	movzwl %si,%eax
  807d01:	03 43 04             	add    0x4(%ebx),%eax
  807d04:	29 d8                	sub    %ebx,%eax
  807d06:	89 44 24 04          	mov    %eax,0x4(%esp)
  807d0a:	89 1c 24             	mov    %ebx,(%esp)
  807d0d:	e8 13 f2 ff ff       	call   806f25 <mem_realloc>
  807d12:	89 c3                	mov    %eax,%ebx
  807d14:	85 c0                	test   %eax,%eax
  807d16:	75 1c                	jne    807d34 <pbuf_realloc+0x110>
  807d18:	c7 44 24 08 87 34 81 	movl   $0x813487,0x8(%esp)
  807d1f:	00 
  807d20:	c7 44 24 04 39 01 00 	movl   $0x139,0x4(%esp)
  807d27:	00 
  807d28:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807d2f:	e8 58 8b ff ff       	call   80088c <_panic>
  807d34:	66 89 73 0a          	mov    %si,0xa(%ebx)
  807d38:	66 89 73 08          	mov    %si,0x8(%ebx)
  807d3c:	8b 03                	mov    (%ebx),%eax
  807d3e:	85 c0                	test   %eax,%eax
  807d40:	74 08                	je     807d4a <pbuf_realloc+0x126>
  807d42:	89 04 24             	mov    %eax,(%esp)
  807d45:	e8 4a fd ff ff       	call   807a94 <pbuf_free>
  807d4a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  807d50:	83 c4 10             	add    $0x10,%esp
  807d53:	5b                   	pop    %ebx
  807d54:	5e                   	pop    %esi
  807d55:	5d                   	pop    %ebp
  807d56:	c3                   	ret    

00807d57 <pbuf_alloc>:
  807d57:	55                   	push   %ebp
  807d58:	89 e5                	mov    %esp,%ebp
  807d5a:	57                   	push   %edi
  807d5b:	56                   	push   %esi
  807d5c:	53                   	push   %ebx
  807d5d:	83 ec 1c             	sub    $0x1c,%esp
  807d60:	8b 45 08             	mov    0x8(%ebp),%eax
  807d63:	0f b7 5d 0c          	movzwl 0xc(%ebp),%ebx
  807d67:	83 f8 01             	cmp    $0x1,%eax
  807d6a:	74 26                	je     807d92 <pbuf_alloc+0x3b>
  807d6c:	ba 14 00 00 00       	mov    $0x14,%edx
  807d71:	83 f8 01             	cmp    $0x1,%eax
  807d74:	72 21                	jb     807d97 <pbuf_alloc+0x40>
  807d76:	83 f8 02             	cmp    $0x2,%eax
  807d79:	74 09                	je     807d84 <pbuf_alloc+0x2d>
  807d7b:	83 f8 03             	cmp    $0x3,%eax
  807d7e:	66 90                	xchg   %ax,%ax
  807d80:	75 20                	jne    807da2 <pbuf_alloc+0x4b>
  807d82:	eb 3a                	jmp    807dbe <pbuf_alloc+0x67>
  807d84:	b8 00 00 00 00       	mov    $0x0,%eax
  807d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  807d90:	eb 08                	jmp    807d9a <pbuf_alloc+0x43>
  807d92:	ba 00 00 00 00       	mov    $0x0,%edx
  807d97:	8d 42 14             	lea    0x14(%edx),%eax
  807d9a:	8d 78 0e             	lea    0xe(%eax),%edi
  807d9d:	8d 76 00             	lea    0x0(%esi),%esi
  807da0:	eb 21                	jmp    807dc3 <pbuf_alloc+0x6c>
  807da2:	c7 44 24 08 a2 34 81 	movl   $0x8134a2,0x8(%esp)
  807da9:	00 
  807daa:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
  807db1:	00 
  807db2:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807db9:	e8 ce 8a ff ff       	call   80088c <_panic>
  807dbe:	bf 00 00 00 00       	mov    $0x0,%edi
  807dc3:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
  807dc7:	77 0f                	ja     807dd8 <pbuf_alloc+0x81>
  807dc9:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
  807dcd:	0f 83 e0 01 00 00    	jae    807fb3 <pbuf_alloc+0x25c>
  807dd3:	e9 77 01 00 00       	jmp    807f4f <pbuf_alloc+0x1f8>
  807dd8:	83 7d 10 03          	cmpl   $0x3,0x10(%ebp)
  807ddc:	8d 74 26 00          	lea    0x0(%esi),%esi
  807de0:	0f 85 fd 01 00 00    	jne    807fe3 <pbuf_alloc+0x28c>
  807de6:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  807ded:	8d 76 00             	lea    0x0(%esi),%esi
  807df0:	e8 6a f5 ff ff       	call   80735f <memp_malloc>
  807df5:	85 c0                	test   %eax,%eax
  807df7:	0f 84 1d 02 00 00    	je     80801a <pbuf_alloc+0x2c3>
  807dfd:	89 c6                	mov    %eax,%esi
  807dff:	c6 40 0c 03          	movb   $0x3,0xc(%eax)
  807e03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  807e09:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  807e0c:	0f b7 c7             	movzwl %di,%eax
  807e0f:	8d 44 06 13          	lea    0x13(%esi,%eax,1),%eax
  807e13:	83 e0 fc             	and    $0xfffffffc,%eax
  807e16:	89 46 04             	mov    %eax,0x4(%esi)
  807e19:	66 89 5e 08          	mov    %bx,0x8(%esi)
  807e1d:	0f b7 cb             	movzwl %bx,%ecx
  807e20:	0f b7 c7             	movzwl %di,%eax
  807e23:	83 c0 03             	add    $0x3,%eax
  807e26:	83 e0 fc             	and    $0xfffffffc,%eax
  807e29:	ba d0 07 00 00       	mov    $0x7d0,%edx
  807e2e:	29 c2                	sub    %eax,%edx
  807e30:	89 d0                	mov    %edx,%eax
  807e32:	39 ca                	cmp    %ecx,%edx
  807e34:	7e 02                	jle    807e38 <pbuf_alloc+0xe1>
  807e36:	89 c8                	mov    %ecx,%eax
  807e38:	66 89 46 0a          	mov    %ax,0xa(%esi)
  807e3c:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  807e3f:	81 c2 e0 07 00 00    	add    $0x7e0,%edx
  807e45:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  807e48:	0f b7 c0             	movzwl %ax,%eax
  807e4b:	03 46 04             	add    0x4(%esi),%eax
  807e4e:	39 d0                	cmp    %edx,%eax
  807e50:	76 1c                	jbe    807e6e <pbuf_alloc+0x117>
  807e52:	c7 44 24 08 dc 32 81 	movl   $0x8132dc,0x8(%esp)
  807e59:	00 
  807e5a:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
  807e61:	00 
  807e62:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807e69:	e8 1e 8a ff ff       	call   80088c <_panic>
  807e6e:	66 c7 46 0e 01 00    	movw   $0x1,0xe(%esi)
  807e74:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  807e78:	89 cb                	mov    %ecx,%ebx
  807e7a:	29 c3                	sub    %eax,%ebx
  807e7c:	85 db                	test   %ebx,%ebx
  807e7e:	0f 8e 7b 01 00 00    	jle    807fff <pbuf_alloc+0x2a8>
  807e84:	89 f7                	mov    %esi,%edi
  807e86:	c7 04 24 0d 00 00 00 	movl   $0xd,(%esp)
  807e8d:	e8 cd f4 ff ff       	call   80735f <memp_malloc>
  807e92:	85 c0                	test   %eax,%eax
  807e94:	0f 84 71 01 00 00    	je     80800b <pbuf_alloc+0x2b4>
  807e9a:	89 c2                	mov    %eax,%edx
  807e9c:	c6 40 0c 03          	movb   $0x3,0xc(%eax)
  807ea0:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
  807ea4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  807eaa:	89 07                	mov    %eax,(%edi)
  807eac:	81 fb fe ff 00 00    	cmp    $0xfffe,%ebx
  807eb2:	7e 1c                	jle    807ed0 <pbuf_alloc+0x179>
  807eb4:	c7 44 24 08 bd 34 81 	movl   $0x8134bd,0x8(%esp)
  807ebb:	00 
  807ebc:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  807ec3:	00 
  807ec4:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807ecb:	e8 bc 89 ff ff       	call   80088c <_panic>
  807ed0:	66 89 58 08          	mov    %bx,0x8(%eax)
  807ed4:	89 d8                	mov    %ebx,%eax
  807ed6:	66 81 fb d0 07       	cmp    $0x7d0,%bx
  807edb:	76 05                	jbe    807ee2 <pbuf_alloc+0x18b>
  807edd:	b8 d0 07 00 00       	mov    $0x7d0,%eax
  807ee2:	66 89 42 0a          	mov    %ax,0xa(%edx)
  807ee6:	8d 42 10             	lea    0x10(%edx),%eax
  807ee9:	89 42 04             	mov    %eax,0x4(%edx)
  807eec:	a8 03                	test   $0x3,%al
  807eee:	74 1c                	je     807f0c <pbuf_alloc+0x1b5>
  807ef0:	c7 44 24 08 10 33 81 	movl   $0x813310,0x8(%esp)
  807ef7:	00 
  807ef8:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  807eff:	00 
  807f00:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807f07:	e8 80 89 ff ff       	call   80088c <_panic>
  807f0c:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  807f10:	03 46 04             	add    0x4(%esi),%eax
  807f13:	39 45 ec             	cmp    %eax,0xffffffec(%ebp)
  807f16:	73 1c                	jae    807f34 <pbuf_alloc+0x1dd>
  807f18:	c7 44 24 08 dc 32 81 	movl   $0x8132dc,0x8(%esp)
  807f1f:	00 
  807f20:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
  807f27:	00 
  807f28:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807f2f:	e8 58 89 ff ff       	call   80088c <_panic>
  807f34:	66 c7 42 0e 01 00    	movw   $0x1,0xe(%edx)
  807f3a:	0f b7 42 0a          	movzwl 0xa(%edx),%eax
  807f3e:	29 c3                	sub    %eax,%ebx
  807f40:	89 d7                	mov    %edx,%edi
  807f42:	85 db                	test   %ebx,%ebx
  807f44:	0f 8e b5 00 00 00    	jle    807fff <pbuf_alloc+0x2a8>
  807f4a:	e9 37 ff ff ff       	jmp    807e86 <pbuf_alloc+0x12f>
  807f4f:	0f b7 ff             	movzwl %di,%edi
  807f52:	8d 57 13             	lea    0x13(%edi),%edx
  807f55:	83 e2 fc             	and    $0xfffffffc,%edx
  807f58:	0f b7 c3             	movzwl %bx,%eax
  807f5b:	83 c0 03             	add    $0x3,%eax
  807f5e:	83 e0 fc             	and    $0xfffffffc,%eax
  807f61:	01 c2                	add    %eax,%edx
  807f63:	89 14 24             	mov    %edx,(%esp)
  807f66:	e8 85 ed ff ff       	call   806cf0 <mem_malloc>
  807f6b:	85 c0                	test   %eax,%eax
  807f6d:	0f 84 a7 00 00 00    	je     80801a <pbuf_alloc+0x2c3>
  807f73:	89 c6                	mov    %eax,%esi
  807f75:	8d 44 38 13          	lea    0x13(%eax,%edi,1),%eax
  807f79:	83 e0 fc             	and    $0xfffffffc,%eax
  807f7c:	89 46 04             	mov    %eax,0x4(%esi)
  807f7f:	66 89 5e 08          	mov    %bx,0x8(%esi)
  807f83:	66 89 5e 0a          	mov    %bx,0xa(%esi)
  807f87:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
  807f8d:	c6 46 0c 00          	movb   $0x0,0xc(%esi)
  807f91:	f6 46 04 03          	testb  $0x3,0x4(%esi)
  807f95:	74 68                	je     807fff <pbuf_alloc+0x2a8>
  807f97:	c7 44 24 08 40 33 81 	movl   $0x813340,0x8(%esp)
  807f9e:	00 
  807f9f:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
  807fa6:	00 
  807fa7:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807fae:	e8 d9 88 ff ff       	call   80088c <_panic>
  807fb3:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  807fba:	e8 a0 f3 ff ff       	call   80735f <memp_malloc>
  807fbf:	85 c0                	test   %eax,%eax
  807fc1:	74 57                	je     80801a <pbuf_alloc+0x2c3>
  807fc3:	89 c6                	mov    %eax,%esi
  807fc5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  807fcc:	66 89 58 08          	mov    %bx,0x8(%eax)
  807fd0:	66 89 58 0a          	mov    %bx,0xa(%eax)
  807fd4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  807fda:	0f b6 45 10          	movzbl 0x10(%ebp),%eax
  807fde:	88 46 0c             	mov    %al,0xc(%esi)
  807fe1:	eb 1c                	jmp    807fff <pbuf_alloc+0x2a8>
  807fe3:	c7 44 24 08 d1 34 81 	movl   $0x8134d1,0x8(%esp)
  807fea:	00 
  807feb:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
  807ff2:	00 
  807ff3:	c7 04 24 6b 33 81 00 	movl   $0x81336b,(%esp)
  807ffa:	e8 8d 88 ff ff       	call   80088c <_panic>
  807fff:	66 c7 46 0e 01 00    	movw   $0x1,0xe(%esi)
  808005:	c6 46 0d 00          	movb   $0x0,0xd(%esi)
  808009:	eb 14                	jmp    80801f <pbuf_alloc+0x2c8>
  80800b:	89 34 24             	mov    %esi,(%esp)
  80800e:	e8 81 fa ff ff       	call   807a94 <pbuf_free>
  808013:	be 00 00 00 00       	mov    $0x0,%esi
  808018:	eb 05                	jmp    80801f <pbuf_alloc+0x2c8>
  80801a:	be 00 00 00 00       	mov    $0x0,%esi
  80801f:	89 f0                	mov    %esi,%eax
  808021:	83 c4 1c             	add    $0x1c,%esp
  808024:	5b                   	pop    %ebx
  808025:	5e                   	pop    %esi
  808026:	5f                   	pop    %edi
  808027:	5d                   	pop    %ebp
  808028:	c3                   	ret    
  808029:	00 00                	add    %al,(%eax)
  80802b:	00 00                	add    %al,(%eax)
  80802d:	00 00                	add    %al,(%eax)
	...

00808030 <sswt_handler>:
 * @param arg struct sswt_cb* used to signal a semaphore and end waiting.
 */
static void
sswt_handler(void *arg)
{
  808030:	55                   	push   %ebp
  808031:	89 e5                	mov    %esp,%ebp
  808033:	83 ec 08             	sub    $0x8,%esp
  808036:	8b 45 08             	mov    0x8(%ebp),%eax
  struct sswt_cb *sswt_cb = (struct sswt_cb *) arg;

  /* Timeout. Set flag to TRUE and signal semaphore */
  sswt_cb->timeflag = 1;
  808039:	66 c7 00 01 00       	movw   $0x1,(%eax)
  sys_sem_signal(*(sswt_cb->psem));
  80803e:	8b 40 04             	mov    0x4(%eax),%eax
  808041:	8b 00                	mov    (%eax),%eax
  808043:	89 04 24             	mov    %eax,(%esp)
  808046:	e8 67 57 00 00       	call   80d7b2 <sys_sem_signal>
}
  80804b:	c9                   	leave  
  80804c:	c3                   	ret    

0080804d <sys_untimeout>:
  80804d:	55                   	push   %ebp
  80804e:	89 e5                	mov    %esp,%ebp
  808050:	57                   	push   %edi
  808051:	56                   	push   %esi
  808052:	53                   	push   %ebx
  808053:	83 ec 0c             	sub    $0xc,%esp
  808056:	8b 75 08             	mov    0x8(%ebp),%esi
  808059:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80805c:	e8 23 52 00 00       	call   80d284 <sys_arch_timeouts>
  808061:	89 c3                	mov    %eax,%ebx
  808063:	85 c0                	test   %eax,%eax
  808065:	75 1c                	jne    808083 <sys_untimeout+0x36>
  808067:	c7 44 24 08 ec 34 81 	movl   $0x8134ec,0x8(%esp)
  80806e:	00 
  80806f:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
  808076:	00 
  808077:	c7 04 24 0c 35 81 00 	movl   $0x81350c,(%esp)
  80807e:	e8 09 88 ff ff       	call   80088c <_panic>
  808083:	8b 10                	mov    (%eax),%edx
  808085:	85 d2                	test   %edx,%edx
  808087:	74 49                	je     8080d2 <sys_untimeout+0x85>
  808089:	b9 00 00 00 00       	mov    $0x0,%ecx
  80808e:	39 72 08             	cmp    %esi,0x8(%edx)
  808091:	75 31                	jne    8080c4 <sys_untimeout+0x77>
  808093:	39 7a 0c             	cmp    %edi,0xc(%edx)
  808096:	75 2c                	jne    8080c4 <sys_untimeout+0x77>
  808098:	85 c9                	test   %ecx,%ecx
  80809a:	75 06                	jne    8080a2 <sys_untimeout+0x55>
  80809c:	8b 02                	mov    (%edx),%eax
  80809e:	89 03                	mov    %eax,(%ebx)
  8080a0:	eb 04                	jmp    8080a6 <sys_untimeout+0x59>
  8080a2:	8b 02                	mov    (%edx),%eax
  8080a4:	89 01                	mov    %eax,(%ecx)
  8080a6:	8b 0a                	mov    (%edx),%ecx
  8080a8:	85 c9                	test   %ecx,%ecx
  8080aa:	74 06                	je     8080b2 <sys_untimeout+0x65>
  8080ac:	8b 42 04             	mov    0x4(%edx),%eax
  8080af:	01 41 04             	add    %eax,0x4(%ecx)
  8080b2:	89 54 24 04          	mov    %edx,0x4(%esp)
  8080b6:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8080bd:	e8 5a f2 ff ff       	call   80731c <memp_free>
  8080c2:	eb 0e                	jmp    8080d2 <sys_untimeout+0x85>
  8080c4:	8b 02                	mov    (%edx),%eax
  8080c6:	89 d1                	mov    %edx,%ecx
  8080c8:	85 c0                	test   %eax,%eax
  8080ca:	74 06                	je     8080d2 <sys_untimeout+0x85>
  8080cc:	89 c2                	mov    %eax,%edx
  8080ce:	66 90                	xchg   %ax,%ax
  8080d0:	eb bc                	jmp    80808e <sys_untimeout+0x41>
  8080d2:	83 c4 0c             	add    $0xc,%esp
  8080d5:	5b                   	pop    %ebx
  8080d6:	5e                   	pop    %esi
  8080d7:	5f                   	pop    %edi
  8080d8:	5d                   	pop    %ebp
  8080d9:	c3                   	ret    

008080da <sys_timeout>:
  8080da:	55                   	push   %ebp
  8080db:	89 e5                	mov    %esp,%ebp
  8080dd:	56                   	push   %esi
  8080de:	53                   	push   %ebx
  8080df:	83 ec 10             	sub    $0x10,%esp
  8080e2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8080e5:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8080ec:	e8 6e f2 ff ff       	call   80735f <memp_malloc>
  8080f1:	85 c0                	test   %eax,%eax
  8080f3:	75 1c                	jne    808111 <sys_timeout+0x37>
  8080f5:	c7 44 24 08 20 35 81 	movl   $0x813520,0x8(%esp)
  8080fc:	00 
  8080fd:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
  808104:	00 
  808105:	c7 04 24 0c 35 81 00 	movl   $0x81350c,(%esp)
  80810c:	e8 7b 87 ff ff       	call   80088c <_panic>
  808111:	89 c6                	mov    %eax,%esi
  808113:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  808119:	8b 45 0c             	mov    0xc(%ebp),%eax
  80811c:	89 46 08             	mov    %eax,0x8(%esi)
  80811f:	8b 45 10             	mov    0x10(%ebp),%eax
  808122:	89 46 0c             	mov    %eax,0xc(%esi)
  808125:	89 5e 04             	mov    %ebx,0x4(%esi)
  808128:	e8 57 51 00 00       	call   80d284 <sys_arch_timeouts>
  80812d:	89 c2                	mov    %eax,%edx
  80812f:	85 c0                	test   %eax,%eax
  808131:	75 1c                	jne    80814f <sys_timeout+0x75>
  808133:	c7 44 24 08 3d 35 81 	movl   $0x81353d,0x8(%esp)
  80813a:	00 
  80813b:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
  808142:	00 
  808143:	c7 04 24 0c 35 81 00 	movl   $0x81350c,(%esp)
  80814a:	e8 3d 87 ff ff       	call   80088c <_panic>
  80814f:	8b 08                	mov    (%eax),%ecx
  808151:	85 c9                	test   %ecx,%ecx
  808153:	75 04                	jne    808159 <sys_timeout+0x7f>
  808155:	89 30                	mov    %esi,(%eax)
  808157:	eb 3b                	jmp    808194 <sys_timeout+0xba>
  808159:	8b 41 04             	mov    0x4(%ecx),%eax
  80815c:	39 c3                	cmp    %eax,%ebx
  80815e:	73 23                	jae    808183 <sys_timeout+0xa9>
  808160:	29 d8                	sub    %ebx,%eax
  808162:	89 41 04             	mov    %eax,0x4(%ecx)
  808165:	8b 02                	mov    (%edx),%eax
  808167:	89 06                	mov    %eax,(%esi)
  808169:	89 32                	mov    %esi,(%edx)
  80816b:	eb 27                	jmp    808194 <sys_timeout+0xba>
  80816d:	8b 5a 04             	mov    0x4(%edx),%ebx
  808170:	39 d8                	cmp    %ebx,%eax
  808172:	73 0d                	jae    808181 <sys_timeout+0xa7>
  808174:	29 c3                	sub    %eax,%ebx
  808176:	89 5a 04             	mov    %ebx,0x4(%edx)
  808179:	8b 01                	mov    (%ecx),%eax
  80817b:	89 06                	mov    %eax,(%esi)
  80817d:	89 31                	mov    %esi,(%ecx)
  80817f:	eb 13                	jmp    808194 <sys_timeout+0xba>
  808181:	89 d1                	mov    %edx,%ecx
  808183:	8b 46 04             	mov    0x4(%esi),%eax
  808186:	2b 41 04             	sub    0x4(%ecx),%eax
  808189:	89 46 04             	mov    %eax,0x4(%esi)
  80818c:	8b 11                	mov    (%ecx),%edx
  80818e:	85 d2                	test   %edx,%edx
  808190:	75 db                	jne    80816d <sys_timeout+0x93>
  808192:	eb e5                	jmp    808179 <sys_timeout+0x9f>
  808194:	83 c4 10             	add    $0x10,%esp
  808197:	5b                   	pop    %ebx
  808198:	5e                   	pop    %esi
  808199:	5d                   	pop    %ebp
  80819a:	c3                   	ret    

0080819b <sys_sem_wait>:
  80819b:	55                   	push   %ebp
  80819c:	89 e5                	mov    %esp,%ebp
  80819e:	57                   	push   %edi
  80819f:	56                   	push   %esi
  8081a0:	53                   	push   %ebx
  8081a1:	83 ec 0c             	sub    $0xc,%esp
  8081a4:	8b 7d 08             	mov    0x8(%ebp),%edi
  8081a7:	e8 d8 50 00 00       	call   80d284 <sys_arch_timeouts>
  8081ac:	89 c3                	mov    %eax,%ebx
  8081ae:	85 c0                	test   %eax,%eax
  8081b0:	74 06                	je     8081b8 <sys_sem_wait+0x1d>
  8081b2:	8b 00                	mov    (%eax),%eax
  8081b4:	85 c0                	test   %eax,%eax
  8081b6:	75 12                	jne    8081ca <sys_sem_wait+0x2f>
  8081b8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8081bf:	00 
  8081c0:	89 3c 24             	mov    %edi,(%esp)
  8081c3:	e8 07 53 00 00       	call   80d4cf <sys_arch_sem_wait>
  8081c8:	eb 56                	jmp    808220 <sys_sem_wait+0x85>
  8081ca:	8b 40 04             	mov    0x4(%eax),%eax
  8081cd:	85 c0                	test   %eax,%eax
  8081cf:	74 11                	je     8081e2 <sys_sem_wait+0x47>
  8081d1:	89 44 24 04          	mov    %eax,0x4(%esp)
  8081d5:	89 3c 24             	mov    %edi,(%esp)
  8081d8:	e8 f2 52 00 00       	call   80d4cf <sys_arch_sem_wait>
  8081dd:	83 f8 ff             	cmp    $0xffffffff,%eax
  8081e0:	75 27                	jne    808209 <sys_sem_wait+0x6e>
  8081e2:	8b 03                	mov    (%ebx),%eax
  8081e4:	8b 10                	mov    (%eax),%edx
  8081e6:	89 13                	mov    %edx,(%ebx)
  8081e8:	8b 58 08             	mov    0x8(%eax),%ebx
  8081eb:	8b 70 0c             	mov    0xc(%eax),%esi
  8081ee:	89 44 24 04          	mov    %eax,0x4(%esp)
  8081f2:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  8081f9:	e8 1e f1 ff ff       	call   80731c <memp_free>
  8081fe:	85 db                	test   %ebx,%ebx
  808200:	74 a5                	je     8081a7 <sys_sem_wait+0xc>
  808202:	89 34 24             	mov    %esi,(%esp)
  808205:	ff d3                	call   *%ebx
  808207:	eb 9e                	jmp    8081a7 <sys_sem_wait+0xc>
  808209:	8b 13                	mov    (%ebx),%edx
  80820b:	8b 4a 04             	mov    0x4(%edx),%ecx
  80820e:	39 c1                	cmp    %eax,%ecx
  808210:	76 07                	jbe    808219 <sys_sem_wait+0x7e>
  808212:	29 c1                	sub    %eax,%ecx
  808214:	89 4a 04             	mov    %ecx,0x4(%edx)
  808217:	eb 07                	jmp    808220 <sys_sem_wait+0x85>
  808219:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
  808220:	83 c4 0c             	add    $0xc,%esp
  808223:	5b                   	pop    %ebx
  808224:	5e                   	pop    %esi
  808225:	5f                   	pop    %edi
  808226:	5d                   	pop    %ebp
  808227:	c3                   	ret    

00808228 <sys_sem_wait_timeout>:

/**
 * Wait for a semaphore with timeout (specified in ms)
 *
 * @param sem semaphore to wait
 * @param timeout timeout in ms (0: wait forever)
 * @return 0 on timeout, 1 otherwise
 */
int
sys_sem_wait_timeout(sys_sem_t sem, u32_t timeout)
{
  808228:	55                   	push   %ebp
  808229:	89 e5                	mov    %esp,%ebp
  80822b:	83 ec 28             	sub    $0x28,%esp
  80822e:	8b 55 0c             	mov    0xc(%ebp),%edx
  struct sswt_cb sswt_cb;

  sswt_cb.psem = &sem;
  808231:	8d 45 08             	lea    0x8(%ebp),%eax
  808234:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
  sswt_cb.timeflag = 0;
  808237:	66 c7 45 f8 00 00    	movw   $0x0,0xfffffff8(%ebp)

  /* If timeout is zero, then just wait forever */
  if (timeout > 0) {
  80823d:	85 d2                	test   %edx,%edx
  80823f:	74 17                	je     808258 <sys_sem_wait_timeout+0x30>
    /* Create a timer and pass it the address of our flag */
    sys_timeout(timeout, sswt_handler, &sswt_cb);
  808241:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  808244:	89 44 24 08          	mov    %eax,0x8(%esp)
  808248:	c7 44 24 04 30 80 80 	movl   $0x808030,0x4(%esp)
  80824f:	00 
  808250:	89 14 24             	mov    %edx,(%esp)
  808253:	e8 82 fe ff ff       	call   8080da <sys_timeout>
  }
  sys_sem_wait(sem);
  808258:	8b 45 08             	mov    0x8(%ebp),%eax
  80825b:	89 04 24             	mov    %eax,(%esp)
  80825e:	e8 38 ff ff ff       	call   80819b <sys_sem_wait>
  /* Was it a timeout? */
  if (sswt_cb.timeflag) {
  808263:	b8 00 00 00 00       	mov    $0x0,%eax
  808268:	66 83 7d f8 00       	cmpw   $0x0,0xfffffff8(%ebp)
  80826d:	75 18                	jne    808287 <sys_sem_wait_timeout+0x5f>
    /* timeout */
    return 0;
  } else {
    /* Not a timeout. Remove timeout entry */
    sys_untimeout(sswt_handler, &sswt_cb);
  80826f:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  808272:	89 44 24 04          	mov    %eax,0x4(%esp)
  808276:	c7 04 24 30 80 80 00 	movl   $0x808030,(%esp)
  80827d:	e8 cb fd ff ff       	call   80804d <sys_untimeout>
  808282:	b8 01 00 00 00       	mov    $0x1,%eax
    return 1;
  }
}
  808287:	c9                   	leave  
  808288:	c3                   	ret    

00808289 <sys_msleep>:

/**
 * Sleep for some ms. Timeouts are processed while sleeping.
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  808289:	55                   	push   %ebp
  80828a:	89 e5                	mov    %esp,%ebp
  80828c:	53                   	push   %ebx
  80828d:	83 ec 14             	sub    $0x14,%esp
  sys_sem_t delaysem = sys_sem_new(0);
  808290:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  808297:	e8 71 53 00 00       	call   80d60d <sys_sem_new>
  80829c:	89 c3                	mov    %eax,%ebx

  sys_sem_wait_timeout(delaysem, ms);
  80829e:	8b 45 08             	mov    0x8(%ebp),%eax
  8082a1:	89 44 24 04          	mov    %eax,0x4(%esp)
  8082a5:	89 1c 24             	mov    %ebx,(%esp)
  8082a8:	e8 7b ff ff ff       	call   808228 <sys_sem_wait_timeout>

  sys_sem_free(delaysem);
  8082ad:	89 1c 24             	mov    %ebx,(%esp)
  8082b0:	e8 ab 4e 00 00       	call   80d160 <sys_sem_free>
}
  8082b5:	83 c4 14             	add    $0x14,%esp
  8082b8:	5b                   	pop    %ebx
  8082b9:	5d                   	pop    %ebp
  8082ba:	c3                   	ret    

008082bb <sys_mbox_fetch>:
  8082bb:	55                   	push   %ebp
  8082bc:	89 e5                	mov    %esp,%ebp
  8082be:	57                   	push   %edi
  8082bf:	56                   	push   %esi
  8082c0:	53                   	push   %ebx
  8082c1:	83 ec 0c             	sub    $0xc,%esp
  8082c4:	8b 7d 0c             	mov    0xc(%ebp),%edi
  8082c7:	e8 b8 4f 00 00       	call   80d284 <sys_arch_timeouts>
  8082cc:	89 c3                	mov    %eax,%ebx
  8082ce:	85 c0                	test   %eax,%eax
  8082d0:	74 06                	je     8082d8 <sys_mbox_fetch+0x1d>
  8082d2:	8b 00                	mov    (%eax),%eax
  8082d4:	85 c0                	test   %eax,%eax
  8082d6:	75 19                	jne    8082f1 <sys_mbox_fetch+0x36>
  8082d8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8082df:	00 
  8082e0:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8082e4:	8b 45 08             	mov    0x8(%ebp),%eax
  8082e7:	89 04 24             	mov    %eax,(%esp)
  8082ea:	e8 2d 55 00 00       	call   80d81c <sys_arch_mbox_fetch>
  8082ef:	eb 5f                	jmp    808350 <sys_mbox_fetch+0x95>
  8082f1:	8b 40 04             	mov    0x4(%eax),%eax
  8082f4:	85 c0                	test   %eax,%eax
  8082f6:	74 18                	je     808310 <sys_mbox_fetch+0x55>
  8082f8:	89 44 24 08          	mov    %eax,0x8(%esp)
  8082fc:	89 7c 24 04          	mov    %edi,0x4(%esp)
  808300:	8b 45 08             	mov    0x8(%ebp),%eax
  808303:	89 04 24             	mov    %eax,(%esp)
  808306:	e8 11 55 00 00       	call   80d81c <sys_arch_mbox_fetch>
  80830b:	83 f8 ff             	cmp    $0xffffffff,%eax
  80830e:	75 27                	jne    808337 <sys_mbox_fetch+0x7c>
  808310:	8b 03                	mov    (%ebx),%eax
  808312:	8b 10                	mov    (%eax),%edx
  808314:	89 13                	mov    %edx,(%ebx)
  808316:	8b 58 08             	mov    0x8(%eax),%ebx
  808319:	8b 70 0c             	mov    0xc(%eax),%esi
  80831c:	89 44 24 04          	mov    %eax,0x4(%esp)
  808320:	c7 04 24 0b 00 00 00 	movl   $0xb,(%esp)
  808327:	e8 f0 ef ff ff       	call   80731c <memp_free>
  80832c:	85 db                	test   %ebx,%ebx
  80832e:	74 97                	je     8082c7 <sys_mbox_fetch+0xc>
  808330:	89 34 24             	mov    %esi,(%esp)
  808333:	ff d3                	call   *%ebx
  808335:	eb 90                	jmp    8082c7 <sys_mbox_fetch+0xc>
  808337:	8b 13                	mov    (%ebx),%edx
  808339:	8b 4a 04             	mov    0x4(%edx),%ecx
  80833c:	39 c1                	cmp    %eax,%ecx
  80833e:	66 90                	xchg   %ax,%ax
  808340:	76 07                	jbe    808349 <sys_mbox_fetch+0x8e>
  808342:	29 c1                	sub    %eax,%ecx
  808344:	89 4a 04             	mov    %ecx,0x4(%edx)
  808347:	eb 07                	jmp    808350 <sys_mbox_fetch+0x95>
  808349:	c7 42 04 00 00 00 00 	movl   $0x0,0x4(%edx)
  808350:	83 c4 0c             	add    $0xc,%esp
  808353:	5b                   	pop    %ebx
  808354:	5e                   	pop    %esi
  808355:	5f                   	pop    %edi
  808356:	5d                   	pop    %ebp
  808357:	c3                   	ret    
	...

00808360 <tcp_accept_null>:
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  808360:	55                   	push   %ebp
  808361:	89 e5                	mov    %esp,%ebp
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
}
  808363:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  808368:	5d                   	pop    %ebp
  808369:	c3                   	ret    

0080836a <tcp_new_port>:
#endif /* LWIP_CALLBACK_API */

/**
 * Set the state of the connection to be LISTEN, which means that it
 * is able to accept incoming connections. The protocol control block
 * is reallocated in order to consume less memory. Setting the
 * connection to LISTEN is an irreversible process.
 *
 * @param pcb the original tcp_pcb
 * @param backlog the incoming connections queue limit
 * @return tcp_pcb used for listening, consumes less memory.
 *
 * @note The original tcp_pcb is freed. This function therefore has to be
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);

  /* already listening? */
  if (pcb->state == LISTEN) {
    return pcb;
  }
  lpcb = memp_malloc(MEMP_TCP_PCB_LISTEN);
  if (lpcb == NULL) {
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
  lpcb->local_port = pcb->local_port;
  lpcb->state = LISTEN;
  lpcb->so_options = pcb->so_options;
  lpcb->so_options |= SOF_ACCEPTCONN;
  lpcb->ttl = pcb->ttl;
  lpcb->tos = pcb->tos;
  ip_addr_set(&lpcb->local_ip, &pcb->local_ip);
  TCP_RMV(&tcp_bound_pcbs, pcb);
  memp_free(MEMP_TCP_PCB, pcb);
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.listen_pcbs, lpcb);
  return (struct tcp_pcb *)lpcb;
}

/**
 * This function should be called by the application when it has
 * processed the data. The purpose is to advertise a larger window
 * when the data has been processed.
 *
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  if ((u32_t)pcb->rcv_wnd + len > TCP_WND) {
    pcb->rcv_wnd = TCP_WND;
    pcb->rcv_ann_wnd = TCP_WND;
  } else {
    pcb->rcv_wnd += len;
    if (pcb->rcv_wnd >= pcb->mss) {
      pcb->rcv_ann_wnd = pcb->rcv_wnd;
    }
  }

  if (!(pcb->flags & TF_ACK_DELAY) &&
     !(pcb->flags & TF_ACK_NOW)) {
    /*
     * We send an ACK here (if one is not already pending, hence
     * the above tests) as tcp_recved() implies that the application
     * has processed some data, and so we can open the receiver's
     * window to allow more to be transmitted.  This could result in
     * two ACKs being sent for each received packet in some limited cases
     * (where the application is only receiving data, and is slow to
     * process it) but it is necessary to guarantee that the sender can
     * continue to transmit.
     */
    tcp_ack(pcb);
  } 
  else if (pcb->flags & TF_ACK_DELAY && pcb->rcv_wnd >= TCP_WND/2) {
    /* If we can send a window update such that there is a full
     * segment available in the window, do so now.  This is sort of
     * nagle-like in its goals, and tries to hit a compromise between
     * sending acks each time the window is updated, and only sending
     * window updates when a timer expires.  The "threshold" used
     * above (currently TCP_WND/2) can be tuned to be more or less
     * aggressive  */
    tcp_ack_now(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}

/**
 * A nastly hack featuring 'goto' statements that allocates a
 * new TCP local port.
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  80836a:	55                   	push   %ebp
  80836b:	89 e5                	mov    %esp,%ebp
  80836d:	56                   	push   %esi
  80836e:	53                   	push   %ebx
  struct tcp_pcb *pcb;
#ifndef TCP_LOCAL_PORT_RANGE_START
#define TCP_LOCAL_PORT_RANGE_START 4096
#define TCP_LOCAL_PORT_RANGE_END   0x7fff
#endif
  static u16_t port = TCP_LOCAL_PORT_RANGE_START;
  
 again:
  if (++port > TCP_LOCAL_PORT_RANGE_END) {
    port = TCP_LOCAL_PORT_RANGE_START;
  }
  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  80836f:	8b 0d c8 e5 b3 00    	mov    0xb3e5c8,%ecx
  808375:	0f b7 15 48 80 81 00 	movzwl 0x818048,%edx
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  80837c:	8b 1d dc e5 b3 00    	mov    0xb3e5dc,%ebx
    if (pcb->local_port == port) {
      goto again;
    }
  }
  for(pcb = (struct tcp_pcb *)tcp_listen_pcbs.pcbs; pcb != NULL; pcb = pcb->next) {
  808382:	8b 35 d0 e5 b3 00    	mov    0xb3e5d0,%esi
  808388:	66 83 c2 01          	add    $0x1,%dx
  80838c:	79 05                	jns    808393 <tcp_new_port+0x29>
  80838e:	ba 00 10 00 00       	mov    $0x1000,%edx
  808393:	85 c9                	test   %ecx,%ecx
  808395:	74 1b                	je     8083b2 <tcp_new_port+0x48>
  808397:	89 c8                	mov    %ecx,%eax
  808399:	66 3b 51 1c          	cmp    0x1c(%ecx),%dx
  80839d:	75 09                	jne    8083a8 <tcp_new_port+0x3e>
  80839f:	90                   	nop    
  8083a0:	eb e6                	jmp    808388 <tcp_new_port+0x1e>
  8083a2:	66 3b 50 1c          	cmp    0x1c(%eax),%dx
  8083a6:	74 e0                	je     808388 <tcp_new_port+0x1e>
  8083a8:	8b 40 0c             	mov    0xc(%eax),%eax
  8083ab:	85 c0                	test   %eax,%eax
  8083ad:	8d 76 00             	lea    0x0(%esi),%esi
  8083b0:	75 f0                	jne    8083a2 <tcp_new_port+0x38>
  8083b2:	85 db                	test   %ebx,%ebx
  8083b4:	74 1c                	je     8083d2 <tcp_new_port+0x68>
  8083b6:	89 d8                	mov    %ebx,%eax
  8083b8:	66 3b 53 1c          	cmp    0x1c(%ebx),%dx
  8083bc:	75 0a                	jne    8083c8 <tcp_new_port+0x5e>
  8083be:	66 90                	xchg   %ax,%ax
  8083c0:	eb c6                	jmp    808388 <tcp_new_port+0x1e>
  8083c2:	66 3b 50 1c          	cmp    0x1c(%eax),%dx
  8083c6:	74 c0                	je     808388 <tcp_new_port+0x1e>
  8083c8:	8b 40 0c             	mov    0xc(%eax),%eax
  8083cb:	85 c0                	test   %eax,%eax
  8083cd:	8d 76 00             	lea    0x0(%esi),%esi
  8083d0:	75 f0                	jne    8083c2 <tcp_new_port+0x58>
  8083d2:	85 f6                	test   %esi,%esi
  8083d4:	75 09                	jne    8083df <tcp_new_port+0x75>
  8083d6:	66 89 15 48 80 81 00 	mov    %dx,0x818048
  8083dd:	eb 21                	jmp    808400 <tcp_new_port+0x96>
    if (pcb->local_port == port) {
      goto again;
  8083df:	89 f0                	mov    %esi,%eax
  8083e1:	66 3b 56 1c          	cmp    0x1c(%esi),%dx
  8083e5:	75 0b                	jne    8083f2 <tcp_new_port+0x88>
  8083e7:	eb 9f                	jmp    808388 <tcp_new_port+0x1e>
  8083e9:	66 3b 50 1c          	cmp    0x1c(%eax),%dx
  8083ed:	8d 76 00             	lea    0x0(%esi),%esi
  8083f0:	74 96                	je     808388 <tcp_new_port+0x1e>
  8083f2:	8b 40 0c             	mov    0xc(%eax),%eax
  8083f5:	85 c0                	test   %eax,%eax
  8083f7:	75 f0                	jne    8083e9 <tcp_new_port+0x7f>
  8083f9:	66 89 15 48 80 81 00 	mov    %dx,0x818048
  808400:	0f b7 05 48 80 81 00 	movzwl 0x818048,%eax
    }
  }
  return port;
}
  808407:	5b                   	pop    %ebx
  808408:	5e                   	pop    %esi
  808409:	5d                   	pop    %ebp
  80840a:	c3                   	ret    

0080840b <tcp_setprio>:

/**
 * Connects to another host. The function given as the "connected"
 * argument will be called when the connection has been established.
 *
 * @param pcb the tcp_pcb used to establish the connection
 * @param ipaddr the remote ip address to connect to
 * @param port the remote tcp port to connect to
 * @param connected callback function to call when connected (or on error)
 * @return ERR_VAL if invalid arguments are given
 *         ERR_OK if connect request has been sent
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, struct ip_addr *ipaddr, u16_t port,
      err_t (* connected)(void *arg, struct tcp_pcb *tpcb, err_t err))
{
  u32_t optdata;
  err_t ret;
  u32_t iss;

  LWIP_ERROR("tcp_connect: can only connected from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    pcb->remote_ip = *ipaddr;
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
  if (pcb->local_port == 0) {
    pcb->local_port = tcp_new_port();
  }
  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  pcb->rcv_wnd = TCP_WND;
  pcb->rcv_ann_wnd = TCP_WND;
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  pcb->ssthresh = pcb->mss * 10;
  pcb->state = SYN_SENT;
#if LWIP_CALLBACK_API  
  pcb->connected = connected;
#endif /* LWIP_CALLBACK_API */
  TCP_RMV(&tcp_bound_pcbs, pcb);
  TCP_REG(&tcp_active_pcbs, pcb);

  snmp_inc_tcpactiveopens();
  
  /* Build an MSS option */
  optdata = TCP_BUILD_MSS_OPTION();

  ret = tcp_enqueue(pcb, NULL, 0, TCP_SYN, 0, (u8_t *)&optdata, 4);
  if (ret == ERR_OK) { 
    tcp_output(pcb);
  }
  return ret;
} 

/**
 * Called every 500 ms and implements the retransmission timer and the timer that
 * removes PCBs that have been in TIME-WAIT for enough time. It also increments
 * various timers such as the inactivity timer in each PCB.
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  struct tcp_pcb *pcb, *pcb2, *prev;
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;

  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);

    pcb_remove = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
          pcb->persist_cnt = 0;
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
            pcb->persist_backoff++;
          }
          tcp_zero_window_probe(pcb);
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0)
          ++pcb->rtime;

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
          /* Time for a retransmission. */
          LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_slowtmr: rtime %"S16_F
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
          if (pcb->ssthresh < pcb->mss) {
            pcb->ssthresh = pcb->mss * 2;
          }
          pcb->cwnd = pcb->mss;
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"U16_F
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
          TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
      }
    }

    /* Check if KEEPALIVE should be sent */
    if((pcb->so_options & SOF_KEEPALIVE) && 
       ((pcb->state == ESTABLISHED) || 
        (pcb->state == CLOSE_WAIT))) {
#if LWIP_TCP_KEEPALIVE
      if((u32_t)(tcp_ticks - pcb->tmr) > 
         (pcb->keep_idle + (pcb->keep_cnt*pcb->keep_intvl))
         / TCP_SLOW_INTERVAL)
#else      
      if((u32_t)(tcp_ticks - pcb->tmr) > 
         (pcb->keep_idle + TCP_MAXIDLE) / TCP_SLOW_INTERVAL)
#endif /* LWIP_TCP_KEEPALIVE */
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
                                ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));
        
        tcp_abort(pcb);
      }
#if LWIP_TCP_KEEPALIVE
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * pcb->keep_intvl)
              / TCP_SLOW_INTERVAL)
#else
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEPINTVL_DEFAULT) 
              / TCP_SLOW_INTERVAL)
#endif /* LWIP_TCP_KEEPALIVE */
      {
        tcp_keepalive(pcb);
        pcb->keep_cnt_sent++;
      }
    }

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ    
    if (pcb->ooseq != NULL &&
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
      tcp_segs_free(pcb->ooseq);
      pcb->ooseq = NULL;
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      tcp_pcb_purge(pcb);      
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
      }

      TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_ABRT);

      pcb2 = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb);
      pcb = pcb2;
    } else {

      /* We check if we should poll the connection. */
      ++pcb->polltmr;
      if (pcb->polltmr >= pcb->pollinterval) {
        pcb->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        TCP_EVENT_POLL(pcb, err);
        if (err == ERR_OK) {
          tcp_output(pcb);
        }
      }
      
      prev = pcb;
      pcb = pcb->next;
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;    
  pcb = tcp_tw_pcbs;
  while (pcb != NULL) {
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
      ++pcb_remove;
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      tcp_pcb_purge(pcb);      
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
      }
      pcb2 = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb);
      pcb = pcb2;
    } else {
      prev = pcb;
      pcb = pcb->next;
    }
  }
}

/**
 * Is called every TCP_FAST_INTERVAL (250 ms) and process data previously
 * "refused" by upper layer (application) and sends delayed ACKs.
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      /* Notify again application with data previously received. */
      err_t err;
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_fasttmr: notify kept packet\n"));
      TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
      if (err == ERR_OK) {
        pcb->refused_data = NULL;
      }
    }

    /* send delayed ACKs */  
    if (pcb->flags & TF_ACK_DELAY) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
      tcp_ack_now(pcb);
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
  }
}

/**
 * Deallocates a list of TCP segments (tcp_seg structures).
 *
 * @param seg tcp_seg list of TCP segments to free
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_segs_free(struct tcp_seg *seg)
{
  u8_t count = 0;
  struct tcp_seg *next;
  while (seg != NULL) {
    next = seg->next;
    count += tcp_seg_free(seg);
    seg = next;
  }
  return count;
}

/**
 * Frees a TCP segment (tcp_seg structure).
 *
 * @param seg single tcp_seg to free
 * @return the number of pbufs that were deallocated
 */
u8_t
tcp_seg_free(struct tcp_seg *seg)
{
  u8_t count = 0;
  
  if (seg != NULL) {
    if (seg->p != NULL) {
      count = pbuf_free(seg->p);
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  }
  return count;
}

/**
 * Sets the priority of a connection.
 *
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  80840b:	55                   	push   %ebp
  80840c:	89 e5                	mov    %esp,%ebp
  pcb->prio = prio;
  80840e:	8b 55 0c             	mov    0xc(%ebp),%edx
  808411:	8b 45 08             	mov    0x8(%ebp),%eax
  808414:	88 50 14             	mov    %dl,0x14(%eax)
}
  808417:	5d                   	pop    %ebp
  808418:	c3                   	ret    

00808419 <tcp_arg>:
#if TCP_QUEUE_OOSEQ

/**
 * Returns a copy of the given TCP segment.
 * The pbuf and data are not copied, only the pointers
 *
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  struct tcp_seg *cseg;

  cseg = memp_malloc(MEMP_TCP_SEG);
  if (cseg == NULL) {
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  pbuf_ref(cseg->p);
  return cseg;
}
#endif

#if LWIP_CALLBACK_API
/**
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
static err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  arg = arg;
  if (p != NULL) {
    pbuf_free(p);
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
  }
  return ERR_OK;
}
#endif /* LWIP_CALLBACK_API */

/**
 * Kills the oldest active connection that has lower priority than prio.
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= prio &&
       pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  }      
}

/**
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  }      
}

/**
 * Allocate a new tcp_pcb structure.
 *
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = memp_malloc(MEMP_TCP_PCB);
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = memp_malloc(MEMP_TCP_PCB);
    if (pcb == NULL) {
      /* Try killing active connections with lower priority than the new one. */
      tcp_kill_prio(prio);
      /* Try to allocate a tcp_pcb again. */
      pcb = memp_malloc(MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = TCP_PRIO_NORMAL;
    pcb->snd_buf = TCP_SND_BUF;
    pcb->snd_queuelen = 0;
    pcb->rcv_wnd = TCP_WND;
    pcb->rcv_ann_wnd = TCP_WND;
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->snd_max = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;   
    pcb->tmr = tcp_ticks;

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
    
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  }
  return pcb;
}

/**
 * Creates a new TCP protocol control block but doesn't place it on
 * any of the TCP PCB lists.
 * The pcb is not put on any list until binding using tcp_bind().
 *
 * @internal: Maybe there should be a idle TCP PCB list where these
 * PCBs are put on. Port reservation using tcp_bind() is implemented but
 * allocated pcbs that are not bound can't be killed automatically if wanting
 * to allocate a pcb with higher prio (@see tcp_kill_prio())
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  return tcp_alloc(TCP_PRIO_NORMAL);
}

/**
 * Used to specify the argument that should be passed callback
 * functions.
 *
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{  
  808419:	55                   	push   %ebp
  80841a:	89 e5                	mov    %esp,%ebp
  pcb->callback_arg = arg;
  80841c:	8b 55 0c             	mov    0xc(%ebp),%edx
  80841f:	8b 45 08             	mov    0x8(%ebp),%eax
  808422:	89 50 18             	mov    %edx,0x18(%eax)
}
  808425:	5d                   	pop    %ebp
  808426:	c3                   	ret    

00808427 <tcp_recv>:
#if LWIP_CALLBACK_API

/**
 * Used to specify the function that should be called when a TCP
 * connection receives data.
 *
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb,
   err_t (* recv)(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err))
{
  808427:	55                   	push   %ebp
  808428:	89 e5                	mov    %esp,%ebp
  pcb->recv = recv;
  80842a:	8b 55 0c             	mov    0xc(%ebp),%edx
  80842d:	8b 45 08             	mov    0x8(%ebp),%eax
  808430:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
}
  808436:	5d                   	pop    %ebp
  808437:	c3                   	ret    

00808438 <tcp_sent>:

/**
 * Used to specify the function that should be called when TCP data
 * has been successfully delivered to the remote host.
 *
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb,
   err_t (* sent)(void *arg, struct tcp_pcb *tpcb, u16_t len))
{
  808438:	55                   	push   %ebp
  808439:	89 e5                	mov    %esp,%ebp
  pcb->sent = sent;
  80843b:	8b 55 0c             	mov    0xc(%ebp),%edx
  80843e:	8b 45 08             	mov    0x8(%ebp),%eax
  808441:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
}
  808447:	5d                   	pop    %ebp
  808448:	c3                   	ret    

00808449 <tcp_err>:

/**
 * Used to specify the function that should be called when a fatal error
 * has occured on the connection.
 *
 * @param pcb tcp_pcb to set the err callback
 * @param errf callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb,
   void (* errf)(void *arg, err_t err))
{
  808449:	55                   	push   %ebp
  80844a:	89 e5                	mov    %esp,%ebp
  pcb->errf = errf;
  80844c:	8b 55 0c             	mov    0xc(%ebp),%edx
  80844f:	8b 45 08             	mov    0x8(%ebp),%eax
  808452:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
}
  808458:	5d                   	pop    %ebp
  808459:	c3                   	ret    

0080845a <tcp_accept>:

/**
 * Used for specifying the function that should be called when a
 * LISTENing connection has been connected to another host.
 *
 * @param pcb tcp_pcb to set the accept callback
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb,
     err_t (* accept)(void *arg, struct tcp_pcb *newpcb, err_t err))
{
  80845a:	55                   	push   %ebp
  80845b:	89 e5                	mov    %esp,%ebp
  ((struct tcp_pcb_listen *)pcb)->accept = accept;
  80845d:	8b 55 0c             	mov    0xc(%ebp),%edx
  808460:	8b 45 08             	mov    0x8(%ebp),%eax
  808463:	89 50 20             	mov    %edx,0x20(%eax)
}
  808466:	5d                   	pop    %ebp
  808467:	c3                   	ret    

00808468 <tcp_poll>:
#endif /* LWIP_CALLBACK_API */


/**
 * Used to specify the function that should be called periodically
 * from TCP. The interval is specified in terms of the TCP coarse
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb,
   err_t (* poll)(void *arg, struct tcp_pcb *tpcb), u8_t interval)
{
  808468:	55                   	push   %ebp
  808469:	89 e5                	mov    %esp,%ebp
  80846b:	8b 45 08             	mov    0x8(%ebp),%eax
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  80846e:	8b 55 0c             	mov    0xc(%ebp),%edx
  808471:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  808477:	8b 55 10             	mov    0x10(%ebp),%edx
  80847a:	88 50 31             	mov    %dl,0x31(%eax)
}
  80847d:	5d                   	pop    %ebp
  80847e:	c3                   	ret    

0080847f <tcp_next_iss>:

/**
 * Purges a TCP PCB. Removes any buffered data and frees the buffer memory
 * (pcb->ooseq, pcb->unsent and pcb->unacked are freed).
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
     pcb->state != TIME_WAIT &&
     pcb->state != LISTEN) {

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    if (pcb->refused_data != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
      pcb->refused_data = NULL;
    }
    if (pcb->unsent != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ /* LW */
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;

    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */
    tcp_segs_free(pcb->unsent);
    tcp_segs_free(pcb->unacked);
    pcb->unacked = pcb->unsent = NULL;
  }
}

/**
 * Purges the PCB and removes it from a PCB list. Any delayed ACKs are sent first.
 *
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is also deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);

  tcp_pcb_purge(pcb);
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}

/**
 * Calculates a new initial sequence number for new connections.
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
  80847f:	55                   	push   %ebp
  808480:	89 e5                	mov    %esp,%ebp
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  808482:	a1 44 80 81 00       	mov    0x818044,%eax
  808487:	03 05 cc e5 b3 00    	add    0xb3e5cc,%eax
  80848d:	a3 44 80 81 00       	mov    %eax,0x818044
  return iss;
}
  808492:	5d                   	pop    %ebp
  808493:	c3                   	ret    

00808494 <tcp_eff_send_mss>:

#if TCP_CALCULATE_EFF_SEND_MSS
/**
 * Calcluates the effective send mss that can be used for a specific IP address
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, struct ip_addr *addr)
{
  808494:	55                   	push   %ebp
  808495:	89 e5                	mov    %esp,%ebp
  808497:	53                   	push   %ebx
  808498:	83 ec 04             	sub    $0x4,%esp
  80849b:	0f b7 5d 08          	movzwl 0x8(%ebp),%ebx
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  80849f:	8b 45 0c             	mov    0xc(%ebp),%eax
  8084a2:	89 04 24             	mov    %eax,(%esp)
  8084a5:	e8 f3 11 00 00       	call   80969d <ip_route>
  if ((outif != NULL) && (outif->mtu != 0)) {
  8084aa:	85 c0                	test   %eax,%eax
  8084ac:	74 13                	je     8084c1 <tcp_eff_send_mss+0x2d>
  8084ae:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
  8084b2:	66 85 c0             	test   %ax,%ax
  8084b5:	74 0a                	je     8084c1 <tcp_eff_send_mss+0x2d>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * but we only send options with SYN and that is never filled with data! */
    sendmss = LWIP_MIN(sendmss, mss_s);
  8084b7:	83 e8 28             	sub    $0x28,%eax
  8084ba:	66 39 c3             	cmp    %ax,%bx
  8084bd:	76 02                	jbe    8084c1 <tcp_eff_send_mss+0x2d>
  8084bf:	89 c3                	mov    %eax,%ebx
  8084c1:	0f b7 c3             	movzwl %bx,%eax
  }
  return sendmss;
}
  8084c4:	83 c4 04             	add    $0x4,%esp
  8084c7:	5b                   	pop    %ebx
  8084c8:	5d                   	pop    %ebp
  8084c9:	c3                   	ret    

008084ca <tcp_recved>:
  8084ca:	55                   	push   %ebp
  8084cb:	89 e5                	mov    %esp,%ebp
  8084cd:	56                   	push   %esi
  8084ce:	53                   	push   %ebx
  8084cf:	83 ec 10             	sub    $0x10,%esp
  8084d2:	8b 75 08             	mov    0x8(%ebp),%esi
  8084d5:	0f b7 5d 0c          	movzwl 0xc(%ebp),%ebx
  8084d9:	0f b7 4e 28          	movzwl 0x28(%esi),%ecx
  8084dd:	0f b7 c3             	movzwl %bx,%eax
  8084e0:	0f b7 d1             	movzwl %cx,%edx
  8084e3:	01 d0                	add    %edx,%eax
  8084e5:	3d c0 5d 00 00       	cmp    $0x5dc0,%eax
  8084ea:	76 0e                	jbe    8084fa <tcp_recved+0x30>
  8084ec:	66 c7 46 28 c0 5d    	movw   $0x5dc0,0x28(%esi)
  8084f2:	66 c7 46 2a c0 5d    	movw   $0x5dc0,0x2a(%esi)
  8084f8:	eb 11                	jmp    80850b <tcp_recved+0x41>
  8084fa:	8d 04 0b             	lea    (%ebx,%ecx,1),%eax
  8084fd:	66 89 46 28          	mov    %ax,0x28(%esi)
  808501:	66 3b 46 34          	cmp    0x34(%esi),%ax
  808505:	72 04                	jb     80850b <tcp_recved+0x41>
  808507:	66 89 46 2a          	mov    %ax,0x2a(%esi)
  80850b:	0f b6 46 20          	movzbl 0x20(%esi),%eax
  80850f:	0f b6 d0             	movzbl %al,%edx
  808512:	f6 c2 03             	test   $0x3,%dl
  808515:	75 20                	jne    808537 <tcp_recved+0x6d>
  808517:	f6 c2 01             	test   $0x1,%dl
  80851a:	74 13                	je     80852f <tcp_recved+0x65>
  80851c:	83 e0 fe             	and    $0xfffffffe,%eax
  80851f:	83 c8 02             	or     $0x2,%eax
  808522:	88 46 20             	mov    %al,0x20(%esi)
  808525:	89 34 24             	mov    %esi,(%esp)
  808528:	e8 b8 29 00 00       	call   80aee5 <tcp_output>
  80852d:	eb 22                	jmp    808551 <tcp_recved+0x87>
  80852f:	83 c8 01             	or     $0x1,%eax
  808532:	88 46 20             	mov    %al,0x20(%esi)
  808535:	eb 1a                	jmp    808551 <tcp_recved+0x87>
  808537:	a8 01                	test   $0x1,%al
  808539:	74 16                	je     808551 <tcp_recved+0x87>
  80853b:	66 81 7e 28 df 2e    	cmpw   $0x2edf,0x28(%esi)
  808541:	76 0e                	jbe    808551 <tcp_recved+0x87>
  808543:	83 c8 02             	or     $0x2,%eax
  808546:	88 46 20             	mov    %al,0x20(%esi)
  808549:	89 34 24             	mov    %esi,(%esp)
  80854c:	e8 94 29 00 00       	call   80aee5 <tcp_output>
  808551:	83 c4 10             	add    $0x10,%esp
  808554:	5b                   	pop    %ebx
  808555:	5e                   	pop    %esi
  808556:	5d                   	pop    %ebp
  808557:	c3                   	ret    

00808558 <tcp_fasttmr>:
  808558:	55                   	push   %ebp
  808559:	89 e5                	mov    %esp,%ebp
  80855b:	53                   	push   %ebx
  80855c:	83 ec 14             	sub    $0x14,%esp
  80855f:	8b 1d c8 e5 b3 00    	mov    0xb3e5c8,%ebx
  808565:	85 db                	test   %ebx,%ebx
  808567:	74 67                	je     8085d0 <tcp_fasttmr+0x78>
  808569:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
  80856f:	85 c0                	test   %eax,%eax
  808571:	74 3c                	je     8085af <tcp_fasttmr+0x57>
  808573:	8b 93 88 00 00 00    	mov    0x88(%ebx),%edx
  808579:	85 d2                	test   %edx,%edx
  80857b:	74 1e                	je     80859b <tcp_fasttmr+0x43>
  80857d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  808584:	00 
  808585:	89 44 24 08          	mov    %eax,0x8(%esp)
  808589:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80858d:	8b 43 18             	mov    0x18(%ebx),%eax
  808590:	89 04 24             	mov    %eax,(%esp)
  808593:	ff d2                	call   *%edx
  808595:	84 c0                	test   %al,%al
  808597:	74 0c                	je     8085a5 <tcp_fasttmr+0x4d>
  808599:	eb 14                	jmp    8085af <tcp_fasttmr+0x57>
  80859b:	89 04 24             	mov    %eax,(%esp)
  80859e:	66 90                	xchg   %ax,%ax
  8085a0:	e8 ef f4 ff ff       	call   807a94 <pbuf_free>
  8085a5:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  8085ac:	00 00 00 
  8085af:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  8085b3:	a8 01                	test   $0x1,%al
  8085b5:	74 12                	je     8085c9 <tcp_fasttmr+0x71>
  8085b7:	83 c8 02             	or     $0x2,%eax
  8085ba:	88 43 20             	mov    %al,0x20(%ebx)
  8085bd:	89 1c 24             	mov    %ebx,(%esp)
  8085c0:	e8 20 29 00 00       	call   80aee5 <tcp_output>
  8085c5:	80 63 20 fc          	andb   $0xfc,0x20(%ebx)
  8085c9:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  8085cc:	85 db                	test   %ebx,%ebx
  8085ce:	75 99                	jne    808569 <tcp_fasttmr+0x11>
  8085d0:	83 c4 14             	add    $0x14,%esp
  8085d3:	5b                   	pop    %ebx
  8085d4:	5d                   	pop    %ebp
  8085d5:	c3                   	ret    

008085d6 <tcp_seg_copy>:
  8085d6:	55                   	push   %ebp
  8085d7:	89 e5                	mov    %esp,%ebp
  8085d9:	53                   	push   %ebx
  8085da:	83 ec 14             	sub    $0x14,%esp
  8085dd:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  8085e4:	e8 76 ed ff ff       	call   80735f <memp_malloc>
  8085e9:	bb 00 00 00 00       	mov    $0x0,%ebx
  8085ee:	85 c0                	test   %eax,%eax
  8085f0:	74 24                	je     808616 <tcp_seg_copy+0x40>
  8085f2:	89 c3                	mov    %eax,%ebx
  8085f4:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  8085fb:	00 
  8085fc:	8b 45 08             	mov    0x8(%ebp),%eax
  8085ff:	89 44 24 04          	mov    %eax,0x4(%esp)
  808603:	89 1c 24             	mov    %ebx,(%esp)
  808606:	e8 5d 8c ff ff       	call   801268 <memcpy>
  80860b:	8b 43 04             	mov    0x4(%ebx),%eax
  80860e:	89 04 24             	mov    %eax,(%esp)
  808611:	e8 5c f0 ff ff       	call   807672 <pbuf_ref>
  808616:	89 d8                	mov    %ebx,%eax
  808618:	83 c4 14             	add    $0x14,%esp
  80861b:	5b                   	pop    %ebx
  80861c:	5d                   	pop    %ebp
  80861d:	c3                   	ret    

0080861e <tcp_seg_free>:
  80861e:	55                   	push   %ebp
  80861f:	89 e5                	mov    %esp,%ebp
  808621:	83 ec 18             	sub    $0x18,%esp
  808624:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  808627:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80862a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80862d:	be 00 00 00 00       	mov    $0x0,%esi
  808632:	85 db                	test   %ebx,%ebx
  808634:	74 26                	je     80865c <tcp_seg_free+0x3e>
  808636:	8b 43 04             	mov    0x4(%ebx),%eax
  808639:	be 00 00 00 00       	mov    $0x0,%esi
  80863e:	85 c0                	test   %eax,%eax
  808640:	74 0a                	je     80864c <tcp_seg_free+0x2e>
  808642:	89 04 24             	mov    %eax,(%esp)
  808645:	e8 4a f4 ff ff       	call   807a94 <pbuf_free>
  80864a:	89 c6                	mov    %eax,%esi
  80864c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  808650:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  808657:	e8 c0 ec ff ff       	call   80731c <memp_free>
  80865c:	89 f2                	mov    %esi,%edx
  80865e:	0f b6 c2             	movzbl %dl,%eax
  808661:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  808664:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  808667:	89 ec                	mov    %ebp,%esp
  808669:	5d                   	pop    %ebp
  80866a:	c3                   	ret    

0080866b <tcp_segs_free>:
  80866b:	55                   	push   %ebp
  80866c:	89 e5                	mov    %esp,%ebp
  80866e:	56                   	push   %esi
  80866f:	53                   	push   %ebx
  808670:	83 ec 10             	sub    $0x10,%esp
  808673:	8b 45 08             	mov    0x8(%ebp),%eax
  808676:	be 00 00 00 00       	mov    $0x0,%esi
  80867b:	85 c0                	test   %eax,%eax
  80867d:	74 17                	je     808696 <tcp_segs_free+0x2b>
  80867f:	be 00 00 00 00       	mov    $0x0,%esi
  808684:	8b 18                	mov    (%eax),%ebx
  808686:	89 04 24             	mov    %eax,(%esp)
  808689:	e8 90 ff ff ff       	call   80861e <tcp_seg_free>
  80868e:	01 c6                	add    %eax,%esi
  808690:	89 d8                	mov    %ebx,%eax
  808692:	85 db                	test   %ebx,%ebx
  808694:	75 ee                	jne    808684 <tcp_segs_free+0x19>
  808696:	89 f2                	mov    %esi,%edx
  808698:	0f b6 c2             	movzbl %dl,%eax
  80869b:	83 c4 10             	add    $0x10,%esp
  80869e:	5b                   	pop    %ebx
  80869f:	5e                   	pop    %esi
  8086a0:	5d                   	pop    %ebp
  8086a1:	c3                   	ret    

008086a2 <tcp_pcb_purge>:
  8086a2:	55                   	push   %ebp
  8086a3:	89 e5                	mov    %esp,%ebp
  8086a5:	53                   	push   %ebx
  8086a6:	83 ec 04             	sub    $0x4,%esp
  8086a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  8086ac:	8b 43 10             	mov    0x10(%ebx),%eax
  8086af:	85 c0                	test   %eax,%eax
  8086b1:	74 62                	je     808715 <tcp_pcb_purge+0x73>
  8086b3:	83 f8 0a             	cmp    $0xa,%eax
  8086b6:	74 5d                	je     808715 <tcp_pcb_purge+0x73>
  8086b8:	83 f8 01             	cmp    $0x1,%eax
  8086bb:	74 58                	je     808715 <tcp_pcb_purge+0x73>
  8086bd:	8b 83 80 00 00 00    	mov    0x80(%ebx),%eax
  8086c3:	85 c0                	test   %eax,%eax
  8086c5:	74 12                	je     8086d9 <tcp_pcb_purge+0x37>
  8086c7:	89 04 24             	mov    %eax,(%esp)
  8086ca:	e8 c5 f3 ff ff       	call   807a94 <pbuf_free>
  8086cf:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
  8086d6:	00 00 00 
  8086d9:	66 c7 43 32 ff ff    	movw   $0xffff,0x32(%ebx)
  8086df:	8b 43 7c             	mov    0x7c(%ebx),%eax
  8086e2:	89 04 24             	mov    %eax,(%esp)
  8086e5:	e8 81 ff ff ff       	call   80866b <tcp_segs_free>
  8086ea:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
  8086f1:	8b 43 74             	mov    0x74(%ebx),%eax
  8086f4:	89 04 24             	mov    %eax,(%esp)
  8086f7:	e8 6f ff ff ff       	call   80866b <tcp_segs_free>
  8086fc:	8b 43 78             	mov    0x78(%ebx),%eax
  8086ff:	89 04 24             	mov    %eax,(%esp)
  808702:	e8 64 ff ff ff       	call   80866b <tcp_segs_free>
  808707:	c7 43 74 00 00 00 00 	movl   $0x0,0x74(%ebx)
  80870e:	c7 43 78 00 00 00 00 	movl   $0x0,0x78(%ebx)
  808715:	83 c4 04             	add    $0x4,%esp
  808718:	5b                   	pop    %ebx
  808719:	5d                   	pop    %ebp
  80871a:	c3                   	ret    

0080871b <tcp_pcb_remove>:
  80871b:	55                   	push   %ebp
  80871c:	89 e5                	mov    %esp,%ebp
  80871e:	53                   	push   %ebx
  80871f:	83 ec 14             	sub    $0x14,%esp
  808722:	8b 4d 08             	mov    0x8(%ebp),%ecx
  808725:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  808728:	8b 11                	mov    (%ecx),%edx
  80872a:	39 da                	cmp    %ebx,%edx
  80872c:	75 07                	jne    808735 <tcp_pcb_remove+0x1a>
  80872e:	8b 42 0c             	mov    0xc(%edx),%eax
  808731:	89 01                	mov    %eax,(%ecx)
  808733:	eb 26                	jmp    80875b <tcp_pcb_remove+0x40>
  808735:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  80873b:	85 d2                	test   %edx,%edx
  80873d:	74 1c                	je     80875b <tcp_pcb_remove+0x40>
  80873f:	8b 42 0c             	mov    0xc(%edx),%eax
  808742:	85 c0                	test   %eax,%eax
  808744:	74 10                	je     808756 <tcp_pcb_remove+0x3b>
  808746:	39 c3                	cmp    %eax,%ebx
  808748:	0f 85 b8 00 00 00    	jne    808806 <tcp_pcb_remove+0xeb>
  80874e:	8b 40 0c             	mov    0xc(%eax),%eax
  808751:	89 42 0c             	mov    %eax,0xc(%edx)
  808754:	eb 05                	jmp    80875b <tcp_pcb_remove+0x40>
  808756:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  80875b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  808762:	89 1c 24             	mov    %ebx,(%esp)
  808765:	e8 38 ff ff ff       	call   8086a2 <tcp_pcb_purge>
  80876a:	8b 43 10             	mov    0x10(%ebx),%eax
  80876d:	83 f8 0a             	cmp    $0xa,%eax
  808770:	74 1b                	je     80878d <tcp_pcb_remove+0x72>
  808772:	83 f8 01             	cmp    $0x1,%eax
  808775:	74 16                	je     80878d <tcp_pcb_remove+0x72>
  808777:	0f b6 43 20          	movzbl 0x20(%ebx),%eax
  80877b:	a8 01                	test   $0x1,%al
  80877d:	74 0e                	je     80878d <tcp_pcb_remove+0x72>
  80877f:	83 c8 02             	or     $0x2,%eax
  808782:	88 43 20             	mov    %al,0x20(%ebx)
  808785:	89 1c 24             	mov    %ebx,(%esp)
  808788:	e8 58 27 00 00       	call   80aee5 <tcp_output>
  80878d:	83 7b 10 01          	cmpl   $0x1,0x10(%ebx)
  808791:	74 66                	je     8087f9 <tcp_pcb_remove+0xde>
  808793:	83 7b 74 00          	cmpl   $0x0,0x74(%ebx)
  808797:	74 1c                	je     8087b5 <tcp_pcb_remove+0x9a>
  808799:	c7 44 24 08 5b 35 81 	movl   $0x81355b,0x8(%esp)
  8087a0:	00 
  8087a1:	c7 44 24 04 b4 04 00 	movl   $0x4b4,0x4(%esp)
  8087a8:	00 
  8087a9:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  8087b0:	e8 d7 80 ff ff       	call   80088c <_panic>
  8087b5:	83 7b 78 00          	cmpl   $0x0,0x78(%ebx)
  8087b9:	74 1c                	je     8087d7 <tcp_pcb_remove+0xbc>
  8087bb:	c7 44 24 08 87 35 81 	movl   $0x813587,0x8(%esp)
  8087c2:	00 
  8087c3:	c7 44 24 04 b5 04 00 	movl   $0x4b5,0x4(%esp)
  8087ca:	00 
  8087cb:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  8087d2:	e8 b5 80 ff ff       	call   80088c <_panic>
  8087d7:	83 7b 7c 00          	cmpl   $0x0,0x7c(%ebx)
  8087db:	74 1c                	je     8087f9 <tcp_pcb_remove+0xde>
  8087dd:	c7 44 24 08 a0 35 81 	movl   $0x8135a0,0x8(%esp)
  8087e4:	00 
  8087e5:	c7 44 24 04 b7 04 00 	movl   $0x4b7,0x4(%esp)
  8087ec:	00 
  8087ed:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  8087f4:	e8 93 80 ff ff       	call   80088c <_panic>
  8087f9:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
  808800:	83 c4 14             	add    $0x14,%esp
  808803:	5b                   	pop    %ebx
  808804:	5d                   	pop    %ebp
  808805:	c3                   	ret    
  808806:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  80880b:	89 c2                	mov    %eax,%edx
  80880d:	e9 2d ff ff ff       	jmp    80873f <tcp_pcb_remove+0x24>

00808812 <tcp_listen_with_backlog>:
  808812:	55                   	push   %ebp
  808813:	89 e5                	mov    %esp,%ebp
  808815:	56                   	push   %esi
  808816:	53                   	push   %ebx
  808817:	83 ec 10             	sub    $0x10,%esp
  80881a:	8b 75 08             	mov    0x8(%ebp),%esi
  80881d:	83 7e 10 00          	cmpl   $0x0,0x10(%esi)
  808821:	74 1c                	je     80883f <tcp_listen_with_backlog+0x2d>
  808823:	c7 44 24 08 b8 35 81 	movl   $0x8135b8,0x8(%esp)
  80882a:	00 
  80882b:	c7 44 24 04 60 01 00 	movl   $0x160,0x4(%esp)
  808832:	00 
  808833:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  80883a:	e8 4d 80 ff ff       	call   80088c <_panic>
  80883f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  808846:	e8 14 eb ff ff       	call   80735f <memp_malloc>
  80884b:	ba 00 00 00 00       	mov    $0x0,%edx
  808850:	85 c0                	test   %eax,%eax
  808852:	0f 84 b1 00 00 00    	je     808909 <tcp_listen_with_backlog+0xf7>
  808858:	89 c3                	mov    %eax,%ebx
  80885a:	8b 46 18             	mov    0x18(%esi),%eax
  80885d:	89 43 18             	mov    %eax,0x18(%ebx)
  808860:	0f b7 46 1c          	movzwl 0x1c(%esi),%eax
  808864:	66 89 43 1c          	mov    %ax,0x1c(%ebx)
  808868:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%ebx)
  80886f:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  808873:	83 c8 02             	or     $0x2,%eax
  808876:	66 89 43 08          	mov    %ax,0x8(%ebx)
  80887a:	0f b6 46 0b          	movzbl 0xb(%esi),%eax
  80887e:	88 43 0b             	mov    %al,0xb(%ebx)
  808881:	0f b6 46 0a          	movzbl 0xa(%esi),%eax
  808885:	88 43 0a             	mov    %al,0xa(%ebx)
  808888:	b8 00 00 00 00       	mov    $0x0,%eax
  80888d:	85 f6                	test   %esi,%esi
  80888f:	74 02                	je     808893 <tcp_listen_with_backlog+0x81>
  808891:	8b 06                	mov    (%esi),%eax
  808893:	89 03                	mov    %eax,(%ebx)
  808895:	8b 15 d8 e5 b3 00    	mov    0xb3e5d8,%edx
  80889b:	39 f2                	cmp    %esi,%edx
  80889d:	75 0a                	jne    8088a9 <tcp_listen_with_backlog+0x97>
  80889f:	8b 42 0c             	mov    0xc(%edx),%eax
  8088a2:	a3 d8 e5 b3 00       	mov    %eax,0xb3e5d8
  8088a7:	eb 22                	jmp    8088cb <tcp_listen_with_backlog+0xb9>
  8088a9:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  8088af:	85 d2                	test   %edx,%edx
  8088b1:	74 18                	je     8088cb <tcp_listen_with_backlog+0xb9>
  8088b3:	8b 42 0c             	mov    0xc(%edx),%eax
  8088b6:	85 c0                	test   %eax,%eax
  8088b8:	74 0c                	je     8088c6 <tcp_listen_with_backlog+0xb4>
  8088ba:	39 c6                	cmp    %eax,%esi
  8088bc:	75 42                	jne    808900 <tcp_listen_with_backlog+0xee>
  8088be:	8b 40 0c             	mov    0xc(%eax),%eax
  8088c1:	89 42 0c             	mov    %eax,0xc(%edx)
  8088c4:	eb 05                	jmp    8088cb <tcp_listen_with_backlog+0xb9>
  8088c6:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  8088cb:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
  8088d2:	89 74 24 04          	mov    %esi,0x4(%esp)
  8088d6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8088dd:	e8 3a ea ff ff       	call   80731c <memp_free>
  8088e2:	c7 43 20 60 83 80 00 	movl   $0x808360,0x20(%ebx)
  8088e9:	a1 d0 e5 b3 00       	mov    0xb3e5d0,%eax
  8088ee:	89 43 0c             	mov    %eax,0xc(%ebx)
  8088f1:	89 1d d0 e5 b3 00    	mov    %ebx,0xb3e5d0
  8088f7:	e8 31 c2 ff ff       	call   804b2d <tcp_timer_needed>
  8088fc:	89 da                	mov    %ebx,%edx
  8088fe:	eb 09                	jmp    808909 <tcp_listen_with_backlog+0xf7>
  808900:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  808905:	89 c2                	mov    %eax,%edx
  808907:	eb aa                	jmp    8088b3 <tcp_listen_with_backlog+0xa1>
  808909:	89 d0                	mov    %edx,%eax
  80890b:	83 c4 10             	add    $0x10,%esp
  80890e:	5b                   	pop    %ebx
  80890f:	5e                   	pop    %esi
  808910:	5d                   	pop    %ebp
  808911:	c3                   	ret    

00808912 <tcp_bind>:
  808912:	55                   	push   %ebp
  808913:	89 e5                	mov    %esp,%ebp
  808915:	57                   	push   %edi
  808916:	56                   	push   %esi
  808917:	53                   	push   %ebx
  808918:	83 ec 0c             	sub    $0xc,%esp
  80891b:	8b 7d 08             	mov    0x8(%ebp),%edi
  80891e:	8b 75 0c             	mov    0xc(%ebp),%esi
  808921:	0f b7 4d 10          	movzwl 0x10(%ebp),%ecx
  808925:	83 7f 10 00          	cmpl   $0x0,0x10(%edi)
  808929:	74 1c                	je     808947 <tcp_bind+0x35>
  80892b:	c7 44 24 08 dc 35 81 	movl   $0x8135dc,0x8(%esp)
  808932:	00 
  808933:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
  80893a:	00 
  80893b:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  808942:	e8 45 7f ff ff       	call   80088c <_panic>
  808947:	66 85 c9             	test   %cx,%cx
  80894a:	75 07                	jne    808953 <tcp_bind+0x41>
  80894c:	e8 19 fa ff ff       	call   80836a <tcp_new_port>
  808951:	89 c1                	mov    %eax,%ecx
  808953:	a1 d0 e5 b3 00       	mov    0xb3e5d0,%eax
  808958:	85 c0                	test   %eax,%eax
  80895a:	74 3b                	je     808997 <tcp_bind+0x85>
  80895c:	66 39 48 1c          	cmp    %cx,0x1c(%eax)
  808960:	75 2e                	jne    808990 <tcp_bind+0x7e>
  808962:	85 c0                	test   %eax,%eax
  808964:	0f 84 e0 00 00 00    	je     808a4a <tcp_bind+0x138>
  80896a:	8b 18                	mov    (%eax),%ebx
  80896c:	85 db                	test   %ebx,%ebx
  80896e:	66 90                	xchg   %ax,%ax
  808970:	0f 84 d4 00 00 00    	je     808a4a <tcp_bind+0x138>
  808976:	85 f6                	test   %esi,%esi
  808978:	0f 84 cc 00 00 00    	je     808a4a <tcp_bind+0x138>
  80897e:	8b 16                	mov    (%esi),%edx
  808980:	85 d2                	test   %edx,%edx
  808982:	0f 84 c2 00 00 00    	je     808a4a <tcp_bind+0x138>
  808988:	39 d3                	cmp    %edx,%ebx
  80898a:	0f 84 ba 00 00 00    	je     808a4a <tcp_bind+0x138>
  808990:	8b 40 0c             	mov    0xc(%eax),%eax
  808993:	85 c0                	test   %eax,%eax
  808995:	75 c5                	jne    80895c <tcp_bind+0x4a>
  808997:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  80899c:	85 c0                	test   %eax,%eax
  80899e:	74 35                	je     8089d5 <tcp_bind+0xc3>
  8089a0:	66 39 48 1c          	cmp    %cx,0x1c(%eax)
  8089a4:	75 28                	jne    8089ce <tcp_bind+0xbc>
  8089a6:	85 c0                	test   %eax,%eax
  8089a8:	0f 84 9c 00 00 00    	je     808a4a <tcp_bind+0x138>
  8089ae:	8b 18                	mov    (%eax),%ebx
  8089b0:	85 db                	test   %ebx,%ebx
  8089b2:	0f 84 92 00 00 00    	je     808a4a <tcp_bind+0x138>
  8089b8:	85 f6                	test   %esi,%esi
  8089ba:	0f 84 8a 00 00 00    	je     808a4a <tcp_bind+0x138>
  8089c0:	8b 16                	mov    (%esi),%edx
  8089c2:	85 d2                	test   %edx,%edx
  8089c4:	0f 84 80 00 00 00    	je     808a4a <tcp_bind+0x138>
  8089ca:	39 d3                	cmp    %edx,%ebx
  8089cc:	74 7c                	je     808a4a <tcp_bind+0x138>
  8089ce:	8b 40 0c             	mov    0xc(%eax),%eax
  8089d1:	85 c0                	test   %eax,%eax
  8089d3:	75 cb                	jne    8089a0 <tcp_bind+0x8e>
  8089d5:	a1 d8 e5 b3 00       	mov    0xb3e5d8,%eax
  8089da:	85 c0                	test   %eax,%eax
  8089dc:	74 25                	je     808a03 <tcp_bind+0xf1>
  8089de:	66 39 48 1c          	cmp    %cx,0x1c(%eax)
  8089e2:	75 18                	jne    8089fc <tcp_bind+0xea>
  8089e4:	85 c0                	test   %eax,%eax
  8089e6:	74 62                	je     808a4a <tcp_bind+0x138>
  8089e8:	8b 18                	mov    (%eax),%ebx
  8089ea:	85 db                	test   %ebx,%ebx
  8089ec:	74 5c                	je     808a4a <tcp_bind+0x138>
  8089ee:	85 f6                	test   %esi,%esi
  8089f0:	74 58                	je     808a4a <tcp_bind+0x138>
  8089f2:	8b 16                	mov    (%esi),%edx
  8089f4:	85 d2                	test   %edx,%edx
  8089f6:	74 52                	je     808a4a <tcp_bind+0x138>
  8089f8:	39 d3                	cmp    %edx,%ebx
  8089fa:	74 4e                	je     808a4a <tcp_bind+0x138>
  8089fc:	8b 40 0c             	mov    0xc(%eax),%eax
  8089ff:	85 c0                	test   %eax,%eax
  808a01:	75 db                	jne    8089de <tcp_bind+0xcc>
  808a03:	8b 15 dc e5 b3 00    	mov    0xb3e5dc,%edx
  808a09:	85 d2                	test   %edx,%edx
  808a0b:	74 13                	je     808a20 <tcp_bind+0x10e>
  808a0d:	66 39 4a 1c          	cmp    %cx,0x1c(%edx)
  808a11:	75 06                	jne    808a19 <tcp_bind+0x107>
  808a13:	8b 02                	mov    (%edx),%eax
  808a15:	3b 06                	cmp    (%esi),%eax
  808a17:	74 31                	je     808a4a <tcp_bind+0x138>
  808a19:	8b 52 0c             	mov    0xc(%edx),%edx
  808a1c:	85 d2                	test   %edx,%edx
  808a1e:	75 ed                	jne    808a0d <tcp_bind+0xfb>
  808a20:	85 f6                	test   %esi,%esi
  808a22:	74 08                	je     808a2c <tcp_bind+0x11a>
  808a24:	8b 06                	mov    (%esi),%eax
  808a26:	85 c0                	test   %eax,%eax
  808a28:	74 02                	je     808a2c <tcp_bind+0x11a>
  808a2a:	89 07                	mov    %eax,(%edi)
  808a2c:	66 89 4f 1c          	mov    %cx,0x1c(%edi)
  808a30:	a1 d8 e5 b3 00       	mov    0xb3e5d8,%eax
  808a35:	89 47 0c             	mov    %eax,0xc(%edi)
  808a38:	89 3d d8 e5 b3 00    	mov    %edi,0xb3e5d8
  808a3e:	e8 ea c0 ff ff       	call   804b2d <tcp_timer_needed>
  808a43:	b8 00 00 00 00       	mov    $0x0,%eax
  808a48:	eb 05                	jmp    808a4f <tcp_bind+0x13d>
  808a4a:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  808a4f:	83 c4 0c             	add    $0xc,%esp
  808a52:	5b                   	pop    %ebx
  808a53:	5e                   	pop    %esi
  808a54:	5f                   	pop    %edi
  808a55:	5d                   	pop    %ebp
  808a56:	c3                   	ret    

00808a57 <tcp_connect>:
  808a57:	55                   	push   %ebp
  808a58:	89 e5                	mov    %esp,%ebp
  808a5a:	56                   	push   %esi
  808a5b:	53                   	push   %ebx
  808a5c:	83 ec 30             	sub    $0x30,%esp
  808a5f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  808a62:	8b 75 0c             	mov    0xc(%ebp),%esi
  808a65:	0f b7 55 10          	movzwl 0x10(%ebp),%edx
  808a69:	83 7b 10 00          	cmpl   $0x0,0x10(%ebx)
  808a6d:	74 1c                	je     808a8b <tcp_connect+0x34>
  808a6f:	c7 44 24 08 08 36 81 	movl   $0x813608,0x8(%esp)
  808a76:	00 
  808a77:	c7 44 24 04 ec 01 00 	movl   $0x1ec,0x4(%esp)
  808a7e:	00 
  808a7f:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  808a86:	e8 01 7e ff ff       	call   80088c <_panic>
  808a8b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  808a90:	85 f6                	test   %esi,%esi
  808a92:	0f 84 3a 01 00 00    	je     808bd2 <tcp_connect+0x17b>
  808a98:	8b 06                	mov    (%esi),%eax
  808a9a:	89 43 04             	mov    %eax,0x4(%ebx)
  808a9d:	66 89 53 1e          	mov    %dx,0x1e(%ebx)
  808aa1:	66 83 7b 1c 00       	cmpw   $0x0,0x1c(%ebx)
  808aa6:	75 09                	jne    808ab1 <tcp_connect+0x5a>
  808aa8:	e8 bd f8 ff ff       	call   80836a <tcp_new_port>
  808aad:	66 89 43 1c          	mov    %ax,0x1c(%ebx)
  808ab1:	e8 c9 f9 ff ff       	call   80847f <tcp_next_iss>
  808ab6:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
  808abd:	89 43 54             	mov    %eax,0x54(%ebx)
  808ac0:	83 e8 01             	sub    $0x1,%eax
  808ac3:	89 43 48             	mov    %eax,0x48(%ebx)
  808ac6:	89 43 68             	mov    %eax,0x68(%ebx)
  808ac9:	66 c7 43 28 c0 5d    	movw   $0x5dc0,0x28(%ebx)
  808acf:	66 c7 43 2a c0 5d    	movw   $0x5dc0,0x2a(%ebx)
  808ad5:	66 c7 43 5c c0 5d    	movw   $0x5dc0,0x5c(%ebx)
  808adb:	66 c7 43 34 18 02    	movw   $0x218,0x34(%ebx)
  808ae1:	89 74 24 04          	mov    %esi,0x4(%esp)
  808ae5:	c7 04 24 18 02 00 00 	movl   $0x218,(%esp)
  808aec:	e8 a3 f9 ff ff       	call   808494 <tcp_eff_send_mss>
  808af1:	66 89 43 34          	mov    %ax,0x34(%ebx)
  808af5:	66 c7 43 4e 01 00    	movw   $0x1,0x4e(%ebx)
  808afb:	0f b7 c0             	movzwl %ax,%eax
  808afe:	8d 04 80             	lea    (%eax,%eax,4),%eax
  808b01:	01 c0                	add    %eax,%eax
  808b03:	66 89 43 50          	mov    %ax,0x50(%ebx)
  808b07:	c7 43 10 02 00 00 00 	movl   $0x2,0x10(%ebx)
  808b0e:	8b 45 14             	mov    0x14(%ebp),%eax
  808b11:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
  808b17:	8b 15 d8 e5 b3 00    	mov    0xb3e5d8,%edx
  808b1d:	39 da                	cmp    %ebx,%edx
  808b1f:	75 0a                	jne    808b2b <tcp_connect+0xd4>
  808b21:	8b 42 0c             	mov    0xc(%edx),%eax
  808b24:	a3 d8 e5 b3 00       	mov    %eax,0xb3e5d8
  808b29:	eb 26                	jmp    808b51 <tcp_connect+0xfa>
  808b2b:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  808b31:	85 d2                	test   %edx,%edx
  808b33:	74 1c                	je     808b51 <tcp_connect+0xfa>
  808b35:	8b 42 0c             	mov    0xc(%edx),%eax
  808b38:	85 c0                	test   %eax,%eax
  808b3a:	74 10                	je     808b4c <tcp_connect+0xf5>
  808b3c:	39 c3                	cmp    %eax,%ebx
  808b3e:	0f 85 82 00 00 00    	jne    808bc6 <tcp_connect+0x16f>
  808b44:	8b 40 0c             	mov    0xc(%eax),%eax
  808b47:	89 42 0c             	mov    %eax,0xc(%edx)
  808b4a:	eb 05                	jmp    808b51 <tcp_connect+0xfa>
  808b4c:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  808b51:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  808b58:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  808b5d:	89 43 0c             	mov    %eax,0xc(%ebx)
  808b60:	89 1d c8 e5 b3 00    	mov    %ebx,0xb3e5c8
  808b66:	e8 c2 bf ff ff       	call   804b2d <tcp_timer_needed>
  808b6b:	c7 04 24 b4 05 04 02 	movl   $0x20405b4,(%esp)
  808b72:	e8 15 1d 00 00       	call   80a88c <htonl>
  808b77:	89 45 f4             	mov    %eax,0xfffffff4(%ebp)
  808b7a:	8d 45 f4             	lea    0xfffffff4(%ebp),%eax
  808b7d:	c7 44 24 18 04 00 00 	movl   $0x4,0x18(%esp)
  808b84:	00 
  808b85:	89 44 24 14          	mov    %eax,0x14(%esp)
  808b89:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  808b90:	00 
  808b91:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
  808b98:	00 
  808b99:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  808ba0:	00 
  808ba1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  808ba8:	00 
  808ba9:	89 1c 24             	mov    %ebx,(%esp)
  808bac:	e8 d2 28 00 00       	call   80b483 <tcp_enqueue>
  808bb1:	89 c6                	mov    %eax,%esi
  808bb3:	84 c0                	test   %al,%al
  808bb5:	75 08                	jne    808bbf <tcp_connect+0x168>
  808bb7:	89 1c 24             	mov    %ebx,(%esp)
  808bba:	e8 26 23 00 00       	call   80aee5 <tcp_output>
  808bbf:	89 f2                	mov    %esi,%edx
  808bc1:	0f be c2             	movsbl %dl,%eax
  808bc4:	eb 0c                	jmp    808bd2 <tcp_connect+0x17b>
  808bc6:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  808bcb:	89 c2                	mov    %eax,%edx
  808bcd:	e9 63 ff ff ff       	jmp    808b35 <tcp_connect+0xde>
  808bd2:	83 c4 30             	add    $0x30,%esp
  808bd5:	5b                   	pop    %ebx
  808bd6:	5e                   	pop    %esi
  808bd7:	5d                   	pop    %ebp
  808bd8:	c3                   	ret    

00808bd9 <tcp_abort>:
  808bd9:	55                   	push   %ebp
  808bda:	89 e5                	mov    %esp,%ebp
  808bdc:	57                   	push   %edi
  808bdd:	56                   	push   %esi
  808bde:	53                   	push   %ebx
  808bdf:	83 ec 3c             	sub    $0x3c,%esp
  808be2:	8b 5d 08             	mov    0x8(%ebp),%ebx
  808be5:	83 7b 10 0a          	cmpl   $0xa,0x10(%ebx)
  808be9:	75 25                	jne    808c10 <tcp_abort+0x37>
  808beb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  808bef:	c7 04 24 dc e5 b3 00 	movl   $0xb3e5dc,(%esp)
  808bf6:	e8 20 fb ff ff       	call   80871b <tcp_pcb_remove>
  808bfb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  808bff:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  808c06:	e8 11 e7 ff ff       	call   80731c <memp_free>
  808c0b:	e9 c8 00 00 00       	jmp    808cd8 <tcp_abort+0xff>
  808c10:	8b 43 54             	mov    0x54(%ebx),%eax
  808c13:	89 45 d4             	mov    %eax,0xffffffd4(%ebp)
  808c16:	8b 43 24             	mov    0x24(%ebx),%eax
  808c19:	89 45 d8             	mov    %eax,0xffffffd8(%ebp)
  808c1c:	b8 00 00 00 00       	mov    $0x0,%eax
  808c21:	85 db                	test   %ebx,%ebx
  808c23:	74 02                	je     808c27 <tcp_abort+0x4e>
  808c25:	8b 03                	mov    (%ebx),%eax
  808c27:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  808c2a:	8b 43 04             	mov    0x4(%ebx),%eax
  808c2d:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  808c30:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  808c34:	66 89 45 de          	mov    %ax,0xffffffde(%ebp)
  808c38:	0f b7 7b 1e          	movzwl 0x1e(%ebx),%edi
  808c3c:	8b b3 98 00 00 00    	mov    0x98(%ebx),%esi
  808c42:	8b 43 18             	mov    0x18(%ebx),%eax
  808c45:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  808c48:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  808c4c:	c7 04 24 c8 e5 b3 00 	movl   $0xb3e5c8,(%esp)
  808c53:	e8 c3 fa ff ff       	call   80871b <tcp_pcb_remove>
  808c58:	8b 43 78             	mov    0x78(%ebx),%eax
  808c5b:	85 c0                	test   %eax,%eax
  808c5d:	74 08                	je     808c67 <tcp_abort+0x8e>
  808c5f:	89 04 24             	mov    %eax,(%esp)
  808c62:	e8 04 fa ff ff       	call   80866b <tcp_segs_free>
  808c67:	8b 43 74             	mov    0x74(%ebx),%eax
  808c6a:	85 c0                	test   %eax,%eax
  808c6c:	74 08                	je     808c76 <tcp_abort+0x9d>
  808c6e:	89 04 24             	mov    %eax,(%esp)
  808c71:	e8 f5 f9 ff ff       	call   80866b <tcp_segs_free>
  808c76:	8b 43 7c             	mov    0x7c(%ebx),%eax
  808c79:	85 c0                	test   %eax,%eax
  808c7b:	74 08                	je     808c85 <tcp_abort+0xac>
  808c7d:	89 04 24             	mov    %eax,(%esp)
  808c80:	e8 e6 f9 ff ff       	call   80866b <tcp_segs_free>
  808c85:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  808c89:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  808c90:	e8 87 e6 ff ff       	call   80731c <memp_free>
  808c95:	85 f6                	test   %esi,%esi
  808c97:	74 10                	je     808ca9 <tcp_abort+0xd0>
  808c99:	c7 44 24 04 fb ff ff 	movl   $0xfffffffb,0x4(%esp)
  808ca0:	ff 
  808ca1:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  808ca4:	89 04 24             	mov    %eax,(%esp)
  808ca7:	ff d6                	call   *%esi
  808ca9:	0f b7 c7             	movzwl %di,%eax
  808cac:	89 44 24 14          	mov    %eax,0x14(%esp)
  808cb0:	0f b7 45 de          	movzwl 0xffffffde(%ebp),%eax
  808cb4:	89 44 24 10          	mov    %eax,0x10(%esp)
  808cb8:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  808cbb:	89 44 24 0c          	mov    %eax,0xc(%esp)
  808cbf:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  808cc2:	89 44 24 08          	mov    %eax,0x8(%esp)
  808cc6:	8b 45 d8             	mov    0xffffffd8(%ebp),%eax
  808cc9:	89 44 24 04          	mov    %eax,0x4(%esp)
  808ccd:	8b 45 d4             	mov    0xffffffd4(%ebp),%eax
  808cd0:	89 04 24             	mov    %eax,(%esp)
  808cd3:	e8 b0 20 00 00       	call   80ad88 <tcp_rst>
  808cd8:	83 c4 3c             	add    $0x3c,%esp
  808cdb:	5b                   	pop    %ebx
  808cdc:	5e                   	pop    %esi
  808cdd:	5f                   	pop    %edi
  808cde:	5d                   	pop    %ebp
  808cdf:	c3                   	ret    

00808ce0 <tcp_alloc>:
  808ce0:	55                   	push   %ebp
  808ce1:	89 e5                	mov    %esp,%ebp
  808ce3:	57                   	push   %edi
  808ce4:	56                   	push   %esi
  808ce5:	53                   	push   %ebx
  808ce6:	83 ec 1c             	sub    $0x1c,%esp
  808ce9:	0f b6 7d 08          	movzbl 0x8(%ebp),%edi
  808ced:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  808cf4:	e8 66 e6 ff ff       	call   80735f <memp_malloc>
  808cf9:	89 c3                	mov    %eax,%ebx
  808cfb:	85 c0                	test   %eax,%eax
  808cfd:	0f 85 b2 00 00 00    	jne    808db5 <tcp_alloc+0xd5>
  808d03:	8b 0d dc e5 b3 00    	mov    0xb3e5dc,%ecx
  808d09:	85 c9                	test   %ecx,%ecx
  808d0b:	0f 85 41 01 00 00    	jne    808e52 <tcp_alloc+0x172>
  808d11:	eb 22                	jmp    808d35 <tcp_alloc+0x55>
  808d13:	89 f2                	mov    %esi,%edx
  808d15:	2b 50 2c             	sub    0x2c(%eax),%edx
  808d18:	39 d3                	cmp    %edx,%ebx
  808d1a:	77 06                	ja     808d22 <tcp_alloc+0x42>
  808d1c:	89 c1                	mov    %eax,%ecx
  808d1e:	89 d3                	mov    %edx,%ebx
  808d20:	89 c8                	mov    %ecx,%eax
  808d22:	8b 40 0c             	mov    0xc(%eax),%eax
  808d25:	85 c0                	test   %eax,%eax
  808d27:	75 ea                	jne    808d13 <tcp_alloc+0x33>
  808d29:	85 c9                	test   %ecx,%ecx
  808d2b:	74 08                	je     808d35 <tcp_alloc+0x55>
  808d2d:	89 0c 24             	mov    %ecx,(%esp)
  808d30:	e8 a4 fe ff ff       	call   808bd9 <tcp_abort>
  808d35:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  808d3c:	e8 1e e6 ff ff       	call   80735f <memp_malloc>
  808d41:	89 c3                	mov    %eax,%ebx
  808d43:	85 c0                	test   %eax,%eax
  808d45:	75 6e                	jne    808db5 <tcp_alloc+0xd5>
  808d47:	89 fb                	mov    %edi,%ebx
  808d49:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  808d4e:	85 c0                	test   %eax,%eax
  808d50:	74 4d                	je     808d9f <tcp_alloc+0xbf>
  808d52:	8b 15 cc e5 b3 00    	mov    0xb3e5cc,%edx
  808d58:	89 55 f0             	mov    %edx,0xfffffff0(%ebp)
  808d5b:	bf 00 00 00 00       	mov    $0x0,%edi
  808d60:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  808d67:	be 7f 00 00 00       	mov    $0x7f,%esi
  808d6c:	0f b6 50 14          	movzbl 0x14(%eax),%edx
  808d70:	38 d3                	cmp    %dl,%bl
  808d72:	72 18                	jb     808d8c <tcp_alloc+0xac>
  808d74:	89 f1                	mov    %esi,%ecx
  808d76:	38 ca                	cmp    %cl,%dl
  808d78:	77 12                	ja     808d8c <tcp_alloc+0xac>
  808d7a:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  808d7d:	2b 48 2c             	sub    0x2c(%eax),%ecx
  808d80:	3b 4d ec             	cmp    0xffffffec(%ebp),%ecx
  808d83:	72 07                	jb     808d8c <tcp_alloc+0xac>
  808d85:	89 c7                	mov    %eax,%edi
  808d87:	89 4d ec             	mov    %ecx,0xffffffec(%ebp)
  808d8a:	89 d6                	mov    %edx,%esi
  808d8c:	8b 40 0c             	mov    0xc(%eax),%eax
  808d8f:	85 c0                	test   %eax,%eax
  808d91:	75 d9                	jne    808d6c <tcp_alloc+0x8c>
  808d93:	85 ff                	test   %edi,%edi
  808d95:	74 08                	je     808d9f <tcp_alloc+0xbf>
  808d97:	89 3c 24             	mov    %edi,(%esp)
  808d9a:	e8 3a fe ff ff       	call   808bd9 <tcp_abort>
  808d9f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  808da6:	e8 b4 e5 ff ff       	call   80735f <memp_malloc>
  808dab:	89 c3                	mov    %eax,%ebx
  808dad:	85 c0                	test   %eax,%eax
  808daf:	0f 84 ad 00 00 00    	je     808e62 <tcp_alloc+0x182>
  808db5:	c7 44 24 08 a8 00 00 	movl   $0xa8,0x8(%esp)
  808dbc:	00 
  808dbd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  808dc4:	00 
  808dc5:	89 1c 24             	mov    %ebx,(%esp)
  808dc8:	e8 c4 83 ff ff       	call   801191 <memset>
  808dcd:	c6 43 14 40          	movb   $0x40,0x14(%ebx)
  808dd1:	66 c7 43 6e 40 5b    	movw   $0x5b40,0x6e(%ebx)
  808dd7:	66 c7 43 70 00 00    	movw   $0x0,0x70(%ebx)
  808ddd:	66 c7 43 28 c0 5d    	movw   $0x5dc0,0x28(%ebx)
  808de3:	66 c7 43 2a c0 5d    	movw   $0x5dc0,0x2a(%ebx)
  808de9:	c6 43 0a 00          	movb   $0x0,0xa(%ebx)
  808ded:	c6 43 0b ff          	movb   $0xff,0xb(%ebx)
  808df1:	66 c7 43 34 18 02    	movw   $0x218,0x34(%ebx)
  808df7:	66 c7 43 44 06 00    	movw   $0x6,0x44(%ebx)
  808dfd:	66 c7 43 40 00 00    	movw   $0x0,0x40(%ebx)
  808e03:	66 c7 43 42 06 00    	movw   $0x6,0x42(%ebx)
  808e09:	66 c7 43 32 ff ff    	movw   $0xffff,0x32(%ebx)
  808e0f:	66 c7 43 4e 01 00    	movw   $0x1,0x4e(%ebx)
  808e15:	e8 65 f6 ff ff       	call   80847f <tcp_next_iss>
  808e1a:	89 43 64             	mov    %eax,0x64(%ebx)
  808e1d:	89 43 54             	mov    %eax,0x54(%ebx)
  808e20:	89 43 58             	mov    %eax,0x58(%ebx)
  808e23:	89 43 48             	mov    %eax,0x48(%ebx)
  808e26:	89 43 68             	mov    %eax,0x68(%ebx)
  808e29:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  808e2e:	89 43 2c             	mov    %eax,0x2c(%ebx)
  808e31:	c6 43 30 00          	movb   $0x0,0x30(%ebx)
  808e35:	c7 83 88 00 00 00 61 	movl   $0x809461,0x88(%ebx)
  808e3c:	94 80 00 
  808e3f:	c7 83 9c 00 00 00 00 	movl   $0x6ddd00,0x9c(%ebx)
  808e46:	dd 6d 00 
  808e49:	c6 83 a5 00 00 00 00 	movb   $0x0,0xa5(%ebx)
  808e50:	eb 10                	jmp    808e62 <tcp_alloc+0x182>
  808e52:	8b 35 cc e5 b3 00    	mov    0xb3e5cc,%esi
  808e58:	89 f3                	mov    %esi,%ebx
  808e5a:	2b 59 2c             	sub    0x2c(%ecx),%ebx
  808e5d:	e9 be fe ff ff       	jmp    808d20 <tcp_alloc+0x40>
  808e62:	89 d8                	mov    %ebx,%eax
  808e64:	83 c4 1c             	add    $0x1c,%esp
  808e67:	5b                   	pop    %ebx
  808e68:	5e                   	pop    %esi
  808e69:	5f                   	pop    %edi
  808e6a:	5d                   	pop    %ebp
  808e6b:	c3                   	ret    

00808e6c <tcp_new>:
  808e6c:	55                   	push   %ebp
  808e6d:	89 e5                	mov    %esp,%ebp
  808e6f:	83 ec 08             	sub    $0x8,%esp
  808e72:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  808e79:	e8 62 fe ff ff       	call   808ce0 <tcp_alloc>
  808e7e:	c9                   	leave  
  808e7f:	c3                   	ret    

00808e80 <tcp_slowtmr>:
  808e80:	55                   	push   %ebp
  808e81:	89 e5                	mov    %esp,%ebp
  808e83:	57                   	push   %edi
  808e84:	56                   	push   %esi
  808e85:	53                   	push   %ebx
  808e86:	83 ec 1c             	sub    $0x1c,%esp
  808e89:	83 05 cc e5 b3 00 01 	addl   $0x1,0xb3e5cc
  808e90:	8b 35 c8 e5 b3 00    	mov    0xb3e5c8,%esi
  808e96:	85 f6                	test   %esi,%esi
  808e98:	0f 84 55 03 00 00    	je     8091f3 <tcp_slowtmr+0x373>
  808e9e:	8b 46 10             	mov    0x10(%esi),%eax
  808ea1:	85 c0                	test   %eax,%eax
  808ea3:	74 1e                	je     808ec3 <tcp_slowtmr+0x43>
  808ea5:	83 f8 01             	cmp    $0x1,%eax
  808ea8:	74 3a                	je     808ee4 <tcp_slowtmr+0x64>
  808eaa:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  808eb1:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  808eb5:	83 f8 0a             	cmp    $0xa,%eax
  808eb8:	75 67                	jne    808f21 <tcp_slowtmr+0xa1>
  808eba:	eb 49                	jmp    808f05 <tcp_slowtmr+0x85>
  808ebc:	8b 46 10             	mov    0x10(%esi),%eax
  808ebf:	85 c0                	test   %eax,%eax
  808ec1:	75 1c                	jne    808edf <tcp_slowtmr+0x5f>
  808ec3:	c7 44 24 08 3c 36 81 	movl   $0x81363c,0x8(%esp)
  808eca:	00 
  808ecb:	c7 44 24 04 36 02 00 	movl   $0x236,0x4(%esp)
  808ed2:	00 
  808ed3:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  808eda:	e8 ad 79 ff ff       	call   80088c <_panic>
  808edf:	83 f8 01             	cmp    $0x1,%eax
  808ee2:	75 1c                	jne    808f00 <tcp_slowtmr+0x80>
  808ee4:	c7 44 24 08 68 36 81 	movl   $0x813668,0x8(%esp)
  808eeb:	00 
  808eec:	c7 44 24 04 37 02 00 	movl   $0x237,0x4(%esp)
  808ef3:	00 
  808ef4:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  808efb:	e8 8c 79 ff ff       	call   80088c <_panic>
  808f00:	83 f8 0a             	cmp    $0xa,%eax
  808f03:	75 1c                	jne    808f21 <tcp_slowtmr+0xa1>
  808f05:	c7 44 24 08 94 36 81 	movl   $0x813694,0x8(%esp)
  808f0c:	00 
  808f0d:	c7 44 24 04 38 02 00 	movl   $0x238,0x4(%esp)
  808f14:	00 
  808f15:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  808f1c:	e8 6b 79 ff ff       	call   80088c <_panic>
  808f21:	83 f8 02             	cmp    $0x2,%eax
  808f24:	75 0a                	jne    808f30 <tcp_slowtmr+0xb0>
  808f26:	80 7e 46 06          	cmpb   $0x6,0x46(%esi)
  808f2a:	0f 84 92 03 00 00    	je     8092c2 <tcp_slowtmr+0x442>
  808f30:	bb 01 00 00 00       	mov    $0x1,%ebx
  808f35:	80 7e 46 0c          	cmpb   $0xc,0x46(%esi)
  808f39:	0f 84 ee 00 00 00    	je     80902d <tcp_slowtmr+0x1ad>
  808f3f:	80 be a4 00 00 00 00 	cmpb   $0x0,0xa4(%esi)
  808f46:	74 55                	je     808f9d <tcp_slowtmr+0x11d>
  808f48:	8b 86 a0 00 00 00    	mov    0xa0(%esi),%eax
  808f4e:	83 c0 01             	add    $0x1,%eax
  808f51:	89 86 a0 00 00 00    	mov    %eax,0xa0(%esi)
  808f57:	0f b6 96 a4 00 00 00 	movzbl 0xa4(%esi),%edx
  808f5e:	0f b6 92 c8 37 81 00 	movzbl 0x8137c8(%edx),%edx
  808f65:	39 d0                	cmp    %edx,%eax
  808f67:	0f 82 bb 00 00 00    	jb     809028 <tcp_slowtmr+0x1a8>
  808f6d:	c7 86 a0 00 00 00 00 	movl   $0x0,0xa0(%esi)
  808f74:	00 00 00 
  808f77:	0f b6 86 a4 00 00 00 	movzbl 0xa4(%esi),%eax
  808f7e:	3c 06                	cmp    $0x6,%al
  808f80:	77 09                	ja     808f8b <tcp_slowtmr+0x10b>
  808f82:	83 c0 01             	add    $0x1,%eax
  808f85:	88 86 a4 00 00 00    	mov    %al,0xa4(%esi)
  808f8b:	89 34 24             	mov    %esi,(%esp)
  808f8e:	e8 1d 1b 00 00       	call   80aab0 <tcp_zero_window_probe>
  808f93:	bb 00 00 00 00       	mov    $0x0,%ebx
  808f98:	e9 90 00 00 00       	jmp    80902d <tcp_slowtmr+0x1ad>
  808f9d:	0f b7 46 32          	movzwl 0x32(%esi),%eax
  808fa1:	66 85 c0             	test   %ax,%ax
  808fa4:	78 07                	js     808fad <tcp_slowtmr+0x12d>
  808fa6:	83 c0 01             	add    $0x1,%eax
  808fa9:	66 89 46 32          	mov    %ax,0x32(%esi)
  808fad:	83 7e 78 00          	cmpl   $0x0,0x78(%esi)
  808fb1:	74 75                	je     809028 <tcp_slowtmr+0x1a8>
  808fb3:	0f b7 46 32          	movzwl 0x32(%esi),%eax
  808fb7:	66 3b 46 44          	cmp    0x44(%esi),%ax
  808fbb:	7c 6b                	jl     809028 <tcp_slowtmr+0x1a8>
  808fbd:	83 7e 10 02          	cmpl   $0x2,0x10(%esi)
  808fc1:	74 20                	je     808fe3 <tcp_slowtmr+0x163>
  808fc3:	0f b7 46 40          	movzwl 0x40(%esi),%eax
  808fc7:	66 c1 f8 03          	sar    $0x3,%ax
  808fcb:	98                   	cwtl   
  808fcc:	0f bf 56 42          	movswl 0x42(%esi),%edx
  808fd0:	01 d0                	add    %edx,%eax
  808fd2:	0f b6 56 46          	movzbl 0x46(%esi),%edx
  808fd6:	0f b6 8a bc 37 81 00 	movzbl 0x8137bc(%edx),%ecx
  808fdd:	d3 e0                	shl    %cl,%eax
  808fdf:	66 89 46 44          	mov    %ax,0x44(%esi)
  808fe3:	66 c7 46 32 00 00    	movw   $0x0,0x32(%esi)
  808fe9:	0f b7 56 5c          	movzwl 0x5c(%esi),%edx
  808fed:	0f b7 46 4e          	movzwl 0x4e(%esi),%eax
  808ff1:	66 39 d0             	cmp    %dx,%ax
  808ff4:	76 02                	jbe    808ff8 <tcp_slowtmr+0x178>
  808ff6:	89 d0                	mov    %edx,%eax
  808ff8:	66 d1 e8             	shr    %ax
  808ffb:	66 89 46 50          	mov    %ax,0x50(%esi)
  808fff:	0f b7 56 34          	movzwl 0x34(%esi),%edx
  809003:	66 39 d0             	cmp    %dx,%ax
  809006:	73 09                	jae    809011 <tcp_slowtmr+0x191>
  809008:	0f b7 c2             	movzwl %dx,%eax
  80900b:	01 c0                	add    %eax,%eax
  80900d:	66 89 46 50          	mov    %ax,0x50(%esi)
  809011:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  809015:	66 89 46 4e          	mov    %ax,0x4e(%esi)
  809019:	89 34 24             	mov    %esi,(%esp)
  80901c:	e8 0b 24 00 00       	call   80b42c <tcp_rexmit_rto>
  809021:	bb 00 00 00 00       	mov    $0x0,%ebx
  809026:	eb 05                	jmp    80902d <tcp_slowtmr+0x1ad>
  809028:	bb 00 00 00 00       	mov    $0x0,%ebx
  80902d:	8b 56 10             	mov    0x10(%esi),%edx
  809030:	83 fa 06             	cmp    $0x6,%edx
  809033:	75 0e                	jne    809043 <tcp_slowtmr+0x1c3>
  809035:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  80903a:	2b 46 2c             	sub    0x2c(%esi),%eax
  80903d:	83 f8 29             	cmp    $0x29,%eax
  809040:	80 db ff             	sbb    $0xff,%bl
  809043:	f6 46 08 08          	testb  $0x8,0x8(%esi)
  809047:	74 64                	je     8090ad <tcp_slowtmr+0x22d>
  809049:	83 fa 04             	cmp    $0x4,%edx
  80904c:	74 05                	je     809053 <tcp_slowtmr+0x1d3>
  80904e:	83 fa 07             	cmp    $0x7,%edx
  809051:	75 5a                	jne    8090ad <tcp_slowtmr+0x22d>
  809053:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  809058:	89 c7                	mov    %eax,%edi
  80905a:	2b 7e 2c             	sub    0x2c(%esi),%edi
  80905d:	8b 8e 9c 00 00 00    	mov    0x9c(%esi),%ecx
  809063:	8d 91 b8 4c 0a 00    	lea    0xa4cb8(%ecx),%edx
  809069:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  80906e:	f7 e2                	mul    %edx
  809070:	c1 ea 05             	shr    $0x5,%edx
  809073:	39 d7                	cmp    %edx,%edi
  809075:	76 0a                	jbe    809081 <tcp_slowtmr+0x201>
  809077:	89 34 24             	mov    %esi,(%esp)
  80907a:	e8 5a fb ff ff       	call   808bd9 <tcp_abort>
  80907f:	eb 2c                	jmp    8090ad <tcp_slowtmr+0x22d>
  809081:	0f b6 96 a5 00 00 00 	movzbl 0xa5(%esi),%edx
  809088:	69 d2 f8 24 01 00    	imul   $0x124f8,%edx,%edx
  80908e:	01 ca                	add    %ecx,%edx
  809090:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
  809095:	f7 e2                	mul    %edx
  809097:	c1 ea 05             	shr    $0x5,%edx
  80909a:	39 d7                	cmp    %edx,%edi
  80909c:	76 0f                	jbe    8090ad <tcp_slowtmr+0x22d>
  80909e:	89 34 24             	mov    %esi,(%esp)
  8090a1:	e8 81 1b 00 00       	call   80ac27 <tcp_keepalive>
  8090a6:	80 86 a5 00 00 00 01 	addb   $0x1,0xa5(%esi)
  8090ad:	8b 4e 7c             	mov    0x7c(%esi),%ecx
  8090b0:	85 c9                	test   %ecx,%ecx
  8090b2:	74 25                	je     8090d9 <tcp_slowtmr+0x259>
  8090b4:	8b 15 cc e5 b3 00    	mov    0xb3e5cc,%edx
  8090ba:	2b 56 2c             	sub    0x2c(%esi),%edx
  8090bd:	0f bf 46 44          	movswl 0x44(%esi),%eax
  8090c1:	8d 04 40             	lea    (%eax,%eax,2),%eax
  8090c4:	01 c0                	add    %eax,%eax
  8090c6:	39 c2                	cmp    %eax,%edx
  8090c8:	72 0f                	jb     8090d9 <tcp_slowtmr+0x259>
  8090ca:	89 0c 24             	mov    %ecx,(%esp)
  8090cd:	e8 99 f5 ff ff       	call   80866b <tcp_segs_free>
  8090d2:	c7 46 7c 00 00 00 00 	movl   $0x0,0x7c(%esi)
  8090d9:	8b 46 10             	mov    0x10(%esi),%eax
  8090dc:	83 f8 03             	cmp    $0x3,%eax
  8090df:	75 12                	jne    8090f3 <tcp_slowtmr+0x273>
  8090e1:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  8090e6:	2b 46 2c             	sub    0x2c(%esi),%eax
  8090e9:	83 f8 28             	cmp    $0x28,%eax
  8090ec:	76 1a                	jbe    809108 <tcp_slowtmr+0x288>
  8090ee:	83 c3 01             	add    $0x1,%ebx
  8090f1:	eb 15                	jmp    809108 <tcp_slowtmr+0x288>
  8090f3:	83 f8 09             	cmp    $0x9,%eax
  8090f6:	75 10                	jne    809108 <tcp_slowtmr+0x288>
  8090f8:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  8090fd:	2b 46 2c             	sub    0x2c(%esi),%eax
  809100:	3d f1 00 00 00       	cmp    $0xf1,%eax
  809105:	80 db ff             	sbb    $0xff,%bl
  809108:	84 db                	test   %bl,%bl
  80910a:	0f 84 9b 00 00 00    	je     8091ab <tcp_slowtmr+0x32b>
  809110:	89 34 24             	mov    %esi,(%esp)
  809113:	e8 8a f5 ff ff       	call   8086a2 <tcp_pcb_purge>
  809118:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  80911c:	74 2f                	je     80914d <tcp_slowtmr+0x2cd>
  80911e:	3b 35 c8 e5 b3 00    	cmp    0xb3e5c8,%esi
  809124:	75 1c                	jne    809142 <tcp_slowtmr+0x2c2>
  809126:	c7 44 24 08 c4 36 81 	movl   $0x8136c4,0x8(%esp)
  80912d:	00 
  80912e:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
  809135:	00 
  809136:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  80913d:	e8 4a 77 ff ff       	call   80088c <_panic>
  809142:	8b 46 0c             	mov    0xc(%esi),%eax
  809145:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  809148:	89 42 0c             	mov    %eax,0xc(%edx)
  80914b:	eb 2d                	jmp    80917a <tcp_slowtmr+0x2fa>
  80914d:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  809152:	39 f0                	cmp    %esi,%eax
  809154:	74 1c                	je     809172 <tcp_slowtmr+0x2f2>
  809156:	c7 44 24 08 f0 36 81 	movl   $0x8136f0,0x8(%esp)
  80915d:	00 
  80915e:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
  809165:	00 
  809166:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  80916d:	e8 1a 77 ff ff       	call   80088c <_panic>
  809172:	8b 40 0c             	mov    0xc(%eax),%eax
  809175:	a3 c8 e5 b3 00       	mov    %eax,0xb3e5c8
  80917a:	8b 96 98 00 00 00    	mov    0x98(%esi),%edx
  809180:	85 d2                	test   %edx,%edx
  809182:	74 10                	je     809194 <tcp_slowtmr+0x314>
  809184:	c7 44 24 04 fb ff ff 	movl   $0xfffffffb,0x4(%esp)
  80918b:	ff 
  80918c:	8b 46 18             	mov    0x18(%esi),%eax
  80918f:	89 04 24             	mov    %eax,(%esp)
  809192:	ff d2                	call   *%edx
  809194:	8b 5e 0c             	mov    0xc(%esi),%ebx
  809197:	89 74 24 04          	mov    %esi,0x4(%esp)
  80919b:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8091a2:	e8 75 e1 ff ff       	call   80731c <memp_free>
  8091a7:	89 de                	mov    %ebx,%esi
  8091a9:	eb 40                	jmp    8091eb <tcp_slowtmr+0x36b>
  8091ab:	0f b6 46 30          	movzbl 0x30(%esi),%eax
  8091af:	83 c0 01             	add    $0x1,%eax
  8091b2:	88 46 30             	mov    %al,0x30(%esi)
  8091b5:	3a 46 31             	cmp    0x31(%esi),%al
  8091b8:	72 2b                	jb     8091e5 <tcp_slowtmr+0x365>
  8091ba:	c6 46 30 00          	movb   $0x0,0x30(%esi)
  8091be:	8b 96 94 00 00 00    	mov    0x94(%esi),%edx
  8091c4:	85 d2                	test   %edx,%edx
  8091c6:	74 0f                	je     8091d7 <tcp_slowtmr+0x357>
  8091c8:	89 74 24 04          	mov    %esi,0x4(%esp)
  8091cc:	8b 46 18             	mov    0x18(%esi),%eax
  8091cf:	89 04 24             	mov    %eax,(%esp)
  8091d2:	ff d2                	call   *%edx
  8091d4:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  8091d7:	80 7d f3 00          	cmpb   $0x0,0xfffffff3(%ebp)
  8091db:	75 08                	jne    8091e5 <tcp_slowtmr+0x365>
  8091dd:	89 34 24             	mov    %esi,(%esp)
  8091e0:	e8 00 1d 00 00       	call   80aee5 <tcp_output>
  8091e5:	89 75 ec             	mov    %esi,0xffffffec(%ebp)
  8091e8:	8b 76 0c             	mov    0xc(%esi),%esi
  8091eb:	85 f6                	test   %esi,%esi
  8091ed:	0f 85 c9 fc ff ff    	jne    808ebc <tcp_slowtmr+0x3c>
  8091f3:	8b 35 dc e5 b3 00    	mov    0xb3e5dc,%esi
  8091f9:	85 f6                	test   %esi,%esi
  8091fb:	0f 84 e1 00 00 00    	je     8092e2 <tcp_slowtmr+0x462>
  809201:	bf 00 00 00 00       	mov    $0x0,%edi
  809206:	83 7e 10 0a          	cmpl   $0xa,0x10(%esi)
  80920a:	74 24                	je     809230 <tcp_slowtmr+0x3b0>
  80920c:	eb 06                	jmp    809214 <tcp_slowtmr+0x394>
  80920e:	83 7e 10 0a          	cmpl   $0xa,0x10(%esi)
  809212:	74 1c                	je     809230 <tcp_slowtmr+0x3b0>
  809214:	c7 44 24 08 1c 37 81 	movl   $0x81371c,0x8(%esp)
  80921b:	00 
  80921c:	c7 44 24 04 e5 02 00 	movl   $0x2e5,0x4(%esp)
  809223:	00 
  809224:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  80922b:	e8 5c 76 ff ff       	call   80088c <_panic>
  809230:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  809235:	2b 46 2c             	sub    0x2c(%esi),%eax
  809238:	3d f0 00 00 00       	cmp    $0xf0,%eax
  80923d:	0f 87 8c 00 00 00    	ja     8092cf <tcp_slowtmr+0x44f>
  809243:	89 f7                	mov    %esi,%edi
  809245:	8b 76 0c             	mov    0xc(%esi),%esi
  809248:	eb 6e                	jmp    8092b8 <tcp_slowtmr+0x438>
  80924a:	3b 35 dc e5 b3 00    	cmp    0xb3e5dc,%esi
  809250:	75 1c                	jne    80926e <tcp_slowtmr+0x3ee>
  809252:	c7 44 24 08 4c 37 81 	movl   $0x81374c,0x8(%esp)
  809259:	00 
  80925a:	c7 44 24 04 f4 02 00 	movl   $0x2f4,0x4(%esp)
  809261:	00 
  809262:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  809269:	e8 1e 76 ff ff       	call   80088c <_panic>
  80926e:	8b 46 0c             	mov    0xc(%esi),%eax
  809271:	89 47 0c             	mov    %eax,0xc(%edi)
  809274:	eb 2d                	jmp    8092a3 <tcp_slowtmr+0x423>
  809276:	a1 dc e5 b3 00       	mov    0xb3e5dc,%eax
  80927b:	39 f0                	cmp    %esi,%eax
  80927d:	74 1c                	je     80929b <tcp_slowtmr+0x41b>
  80927f:	c7 44 24 08 74 37 81 	movl   $0x813774,0x8(%esp)
  809286:	00 
  809287:	c7 44 24 04 f8 02 00 	movl   $0x2f8,0x4(%esp)
  80928e:	00 
  80928f:	c7 04 24 73 35 81 00 	movl   $0x813573,(%esp)
  809296:	e8 f1 75 ff ff       	call   80088c <_panic>
  80929b:	8b 40 0c             	mov    0xc(%eax),%eax
  80929e:	a3 dc e5 b3 00       	mov    %eax,0xb3e5dc
  8092a3:	8b 5e 0c             	mov    0xc(%esi),%ebx
  8092a6:	89 74 24 04          	mov    %esi,0x4(%esp)
  8092aa:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8092b1:	e8 66 e0 ff ff       	call   80731c <memp_free>
  8092b6:	89 de                	mov    %ebx,%esi
  8092b8:	85 f6                	test   %esi,%esi
  8092ba:	0f 85 4e ff ff ff    	jne    80920e <tcp_slowtmr+0x38e>
  8092c0:	eb 20                	jmp    8092e2 <tcp_slowtmr+0x462>
  8092c2:	8b 56 10             	mov    0x10(%esi),%edx
  8092c5:	bb 01 00 00 00       	mov    $0x1,%ebx
  8092ca:	e9 74 fd ff ff       	jmp    809043 <tcp_slowtmr+0x1c3>
  8092cf:	89 34 24             	mov    %esi,(%esp)
  8092d2:	e8 cb f3 ff ff       	call   8086a2 <tcp_pcb_purge>
  8092d7:	85 ff                	test   %edi,%edi
  8092d9:	0f 85 6b ff ff ff    	jne    80924a <tcp_slowtmr+0x3ca>
  8092df:	90                   	nop    
  8092e0:	eb 94                	jmp    809276 <tcp_slowtmr+0x3f6>
  8092e2:	83 c4 1c             	add    $0x1c,%esp
  8092e5:	5b                   	pop    %ebx
  8092e6:	5e                   	pop    %esi
  8092e7:	5f                   	pop    %edi
  8092e8:	5d                   	pop    %ebp
  8092e9:	c3                   	ret    

008092ea <tcp_tmr>:
  8092ea:	55                   	push   %ebp
  8092eb:	89 e5                	mov    %esp,%ebp
  8092ed:	83 ec 08             	sub    $0x8,%esp
  8092f0:	e8 63 f2 ff ff       	call   808558 <tcp_fasttmr>
  8092f5:	0f b6 05 68 77 b3 00 	movzbl 0xb37768,%eax
  8092fc:	83 c0 01             	add    $0x1,%eax
  8092ff:	a2 68 77 b3 00       	mov    %al,0xb37768
  809304:	a8 01                	test   $0x1,%al
  809306:	74 05                	je     80930d <tcp_tmr+0x23>
  809308:	e8 73 fb ff ff       	call   808e80 <tcp_slowtmr>
  80930d:	c9                   	leave  
  80930e:	c3                   	ret    

0080930f <tcp_close>:
  80930f:	55                   	push   %ebp
  809310:	89 e5                	mov    %esp,%ebp
  809312:	53                   	push   %ebx
  809313:	83 ec 14             	sub    $0x14,%esp
  809316:	8b 5d 08             	mov    0x8(%ebp),%ebx
  809319:	83 7b 10 07          	cmpl   $0x7,0x10(%ebx)
  80931d:	77 0a                	ja     809329 <tcp_close+0x1a>
  80931f:	8b 43 10             	mov    0x10(%ebx),%eax
  809322:	ff 24 85 9c 37 81 00 	jmp    *0x81379c(,%eax,4)
  809329:	bb 00 00 00 00       	mov    $0x0,%ebx
  80932e:	e9 01 01 00 00       	jmp    809434 <tcp_close+0x125>
  809333:	8b 15 d8 e5 b3 00    	mov    0xb3e5d8,%edx
  809339:	39 da                	cmp    %ebx,%edx
  80933b:	75 0a                	jne    809347 <tcp_close+0x38>
  80933d:	8b 42 0c             	mov    0xc(%edx),%eax
  809340:	a3 d8 e5 b3 00       	mov    %eax,0xb3e5d8
  809345:	eb 26                	jmp    80936d <tcp_close+0x5e>
  809347:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  80934d:	85 d2                	test   %edx,%edx
  80934f:	74 1c                	je     80936d <tcp_close+0x5e>
  809351:	8b 42 0c             	mov    0xc(%edx),%eax
  809354:	85 c0                	test   %eax,%eax
  809356:	74 10                	je     809368 <tcp_close+0x59>
  809358:	39 c3                	cmp    %eax,%ebx
  80935a:	0f 85 ec 00 00 00    	jne    80944c <tcp_close+0x13d>
  809360:	8b 40 0c             	mov    0xc(%eax),%eax
  809363:	89 42 0c             	mov    %eax,0xc(%edx)
  809366:	eb 05                	jmp    80936d <tcp_close+0x5e>
  809368:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  80936d:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
  809374:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809378:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80937f:	e8 98 df ff ff       	call   80731c <memp_free>
  809384:	b8 00 00 00 00       	mov    $0x0,%eax
  809389:	e9 ca 00 00 00       	jmp    809458 <tcp_close+0x149>
  80938e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809392:	c7 04 24 d0 e5 b3 00 	movl   $0xb3e5d0,(%esp)
  809399:	e8 7d f3 ff ff       	call   80871b <tcp_pcb_remove>
  80939e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8093a2:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  8093a9:	e8 6e df ff ff       	call   80731c <memp_free>
  8093ae:	b8 00 00 00 00       	mov    $0x0,%eax
  8093b3:	e9 a0 00 00 00       	jmp    809458 <tcp_close+0x149>
  8093b8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8093bc:	c7 04 24 c8 e5 b3 00 	movl   $0xb3e5c8,(%esp)
  8093c3:	e8 53 f3 ff ff       	call   80871b <tcp_pcb_remove>
  8093c8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8093cc:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8093d3:	e8 44 df ff ff       	call   80731c <memp_free>
  8093d8:	b8 00 00 00 00       	mov    $0x0,%eax
  8093dd:	eb 79                	jmp    809458 <tcp_close+0x149>
  8093df:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  8093e6:	00 
  8093e7:	89 1c 24             	mov    %ebx,(%esp)
  8093ea:	e8 f4 27 00 00       	call   80bbe3 <tcp_send_ctrl>
  8093ef:	84 c0                	test   %al,%al
  8093f1:	75 65                	jne    809458 <tcp_close+0x149>
  8093f3:	c7 43 10 05 00 00 00 	movl   $0x5,0x10(%ebx)
  8093fa:	eb 38                	jmp    809434 <tcp_close+0x125>
  8093fc:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  809403:	00 
  809404:	89 1c 24             	mov    %ebx,(%esp)
  809407:	e8 d7 27 00 00       	call   80bbe3 <tcp_send_ctrl>
  80940c:	84 c0                	test   %al,%al
  80940e:	75 48                	jne    809458 <tcp_close+0x149>
  809410:	c7 43 10 05 00 00 00 	movl   $0x5,0x10(%ebx)
  809417:	eb 1b                	jmp    809434 <tcp_close+0x125>
  809419:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  809420:	00 
  809421:	89 1c 24             	mov    %ebx,(%esp)
  809424:	e8 ba 27 00 00       	call   80bbe3 <tcp_send_ctrl>
  809429:	84 c0                	test   %al,%al
  80942b:	75 2b                	jne    809458 <tcp_close+0x149>
  80942d:	c7 43 10 09 00 00 00 	movl   $0x9,0x10(%ebx)
  809434:	b8 00 00 00 00       	mov    $0x0,%eax
  809439:	85 db                	test   %ebx,%ebx
  80943b:	74 1b                	je     809458 <tcp_close+0x149>
  80943d:	89 1c 24             	mov    %ebx,(%esp)
  809440:	e8 a0 1a 00 00       	call   80aee5 <tcp_output>
  809445:	b8 00 00 00 00       	mov    $0x0,%eax
  80944a:	eb 0c                	jmp    809458 <tcp_close+0x149>
  80944c:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  809451:	89 c2                	mov    %eax,%edx
  809453:	e9 f9 fe ff ff       	jmp    809351 <tcp_close+0x42>
  809458:	0f be c0             	movsbl %al,%eax
  80945b:	83 c4 14             	add    $0x14,%esp
  80945e:	5b                   	pop    %ebx
  80945f:	5d                   	pop    %ebp
  809460:	c3                   	ret    

00809461 <tcp_recv_null>:
  809461:	55                   	push   %ebp
  809462:	89 e5                	mov    %esp,%ebp
  809464:	83 ec 08             	sub    $0x8,%esp
  809467:	8b 45 10             	mov    0x10(%ebp),%eax
  80946a:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
  80946e:	85 c0                	test   %eax,%eax
  809470:	74 0f                	je     809481 <tcp_recv_null+0x20>
  809472:	89 04 24             	mov    %eax,(%esp)
  809475:	e8 1a e6 ff ff       	call   807a94 <pbuf_free>
  80947a:	b8 00 00 00 00       	mov    $0x0,%eax
  80947f:	eb 17                	jmp    809498 <tcp_recv_null+0x37>
  809481:	b8 00 00 00 00       	mov    $0x0,%eax
  809486:	84 d2                	test   %dl,%dl
  809488:	75 0e                	jne    809498 <tcp_recv_null+0x37>
  80948a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80948d:	89 04 24             	mov    %eax,(%esp)
  809490:	e8 7a fe ff ff       	call   80930f <tcp_close>
  809495:	0f be c0             	movsbl %al,%eax
  809498:	c9                   	leave  
  809499:	c3                   	ret    
	...

0080949c <ip_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t ip_addr_isbroadcast(struct ip_addr *addr, struct netif *netif)
{
  80949c:	55                   	push   %ebp
  80949d:	89 e5                	mov    %esp,%ebp
  80949f:	53                   	push   %ebx
  8094a0:	8b 55 0c             	mov    0xc(%ebp),%edx
  u32_t addr2test;

  addr2test = addr->addr;
  8094a3:	8b 45 08             	mov    0x8(%ebp),%eax
  8094a6:	8b 18                	mov    (%eax),%ebx
  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr2test == IP_ADDR_ANY_VALUE) ||
  8094a8:	8d 43 ff             	lea    0xffffffff(%ebx),%eax
  8094ab:	b9 01 00 00 00       	mov    $0x1,%ecx
  8094b0:	83 f8 fd             	cmp    $0xfffffffd,%eax
  8094b3:	77 31                	ja     8094e6 <ip_addr_isbroadcast+0x4a>
      (addr2test == IP_ADDR_ANY_VALUE))
    return 1;
  /* no broadcast support on this network interface? */
  else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0)
  8094b5:	f6 42 2e 02          	testb  $0x2,0x2e(%edx)
  8094b9:	74 26                	je     8094e1 <ip_addr_isbroadcast+0x45>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  else if (addr2test == netif->ip_addr.addr)
  8094bb:	8b 42 04             	mov    0x4(%edx),%eax
  8094be:	39 d8                	cmp    %ebx,%eax
  8094c0:	74 1f                	je     8094e1 <ip_addr_isbroadcast+0x45>
    return 0;
  /*  on the same (sub) network... */
  else if (ip_addr_netcmp(addr, &(netif->ip_addr), &(netif->netmask))
  8094c2:	8b 4a 08             	mov    0x8(%edx),%ecx
  8094c5:	89 ca                	mov    %ecx,%edx
  8094c7:	21 da                	and    %ebx,%edx
  8094c9:	21 c8                	and    %ecx,%eax
  8094cb:	39 c2                	cmp    %eax,%edx
  8094cd:	75 12                	jne    8094e1 <ip_addr_isbroadcast+0x45>
  8094cf:	89 c8                	mov    %ecx,%eax
  8094d1:	f7 d0                	not    %eax
  8094d3:	89 c2                	mov    %eax,%edx
  8094d5:	21 da                	and    %ebx,%edx
  8094d7:	39 d0                	cmp    %edx,%eax
  8094d9:	0f 94 c0             	sete   %al
  8094dc:	0f b6 c8             	movzbl %al,%ecx
  8094df:	eb 05                	jmp    8094e6 <ip_addr_isbroadcast+0x4a>
  8094e1:	b9 00 00 00 00       	mov    $0x0,%ecx
         /* ...and host identifier bits are all ones? =>... */
          && ((addr2test & ~netif->netmask.addr) ==
           (IP_ADDR_BROADCAST_VALUE & ~netif->netmask.addr)))
    /* => network broadcast address */
    return 1;
  else
    return 0;
}
  8094e6:	89 c8                	mov    %ecx,%eax
  8094e8:	5b                   	pop    %ebx
  8094e9:	5d                   	pop    %ebp
  8094ea:	c3                   	ret    
  8094eb:	00 00                	add    %al,(%eax)
  8094ed:	00 00                	add    %al,(%eax)
	...

008094f0 <ip_output_if>:
err_t
ip_output_if(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  8094f0:	55                   	push   %ebp
  8094f1:	89 e5                	mov    %esp,%ebp
  8094f3:	83 ec 28             	sub    $0x28,%esp
  8094f6:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  8094f9:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  8094fc:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  8094ff:	8b 75 08             	mov    0x8(%ebp),%esi
  809502:	8b 5d 10             	mov    0x10(%ebp),%ebx
  809505:	0f b6 7d 14          	movzbl 0x14(%ebp),%edi
  809509:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  80950d:	88 45 ef             	mov    %al,0xffffffef(%ebp)
  809510:	0f b6 55 1c          	movzbl 0x1c(%ebp),%edx
  809514:	88 55 ee             	mov    %dl,0xffffffee(%ebp)
  struct ip_hdr *iphdr;
  static u16_t ip_id = 0;

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  809517:	85 db                	test   %ebx,%ebx
  809519:	0f 84 2e 01 00 00    	je     80964d <ip_output_if+0x15d>
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  80951f:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  809526:	00 
  809527:	89 34 24             	mov    %esi,(%esp)
  80952a:	e8 f9 e1 ff ff       	call   807728 <pbuf_header>
  80952f:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
  809534:	84 c0                	test   %al,%al
  809536:	0f 85 52 01 00 00    	jne    80968e <ip_output_if+0x19e>
      LWIP_DEBUGF(IP_DEBUG | 2, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
    }

    iphdr = p->payload;
  80953c:	8b 46 04             	mov    0x4(%esi),%eax
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  80953f:	66 83 7e 0a 13       	cmpw   $0x13,0xa(%esi)
  809544:	77 1c                	ja     809562 <ip_output_if+0x72>
  809546:	c7 44 24 08 d8 37 81 	movl   $0x8137d8,0x8(%esp)
  80954d:	00 
  80954e:	c7 44 24 04 ee 01 00 	movl   $0x1ee,0x4(%esp)
  809555:	00 
  809556:	c7 04 24 05 38 81 00 	movl   $0x813805,(%esp)
  80955d:	e8 2a 73 ff ff       	call   80088c <_panic>
  809562:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  809565:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  809569:	89 04 24             	mov    %eax,(%esp)
  80956c:	e8 04 13 00 00       	call   80a875 <ntohs>
  809571:	66 25 ff 00          	and    $0xff,%ax
  809575:	89 fa                	mov    %edi,%edx
  809577:	c1 e2 08             	shl    $0x8,%edx
  80957a:	09 c2                	or     %eax,%edx
  80957c:	0f b7 d2             	movzwl %dx,%edx
  80957f:	89 14 24             	mov    %edx,(%esp)
  809582:	e8 d8 12 00 00       	call   80a85f <htons>
  809587:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80958a:	66 89 42 08          	mov    %ax,0x8(%edx)
    IPH_PROTO_SET(iphdr, proto);
  80958e:	0f b7 c0             	movzwl %ax,%eax
  809591:	89 04 24             	mov    %eax,(%esp)
  809594:	e8 dc 12 00 00       	call   80a875 <ntohs>
  809599:	25 00 ff 00 00       	and    $0xff00,%eax
  80959e:	66 0f b6 55 ee       	movzbw 0xffffffee(%ebp),%dx
  8095a3:	09 c2                	or     %eax,%edx
  8095a5:	0f b7 d2             	movzwl %dx,%edx
  8095a8:	89 14 24             	mov    %edx,(%esp)
  8095ab:	e8 af 12 00 00       	call   80a85f <htons>
  8095b0:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8095b3:	66 89 42 08          	mov    %ax,0x8(%edx)

    ip_addr_set(&(iphdr->dest), dest);
  8095b7:	8b 03                	mov    (%ebx),%eax
  8095b9:	89 42 10             	mov    %eax,0x10(%edx)

    IPH_VHLTOS_SET(iphdr, 4, IP_HLEN / 4, tos);
  8095bc:	0f b6 45 ef          	movzbl 0xffffffef(%ebp),%eax
  8095c0:	80 cc 45             	or     $0x45,%ah
  8095c3:	89 04 24             	mov    %eax,(%esp)
  8095c6:	e8 94 12 00 00       	call   80a85f <htons>
  8095cb:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8095ce:	66 89 02             	mov    %ax,(%edx)
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  8095d1:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  8095d5:	89 04 24             	mov    %eax,(%esp)
  8095d8:	e8 82 12 00 00       	call   80a85f <htons>
  8095dd:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8095e0:	66 89 42 02          	mov    %ax,0x2(%edx)
    IPH_OFFSET_SET(iphdr, 0);
  8095e4:	66 c7 42 06 00 00    	movw   $0x0,0x6(%edx)
    IPH_ID_SET(iphdr, htons(ip_id));
  8095ea:	0f b7 05 6c 77 b3 00 	movzwl 0xb3776c,%eax
  8095f1:	89 04 24             	mov    %eax,(%esp)
  8095f4:	e8 66 12 00 00       	call   80a85f <htons>
  8095f9:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  8095fc:	66 89 42 04          	mov    %ax,0x4(%edx)
    ++ip_id;
  809600:	66 83 05 6c 77 b3 00 	addw   $0x1,0xb3776c
  809607:	01 

    if (ip_addr_isany(src)) {
  809608:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80960c:	74 09                	je     809617 <ip_output_if+0x127>
  80960e:	8b 55 0c             	mov    0xc(%ebp),%edx
  809611:	8b 02                	mov    (%edx),%eax
  809613:	85 c0                	test   %eax,%eax
  809615:	75 0e                	jne    809625 <ip_output_if+0x135>
      ip_addr_set(&(iphdr->src), &(netif->ip_addr));
  809617:	8b 55 20             	mov    0x20(%ebp),%edx
  80961a:	8b 42 04             	mov    0x4(%edx),%eax
  80961d:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809620:	89 42 0c             	mov    %eax,0xc(%edx)
  809623:	eb 06                	jmp    80962b <ip_output_if+0x13b>
    } else {
      ip_addr_set(&(iphdr->src), src);
  809625:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809628:	89 42 0c             	mov    %eax,0xc(%edx)
    }

    IPH_CHKSUM_SET(iphdr, 0);
  80962b:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80962e:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%eax)
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  809634:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80963b:	00 
  80963c:	89 04 24             	mov    %eax,(%esp)
  80963f:	e8 02 0f 00 00       	call   80a546 <inet_chksum>
  809644:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809647:	66 89 42 0a          	mov    %ax,0xa(%edx)
  80964b:	eb 06                	jmp    809653 <ip_output_if+0x163>
#endif
  } else {
    /* IP header already included in p */
    iphdr = p->payload;
    dest = &(iphdr->dest);
  80964d:	8b 5e 04             	mov    0x4(%esi),%ebx
  809650:	83 c3 10             	add    $0x10,%ebx
  }

#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu))
  809653:	8b 55 20             	mov    0x20(%ebp),%edx
  809656:	0f b7 42 2c          	movzwl 0x2c(%edx),%eax
  80965a:	66 85 c0             	test   %ax,%ax
  80965d:	74 1b                	je     80967a <ip_output_if+0x18a>
  80965f:	66 3b 46 08          	cmp    0x8(%esi),%ax
  809663:	73 15                	jae    80967a <ip_output_if+0x18a>
    return ip_frag(p,netif,dest);
  809665:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  809669:	89 54 24 04          	mov    %edx,0x4(%esp)
  80966d:	89 34 24             	mov    %esi,(%esp)
  809670:	e8 ab 03 00 00       	call   809a20 <ip_frag>
  809675:	0f be d0             	movsbl %al,%edx
  809678:	eb 14                	jmp    80968e <ip_output_if+0x19e>
#endif

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
  ip_debug_print(p);

#if (LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF)
  if (ip_addr_cmp(dest, &netif->ip_addr)) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));

    return netif_loop_output(netif, p, dest);
  } else
#endif /* (LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF) */
  {
    LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));

    return netif->output(netif, p, dest);
  80967a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80967e:	89 74 24 04          	mov    %esi,0x4(%esp)
  809682:	8b 45 20             	mov    0x20(%ebp),%eax
  809685:	89 04 24             	mov    %eax,(%esp)
  809688:	ff 50 14             	call   *0x14(%eax)
  80968b:	0f be d0             	movsbl %al,%edx
  }
}
  80968e:	89 d0                	mov    %edx,%eax
  809690:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  809693:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  809696:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  809699:	89 ec                	mov    %ebp,%esp
  80969b:	5d                   	pop    %ebp
  80969c:	c3                   	ret    

0080969d <ip_route>:
  80969d:	55                   	push   %ebp
  80969e:	89 e5                	mov    %esp,%ebp
  8096a0:	56                   	push   %esi
  8096a1:	53                   	push   %ebx
  8096a2:	83 ec 10             	sub    $0x10,%esp
  8096a5:	8b 75 08             	mov    0x8(%ebp),%esi
  8096a8:	8b 1d c0 e5 b3 00    	mov    0xb3e5c0,%ebx
  8096ae:	85 db                	test   %ebx,%ebx
  8096b0:	74 20                	je     8096d2 <ip_route+0x35>
  8096b2:	89 1c 24             	mov    %ebx,(%esp)
  8096b5:	e8 04 de ff ff       	call   8074be <netif_is_up>
  8096ba:	84 c0                	test   %al,%al
  8096bc:	74 0e                	je     8096cc <ip_route+0x2f>
  8096be:	8b 43 08             	mov    0x8(%ebx),%eax
  8096c1:	89 c2                	mov    %eax,%edx
  8096c3:	23 16                	and    (%esi),%edx
  8096c5:	23 43 04             	and    0x4(%ebx),%eax
  8096c8:	39 c2                	cmp    %eax,%edx
  8096ca:	74 28                	je     8096f4 <ip_route+0x57>
  8096cc:	8b 1b                	mov    (%ebx),%ebx
  8096ce:	85 db                	test   %ebx,%ebx
  8096d0:	75 e0                	jne    8096b2 <ip_route+0x15>
  8096d2:	a1 c4 e5 b3 00       	mov    0xb3e5c4,%eax
  8096d7:	85 c0                	test   %eax,%eax
  8096d9:	74 14                	je     8096ef <ip_route+0x52>
  8096db:	89 04 24             	mov    %eax,(%esp)
  8096de:	e8 db dd ff ff       	call   8074be <netif_is_up>
  8096e3:	84 c0                	test   %al,%al
  8096e5:	74 08                	je     8096ef <ip_route+0x52>
  8096e7:	8b 1d c4 e5 b3 00    	mov    0xb3e5c4,%ebx
  8096ed:	eb 05                	jmp    8096f4 <ip_route+0x57>
  8096ef:	bb 00 00 00 00       	mov    $0x0,%ebx
  8096f4:	89 d8                	mov    %ebx,%eax
  8096f6:	83 c4 10             	add    $0x10,%esp
  8096f9:	5b                   	pop    %ebx
  8096fa:	5e                   	pop    %esi
  8096fb:	5d                   	pop    %ebp
  8096fc:	c3                   	ret    

008096fd <ip_output>:

/**
 * Simple interface to ip_output_if. It finds the outgoing network
 * interface and calls upon ip_output_if to do the actual work.
 *
 * @param p the packet to send (p->payload points to the data, e.g. next
            protocol header; if dest == IP_HDRINCL, p already includes an IP
            header and p->payload points to that IP header)
 * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
 *         IP  address of the netif used to send is used as source address)
 * @param dest the destination IP address to send the packet to
 * @param ttl the TTL value to be set in the IP header
 * @param tos the TOS value to be set in the IP header
 * @param proto the PROTOCOL to be set in the IP header
 *
 * @return ERR_RTE if no route is found
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, struct ip_addr *src, struct ip_addr *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  8096fd:	55                   	push   %ebp
  8096fe:	89 e5                	mov    %esp,%ebp
  809700:	83 ec 28             	sub    $0x28,%esp
  809703:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  809706:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  809709:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80970c:	0f b6 7d 14          	movzbl 0x14(%ebp),%edi
  809710:	0f b6 75 18          	movzbl 0x18(%ebp),%esi
  809714:	0f b6 5d 1c          	movzbl 0x1c(%ebp),%ebx
  struct netif *netif;

  if ((netif = ip_route(dest)) == NULL) {
  809718:	8b 45 10             	mov    0x10(%ebp),%eax
  80971b:	89 04 24             	mov    %eax,(%esp)
  80971e:	e8 7a ff ff ff       	call   80969d <ip_route>
  809723:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
  809728:	85 c0                	test   %eax,%eax
  80972a:	74 39                	je     809765 <ip_output+0x68>
    return ERR_RTE;
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  80972c:	89 44 24 18          	mov    %eax,0x18(%esp)
  809730:	0f b6 c3             	movzbl %bl,%eax
  809733:	89 44 24 14          	mov    %eax,0x14(%esp)
  809737:	89 f2                	mov    %esi,%edx
  809739:	0f b6 c2             	movzbl %dl,%eax
  80973c:	89 44 24 10          	mov    %eax,0x10(%esp)
  809740:	89 fa                	mov    %edi,%edx
  809742:	0f b6 c2             	movzbl %dl,%eax
  809745:	89 44 24 0c          	mov    %eax,0xc(%esp)
  809749:	8b 45 10             	mov    0x10(%ebp),%eax
  80974c:	89 44 24 08          	mov    %eax,0x8(%esp)
  809750:	8b 45 0c             	mov    0xc(%ebp),%eax
  809753:	89 44 24 04          	mov    %eax,0x4(%esp)
  809757:	8b 45 08             	mov    0x8(%ebp),%eax
  80975a:	89 04 24             	mov    %eax,(%esp)
  80975d:	e8 8e fd ff ff       	call   8094f0 <ip_output_if>
  809762:	0f be d0             	movsbl %al,%edx
}
  809765:	89 d0                	mov    %edx,%eax
  809767:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80976a:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80976d:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  809770:	89 ec                	mov    %ebp,%esp
  809772:	5d                   	pop    %ebp
  809773:	c3                   	ret    

00809774 <ip_input>:
  809774:	55                   	push   %ebp
  809775:	89 e5                	mov    %esp,%ebp
  809777:	83 ec 38             	sub    $0x38,%esp
  80977a:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80977d:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  809780:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  809783:	8b 75 08             	mov    0x8(%ebp),%esi
  809786:	8b 7e 04             	mov    0x4(%esi),%edi
  809789:	0f b7 07             	movzwl (%edi),%eax
  80978c:	89 04 24             	mov    %eax,(%esp)
  80978f:	e8 e1 10 00 00       	call   80a875 <ntohs>
  809794:	66 c1 e8 0c          	shr    $0xc,%ax
  809798:	66 83 f8 04          	cmp    $0x4,%ax
  80979c:	74 0d                	je     8097ab <ip_input+0x37>
  80979e:	89 34 24             	mov    %esi,(%esp)
  8097a1:	e8 ee e2 ff ff       	call   807a94 <pbuf_free>
  8097a6:	e9 56 02 00 00       	jmp    809a01 <ip_input+0x28d>
  8097ab:	0f b7 07             	movzwl (%edi),%eax
  8097ae:	89 04 24             	mov    %eax,(%esp)
  8097b1:	e8 bf 10 00 00       	call   80a875 <ntohs>
  8097b6:	66 c1 e8 06          	shr    $0x6,%ax
  8097ba:	83 e0 3c             	and    $0x3c,%eax
  8097bd:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  8097c1:	0f b7 47 02          	movzwl 0x2(%edi),%eax
  8097c5:	89 04 24             	mov    %eax,(%esp)
  8097c8:	e8 a8 10 00 00       	call   80a875 <ntohs>
  8097cd:	89 c3                	mov    %eax,%ebx
  8097cf:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  8097d3:	66 3b 46 0a          	cmp    0xa(%esi),%ax
  8097d7:	77 06                	ja     8097df <ip_input+0x6b>
  8097d9:	66 3b 5e 08          	cmp    0x8(%esi),%bx
  8097dd:	76 0d                	jbe    8097ec <ip_input+0x78>
  8097df:	89 34 24             	mov    %esi,(%esp)
  8097e2:	e8 ad e2 ff ff       	call   807a94 <pbuf_free>
  8097e7:	e9 15 02 00 00       	jmp    809a01 <ip_input+0x28d>
  8097ec:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  8097f0:	89 44 24 04          	mov    %eax,0x4(%esp)
  8097f4:	89 3c 24             	mov    %edi,(%esp)
  8097f7:	e8 4a 0d 00 00       	call   80a546 <inet_chksum>
  8097fc:	66 85 c0             	test   %ax,%ax
  8097ff:	74 0d                	je     80980e <ip_input+0x9a>
  809801:	89 34 24             	mov    %esi,(%esp)
  809804:	e8 8b e2 ff ff       	call   807a94 <pbuf_free>
  809809:	e9 f3 01 00 00       	jmp    809a01 <ip_input+0x28d>
  80980e:	0f b7 c3             	movzwl %bx,%eax
  809811:	89 44 24 04          	mov    %eax,0x4(%esp)
  809815:	89 34 24             	mov    %esi,(%esp)
  809818:	e8 07 e4 ff ff       	call   807c24 <pbuf_realloc>
  80981d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  809820:	c7 45 ec 01 00 00 00 	movl   $0x1,0xffffffec(%ebp)
  809827:	89 1c 24             	mov    %ebx,(%esp)
  80982a:	e8 8f dc ff ff       	call   8074be <netif_is_up>
  80982f:	84 c0                	test   %al,%al
  809831:	74 22                	je     809855 <ip_input+0xe1>
  809833:	8b 43 04             	mov    0x4(%ebx),%eax
  809836:	85 c0                	test   %eax,%eax
  809838:	74 1b                	je     809855 <ip_input+0xe1>
  80983a:	3b 47 10             	cmp    0x10(%edi),%eax
  80983d:	8d 76 00             	lea    0x0(%esi),%esi
  809840:	74 3a                	je     80987c <ip_input+0x108>
  809842:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809846:	8d 47 10             	lea    0x10(%edi),%eax
  809849:	89 04 24             	mov    %eax,(%esp)
  80984c:	e8 4b fc ff ff       	call   80949c <ip_addr_isbroadcast>
  809851:	84 c0                	test   %al,%al
  809853:	75 27                	jne    80987c <ip_input+0x108>
  809855:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  809859:	74 08                	je     809863 <ip_input+0xef>
  80985b:	8b 1d c0 e5 b3 00    	mov    0xb3e5c0,%ebx
  809861:	eb 02                	jmp    809865 <ip_input+0xf1>
  809863:	8b 1b                	mov    (%ebx),%ebx
  809865:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
  809868:	75 05                	jne    80986f <ip_input+0xfb>
  80986a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80986d:	8b 18                	mov    (%eax),%ebx
  80986f:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  809876:	85 db                	test   %ebx,%ebx
  809878:	74 06                	je     809880 <ip_input+0x10c>
  80987a:	eb ab                	jmp    809827 <ip_input+0xb3>
  80987c:	85 db                	test   %ebx,%ebx
  80987e:	75 27                	jne    8098a7 <ip_input+0x133>
  809880:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  809884:	89 04 24             	mov    %eax,(%esp)
  809887:	e8 e9 0f 00 00       	call   80a875 <ntohs>
  80988c:	3c 11                	cmp    $0x11,%al
  80988e:	75 17                	jne    8098a7 <ip_input+0x133>
  809890:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  809894:	0f b7 44 38 02       	movzwl 0x2(%eax,%edi,1),%eax
  809899:	89 04 24             	mov    %eax,(%esp)
  80989c:	e8 d4 0f 00 00       	call   80a875 <ntohs>
  8098a1:	66 83 f8 44          	cmp    $0x44,%ax
  8098a5:	74 4e                	je     8098f5 <ip_input+0x181>
  8098a7:	8b 45 0c             	mov    0xc(%ebp),%eax
  8098aa:	89 44 24 04          	mov    %eax,0x4(%esp)
  8098ae:	8d 47 0c             	lea    0xc(%edi),%eax
  8098b1:	89 04 24             	mov    %eax,(%esp)
  8098b4:	e8 e3 fb ff ff       	call   80949c <ip_addr_isbroadcast>
  8098b9:	84 c0                	test   %al,%al
  8098bb:	75 2b                	jne    8098e8 <ip_input+0x174>
  8098bd:	8b 47 0c             	mov    0xc(%edi),%eax
  8098c0:	89 45 dc             	mov    %eax,0xffffffdc(%ebp)
  8098c3:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  8098ca:	e8 cb 11 00 00       	call   80aa9a <ntohl>
  8098cf:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  8098d2:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  8098d9:	e8 bc 11 00 00       	call   80aa9a <ntohl>
  8098de:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  8098e1:	23 55 dc             	and    0xffffffdc(%ebp),%edx
  8098e4:	39 c2                	cmp    %eax,%edx
  8098e6:	75 10                	jne    8098f8 <ip_input+0x184>
  8098e8:	89 34 24             	mov    %esi,(%esp)
  8098eb:	e8 a4 e1 ff ff       	call   807a94 <pbuf_free>
  8098f0:	e9 0c 01 00 00       	jmp    809a01 <ip_input+0x28d>
  8098f5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  8098f8:	85 db                	test   %ebx,%ebx
  8098fa:	75 0e                	jne    80990a <ip_input+0x196>
  8098fc:	89 34 24             	mov    %esi,(%esp)
  8098ff:	90                   	nop    
  809900:	e8 8f e1 ff ff       	call   807a94 <pbuf_free>
  809905:	e9 f7 00 00 00       	jmp    809a01 <ip_input+0x28d>
  80990a:	0f b7 47 06          	movzwl 0x6(%edi),%eax
  80990e:	66 89 45 e6          	mov    %ax,0xffffffe6(%ebp)
  809912:	c7 04 24 ff 3f 00 00 	movl   $0x3fff,(%esp)
  809919:	e8 41 0f 00 00       	call   80a85f <htons>
  80991e:	66 85 45 e6          	test   %ax,0xffffffe6(%ebp)
  809922:	74 15                	je     809939 <ip_input+0x1c5>
  809924:	89 34 24             	mov    %esi,(%esp)
  809927:	e8 1d 05 00 00       	call   809e49 <ip_reass>
  80992c:	89 c6                	mov    %eax,%esi
  80992e:	85 c0                	test   %eax,%eax
  809930:	0f 84 cb 00 00 00    	je     809a01 <ip_input+0x28d>
  809936:	8b 78 04             	mov    0x4(%eax),%edi
  809939:	8b 45 0c             	mov    0xc(%ebp),%eax
  80993c:	89 44 24 04          	mov    %eax,0x4(%esp)
  809940:	89 34 24             	mov    %esi,(%esp)
  809943:	e8 5e 7e 00 00       	call   8117a6 <raw_input>
  809948:	84 c0                	test   %al,%al
  80994a:	0f 85 b1 00 00 00    	jne    809a01 <ip_input+0x28d>
  809950:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  809954:	89 04 24             	mov    %eax,(%esp)
  809957:	e8 19 0f 00 00       	call   80a875 <ntohs>
  80995c:	0f b6 c0             	movzbl %al,%eax
  80995f:	83 f8 06             	cmp    $0x6,%eax
  809962:	74 1f                	je     809983 <ip_input+0x20f>
  809964:	83 f8 11             	cmp    $0x11,%eax
  809967:	74 09                	je     809972 <ip_input+0x1fe>
  809969:	83 f8 01             	cmp    $0x1,%eax
  80996c:	75 37                	jne    8099a5 <ip_input+0x231>
  80996e:	66 90                	xchg   %ax,%ax
  809970:	eb 22                	jmp    809994 <ip_input+0x220>
  809972:	8b 45 0c             	mov    0xc(%ebp),%eax
  809975:	89 44 24 04          	mov    %eax,0x4(%esp)
  809979:	89 34 24             	mov    %esi,(%esp)
  80997c:	e8 f7 26 00 00       	call   80c078 <udp_input>
  809981:	eb 7e                	jmp    809a01 <ip_input+0x28d>
  809983:	8b 45 0c             	mov    0xc(%ebp),%eax
  809986:	89 44 24 04          	mov    %eax,0x4(%esp)
  80998a:	89 34 24             	mov    %esi,(%esp)
  80998d:	e8 e3 6d 00 00       	call   810775 <tcp_input>
  809992:	eb 6d                	jmp    809a01 <ip_input+0x28d>
  809994:	8b 45 0c             	mov    0xc(%ebp),%eax
  809997:	89 44 24 04          	mov    %eax,0x4(%esp)
  80999b:	89 34 24             	mov    %esi,(%esp)
  80999e:	e8 cb 80 00 00       	call   811a6e <icmp_input>
  8099a3:	eb 5c                	jmp    809a01 <ip_input+0x28d>
  8099a5:	8b 45 0c             	mov    0xc(%ebp),%eax
  8099a8:	89 44 24 04          	mov    %eax,0x4(%esp)
  8099ac:	8d 47 10             	lea    0x10(%edi),%eax
  8099af:	89 04 24             	mov    %eax,(%esp)
  8099b2:	e8 e5 fa ff ff       	call   80949c <ip_addr_isbroadcast>
  8099b7:	84 c0                	test   %al,%al
  8099b9:	75 3e                	jne    8099f9 <ip_input+0x285>
  8099bb:	8b 47 10             	mov    0x10(%edi),%eax
  8099be:	89 45 d8             	mov    %eax,0xffffffd8(%ebp)
  8099c1:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  8099c8:	e8 cd 10 00 00       	call   80aa9a <ntohl>
  8099cd:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  8099d0:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  8099d7:	e8 be 10 00 00       	call   80aa9a <ntohl>
  8099dc:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  8099df:	23 55 d8             	and    0xffffffd8(%ebp),%edx
  8099e2:	39 c2                	cmp    %eax,%edx
  8099e4:	74 13                	je     8099f9 <ip_input+0x285>
  8099e6:	89 7e 04             	mov    %edi,0x4(%esi)
  8099e9:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  8099f0:	00 
  8099f1:	89 34 24             	mov    %esi,(%esp)
  8099f4:	e8 66 7f 00 00       	call   81195f <icmp_dest_unreach>
  8099f9:	89 34 24             	mov    %esi,(%esp)
  8099fc:	e8 93 e0 ff ff       	call   807a94 <pbuf_free>
  809a01:	b8 00 00 00 00       	mov    $0x0,%eax
  809a06:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  809a09:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  809a0c:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  809a0f:	89 ec                	mov    %ebp,%esp
  809a11:	5d                   	pop    %ebp
  809a12:	c3                   	ret    
	...

00809a20 <ip_frag>:
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, struct ip_addr *dest)
{
  809a20:	55                   	push   %ebp
  809a21:	89 e5                	mov    %esp,%ebp
  809a23:	57                   	push   %edi
  809a24:	56                   	push   %esi
  809a25:	53                   	push   %ebx
  809a26:	83 ec 4c             	sub    $0x4c,%esp
  struct pbuf *rambuf;
#if IP_FRAG_USES_STATIC_BUF
  struct pbuf *header;
#else
  struct pbuf *newpbuf;
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  809a29:	8b 45 0c             	mov    0xc(%ebp),%eax
  809a2c:	0f b7 58 2c          	movzwl 0x2c(%eax),%ebx
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
#if !IP_FRAG_USES_STATIC_BUF
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif

  /* Get a RAM based MTU sized pbuf */
#if IP_FRAG_USES_STATIC_BUF
  /* When using a static buffer, we use a PBUF_REF, which we will
   * use to reference the packet (without link header).
   * Layer and length is irrelevant.
   */
  rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
  809a30:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  809a37:	00 
  809a38:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  809a3f:	00 
  809a40:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  809a47:	e8 0b e3 ff ff       	call   807d57 <pbuf_alloc>
  809a4c:	89 45 c4             	mov    %eax,0xffffffc4(%ebp)
  if (rambuf == NULL) {
  809a4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809a54:	83 7d c4 00          	cmpl   $0x0,0xffffffc4(%ebp)
  809a58:	0f 84 cc 01 00 00    	je     809c2a <ip_frag+0x20a>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
    return ERR_MEM;
  }
  rambuf->tot_len = rambuf->len = mtu;
  809a5e:	8b 55 c4             	mov    0xffffffc4(%ebp),%edx
  809a61:	66 89 5a 0a          	mov    %bx,0xa(%edx)
  809a65:	66 89 5a 08          	mov    %bx,0x8(%edx)
  rambuf->payload = LWIP_MEM_ALIGN((void *)buf);
  809a69:	b8 a3 77 b3 00       	mov    $0xb377a3,%eax
  809a6e:	83 e0 fc             	and    $0xfffffffc,%eax
  809a71:	89 42 04             	mov    %eax,0x4(%edx)

  /* Copy the IP header in it */
  iphdr = rambuf->payload;
  809a74:	89 c6                	mov    %eax,%esi
  SMEMCPY(iphdr, p->payload, IP_HLEN);
  809a76:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  809a7d:	00 
  809a7e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  809a81:	8b 41 04             	mov    0x4(%ecx),%eax
  809a84:	89 44 24 04          	mov    %eax,0x4(%esp)
  809a88:	89 34 24             	mov    %esi,(%esp)
  809a8b:	e8 d8 77 ff ff       	call   801268 <memcpy>
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = p->payload;
  iphdr = original_iphdr;
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  809a90:	0f b7 46 06          	movzwl 0x6(%esi),%eax
  809a94:	89 04 24             	mov    %eax,(%esp)
  809a97:	e8 d9 0d 00 00       	call   80a875 <ntohs>
  809a9c:	89 c2                	mov    %eax,%edx
  ofo = tmp & IP_OFFMASK;
  omf = tmp & IP_MF;
  809a9e:	66 25 00 20          	and    $0x2000,%ax
  809aa2:	66 89 45 e0          	mov    %ax,0xffffffe0(%ebp)

  left = p->tot_len - IP_HLEN;

  nfb = (mtu - IP_HLEN) / 8;
  809aa6:	0f b7 c3             	movzwl %bx,%eax
  809aa9:	83 e8 14             	sub    $0x14,%eax
  809aac:	89 45 bc             	mov    %eax,0xffffffbc(%ebp)
  809aaf:	c1 f8 1f             	sar    $0x1f,%eax
  809ab2:	c1 e8 1d             	shr    $0x1d,%eax
  809ab5:	03 45 bc             	add    0xffffffbc(%ebp),%eax
  809ab8:	c1 e8 03             	shr    $0x3,%eax
  809abb:	66 89 45 c8          	mov    %ax,0xffffffc8(%ebp)

  while (left) {
  809abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
  809ac2:	0f b7 41 08          	movzwl 0x8(%ecx),%eax
  809ac6:	66 83 e8 14          	sub    $0x14,%ax
  809aca:	66 89 45 dc          	mov    %ax,0xffffffdc(%ebp)
  809ace:	0f 84 46 01 00 00    	je     809c1a <ip_frag+0x1fa>
  809ad4:	66 81 e2 ff 1f       	and    $0x1fff,%dx
  809ad9:	66 89 55 de          	mov    %dx,0xffffffde(%ebp)
    last = (left <= mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
    if (!last)
      tmp = tmp | IP_MF;

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  809add:	0f b7 55 c8          	movzwl 0xffffffc8(%ebp),%edx
  809ae1:	c1 e2 03             	shl    $0x3,%edx
  809ae4:	66 89 55 e6          	mov    %dx,0xffffffe6(%ebp)
  809ae8:	66 c7 45 e4 14 00    	movw   $0x14,0xffffffe4(%ebp)
  809aee:	0f b7 45 dc          	movzwl 0xffffffdc(%ebp),%eax
  809af2:	39 45 bc             	cmp    %eax,0xffffffbc(%ebp)
  809af5:	0f 9d c0             	setge  %al
  809af8:	66 0f b6 c0          	movzbw %al,%ax
  809afc:	66 89 45 e2          	mov    %ax,0xffffffe2(%ebp)
  809b00:	0f b7 45 de          	movzwl 0xffffffde(%ebp),%eax
  809b04:	66 25 ff 1f          	and    $0x1fff,%ax
  809b08:	0f b7 5d e0          	movzwl 0xffffffe0(%ebp),%ebx
  809b0c:	09 c3                	or     %eax,%ebx
  809b0e:	0f b7 7d dc          	movzwl 0xffffffdc(%ebp),%edi
  809b12:	66 83 7d e2 00       	cmpw   $0x0,0xffffffe2(%ebp)
  809b17:	75 07                	jne    809b20 <ip_frag+0x100>
  809b19:	80 cf 20             	or     $0x20,%bh
  809b1c:	0f b7 7d e6          	movzwl 0xffffffe6(%ebp),%edi

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
  809b20:	0f b7 45 e4          	movzwl 0xffffffe4(%ebp),%eax
  809b24:	89 44 24 0c          	mov    %eax,0xc(%esp)
  809b28:	0f b7 c7             	movzwl %di,%eax
  809b2b:	89 44 24 08          	mov    %eax,0x8(%esp)
  809b2f:	8d 46 14             	lea    0x14(%esi),%eax
  809b32:	89 44 24 04          	mov    %eax,0x4(%esp)
  809b36:	8b 4d 08             	mov    0x8(%ebp),%ecx
  809b39:	89 0c 24             	mov    %ecx,(%esp)
  809b3c:	e8 d2 dc ff ff       	call   807813 <pbuf_copy_partial>
  809b41:	66 89 45 c2          	mov    %ax,0xffffffc2(%ebp)
#else /* IP_FRAG_USES_STATIC_BUF */
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
    iphdr = rambuf->payload;

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
    p->len -= poff;

    left_to_copy = cop;
    while (left_to_copy) {
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      newpbuf = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
      if (newpbuf == NULL) {
        pbuf_free(rambuf);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf->payload = p->payload;
      newpbuf->len = newpbuf->tot_len = newpbuflen;
      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy -= newpbuflen;
      if (left_to_copy)
        p = p->next;
    }
    poff = newpbuflen;
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  809b45:	0f b7 c3             	movzwl %bx,%eax
  809b48:	89 04 24             	mov    %eax,(%esp)
  809b4b:	e8 0f 0d 00 00       	call   80a85f <htons>
  809b50:	66 89 46 06          	mov    %ax,0x6(%esi)
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  809b54:	8d 47 14             	lea    0x14(%edi),%eax
  809b57:	0f b7 c0             	movzwl %ax,%eax
  809b5a:	89 04 24             	mov    %eax,(%esp)
  809b5d:	e8 fd 0c 00 00       	call   80a85f <htons>
  809b62:	66 89 46 02          	mov    %ax,0x2(%esi)
    IPH_CHKSUM_SET(iphdr, 0);
  809b66:	66 c7 46 0a 00 00    	movw   $0x0,0xa(%esi)
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  809b6c:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  809b73:	00 
  809b74:	89 34 24             	mov    %esi,(%esp)
  809b77:	e8 ca 09 00 00       	call   80a546 <inet_chksum>
  809b7c:	66 89 46 0a          	mov    %ax,0xa(%esi)

#if IP_FRAG_USES_STATIC_BUF
    if (last)
  809b80:	66 83 7d e2 00       	cmpw   $0x0,0xffffffe2(%ebp)
  809b85:	74 19                	je     809ba0 <ip_frag+0x180>
      pbuf_realloc(rambuf, left + IP_HLEN);
  809b87:	0f b7 45 dc          	movzwl 0xffffffdc(%ebp),%eax
  809b8b:	83 c0 14             	add    $0x14,%eax
  809b8e:	0f b7 c0             	movzwl %ax,%eax
  809b91:	89 44 24 04          	mov    %eax,0x4(%esp)
  809b95:	8b 45 c4             	mov    0xffffffc4(%ebp),%eax
  809b98:	89 04 24             	mov    %eax,(%esp)
  809b9b:	e8 84 e0 ff ff       	call   807c24 <pbuf_realloc>

    /* This part is ugly: we alloc a RAM based pbuf for 
     * the link level header for each chunk and then 
     * free it.A PBUF_ROM style pbuf for which pbuf_header
     * worked would make things simpler.
     */
    header = pbuf_alloc(PBUF_LINK, 0, PBUF_RAM);
  809ba0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  809ba7:	00 
  809ba8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  809baf:	00 
  809bb0:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  809bb7:	e8 9b e1 ff ff       	call   807d57 <pbuf_alloc>
  809bbc:	89 c3                	mov    %eax,%ebx
    if (header != NULL) {
  809bbe:	85 c0                	test   %eax,%eax
  809bc0:	74 46                	je     809c08 <ip_frag+0x1e8>
      pbuf_chain(header, rambuf);
  809bc2:	8b 55 c4             	mov    0xffffffc4(%ebp),%edx
  809bc5:	89 54 24 04          	mov    %edx,0x4(%esp)
  809bc9:	89 04 24             	mov    %eax,(%esp)
  809bcc:	e8 30 db ff ff       	call   807701 <pbuf_chain>
      netif->output(netif, header, dest);
  809bd1:	8b 4d 10             	mov    0x10(%ebp),%ecx
  809bd4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  809bd8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
  809bdf:	89 04 24             	mov    %eax,(%esp)
  809be2:	ff 50 14             	call   *0x14(%eax)
      IPFRAG_STATS_INC(ip_frag.xmit);
      snmp_inc_ipfragcreates();
      pbuf_free(header);
  809be5:	89 1c 24             	mov    %ebx,(%esp)
  809be8:	e8 a7 de ff ff       	call   807a94 <pbuf_free>
  809bed:	66 29 7d dc          	sub    %di,0xffffffdc(%ebp)
  809bf1:	74 27                	je     809c1a <ip_frag+0x1fa>
  809bf3:	0f b7 4d c2          	movzwl 0xffffffc2(%ebp),%ecx
  809bf7:	66 01 4d e4          	add    %cx,0xffffffe4(%ebp)
    } else {
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc() for header failed\n"));
      pbuf_free(rambuf);
      return ERR_MEM;
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
    IPFRAG_STATS_INC(ip_frag.xmit);

    /* Unfortunately we can't reuse rambuf - the hardware may still be
     * using the buffer. Instead we free it (and the ensuing chain) and
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
    ofo += nfb;
  809bfb:	0f b7 45 c8          	movzwl 0xffffffc8(%ebp),%eax
  809bff:	66 01 45 de          	add    %ax,0xffffffde(%ebp)
  809c03:	e9 e6 fe ff ff       	jmp    809aee <ip_frag+0xce>
  809c08:	8b 55 c4             	mov    0xffffffc4(%ebp),%edx
  809c0b:	89 14 24             	mov    %edx,(%esp)
  809c0e:	e8 81 de ff ff       	call   807a94 <pbuf_free>
  809c13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  809c18:	eb 10                	jmp    809c2a <ip_frag+0x20a>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
  809c1a:	8b 4d c4             	mov    0xffffffc4(%ebp),%ecx
  809c1d:	89 0c 24             	mov    %ecx,(%esp)
  809c20:	e8 6f de ff ff       	call   807a94 <pbuf_free>
  809c25:	b8 00 00 00 00       	mov    $0x0,%eax
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
}
  809c2a:	83 c4 4c             	add    $0x4c,%esp
  809c2d:	5b                   	pop    %ebx
  809c2e:	5e                   	pop    %esi
  809c2f:	5f                   	pop    %edi
  809c30:	5d                   	pop    %ebp
  809c31:	c3                   	ret    

00809c32 <ip_reass_dequeue_datagram>:
  809c32:	55                   	push   %ebp
  809c33:	89 e5                	mov    %esp,%ebp
  809c35:	83 ec 18             	sub    $0x18,%esp
  809c38:	89 c1                	mov    %eax,%ecx
  809c3a:	39 05 80 77 b3 00    	cmp    %eax,0xb37780
  809c40:	75 09                	jne    809c4b <ip_reass_dequeue_datagram+0x19>
  809c42:	8b 00                	mov    (%eax),%eax
  809c44:	a3 80 77 b3 00       	mov    %eax,0xb37780
  809c49:	eb 24                	jmp    809c6f <ip_reass_dequeue_datagram+0x3d>
  809c4b:	85 d2                	test   %edx,%edx
  809c4d:	75 1c                	jne    809c6b <ip_reass_dequeue_datagram+0x39>
  809c4f:	c7 44 24 08 1d 38 81 	movl   $0x81381d,0x8(%esp)
  809c56:	00 
  809c57:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
  809c5e:	00 
  809c5f:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  809c66:	e8 21 6c ff ff       	call   80088c <_panic>
  809c6b:	8b 00                	mov    (%eax),%eax
  809c6d:	89 02                	mov    %eax,(%edx)
  809c6f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  809c73:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  809c7a:	e8 9d d6 ff ff       	call   80731c <memp_free>
  809c7f:	c9                   	leave  
  809c80:	c3                   	ret    

00809c81 <ip_reass_free_complete_datagram>:
  809c81:	55                   	push   %ebp
  809c82:	89 e5                	mov    %esp,%ebp
  809c84:	57                   	push   %edi
  809c85:	56                   	push   %esi
  809c86:	53                   	push   %ebx
  809c87:	83 ec 1c             	sub    $0x1c,%esp
  809c8a:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  809c8d:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  809c90:	39 c2                	cmp    %eax,%edx
  809c92:	75 1c                	jne    809cb0 <ip_reass_free_complete_datagram+0x2f>
  809c94:	c7 44 24 08 53 38 81 	movl   $0x813853,0x8(%esp)
  809c9b:	00 
  809c9c:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
  809ca3:	00 
  809ca4:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  809cab:	e8 dc 6b ff ff       	call   80088c <_panic>
  809cb0:	83 7d ec 00          	cmpl   $0x0,0xffffffec(%ebp)
  809cb4:	74 26                	je     809cdc <ip_reass_free_complete_datagram+0x5b>
  809cb6:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809cb9:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  809cbc:	39 10                	cmp    %edx,(%eax)
  809cbe:	74 1c                	je     809cdc <ip_reass_free_complete_datagram+0x5b>
  809cc0:	c7 44 24 08 5f 38 81 	movl   $0x81385f,0x8(%esp)
  809cc7:	00 
  809cc8:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
  809ccf:	00 
  809cd0:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  809cd7:	e8 b0 6b ff ff       	call   80088c <_panic>
  809cdc:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  809cdf:	8b 58 04             	mov    0x4(%eax),%ebx
  809ce2:	8b 43 04             	mov    0x4(%ebx),%eax
  809ce5:	bf 00 00 00 00       	mov    $0x0,%edi
  809cea:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)
  809cef:	75 47                	jne    809d38 <ip_reass_free_complete_datagram+0xb7>
  809cf1:	8b 00                	mov    (%eax),%eax
  809cf3:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809cf6:	89 42 04             	mov    %eax,0x4(%edx)
  809cf9:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  809d00:	00 
  809d01:	89 d0                	mov    %edx,%eax
  809d03:	83 c0 08             	add    $0x8,%eax
  809d06:	89 44 24 04          	mov    %eax,0x4(%esp)
  809d0a:	8b 43 04             	mov    0x4(%ebx),%eax
  809d0d:	89 04 24             	mov    %eax,(%esp)
  809d10:	e8 53 75 ff ff       	call   801268 <memcpy>
  809d15:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  809d1c:	00 
  809d1d:	89 1c 24             	mov    %ebx,(%esp)
  809d20:	e8 2b 7b 00 00       	call   811850 <icmp_time_exceeded>
  809d25:	89 1c 24             	mov    %ebx,(%esp)
  809d28:	e8 23 d9 ff ff       	call   807650 <pbuf_clen>
  809d2d:	0f b6 f8             	movzbl %al,%edi
  809d30:	89 1c 24             	mov    %ebx,(%esp)
  809d33:	e8 5c dd ff ff       	call   807a94 <pbuf_free>
  809d38:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  809d3b:	8b 58 04             	mov    0x4(%eax),%ebx
  809d3e:	85 db                	test   %ebx,%ebx
  809d40:	74 22                	je     809d64 <ip_reass_free_complete_datagram+0xe3>
  809d42:	8b 43 04             	mov    0x4(%ebx),%eax
  809d45:	8b 30                	mov    (%eax),%esi
  809d47:	89 1c 24             	mov    %ebx,(%esp)
  809d4a:	e8 01 d9 ff ff       	call   807650 <pbuf_clen>
  809d4f:	0f b6 c0             	movzbl %al,%eax
  809d52:	01 c7                	add    %eax,%edi
  809d54:	89 1c 24             	mov    %ebx,(%esp)
  809d57:	e8 38 dd ff ff       	call   807a94 <pbuf_free>
  809d5c:	85 f6                	test   %esi,%esi
  809d5e:	74 04                	je     809d64 <ip_reass_free_complete_datagram+0xe3>
  809d60:	89 f3                	mov    %esi,%ebx
  809d62:	eb de                	jmp    809d42 <ip_reass_free_complete_datagram+0xc1>
  809d64:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  809d67:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  809d6a:	e8 c3 fe ff ff       	call   809c32 <ip_reass_dequeue_datagram>
  809d6f:	0f b7 15 84 77 b3 00 	movzwl 0xb37784,%edx
  809d76:	0f b7 c2             	movzwl %dx,%eax
  809d79:	39 c7                	cmp    %eax,%edi
  809d7b:	7e 1c                	jle    809d99 <ip_reass_free_complete_datagram+0x118>
  809d7d:	c7 44 24 08 71 38 81 	movl   $0x813871,0x8(%esp)
  809d84:	00 
  809d85:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  809d8c:	00 
  809d8d:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  809d94:	e8 f3 6a ff ff       	call   80088c <_panic>
  809d99:	89 d0                	mov    %edx,%eax
  809d9b:	66 29 f8             	sub    %di,%ax
  809d9e:	66 a3 84 77 b3 00    	mov    %ax,0xb37784
  809da4:	89 f8                	mov    %edi,%eax
  809da6:	83 c4 1c             	add    $0x1c,%esp
  809da9:	5b                   	pop    %ebx
  809daa:	5e                   	pop    %esi
  809dab:	5f                   	pop    %edi
  809dac:	5d                   	pop    %ebp
  809dad:	c3                   	ret    

00809dae <ip_reass_remove_oldest_datagram>:
  809dae:	55                   	push   %ebp
  809daf:	89 e5                	mov    %esp,%ebp
  809db1:	57                   	push   %edi
  809db2:	56                   	push   %esi
  809db3:	53                   	push   %ebx
  809db4:	83 ec 1c             	sub    $0x1c,%esp
  809db7:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  809dba:	89 55 e4             	mov    %edx,0xffffffe4(%ebp)
  809dbd:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  809dc4:	8b 0d 80 77 b3 00    	mov    0xb37780,%ecx
  809dca:	85 c9                	test   %ecx,%ecx
  809dcc:	74 70                	je     809e3e <ip_reass_remove_oldest_datagram+0x90>
  809dce:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  809dd1:	8b 78 0c             	mov    0xc(%eax),%edi
  809dd4:	bb 00 00 00 00       	mov    $0x0,%ebx
  809dd9:	c7 45 f0 00 00 00 00 	movl   $0x0,0xfffffff0(%ebp)
  809de0:	be 00 00 00 00       	mov    $0x0,%esi
  809de5:	39 79 14             	cmp    %edi,0x14(%ecx)
  809de8:	75 15                	jne    809dff <ip_reass_remove_oldest_datagram+0x51>
  809dea:	8b 41 18             	mov    0x18(%ecx),%eax
  809ded:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  809df0:	3b 42 10             	cmp    0x10(%edx),%eax
  809df3:	75 0a                	jne    809dff <ip_reass_remove_oldest_datagram+0x51>
  809df5:	0f b7 41 0c          	movzwl 0xc(%ecx),%eax
  809df9:	66 3b 42 04          	cmp    0x4(%edx),%ax
  809dfd:	74 12                	je     809e11 <ip_reass_remove_oldest_datagram+0x63>
  809dff:	83 c6 01             	add    $0x1,%esi
  809e02:	85 db                	test   %ebx,%ebx
  809e04:	74 09                	je     809e0f <ip_reass_remove_oldest_datagram+0x61>
  809e06:	0f b6 41 1f          	movzbl 0x1f(%ecx),%eax
  809e0a:	3a 43 1f             	cmp    0x1f(%ebx),%al
  809e0d:	77 02                	ja     809e11 <ip_reass_remove_oldest_datagram+0x63>
  809e0f:	89 cb                	mov    %ecx,%ebx
  809e11:	8b 01                	mov    (%ecx),%eax
  809e13:	89 ca                	mov    %ecx,%edx
  809e15:	85 c0                	test   %eax,%eax
  809e17:	74 07                	je     809e20 <ip_reass_remove_oldest_datagram+0x72>
  809e19:	89 c1                	mov    %eax,%ecx
  809e1b:	89 55 f0             	mov    %edx,0xfffffff0(%ebp)
  809e1e:	eb c5                	jmp    809de5 <ip_reass_remove_oldest_datagram+0x37>
  809e20:	85 db                	test   %ebx,%ebx
  809e22:	74 0d                	je     809e31 <ip_reass_remove_oldest_datagram+0x83>
  809e24:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  809e27:	89 d8                	mov    %ebx,%eax
  809e29:	e8 53 fe ff ff       	call   809c81 <ip_reass_free_complete_datagram>
  809e2e:	01 45 ec             	add    %eax,0xffffffec(%ebp)
  809e31:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  809e34:	39 45 ec             	cmp    %eax,0xffffffec(%ebp)
  809e37:	7d 05                	jge    809e3e <ip_reass_remove_oldest_datagram+0x90>
  809e39:	83 fe 01             	cmp    $0x1,%esi
  809e3c:	7f 86                	jg     809dc4 <ip_reass_remove_oldest_datagram+0x16>
  809e3e:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  809e41:	83 c4 1c             	add    $0x1c,%esp
  809e44:	5b                   	pop    %ebx
  809e45:	5e                   	pop    %esi
  809e46:	5f                   	pop    %edi
  809e47:	5d                   	pop    %ebp
  809e48:	c3                   	ret    

00809e49 <ip_reass>:
  809e49:	55                   	push   %ebp
  809e4a:	89 e5                	mov    %esp,%ebp
  809e4c:	57                   	push   %edi
  809e4d:	56                   	push   %esi
  809e4e:	53                   	push   %ebx
  809e4f:	83 ec 5c             	sub    $0x5c,%esp
  809e52:	8b 45 08             	mov    0x8(%ebp),%eax
  809e55:	8b 58 04             	mov    0x4(%eax),%ebx
  809e58:	0f b7 03             	movzwl (%ebx),%eax
  809e5b:	89 04 24             	mov    %eax,(%esp)
  809e5e:	e8 12 0a 00 00       	call   80a875 <ntohs>
  809e63:	c1 e8 06             	shr    $0x6,%eax
  809e66:	83 e0 3c             	and    $0x3c,%eax
  809e69:	83 f8 14             	cmp    $0x14,%eax
  809e6c:	0f 85 ac 04 00 00    	jne    80a31e <ip_reass+0x4d5>
  809e72:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  809e76:	89 04 24             	mov    %eax,(%esp)
  809e79:	e8 f7 09 00 00       	call   80a875 <ntohs>
  809e7e:	66 89 45 b4          	mov    %ax,0xffffffb4(%ebp)
  809e82:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  809e86:	89 04 24             	mov    %eax,(%esp)
  809e89:	e8 e7 09 00 00       	call   80a875 <ntohs>
  809e8e:	66 89 45 b6          	mov    %ax,0xffffffb6(%ebp)
  809e92:	0f b7 03             	movzwl (%ebx),%eax
  809e95:	89 04 24             	mov    %eax,(%esp)
  809e98:	e8 d8 09 00 00       	call   80a875 <ntohs>
  809e9d:	66 89 45 b8          	mov    %ax,0xffffffb8(%ebp)
  809ea1:	8b 55 08             	mov    0x8(%ebp),%edx
  809ea4:	89 14 24             	mov    %edx,(%esp)
  809ea7:	e8 a4 d7 ff ff       	call   807650 <pbuf_clen>
  809eac:	88 45 d3             	mov    %al,0xffffffd3(%ebp)
  809eaf:	0f b6 f8             	movzbl %al,%edi
  809eb2:	0f b7 05 84 77 b3 00 	movzwl 0xb37784,%eax
  809eb9:	8d 04 07             	lea    (%edi,%eax,1),%eax
  809ebc:	83 f8 0a             	cmp    $0xa,%eax
  809ebf:	7e 24                	jle    809ee5 <ip_reass+0x9c>
  809ec1:	89 fa                	mov    %edi,%edx
  809ec3:	89 d8                	mov    %ebx,%eax
  809ec5:	e8 e4 fe ff ff       	call   809dae <ip_reass_remove_oldest_datagram>
  809eca:	85 c0                	test   %eax,%eax
  809ecc:	0f 84 4c 04 00 00    	je     80a31e <ip_reass+0x4d5>
  809ed2:	0f b7 05 84 77 b3 00 	movzwl 0xb37784,%eax
  809ed9:	8d 04 07             	lea    (%edi,%eax,1),%eax
  809edc:	83 f8 0a             	cmp    $0xa,%eax
  809edf:	0f 8f 39 04 00 00    	jg     80a31e <ip_reass+0x4d5>
  809ee5:	8b 35 80 77 b3 00    	mov    0xb37780,%esi
  809eeb:	c7 45 d4 00 00 00 00 	movl   $0x0,0xffffffd4(%ebp)
  809ef2:	85 f6                	test   %esi,%esi
  809ef4:	74 35                	je     809f2b <ip_reass+0xe2>
  809ef6:	8b 53 0c             	mov    0xc(%ebx),%edx
  809ef9:	c7 45 d4 00 00 00 00 	movl   $0x0,0xffffffd4(%ebp)
  809f00:	39 56 14             	cmp    %edx,0x14(%esi)
  809f03:	75 16                	jne    809f1b <ip_reass+0xd2>
  809f05:	8b 46 18             	mov    0x18(%esi),%eax
  809f08:	3b 43 10             	cmp    0x10(%ebx),%eax
  809f0b:	75 0e                	jne    809f1b <ip_reass+0xd2>
  809f0d:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  809f11:	66 3b 43 04          	cmp    0x4(%ebx),%ax
  809f15:	0f 84 8b 00 00 00    	je     809fa6 <ip_reass+0x15d>
  809f1b:	8b 06                	mov    (%esi),%eax
  809f1d:	89 75 d4             	mov    %esi,0xffffffd4(%ebp)
  809f20:	85 c0                	test   %eax,%eax
  809f22:	74 04                	je     809f28 <ip_reass+0xdf>
  809f24:	89 c6                	mov    %eax,%esi
  809f26:	eb d8                	jmp    809f00 <ip_reass+0xb7>
  809f28:	89 75 d4             	mov    %esi,0xffffffd4(%ebp)
  809f2b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  809f32:	e8 28 d4 ff ff       	call   80735f <memp_malloc>
  809f37:	89 c6                	mov    %eax,%esi
  809f39:	85 c0                	test   %eax,%eax
  809f3b:	75 27                	jne    809f64 <ip_reass+0x11b>
  809f3d:	89 fa                	mov    %edi,%edx
  809f3f:	89 d8                	mov    %ebx,%eax
  809f41:	e8 68 fe ff ff       	call   809dae <ip_reass_remove_oldest_datagram>
  809f46:	39 c7                	cmp    %eax,%edi
  809f48:	0f 8f d0 03 00 00    	jg     80a31e <ip_reass+0x4d5>
  809f4e:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
  809f55:	e8 05 d4 ff ff       	call   80735f <memp_malloc>
  809f5a:	85 c0                	test   %eax,%eax
  809f5c:	0f 84 bc 03 00 00    	je     80a31e <ip_reass+0x4d5>
  809f62:	89 c6                	mov    %eax,%esi
  809f64:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
  809f6b:	00 
  809f6c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  809f73:	00 
  809f74:	89 34 24             	mov    %esi,(%esp)
  809f77:	e8 15 72 ff ff       	call   801191 <memset>
  809f7c:	c6 46 1f 03          	movb   $0x3,0x1f(%esi)
  809f80:	a1 80 77 b3 00       	mov    0xb37780,%eax
  809f85:	89 06                	mov    %eax,(%esi)
  809f87:	89 35 80 77 b3 00    	mov    %esi,0xb37780
  809f8d:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  809f94:	00 
  809f95:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809f99:	8d 46 08             	lea    0x8(%esi),%eax
  809f9c:	89 04 24             	mov    %eax,(%esp)
  809f9f:	e8 c4 72 ff ff       	call   801268 <memcpy>
  809fa4:	eb 3b                	jmp    809fe1 <ip_reass+0x198>
  809fa6:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  809faa:	89 04 24             	mov    %eax,(%esp)
  809fad:	e8 c3 08 00 00       	call   80a875 <ntohs>
  809fb2:	66 a9 ff 1f          	test   $0x1fff,%ax
  809fb6:	75 29                	jne    809fe1 <ip_reass+0x198>
  809fb8:	0f b7 46 0e          	movzwl 0xe(%esi),%eax
  809fbc:	89 04 24             	mov    %eax,(%esp)
  809fbf:	e8 b1 08 00 00       	call   80a875 <ntohs>
  809fc4:	66 a9 ff 1f          	test   $0x1fff,%ax
  809fc8:	74 17                	je     809fe1 <ip_reass+0x198>
  809fca:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  809fd1:	00 
  809fd2:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  809fd6:	8d 46 08             	lea    0x8(%esi),%eax
  809fd9:	89 04 24             	mov    %eax,(%esp)
  809fdc:	e8 87 72 ff ff       	call   801268 <memcpy>
  809fe1:	66 0f b6 45 d3       	movzbw 0xffffffd3(%ebp),%ax
  809fe6:	66 01 05 84 77 b3 00 	add    %ax,0xb37784
  809fed:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  809ff1:	89 04 24             	mov    %eax,(%esp)
  809ff4:	e8 7c 08 00 00       	call   80a875 <ntohs>
  809ff9:	f6 c4 20             	test   $0x20,%ah
  809ffc:	75 20                	jne    80a01e <ip_reass+0x1d5>
  809ffe:	80 4e 1e 01          	orb    $0x1,0x1e(%esi)
  80a002:	0f b7 4d b4          	movzwl 0xffffffb4(%ebp),%ecx
  80a006:	0f b7 7d b6          	movzwl 0xffffffb6(%ebp),%edi
  80a00a:	8d 14 cf             	lea    (%edi,%ecx,8),%edx
  80a00d:	0f b7 45 b8          	movzwl 0xffffffb8(%ebp),%eax
  80a011:	c1 e8 06             	shr    $0x6,%eax
  80a014:	83 e0 3c             	and    $0x3c,%eax
  80a017:	66 29 c2             	sub    %ax,%dx
  80a01a:	66 89 56 1c          	mov    %dx,0x1c(%esi)
  80a01e:	8b 45 08             	mov    0x8(%ebp),%eax
  80a021:	8b 58 04             	mov    0x4(%eax),%ebx
  80a024:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  80a028:	89 04 24             	mov    %eax,(%esp)
  80a02b:	e8 45 08 00 00       	call   80a875 <ntohs>
  80a030:	66 89 45 de          	mov    %ax,0xffffffde(%ebp)
  80a034:	0f b7 03             	movzwl (%ebx),%eax
  80a037:	89 04 24             	mov    %eax,(%esp)
  80a03a:	e8 36 08 00 00       	call   80a875 <ntohs>
  80a03f:	89 c7                	mov    %eax,%edi
  80a041:	0f b7 43 06          	movzwl 0x6(%ebx),%eax
  80a045:	89 04 24             	mov    %eax,(%esp)
  80a048:	e8 28 08 00 00       	call   80a875 <ntohs>
  80a04d:	25 ff 1f 00 00       	and    $0x1fff,%eax
  80a052:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
  80a059:	8b 55 08             	mov    0x8(%ebp),%edx
  80a05c:	8b 52 04             	mov    0x4(%edx),%edx
  80a05f:	89 55 e0             	mov    %edx,0xffffffe0(%ebp)
  80a062:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
  80a068:	66 89 4a 04          	mov    %cx,0x4(%edx)
  80a06c:	0f b7 55 de          	movzwl 0xffffffde(%ebp),%edx
  80a070:	01 ca                	add    %ecx,%edx
  80a072:	89 f8                	mov    %edi,%eax
  80a074:	c1 e8 06             	shr    $0x6,%eax
  80a077:	83 e0 3c             	and    $0x3c,%eax
  80a07a:	66 29 c2             	sub    %ax,%dx
  80a07d:	8b 7d e0             	mov    0xffffffe0(%ebp),%edi
  80a080:	66 89 57 06          	mov    %dx,0x6(%edi)
  80a084:	8b 56 04             	mov    0x4(%esi),%edx
  80a087:	85 d2                	test   %edx,%edx
  80a089:	0f 84 50 03 00 00    	je     80a3df <ip_reass+0x596>
  80a08f:	8b 7a 04             	mov    0x4(%edx),%edi
  80a092:	89 cb                	mov    %ecx,%ebx
  80a094:	0f b7 4f 04          	movzwl 0x4(%edi),%ecx
  80a098:	66 39 d9             	cmp    %bx,%cx
  80a09b:	0f 87 2d 03 00 00    	ja     80a3ce <ip_reass+0x585>
  80a0a1:	66 39 cb             	cmp    %cx,%bx
  80a0a4:	0f 84 e6 01 00 00    	je     80a290 <ip_reass+0x447>
  80a0aa:	b8 00 00 00 00       	mov    $0x0,%eax
  80a0af:	c7 45 d8 01 00 00 00 	movl   $0x1,0xffffffd8(%ebp)
  80a0b6:	66 39 5f 06          	cmp    %bx,0x6(%edi)
  80a0ba:	76 62                	jbe    80a11e <ip_reass+0x2d5>
  80a0bc:	e9 cf 01 00 00       	jmp    80a290 <ip_reass+0x447>
  80a0c1:	8b 50 04             	mov    0x4(%eax),%edx
  80a0c4:	0f b7 4a 04          	movzwl 0x4(%edx),%ecx
  80a0c8:	66 39 d9             	cmp    %bx,%cx
  80a0cb:	76 3a                	jbe    80a107 <ip_reass+0x2be>
  80a0cd:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  80a0d0:	89 01                	mov    %eax,(%ecx)
  80a0d2:	85 ff                	test   %edi,%edi
  80a0d4:	74 26                	je     80a0fc <ip_reass+0x2b3>
  80a0d6:	0f b7 41 04          	movzwl 0x4(%ecx),%eax
  80a0da:	66 3b 47 06          	cmp    0x6(%edi),%ax
  80a0de:	0f 82 ac 01 00 00    	jb     80a290 <ip_reass+0x447>
  80a0e4:	0f b7 41 06          	movzwl 0x6(%ecx),%eax
  80a0e8:	66 3b 42 04          	cmp    0x4(%edx),%ax
  80a0ec:	0f 87 9e 01 00 00    	ja     80a290 <ip_reass+0x447>
  80a0f2:	8b 45 08             	mov    0x8(%ebp),%eax
  80a0f5:	89 07                	mov    %eax,(%edi)
  80a0f7:	e9 9a 00 00 00       	jmp    80a196 <ip_reass+0x34d>
  80a0fc:	8b 55 08             	mov    0x8(%ebp),%edx
  80a0ff:	89 56 04             	mov    %edx,0x4(%esi)
  80a102:	e9 8f 00 00 00       	jmp    80a196 <ip_reass+0x34d>
  80a107:	66 39 d9             	cmp    %bx,%cx
  80a10a:	0f 84 80 01 00 00    	je     80a290 <ip_reass+0x447>
  80a110:	66 39 5a 06          	cmp    %bx,0x6(%edx)
  80a114:	0f 87 76 01 00 00    	ja     80a290 <ip_reass+0x447>
  80a11a:	89 f8                	mov    %edi,%eax
  80a11c:	89 d7                	mov    %edx,%edi
  80a11e:	85 c0                	test   %eax,%eax
  80a120:	74 10                	je     80a132 <ip_reass+0x2e9>
  80a122:	66 3b 48 06          	cmp    0x6(%eax),%cx
  80a126:	0f 95 c0             	setne  %al
  80a129:	0f b6 c0             	movzbl %al,%eax
  80a12c:	83 e8 01             	sub    $0x1,%eax
  80a12f:	21 45 d8             	and    %eax,0xffffffd8(%ebp)
  80a132:	8b 07                	mov    (%edi),%eax
  80a134:	85 c0                	test   %eax,%eax
  80a136:	75 89                	jne    80a0c1 <ip_reass+0x278>
  80a138:	e9 04 02 00 00       	jmp    80a341 <ip_reass+0x4f8>
  80a13d:	66 39 5f 06          	cmp    %bx,0x6(%edi)
  80a141:	76 1c                	jbe    80a15f <ip_reass+0x316>
  80a143:	c7 44 24 08 8c 38 81 	movl   $0x81388c,0x8(%esp)
  80a14a:	00 
  80a14b:	c7 44 24 04 83 01 00 	movl   $0x183,0x4(%esp)
  80a152:	00 
  80a153:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a15a:	e8 2d 67 ff ff       	call   80088c <_panic>
  80a15f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80a162:	89 0f                	mov    %ecx,(%edi)
  80a164:	0f b7 47 06          	movzwl 0x6(%edi),%eax
  80a168:	8b 7d e0             	mov    0xffffffe0(%ebp),%edi
  80a16b:	66 3b 47 04          	cmp    0x4(%edi),%ax
  80a16f:	75 1e                	jne    80a18f <ip_reass+0x346>
  80a171:	eb 23                	jmp    80a196 <ip_reass+0x34d>
  80a173:	c7 44 24 08 b8 38 81 	movl   $0x8138b8,0x8(%esp)
  80a17a:	00 
  80a17b:	c7 44 24 04 8c 01 00 	movl   $0x18c,0x4(%esp)
  80a182:	00 
  80a183:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a18a:	e8 fd 66 ff ff       	call   80088c <_panic>
  80a18f:	c7 45 d8 00 00 00 00 	movl   $0x0,0xffffffd8(%ebp)
  80a196:	f6 46 1e 01          	testb  $0x1,0x1e(%esi)
  80a19a:	0f 84 95 01 00 00    	je     80a335 <ip_reass+0x4ec>
  80a1a0:	83 7d d8 00          	cmpl   $0x0,0xffffffd8(%ebp)
  80a1a4:	0f 84 8b 01 00 00    	je     80a335 <ip_reass+0x4ec>
  80a1aa:	8b 4e 04             	mov    0x4(%esi),%ecx
  80a1ad:	8b 59 04             	mov    0x4(%ecx),%ebx
  80a1b0:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)
  80a1b5:	0f 85 7a 01 00 00    	jne    80a335 <ip_reass+0x4ec>
  80a1bb:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80a1be:	8b 02                	mov    (%edx),%eax
  80a1c0:	85 c0                	test   %eax,%eax
  80a1c2:	0f 84 8d 01 00 00    	je     80a355 <ip_reass+0x50c>
  80a1c8:	8b 40 04             	mov    0x4(%eax),%eax
  80a1cb:	0f b7 52 06          	movzwl 0x6(%edx),%edx
  80a1cf:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  80a1d2:	66 3b 50 04          	cmp    0x4(%eax),%dx
  80a1d6:	74 1c                	je     80a1f4 <ip_reass+0x3ab>
  80a1d8:	e9 58 01 00 00       	jmp    80a335 <ip_reass+0x4ec>
  80a1dd:	8b 50 04             	mov    0x4(%eax),%edx
  80a1e0:	8b 7d e0             	mov    0xffffffe0(%ebp),%edi
  80a1e3:	0f b7 47 06          	movzwl 0x6(%edi),%eax
  80a1e7:	66 3b 42 04          	cmp    0x4(%edx),%ax
  80a1eb:	0f 85 44 01 00 00    	jne    80a335 <ip_reass+0x4ec>
  80a1f1:	89 55 e0             	mov    %edx,0xffffffe0(%ebp)
  80a1f4:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80a1f7:	8b 02                	mov    (%edx),%eax
  80a1f9:	85 c0                	test   %eax,%eax
  80a1fb:	75 e0                	jne    80a1dd <ip_reass+0x394>
  80a1fd:	e9 53 01 00 00       	jmp    80a355 <ip_reass+0x50c>
  80a202:	c7 44 24 08 aa 38 81 	movl   $0x8138aa,0x8(%esp)
  80a209:	00 
  80a20a:	c7 44 24 04 ac 01 00 	movl   $0x1ac,0x4(%esp)
  80a211:	00 
  80a212:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a219:	e8 6e 66 ff ff       	call   80088c <_panic>
  80a21e:	39 5d e0             	cmp    %ebx,0xffffffe0(%ebp)
  80a221:	75 1c                	jne    80a23f <ip_reass+0x3f6>
  80a223:	c7 44 24 08 aa 38 81 	movl   $0x8138aa,0x8(%esp)
  80a22a:	00 
  80a22b:	c7 44 24 04 ae 01 00 	movl   $0x1ae,0x4(%esp)
  80a232:	00 
  80a233:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a23a:	e8 4d 66 ff ff       	call   80088c <_panic>
  80a23f:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  80a242:	83 39 00             	cmpl   $0x0,(%ecx)
  80a245:	74 1c                	je     80a263 <ip_reass+0x41a>
  80a247:	c7 44 24 08 f0 38 81 	movl   $0x8138f0,0x8(%esp)
  80a24e:	00 
  80a24f:	c7 44 24 04 b0 01 00 	movl   $0x1b0,0x4(%esp)
  80a256:	00 
  80a257:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a25e:	e8 29 66 ff ff       	call   80088c <_panic>
  80a263:	8b 7d e0             	mov    0xffffffe0(%ebp),%edi
  80a266:	0f b7 47 06          	movzwl 0x6(%edi),%eax
  80a26a:	66 3b 46 1c          	cmp    0x1c(%esi),%ax
  80a26e:	0f 84 f1 00 00 00    	je     80a365 <ip_reass+0x51c>
  80a274:	c7 44 24 08 14 39 81 	movl   $0x813914,0x8(%esp)
  80a27b:	00 
  80a27c:	c7 44 24 04 b2 01 00 	movl   $0x1b2,0x4(%esp)
  80a283:	00 
  80a284:	c7 04 24 36 38 81 00 	movl   $0x813836,(%esp)
  80a28b:	e8 fc 65 ff ff       	call   80088c <_panic>
  80a290:	0f b7 1d 84 77 b3 00 	movzwl 0xb37784,%ebx
  80a297:	8b 45 08             	mov    0x8(%ebp),%eax
  80a29a:	89 04 24             	mov    %eax,(%esp)
  80a29d:	e8 ae d3 ff ff       	call   807650 <pbuf_clen>
  80a2a2:	66 0f b6 c0          	movzbw %al,%ax
  80a2a6:	66 29 c3             	sub    %ax,%bx
  80a2a9:	66 89 1d 84 77 b3 00 	mov    %bx,0xb37784
  80a2b0:	8b 55 08             	mov    0x8(%ebp),%edx
  80a2b3:	89 14 24             	mov    %edx,(%esp)
  80a2b6:	e8 d9 d7 ff ff       	call   807a94 <pbuf_free>
  80a2bb:	c7 45 e4 00 00 00 00 	movl   $0x0,0xffffffe4(%ebp)
  80a2c2:	e9 2a 01 00 00       	jmp    80a3f1 <ip_reass+0x5a8>
  80a2c7:	8b 5f 04             	mov    0x4(%edi),%ebx
  80a2ca:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  80a2d1:	ff 
  80a2d2:	89 3c 24             	mov    %edi,(%esp)
  80a2d5:	e8 4e d4 ff ff       	call   807728 <pbuf_header>
  80a2da:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80a2de:	8b 4d e4             	mov    0xffffffe4(%ebp),%ecx
  80a2e1:	89 0c 24             	mov    %ecx,(%esp)
  80a2e4:	e8 9a d3 ff ff       	call   807683 <pbuf_cat>
  80a2e9:	8b 3b                	mov    (%ebx),%edi
  80a2eb:	85 ff                	test   %edi,%edi
  80a2ed:	75 d8                	jne    80a2c7 <ip_reass+0x47e>
  80a2ef:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80a2f2:	89 f0                	mov    %esi,%eax
  80a2f4:	e8 39 f9 ff ff       	call   809c32 <ip_reass_dequeue_datagram>
  80a2f9:	0f b7 1d 84 77 b3 00 	movzwl 0xb37784,%ebx
  80a300:	8b 7d e4             	mov    0xffffffe4(%ebp),%edi
  80a303:	89 3c 24             	mov    %edi,(%esp)
  80a306:	e8 45 d3 ff ff       	call   807650 <pbuf_clen>
  80a30b:	66 0f b6 c0          	movzbw %al,%ax
  80a30f:	66 29 c3             	sub    %ax,%bx
  80a312:	66 89 1d 84 77 b3 00 	mov    %bx,0xb37784
  80a319:	e9 d3 00 00 00       	jmp    80a3f1 <ip_reass+0x5a8>
  80a31e:	8b 45 08             	mov    0x8(%ebp),%eax
  80a321:	89 04 24             	mov    %eax,(%esp)
  80a324:	e8 6b d7 ff ff       	call   807a94 <pbuf_free>
  80a329:	c7 45 e4 00 00 00 00 	movl   $0x0,0xffffffe4(%ebp)
  80a330:	e9 bc 00 00 00       	jmp    80a3f1 <ip_reass+0x5a8>
  80a335:	c7 45 e4 00 00 00 00 	movl   $0x0,0xffffffe4(%ebp)
  80a33c:	e9 b0 00 00 00       	jmp    80a3f1 <ip_reass+0x5a8>
  80a341:	85 ff                	test   %edi,%edi
  80a343:	0f 85 f4 fd ff ff    	jne    80a13d <ip_reass+0x2f4>
  80a349:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80a350:	e9 1e fe ff ff       	jmp    80a173 <ip_reass+0x32a>
  80a355:	85 c9                	test   %ecx,%ecx
  80a357:	0f 85 c1 fe ff ff    	jne    80a21e <ip_reass+0x3d5>
  80a35d:	8d 76 00             	lea    0x0(%esi),%esi
  80a360:	e9 9d fe ff ff       	jmp    80a202 <ip_reass+0x3b9>
  80a365:	83 c0 14             	add    $0x14,%eax
  80a368:	66 89 46 1c          	mov    %ax,0x1c(%esi)
  80a36c:	8b 46 04             	mov    0x4(%esi),%eax
  80a36f:	8b 58 04             	mov    0x4(%eax),%ebx
  80a372:	8b 3b                	mov    (%ebx),%edi
  80a374:	c7 44 24 08 14 00 00 	movl   $0x14,0x8(%esp)
  80a37b:	00 
  80a37c:	8d 46 08             	lea    0x8(%esi),%eax
  80a37f:	89 44 24 04          	mov    %eax,0x4(%esp)
  80a383:	89 1c 24             	mov    %ebx,(%esp)
  80a386:	e8 dd 6e ff ff       	call   801268 <memcpy>
  80a38b:	0f b7 46 1c          	movzwl 0x1c(%esi),%eax
  80a38f:	89 04 24             	mov    %eax,(%esp)
  80a392:	e8 c8 04 00 00       	call   80a85f <htons>
  80a397:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80a39b:	66 c7 43 06 00 00    	movw   $0x0,0x6(%ebx)
  80a3a1:	66 c7 43 0a 00 00    	movw   $0x0,0xa(%ebx)
  80a3a7:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80a3ae:	00 
  80a3af:	89 1c 24             	mov    %ebx,(%esp)
  80a3b2:	e8 8f 01 00 00       	call   80a546 <inet_chksum>
  80a3b7:	66 89 43 0a          	mov    %ax,0xa(%ebx)
  80a3bb:	8b 56 04             	mov    0x4(%esi),%edx
  80a3be:	89 55 e4             	mov    %edx,0xffffffe4(%ebp)
  80a3c1:	85 ff                	test   %edi,%edi
  80a3c3:	0f 85 fe fe ff ff    	jne    80a2c7 <ip_reass+0x47e>
  80a3c9:	e9 21 ff ff ff       	jmp    80a2ef <ip_reass+0x4a6>
  80a3ce:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  80a3d1:	89 11                	mov    %edx,(%ecx)
  80a3d3:	c7 45 d8 01 00 00 00 	movl   $0x1,0xffffffd8(%ebp)
  80a3da:	e9 1d fd ff ff       	jmp    80a0fc <ip_reass+0x2b3>
  80a3df:	c7 45 d8 01 00 00 00 	movl   $0x1,0xffffffd8(%ebp)
  80a3e6:	8b 7d 08             	mov    0x8(%ebp),%edi
  80a3e9:	89 7e 04             	mov    %edi,0x4(%esi)
  80a3ec:	e9 a5 fd ff ff       	jmp    80a196 <ip_reass+0x34d>
  80a3f1:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80a3f4:	83 c4 5c             	add    $0x5c,%esp
  80a3f7:	5b                   	pop    %ebx
  80a3f8:	5e                   	pop    %esi
  80a3f9:	5f                   	pop    %edi
  80a3fa:	5d                   	pop    %ebp
  80a3fb:	c3                   	ret    

0080a3fc <ip_reass_tmr>:
  80a3fc:	55                   	push   %ebp
  80a3fd:	89 e5                	mov    %esp,%ebp
  80a3ff:	56                   	push   %esi
  80a400:	53                   	push   %ebx
  80a401:	8b 0d 80 77 b3 00    	mov    0xb37780,%ecx
  80a407:	85 c9                	test   %ecx,%ecx
  80a409:	74 2a                	je     80a435 <ip_reass_tmr+0x39>
  80a40b:	be 00 00 00 00       	mov    $0x0,%esi
  80a410:	0f b6 41 1f          	movzbl 0x1f(%ecx),%eax
  80a414:	84 c0                	test   %al,%al
  80a416:	74 0c                	je     80a424 <ip_reass_tmr+0x28>
  80a418:	83 e8 01             	sub    $0x1,%eax
  80a41b:	88 41 1f             	mov    %al,0x1f(%ecx)
  80a41e:	89 ce                	mov    %ecx,%esi
  80a420:	8b 09                	mov    (%ecx),%ecx
  80a422:	eb 0d                	jmp    80a431 <ip_reass_tmr+0x35>
  80a424:	8b 19                	mov    (%ecx),%ebx
  80a426:	89 f2                	mov    %esi,%edx
  80a428:	89 c8                	mov    %ecx,%eax
  80a42a:	e8 52 f8 ff ff       	call   809c81 <ip_reass_free_complete_datagram>
  80a42f:	89 d9                	mov    %ebx,%ecx
  80a431:	85 c9                	test   %ecx,%ecx
  80a433:	75 db                	jne    80a410 <ip_reass_tmr+0x14>
  80a435:	5b                   	pop    %ebx
  80a436:	5e                   	pop    %esi
  80a437:	5d                   	pop    %ebp
  80a438:	c3                   	ret    
  80a439:	00 00                	add    %al,(%eax)
	...

0080a43c <lwip_standard_chksum>:
 * @note host endianess is irrelevant (p3 RFC1071)
 */
static u16_t
lwip_standard_chksum(void *dataptr, u16_t len)
{
  80a43c:	55                   	push   %ebp
  80a43d:	89 e5                	mov    %esp,%ebp
  80a43f:	56                   	push   %esi
  80a440:	53                   	push   %ebx
  80a441:	83 ec 10             	sub    $0x10,%esp
  80a444:	89 d3                	mov    %edx,%ebx
  u32_t acc;
  u16_t src;
  u8_t *octetptr;

  acc = 0;
  /* dataptr may be at odd or even addresses */
  octetptr = (u8_t*)dataptr;
  80a446:	89 c1                	mov    %eax,%ecx
  while (len > 1) {
  80a448:	be 00 00 00 00       	mov    $0x0,%esi
  80a44d:	66 83 fa 01          	cmp    $0x1,%dx
  80a451:	76 24                	jbe    80a477 <lwip_standard_chksum+0x3b>
  80a453:	be 00 00 00 00       	mov    $0x0,%esi
    /* declare first octet as most significant
       thus assume network order, ignoring host order */
    src = (*octetptr) << 8;
  80a458:	66 0f b6 01          	movzbw (%ecx),%ax
  80a45c:	c1 e0 08             	shl    $0x8,%eax
    octetptr++;
    /* declare second octet as least significant */
    src |= (*octetptr);
  80a45f:	66 0f b6 51 01       	movzbw 0x1(%ecx),%dx
  80a464:	09 d0                	or     %edx,%eax
  80a466:	83 c1 02             	add    $0x2,%ecx
    octetptr++;
    acc += src;
  80a469:	0f b7 c0             	movzwl %ax,%eax
  80a46c:	01 c6                	add    %eax,%esi
    len -= 2;
  80a46e:	83 eb 02             	sub    $0x2,%ebx
  80a471:	66 83 fb 01          	cmp    $0x1,%bx
  80a475:	77 e1                	ja     80a458 <lwip_standard_chksum+0x1c>
  }
  if (len > 0) {
  80a477:	66 85 db             	test   %bx,%bx
  80a47a:	74 0c                	je     80a488 <lwip_standard_chksum+0x4c>
    /* accumulate remaining octet */
    src = (*octetptr) << 8;
    acc += src;
  80a47c:	66 0f b6 01          	movzbw (%ecx),%ax
  80a480:	c1 e0 08             	shl    $0x8,%eax
  80a483:	0f b7 c0             	movzwl %ax,%eax
  80a486:	01 c6                	add    %eax,%esi
  }
  /* add deferred carry bits */
  acc = (acc >> 16) + (acc & 0x0000ffffUL);
  80a488:	89 f2                	mov    %esi,%edx
  80a48a:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  80a490:	89 f0                	mov    %esi,%eax
  80a492:	c1 e8 10             	shr    $0x10,%eax
  80a495:	8d 04 02             	lea    (%edx,%eax,1),%eax
  if ((acc & 0xffff0000) != 0) {
  80a498:	a9 00 00 ff ff       	test   $0xffff0000,%eax
  80a49d:	74 09                	je     80a4a8 <lwip_standard_chksum+0x6c>
    acc = (acc >> 16) + (acc & 0x0000ffffUL);
  80a49f:	0f b7 d0             	movzwl %ax,%edx
  80a4a2:	c1 e8 10             	shr    $0x10,%eax
  80a4a5:	8d 04 02             	lea    (%edx,%eax,1),%eax
  }
  /* This maybe a little confusing: reorder sum using htons()
     instead of ntohs() since it has a little less call overhead.
     The caller must invert bits for Internet sum ! */
  return htons((u16_t)acc);
  80a4a8:	0f b7 c0             	movzwl %ax,%eax
  80a4ab:	89 04 24             	mov    %eax,(%esp)
  80a4ae:	e8 ac 03 00 00       	call   80a85f <htons>
  80a4b3:	0f b7 c0             	movzwl %ax,%eax
}
  80a4b6:	83 c4 10             	add    $0x10,%esp
  80a4b9:	5b                   	pop    %ebx
  80a4ba:	5e                   	pop    %esi
  80a4bb:	5d                   	pop    %ebp
  80a4bc:	c3                   	ret    

0080a4bd <inet_chksum_pbuf>:
#endif

#if (LWIP_CHKSUM_ALGORITHM == 2) /* Alternative version #2 */
/*
 * Curt McDowell
 * Broadcom Corp.
 * csm@broadcom.com
 *
 * IP checksum two bytes at a time with support for
 * unaligned buffer.
 * Works for len up to and including 0x20000.
 * by Curt McDowell, Broadcom Corp. 12/08/2005
 *
 * @param dataptr points to start of data to be summed at any boundary
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = dataptr;
  u16_t *ps, t = 0;
  u32_t sum = 0;
  int odd = ((u32_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)pb;
  while (len > 1) {
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(u8_t *)ps;;
  }

  /* Add end bytes */
  sum += t;

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  sum = FOLD_U32T(sum);

  /* Swap if alignment was odd */
  if (odd) {
    sum = SWAP_BYTES_IN_WORD(sum);
  }

  return sum;
}
#endif

#if (LWIP_CHKSUM_ALGORITHM == 3) /* Alternative version #3 */
/**
 * An optimized checksum routine. Basically, it uses loop-unrolling on
 * the checksum loop, treating the head and tail bytes specially, whereas
 * the inner loop acts on 8 bytes at a time. 
 *
 * @arg start of buffer to be checksummed. May be an odd byte address.
 * @len number of bytes in the buffer to be checksummed.
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 * 
 * by Curt McDowell, Broadcom Corp. December 8th, 2005
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  u8_t *pb = dataptr;
  u16_t *ps, t = 0;
  u32_t *pl;
  u32_t sum = 0, tmp;
  /* starts at odd byte address? */
  int odd = ((u32_t)pb & 1);

  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
    len--;
  }

  ps = (u16_t *)pb;

  if (((u32_t)ps & 3) && len > 1) {
    sum += *ps++;
    len -= 2;
  }

  pl = (u32_t *)ps;

  while (len > 7)  {
    tmp = sum + *pl++;          /* ping */
    if (tmp < sum) {
      tmp++;                    /* add back carry */
    }

    sum = tmp + *pl++;          /* pong */
    if (sum < tmp) {
      sum++;                    /* add back carry */
    }

    len -= 8;
  }

  /* make room in upper bits */
  sum = FOLD_U32T(sum);

  ps = (u16_t *)pl;

  /* 16-bit aligned word remaining? */
  while (len > 1) {
    sum += *ps++;
    len -= 2;
  }

  /* dangling tail byte remaining? */
  if (len > 0) {                /* include odd byte */
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  }

  sum += t;                     /* add end bytes */

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  sum = FOLD_U32T(sum);

  if (odd) {
    sum = SWAP_BYTES_IN_WORD(sum);
  }

  return sum;
}
#endif

/* inet_chksum_pseudo:
 *
 * Calculates the pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 * IP addresses are expected to be in network byte order.
 *
 * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 * @param src source ip address (used for checksum of pseudo header)
 * @param dst destination ip address (used for checksum of pseudo header)
 * @param proto ip protocol (used for checksum of pseudo header)
 * @param proto_len length of the ip data part (used for checksum of pseudo header)
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       struct ip_addr *src, struct ip_addr *dest,
       u8_t proto, u16_t proto_len)
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  acc += ((dest->addr >> 16) & 0xffffUL);
  acc += (u32_t)htons((u16_t)proto);
  acc += (u32_t)htons(proto_len);

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  acc = FOLD_U32T(acc);
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
}

/* inet_chksum_pseudo:
 *
 * Calculates the pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 * IP addresses are expected to be in network byte order.
 *
 * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 * @param src source ip address (used for checksum of pseudo header)
 * @param dst destination ip address (used for checksum of pseudo header)
 * @param proto ip protocol (used for checksum of pseudo header)
 * @param proto_len length of the ip data part (used for checksum of pseudo header)
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p,
       struct ip_addr *src, struct ip_addr *dest,
       u8_t proto, u16_t proto_len, u16_t chksum_len)
{
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;
  u16_t chklen;

  acc = 0;
  swapped = 0;
  /* iterate through all pbuf in chain */
  for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
    if (chklen > chksum_len) {
      chklen = chksum_len;
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
    chksum_len -= chklen;
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
    acc = SWAP_BYTES_IN_WORD(acc);
  }
  acc += (src->addr & 0xffffUL);
  acc += ((src->addr >> 16) & 0xffffUL);
  acc += (dest->addr & 0xffffUL);
  acc += ((dest->addr >> 16) & 0xffffUL);
  acc += (u32_t)htons((u16_t)proto);
  acc += (u32_t)htons(proto_len);

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  acc = FOLD_U32T(acc);
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
}

/* inet_chksum:
 *
 * Calculates the Internet checksum over a portion of memory. Used primarily for IP
 * and ICMP.
 *
 * @param dataptr start of the buffer to calculate the checksum (no alignment needed)
 * @param len length of the buffer to calculate the checksum
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  return ~LWIP_CHKSUM(dataptr, len);
}

/**
 * Calculate a checksum over a chain of pbufs (without pseudo-header, much like
 * inet_chksum only pbufs are used).
 *
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  80a4bd:	55                   	push   %ebp
  80a4be:	89 e5                	mov    %esp,%ebp
  80a4c0:	57                   	push   %edi
  80a4c1:	56                   	push   %esi
  80a4c2:	53                   	push   %ebx
  80a4c3:	83 ec 0c             	sub    $0xc,%esp
  80a4c6:	8b 45 08             	mov    0x8(%ebp),%eax
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
  80a4c9:	be 00 00 00 00       	mov    $0x0,%esi
  80a4ce:	85 c0                	test   %eax,%eax
  80a4d0:	74 65                	je     80a537 <inet_chksum_pbuf+0x7a>
  80a4d2:	89 c3                	mov    %eax,%ebx
  80a4d4:	be 00 00 00 00       	mov    $0x0,%esi
  80a4d9:	bf 00 00 00 00       	mov    $0x0,%edi
    acc += LWIP_CHKSUM(q->payload, q->len);
  80a4de:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  80a4e2:	8b 43 04             	mov    0x4(%ebx),%eax
  80a4e5:	e8 52 ff ff ff       	call   80a43c <lwip_standard_chksum>
  80a4ea:	0f b7 c0             	movzwl %ax,%eax
  80a4ed:	01 f0                	add    %esi,%eax
    acc = FOLD_U32T(acc);
  80a4ef:	0f b7 d0             	movzwl %ax,%edx
  80a4f2:	c1 e8 10             	shr    $0x10,%eax
  80a4f5:	8d 34 02             	lea    (%edx,%eax,1),%esi
    if (q->len % 2 != 0) {
  80a4f8:	f6 43 0a 01          	testb  $0x1,0xa(%ebx)
  80a4fc:	74 1c                	je     80a51a <inet_chksum_pbuf+0x5d>
      swapped = 1 - swapped;
  80a4fe:	b8 01 00 00 00       	mov    $0x1,%eax
  80a503:	89 fa                	mov    %edi,%edx
  80a505:	28 d0                	sub    %dl,%al
  80a507:	89 c7                	mov    %eax,%edi
      acc = SWAP_BYTES_IN_WORD(acc);
  80a509:	89 f0                	mov    %esi,%eax
  80a50b:	0f b6 d4             	movzbl %ah,%edx
  80a50e:	25 ff 00 00 00       	and    $0xff,%eax
  80a513:	c1 e0 08             	shl    $0x8,%eax
  80a516:	89 d6                	mov    %edx,%esi
  80a518:	09 c6                	or     %eax,%esi
  80a51a:	8b 1b                	mov    (%ebx),%ebx
  80a51c:	85 db                	test   %ebx,%ebx
  80a51e:	75 be                	jne    80a4de <inet_chksum_pbuf+0x21>
    }
  }

  if (swapped) {
  80a520:	89 fa                	mov    %edi,%edx
  80a522:	84 d2                	test   %dl,%dl
  80a524:	74 11                	je     80a537 <inet_chksum_pbuf+0x7a>
    acc = SWAP_BYTES_IN_WORD(acc);
  80a526:	89 f0                	mov    %esi,%eax
  80a528:	0f b6 d4             	movzbl %ah,%edx
  80a52b:	25 ff 00 00 00       	and    $0xff,%eax
  80a530:	c1 e0 08             	shl    $0x8,%eax
  80a533:	89 d6                	mov    %edx,%esi
  80a535:	09 c6                	or     %eax,%esi
  80a537:	89 f0                	mov    %esi,%eax
  80a539:	f7 d0                	not    %eax
  80a53b:	0f b7 c0             	movzwl %ax,%eax
  }
  return (u16_t)~(acc & 0xffffUL);
}
  80a53e:	83 c4 0c             	add    $0xc,%esp
  80a541:	5b                   	pop    %ebx
  80a542:	5e                   	pop    %esi
  80a543:	5f                   	pop    %edi
  80a544:	5d                   	pop    %ebp
  80a545:	c3                   	ret    

0080a546 <inet_chksum>:
  80a546:	55                   	push   %ebp
  80a547:	89 e5                	mov    %esp,%ebp
  80a549:	83 ec 08             	sub    $0x8,%esp
  80a54c:	0f b7 55 0c          	movzwl 0xc(%ebp),%edx
  80a550:	8b 45 08             	mov    0x8(%ebp),%eax
  80a553:	e8 e4 fe ff ff       	call   80a43c <lwip_standard_chksum>
  80a558:	f7 d0                	not    %eax
  80a55a:	0f b7 c0             	movzwl %ax,%eax
  80a55d:	c9                   	leave  
  80a55e:	c3                   	ret    

0080a55f <inet_chksum_pseudo>:
  80a55f:	55                   	push   %ebp
  80a560:	89 e5                	mov    %esp,%ebp
  80a562:	57                   	push   %edi
  80a563:	56                   	push   %esi
  80a564:	53                   	push   %ebx
  80a565:	83 ec 0c             	sub    $0xc,%esp
  80a568:	8b 45 08             	mov    0x8(%ebp),%eax
  80a56b:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
  80a56f:	88 55 f1             	mov    %dl,0xfffffff1(%ebp)
  80a572:	0f b7 55 18          	movzwl 0x18(%ebp),%edx
  80a576:	66 89 55 ee          	mov    %dx,0xffffffee(%ebp)
  80a57a:	be 00 00 00 00       	mov    $0x0,%esi
  80a57f:	85 c0                	test   %eax,%eax
  80a581:	74 65                	je     80a5e8 <inet_chksum_pseudo+0x89>
  80a583:	89 c3                	mov    %eax,%ebx
  80a585:	be 00 00 00 00       	mov    $0x0,%esi
  80a58a:	bf 00 00 00 00       	mov    $0x0,%edi
  80a58f:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  80a593:	8b 43 04             	mov    0x4(%ebx),%eax
  80a596:	e8 a1 fe ff ff       	call   80a43c <lwip_standard_chksum>
  80a59b:	0f b7 c0             	movzwl %ax,%eax
  80a59e:	01 f0                	add    %esi,%eax
  80a5a0:	0f b7 d0             	movzwl %ax,%edx
  80a5a3:	c1 e8 10             	shr    $0x10,%eax
  80a5a6:	8d 34 02             	lea    (%edx,%eax,1),%esi
  80a5a9:	f6 43 0a 01          	testb  $0x1,0xa(%ebx)
  80a5ad:	74 1c                	je     80a5cb <inet_chksum_pseudo+0x6c>
  80a5af:	b8 01 00 00 00       	mov    $0x1,%eax
  80a5b4:	89 fa                	mov    %edi,%edx
  80a5b6:	28 d0                	sub    %dl,%al
  80a5b8:	89 c7                	mov    %eax,%edi
  80a5ba:	89 f0                	mov    %esi,%eax
  80a5bc:	0f b6 d4             	movzbl %ah,%edx
  80a5bf:	25 ff 00 00 00       	and    $0xff,%eax
  80a5c4:	c1 e0 08             	shl    $0x8,%eax
  80a5c7:	89 d6                	mov    %edx,%esi
  80a5c9:	09 c6                	or     %eax,%esi
  80a5cb:	8b 1b                	mov    (%ebx),%ebx
  80a5cd:	85 db                	test   %ebx,%ebx
  80a5cf:	75 be                	jne    80a58f <inet_chksum_pseudo+0x30>
  80a5d1:	89 fa                	mov    %edi,%edx
  80a5d3:	84 d2                	test   %dl,%dl
  80a5d5:	74 11                	je     80a5e8 <inet_chksum_pseudo+0x89>
  80a5d7:	89 f0                	mov    %esi,%eax
  80a5d9:	0f b6 d4             	movzbl %ah,%edx
  80a5dc:	25 ff 00 00 00       	and    $0xff,%eax
  80a5e1:	c1 e0 08             	shl    $0x8,%eax
  80a5e4:	89 d6                	mov    %edx,%esi
  80a5e6:	09 c6                	or     %eax,%esi
  80a5e8:	8b 45 0c             	mov    0xc(%ebp),%eax
  80a5eb:	8b 18                	mov    (%eax),%ebx
  80a5ed:	8b 45 10             	mov    0x10(%ebp),%eax
  80a5f0:	8b 38                	mov    (%eax),%edi
  80a5f2:	0f b6 45 f1          	movzbl 0xfffffff1(%ebp),%eax
  80a5f6:	89 04 24             	mov    %eax,(%esp)
  80a5f9:	e8 61 02 00 00       	call   80a85f <htons>
  80a5fe:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  80a602:	0f b7 45 ee          	movzwl 0xffffffee(%ebp),%eax
  80a606:	89 04 24             	mov    %eax,(%esp)
  80a609:	e8 51 02 00 00       	call   80a85f <htons>
  80a60e:	89 fa                	mov    %edi,%edx
  80a610:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  80a616:	0f b7 cb             	movzwl %bx,%ecx
  80a619:	01 ca                	add    %ecx,%edx
  80a61b:	c1 eb 10             	shr    $0x10,%ebx
  80a61e:	01 da                	add    %ebx,%edx
  80a620:	89 f9                	mov    %edi,%ecx
  80a622:	c1 e9 10             	shr    $0x10,%ecx
  80a625:	01 ca                	add    %ecx,%edx
  80a627:	01 f2                	add    %esi,%edx
  80a629:	0f b7 4d f2          	movzwl 0xfffffff2(%ebp),%ecx
  80a62d:	01 ca                	add    %ecx,%edx
  80a62f:	0f b7 c0             	movzwl %ax,%eax
  80a632:	01 c2                	add    %eax,%edx
  80a634:	0f b7 c2             	movzwl %dx,%eax
  80a637:	c1 ea 10             	shr    $0x10,%edx
  80a63a:	01 d0                	add    %edx,%eax
  80a63c:	89 c2                	mov    %eax,%edx
  80a63e:	c1 ea 10             	shr    $0x10,%edx
  80a641:	01 d0                	add    %edx,%eax
  80a643:	f7 d0                	not    %eax
  80a645:	0f b7 c0             	movzwl %ax,%eax
  80a648:	83 c4 0c             	add    $0xc,%esp
  80a64b:	5b                   	pop    %ebx
  80a64c:	5e                   	pop    %esi
  80a64d:	5f                   	pop    %edi
  80a64e:	5d                   	pop    %ebp
  80a64f:	c3                   	ret    

0080a650 <inet_chksum_pseudo_partial>:
  80a650:	55                   	push   %ebp
  80a651:	89 e5                	mov    %esp,%ebp
  80a653:	57                   	push   %edi
  80a654:	56                   	push   %esi
  80a655:	53                   	push   %ebx
  80a656:	83 ec 1c             	sub    $0x1c,%esp
  80a659:	8b 45 08             	mov    0x8(%ebp),%eax
  80a65c:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
  80a660:	88 55 eb             	mov    %dl,0xffffffeb(%ebp)
  80a663:	0f b7 55 18          	movzwl 0x18(%ebp),%edx
  80a667:	66 89 55 e8          	mov    %dx,0xffffffe8(%ebp)
  80a66b:	0f b7 75 1c          	movzwl 0x1c(%ebp),%esi
  80a66f:	85 c0                	test   %eax,%eax
  80a671:	74 05                	je     80a678 <inet_chksum_pseudo_partial+0x28>
  80a673:	66 85 f6             	test   %si,%si
  80a676:	75 0c                	jne    80a684 <inet_chksum_pseudo_partial+0x34>
  80a678:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  80a67f:	e9 ba 00 00 00       	jmp    80a73e <inet_chksum_pseudo_partial+0xee>
  80a684:	89 c7                	mov    %eax,%edi
  80a686:	c7 45 ec 00 00 00 00 	movl   $0x0,0xffffffec(%ebp)
  80a68d:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  80a691:	0f b7 5f 0a          	movzwl 0xa(%edi),%ebx
  80a695:	66 39 f3             	cmp    %si,%bx
  80a698:	0f 87 88 00 00 00    	ja     80a726 <inet_chksum_pseudo_partial+0xd6>
  80a69e:	0f b7 d3             	movzwl %bx,%edx
  80a6a1:	8b 47 04             	mov    0x4(%edi),%eax
  80a6a4:	e8 93 fd ff ff       	call   80a43c <lwip_standard_chksum>
  80a6a9:	66 29 de             	sub    %bx,%si
  80a6ac:	66 81 fe fe 7f       	cmp    $0x7ffe,%si
  80a6b1:	76 1c                	jbe    80a6cf <inet_chksum_pseudo_partial+0x7f>
  80a6b3:	c7 44 24 08 41 39 81 	movl   $0x813941,0x8(%esp)
  80a6ba:	00 
  80a6bb:	c7 44 24 04 60 01 00 	movl   $0x160,0x4(%esp)
  80a6c2:	00 
  80a6c3:	c7 04 24 4c 39 81 00 	movl   $0x81394c,(%esp)
  80a6ca:	e8 bd 61 ff ff       	call   80088c <_panic>
  80a6cf:	0f b7 c0             	movzwl %ax,%eax
  80a6d2:	03 45 ec             	add    0xffffffec(%ebp),%eax
  80a6d5:	0f b7 d0             	movzwl %ax,%edx
  80a6d8:	c1 e8 10             	shr    $0x10,%eax
  80a6db:	01 c2                	add    %eax,%edx
  80a6dd:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80a6e0:	f6 47 0a 01          	testb  $0x1,0xa(%edi)
  80a6e4:	74 1a                	je     80a700 <inet_chksum_pseudo_partial+0xb0>
  80a6e6:	b8 01 00 00 00       	mov    $0x1,%eax
  80a6eb:	2a 45 f3             	sub    0xfffffff3(%ebp),%al
  80a6ee:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  80a6f1:	0f b6 d6             	movzbl %dh,%edx
  80a6f4:	0f b6 45 ec          	movzbl 0xffffffec(%ebp),%eax
  80a6f8:	c1 e0 08             	shl    $0x8,%eax
  80a6fb:	09 c2                	or     %eax,%edx
  80a6fd:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80a700:	8b 3f                	mov    (%edi),%edi
  80a702:	85 ff                	test   %edi,%edi
  80a704:	74 05                	je     80a70b <inet_chksum_pseudo_partial+0xbb>
  80a706:	66 85 f6             	test   %si,%si
  80a709:	75 86                	jne    80a691 <inet_chksum_pseudo_partial+0x41>
  80a70b:	80 7d f3 00          	cmpb   $0x0,0xfffffff3(%ebp)
  80a70f:	74 2d                	je     80a73e <inet_chksum_pseudo_partial+0xee>
  80a711:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80a714:	0f b6 d4             	movzbl %ah,%edx
  80a717:	25 ff 00 00 00       	and    $0xff,%eax
  80a71c:	c1 e0 08             	shl    $0x8,%eax
  80a71f:	09 c2                	or     %eax,%edx
  80a721:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80a724:	eb 18                	jmp    80a73e <inet_chksum_pseudo_partial+0xee>
  80a726:	0f b7 d6             	movzwl %si,%edx
  80a729:	8b 47 04             	mov    0x4(%edi),%eax
  80a72c:	e8 0b fd ff ff       	call   80a43c <lwip_standard_chksum>
  80a731:	0f b7 c0             	movzwl %ax,%eax
  80a734:	03 45 ec             	add    0xffffffec(%ebp),%eax
  80a737:	be 00 00 00 00       	mov    $0x0,%esi
  80a73c:	eb 97                	jmp    80a6d5 <inet_chksum_pseudo_partial+0x85>
  80a73e:	8b 45 0c             	mov    0xc(%ebp),%eax
  80a741:	8b 18                	mov    (%eax),%ebx
  80a743:	8b 45 10             	mov    0x10(%ebp),%eax
  80a746:	8b 30                	mov    (%eax),%esi
  80a748:	0f b6 45 eb          	movzbl 0xffffffeb(%ebp),%eax
  80a74c:	89 04 24             	mov    %eax,(%esp)
  80a74f:	e8 0b 01 00 00       	call   80a85f <htons>
  80a754:	89 c7                	mov    %eax,%edi
  80a756:	0f b7 45 e8          	movzwl 0xffffffe8(%ebp),%eax
  80a75a:	89 04 24             	mov    %eax,(%esp)
  80a75d:	e8 fd 00 00 00       	call   80a85f <htons>
  80a762:	89 f2                	mov    %esi,%edx
  80a764:	81 e2 ff ff 00 00    	and    $0xffff,%edx
  80a76a:	0f b7 cb             	movzwl %bx,%ecx
  80a76d:	01 ca                	add    %ecx,%edx
  80a76f:	c1 eb 10             	shr    $0x10,%ebx
  80a772:	01 da                	add    %ebx,%edx
  80a774:	89 f1                	mov    %esi,%ecx
  80a776:	c1 e9 10             	shr    $0x10,%ecx
  80a779:	01 ca                	add    %ecx,%edx
  80a77b:	03 55 ec             	add    0xffffffec(%ebp),%edx
  80a77e:	0f b7 cf             	movzwl %di,%ecx
  80a781:	01 ca                	add    %ecx,%edx
  80a783:	0f b7 c0             	movzwl %ax,%eax
  80a786:	01 c2                	add    %eax,%edx
  80a788:	0f b7 c2             	movzwl %dx,%eax
  80a78b:	c1 ea 10             	shr    $0x10,%edx
  80a78e:	01 d0                	add    %edx,%eax
  80a790:	89 c2                	mov    %eax,%edx
  80a792:	c1 ea 10             	shr    $0x10,%edx
  80a795:	01 d0                	add    %edx,%eax
  80a797:	f7 d0                	not    %eax
  80a799:	0f b7 c0             	movzwl %ax,%eax
  80a79c:	83 c4 1c             	add    $0x1c,%esp
  80a79f:	5b                   	pop    %ebx
  80a7a0:	5e                   	pop    %esi
  80a7a1:	5f                   	pop    %edi
  80a7a2:	5d                   	pop    %ebp
  80a7a3:	c3                   	ret    
	...

0080a7b0 <inet_ntoa>:
 *         represenation of addr
 */
char *
inet_ntoa(struct in_addr addr)
{
  80a7b0:	55                   	push   %ebp
  80a7b1:	89 e5                	mov    %esp,%ebp
  80a7b3:	57                   	push   %edi
  80a7b4:	56                   	push   %esi
  80a7b5:	53                   	push   %ebx
  80a7b6:	83 ec 18             	sub    $0x18,%esp
  static char str[16];
  u32_t s_addr = addr.s_addr;
  80a7b9:	8b 45 08             	mov    0x8(%ebp),%eax
  80a7bc:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  char inv[3];
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;

  rp = str;
  ap = (u8_t *)&s_addr;
  80a7bf:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80a7c2:	89 45 dc             	mov    %eax,0xffffffdc(%ebp)
  80a7c5:	be 00 00 00 00       	mov    $0x0,%esi
  80a7ca:	bf 7c 7d b3 00       	mov    $0xb37d7c,%edi
  80a7cf:	c6 45 e3 00          	movb   $0x0,0xffffffe3(%ebp)
  80a7d3:	eb 02                	jmp    80a7d7 <inet_ntoa+0x27>
  80a7d5:	89 c6                	mov    %eax,%esi
  for(n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
  80a7d7:	8b 55 dc             	mov    0xffffffdc(%ebp),%edx
  80a7da:	0f b6 0a             	movzbl (%edx),%ecx
      *ap /= (u8_t)10;
  80a7dd:	b8 cd ff ff ff       	mov    $0xffffffcd,%eax
  80a7e2:	f6 e1                	mul    %cl
  80a7e4:	89 c2                	mov    %eax,%edx
  80a7e6:	66 c1 ea 08          	shr    $0x8,%dx
  80a7ea:	c0 ea 03             	shr    $0x3,%dl
  80a7ed:	8b 45 dc             	mov    0xffffffdc(%ebp),%eax
  80a7f0:	88 10                	mov    %dl,(%eax)
      inv[i++] = '0' + rem;
  80a7f2:	89 f0                	mov    %esi,%eax
  80a7f4:	0f b6 d8             	movzbl %al,%ebx
  80a7f7:	8d 04 92             	lea    (%edx,%edx,4),%eax
  80a7fa:	01 c0                	add    %eax,%eax
  80a7fc:	28 c1                	sub    %al,%cl
  80a7fe:	83 c1 30             	add    $0x30,%ecx
  80a801:	88 4c 1d ed          	mov    %cl,0xffffffed(%ebp,%ebx,1)
  80a805:	8d 46 01             	lea    0x1(%esi),%eax
    } while(*ap);
  80a808:	84 d2                	test   %dl,%dl
  80a80a:	75 c9                	jne    80a7d5 <inet_ntoa+0x25>
    while(i--)
  80a80c:	89 f1                	mov    %esi,%ecx
  80a80e:	80 f9 ff             	cmp    $0xff,%cl
  80a811:	74 20                	je     80a833 <inet_ntoa+0x83>
  80a813:	89 fa                	mov    %edi,%edx
      *rp++ = inv[i];
  80a815:	0f b6 c1             	movzbl %cl,%eax
  80a818:	0f b6 44 05 ed       	movzbl 0xffffffed(%ebp,%eax,1),%eax
  80a81d:	88 02                	mov    %al,(%edx)
  80a81f:	83 c2 01             	add    $0x1,%edx
  80a822:	83 e9 01             	sub    $0x1,%ecx
  80a825:	80 f9 ff             	cmp    $0xff,%cl
  80a828:	75 eb                	jne    80a815 <inet_ntoa+0x65>
  80a82a:	89 f2                	mov    %esi,%edx
  80a82c:	0f b6 c2             	movzbl %dl,%eax
  80a82f:	8d 7c 07 01          	lea    0x1(%edi,%eax,1),%edi
    *rp++ = '.';
  80a833:	c6 07 2e             	movb   $0x2e,(%edi)
  80a836:	83 c7 01             	add    $0x1,%edi
  80a839:	80 45 e3 01          	addb   $0x1,0xffffffe3(%ebp)
  80a83d:	80 7d e3 03          	cmpb   $0x3,0xffffffe3(%ebp)
  80a841:	77 0b                	ja     80a84e <inet_ntoa+0x9e>
    ap++;
  80a843:	83 45 dc 01          	addl   $0x1,0xffffffdc(%ebp)
  80a847:	b8 00 00 00 00       	mov    $0x0,%eax
  80a84c:	eb 87                	jmp    80a7d5 <inet_ntoa+0x25>
  }
  *--rp = 0;
  80a84e:	c6 47 ff 00          	movb   $0x0,0xffffffff(%edi)
  return str;
}
  80a852:	b8 7c 7d b3 00       	mov    $0xb37d7c,%eax
  80a857:	83 c4 18             	add    $0x18,%esp
  80a85a:	5b                   	pop    %ebx
  80a85b:	5e                   	pop    %esi
  80a85c:	5f                   	pop    %edi
  80a85d:	5d                   	pop    %ebp
  80a85e:	c3                   	ret    

0080a85f <htons>:

/**
 * These are reference implementations of the byte swapping functions.
 * Again with the aim of being simple, correct and fully portable.
 * Byte swapping is the second thing you would want to optimize. You will
 * need to port it to your architecture and in your cc.h:
 * 
 * #define LWIP_PLATFORM_BYTESWAP 1
 * #define LWIP_PLATFORM_HTONS(x) <your_htons>
 * #define LWIP_PLATFORM_HTONL(x) <your_htonl>
 *
 * Note ntohs() and ntohl() are merely references to the htonx counterparts.
 */

#if (LWIP_PLATFORM_BYTESWAP == 0) && (BYTE_ORDER == LITTLE_ENDIAN)

/**
 * Convert an u16_t from host- to network byte order.
 *
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
htons(u16_t n)
{
  80a85f:	55                   	push   %ebp
  80a860:	89 e5                	mov    %esp,%ebp
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  80a862:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  80a866:	89 c2                	mov    %eax,%edx
  80a868:	c1 ea 08             	shr    $0x8,%edx
  80a86b:	c1 e0 08             	shl    $0x8,%eax
  80a86e:	09 d0                	or     %edx,%eax
  80a870:	0f b7 c0             	movzwl %ax,%eax
}
  80a873:	5d                   	pop    %ebp
  80a874:	c3                   	ret    

0080a875 <ntohs>:

/**
 * Convert an u16_t from network- to host byte order.
 *
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
ntohs(u16_t n)
{
  80a875:	55                   	push   %ebp
  80a876:	89 e5                	mov    %esp,%ebp
  80a878:	83 ec 04             	sub    $0x4,%esp
  return htons(n);
  80a87b:	0f b7 45 08          	movzwl 0x8(%ebp),%eax
  80a87f:	89 04 24             	mov    %eax,(%esp)
  80a882:	e8 d8 ff ff ff       	call   80a85f <htons>
  80a887:	0f b7 c0             	movzwl %ax,%eax
}
  80a88a:	c9                   	leave  
  80a88b:	c3                   	ret    

0080a88c <htonl>:

/**
 * Convert an u32_t from host- to network byte order.
 *
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
htonl(u32_t n)
{
  80a88c:	55                   	push   %ebp
  80a88d:	89 e5                	mov    %esp,%ebp
  80a88f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80a892:	89 c8                	mov    %ecx,%eax
  80a894:	25 00 ff 00 00       	and    $0xff00,%eax
  80a899:	c1 e0 08             	shl    $0x8,%eax
  80a89c:	89 ca                	mov    %ecx,%edx
  80a89e:	c1 e2 18             	shl    $0x18,%edx
  80a8a1:	09 d0                	or     %edx,%eax
  80a8a3:	89 ca                	mov    %ecx,%edx
  80a8a5:	81 e2 00 00 ff 00    	and    $0xff0000,%edx
  80a8ab:	c1 ea 08             	shr    $0x8,%edx
  80a8ae:	09 d0                	or     %edx,%eax
  80a8b0:	c1 e9 18             	shr    $0x18,%ecx
  80a8b3:	09 c8                	or     %ecx,%eax
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
  80a8b5:	5d                   	pop    %ebp
  80a8b6:	c3                   	ret    

0080a8b7 <inet_aton>:
  80a8b7:	55                   	push   %ebp
  80a8b8:	89 e5                	mov    %esp,%ebp
  80a8ba:	57                   	push   %edi
  80a8bb:	56                   	push   %esi
  80a8bc:	53                   	push   %ebx
  80a8bd:	83 ec 1c             	sub    $0x1c,%esp
  80a8c0:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80a8c3:	0f be 0b             	movsbl (%ebx),%ecx
  80a8c6:	8d 41 d0             	lea    0xffffffd0(%ecx),%eax
  80a8c9:	3c 09                	cmp    $0x9,%al
  80a8cb:	0f 87 9a 01 00 00    	ja     80aa6b <inet_aton+0x1b4>
  80a8d1:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  80a8d4:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  80a8d7:	be 0a 00 00 00       	mov    $0xa,%esi
  80a8dc:	83 f9 30             	cmp    $0x30,%ecx
  80a8df:	75 20                	jne    80a901 <inet_aton+0x4a>
  80a8e1:	83 c3 01             	add    $0x1,%ebx
  80a8e4:	0f be 0b             	movsbl (%ebx),%ecx
  80a8e7:	83 f9 78             	cmp    $0x78,%ecx
  80a8ea:	74 0a                	je     80a8f6 <inet_aton+0x3f>
  80a8ec:	be 08 00 00 00       	mov    $0x8,%esi
  80a8f1:	83 f9 58             	cmp    $0x58,%ecx
  80a8f4:	75 0b                	jne    80a901 <inet_aton+0x4a>
  80a8f6:	83 c3 01             	add    $0x1,%ebx
  80a8f9:	0f be 0b             	movsbl (%ebx),%ecx
  80a8fc:	be 10 00 00 00       	mov    $0x10,%esi
  80a901:	bf 00 00 00 00       	mov    $0x0,%edi
  80a906:	89 ca                	mov    %ecx,%edx
  80a908:	8d 42 d0             	lea    0xffffffd0(%edx),%eax
  80a90b:	3c 09                	cmp    $0x9,%al
  80a90d:	77 11                	ja     80a920 <inet_aton+0x69>
  80a90f:	89 f8                	mov    %edi,%eax
  80a911:	0f af c6             	imul   %esi,%eax
  80a914:	8d 7c 08 d0          	lea    0xffffffd0(%eax,%ecx,1),%edi
  80a918:	83 c3 01             	add    $0x1,%ebx
  80a91b:	0f be 0b             	movsbl (%ebx),%ecx
  80a91e:	eb e6                	jmp    80a906 <inet_aton+0x4f>
  80a920:	83 fe 10             	cmp    $0x10,%esi
  80a923:	75 30                	jne    80a955 <inet_aton+0x9e>
  80a925:	8d 42 9f             	lea    0xffffff9f(%edx),%eax
  80a928:	88 45 df             	mov    %al,0xffffffdf(%ebp)
  80a92b:	3c 05                	cmp    $0x5,%al
  80a92d:	76 07                	jbe    80a936 <inet_aton+0x7f>
  80a92f:	8d 42 bf             	lea    0xffffffbf(%edx),%eax
  80a932:	3c 05                	cmp    $0x5,%al
  80a934:	77 1f                	ja     80a955 <inet_aton+0x9e>
  80a936:	80 7d df 1a          	cmpb   $0x1a,0xffffffdf(%ebp)
  80a93a:	19 c0                	sbb    %eax,%eax
  80a93c:	83 e0 20             	and    $0x20,%eax
  80a93f:	29 c1                	sub    %eax,%ecx
  80a941:	8d 41 c9             	lea    0xffffffc9(%ecx),%eax
  80a944:	89 fa                	mov    %edi,%edx
  80a946:	c1 e2 04             	shl    $0x4,%edx
  80a949:	89 c7                	mov    %eax,%edi
  80a94b:	09 d7                	or     %edx,%edi
  80a94d:	83 c3 01             	add    $0x1,%ebx
  80a950:	0f be 0b             	movsbl (%ebx),%ecx
  80a953:	eb b1                	jmp    80a906 <inet_aton+0x4f>
  80a955:	83 f9 2e             	cmp    $0x2e,%ecx
  80a958:	75 2d                	jne    80a987 <inet_aton+0xd0>
  80a95a:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80a95d:	3b 45 e0             	cmp    0xffffffe0(%ebp),%eax
  80a960:	0f 86 05 01 00 00    	jbe    80aa6b <inet_aton+0x1b4>
  80a966:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80a969:	89 3a                	mov    %edi,(%edx)
  80a96b:	83 c3 01             	add    $0x1,%ebx
  80a96e:	0f be 0b             	movsbl (%ebx),%ecx
  80a971:	8d 41 d0             	lea    0xffffffd0(%ecx),%eax
  80a974:	3c 09                	cmp    $0x9,%al
  80a976:	0f 87 ef 00 00 00    	ja     80aa6b <inet_aton+0x1b4>
  80a97c:	83 c2 04             	add    $0x4,%edx
  80a97f:	89 55 e0             	mov    %edx,0xffffffe0(%ebp)
  80a982:	e9 50 ff ff ff       	jmp    80a8d7 <inet_aton+0x20>
  80a987:	89 fb                	mov    %edi,%ebx
  80a989:	85 c9                	test   %ecx,%ecx
  80a98b:	74 2e                	je     80a9bb <inet_aton+0x104>
  80a98d:	8d 42 e0             	lea    0xffffffe0(%edx),%eax
  80a990:	3c 5f                	cmp    $0x5f,%al
  80a992:	0f 87 d3 00 00 00    	ja     80aa6b <inet_aton+0x1b4>
  80a998:	83 f9 20             	cmp    $0x20,%ecx
  80a99b:	74 1e                	je     80a9bb <inet_aton+0x104>
  80a99d:	83 f9 0c             	cmp    $0xc,%ecx
  80a9a0:	74 19                	je     80a9bb <inet_aton+0x104>
  80a9a2:	83 f9 0a             	cmp    $0xa,%ecx
  80a9a5:	74 14                	je     80a9bb <inet_aton+0x104>
  80a9a7:	83 f9 0d             	cmp    $0xd,%ecx
  80a9aa:	74 0f                	je     80a9bb <inet_aton+0x104>
  80a9ac:	83 f9 09             	cmp    $0x9,%ecx
  80a9af:	90                   	nop    
  80a9b0:	74 09                	je     80a9bb <inet_aton+0x104>
  80a9b2:	83 f9 0b             	cmp    $0xb,%ecx
  80a9b5:	0f 85 b0 00 00 00    	jne    80aa6b <inet_aton+0x1b4>
  80a9bb:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  80a9be:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80a9c1:	29 c2                	sub    %eax,%edx
  80a9c3:	89 d0                	mov    %edx,%eax
  80a9c5:	c1 f8 02             	sar    $0x2,%eax
  80a9c8:	83 c0 01             	add    $0x1,%eax
  80a9cb:	83 f8 02             	cmp    $0x2,%eax
  80a9ce:	74 24                	je     80a9f4 <inet_aton+0x13d>
  80a9d0:	83 f8 02             	cmp    $0x2,%eax
  80a9d3:	7f 0d                	jg     80a9e2 <inet_aton+0x12b>
  80a9d5:	85 c0                	test   %eax,%eax
  80a9d7:	0f 84 8e 00 00 00    	je     80aa6b <inet_aton+0x1b4>
  80a9dd:	8d 76 00             	lea    0x0(%esi),%esi
  80a9e0:	eb 6a                	jmp    80aa4c <inet_aton+0x195>
  80a9e2:	83 f8 03             	cmp    $0x3,%eax
  80a9e5:	74 27                	je     80aa0e <inet_aton+0x157>
  80a9e7:	83 f8 04             	cmp    $0x4,%eax
  80a9ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80a9f0:	75 5a                	jne    80aa4c <inet_aton+0x195>
  80a9f2:	eb 36                	jmp    80aa2a <inet_aton+0x173>
  80a9f4:	81 fb ff ff ff 00    	cmp    $0xffffff,%ebx
  80a9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80aa00:	77 69                	ja     80aa6b <inet_aton+0x1b4>
  80aa02:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80aa05:	c1 e0 18             	shl    $0x18,%eax
  80aa08:	89 df                	mov    %ebx,%edi
  80aa0a:	09 c7                	or     %eax,%edi
  80aa0c:	eb 3e                	jmp    80aa4c <inet_aton+0x195>
  80aa0e:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
  80aa14:	77 55                	ja     80aa6b <inet_aton+0x1b4>
  80aa16:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80aa19:	c1 e2 10             	shl    $0x10,%edx
  80aa1c:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80aa1f:	c1 e0 18             	shl    $0x18,%eax
  80aa22:	09 c2                	or     %eax,%edx
  80aa24:	89 d7                	mov    %edx,%edi
  80aa26:	09 df                	or     %ebx,%edi
  80aa28:	eb 22                	jmp    80aa4c <inet_aton+0x195>
  80aa2a:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  80aa30:	77 39                	ja     80aa6b <inet_aton+0x1b4>
  80aa32:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80aa35:	c1 e0 10             	shl    $0x10,%eax
  80aa38:	8b 55 e4             	mov    0xffffffe4(%ebp),%edx
  80aa3b:	c1 e2 18             	shl    $0x18,%edx
  80aa3e:	09 d0                	or     %edx,%eax
  80aa40:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80aa43:	c1 e2 08             	shl    $0x8,%edx
  80aa46:	09 d0                	or     %edx,%eax
  80aa48:	89 c7                	mov    %eax,%edi
  80aa4a:	09 df                	or     %ebx,%edi
  80aa4c:	b8 01 00 00 00       	mov    $0x1,%eax
  80aa51:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80aa55:	74 19                	je     80aa70 <inet_aton+0x1b9>
  80aa57:	89 3c 24             	mov    %edi,(%esp)
  80aa5a:	e8 2d fe ff ff       	call   80a88c <htonl>
  80aa5f:	8b 55 0c             	mov    0xc(%ebp),%edx
  80aa62:	89 02                	mov    %eax,(%edx)
  80aa64:	b8 01 00 00 00       	mov    $0x1,%eax
  80aa69:	eb 05                	jmp    80aa70 <inet_aton+0x1b9>
  80aa6b:	b8 00 00 00 00       	mov    $0x0,%eax
  80aa70:	83 c4 1c             	add    $0x1c,%esp
  80aa73:	5b                   	pop    %ebx
  80aa74:	5e                   	pop    %esi
  80aa75:	5f                   	pop    %edi
  80aa76:	5d                   	pop    %ebp
  80aa77:	c3                   	ret    

0080aa78 <inet_addr>:
  80aa78:	55                   	push   %ebp
  80aa79:	89 e5                	mov    %esp,%ebp
  80aa7b:	83 ec 18             	sub    $0x18,%esp
  80aa7e:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
  80aa81:	89 44 24 04          	mov    %eax,0x4(%esp)
  80aa85:	8b 45 08             	mov    0x8(%ebp),%eax
  80aa88:	89 04 24             	mov    %eax,(%esp)
  80aa8b:	e8 27 fe ff ff       	call   80a8b7 <inet_aton>
  80aa90:	83 f8 01             	cmp    $0x1,%eax
  80aa93:	19 c0                	sbb    %eax,%eax
  80aa95:	0b 45 fc             	or     0xfffffffc(%ebp),%eax
  80aa98:	c9                   	leave  
  80aa99:	c3                   	ret    

0080aa9a <ntohl>:

/**
 * Convert an u32_t from network- to host byte order.
 *
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
ntohl(u32_t n)
{
  80aa9a:	55                   	push   %ebp
  80aa9b:	89 e5                	mov    %esp,%ebp
  80aa9d:	83 ec 04             	sub    $0x4,%esp
  return htonl(n);
  80aaa0:	8b 45 08             	mov    0x8(%ebp),%eax
  80aaa3:	89 04 24             	mov    %eax,(%esp)
  80aaa6:	e8 e1 fd ff ff       	call   80a88c <htonl>
}
  80aaab:	c9                   	leave  
  80aaac:	c3                   	ret    
  80aaad:	00 00                	add    %al,(%eax)
	...

0080aab0 <tcp_zero_window_probe>:
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  80aab0:	55                   	push   %ebp
  80aab1:	89 e5                	mov    %esp,%ebp
  80aab3:	57                   	push   %edi
  80aab4:	56                   	push   %esi
  80aab5:	53                   	push   %ebx
  80aab6:	83 ec 1c             	sub    $0x1c,%esp
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;

  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: sending ZERO WINDOW probe to %"
               U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
               ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
               ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  80aab9:	8b 45 08             	mov    0x8(%ebp),%eax
  80aabc:	8b 70 78             	mov    0x78(%eax),%esi

  if(seg == NULL)
  80aabf:	85 f6                	test   %esi,%esi
  80aac1:	75 0b                	jne    80aace <tcp_zero_window_probe+0x1e>
    seg = pcb->unsent;
  80aac3:	8b 70 74             	mov    0x74(%eax),%esi

  if(seg == NULL)
  80aac6:	85 f6                	test   %esi,%esi
  80aac8:	0f 84 51 01 00 00    	je     80ac1f <tcp_zero_window_probe+0x16f>
    return;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + 1, PBUF_RAM);
  80aace:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80aad5:	00 
  80aad6:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
  80aadd:	00 
  80aade:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80aae5:	e8 6d d2 ff ff       	call   807d57 <pbuf_alloc>
  80aaea:	89 c7                	mov    %eax,%edi
   
  if(p == NULL) {
  80aaec:	85 c0                	test   %eax,%eax
  80aaee:	0f 84 2b 01 00 00    	je     80ac1f <tcp_zero_window_probe+0x16f>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  80aaf4:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  80aaf9:	77 1c                	ja     80ab17 <tcp_zero_window_probe+0x67>
  80aafb:	c7 44 24 08 70 39 81 	movl   $0x813970,0x8(%esp)
  80ab02:	00 
  80ab03:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
  80ab0a:	00 
  80ab0b:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80ab12:	e8 75 5d ff ff       	call   80088c <_panic>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = p->payload;
  80ab17:	8b 58 04             	mov    0x4(%eax),%ebx
  tcphdr->src = htons(pcb->local_port);
  80ab1a:	8b 55 08             	mov    0x8(%ebp),%edx
  80ab1d:	0f b7 42 1c          	movzwl 0x1c(%edx),%eax
  80ab21:	89 04 24             	mov    %eax,(%esp)
  80ab24:	e8 36 fd ff ff       	call   80a85f <htons>
  80ab29:	66 89 03             	mov    %ax,(%ebx)
  tcphdr->dest = htons(pcb->remote_port);
  80ab2c:	8b 55 08             	mov    0x8(%ebp),%edx
  80ab2f:	0f b7 42 1e          	movzwl 0x1e(%edx),%eax
  80ab33:	89 04 24             	mov    %eax,(%esp)
  80ab36:	e8 24 fd ff ff       	call   80a85f <htons>
  80ab3b:	66 89 43 02          	mov    %ax,0x2(%ebx)
  tcphdr->seqno = seg->tcphdr->seqno;
  80ab3f:	8b 46 10             	mov    0x10(%esi),%eax
  80ab42:	8b 40 04             	mov    0x4(%eax),%eax
  80ab45:	89 43 04             	mov    %eax,0x4(%ebx)
  tcphdr->ackno = htonl(pcb->rcv_nxt);
  80ab48:	8b 55 08             	mov    0x8(%ebp),%edx
  80ab4b:	8b 42 24             	mov    0x24(%edx),%eax
  80ab4e:	89 04 24             	mov    %eax,(%esp)
  80ab51:	e8 36 fd ff ff       	call   80a88c <htonl>
  80ab56:	89 43 08             	mov    %eax,0x8(%ebx)
  TCPH_FLAGS_SET(tcphdr, 0);
  80ab59:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ab5d:	89 04 24             	mov    %eax,(%esp)
  80ab60:	e8 10 fd ff ff       	call   80a875 <ntohs>
  80ab65:	25 c0 ff 00 00       	and    $0xffc0,%eax
  80ab6a:	89 04 24             	mov    %eax,(%esp)
  80ab6d:	e8 ed fc ff ff       	call   80a85f <htons>
  80ab72:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  80ab76:	8b 55 08             	mov    0x8(%ebp),%edx
  80ab79:	0f b7 42 2a          	movzwl 0x2a(%edx),%eax
  80ab7d:	89 04 24             	mov    %eax,(%esp)
  80ab80:	e8 da fc ff ff       	call   80a85f <htons>
  80ab85:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  tcphdr->urgp = 0;
  80ab89:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  TCPH_HDRLEN_SET(tcphdr, 5);
  80ab8f:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ab93:	89 04 24             	mov    %eax,(%esp)
  80ab96:	e8 da fc ff ff       	call   80a875 <ntohs>
  80ab9b:	83 e0 3f             	and    $0x3f,%eax
  80ab9e:	80 cc 50             	or     $0x50,%ah
  80aba1:	89 04 24             	mov    %eax,(%esp)
  80aba4:	e8 b6 fc ff ff       	call   80a85f <htons>
  80aba9:	66 89 43 0c          	mov    %ax,0xc(%ebx)

  /* Copy in one byte from the head of the unacked queue */
  *((char *)p->payload + sizeof(struct tcp_hdr)) = *(char *)seg->dataptr;
  80abad:	8b 57 04             	mov    0x4(%edi),%edx
  80abb0:	8b 46 08             	mov    0x8(%esi),%eax
  80abb3:	0f b6 00             	movzbl (%eax),%eax
  80abb6:	88 42 14             	mov    %al,0x14(%edx)

  tcphdr->chksum = 0;
  80abb9:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  80abbf:	8b 75 08             	mov    0x8(%ebp),%esi
  80abc2:	83 c6 04             	add    $0x4,%esi
  80abc5:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80abc9:	89 44 24 10          	mov    %eax,0x10(%esp)
  80abcd:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80abd4:	00 
  80abd5:	89 74 24 08          	mov    %esi,0x8(%esp)
  80abd9:	8b 45 08             	mov    0x8(%ebp),%eax
  80abdc:	89 44 24 04          	mov    %eax,0x4(%esp)
  80abe0:	89 3c 24             	mov    %edi,(%esp)
  80abe3:	e8 77 f9 ff ff       	call   80a55f <inet_chksum_pseudo>
  80abe8:	66 89 43 10          	mov    %ax,0x10(%ebx)
                                      IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);

  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  {
    struct netif *netif;
    netif = ip_route(&pcb->remote_ip);
    if(netif != NULL){
      netif->addr_hint = &(pcb->addr_hint);
      ip_output_if(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl,
                   0, IP_PROTO_TCP, netif);
      netif->addr_hint = NULL;
    }
  }
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  80abec:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  80abf3:	00 
  80abf4:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80abfb:	00 
  80abfc:	8b 55 08             	mov    0x8(%ebp),%edx
  80abff:	0f b6 42 0b          	movzbl 0xb(%edx),%eax
  80ac03:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80ac07:	89 74 24 08          	mov    %esi,0x8(%esp)
  80ac0b:	89 54 24 04          	mov    %edx,0x4(%esp)
  80ac0f:	89 3c 24             	mov    %edi,(%esp)
  80ac12:	e8 e6 ea ff ff       	call   8096fd <ip_output>
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  80ac17:	89 3c 24             	mov    %edi,(%esp)
  80ac1a:	e8 75 ce ff ff       	call   807a94 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  80ac1f:	83 c4 1c             	add    $0x1c,%esp
  80ac22:	5b                   	pop    %ebx
  80ac23:	5e                   	pop    %esi
  80ac24:	5f                   	pop    %edi
  80ac25:	5d                   	pop    %ebp
  80ac26:	c3                   	ret    

0080ac27 <tcp_keepalive>:
  80ac27:	55                   	push   %ebp
  80ac28:	89 e5                	mov    %esp,%ebp
  80ac2a:	57                   	push   %edi
  80ac2b:	56                   	push   %esi
  80ac2c:	53                   	push   %ebx
  80ac2d:	83 ec 1c             	sub    $0x1c,%esp
  80ac30:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ac37:	00 
  80ac38:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80ac3f:	00 
  80ac40:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80ac47:	e8 0b d1 ff ff       	call   807d57 <pbuf_alloc>
  80ac4c:	89 c7                	mov    %eax,%edi
  80ac4e:	85 c0                	test   %eax,%eax
  80ac50:	0f 84 2a 01 00 00    	je     80ad80 <tcp_keepalive+0x159>
  80ac56:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  80ac5b:	77 1c                	ja     80ac79 <tcp_keepalive+0x52>
  80ac5d:	c7 44 24 08 70 39 81 	movl   $0x813970,0x8(%esp)
  80ac64:	00 
  80ac65:	c7 44 24 04 3a 03 00 	movl   $0x33a,0x4(%esp)
  80ac6c:	00 
  80ac6d:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80ac74:	e8 13 5c ff ff       	call   80088c <_panic>
  80ac79:	8b 58 04             	mov    0x4(%eax),%ebx
  80ac7c:	8b 55 08             	mov    0x8(%ebp),%edx
  80ac7f:	0f b7 42 1c          	movzwl 0x1c(%edx),%eax
  80ac83:	89 04 24             	mov    %eax,(%esp)
  80ac86:	e8 d4 fb ff ff       	call   80a85f <htons>
  80ac8b:	66 89 03             	mov    %ax,(%ebx)
  80ac8e:	8b 55 08             	mov    0x8(%ebp),%edx
  80ac91:	0f b7 42 1e          	movzwl 0x1e(%edx),%eax
  80ac95:	89 04 24             	mov    %eax,(%esp)
  80ac98:	e8 c2 fb ff ff       	call   80a85f <htons>
  80ac9d:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80aca1:	8b 55 08             	mov    0x8(%ebp),%edx
  80aca4:	8b 42 54             	mov    0x54(%edx),%eax
  80aca7:	83 e8 01             	sub    $0x1,%eax
  80acaa:	89 04 24             	mov    %eax,(%esp)
  80acad:	e8 da fb ff ff       	call   80a88c <htonl>
  80acb2:	89 43 04             	mov    %eax,0x4(%ebx)
  80acb5:	8b 55 08             	mov    0x8(%ebp),%edx
  80acb8:	8b 42 24             	mov    0x24(%edx),%eax
  80acbb:	89 04 24             	mov    %eax,(%esp)
  80acbe:	e8 c9 fb ff ff       	call   80a88c <htonl>
  80acc3:	89 43 08             	mov    %eax,0x8(%ebx)
  80acc6:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80acca:	89 04 24             	mov    %eax,(%esp)
  80accd:	e8 a3 fb ff ff       	call   80a875 <ntohs>
  80acd2:	25 c0 ff 00 00       	and    $0xffc0,%eax
  80acd7:	89 04 24             	mov    %eax,(%esp)
  80acda:	e8 80 fb ff ff       	call   80a85f <htons>
  80acdf:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80ace3:	8b 55 08             	mov    0x8(%ebp),%edx
  80ace6:	0f b7 42 2a          	movzwl 0x2a(%edx),%eax
  80acea:	89 04 24             	mov    %eax,(%esp)
  80aced:	e8 6d fb ff ff       	call   80a85f <htons>
  80acf2:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  80acf6:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  80acfc:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ad00:	89 04 24             	mov    %eax,(%esp)
  80ad03:	e8 6d fb ff ff       	call   80a875 <ntohs>
  80ad08:	83 e0 3f             	and    $0x3f,%eax
  80ad0b:	80 cc 50             	or     $0x50,%ah
  80ad0e:	89 04 24             	mov    %eax,(%esp)
  80ad11:	e8 49 fb ff ff       	call   80a85f <htons>
  80ad16:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80ad1a:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
  80ad20:	8b 75 08             	mov    0x8(%ebp),%esi
  80ad23:	83 c6 04             	add    $0x4,%esi
  80ad26:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80ad2a:	89 44 24 10          	mov    %eax,0x10(%esp)
  80ad2e:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80ad35:	00 
  80ad36:	89 74 24 08          	mov    %esi,0x8(%esp)
  80ad3a:	8b 45 08             	mov    0x8(%ebp),%eax
  80ad3d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ad41:	89 3c 24             	mov    %edi,(%esp)
  80ad44:	e8 16 f8 ff ff       	call   80a55f <inet_chksum_pseudo>
  80ad49:	66 89 43 10          	mov    %ax,0x10(%ebx)
  80ad4d:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  80ad54:	00 
  80ad55:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80ad5c:	00 
  80ad5d:	8b 55 08             	mov    0x8(%ebp),%edx
  80ad60:	0f b6 42 0b          	movzbl 0xb(%edx),%eax
  80ad64:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80ad68:	89 74 24 08          	mov    %esi,0x8(%esp)
  80ad6c:	89 54 24 04          	mov    %edx,0x4(%esp)
  80ad70:	89 3c 24             	mov    %edi,(%esp)
  80ad73:	e8 85 e9 ff ff       	call   8096fd <ip_output>
  80ad78:	89 3c 24             	mov    %edi,(%esp)
  80ad7b:	e8 14 cd ff ff       	call   807a94 <pbuf_free>
  80ad80:	83 c4 1c             	add    $0x1c,%esp
  80ad83:	5b                   	pop    %ebx
  80ad84:	5e                   	pop    %esi
  80ad85:	5f                   	pop    %edi
  80ad86:	5d                   	pop    %ebp
  80ad87:	c3                   	ret    

0080ad88 <tcp_rst>:
  80ad88:	55                   	push   %ebp
  80ad89:	89 e5                	mov    %esp,%ebp
  80ad8b:	57                   	push   %edi
  80ad8c:	56                   	push   %esi
  80ad8d:	53                   	push   %ebx
  80ad8e:	83 ec 1c             	sub    $0x1c,%esp
  80ad91:	0f b7 7d 18          	movzwl 0x18(%ebp),%edi
  80ad95:	0f b7 45 1c          	movzwl 0x1c(%ebp),%eax
  80ad99:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  80ad9d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ada4:	00 
  80ada5:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80adac:	00 
  80adad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80adb4:	e8 9e cf ff ff       	call   807d57 <pbuf_alloc>
  80adb9:	89 c6                	mov    %eax,%esi
  80adbb:	85 c0                	test   %eax,%eax
  80adbd:	0f 84 1a 01 00 00    	je     80aedd <tcp_rst+0x155>
  80adc3:	66 83 78 0a 13       	cmpw   $0x13,0xa(%eax)
  80adc8:	77 1c                	ja     80ade6 <tcp_rst+0x5e>
  80adca:	c7 44 24 08 70 39 81 	movl   $0x813970,0x8(%esp)
  80add1:	00 
  80add2:	c7 44 24 04 be 02 00 	movl   $0x2be,0x4(%esp)
  80add9:	00 
  80adda:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80ade1:	e8 a6 5a ff ff       	call   80088c <_panic>
  80ade6:	8b 58 04             	mov    0x4(%eax),%ebx
  80ade9:	0f b7 c7             	movzwl %di,%eax
  80adec:	89 04 24             	mov    %eax,(%esp)
  80adef:	e8 6b fa ff ff       	call   80a85f <htons>
  80adf4:	66 89 03             	mov    %ax,(%ebx)
  80adf7:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  80adfb:	89 04 24             	mov    %eax,(%esp)
  80adfe:	e8 5c fa ff ff       	call   80a85f <htons>
  80ae03:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80ae07:	8b 45 08             	mov    0x8(%ebp),%eax
  80ae0a:	89 04 24             	mov    %eax,(%esp)
  80ae0d:	e8 7a fa ff ff       	call   80a88c <htonl>
  80ae12:	89 43 04             	mov    %eax,0x4(%ebx)
  80ae15:	8b 45 0c             	mov    0xc(%ebp),%eax
  80ae18:	89 04 24             	mov    %eax,(%esp)
  80ae1b:	e8 6c fa ff ff       	call   80a88c <htonl>
  80ae20:	89 43 08             	mov    %eax,0x8(%ebx)
  80ae23:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ae27:	89 04 24             	mov    %eax,(%esp)
  80ae2a:	e8 46 fa ff ff       	call   80a875 <ntohs>
  80ae2f:	25 c0 ff 00 00       	and    $0xffc0,%eax
  80ae34:	83 c8 14             	or     $0x14,%eax
  80ae37:	89 04 24             	mov    %eax,(%esp)
  80ae3a:	e8 20 fa ff ff       	call   80a85f <htons>
  80ae3f:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80ae43:	c7 04 24 c0 5d 00 00 	movl   $0x5dc0,(%esp)
  80ae4a:	e8 10 fa ff ff       	call   80a85f <htons>
  80ae4f:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  80ae53:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  80ae59:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ae5d:	89 04 24             	mov    %eax,(%esp)
  80ae60:	e8 10 fa ff ff       	call   80a875 <ntohs>
  80ae65:	83 e0 3f             	and    $0x3f,%eax
  80ae68:	80 cc 50             	or     $0x50,%ah
  80ae6b:	89 04 24             	mov    %eax,(%esp)
  80ae6e:	e8 ec f9 ff ff       	call   80a85f <htons>
  80ae73:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80ae77:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
  80ae7d:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80ae81:	89 44 24 10          	mov    %eax,0x10(%esp)
  80ae85:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80ae8c:	00 
  80ae8d:	8b 45 14             	mov    0x14(%ebp),%eax
  80ae90:	89 44 24 08          	mov    %eax,0x8(%esp)
  80ae94:	8b 45 10             	mov    0x10(%ebp),%eax
  80ae97:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ae9b:	89 34 24             	mov    %esi,(%esp)
  80ae9e:	e8 bc f6 ff ff       	call   80a55f <inet_chksum_pseudo>
  80aea3:	66 89 43 10          	mov    %ax,0x10(%ebx)
  80aea7:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  80aeae:	00 
  80aeaf:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  80aeb6:	00 
  80aeb7:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  80aebe:	00 
  80aebf:	8b 45 14             	mov    0x14(%ebp),%eax
  80aec2:	89 44 24 08          	mov    %eax,0x8(%esp)
  80aec6:	8b 45 10             	mov    0x10(%ebp),%eax
  80aec9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80aecd:	89 34 24             	mov    %esi,(%esp)
  80aed0:	e8 28 e8 ff ff       	call   8096fd <ip_output>
  80aed5:	89 34 24             	mov    %esi,(%esp)
  80aed8:	e8 b7 cb ff ff       	call   807a94 <pbuf_free>
  80aedd:	83 c4 1c             	add    $0x1c,%esp
  80aee0:	5b                   	pop    %ebx
  80aee1:	5e                   	pop    %esi
  80aee2:	5f                   	pop    %edi
  80aee3:	5d                   	pop    %ebp
  80aee4:	c3                   	ret    

0080aee5 <tcp_output>:
  80aee5:	55                   	push   %ebp
  80aee6:	89 e5                	mov    %esp,%ebp
  80aee8:	57                   	push   %edi
  80aee9:	56                   	push   %esi
  80aeea:	53                   	push   %ebx
  80aeeb:	83 ec 2c             	sub    $0x2c,%esp
  80aeee:	b8 00 00 00 00       	mov    $0x0,%eax
  80aef3:	8b 55 08             	mov    0x8(%ebp),%edx
  80aef6:	39 15 e4 e5 b3 00    	cmp    %edx,0xb3e5e4
  80aefc:	0f 84 d5 04 00 00    	je     80b3d7 <tcp_output+0x4f2>
  80af02:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80af05:	0f b7 41 5c          	movzwl 0x5c(%ecx),%eax
  80af09:	0f b7 51 4e          	movzwl 0x4e(%ecx),%edx
  80af0d:	0f b7 c8             	movzwl %ax,%ecx
  80af10:	89 4d ec             	mov    %ecx,0xffffffec(%ebp)
  80af13:	66 39 d0             	cmp    %dx,%ax
  80af16:	72 06                	jb     80af1e <tcp_output+0x39>
  80af18:	0f b7 d2             	movzwl %dx,%edx
  80af1b:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80af1e:	8b 45 08             	mov    0x8(%ebp),%eax
  80af21:	8b 78 74             	mov    0x74(%eax),%edi
  80af24:	8b 50 78             	mov    0x78(%eax),%edx
  80af27:	89 55 e8             	mov    %edx,0xffffffe8(%ebp)
  80af2a:	85 d2                	test   %edx,%edx
  80af2c:	74 0e                	je     80af3c <tcp_output+0x57>
  80af2e:	8b 4d e8             	mov    0xffffffe8(%ebp),%ecx
  80af31:	8b 01                	mov    (%ecx),%eax
  80af33:	85 c0                	test   %eax,%eax
  80af35:	74 05                	je     80af3c <tcp_output+0x57>
  80af37:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80af3a:	eb f2                	jmp    80af2e <tcp_output+0x49>
  80af3c:	8b 45 08             	mov    0x8(%ebp),%eax
  80af3f:	f6 40 20 02          	testb  $0x2,0x20(%eax)
  80af43:	74 28                	je     80af6d <tcp_output+0x88>
  80af45:	85 ff                	test   %edi,%edi
  80af47:	74 31                	je     80af7a <tcp_output+0x95>
  80af49:	8b 47 10             	mov    0x10(%edi),%eax
  80af4c:	8b 40 04             	mov    0x4(%eax),%eax
  80af4f:	89 04 24             	mov    %eax,(%esp)
  80af52:	e8 43 fb ff ff       	call   80aa9a <ntohl>
  80af57:	0f b7 57 0c          	movzwl 0xc(%edi),%edx
  80af5b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80af5e:	2b 51 48             	sub    0x48(%ecx),%edx
  80af61:	01 c2                	add    %eax,%edx
  80af63:	39 55 ec             	cmp    %edx,0xffffffec(%ebp)
  80af66:	72 12                	jb     80af7a <tcp_output+0x95>
  80af68:	e9 ef 03 00 00       	jmp    80b35c <tcp_output+0x477>
  80af6d:	85 ff                	test   %edi,%edi
  80af6f:	0f 85 e7 03 00 00    	jne    80b35c <tcp_output+0x477>
  80af75:	e9 44 04 00 00       	jmp    80b3be <tcp_output+0x4d9>
  80af7a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80af81:	00 
  80af82:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80af89:	00 
  80af8a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80af91:	e8 c1 cd ff ff       	call   807d57 <pbuf_alloc>
  80af96:	89 c7                	mov    %eax,%edi
  80af98:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  80af9d:	85 ff                	test   %edi,%edi
  80af9f:	0f 84 32 04 00 00    	je     80b3d7 <tcp_output+0x4f2>
  80afa5:	8b 45 08             	mov    0x8(%ebp),%eax
  80afa8:	80 60 20 fc          	andb   $0xfc,0x20(%eax)
  80afac:	8b 5f 04             	mov    0x4(%edi),%ebx
  80afaf:	8b 55 08             	mov    0x8(%ebp),%edx
  80afb2:	0f b7 42 1c          	movzwl 0x1c(%edx),%eax
  80afb6:	89 04 24             	mov    %eax,(%esp)
  80afb9:	e8 a1 f8 ff ff       	call   80a85f <htons>
  80afbe:	66 89 03             	mov    %ax,(%ebx)
  80afc1:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80afc4:	0f b7 41 1e          	movzwl 0x1e(%ecx),%eax
  80afc8:	89 04 24             	mov    %eax,(%esp)
  80afcb:	e8 8f f8 ff ff       	call   80a85f <htons>
  80afd0:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80afd4:	8b 55 08             	mov    0x8(%ebp),%edx
  80afd7:	8b 42 54             	mov    0x54(%edx),%eax
  80afda:	89 04 24             	mov    %eax,(%esp)
  80afdd:	e8 aa f8 ff ff       	call   80a88c <htonl>
  80afe2:	89 43 04             	mov    %eax,0x4(%ebx)
  80afe5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80afe8:	8b 41 24             	mov    0x24(%ecx),%eax
  80afeb:	89 04 24             	mov    %eax,(%esp)
  80afee:	e8 99 f8 ff ff       	call   80a88c <htonl>
  80aff3:	89 43 08             	mov    %eax,0x8(%ebx)
  80aff6:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80affa:	89 04 24             	mov    %eax,(%esp)
  80affd:	e8 73 f8 ff ff       	call   80a875 <ntohs>
  80b002:	25 c0 ff 00 00       	and    $0xffc0,%eax
  80b007:	83 c8 10             	or     $0x10,%eax
  80b00a:	89 04 24             	mov    %eax,(%esp)
  80b00d:	e8 4d f8 ff ff       	call   80a85f <htons>
  80b012:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b016:	8b 55 08             	mov    0x8(%ebp),%edx
  80b019:	0f b7 42 2a          	movzwl 0x2a(%edx),%eax
  80b01d:	89 04 24             	mov    %eax,(%esp)
  80b020:	e8 3a f8 ff ff       	call   80a85f <htons>
  80b025:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  80b029:	66 c7 43 12 00 00    	movw   $0x0,0x12(%ebx)
  80b02f:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b033:	89 04 24             	mov    %eax,(%esp)
  80b036:	e8 3a f8 ff ff       	call   80a875 <ntohs>
  80b03b:	83 e0 3f             	and    $0x3f,%eax
  80b03e:	80 cc 50             	or     $0x50,%ah
  80b041:	89 04 24             	mov    %eax,(%esp)
  80b044:	e8 16 f8 ff ff       	call   80a85f <htons>
  80b049:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b04d:	66 c7 43 10 00 00    	movw   $0x0,0x10(%ebx)
  80b053:	8b 75 08             	mov    0x8(%ebp),%esi
  80b056:	83 c6 04             	add    $0x4,%esi
  80b059:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80b05d:	89 44 24 10          	mov    %eax,0x10(%esp)
  80b061:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80b068:	00 
  80b069:	89 74 24 08          	mov    %esi,0x8(%esp)
  80b06d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b070:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80b074:	89 3c 24             	mov    %edi,(%esp)
  80b077:	e8 e3 f4 ff ff       	call   80a55f <inet_chksum_pseudo>
  80b07c:	66 89 43 10          	mov    %ax,0x10(%ebx)
  80b080:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  80b087:	00 
  80b088:	8b 55 08             	mov    0x8(%ebp),%edx
  80b08b:	0f b6 42 0a          	movzbl 0xa(%edx),%eax
  80b08f:	89 44 24 10          	mov    %eax,0x10(%esp)
  80b093:	0f b6 42 0b          	movzbl 0xb(%edx),%eax
  80b097:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80b09b:	89 74 24 08          	mov    %esi,0x8(%esp)
  80b09f:	89 54 24 04          	mov    %edx,0x4(%esp)
  80b0a3:	89 3c 24             	mov    %edi,(%esp)
  80b0a6:	e8 52 e6 ff ff       	call   8096fd <ip_output>
  80b0ab:	89 3c 24             	mov    %edi,(%esp)
  80b0ae:	e8 e1 c9 ff ff       	call   807a94 <pbuf_free>
  80b0b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80b0b8:	e9 1a 03 00 00       	jmp    80b3d7 <tcp_output+0x4f2>
  80b0bd:	8b 47 10             	mov    0x10(%edi),%eax
  80b0c0:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b0c4:	89 04 24             	mov    %eax,(%esp)
  80b0c7:	e8 a9 f7 ff ff       	call   80a875 <ntohs>
  80b0cc:	a8 04                	test   $0x4,%al
  80b0ce:	74 1c                	je     80b0ec <tcp_output+0x207>
  80b0d0:	c7 44 24 08 2c 3b 81 	movl   $0x813b2c,0x8(%esp)
  80b0d7:	00 
  80b0d8:	c7 44 24 04 05 02 00 	movl   $0x205,0x4(%esp)
  80b0df:	00 
  80b0e0:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b0e7:	e8 a0 57 ff ff       	call   80088c <_panic>
  80b0ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b0ef:	83 79 78 00          	cmpl   $0x0,0x78(%ecx)
  80b0f3:	74 1d                	je     80b112 <tcp_output+0x22d>
  80b0f5:	0f b6 51 20          	movzbl 0x20(%ecx),%edx
  80b0f9:	f6 c2 40             	test   $0x40,%dl
  80b0fc:	75 14                	jne    80b112 <tcp_output+0x22d>
  80b0fe:	8b 41 74             	mov    0x74(%ecx),%eax
  80b101:	85 c0                	test   %eax,%eax
  80b103:	0f 84 c3 02 00 00    	je     80b3cc <tcp_output+0x4e7>
  80b109:	83 38 00             	cmpl   $0x0,(%eax)
  80b10c:	0f 84 ba 02 00 00    	je     80b3cc <tcp_output+0x4e7>
  80b112:	8b 07                	mov    (%edi),%eax
  80b114:	8b 55 08             	mov    0x8(%ebp),%edx
  80b117:	89 42 74             	mov    %eax,0x74(%edx)
  80b11a:	83 7a 10 02          	cmpl   $0x2,0x10(%edx)
  80b11e:	74 28                	je     80b148 <tcp_output+0x263>
  80b120:	8b 5f 10             	mov    0x10(%edi),%ebx
  80b123:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b127:	89 04 24             	mov    %eax,(%esp)
  80b12a:	e8 46 f7 ff ff       	call   80a875 <ntohs>
  80b12f:	83 c8 10             	or     $0x10,%eax
  80b132:	0f b7 c0             	movzwl %ax,%eax
  80b135:	89 04 24             	mov    %eax,(%esp)
  80b138:	e8 22 f7 ff ff       	call   80a85f <htons>
  80b13d:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b141:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b144:	80 61 20 fc          	andb   $0xfc,0x20(%ecx)
  80b148:	8b 5f 10             	mov    0x10(%edi),%ebx
  80b14b:	8b 55 08             	mov    0x8(%ebp),%edx
  80b14e:	8b 42 24             	mov    0x24(%edx),%eax
  80b151:	89 04 24             	mov    %eax,(%esp)
  80b154:	e8 33 f7 ff ff       	call   80a88c <htonl>
  80b159:	89 43 08             	mov    %eax,0x8(%ebx)
  80b15c:	8b 5f 10             	mov    0x10(%edi),%ebx
  80b15f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b162:	0f b7 41 2a          	movzwl 0x2a(%ecx),%eax
  80b166:	89 04 24             	mov    %eax,(%esp)
  80b169:	e8 f1 f6 ff ff       	call   80a85f <htons>
  80b16e:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  80b172:	8b 45 08             	mov    0x8(%ebp),%eax
  80b175:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80b178:	85 c0                	test   %eax,%eax
  80b17a:	74 05                	je     80b181 <tcp_output+0x29c>
  80b17c:	83 38 00             	cmpl   $0x0,(%eax)
  80b17f:	75 1e                	jne    80b19f <tcp_output+0x2ba>
  80b181:	8b 45 08             	mov    0x8(%ebp),%eax
  80b184:	83 c0 04             	add    $0x4,%eax
  80b187:	89 04 24             	mov    %eax,(%esp)
  80b18a:	e8 0e e5 ff ff       	call   80969d <ip_route>
  80b18f:	85 c0                	test   %eax,%eax
  80b191:	0f 84 cb 00 00 00    	je     80b262 <tcp_output+0x37d>
  80b197:	8b 40 04             	mov    0x4(%eax),%eax
  80b19a:	8b 55 08             	mov    0x8(%ebp),%edx
  80b19d:	89 02                	mov    %eax,(%edx)
  80b19f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b1a2:	66 83 79 32 ff       	cmpw   $0xffffffff,0x32(%ecx)
  80b1a7:	75 06                	jne    80b1af <tcp_output+0x2ca>
  80b1a9:	66 c7 41 32 00 00    	movw   $0x0,0x32(%ecx)
  80b1af:	8b 45 08             	mov    0x8(%ebp),%eax
  80b1b2:	83 78 38 00          	cmpl   $0x0,0x38(%eax)
  80b1b6:	75 1f                	jne    80b1d7 <tcp_output+0x2f2>
  80b1b8:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  80b1bd:	8b 55 08             	mov    0x8(%ebp),%edx
  80b1c0:	89 42 38             	mov    %eax,0x38(%edx)
  80b1c3:	8b 47 10             	mov    0x10(%edi),%eax
  80b1c6:	8b 40 04             	mov    0x4(%eax),%eax
  80b1c9:	89 04 24             	mov    %eax,(%esp)
  80b1cc:	e8 c9 f8 ff ff       	call   80aa9a <ntohl>
  80b1d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b1d4:	89 41 3c             	mov    %eax,0x3c(%ecx)
  80b1d7:	8b 47 04             	mov    0x4(%edi),%eax
  80b1da:	8b 57 10             	mov    0x10(%edi),%edx
  80b1dd:	66 2b 50 04          	sub    0x4(%eax),%dx
  80b1e1:	66 29 50 0a          	sub    %dx,0xa(%eax)
  80b1e5:	8b 47 04             	mov    0x4(%edi),%eax
  80b1e8:	66 29 50 08          	sub    %dx,0x8(%eax)
  80b1ec:	8b 57 04             	mov    0x4(%edi),%edx
  80b1ef:	8b 47 10             	mov    0x10(%edi),%eax
  80b1f2:	89 42 04             	mov    %eax,0x4(%edx)
  80b1f5:	8b 47 10             	mov    0x10(%edi),%eax
  80b1f8:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
  80b1fe:	8b 77 10             	mov    0x10(%edi),%esi
  80b201:	8b 57 04             	mov    0x4(%edi),%edx
  80b204:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b207:	83 c3 04             	add    $0x4,%ebx
  80b20a:	0f b7 42 08          	movzwl 0x8(%edx),%eax
  80b20e:	89 44 24 10          	mov    %eax,0x10(%esp)
  80b212:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  80b219:	00 
  80b21a:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80b21e:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80b221:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b225:	89 14 24             	mov    %edx,(%esp)
  80b228:	e8 32 f3 ff ff       	call   80a55f <inet_chksum_pseudo>
  80b22d:	66 89 46 10          	mov    %ax,0x10(%esi)
  80b231:	c7 44 24 14 06 00 00 	movl   $0x6,0x14(%esp)
  80b238:	00 
  80b239:	8b 55 08             	mov    0x8(%ebp),%edx
  80b23c:	0f b6 42 0a          	movzbl 0xa(%edx),%eax
  80b240:	89 44 24 10          	mov    %eax,0x10(%esp)
  80b244:	0f b6 42 0b          	movzbl 0xb(%edx),%eax
  80b248:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80b24c:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80b250:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  80b253:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80b257:	8b 47 04             	mov    0x4(%edi),%eax
  80b25a:	89 04 24             	mov    %eax,(%esp)
  80b25d:	e8 9b e4 ff ff       	call   8096fd <ip_output>
  80b262:	8b 47 10             	mov    0x10(%edi),%eax
  80b265:	8b 40 04             	mov    0x4(%eax),%eax
  80b268:	89 04 24             	mov    %eax,(%esp)
  80b26b:	e8 2a f8 ff ff       	call   80aa9a <ntohl>
  80b270:	89 c6                	mov    %eax,%esi
  80b272:	0f b7 5f 0c          	movzwl 0xc(%edi),%ebx
  80b276:	8b 47 10             	mov    0x10(%edi),%eax
  80b279:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b27d:	89 04 24             	mov    %eax,(%esp)
  80b280:	e8 f0 f5 ff ff       	call   80a875 <ntohs>
  80b285:	a8 01                	test   $0x1,%al
  80b287:	75 18                	jne    80b2a1 <tcp_output+0x3bc>
  80b289:	8b 47 10             	mov    0x10(%edi),%eax
  80b28c:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b290:	89 04 24             	mov    %eax,(%esp)
  80b293:	e8 dd f5 ff ff       	call   80a875 <ntohs>
  80b298:	ba 00 00 00 00       	mov    $0x0,%edx
  80b29d:	a8 02                	test   $0x2,%al
  80b29f:	74 05                	je     80b2a6 <tcp_output+0x3c1>
  80b2a1:	ba 01 00 00 00       	mov    $0x1,%edx
  80b2a6:	0f b7 c3             	movzwl %bx,%eax
  80b2a9:	8d 04 02             	lea    (%edx,%eax,1),%eax
  80b2ac:	01 f0                	add    %esi,%eax
  80b2ae:	8b 55 08             	mov    0x8(%ebp),%edx
  80b2b1:	89 42 54             	mov    %eax,0x54(%edx)
  80b2b4:	39 42 58             	cmp    %eax,0x58(%edx)
  80b2b7:	79 03                	jns    80b2bc <tcp_output+0x3d7>
  80b2b9:	89 42 58             	mov    %eax,0x58(%edx)
  80b2bc:	0f b7 5f 0c          	movzwl 0xc(%edi),%ebx
  80b2c0:	8b 47 10             	mov    0x10(%edi),%eax
  80b2c3:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b2c7:	89 04 24             	mov    %eax,(%esp)
  80b2ca:	e8 a6 f5 ff ff       	call   80a875 <ntohs>
  80b2cf:	a8 01                	test   $0x1,%al
  80b2d1:	75 18                	jne    80b2eb <tcp_output+0x406>
  80b2d3:	8b 47 10             	mov    0x10(%edi),%eax
  80b2d6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b2da:	89 04 24             	mov    %eax,(%esp)
  80b2dd:	e8 93 f5 ff ff       	call   80a875 <ntohs>
  80b2e2:	ba 00 00 00 00       	mov    $0x0,%edx
  80b2e7:	a8 02                	test   $0x2,%al
  80b2e9:	74 05                	je     80b2f0 <tcp_output+0x40b>
  80b2eb:	ba 01 00 00 00       	mov    $0x1,%edx
  80b2f0:	0f b7 c3             	movzwl %bx,%eax
  80b2f3:	01 c2                	add    %eax,%edx
  80b2f5:	74 53                	je     80b34a <tcp_output+0x465>
  80b2f7:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
  80b2fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b300:	83 79 78 00          	cmpl   $0x0,0x78(%ecx)
  80b304:	75 08                	jne    80b30e <tcp_output+0x429>
  80b306:	89 79 78             	mov    %edi,0x78(%ecx)
  80b309:	89 7d e8             	mov    %edi,0xffffffe8(%ebp)
  80b30c:	eb 44                	jmp    80b352 <tcp_output+0x46d>
  80b30e:	8b 47 10             	mov    0x10(%edi),%eax
  80b311:	8b 40 04             	mov    0x4(%eax),%eax
  80b314:	89 04 24             	mov    %eax,(%esp)
  80b317:	e8 7e f7 ff ff       	call   80aa9a <ntohl>
  80b31c:	89 c3                	mov    %eax,%ebx
  80b31e:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80b321:	8b 42 10             	mov    0x10(%edx),%eax
  80b324:	8b 40 04             	mov    0x4(%eax),%eax
  80b327:	89 04 24             	mov    %eax,(%esp)
  80b32a:	e8 6b f7 ff ff       	call   80aa9a <ntohl>
  80b32f:	39 c3                	cmp    %eax,%ebx
  80b331:	79 0d                	jns    80b340 <tcp_output+0x45b>
  80b333:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b336:	8b 41 78             	mov    0x78(%ecx),%eax
  80b339:	89 07                	mov    %eax,(%edi)
  80b33b:	89 79 78             	mov    %edi,0x78(%ecx)
  80b33e:	eb 12                	jmp    80b352 <tcp_output+0x46d>
  80b340:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80b343:	89 38                	mov    %edi,(%eax)
  80b345:	89 7d e8             	mov    %edi,0xffffffe8(%ebp)
  80b348:	eb 08                	jmp    80b352 <tcp_output+0x46d>
  80b34a:	89 3c 24             	mov    %edi,(%esp)
  80b34d:	e8 cc d2 ff ff       	call   80861e <tcp_seg_free>
  80b352:	8b 55 08             	mov    0x8(%ebp),%edx
  80b355:	8b 7a 74             	mov    0x74(%edx),%edi
  80b358:	85 ff                	test   %edi,%edi
  80b35a:	74 62                	je     80b3be <tcp_output+0x4d9>
  80b35c:	8b 47 10             	mov    0x10(%edi),%eax
  80b35f:	8b 40 04             	mov    0x4(%eax),%eax
  80b362:	89 04 24             	mov    %eax,(%esp)
  80b365:	e8 30 f7 ff ff       	call   80aa9a <ntohl>
  80b36a:	0f b7 57 0c          	movzwl 0xc(%edi),%edx
  80b36e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b371:	2b 51 48             	sub    0x48(%ecx),%edx
  80b374:	01 c2                	add    %eax,%edx
  80b376:	39 55 ec             	cmp    %edx,0xffffffec(%ebp)
  80b379:	0f 83 3e fd ff ff    	jae    80b0bd <tcp_output+0x1d8>
  80b37f:	8b 45 08             	mov    0x8(%ebp),%eax
  80b382:	80 b8 a4 00 00 00 00 	cmpb   $0x0,0xa4(%eax)
  80b389:	75 33                	jne    80b3be <tcp_output+0x4d9>
  80b38b:	8b 47 10             	mov    0x10(%edi),%eax
  80b38e:	8b 40 04             	mov    0x4(%eax),%eax
  80b391:	89 04 24             	mov    %eax,(%esp)
  80b394:	e8 01 f7 ff ff       	call   80aa9a <ntohl>
  80b399:	0f b7 57 0c          	movzwl 0xc(%edi),%edx
  80b39d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b3a0:	2b 51 48             	sub    0x48(%ecx),%edx
  80b3a3:	01 c2                	add    %eax,%edx
  80b3a5:	0f b7 41 5c          	movzwl 0x5c(%ecx),%eax
  80b3a9:	39 c2                	cmp    %eax,%edx
  80b3ab:	76 11                	jbe    80b3be <tcp_output+0x4d9>
  80b3ad:	c7 81 a0 00 00 00 00 	movl   $0x0,0xa0(%ecx)
  80b3b4:	00 00 00 
  80b3b7:	c6 81 a4 00 00 00 01 	movb   $0x1,0xa4(%ecx)
  80b3be:	8b 45 08             	mov    0x8(%ebp),%eax
  80b3c1:	80 60 20 7f          	andb   $0x7f,0x20(%eax)
  80b3c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80b3ca:	eb 0b                	jmp    80b3d7 <tcp_output+0x4f2>
  80b3cc:	f6 c2 a0             	test   $0xa0,%dl
  80b3cf:	0f 85 3d fd ff ff    	jne    80b112 <tcp_output+0x22d>
  80b3d5:	eb a8                	jmp    80b37f <tcp_output+0x49a>
  80b3d7:	83 c4 2c             	add    $0x2c,%esp
  80b3da:	5b                   	pop    %ebx
  80b3db:	5e                   	pop    %esi
  80b3dc:	5f                   	pop    %edi
  80b3dd:	5d                   	pop    %ebp
  80b3de:	66 90                	xchg   %ax,%ax
  80b3e0:	c3                   	ret    

0080b3e1 <tcp_rexmit>:
  80b3e1:	55                   	push   %ebp
  80b3e2:	89 e5                	mov    %esp,%ebp
  80b3e4:	53                   	push   %ebx
  80b3e5:	83 ec 04             	sub    $0x4,%esp
  80b3e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b3eb:	8b 4b 78             	mov    0x78(%ebx),%ecx
  80b3ee:	85 c9                	test   %ecx,%ecx
  80b3f0:	74 34                	je     80b426 <tcp_rexmit+0x45>
  80b3f2:	8b 11                	mov    (%ecx),%edx
  80b3f4:	8b 43 74             	mov    0x74(%ebx),%eax
  80b3f7:	89 01                	mov    %eax,(%ecx)
  80b3f9:	8b 43 78             	mov    0x78(%ebx),%eax
  80b3fc:	89 43 74             	mov    %eax,0x74(%ebx)
  80b3ff:	89 53 78             	mov    %edx,0x78(%ebx)
  80b402:	8b 40 10             	mov    0x10(%eax),%eax
  80b405:	8b 40 04             	mov    0x4(%eax),%eax
  80b408:	89 04 24             	mov    %eax,(%esp)
  80b40b:	e8 8a f6 ff ff       	call   80aa9a <ntohl>
  80b410:	89 43 54             	mov    %eax,0x54(%ebx)
  80b413:	80 43 46 01          	addb   $0x1,0x46(%ebx)
  80b417:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)
  80b41e:	89 1c 24             	mov    %ebx,(%esp)
  80b421:	e8 bf fa ff ff       	call   80aee5 <tcp_output>
  80b426:	83 c4 04             	add    $0x4,%esp
  80b429:	5b                   	pop    %ebx
  80b42a:	5d                   	pop    %ebp
  80b42b:	c3                   	ret    

0080b42c <tcp_rexmit_rto>:
  80b42c:	55                   	push   %ebp
  80b42d:	89 e5                	mov    %esp,%ebp
  80b42f:	53                   	push   %ebx
  80b430:	83 ec 04             	sub    $0x4,%esp
  80b433:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80b436:	8b 53 78             	mov    0x78(%ebx),%edx
  80b439:	85 d2                	test   %edx,%edx
  80b43b:	74 40                	je     80b47d <tcp_rexmit_rto+0x51>
  80b43d:	8b 02                	mov    (%edx),%eax
  80b43f:	85 c0                	test   %eax,%eax
  80b441:	74 04                	je     80b447 <tcp_rexmit_rto+0x1b>
  80b443:	89 c2                	mov    %eax,%edx
  80b445:	eb f6                	jmp    80b43d <tcp_rexmit_rto+0x11>
  80b447:	8b 43 74             	mov    0x74(%ebx),%eax
  80b44a:	89 02                	mov    %eax,(%edx)
  80b44c:	8b 43 78             	mov    0x78(%ebx),%eax
  80b44f:	89 43 74             	mov    %eax,0x74(%ebx)
  80b452:	c7 43 78 00 00 00 00 	movl   $0x0,0x78(%ebx)
  80b459:	8b 40 10             	mov    0x10(%eax),%eax
  80b45c:	8b 40 04             	mov    0x4(%eax),%eax
  80b45f:	89 04 24             	mov    %eax,(%esp)
  80b462:	e8 33 f6 ff ff       	call   80aa9a <ntohl>
  80b467:	89 43 54             	mov    %eax,0x54(%ebx)
  80b46a:	80 43 46 01          	addb   $0x1,0x46(%ebx)
  80b46e:	c7 43 38 00 00 00 00 	movl   $0x0,0x38(%ebx)
  80b475:	89 1c 24             	mov    %ebx,(%esp)
  80b478:	e8 68 fa ff ff       	call   80aee5 <tcp_output>
  80b47d:	83 c4 04             	add    $0x4,%esp
  80b480:	5b                   	pop    %ebx
  80b481:	5d                   	pop    %ebp
  80b482:	c3                   	ret    

0080b483 <tcp_enqueue>:
  80b483:	55                   	push   %ebp
  80b484:	89 e5                	mov    %esp,%ebp
  80b486:	57                   	push   %edi
  80b487:	56                   	push   %esi
  80b488:	53                   	push   %ebx
  80b489:	83 ec 3c             	sub    $0x3c,%esp
  80b48c:	8b 55 0c             	mov    0xc(%ebp),%edx
  80b48f:	0f b7 45 10          	movzwl 0x10(%ebp),%eax
  80b493:	66 89 45 c8          	mov    %ax,0xffffffc8(%ebp)
  80b497:	0f b6 4d 14          	movzbl 0x14(%ebp),%ecx
  80b49b:	88 4d c7             	mov    %cl,0xffffffc7(%ebp)
  80b49e:	0f b6 45 18          	movzbl 0x18(%ebp),%eax
  80b4a2:	88 45 c6             	mov    %al,0xffffffc6(%ebp)
  80b4a5:	0f b6 4d 20          	movzbl 0x20(%ebp),%ecx
  80b4a9:	88 4d c5             	mov    %cl,0xffffffc5(%ebp)
  80b4ac:	66 83 7d c8 00       	cmpw   $0x0,0xffffffc8(%ebp)
  80b4b1:	74 20                	je     80b4d3 <tcp_enqueue+0x50>
  80b4b3:	84 c9                	test   %cl,%cl
  80b4b5:	74 1c                	je     80b4d3 <tcp_enqueue+0x50>
  80b4b7:	c7 44 24 08 a0 39 81 	movl   $0x8139a0,0x8(%esp)
  80b4be:	00 
  80b4bf:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
  80b4c6:	00 
  80b4c7:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b4ce:	e8 b9 53 ff ff       	call   80088c <_panic>
  80b4d3:	85 d2                	test   %edx,%edx
  80b4d5:	0f 95 45 ca          	setne  0xffffffca(%ebp)
  80b4d9:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  80b4dd:	0f 95 45 cb          	setne  0xffffffcb(%ebp)
  80b4e1:	80 7d ca 00          	cmpb   $0x0,0xffffffca(%ebp)
  80b4e5:	74 22                	je     80b509 <tcp_enqueue+0x86>
  80b4e7:	80 7d cb 00          	cmpb   $0x0,0xffffffcb(%ebp)
  80b4eb:	74 1c                	je     80b509 <tcp_enqueue+0x86>
  80b4ed:	c7 44 24 08 e0 39 81 	movl   $0x8139e0,0x8(%esp)
  80b4f4:	00 
  80b4f5:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
  80b4fc:	00 
  80b4fd:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b504:	e8 83 53 ff ff       	call   80088c <_panic>
  80b509:	0f b7 4d c8          	movzwl 0xffffffc8(%ebp),%ecx
  80b50d:	8b 45 08             	mov    0x8(%ebp),%eax
  80b510:	66 3b 48 6e          	cmp    0x6e(%eax),%cx
  80b514:	76 0e                	jbe    80b524 <tcp_enqueue+0xa1>
  80b516:	80 48 20 80          	orb    $0x80,0x20(%eax)
  80b51a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80b51f:	e9 38 06 00 00       	jmp    80bb5c <tcp_enqueue+0x6d9>
  80b524:	8b 45 08             	mov    0x8(%ebp),%eax
  80b527:	8b 40 68             	mov    0x68(%eax),%eax
  80b52a:	89 45 d8             	mov    %eax,0xffffffd8(%ebp)
  80b52d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b530:	0f b7 49 70          	movzwl 0x70(%ecx),%ecx
  80b534:	66 89 4d e6          	mov    %cx,0xffffffe6(%ebp)
  80b538:	66 83 f9 1f          	cmp    $0x1f,%cx
  80b53c:	76 11                	jbe    80b54f <tcp_enqueue+0xcc>
  80b53e:	8b 45 08             	mov    0x8(%ebp),%eax
  80b541:	80 48 20 80          	orb    $0x80,0x20(%eax)
  80b545:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80b54a:	e9 0d 06 00 00       	jmp    80bb5c <tcp_enqueue+0x6d9>
  80b54f:	66 83 7d e6 00       	cmpw   $0x0,0xffffffe6(%ebp)
  80b554:	74 33                	je     80b589 <tcp_enqueue+0x106>
  80b556:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b559:	83 79 78 00          	cmpl   $0x0,0x78(%ecx)
  80b55d:	0f 85 b9 05 00 00    	jne    80bb1c <tcp_enqueue+0x699>
  80b563:	83 79 74 00          	cmpl   $0x0,0x74(%ecx)
  80b567:	0f 85 af 05 00 00    	jne    80bb1c <tcp_enqueue+0x699>
  80b56d:	c7 44 24 08 28 3a 81 	movl   $0x813a28,0x8(%esp)
  80b574:	00 
  80b575:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
  80b57c:	00 
  80b57d:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b584:	e8 03 53 ff ff       	call   80088c <_panic>
  80b589:	8b 45 08             	mov    0x8(%ebp),%eax
  80b58c:	83 78 78 00          	cmpl   $0x0,0x78(%eax)
  80b590:	75 0a                	jne    80b59c <tcp_enqueue+0x119>
  80b592:	83 78 74 00          	cmpl   $0x0,0x74(%eax)
  80b596:	0f 84 80 05 00 00    	je     80bb1c <tcp_enqueue+0x699>
  80b59c:	c7 44 24 08 64 3a 81 	movl   $0x813a64,0x8(%esp)
  80b5a3:	00 
  80b5a4:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
  80b5ab:	00 
  80b5ac:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b5b3:	e8 d4 52 ff ff       	call   80088c <_panic>
  80b5b8:	0f b7 c7             	movzwl %di,%eax
  80b5bb:	01 45 d8             	add    %eax,0xffffffd8(%ebp)
  80b5be:	01 45 e0             	add    %eax,0xffffffe0(%ebp)
  80b5c1:	89 f7                	mov    %esi,%edi
  80b5c3:	8b 55 08             	mov    0x8(%ebp),%edx
  80b5c6:	0f b7 52 34          	movzwl 0x34(%edx),%edx
  80b5ca:	66 89 55 f2          	mov    %dx,0xfffffff2(%ebp)
  80b5ce:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  80b5d5:	e8 85 bd ff ff       	call   80735f <memp_malloc>
  80b5da:	85 c0                	test   %eax,%eax
  80b5dc:	0f 84 e0 04 00 00    	je     80bac2 <tcp_enqueue+0x63f>
  80b5e2:	89 c6                	mov    %eax,%esi
  80b5e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  80b5ea:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  80b5f1:	84 db                	test   %bl,%bl
  80b5f3:	74 05                	je     80b5fa <tcp_enqueue+0x177>
  80b5f5:	89 45 d4             	mov    %eax,0xffffffd4(%ebp)
  80b5f8:	eb 22                	jmp    80b61c <tcp_enqueue+0x199>
  80b5fa:	85 ff                	test   %edi,%edi
  80b5fc:	75 1c                	jne    80b61a <tcp_enqueue+0x197>
  80b5fe:	c7 44 24 08 43 3b 81 	movl   $0x813b43,0x8(%esp)
  80b605:	00 
  80b606:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
  80b60d:	00 
  80b60e:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b615:	e8 72 52 ff ff       	call   80088c <_panic>
  80b61a:	89 07                	mov    %eax,(%edi)
  80b61c:	0f b7 7d de          	movzwl 0xffffffde(%ebp),%edi
  80b620:	0f b7 4d f2          	movzwl 0xfffffff2(%ebp),%ecx
  80b624:	66 39 cf             	cmp    %cx,%di
  80b627:	76 02                	jbe    80b62b <tcp_enqueue+0x1a8>
  80b629:	89 cf                	mov    %ecx,%edi
  80b62b:	80 7d cb 00          	cmpb   $0x0,0xffffffcb(%ebp)
  80b62f:	74 6e                	je     80b69f <tcp_enqueue+0x21c>
  80b631:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b638:	00 
  80b639:	0f b6 45 c5          	movzbl 0xffffffc5(%ebp),%eax
  80b63d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b641:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b648:	e8 0a c7 ff ff       	call   807d57 <pbuf_alloc>
  80b64d:	89 c2                	mov    %eax,%edx
  80b64f:	89 46 04             	mov    %eax,0x4(%esi)
  80b652:	85 c0                	test   %eax,%eax
  80b654:	0f 84 68 04 00 00    	je     80bac2 <tcp_enqueue+0x63f>
  80b65a:	66 0f b6 45 c5       	movzbw 0xffffffc5(%ebp),%ax
  80b65f:	66 39 42 0a          	cmp    %ax,0xa(%edx)
  80b663:	73 1c                	jae    80b681 <tcp_enqueue+0x1fe>
  80b665:	c7 44 24 08 98 3a 81 	movl   $0x813a98,0x8(%esp)
  80b66c:	00 
  80b66d:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
  80b674:	00 
  80b675:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b67c:	e8 0b 52 ff ff       	call   80088c <_panic>
  80b681:	89 14 24             	mov    %edx,(%esp)
  80b684:	e8 c7 bf ff ff       	call   807650 <pbuf_clen>
  80b689:	66 0f b6 c0          	movzbw %al,%ax
  80b68d:	66 01 45 e6          	add    %ax,0xffffffe6(%ebp)
  80b691:	8b 46 04             	mov    0x4(%esi),%eax
  80b694:	8b 40 04             	mov    0x4(%eax),%eax
  80b697:	89 46 08             	mov    %eax,0x8(%esi)
  80b69a:	e9 0d 01 00 00       	jmp    80b7ac <tcp_enqueue+0x329>
  80b69f:	f6 45 c6 01          	testb  $0x1,0xffffffc6(%ebp)
  80b6a3:	0f 84 87 00 00 00    	je     80b730 <tcp_enqueue+0x2ad>
  80b6a9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b6b0:	00 
  80b6b1:	0f b7 c7             	movzwl %di,%eax
  80b6b4:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b6b8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b6bf:	e8 93 c6 ff ff       	call   807d57 <pbuf_alloc>
  80b6c4:	89 46 04             	mov    %eax,0x4(%esi)
  80b6c7:	85 c0                	test   %eax,%eax
  80b6c9:	0f 84 f3 03 00 00    	je     80bac2 <tcp_enqueue+0x63f>
  80b6cf:	66 3b 78 0a          	cmp    0xa(%eax),%di
  80b6d3:	76 1c                	jbe    80b6f1 <tcp_enqueue+0x26e>
  80b6d5:	c7 44 24 08 c0 3a 81 	movl   $0x813ac0,0x8(%esp)
  80b6dc:	00 
  80b6dd:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
  80b6e4:	00 
  80b6e5:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b6ec:	e8 9b 51 ff ff       	call   80088c <_panic>
  80b6f1:	89 04 24             	mov    %eax,(%esp)
  80b6f4:	e8 57 bf ff ff       	call   807650 <pbuf_clen>
  80b6f9:	89 c3                	mov    %eax,%ebx
  80b6fb:	80 7d ca 00          	cmpb   $0x0,0xffffffca(%ebp)
  80b6ff:	74 1c                	je     80b71d <tcp_enqueue+0x29a>
  80b701:	0f b7 c7             	movzwl %di,%eax
  80b704:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b708:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  80b70b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b70f:	8b 46 04             	mov    0x4(%esi),%eax
  80b712:	8b 40 04             	mov    0x4(%eax),%eax
  80b715:	89 04 24             	mov    %eax,(%esp)
  80b718:	e8 4b 5b ff ff       	call   801268 <memcpy>
  80b71d:	66 0f b6 c3          	movzbw %bl,%ax
  80b721:	66 01 45 e6          	add    %ax,0xffffffe6(%ebp)
  80b725:	8b 46 04             	mov    0x4(%esi),%eax
  80b728:	8b 40 04             	mov    0x4(%eax),%eax
  80b72b:	89 46 08             	mov    %eax,0x8(%esi)
  80b72e:	eb 7c                	jmp    80b7ac <tcp_enqueue+0x329>
  80b730:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  80b737:	00 
  80b738:	0f b7 c7             	movzwl %di,%eax
  80b73b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b73f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b746:	e8 0c c6 ff ff       	call   807d57 <pbuf_alloc>
  80b74b:	89 c3                	mov    %eax,%ebx
  80b74d:	85 c0                	test   %eax,%eax
  80b74f:	0f 84 6d 03 00 00    	je     80bac2 <tcp_enqueue+0x63f>
  80b755:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80b758:	89 50 04             	mov    %edx,0x4(%eax)
  80b75b:	89 56 08             	mov    %edx,0x8(%esi)
  80b75e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80b765:	00 
  80b766:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80b76d:	00 
  80b76e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80b775:	e8 dd c5 ff ff       	call   807d57 <pbuf_alloc>
  80b77a:	89 46 04             	mov    %eax,0x4(%esi)
  80b77d:	85 c0                	test   %eax,%eax
  80b77f:	0f 84 35 03 00 00    	je     80baba <tcp_enqueue+0x637>
  80b785:	89 04 24             	mov    %eax,(%esp)
  80b788:	e8 c3 be ff ff       	call   807650 <pbuf_clen>
  80b78d:	66 0f b6 c0          	movzbw %al,%ax
  80b791:	0f b7 4d e6          	movzwl 0xffffffe6(%ebp),%ecx
  80b795:	8d 4c 01 01          	lea    0x1(%ecx,%eax,1),%ecx
  80b799:	66 89 4d e6          	mov    %cx,0xffffffe6(%ebp)
  80b79d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80b7a1:	8b 46 04             	mov    0x4(%esi),%eax
  80b7a4:	89 04 24             	mov    %eax,(%esp)
  80b7a7:	e8 d7 be ff ff       	call   807683 <pbuf_cat>
  80b7ac:	66 83 7d e6 20       	cmpw   $0x20,0xffffffe6(%ebp)
  80b7b1:	0f 87 0b 03 00 00    	ja     80bac2 <tcp_enqueue+0x63f>
  80b7b7:	66 89 7e 0c          	mov    %di,0xc(%esi)
  80b7bb:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  80b7c2:	00 
  80b7c3:	8b 46 04             	mov    0x4(%esi),%eax
  80b7c6:	89 04 24             	mov    %eax,(%esp)
  80b7c9:	e8 5a bf ff ff       	call   807728 <pbuf_header>
  80b7ce:	84 c0                	test   %al,%al
  80b7d0:	0f 85 ec 02 00 00    	jne    80bac2 <tcp_enqueue+0x63f>
  80b7d6:	8b 46 04             	mov    0x4(%esi),%eax
  80b7d9:	8b 58 04             	mov    0x4(%eax),%ebx
  80b7dc:	89 5e 10             	mov    %ebx,0x10(%esi)
  80b7df:	8b 55 08             	mov    0x8(%ebp),%edx
  80b7e2:	0f b7 42 1c          	movzwl 0x1c(%edx),%eax
  80b7e6:	89 04 24             	mov    %eax,(%esp)
  80b7e9:	e8 71 f0 ff ff       	call   80a85f <htons>
  80b7ee:	66 89 03             	mov    %ax,(%ebx)
  80b7f1:	8b 5e 10             	mov    0x10(%esi),%ebx
  80b7f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b7f7:	0f b7 41 1e          	movzwl 0x1e(%ecx),%eax
  80b7fb:	89 04 24             	mov    %eax,(%esp)
  80b7fe:	e8 5c f0 ff ff       	call   80a85f <htons>
  80b803:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80b807:	8b 5e 10             	mov    0x10(%esi),%ebx
  80b80a:	8b 45 d8             	mov    0xffffffd8(%ebp),%eax
  80b80d:	89 04 24             	mov    %eax,(%esp)
  80b810:	e8 77 f0 ff ff       	call   80a88c <htonl>
  80b815:	89 43 04             	mov    %eax,0x4(%ebx)
  80b818:	8b 46 10             	mov    0x10(%esi),%eax
  80b81b:	66 c7 40 12 00 00    	movw   $0x0,0x12(%eax)
  80b821:	8b 5e 10             	mov    0x10(%esi),%ebx
  80b824:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b828:	89 04 24             	mov    %eax,(%esp)
  80b82b:	e8 45 f0 ff ff       	call   80a875 <ntohs>
  80b830:	83 e0 c0             	and    $0xffffffc0,%eax
  80b833:	66 0f b6 55 c7       	movzbw 0xffffffc7(%ebp),%dx
  80b838:	09 d0                	or     %edx,%eax
  80b83a:	0f b7 c0             	movzwl %ax,%eax
  80b83d:	89 04 24             	mov    %eax,(%esp)
  80b840:	e8 1a f0 ff ff       	call   80a85f <htons>
  80b845:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b849:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
  80b84d:	75 23                	jne    80b872 <tcp_enqueue+0x3ef>
  80b84f:	8b 5e 10             	mov    0x10(%esi),%ebx
  80b852:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b856:	89 04 24             	mov    %eax,(%esp)
  80b859:	e8 17 f0 ff ff       	call   80a875 <ntohs>
  80b85e:	83 e0 3f             	and    $0x3f,%eax
  80b861:	80 cc 50             	or     $0x50,%ah
  80b864:	89 04 24             	mov    %eax,(%esp)
  80b867:	e8 f3 ef ff ff       	call   80a85f <htons>
  80b86c:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b870:	eb 3f                	jmp    80b8b1 <tcp_enqueue+0x42e>
  80b872:	8b 5e 10             	mov    0x10(%esi),%ebx
  80b875:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b879:	89 04 24             	mov    %eax,(%esp)
  80b87c:	e8 f4 ef ff ff       	call   80a875 <ntohs>
  80b881:	83 e0 3f             	and    $0x3f,%eax
  80b884:	66 0b 45 cc          	or     0xffffffcc(%ebp),%ax
  80b888:	0f b7 c0             	movzwl %ax,%eax
  80b88b:	89 04 24             	mov    %eax,(%esp)
  80b88e:	e8 cc ef ff ff       	call   80a85f <htons>
  80b893:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80b897:	0f b6 45 c5          	movzbl 0xffffffc5(%ebp),%eax
  80b89b:	89 44 24 08          	mov    %eax,0x8(%esp)
  80b89f:	8b 55 1c             	mov    0x1c(%ebp),%edx
  80b8a2:	89 54 24 04          	mov    %edx,0x4(%esp)
  80b8a6:	8b 46 08             	mov    0x8(%esi),%eax
  80b8a9:	89 04 24             	mov    %eax,(%esp)
  80b8ac:	e8 b7 59 ff ff       	call   801268 <memcpy>
  80b8b1:	66 29 7d de          	sub    %di,0xffffffde(%ebp)
  80b8b5:	83 7d d4 00          	cmpl   $0x0,0xffffffd4(%ebp)
  80b8b9:	0f 94 c3             	sete   %bl
  80b8bc:	84 db                	test   %bl,%bl
  80b8be:	0f 85 f4 fc ff ff    	jne    80b5b8 <tcp_enqueue+0x135>
  80b8c4:	66 83 7d de 00       	cmpw   $0x0,0xffffffde(%ebp)
  80b8c9:	0f 85 e9 fc ff ff    	jne    80b5b8 <tcp_enqueue+0x135>
  80b8cf:	89 75 ec             	mov    %esi,0xffffffec(%ebp)
  80b8d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b8d5:	8b 59 74             	mov    0x74(%ecx),%ebx
  80b8d8:	85 db                	test   %ebx,%ebx
  80b8da:	0f 84 1b 01 00 00    	je     80b9fb <tcp_enqueue+0x578>
  80b8e0:	8b 03                	mov    (%ebx),%eax
  80b8e2:	85 c0                	test   %eax,%eax
  80b8e4:	74 04                	je     80b8ea <tcp_enqueue+0x467>
  80b8e6:	89 c3                	mov    %eax,%ebx
  80b8e8:	eb f6                	jmp    80b8e0 <tcp_enqueue+0x45d>
  80b8ea:	89 5d e8             	mov    %ebx,0xffffffe8(%ebp)
  80b8ed:	85 db                	test   %ebx,%ebx
  80b8ef:	0f 84 06 01 00 00    	je     80b9fb <tcp_enqueue+0x578>
  80b8f5:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80b8f9:	66 89 45 ce          	mov    %ax,0xffffffce(%ebp)
  80b8fd:	8b 43 10             	mov    0x10(%ebx),%eax
  80b900:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b904:	89 04 24             	mov    %eax,(%esp)
  80b907:	e8 69 ef ff ff       	call   80a875 <ntohs>
  80b90c:	a8 01                	test   $0x1,%al
  80b90e:	75 1b                	jne    80b92b <tcp_enqueue+0x4a8>
  80b910:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80b913:	8b 42 10             	mov    0x10(%edx),%eax
  80b916:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b91a:	89 04 24             	mov    %eax,(%esp)
  80b91d:	e8 53 ef ff ff       	call   80a875 <ntohs>
  80b922:	ba 00 00 00 00       	mov    $0x0,%edx
  80b927:	a8 02                	test   $0x2,%al
  80b929:	74 05                	je     80b930 <tcp_enqueue+0x4ad>
  80b92b:	ba 01 00 00 00       	mov    $0x1,%edx
  80b930:	0f b7 45 ce          	movzwl 0xffffffce(%ebp),%eax
  80b934:	01 c2                	add    %eax,%edx
  80b936:	0f 84 13 02 00 00    	je     80bb4f <tcp_enqueue+0x6cc>
  80b93c:	8b 43 10             	mov    0x10(%ebx),%eax
  80b93f:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80b943:	89 04 24             	mov    %eax,(%esp)
  80b946:	e8 2a ef ff ff       	call   80a875 <ntohs>
  80b94b:	a8 03                	test   $0x3,%al
  80b94d:	0f 85 fc 01 00 00    	jne    80bb4f <tcp_enqueue+0x6cc>
  80b953:	0f b6 4d c7          	movzbl 0xffffffc7(%ebp),%ecx
  80b957:	89 4d d0             	mov    %ecx,0xffffffd0(%ebp)
  80b95a:	f6 c1 03             	test   $0x3,%cl
  80b95d:	0f 85 ec 01 00 00    	jne    80bb4f <tcp_enqueue+0x6cc>
  80b963:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80b966:	0f b7 42 0c          	movzwl 0xc(%edx),%eax
  80b96a:	0f b7 53 0c          	movzwl 0xc(%ebx),%edx
  80b96e:	01 d0                	add    %edx,%eax
  80b970:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80b973:	0f b7 51 34          	movzwl 0x34(%ecx),%edx
  80b977:	39 d0                	cmp    %edx,%eax
  80b979:	0f 8f d0 01 00 00    	jg     80bb4f <tcp_enqueue+0x6cc>
  80b97f:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  80b986:	ff 
  80b987:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80b98a:	8b 42 04             	mov    0x4(%edx),%eax
  80b98d:	89 04 24             	mov    %eax,(%esp)
  80b990:	e8 93 bd ff ff       	call   807728 <pbuf_header>
  80b995:	84 c0                	test   %al,%al
  80b997:	74 1c                	je     80b9b5 <tcp_enqueue+0x532>
  80b999:	c7 44 24 08 50 3b 81 	movl   $0x813b50,0x8(%esp)
  80b9a0:	00 
  80b9a1:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
  80b9a8:	00 
  80b9a9:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80b9b0:	e8 d7 4e ff ff       	call   80088c <_panic>
  80b9b5:	8b 4d d4             	mov    0xffffffd4(%ebp),%ecx
  80b9b8:	8b 41 04             	mov    0x4(%ecx),%eax
  80b9bb:	89 44 24 04          	mov    %eax,0x4(%esp)
  80b9bf:	8b 43 04             	mov    0x4(%ebx),%eax
  80b9c2:	89 04 24             	mov    %eax,(%esp)
  80b9c5:	e8 b9 bc ff ff       	call   807683 <pbuf_cat>
  80b9ca:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80b9cd:	0f b7 42 0c          	movzwl 0xc(%edx),%eax
  80b9d1:	66 01 43 0c          	add    %ax,0xc(%ebx)
  80b9d5:	8b 02                	mov    (%edx),%eax
  80b9d7:	89 03                	mov    %eax,(%ebx)
  80b9d9:	8b 4d ec             	mov    0xffffffec(%ebp),%ecx
  80b9dc:	39 ca                	cmp    %ecx,%edx
  80b9de:	0f 94 c0             	sete   %al
  80b9e1:	0f b6 c0             	movzbl %al,%eax
  80b9e4:	83 e8 01             	sub    $0x1,%eax
  80b9e7:	21 c6                	and    %eax,%esi
  80b9e9:	89 54 24 04          	mov    %edx,0x4(%esp)
  80b9ed:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  80b9f4:	e8 23 b9 ff ff       	call   80731c <memp_free>
  80b9f9:	eb 1d                	jmp    80ba18 <tcp_enqueue+0x595>
  80b9fb:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80b9fe:	8b 45 08             	mov    0x8(%ebp),%eax
  80ba01:	89 50 74             	mov    %edx,0x74(%eax)
  80ba04:	0f b6 4d c7          	movzbl 0xffffffc7(%ebp),%ecx
  80ba08:	89 4d d0             	mov    %ecx,0xffffffd0(%ebp)
  80ba0b:	89 c8                	mov    %ecx,%eax
  80ba0d:	83 e0 03             	and    $0x3,%eax
  80ba10:	83 f8 01             	cmp    $0x1,%eax
  80ba13:	66 83 5d c8 ff       	sbbw   $0xffffffff,0xffffffc8(%ebp)
  80ba18:	f6 45 d0 01          	testb  $0x1,0xffffffd0(%ebp)
  80ba1c:	74 07                	je     80ba25 <tcp_enqueue+0x5a2>
  80ba1e:	8b 45 08             	mov    0x8(%ebp),%eax
  80ba21:	80 48 20 20          	orb    $0x20,0x20(%eax)
  80ba25:	0f b7 45 c8          	movzwl 0xffffffc8(%ebp),%eax
  80ba29:	8b 55 08             	mov    0x8(%ebp),%edx
  80ba2c:	01 42 68             	add    %eax,0x68(%edx)
  80ba2f:	0f b7 4d c8          	movzwl 0xffffffc8(%ebp),%ecx
  80ba33:	66 29 4a 6e          	sub    %cx,0x6e(%edx)
  80ba37:	0f b7 45 e6          	movzwl 0xffffffe6(%ebp),%eax
  80ba3b:	66 89 42 70          	mov    %ax,0x70(%edx)
  80ba3f:	66 85 c0             	test   %ax,%ax
  80ba42:	74 28                	je     80ba6c <tcp_enqueue+0x5e9>
  80ba44:	83 7a 78 00          	cmpl   $0x0,0x78(%edx)
  80ba48:	75 22                	jne    80ba6c <tcp_enqueue+0x5e9>
  80ba4a:	83 7a 74 00          	cmpl   $0x0,0x74(%edx)
  80ba4e:	75 1c                	jne    80ba6c <tcp_enqueue+0x5e9>
  80ba50:	c7 44 24 08 f4 3a 81 	movl   $0x813af4,0x8(%esp)
  80ba57:	00 
  80ba58:	c7 44 24 04 7a 01 00 	movl   $0x17a,0x4(%esp)
  80ba5f:	00 
  80ba60:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80ba67:	e8 20 4e ff ff       	call   80088c <_panic>
  80ba6c:	85 f6                	test   %esi,%esi
  80ba6e:	0f 84 a1 00 00 00    	je     80bb15 <tcp_enqueue+0x692>
  80ba74:	66 85 ff             	test   %di,%di
  80ba77:	0f 84 98 00 00 00    	je     80bb15 <tcp_enqueue+0x692>
  80ba7d:	8b 5e 10             	mov    0x10(%esi),%ebx
  80ba80:	85 db                	test   %ebx,%ebx
  80ba82:	0f 84 8d 00 00 00    	je     80bb15 <tcp_enqueue+0x692>
  80ba88:	f6 45 c6 02          	testb  $0x2,0xffffffc6(%ebp)
  80ba8c:	0f 85 83 00 00 00    	jne    80bb15 <tcp_enqueue+0x692>
  80ba92:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  80ba96:	89 04 24             	mov    %eax,(%esp)
  80ba99:	e8 d7 ed ff ff       	call   80a875 <ntohs>
  80ba9e:	83 c8 08             	or     $0x8,%eax
  80baa1:	0f b7 c0             	movzwl %ax,%eax
  80baa4:	89 04 24             	mov    %eax,(%esp)
  80baa7:	e8 b3 ed ff ff       	call   80a85f <htons>
  80baac:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80bab0:	b8 00 00 00 00       	mov    $0x0,%eax
  80bab5:	e9 a2 00 00 00       	jmp    80bb5c <tcp_enqueue+0x6d9>
  80baba:	89 1c 24             	mov    %ebx,(%esp)
  80babd:	e8 d2 bf ff ff       	call   807a94 <pbuf_free>
  80bac2:	8b 55 08             	mov    0x8(%ebp),%edx
  80bac5:	80 4a 20 80          	orb    $0x80,0x20(%edx)
  80bac9:	83 7d d4 00          	cmpl   $0x0,0xffffffd4(%ebp)
  80bacd:	74 0b                	je     80bada <tcp_enqueue+0x657>
  80bacf:	8b 4d d4             	mov    0xffffffd4(%ebp),%ecx
  80bad2:	89 0c 24             	mov    %ecx,(%esp)
  80bad5:	e8 91 cb ff ff       	call   80866b <tcp_segs_free>
  80bada:	8b 45 08             	mov    0x8(%ebp),%eax
  80badd:	66 83 78 70 00       	cmpw   $0x0,0x70(%eax)
  80bae2:	74 2a                	je     80bb0e <tcp_enqueue+0x68b>
  80bae4:	83 78 78 00          	cmpl   $0x0,0x78(%eax)
  80bae8:	75 24                	jne    80bb0e <tcp_enqueue+0x68b>
  80baea:	83 78 74 00          	cmpl   $0x0,0x74(%eax)
  80baee:	66 90                	xchg   %ax,%ax
  80baf0:	75 1c                	jne    80bb0e <tcp_enqueue+0x68b>
  80baf2:	c7 44 24 08 f4 3a 81 	movl   $0x813af4,0x8(%esp)
  80baf9:	00 
  80bafa:	c7 44 24 04 8d 01 00 	movl   $0x18d,0x4(%esp)
  80bb01:	00 
  80bb02:	c7 04 24 14 3b 81 00 	movl   $0x813b14,(%esp)
  80bb09:	e8 7e 4d ff ff       	call   80088c <_panic>
  80bb0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80bb13:	eb 47                	jmp    80bb5c <tcp_enqueue+0x6d9>
  80bb15:	b8 00 00 00 00       	mov    $0x0,%eax
  80bb1a:	eb 40                	jmp    80bb5c <tcp_enqueue+0x6d9>
  80bb1c:	0f b6 45 c5          	movzbl 0xffffffc5(%ebp),%eax
  80bb20:	c0 e8 02             	shr    $0x2,%al
  80bb23:	c1 e0 0c             	shl    $0xc,%eax
  80bb26:	66 05 00 50          	add    $0x5000,%ax
  80bb2a:	66 89 45 cc          	mov    %ax,0xffffffcc(%ebp)
  80bb2e:	0f b7 4d c8          	movzwl 0xffffffc8(%ebp),%ecx
  80bb32:	66 89 4d de          	mov    %cx,0xffffffde(%ebp)
  80bb36:	89 55 e0             	mov    %edx,0xffffffe0(%ebp)
  80bb39:	bf 00 00 00 00       	mov    $0x0,%edi
  80bb3e:	c7 45 d4 00 00 00 00 	movl   $0x0,0xffffffd4(%ebp)
  80bb45:	bb 01 00 00 00       	mov    $0x1,%ebx
  80bb4a:	e9 74 fa ff ff       	jmp    80b5c3 <tcp_enqueue+0x140>
  80bb4f:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  80bb52:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80bb55:	89 10                	mov    %edx,(%eax)
  80bb57:	e9 a8 fe ff ff       	jmp    80ba04 <tcp_enqueue+0x581>
  80bb5c:	83 c4 3c             	add    $0x3c,%esp
  80bb5f:	5b                   	pop    %ebx
  80bb60:	5e                   	pop    %esi
  80bb61:	5f                   	pop    %edi
  80bb62:	5d                   	pop    %ebp
  80bb63:	c3                   	ret    

0080bb64 <tcp_write>:
  80bb64:	55                   	push   %ebp
  80bb65:	89 e5                	mov    %esp,%ebp
  80bb67:	83 ec 28             	sub    $0x28,%esp
  80bb6a:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80bb6d:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80bb70:	8b 75 08             	mov    0x8(%ebp),%esi
  80bb73:	0f b7 4d 10          	movzwl 0x10(%ebp),%ecx
  80bb77:	0f b6 5d 14          	movzbl 0x14(%ebp),%ebx
  80bb7b:	8b 56 10             	mov    0x10(%esi),%edx
  80bb7e:	83 fa 04             	cmp    $0x4,%edx
  80bb81:	74 14                	je     80bb97 <tcp_write+0x33>
  80bb83:	83 fa 07             	cmp    $0x7,%edx
  80bb86:	74 0f                	je     80bb97 <tcp_write+0x33>
  80bb88:	83 fa 02             	cmp    $0x2,%edx
  80bb8b:	74 0a                	je     80bb97 <tcp_write+0x33>
  80bb8d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  80bb92:	83 fa 03             	cmp    $0x3,%edx
  80bb95:	75 42                	jne    80bbd9 <tcp_write+0x75>
  80bb97:	b8 00 00 00 00       	mov    $0x0,%eax
  80bb9c:	66 85 c9             	test   %cx,%cx
  80bb9f:	74 38                	je     80bbd9 <tcp_write+0x75>
  80bba1:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
  80bba8:	00 
  80bba9:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  80bbb0:	00 
  80bbb1:	0f b6 c3             	movzbl %bl,%eax
  80bbb4:	89 44 24 10          	mov    %eax,0x10(%esp)
  80bbb8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  80bbbf:	00 
  80bbc0:	0f b7 c1             	movzwl %cx,%eax
  80bbc3:	89 44 24 08          	mov    %eax,0x8(%esp)
  80bbc7:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bbca:	89 44 24 04          	mov    %eax,0x4(%esp)
  80bbce:	89 34 24             	mov    %esi,(%esp)
  80bbd1:	e8 ad f8 ff ff       	call   80b483 <tcp_enqueue>
  80bbd6:	0f be c0             	movsbl %al,%eax
  80bbd9:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80bbdc:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80bbdf:	89 ec                	mov    %ebp,%esp
  80bbe1:	5d                   	pop    %ebp
  80bbe2:	c3                   	ret    

0080bbe3 <tcp_send_ctrl>:
  80bbe3:	55                   	push   %ebp
  80bbe4:	89 e5                	mov    %esp,%ebp
  80bbe6:	83 ec 28             	sub    $0x28,%esp
  80bbe9:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
  80bbf0:	00 
  80bbf1:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
  80bbf8:	00 
  80bbf9:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
  80bc00:	00 
  80bc01:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
  80bc05:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80bc09:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80bc10:	00 
  80bc11:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80bc18:	00 
  80bc19:	8b 45 08             	mov    0x8(%ebp),%eax
  80bc1c:	89 04 24             	mov    %eax,(%esp)
  80bc1f:	e8 5f f8 ff ff       	call   80b483 <tcp_enqueue>
  80bc24:	0f be c0             	movsbl %al,%eax
  80bc27:	c9                   	leave  
  80bc28:	c3                   	ret    
  80bc29:	00 00                	add    %al,(%eax)
  80bc2b:	00 00                	add    %al,(%eax)
  80bc2d:	00 00                	add    %al,(%eax)
	...

0080bc30 <udp_disconnect>:
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  80bc30:	55                   	push   %ebp
  80bc31:	89 e5                	mov    %esp,%ebp
  80bc33:	8b 45 08             	mov    0x8(%ebp),%eax
  /* reset remote address association */
  ip_addr_set(&pcb->remote_ip, IP_ADDR_ANY);
  80bc36:	8b 15 d0 37 81 00    	mov    0x8137d0,%edx
  80bc3c:	89 50 04             	mov    %edx,0x4(%eax)
  pcb->remote_port = 0;
  80bc3f:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  80bc45:	80 60 10 fb          	andb   $0xfb,0x10(%eax)
}
  80bc49:	5d                   	pop    %ebp
  80bc4a:	c3                   	ret    

0080bc4b <udp_recv>:

/**
 * Set a receive callback for a UDP PCB
 *
 * This callback will be called when receiving a datagram for the pcb.
 *
 * @param pcb the pcb for wich to set the recv callback
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb,
         void (* recv)(void *arg, struct udp_pcb *upcb, struct pbuf *p,
                       struct ip_addr *addr, u16_t port),
         void *recv_arg)
{
  80bc4b:	55                   	push   %ebp
  80bc4c:	89 e5                	mov    %esp,%ebp
  80bc4e:	8b 45 08             	mov    0x8(%ebp),%eax
  /* remember recv() callback and user data */
  pcb->recv = recv;
  80bc51:	8b 55 0c             	mov    0xc(%ebp),%edx
  80bc54:	89 50 18             	mov    %edx,0x18(%eax)
  pcb->recv_arg = recv_arg;
  80bc57:	8b 55 10             	mov    0x10(%ebp),%edx
  80bc5a:	89 50 1c             	mov    %edx,0x1c(%eax)
}
  80bc5d:	5d                   	pop    %ebp
  80bc5e:	c3                   	ret    

0080bc5f <udp_new>:

/**
 * Remove an UDP PCB.
 *
 * @param pcb UDP PCB to be removed. The PCB is removed from the list of
 * UDP PCB's and the data structure is freed from memory.
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  memp_free(MEMP_UDP_PCB, pcb);
}

/**
 * Create a UDP PCB.
 *
 * @return The UDP PCB which was created. NULL if the PCB data structure
 * could not be allocated.
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  80bc5f:	55                   	push   %ebp
  80bc60:	89 e5                	mov    %esp,%ebp
  80bc62:	53                   	push   %ebx
  80bc63:	83 ec 14             	sub    $0x14,%esp
  struct udp_pcb *pcb;
  pcb = memp_malloc(MEMP_UDP_PCB);
  80bc66:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80bc6d:	e8 ed b6 ff ff       	call   80735f <memp_malloc>
  80bc72:	89 c3                	mov    %eax,%ebx
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  80bc74:	85 c0                	test   %eax,%eax
  80bc76:	74 1c                	je     80bc94 <udp_new+0x35>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  80bc78:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
  80bc7f:	00 
  80bc80:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80bc87:	00 
  80bc88:	89 04 24             	mov    %eax,(%esp)
  80bc8b:	e8 01 55 ff ff       	call   801191 <memset>
    pcb->ttl = UDP_TTL;
  80bc90:	c6 43 0b ff          	movb   $0xff,0xb(%ebx)
  }
  return pcb;
}
  80bc94:	89 d8                	mov    %ebx,%eax
  80bc96:	83 c4 14             	add    $0x14,%esp
  80bc99:	5b                   	pop    %ebx
  80bc9a:	5d                   	pop    %ebp
  80bc9b:	c3                   	ret    

0080bc9c <udp_remove>:
  80bc9c:	55                   	push   %ebp
  80bc9d:	89 e5                	mov    %esp,%ebp
  80bc9f:	83 ec 08             	sub    $0x8,%esp
  80bca2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80bca5:	8b 15 e0 e5 b3 00    	mov    0xb3e5e0,%edx
  80bcab:	39 ca                	cmp    %ecx,%edx
  80bcad:	74 06                	je     80bcb5 <udp_remove+0x19>
  80bcaf:	85 d2                	test   %edx,%edx
  80bcb1:	75 0e                	jne    80bcc1 <udp_remove+0x25>
  80bcb3:	eb 21                	jmp    80bcd6 <udp_remove+0x3a>
  80bcb5:	8b 42 0c             	mov    0xc(%edx),%eax
  80bcb8:	a3 e0 e5 b3 00       	mov    %eax,0xb3e5e0
  80bcbd:	eb 17                	jmp    80bcd6 <udp_remove+0x3a>
  80bcbf:	89 c2                	mov    %eax,%edx
  80bcc1:	8b 42 0c             	mov    0xc(%edx),%eax
  80bcc4:	85 c0                	test   %eax,%eax
  80bcc6:	74 0e                	je     80bcd6 <udp_remove+0x3a>
  80bcc8:	39 c1                	cmp    %eax,%ecx
  80bcca:	75 f3                	jne    80bcbf <udp_remove+0x23>
  80bccc:	8b 41 0c             	mov    0xc(%ecx),%eax
  80bccf:	89 42 0c             	mov    %eax,0xc(%edx)
  80bcd2:	85 c0                	test   %eax,%eax
  80bcd4:	75 e9                	jne    80bcbf <udp_remove+0x23>
  80bcd6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  80bcda:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80bce1:	e8 36 b6 ff ff       	call   80731c <memp_free>
  80bce6:	c9                   	leave  
  80bce7:	c3                   	ret    

0080bce8 <udp_bind>:
  80bce8:	55                   	push   %ebp
  80bce9:	89 e5                	mov    %esp,%ebp
  80bceb:	57                   	push   %edi
  80bcec:	56                   	push   %esi
  80bced:	53                   	push   %ebx
  80bcee:	83 ec 1c             	sub    $0x1c,%esp
  80bcf1:	8b 55 08             	mov    0x8(%ebp),%edx
  80bcf4:	8b 75 0c             	mov    0xc(%ebp),%esi
  80bcf7:	0f b7 4d 10          	movzwl 0x10(%ebp),%ecx
  80bcfb:	a1 e0 e5 b3 00       	mov    0xb3e5e0,%eax
  80bd00:	bb 00 00 00 00       	mov    $0x0,%ebx
  80bd05:	85 c0                	test   %eax,%eax
  80bd07:	74 35                	je     80bd3e <udp_bind+0x56>
  80bd09:	bb 00 00 00 00       	mov    $0x0,%ebx
  80bd0e:	39 c2                	cmp    %eax,%edx
  80bd10:	75 25                	jne    80bd37 <udp_bind+0x4f>
  80bd12:	84 db                	test   %bl,%bl
  80bd14:	74 1c                	je     80bd32 <udp_bind+0x4a>
  80bd16:	c7 44 24 08 64 3b 81 	movl   $0x813b64,0x8(%esp)
  80bd1d:	00 
  80bd1e:	c7 44 24 04 41 02 00 	movl   $0x241,0x4(%esp)
  80bd25:	00 
  80bd26:	c7 04 24 70 3b 81 00 	movl   $0x813b70,(%esp)
  80bd2d:	e8 5a 4b ff ff       	call   80088c <_panic>
  80bd32:	bb 01 00 00 00       	mov    $0x1,%ebx
  80bd37:	8b 40 0c             	mov    0xc(%eax),%eax
  80bd3a:	85 c0                	test   %eax,%eax
  80bd3c:	75 d0                	jne    80bd0e <udp_bind+0x26>
  80bd3e:	b8 00 00 00 00       	mov    $0x0,%eax
  80bd43:	85 f6                	test   %esi,%esi
  80bd45:	74 02                	je     80bd49 <udp_bind+0x61>
  80bd47:	8b 06                	mov    (%esi),%eax
  80bd49:	89 02                	mov    %eax,(%edx)
  80bd4b:	66 85 c9             	test   %cx,%cx
  80bd4e:	75 4a                	jne    80bd9a <udp_bind+0xb2>
  80bd50:	a1 e0 e5 b3 00       	mov    0xb3e5e0,%eax
  80bd55:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80bd58:	89 c7                	mov    %eax,%edi
  80bd5a:	b9 00 10 00 00       	mov    $0x1000,%ecx
  80bd5f:	eb 1a                	jmp    80bd7b <udp_bind+0x93>
  80bd61:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80bd64:	66 39 48 12          	cmp    %cx,0x12(%eax)
  80bd68:	75 08                	jne    80bd72 <udp_bind+0x8a>
  80bd6a:	83 c1 01             	add    $0x1,%ecx
  80bd6d:	89 7d f0             	mov    %edi,0xfffffff0(%ebp)
  80bd70:	eb 09                	jmp    80bd7b <udp_bind+0x93>
  80bd72:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80bd75:	8b 40 0c             	mov    0xc(%eax),%eax
  80bd78:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80bd7b:	83 7d f0 00          	cmpl   $0x0,0xfffffff0(%ebp)
  80bd7f:	0f 95 c0             	setne  %al
  80bd82:	89 c6                	mov    %eax,%esi
  80bd84:	84 c0                	test   %al,%al
  80bd86:	74 07                	je     80bd8f <udp_bind+0xa7>
  80bd88:	66 81 f9 ff 7f       	cmp    $0x7fff,%cx
  80bd8d:	75 d2                	jne    80bd61 <udp_bind+0x79>
  80bd8f:	bf f5 ff ff ff       	mov    $0xfffffff5,%edi
  80bd94:	89 f0                	mov    %esi,%eax
  80bd96:	84 c0                	test   %al,%al
  80bd98:	75 20                	jne    80bdba <udp_bind+0xd2>
  80bd9a:	66 89 4a 12          	mov    %cx,0x12(%edx)
  80bd9e:	bf 00 00 00 00       	mov    $0x0,%edi
  80bda3:	84 db                	test   %bl,%bl
  80bda5:	75 13                	jne    80bdba <udp_bind+0xd2>
  80bda7:	a1 e0 e5 b3 00       	mov    0xb3e5e0,%eax
  80bdac:	89 42 0c             	mov    %eax,0xc(%edx)
  80bdaf:	89 15 e0 e5 b3 00    	mov    %edx,0xb3e5e0
  80bdb5:	bf 00 00 00 00       	mov    $0x0,%edi
  80bdba:	89 f8                	mov    %edi,%eax
  80bdbc:	83 c4 1c             	add    $0x1c,%esp
  80bdbf:	5b                   	pop    %ebx
  80bdc0:	5e                   	pop    %esi
  80bdc1:	5f                   	pop    %edi
  80bdc2:	5d                   	pop    %ebp
  80bdc3:	c3                   	ret    

0080bdc4 <udp_connect>:
  80bdc4:	55                   	push   %ebp
  80bdc5:	89 e5                	mov    %esp,%ebp
  80bdc7:	57                   	push   %edi
  80bdc8:	56                   	push   %esi
  80bdc9:	53                   	push   %ebx
  80bdca:	83 ec 0c             	sub    $0xc,%esp
  80bdcd:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80bdd0:	8b 7d 0c             	mov    0xc(%ebp),%edi
  80bdd3:	0f b7 75 10          	movzwl 0x10(%ebp),%esi
  80bdd7:	66 83 7b 12 00       	cmpw   $0x0,0x12(%ebx)
  80bddc:	75 1b                	jne    80bdf9 <udp_connect+0x35>
  80bdde:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80bde5:	00 
  80bde6:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80bdea:	89 1c 24             	mov    %ebx,(%esp)
  80bded:	e8 f6 fe ff ff       	call   80bce8 <udp_bind>
  80bdf2:	0f be d0             	movsbl %al,%edx
  80bdf5:	84 c0                	test   %al,%al
  80bdf7:	75 48                	jne    80be41 <udp_connect+0x7d>
  80bdf9:	b8 00 00 00 00       	mov    $0x0,%eax
  80bdfe:	85 ff                	test   %edi,%edi
  80be00:	74 02                	je     80be04 <udp_connect+0x40>
  80be02:	8b 07                	mov    (%edi),%eax
  80be04:	89 43 04             	mov    %eax,0x4(%ebx)
  80be07:	66 89 73 14          	mov    %si,0x14(%ebx)
  80be0b:	80 4b 10 04          	orb    $0x4,0x10(%ebx)
  80be0f:	8b 15 e0 e5 b3 00    	mov    0xb3e5e0,%edx
  80be15:	85 d2                	test   %edx,%edx
  80be17:	74 13                	je     80be2c <udp_connect+0x68>
  80be19:	89 d0                	mov    %edx,%eax
  80be1b:	39 d3                	cmp    %edx,%ebx
  80be1d:	75 06                	jne    80be25 <udp_connect+0x61>
  80be1f:	eb 1b                	jmp    80be3c <udp_connect+0x78>
  80be21:	39 c3                	cmp    %eax,%ebx
  80be23:	74 17                	je     80be3c <udp_connect+0x78>
  80be25:	8b 40 0c             	mov    0xc(%eax),%eax
  80be28:	85 c0                	test   %eax,%eax
  80be2a:	75 f5                	jne    80be21 <udp_connect+0x5d>
  80be2c:	89 53 0c             	mov    %edx,0xc(%ebx)
  80be2f:	89 1d e0 e5 b3 00    	mov    %ebx,0xb3e5e0
  80be35:	ba 00 00 00 00       	mov    $0x0,%edx
  80be3a:	eb 05                	jmp    80be41 <udp_connect+0x7d>
  80be3c:	ba 00 00 00 00       	mov    $0x0,%edx
  80be41:	89 d0                	mov    %edx,%eax
  80be43:	83 c4 0c             	add    $0xc,%esp
  80be46:	5b                   	pop    %ebx
  80be47:	5e                   	pop    %esi
  80be48:	5f                   	pop    %edi
  80be49:	5d                   	pop    %ebp
  80be4a:	c3                   	ret    

0080be4b <udp_sendto_if>:
  80be4b:	55                   	push   %ebp
  80be4c:	89 e5                	mov    %esp,%ebp
  80be4e:	57                   	push   %edi
  80be4f:	56                   	push   %esi
  80be50:	53                   	push   %ebx
  80be51:	83 ec 1c             	sub    $0x1c,%esp
  80be54:	0f b7 7d 14          	movzwl 0x14(%ebp),%edi
  80be58:	8b 45 08             	mov    0x8(%ebp),%eax
  80be5b:	66 83 78 12 00       	cmpw   $0x0,0x12(%eax)
  80be60:	75 1f                	jne    80be81 <udp_sendto_if+0x36>
  80be62:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80be69:	00 
  80be6a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80be6e:	89 04 24             	mov    %eax,(%esp)
  80be71:	e8 72 fe ff ff       	call   80bce8 <udp_bind>
  80be76:	0f be d0             	movsbl %al,%edx
  80be79:	84 c0                	test   %al,%al
  80be7b:	0f 85 6d 01 00 00    	jne    80bfee <udp_sendto_if+0x1a3>
  80be81:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  80be88:	00 
  80be89:	8b 55 0c             	mov    0xc(%ebp),%edx
  80be8c:	89 14 24             	mov    %edx,(%esp)
  80be8f:	e8 94 b8 ff ff       	call   807728 <pbuf_header>
  80be94:	8b 75 0c             	mov    0xc(%ebp),%esi
  80be97:	84 c0                	test   %al,%al
  80be99:	74 3a                	je     80bed5 <udp_sendto_if+0x8a>
  80be9b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80bea2:	00 
  80bea3:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  80beaa:	00 
  80beab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80beb2:	e8 a0 be ff ff       	call   807d57 <pbuf_alloc>
  80beb7:	89 c6                	mov    %eax,%esi
  80beb9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80bebe:	85 c0                	test   %eax,%eax
  80bec0:	0f 84 28 01 00 00    	je     80bfee <udp_sendto_if+0x1a3>
  80bec6:	8b 45 0c             	mov    0xc(%ebp),%eax
  80bec9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80becd:	89 34 24             	mov    %esi,(%esp)
  80bed0:	e8 2c b8 ff ff       	call   807701 <pbuf_chain>
  80bed5:	66 83 7e 0a 07       	cmpw   $0x7,0xa(%esi)
  80beda:	77 1c                	ja     80bef8 <udp_sendto_if+0xad>
  80bedc:	c7 44 24 08 98 3b 81 	movl   $0x813b98,0x8(%esp)
  80bee3:	00 
  80bee4:	c7 44 24 04 b2 01 00 	movl   $0x1b2,0x4(%esp)
  80beeb:	00 
  80beec:	c7 04 24 70 3b 81 00 	movl   $0x813b70,(%esp)
  80bef3:	e8 94 49 ff ff       	call   80088c <_panic>
  80bef8:	8b 5e 04             	mov    0x4(%esi),%ebx
  80befb:	8b 55 08             	mov    0x8(%ebp),%edx
  80befe:	0f b7 42 12          	movzwl 0x12(%edx),%eax
  80bf02:	89 04 24             	mov    %eax,(%esp)
  80bf05:	e8 55 e9 ff ff       	call   80a85f <htons>
  80bf0a:	66 89 03             	mov    %ax,(%ebx)
  80bf0d:	0f b7 c7             	movzwl %di,%eax
  80bf10:	89 04 24             	mov    %eax,(%esp)
  80bf13:	e8 47 e9 ff ff       	call   80a85f <htons>
  80bf18:	66 89 43 02          	mov    %ax,0x2(%ebx)
  80bf1c:	66 c7 43 06 00 00    	movw   $0x0,0x6(%ebx)
  80bf22:	8b 7d 08             	mov    0x8(%ebp),%edi
  80bf25:	85 ff                	test   %edi,%edi
  80bf27:	74 06                	je     80bf2f <udp_sendto_if+0xe4>
  80bf29:	8b 07                	mov    (%edi),%eax
  80bf2b:	85 c0                	test   %eax,%eax
  80bf2d:	75 08                	jne    80bf37 <udp_sendto_if+0xec>
  80bf2f:	8b 7d 18             	mov    0x18(%ebp),%edi
  80bf32:	83 c7 04             	add    $0x4,%edi
  80bf35:	eb 28                	jmp    80bf5f <udp_sendto_if+0x114>
  80bf37:	8b 55 18             	mov    0x18(%ebp),%edx
  80bf3a:	3b 42 04             	cmp    0x4(%edx),%eax
  80bf3d:	74 20                	je     80bf5f <udp_sendto_if+0x114>
  80bf3f:	ba f7 ff ff ff       	mov    $0xfffffff7,%edx
  80bf44:	3b 75 0c             	cmp    0xc(%ebp),%esi
  80bf47:	0f 84 a1 00 00 00    	je     80bfee <udp_sendto_if+0x1a3>
  80bf4d:	89 34 24             	mov    %esi,(%esp)
  80bf50:	e8 3f bb ff ff       	call   807a94 <pbuf_free>
  80bf55:	ba f7 ff ff ff       	mov    $0xfffffff7,%edx
  80bf5a:	e9 8f 00 00 00       	jmp    80bfee <udp_sendto_if+0x1a3>
  80bf5f:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80bf63:	89 04 24             	mov    %eax,(%esp)
  80bf66:	e8 f4 e8 ff ff       	call   80a85f <htons>
  80bf6b:	66 89 43 04          	mov    %ax,0x4(%ebx)
  80bf6f:	8b 45 08             	mov    0x8(%ebp),%eax
  80bf72:	f6 40 10 01          	testb  $0x1,0x10(%eax)
  80bf76:	75 2f                	jne    80bfa7 <udp_sendto_if+0x15c>
  80bf78:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80bf7c:	89 44 24 10          	mov    %eax,0x10(%esp)
  80bf80:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%esp)
  80bf87:	00 
  80bf88:	8b 55 10             	mov    0x10(%ebp),%edx
  80bf8b:	89 54 24 08          	mov    %edx,0x8(%esp)
  80bf8f:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80bf93:	89 34 24             	mov    %esi,(%esp)
  80bf96:	e8 c4 e5 ff ff       	call   80a55f <inet_chksum_pseudo>
  80bf9b:	66 83 f8 01          	cmp    $0x1,%ax
  80bf9f:	19 d2                	sbb    %edx,%edx
  80bfa1:	09 d0                	or     %edx,%eax
  80bfa3:	66 89 43 06          	mov    %ax,0x6(%ebx)
  80bfa7:	8b 45 18             	mov    0x18(%ebp),%eax
  80bfaa:	89 44 24 18          	mov    %eax,0x18(%esp)
  80bfae:	c7 44 24 14 11 00 00 	movl   $0x11,0x14(%esp)
  80bfb5:	00 
  80bfb6:	8b 55 08             	mov    0x8(%ebp),%edx
  80bfb9:	0f b6 42 0a          	movzbl 0xa(%edx),%eax
  80bfbd:	89 44 24 10          	mov    %eax,0x10(%esp)
  80bfc1:	0f b6 42 0b          	movzbl 0xb(%edx),%eax
  80bfc5:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80bfc9:	8b 45 10             	mov    0x10(%ebp),%eax
  80bfcc:	89 44 24 08          	mov    %eax,0x8(%esp)
  80bfd0:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80bfd4:	89 34 24             	mov    %esi,(%esp)
  80bfd7:	e8 14 d5 ff ff       	call   8094f0 <ip_output_if>
  80bfdc:	89 c3                	mov    %eax,%ebx
  80bfde:	3b 75 0c             	cmp    0xc(%ebp),%esi
  80bfe1:	74 08                	je     80bfeb <udp_sendto_if+0x1a0>
  80bfe3:	89 34 24             	mov    %esi,(%esp)
  80bfe6:	e8 a9 ba ff ff       	call   807a94 <pbuf_free>
  80bfeb:	0f be d3             	movsbl %bl,%edx
  80bfee:	89 d0                	mov    %edx,%eax
  80bff0:	83 c4 1c             	add    $0x1c,%esp
  80bff3:	5b                   	pop    %ebx
  80bff4:	5e                   	pop    %esi
  80bff5:	5f                   	pop    %edi
  80bff6:	5d                   	pop    %ebp
  80bff7:	c3                   	ret    

0080bff8 <udp_sendto>:
  80bff8:	55                   	push   %ebp
  80bff9:	89 e5                	mov    %esp,%ebp
  80bffb:	83 ec 28             	sub    $0x28,%esp
  80bffe:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80c001:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80c004:	8b 75 10             	mov    0x10(%ebp),%esi
  80c007:	0f b7 5d 14          	movzwl 0x14(%ebp),%ebx
  80c00b:	89 34 24             	mov    %esi,(%esp)
  80c00e:	e8 8a d6 ff ff       	call   80969d <ip_route>
  80c013:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
  80c018:	85 c0                	test   %eax,%eax
  80c01a:	74 24                	je     80c040 <udp_sendto+0x48>
  80c01c:	89 44 24 10          	mov    %eax,0x10(%esp)
  80c020:	0f b7 c3             	movzwl %bx,%eax
  80c023:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80c027:	89 74 24 08          	mov    %esi,0x8(%esp)
  80c02b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c02e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c032:	8b 45 08             	mov    0x8(%ebp),%eax
  80c035:	89 04 24             	mov    %eax,(%esp)
  80c038:	e8 0e fe ff ff       	call   80be4b <udp_sendto_if>
  80c03d:	0f be d0             	movsbl %al,%edx
  80c040:	89 d0                	mov    %edx,%eax
  80c042:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80c045:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80c048:	89 ec                	mov    %ebp,%esp
  80c04a:	5d                   	pop    %ebp
  80c04b:	c3                   	ret    

0080c04c <udp_send>:
  80c04c:	55                   	push   %ebp
  80c04d:	89 e5                	mov    %esp,%ebp
  80c04f:	83 ec 18             	sub    $0x18,%esp
  80c052:	8b 55 08             	mov    0x8(%ebp),%edx
  80c055:	0f b7 42 14          	movzwl 0x14(%edx),%eax
  80c059:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80c05d:	8d 42 04             	lea    0x4(%edx),%eax
  80c060:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c064:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c067:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c06b:	89 14 24             	mov    %edx,(%esp)
  80c06e:	e8 85 ff ff ff       	call   80bff8 <udp_sendto>
  80c073:	0f be c0             	movsbl %al,%eax
  80c076:	c9                   	leave  
  80c077:	c3                   	ret    

0080c078 <udp_input>:
  80c078:	55                   	push   %ebp
  80c079:	89 e5                	mov    %esp,%ebp
  80c07b:	57                   	push   %edi
  80c07c:	56                   	push   %esi
  80c07d:	53                   	push   %ebx
  80c07e:	83 ec 2c             	sub    $0x2c,%esp
  80c081:	8b 45 08             	mov    0x8(%ebp),%eax
  80c084:	8b 40 04             	mov    0x4(%eax),%eax
  80c087:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80c08a:	8b 55 08             	mov    0x8(%ebp),%edx
  80c08d:	0f b7 5a 08          	movzwl 0x8(%edx),%ebx
  80c091:	0f b7 00             	movzwl (%eax),%eax
  80c094:	89 04 24             	mov    %eax,(%esp)
  80c097:	e8 d9 e7 ff ff       	call   80a875 <ntohs>
  80c09c:	c1 e8 06             	shr    $0x6,%eax
  80c09f:	83 e0 3c             	and    $0x3c,%eax
  80c0a2:	83 c0 08             	add    $0x8,%eax
  80c0a5:	39 c3                	cmp    %eax,%ebx
  80c0a7:	7c 2a                	jl     80c0d3 <udp_input+0x5b>
  80c0a9:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c0ac:	0f b7 02             	movzwl (%edx),%eax
  80c0af:	89 04 24             	mov    %eax,(%esp)
  80c0b2:	e8 be e7 ff ff       	call   80a875 <ntohs>
  80c0b7:	c1 e8 06             	shr    $0x6,%eax
  80c0ba:	83 e0 3c             	and    $0x3c,%eax
  80c0bd:	f7 d8                	neg    %eax
  80c0bf:	98                   	cwtl   
  80c0c0:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c0c4:	8b 45 08             	mov    0x8(%ebp),%eax
  80c0c7:	89 04 24             	mov    %eax,(%esp)
  80c0ca:	e8 59 b6 ff ff       	call   807728 <pbuf_header>
  80c0cf:	84 c0                	test   %al,%al
  80c0d1:	74 12                	je     80c0e5 <udp_input+0x6d>
  80c0d3:	8b 55 08             	mov    0x8(%ebp),%edx
  80c0d6:	89 14 24             	mov    %edx,(%esp)
  80c0d9:	e8 b6 b9 ff ff       	call   807a94 <pbuf_free>
  80c0de:	66 90                	xchg   %ax,%ax
  80c0e0:	e9 e2 02 00 00       	jmp    80c3c7 <udp_input+0x34f>
  80c0e5:	8b 45 08             	mov    0x8(%ebp),%eax
  80c0e8:	8b 40 04             	mov    0x4(%eax),%eax
  80c0eb:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  80c0ee:	0f b7 00             	movzwl (%eax),%eax
  80c0f1:	89 04 24             	mov    %eax,(%esp)
  80c0f4:	e8 7c e7 ff ff       	call   80a875 <ntohs>
  80c0f9:	66 89 45 f2          	mov    %ax,0xfffffff2(%ebp)
  80c0fd:	8b 55 e4             	mov    0xffffffe4(%ebp),%edx
  80c100:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  80c104:	89 04 24             	mov    %eax,(%esp)
  80c107:	e8 69 e7 ff ff       	call   80a875 <ntohs>
  80c10c:	89 c7                	mov    %eax,%edi
  80c10e:	66 83 f8 44          	cmp    $0x44,%ax
  80c112:	75 41                	jne    80c155 <udp_input+0xdd>
  80c114:	66 83 7d f2 43       	cmpw   $0x43,0xfffffff2(%ebp)
  80c119:	0f 85 de 00 00 00    	jne    80c1fd <udp_input+0x185>
  80c11f:	8b 55 0c             	mov    0xc(%ebp),%edx
  80c122:	8b 42 20             	mov    0x20(%edx),%eax
  80c125:	85 c0                	test   %eax,%eax
  80c127:	0f 84 d0 00 00 00    	je     80c1fd <udp_input+0x185>
  80c12d:	8b 58 08             	mov    0x8(%eax),%ebx
  80c130:	85 db                	test   %ebx,%ebx
  80c132:	0f 84 ca 00 00 00    	je     80c202 <udp_input+0x18a>
  80c138:	8b 43 04             	mov    0x4(%ebx),%eax
  80c13b:	85 c0                	test   %eax,%eax
  80c13d:	0f 84 d1 00 00 00    	je     80c214 <udp_input+0x19c>
  80c143:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c146:	3b 42 0c             	cmp    0xc(%edx),%eax
  80c149:	0f 85 ae 00 00 00    	jne    80c1fd <udp_input+0x185>
  80c14f:	90                   	nop    
  80c150:	e9 bf 00 00 00       	jmp    80c214 <udp_input+0x19c>
  80c155:	8b 1d e0 e5 b3 00    	mov    0xb3e5e0,%ebx
  80c15b:	85 db                	test   %ebx,%ebx
  80c15d:	0f 84 9f 00 00 00    	je     80c202 <udp_input+0x18a>
  80c163:	be 00 00 00 00       	mov    $0x0,%esi
  80c168:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  80c16f:	66 3b 7b 12          	cmp    0x12(%ebx),%di
  80c173:	75 6f                	jne    80c1e4 <udp_input+0x16c>
  80c175:	85 db                	test   %ebx,%ebx
  80c177:	74 26                	je     80c19f <udp_input+0x127>
  80c179:	8b 03                	mov    (%ebx),%eax
  80c17b:	85 c0                	test   %eax,%eax
  80c17d:	74 20                	je     80c19f <udp_input+0x127>
  80c17f:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c182:	3b 42 10             	cmp    0x10(%edx),%eax
  80c185:	74 18                	je     80c19f <udp_input+0x127>
  80c187:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c18a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c18e:	89 d0                	mov    %edx,%eax
  80c190:	83 c0 10             	add    $0x10,%eax
  80c193:	89 04 24             	mov    %eax,(%esp)
  80c196:	e8 01 d3 ff ff       	call   80949c <ip_addr_isbroadcast>
  80c19b:	84 c0                	test   %al,%al
  80c19d:	74 45                	je     80c1e4 <udp_input+0x16c>
  80c19f:	83 7d e8 00          	cmpl   $0x0,0xffffffe8(%ebp)
  80c1a3:	0f 85 c2 01 00 00    	jne    80c36b <udp_input+0x2f3>
  80c1a9:	f6 43 10 04          	testb  $0x4,0x10(%ebx)
  80c1ad:	8d 76 00             	lea    0x0(%esi),%esi
  80c1b0:	0f 84 b2 01 00 00    	je     80c368 <udp_input+0x2f0>
  80c1b6:	e9 b0 01 00 00       	jmp    80c36b <udp_input+0x2f3>
  80c1bb:	8b 43 04             	mov    0x4(%ebx),%eax
  80c1be:	85 c0                	test   %eax,%eax
  80c1c0:	74 08                	je     80c1ca <udp_input+0x152>
  80c1c2:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c1c5:	3b 42 0c             	cmp    0xc(%edx),%eax
  80c1c8:	75 1a                	jne    80c1e4 <udp_input+0x16c>
  80c1ca:	85 f6                	test   %esi,%esi
  80c1cc:	74 46                	je     80c214 <udp_input+0x19c>
  80c1ce:	8b 43 0c             	mov    0xc(%ebx),%eax
  80c1d1:	89 46 0c             	mov    %eax,0xc(%esi)
  80c1d4:	a1 e0 e5 b3 00       	mov    0xb3e5e0,%eax
  80c1d9:	89 43 0c             	mov    %eax,0xc(%ebx)
  80c1dc:	89 1d e0 e5 b3 00    	mov    %ebx,0xb3e5e0
  80c1e2:	eb 30                	jmp    80c214 <udp_input+0x19c>
  80c1e4:	8b 43 0c             	mov    0xc(%ebx),%eax
  80c1e7:	89 de                	mov    %ebx,%esi
  80c1e9:	85 c0                	test   %eax,%eax
  80c1eb:	0f 84 8d 01 00 00    	je     80c37e <udp_input+0x306>
  80c1f1:	89 c3                	mov    %eax,%ebx
  80c1f3:	e9 77 ff ff ff       	jmp    80c16f <udp_input+0xf7>
  80c1f8:	8b 5d e8             	mov    0xffffffe8(%ebp),%ebx
  80c1fb:	eb 05                	jmp    80c202 <udp_input+0x18a>
  80c1fd:	bb 00 00 00 00       	mov    $0x0,%ebx
  80c202:	8b 55 0c             	mov    0xc(%ebp),%edx
  80c205:	8b 42 04             	mov    0x4(%edx),%eax
  80c208:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c20b:	3b 42 10             	cmp    0x10(%edx),%eax
  80c20e:	0f 85 47 01 00 00    	jne    80c35b <udp_input+0x2e3>
  80c214:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80c217:	66 83 78 06 00       	cmpw   $0x0,0x6(%eax)
  80c21c:	74 38                	je     80c256 <udp_input+0x1de>
  80c21e:	8b 55 08             	mov    0x8(%ebp),%edx
  80c221:	0f b7 42 08          	movzwl 0x8(%edx),%eax
  80c225:	89 44 24 10          	mov    %eax,0x10(%esp)
  80c229:	c7 44 24 0c 11 00 00 	movl   $0x11,0xc(%esp)
  80c230:	00 
  80c231:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c234:	83 c0 10             	add    $0x10,%eax
  80c237:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c23b:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c23e:	83 c0 0c             	add    $0xc,%eax
  80c241:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c245:	89 14 24             	mov    %edx,(%esp)
  80c248:	e8 12 e3 ff ff       	call   80a55f <inet_chksum_pseudo>
  80c24d:	66 85 c0             	test   %ax,%ax
  80c250:	0f 85 66 01 00 00    	jne    80c3bc <udp_input+0x344>
  80c256:	c7 44 24 04 f8 ff ff 	movl   $0xfffffff8,0x4(%esp)
  80c25d:	ff 
  80c25e:	8b 45 08             	mov    0x8(%ebp),%eax
  80c261:	89 04 24             	mov    %eax,(%esp)
  80c264:	e8 bf b4 ff ff       	call   807728 <pbuf_header>
  80c269:	84 c0                	test   %al,%al
  80c26b:	74 1c                	je     80c289 <udp_input+0x211>
  80c26d:	c7 44 24 08 50 3b 81 	movl   $0x813b50,0x8(%esp)
  80c274:	00 
  80c275:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
  80c27c:	00 
  80c27d:	c7 04 24 70 3b 81 00 	movl   $0x813b70,(%esp)
  80c284:	e8 03 46 ff ff       	call   80088c <_panic>
  80c289:	85 db                	test   %ebx,%ebx
  80c28b:	74 1b                	je     80c2a8 <udp_input+0x230>
  80c28d:	8b 53 18             	mov    0x18(%ebx),%edx
  80c290:	85 d2                	test   %edx,%edx
  80c292:	0f 85 fd 00 00 00    	jne    80c395 <udp_input+0x31d>
  80c298:	8b 55 08             	mov    0x8(%ebp),%edx
  80c29b:	89 14 24             	mov    %edx,(%esp)
  80c29e:	e8 f1 b7 ff ff       	call   807a94 <pbuf_free>
  80c2a3:	e9 1f 01 00 00       	jmp    80c3c7 <udp_input+0x34f>
  80c2a8:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c2ab:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c2af:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c2b2:	83 c0 10             	add    $0x10,%eax
  80c2b5:	89 04 24             	mov    %eax,(%esp)
  80c2b8:	e8 df d1 ff ff       	call   80949c <ip_addr_isbroadcast>
  80c2bd:	84 c0                	test   %al,%al
  80c2bf:	0f 85 89 00 00 00    	jne    80c34e <udp_input+0x2d6>
  80c2c5:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c2c8:	8b 5a 10             	mov    0x10(%edx),%ebx
  80c2cb:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80c2d2:	e8 c3 e7 ff ff       	call   80aa9a <ntohl>
  80c2d7:	89 c6                	mov    %eax,%esi
  80c2d9:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80c2e0:	e8 b5 e7 ff ff       	call   80aa9a <ntohl>
  80c2e5:	89 f2                	mov    %esi,%edx
  80c2e7:	21 da                	and    %ebx,%edx
  80c2e9:	39 c2                	cmp    %eax,%edx
  80c2eb:	74 61                	je     80c34e <udp_input+0x2d6>
  80c2ed:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80c2f0:	0f b7 02             	movzwl (%edx),%eax
  80c2f3:	89 04 24             	mov    %eax,(%esp)
  80c2f6:	e8 7a e5 ff ff       	call   80a875 <ntohs>
  80c2fb:	c1 e8 06             	shr    $0x6,%eax
  80c2fe:	83 e0 3c             	and    $0x3c,%eax
  80c301:	83 c0 08             	add    $0x8,%eax
  80c304:	98                   	cwtl   
  80c305:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c309:	8b 45 08             	mov    0x8(%ebp),%eax
  80c30c:	89 04 24             	mov    %eax,(%esp)
  80c30f:	e8 14 b4 ff ff       	call   807728 <pbuf_header>
  80c314:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c317:	8b 55 08             	mov    0x8(%ebp),%edx
  80c31a:	39 42 04             	cmp    %eax,0x4(%edx)
  80c31d:	74 1c                	je     80c33b <udp_input+0x2c3>
  80c31f:	c7 44 24 08 84 3b 81 	movl   $0x813b84,0x8(%esp)
  80c326:	00 
  80c327:	c7 44 24 04 25 01 00 	movl   $0x125,0x4(%esp)
  80c32e:	00 
  80c32f:	c7 04 24 70 3b 81 00 	movl   $0x813b70,(%esp)
  80c336:	e8 51 45 ff ff       	call   80088c <_panic>
  80c33b:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  80c342:	00 
  80c343:	8b 55 08             	mov    0x8(%ebp),%edx
  80c346:	89 14 24             	mov    %edx,(%esp)
  80c349:	e8 11 56 00 00       	call   81195f <icmp_dest_unreach>
  80c34e:	8b 45 08             	mov    0x8(%ebp),%eax
  80c351:	89 04 24             	mov    %eax,(%esp)
  80c354:	e8 3b b7 ff ff       	call   807a94 <pbuf_free>
  80c359:	eb 6c                	jmp    80c3c7 <udp_input+0x34f>
  80c35b:	8b 55 08             	mov    0x8(%ebp),%edx
  80c35e:	89 14 24             	mov    %edx,(%esp)
  80c361:	e8 2e b7 ff ff       	call   807a94 <pbuf_free>
  80c366:	eb 5f                	jmp    80c3c7 <udp_input+0x34f>
  80c368:	89 5d e8             	mov    %ebx,0xffffffe8(%ebp)
  80c36b:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  80c36f:	66 3b 43 14          	cmp    0x14(%ebx),%ax
  80c373:	0f 85 6b fe ff ff    	jne    80c1e4 <udp_input+0x16c>
  80c379:	e9 3d fe ff ff       	jmp    80c1bb <udp_input+0x143>
  80c37e:	8b 5d e8             	mov    0xffffffe8(%ebp),%ebx
  80c381:	85 db                	test   %ebx,%ebx
  80c383:	0f 85 8b fe ff ff    	jne    80c214 <udp_input+0x19c>
  80c389:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80c390:	e9 63 fe ff ff       	jmp    80c1f8 <udp_input+0x180>
  80c395:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  80c399:	89 44 24 10          	mov    %eax,0x10(%esp)
  80c39d:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c3a0:	83 c0 0c             	add    $0xc,%eax
  80c3a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80c3a7:	8b 45 08             	mov    0x8(%ebp),%eax
  80c3aa:	89 44 24 08          	mov    %eax,0x8(%esp)
  80c3ae:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80c3b2:	8b 43 1c             	mov    0x1c(%ebx),%eax
  80c3b5:	89 04 24             	mov    %eax,(%esp)
  80c3b8:	ff d2                	call   *%edx
  80c3ba:	eb 0b                	jmp    80c3c7 <udp_input+0x34f>
  80c3bc:	8b 55 08             	mov    0x8(%ebp),%edx
  80c3bf:	89 14 24             	mov    %edx,(%esp)
  80c3c2:	e8 cd b6 ff ff       	call   807a94 <pbuf_free>
  80c3c7:	83 c4 2c             	add    $0x2c,%esp
  80c3ca:	5b                   	pop    %ebx
  80c3cb:	5e                   	pop    %esi
  80c3cc:	5f                   	pop    %edi
  80c3cd:	5d                   	pop    %ebp
  80c3ce:	c3                   	ret    
	...

0080c3d0 <etharp_send_ip>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  80c3d0:	55                   	push   %ebp
  80c3d1:	89 e5                	mov    %esp,%ebp
  80c3d3:	57                   	push   %edi
  80c3d4:	56                   	push   %esi
  80c3d5:	53                   	push   %ebx
  80c3d6:	83 ec 1c             	sub    $0x1c,%esp
  80c3d9:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80c3dc:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80c3df:	89 ce                	mov    %ecx,%esi
  80c3e1:	8b 7d 08             	mov    0x8(%ebp),%edi
  struct eth_hdr *ethhdr = p->payload;
  80c3e4:	8b 5a 04             	mov    0x4(%edx),%ebx
  u8_t k;

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
  80c3e7:	b9 06 00 00 00       	mov    $0x6,%ecx
  80c3ec:	80 78 24 06          	cmpb   $0x6,0x24(%eax)
  80c3f0:	74 1c                	je     80c40e <etharp_send_ip+0x3e>
  80c3f2:	c7 44 24 08 c8 3b 81 	movl   $0x813bc8,0x8(%esp)
  80c3f9:	00 
  80c3fa:	c7 44 24 04 b3 01 00 	movl   $0x1b3,0x4(%esp)
  80c401:	00 
  80c402:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c409:	e8 7e 44 ff ff       	call   80088c <_panic>
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  k = ETHARP_HWADDR_LEN;
  while(k > 0) {
    k--;
  80c40e:	83 e9 01             	sub    $0x1,%ecx
    ethhdr->dest.addr[k] = dst->addr[k];
  80c411:	0f b6 c1             	movzbl %cl,%eax
  80c414:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  80c418:	88 14 03             	mov    %dl,(%ebx,%eax,1)
    ethhdr->src.addr[k]  = src->addr[k];
  80c41b:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
  80c41f:	88 54 03 06          	mov    %dl,0x6(%ebx,%eax,1)
  80c423:	84 c9                	test   %cl,%cl
  80c425:	75 e7                	jne    80c40e <etharp_send_ip+0x3e>
  }
  ethhdr->type = htons(ETHTYPE_IP);
  80c427:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80c42e:	e8 2c e4 ff ff       	call   80a85f <htons>
  80c433:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  80c437:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80c43a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c43e:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80c441:	89 14 24             	mov    %edx,(%esp)
  80c444:	ff 52 18             	call   *0x18(%edx)
  80c447:	0f be c0             	movsbl %al,%eax
}
  80c44a:	83 c4 1c             	add    $0x1c,%esp
  80c44d:	5b                   	pop    %ebx
  80c44e:	5e                   	pop    %esi
  80c44f:	5f                   	pop    %edi
  80c450:	5d                   	pop    %ebp
  80c451:	c3                   	ret    

0080c452 <etharp_request>:

/**
 * Update (or insert) a IP/MAC address pair in the ARP cache.
 *
 * If a pending entry is resolved, any queued packets will be sent
 * at this point.
 * 
 * @param ipaddr IP address of the inserted ARP entry.
 * @param ethaddr Ethernet address of the inserted ARP entry.
 * @param flags Defines behaviour:
 * - ETHARP_TRY_HARD Allows ARP to insert this as a new item. If not specified,
 * only existing ARP entries will be updated.
 *
 * @return
 * - ERR_OK Succesfully updated ARP cache.
 * - ERR_MEM If we could not add a new ARP entry when ETHARP_TRY_HARD was set.
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 * @see pbuf_free()
 */
static err_t
update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  s8_t i;
  u8_t k;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 3, ("update_arp_entry()\n"));
  LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
                                        ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip4_addr4(ipaddr), 
                                        ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
                                        ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, flags, netif);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, flags);
#endif /* LWIP_NETIF_HWADDRHINT */
  /* bail out if no entry could be found */
  if (i < 0)
    return (err_t)i;
  
  /* mark it stable */
  arp_table[i].state = ETHARP_STATE_STABLE;
  /* record network interface */
  arp_table[i].netif = netif;

  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  k = ETHARP_HWADDR_LEN;
  while (k > 0) {
    k--;
    arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
  }
  /* reset time stamp */
  arp_table[i].ctime = 0;
#if ARP_QUEUEING
  /* this is where we will send out queued packets! */
  while (arp_table[i].q != NULL) {
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
    /* pop first item off the queue */
    arp_table[i].q = q->next;
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
    /* free the queued IP packet */
    pbuf_free(p);
  }
#endif
  return ERR_OK;
}

/**
 * Finds (stable) ethernet/IP address pair from ARP table
 * using interface and IP address index.
 * @note the addresses in the ARP table are in network order!
 *
 * @param netif points to interface index
 * @param ipaddr points to the (network order) IP address index
 * @param eth_ret points to return pointer
 * @param ip_ret points to return pointer
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, struct ip_addr *ipaddr,
         struct eth_addr **eth_ret, struct ip_addr **ip_ret)
{
  s8_t i;

  LWIP_UNUSED_ARG(netif);

#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, ETHARP_FIND_ONLY, NULL);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, ETHARP_FIND_ONLY);
#endif /* LWIP_NETIF_HWADDRHINT */
  if((i >= 0) && arp_table[i].state == ETHARP_STATE_STABLE) {
      *eth_ret = &arp_table[i].ethaddr;
      *ip_ret = &arp_table[i].ipaddr;
      return i;
  }
  return -1;
}

/**
 * Updates the ARP table using the given IP packet.
 *
 * Uses the incoming IP packet's source address to update the
 * ARP cache for the local network. The function does not alter
 * or free the packet. This function must be called before the
 * packet p is passed to the IP layer.
 *
 * @param netif The lwIP network interface on which the IP packet pbuf arrived.
 * @param p The IP packet that arrived on netif.
 *
 * @return NULL
 *
 * @see pbuf_free()
 */
void
etharp_ip_input(struct netif *netif, struct pbuf *p)
{
  struct ethip_hdr *hdr;
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  /* Only insert an entry if the source IP address of the
     incoming IP packet comes from a host on the local network. */
  hdr = p->payload;
  /* source is not on the local network? */
  if (!ip_addr_netcmp(&(hdr->ip.src), &(netif->ip_addr), &(netif->netmask))) {
    /* do nothing */
    return;
  }

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update ARP table */
  /* @todo We could use ETHARP_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  update_arp_entry(netif, &(hdr->ip.src), &(hdr->eth.src), 0);
}


/**
 * Responds to ARP requests to us. Upon ARP replies to us, add entry to cache  
 * send out queued IP packets. Updates cache with snooped address pairs.
 *
 * Should be called for incoming ARP packets. The pbuf in the argument
 * is freed by this function.
 *
 * @param netif The lwIP network interface on which the ARP packet pbuf arrived.
 * @param ethaddr Ethernet address of netif.
 * @param p The ARP packet that arrived on netif. Is freed by this function.
 *
 * @return NULL
 *
 * @see pbuf_free()
 */
void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  struct ip_addr sipaddr, dipaddr;
  u8_t i;
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  
  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < sizeof(struct etharp_hdr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 1, ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len, (s16_t)sizeof(struct etharp_hdr)));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
    return;
  }

  hdr = p->payload;

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
      (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
      (hdr->proto != htons(ETHTYPE_IP)) ||
      (hdr->ethhdr.type != htons(ETHTYPE_ARP)))  {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 1,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, ARPH_HWLEN(hdr), hdr->proto, ARPH_PROTOLEN(hdr), hdr->ethhdr.type));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
    return;
  }
  ETHARP_STATS_INC(etharp.recv);

#if LWIP_AUTOIP
  /* We have to check if a host already has configured our random
   * created link local address and continously check if there is
   * a host with this IP-address so we can detect collisions */
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  SMEMCPY(&sipaddr, &hdr->sipaddr, sizeof(sipaddr));
  SMEMCPY(&dipaddr, &hdr->dipaddr, sizeof(dipaddr));

  /* this interface is not configured? */
  if (netif->ip_addr.addr == 0) {
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  }

  /* ARP message directed to us? */
  if (for_us) {
    /* add IP address in ARP cache; assume requester wants to talk to us.
     * can result in directly sending the queued packets for this host. */
    update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), ETHARP_TRY_HARD);
  /* ARP message not directed to us? */
  } else {
    /* update the source IP address in the cache, if present */
    update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), 0);
  }

  /* now act on the message itself */
  switch (htons(hdr->opcode)) {
  /* ARP request? */
  case ARP_REQUEST:
    /* ARP request. If it asked for our address, we send out a
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);

      hdr->dipaddr = hdr->sipaddr;
      hdr->sipaddr = *(struct ip_addr2 *)&netif->ip_addr;

      LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
                  (netif->hwaddr_len == ETHARP_HWADDR_LEN));
      i = ETHARP_HWADDR_LEN;
#if LWIP_AUTOIP
      /* If we are using Link-Local, ARP packets must be broadcast on the
       * link layer. (See RFC3927 Section 2.5) */
      ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      while(i > 0) {
        i--;
        hdr->dhwaddr.addr[i] = hdr->shwaddr.addr[i];
#if LWIP_AUTOIP
        hdr->ethhdr.dest.addr[i] = ethdst_hwaddr[i];
#else  /* LWIP_AUTOIP */
        hdr->ethhdr.dest.addr[i] = hdr->shwaddr.addr[i];
#endif /* LWIP_AUTOIP */
        hdr->shwaddr.addr[i] = ethaddr->addr[i];
        hdr->ethhdr.src.addr[i] = ethaddr->addr[i];
      }

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
    /* we are not configured? */
    } else if (netif->ip_addr.addr == 0) {
      /* { for_us == 0 and netif->ip_addr.addr == 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: we are unconfigured, ARP request ignored.\n"));
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
  case ARP_REPLY:
    /* ARP reply. We already updated the ARP cache earlier. */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP reply\n"));
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
#endif
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
}

/**
 * Resolve and fill-in Ethernet address header for outgoing IP packet.
 *
 * For IP multicast and broadcast, corresponding Ethernet addresses
 * are selected and the packet is transmitted on the link.
 *
 * For unicast addresses, the packet is submitted to etharp_query(). In
 * case the IP address is outside the local network, the IP address of
 * the gateway is used.
 *
 * @param netif The lwIP network interface which the IP packet will be sent on.
 * @param q The pbuf(s) containing the IP packet to be sent.
 * @param ipaddr The IP address of the packet destination.
 *
 * @return
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, struct ip_addr *ipaddr)
{
  struct eth_addr *dest, mcastaddr;

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 2, ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  }

  /* assume unresolved Ethernet address */
  dest = NULL;
  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = 0x01;
    mcastaddr.addr[1] = 0x00;
    mcastaddr.addr[2] = 0x5e;
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  /* unicast destination IP address? */
  } else {
    /* outside local network? */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask))) {
      /* interface has default gateway? */
      if (netif->gw.addr != 0) {
        /* send to hardware address of default gateway IP address */
        ipaddr = &(netif->gw);
      /* no default gateway available */
      } else {
        /* no route to destination error (default gateway missing) */
        return ERR_RTE;
      }
    }
    /* queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, ipaddr, q);
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}

/**
 * Send an ARP request for the given IP address and/or queue a packet.
 *
 * If the IP address was not yet in the cache, a pending ARP cache entry
 * is added and an ARP request is sent for the given address. The packet
 * is queued on this entry.
 *
 * If the IP address was already pending in the cache, a new ARP request
 * is sent for the given address. The packet is queued on this entry.
 *
 * If the IP address was already stable in the cache, and a packet is
 * given, it is directly sent and no ARP request is sent out. 
 * 
 * If the IP address was already stable in the cache, and no packet is
 * given, an ARP request is sent out.
 * 
 * @param netif The lwIP network interface on which ipaddr
 * must be queried for.
 * @param ipaddr The IP address to be resolved.
 * @param q If non-NULL, a pbuf that must be delivered to the IP address.
 * q is not freed by this function.
 *
 * @note q must only be ONE packet, not a packet queue!
 *
 * @return
 * - ERR_BUF Could not make room for Ethernet header.
 * - ERR_MEM Hardware address unknown, and no more ARP entries available
 *   to query for address or queue the packet.
 * - ERR_MEM Could not queue packet due to memory shortage.
 * - ERR_RTE No route to destination (no gateway to external networks).
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr) ||
      ip_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
#if LWIP_NETIF_HWADDRHINT
  i = find_entry(ipaddr, ETHARP_TRY_HARD, netif);
#else /* LWIP_NETIF_HWADDRHINT */
  i = find_entry(ipaddr, ETHARP_TRY_HARD);
#endif /* LWIP_NETIF_HWADDRHINT */

  /* could not find or create entry? */
  if (i < 0) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    arp_table[i].state = ETHARP_STATE_PENDING;
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state == ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
    if (result != ERR_OK) {
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
  }
  
  /* packet given? */
  if (q != NULL) {
    /* stable entry? */
    if (arp_table[i].state == ETHARP_STATE_STABLE) {
      /* we have a valid IP->Ethernet address mapping */
      /* send the packet */
      result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
    /* pending entry? (either just created or already pending */
    } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
#if ARP_QUEUEING /* queue the given q packet */
      struct pbuf *p;
      int copy_needed = 0;
      /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
       * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
       * PBUF_ROMs can be left as they are, since ROM must not get changed. */
      p = q;
      while (p) {
        LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
        if(p->type != PBUF_ROM) {
          copy_needed = 1;
          break;
        }
        p = p->next;
      }
      if(copy_needed) {
        /* copy the whole packet into new pbufs */
        p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
        if(p != NULL) {
          if (pbuf_copy(p, q) != ERR_OK) {
            pbuf_free(p);
            p = NULL;
          }
        }
      } else {
        /* referencing the old pbuf is enough */
        p = q;
        pbuf_ref(p);
      }
      /* packet could be taken over? */
      if (p != NULL) {
        /* queue packet ... */
        struct etharp_q_entry *new_entry;
        /* allocate a new arp queue entry */
        new_entry = memp_malloc(MEMP_ARP_QUEUE);
        if (new_entry != NULL) {
          new_entry->next = 0;
          new_entry->p = p;
          if(arp_table[i].q != NULL) {
            /* queue was already existent, append the new entry to the end */
            struct etharp_q_entry *r;
            r = arp_table[i].q;
            while (r->next != NULL) {
              r = r->next;
            }
            r->next = new_entry;
          } else {
            /* queue did not exist, first item in queue */
            arp_table[i].q = new_entry;
          }
          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
          result = ERR_OK;
        } else {
          /* the pool MEMP_ARP_QUEUE is empty */
          pbuf_free(p);
          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
          /* { result == ERR_MEM } through initialization */
        }
      } else {
        ETHARP_STATS_INC(etharp.memerr);
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        /* { result == ERR_MEM } through initialization */
      }
#else /* ARP_QUEUEING == 0 */
      /* q && state == PENDING && ARP_QUEUEING == 0 => result = ERR_MEM */
      /* { result == ERR_MEM } through initialization */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: Ethernet destination address unknown, queueing disabled, packet %p dropped\n", (void *)q));
#endif
    }
  }
  return result;
}

/**
 * Send a raw ARP packet (opcode and all addresses can be modified)
 *
 * @param netif the lwip network interface on which to send the ARP packet
 * @param ethsrc_addr the source MAC address for the ethernet header
 * @param ethdst_addr the destination MAC address for the ethernet header
 * @param hwsrc_addr the source MAC address for the ARP protocol header
 * @param ipsrc_addr the source IP address for the ARP protocol header
 * @param hwdst_addr the destination MAC address for the ARP protocol header
 * @param ipdst_addr the destination IP address for the ARP protocol header
 * @param opcode the type of the ARP packet
 * @return ERR_OK if the ARP packet has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
#if !LWIP_AUTOIP
static
#endif /* LWIP_AUTOIP */
err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const struct ip_addr *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const struct ip_addr *ipdst_addr,
           const u16_t opcode)
{
  struct pbuf *p;
  err_t result = ERR_OK;
  u8_t k; /* ARP entry index */
  struct etharp_hdr *hdr;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, sizeof(struct etharp_hdr), PBUF_RAM);
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | 2, ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= sizeof(struct etharp_hdr)));

  hdr = p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  k = ETHARP_HWADDR_LEN;
#if LWIP_AUTOIP
  /* If we are using Link-Local, ARP packets must be broadcast on the
   * link layer. (See RFC3927 Section 2.5) */
  ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write MAC-Addresses (combined loop for both headers) */
  while(k > 0) {
    k--;
    /* Write the ARP MAC-Addresses */
    hdr->shwaddr.addr[k] = hwsrc_addr->addr[k];
    hdr->dhwaddr.addr[k] = hwdst_addr->addr[k];
    /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
    hdr->ethhdr.dest.addr[k] = ethdst_hwaddr[k];
#else  /* LWIP_AUTOIP */
    hdr->ethhdr.dest.addr[k] = ethdst_addr->addr[k];
#endif /* LWIP_AUTOIP */
    hdr->ethhdr.src.addr[k]  = ethsrc_addr->addr[k];
  }
  hdr->sipaddr = *(struct ip_addr2 *)ipsrc_addr;
  hdr->dipaddr = *(struct ip_addr2 *)ipdst_addr;

  hdr->hwtype = htons(HWTYPE_ETHERNET);
  hdr->proto = htons(ETHTYPE_IP);
  /* set hwlen and protolen together */
  hdr->_hwlen_protolen = htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr));

  hdr->ethhdr.type = htons(ETHTYPE_ARP);
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
}

/**
 * Send an ARP request packet asking for ipaddr.
 *
 * @param netif the lwip network interface on which to send the request
 * @param ipaddr the IP address for which to ask
 * @return ERR_OK if the request has been sent
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, struct ip_addr *ipaddr)
{
  80c452:	55                   	push   %ebp
  80c453:	89 e5                	mov    %esp,%ebp
  80c455:	57                   	push   %edi
  80c456:	56                   	push   %esi
  80c457:	53                   	push   %ebx
  80c458:	83 ec 1c             	sub    $0x1c,%esp
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  80c45b:	8b 75 08             	mov    0x8(%ebp),%esi
  80c45e:	83 c6 25             	add    $0x25,%esi
  80c461:	89 f7                	mov    %esi,%edi
  80c463:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c46a:	00 
  80c46b:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  80c472:	00 
  80c473:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80c47a:	e8 d8 b8 ff ff       	call   807d57 <pbuf_alloc>
  80c47f:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80c482:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80c487:	83 7d f0 00          	cmpl   $0x0,0xfffffff0(%ebp)
  80c48b:	0f 84 1a 01 00 00    	je     80c5ab <etharp_request+0x159>
  80c491:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80c494:	66 83 78 0a 29       	cmpw   $0x29,0xa(%eax)
  80c499:	77 1c                	ja     80c4b7 <etharp_request+0x65>
  80c49b:	c7 44 24 08 0c 3c 81 	movl   $0x813c0c,0x8(%esp)
  80c4a2:	00 
  80c4a3:	c7 44 24 04 1c 04 00 	movl   $0x41c,0x4(%esp)
  80c4aa:	00 
  80c4ab:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c4b2:	e8 d5 43 ff ff       	call   80088c <_panic>
  80c4b7:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80c4ba:	8b 5a 04             	mov    0x4(%edx),%ebx
  80c4bd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80c4c4:	e8 96 e3 ff ff       	call   80a85f <htons>
  80c4c9:	66 89 43 14          	mov    %ax,0x14(%ebx)
  80c4cd:	b9 06 00 00 00       	mov    $0x6,%ecx
  80c4d2:	8b 45 08             	mov    0x8(%ebp),%eax
  80c4d5:	80 78 24 06          	cmpb   $0x6,0x24(%eax)
  80c4d9:	74 1c                	je     80c4f7 <etharp_request+0xa5>
  80c4db:	c7 44 24 08 c8 3b 81 	movl   $0x813bc8,0x8(%esp)
  80c4e2:	00 
  80c4e3:	c7 44 24 04 23 04 00 	movl   $0x423,0x4(%esp)
  80c4ea:	00 
  80c4eb:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c4f2:	e8 95 43 ff ff       	call   80088c <_panic>
  80c4f7:	83 e9 01             	sub    $0x1,%ecx
  80c4fa:	0f b6 c1             	movzbl %cl,%eax
  80c4fd:	0f b6 14 07          	movzbl (%edi,%eax,1),%edx
  80c501:	88 54 18 16          	mov    %dl,0x16(%eax,%ebx,1)
  80c505:	0f b6 90 2d 3d 81 00 	movzbl 0x813d2d(%eax),%edx
  80c50c:	88 54 18 20          	mov    %dl,0x20(%eax,%ebx,1)
  80c510:	0f b6 90 27 3d 81 00 	movzbl 0x813d27(%eax),%edx
  80c517:	88 14 03             	mov    %dl,(%ebx,%eax,1)
  80c51a:	0f b6 14 06          	movzbl (%esi,%eax,1),%edx
  80c51e:	88 54 03 06          	mov    %dl,0x6(%ebx,%eax,1)
  80c522:	84 c9                	test   %cl,%cl
  80c524:	75 d1                	jne    80c4f7 <etharp_request+0xa5>
  80c526:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80c529:	0f b7 51 04          	movzwl 0x4(%ecx),%edx
  80c52d:	0f b7 41 06          	movzwl 0x6(%ecx),%eax
  80c531:	66 89 43 1e          	mov    %ax,0x1e(%ebx)
  80c535:	66 89 53 1c          	mov    %dx,0x1c(%ebx)
  80c539:	8b 45 0c             	mov    0xc(%ebp),%eax
  80c53c:	0f b7 10             	movzwl (%eax),%edx
  80c53f:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  80c543:	66 89 43 28          	mov    %ax,0x28(%ebx)
  80c547:	66 89 53 26          	mov    %dx,0x26(%ebx)
  80c54b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80c552:	e8 08 e3 ff ff       	call   80a85f <htons>
  80c557:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  80c55b:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80c562:	e8 f8 e2 ff ff       	call   80a85f <htons>
  80c567:	66 89 43 10          	mov    %ax,0x10(%ebx)
  80c56b:	c7 04 24 04 06 00 00 	movl   $0x604,(%esp)
  80c572:	e8 e8 e2 ff ff       	call   80a85f <htons>
  80c577:	66 89 43 12          	mov    %ax,0x12(%ebx)
  80c57b:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
  80c582:	e8 d8 e2 ff ff       	call   80a85f <htons>
  80c587:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  80c58b:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80c58e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c592:	8b 55 08             	mov    0x8(%ebp),%edx
  80c595:	89 14 24             	mov    %edx,(%esp)
  80c598:	ff 52 18             	call   *0x18(%edx)
  80c59b:	89 c3                	mov    %eax,%ebx
  80c59d:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  80c5a0:	89 0c 24             	mov    %ecx,(%esp)
  80c5a3:	e8 ec b4 ff ff       	call   807a94 <pbuf_free>
  80c5a8:	0f be c3             	movsbl %bl,%eax
  80c5ab:	0f be c0             	movsbl %al,%eax
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
  80c5ae:	83 c4 1c             	add    $0x1c,%esp
  80c5b1:	5b                   	pop    %ebx
  80c5b2:	5e                   	pop    %esi
  80c5b3:	5f                   	pop    %edi
  80c5b4:	5d                   	pop    %ebp
  80c5b5:	c3                   	ret    

0080c5b6 <free_etharp_q>:
  80c5b6:	55                   	push   %ebp
  80c5b7:	89 e5                	mov    %esp,%ebp
  80c5b9:	56                   	push   %esi
  80c5ba:	53                   	push   %ebx
  80c5bb:	83 ec 10             	sub    $0x10,%esp
  80c5be:	89 c6                	mov    %eax,%esi
  80c5c0:	85 c0                	test   %eax,%eax
  80c5c2:	75 1c                	jne    80c5e0 <free_etharp_q+0x2a>
  80c5c4:	c7 44 24 08 7d 34 81 	movl   $0x81347d,0x8(%esp)
  80c5cb:	00 
  80c5cc:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
  80c5d3:	00 
  80c5d4:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c5db:	e8 ac 42 ff ff       	call   80088c <_panic>
  80c5e0:	8b 40 04             	mov    0x4(%eax),%eax
  80c5e3:	85 c0                	test   %eax,%eax
  80c5e5:	75 63                	jne    80c64a <free_etharp_q+0x94>
  80c5e7:	c7 44 24 08 c9 3c 81 	movl   $0x813cc9,0x8(%esp)
  80c5ee:	00 
  80c5ef:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
  80c5f6:	00 
  80c5f7:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c5fe:	e8 89 42 ff ff       	call   80088c <_panic>
  80c603:	8b 13                	mov    (%ebx),%edx
  80c605:	8b 43 04             	mov    0x4(%ebx),%eax
  80c608:	85 c0                	test   %eax,%eax
  80c60a:	75 1c                	jne    80c628 <free_etharp_q+0x72>
  80c60c:	c7 44 24 08 d6 3c 81 	movl   $0x813cd6,0x8(%esp)
  80c613:	00 
  80c614:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80c61b:	00 
  80c61c:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c623:	e8 64 42 ff ff       	call   80088c <_panic>
  80c628:	89 de                	mov    %ebx,%esi
  80c62a:	89 d3                	mov    %edx,%ebx
  80c62c:	89 04 24             	mov    %eax,(%esp)
  80c62f:	e8 60 b4 ff ff       	call   807a94 <pbuf_free>
  80c634:	89 74 24 04          	mov    %esi,0x4(%esp)
  80c638:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  80c63f:	e8 d8 ac ff ff       	call   80731c <memp_free>
  80c644:	85 db                	test   %ebx,%ebx
  80c646:	75 bb                	jne    80c603 <free_etharp_q+0x4d>
  80c648:	eb 08                	jmp    80c652 <free_etharp_q+0x9c>
  80c64a:	8b 1e                	mov    (%esi),%ebx
  80c64c:	8d 74 26 00          	lea    0x0(%esi),%esi
  80c650:	eb da                	jmp    80c62c <free_etharp_q+0x76>
  80c652:	83 c4 10             	add    $0x10,%esp
  80c655:	5b                   	pop    %ebx
  80c656:	5e                   	pop    %esi
  80c657:	5d                   	pop    %ebp
  80c658:	c3                   	ret    

0080c659 <find_entry>:
  80c659:	55                   	push   %ebp
  80c65a:	89 e5                	mov    %esp,%ebp
  80c65c:	57                   	push   %edi
  80c65d:	56                   	push   %esi
  80c65e:	53                   	push   %ebx
  80c65f:	83 ec 1c             	sub    $0x1c,%esp
  80c662:	89 c7                	mov    %eax,%edi
  80c664:	88 55 ec             	mov    %dl,0xffffffec(%ebp)
  80c667:	85 c0                	test   %eax,%eax
  80c669:	74 27                	je     80c692 <find_entry+0x39>
  80c66b:	0f b6 0d b8 7e b3 00 	movzbl 0xb37eb8,%ecx
  80c672:	0f b6 c1             	movzbl %cl,%eax
  80c675:	6b d8 1c             	imul   $0x1c,%eax,%ebx
  80c678:	83 bb b0 7d b3 00 02 	cmpl   $0x2,0xb37db0(%ebx)
  80c67f:	75 11                	jne    80c692 <find_entry+0x39>
  80c681:	8b 07                	mov    (%edi),%eax
  80c683:	0f be c9             	movsbl %cl,%ecx
  80c686:	3b 83 a4 7d b3 00    	cmp    0xb37da4(%ebx),%eax
  80c68c:	0f 84 c5 01 00 00    	je     80c857 <find_entry+0x1fe>
  80c692:	c6 45 ed 0a          	movb   $0xa,0xffffffed(%ebp)
  80c696:	c6 45 ee 0a          	movb   $0xa,0xffffffee(%ebp)
  80c69a:	c6 45 ef 0a          	movb   $0xa,0xffffffef(%ebp)
  80c69e:	c6 45 f0 00          	movb   $0x0,0xfffffff0(%ebp)
  80c6a2:	c6 45 f1 00          	movb   $0x0,0xfffffff1(%ebp)
  80c6a6:	c6 45 f2 0a          	movb   $0xa,0xfffffff2(%ebp)
  80c6aa:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  80c6ae:	be 00 00 00 00       	mov    $0x0,%esi
  80c6b3:	b9 00 00 00 00       	mov    $0x0,%ecx
  80c6b8:	89 f3                	mov    %esi,%ebx
  80c6ba:	80 7d ef 0a          	cmpb   $0xa,0xffffffef(%ebp)
  80c6be:	75 0e                	jne    80c6ce <find_entry+0x75>
  80c6c0:	83 b9 b0 7d b3 00 00 	cmpl   $0x0,0xb37db0(%ecx)
  80c6c7:	75 05                	jne    80c6ce <find_entry+0x75>
  80c6c9:	88 5d ef             	mov    %bl,0xffffffef(%ebp)
  80c6cc:	eb 77                	jmp    80c745 <find_entry+0xec>
  80c6ce:	8b 81 b0 7d b3 00    	mov    0xb37db0(%ecx),%eax
  80c6d4:	83 f8 01             	cmp    $0x1,%eax
  80c6d7:	75 43                	jne    80c71c <find_entry+0xc3>
  80c6d9:	85 ff                	test   %edi,%edi
  80c6db:	74 0e                	je     80c6eb <find_entry+0x92>
  80c6dd:	8b 07                	mov    (%edi),%eax
  80c6df:	3b 81 a4 7d b3 00    	cmp    0xb37da4(%ecx),%eax
  80c6e5:	0f 84 51 01 00 00    	je     80c83c <find_entry+0x1e3>
  80c6eb:	83 b9 a0 7d b3 00 00 	cmpl   $0x0,0xb37da0(%ecx)
  80c6f2:	74 14                	je     80c708 <find_entry+0xaf>
  80c6f4:	0f b6 81 b4 7d b3 00 	movzbl 0xb37db4(%ecx),%eax
  80c6fb:	3a 45 f3             	cmp    0xfffffff3(%ebp),%al
  80c6fe:	72 45                	jb     80c745 <find_entry+0xec>
  80c700:	88 5d f2             	mov    %bl,0xfffffff2(%ebp)
  80c703:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  80c706:	eb 3d                	jmp    80c745 <find_entry+0xec>
  80c708:	0f b6 81 b4 7d b3 00 	movzbl 0xb37db4(%ecx),%eax
  80c70f:	38 45 f0             	cmp    %al,0xfffffff0(%ebp)
  80c712:	77 31                	ja     80c745 <find_entry+0xec>
  80c714:	88 5d ed             	mov    %bl,0xffffffed(%ebp)
  80c717:	88 45 f0             	mov    %al,0xfffffff0(%ebp)
  80c71a:	eb 29                	jmp    80c745 <find_entry+0xec>
  80c71c:	83 f8 02             	cmp    $0x2,%eax
  80c71f:	75 24                	jne    80c745 <find_entry+0xec>
  80c721:	85 ff                	test   %edi,%edi
  80c723:	74 0e                	je     80c733 <find_entry+0xda>
  80c725:	8b 07                	mov    (%edi),%eax
  80c727:	3b 81 a4 7d b3 00    	cmp    0xb37da4(%ecx),%eax
  80c72d:	0f 84 14 01 00 00    	je     80c847 <find_entry+0x1ee>
  80c733:	0f b6 81 b4 7d b3 00 	movzbl 0xb37db4(%ecx),%eax
  80c73a:	3a 45 f1             	cmp    0xfffffff1(%ebp),%al
  80c73d:	72 06                	jb     80c745 <find_entry+0xec>
  80c73f:	88 5d ee             	mov    %bl,0xffffffee(%ebp)
  80c742:	88 45 f1             	mov    %al,0xfffffff1(%ebp)
  80c745:	83 c6 01             	add    $0x1,%esi
  80c748:	83 c1 1c             	add    $0x1c,%ecx
  80c74b:	83 fe 0a             	cmp    $0xa,%esi
  80c74e:	0f 85 64 ff ff ff    	jne    80c6b8 <find_entry+0x5f>
  80c754:	80 7d ef 0a          	cmpb   $0xa,0xffffffef(%ebp)
  80c758:	75 0a                	jne    80c764 <find_entry+0x10b>
  80c75a:	f6 45 ec 01          	testb  $0x1,0xffffffec(%ebp)
  80c75e:	0f 84 ee 00 00 00    	je     80c852 <find_entry+0x1f9>
  80c764:	f6 45 ec 02          	testb  $0x2,0xffffffec(%ebp)
  80c768:	0f 85 e4 00 00 00    	jne    80c852 <find_entry+0x1f9>
  80c76e:	0f b6 75 ef          	movzbl 0xffffffef(%ebp),%esi
  80c772:	80 7d ef 09          	cmpb   $0x9,0xffffffef(%ebp)
  80c776:	7e 6c                	jle    80c7e4 <find_entry+0x18b>
  80c778:	80 7d ee 09          	cmpb   $0x9,0xffffffee(%ebp)
  80c77c:	7f 31                	jg     80c7af <find_entry+0x156>
  80c77e:	0f b6 75 ee          	movzbl 0xffffffee(%ebp),%esi
  80c782:	89 f2                	mov    %esi,%edx
  80c784:	0f b6 c2             	movzbl %dl,%eax
  80c787:	6b c0 1c             	imul   $0x1c,%eax,%eax
  80c78a:	83 b8 a0 7d b3 00 00 	cmpl   $0x0,0xb37da0(%eax)
  80c791:	74 51                	je     80c7e4 <find_entry+0x18b>
  80c793:	c7 44 24 08 e3 3c 81 	movl   $0x813ce3,0x8(%esp)
  80c79a:	00 
  80c79b:	c7 44 24 04 75 01 00 	movl   $0x175,0x4(%esp)
  80c7a2:	00 
  80c7a3:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c7aa:	e8 dd 40 ff ff       	call   80088c <_panic>
  80c7af:	0f b6 75 ed          	movzbl 0xffffffed(%ebp),%esi
  80c7b3:	80 7d ed 09          	cmpb   $0x9,0xffffffed(%ebp)
  80c7b7:	7e 2b                	jle    80c7e4 <find_entry+0x18b>
  80c7b9:	80 7d f2 09          	cmpb   $0x9,0xfffffff2(%ebp)
  80c7bd:	0f 8f 8f 00 00 00    	jg     80c852 <find_entry+0x1f9>
  80c7c3:	0f b6 75 f2          	movzbl 0xfffffff2(%ebp),%esi
  80c7c7:	89 f0                	mov    %esi,%eax
  80c7c9:	0f b6 d8             	movzbl %al,%ebx
  80c7cc:	6b db 1c             	imul   $0x1c,%ebx,%ebx
  80c7cf:	8b 83 a0 7d b3 00    	mov    0xb37da0(%ebx),%eax
  80c7d5:	e8 dc fd ff ff       	call   80c5b6 <free_etharp_q>
  80c7da:	c7 83 a0 7d b3 00 00 	movl   $0x0,0xb37da0(%ebx)
  80c7e1:	00 00 00 
  80c7e4:	89 f2                	mov    %esi,%edx
  80c7e6:	80 fa 09             	cmp    $0x9,%dl
  80c7e9:	76 1c                	jbe    80c807 <find_entry+0x1ae>
  80c7eb:	c7 44 24 08 fa 3c 81 	movl   $0x813cfa,0x8(%esp)
  80c7f2:	00 
  80c7f3:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
  80c7fa:	00 
  80c7fb:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c802:	e8 85 40 ff ff       	call   80088c <_panic>
  80c807:	89 f0                	mov    %esi,%eax
  80c809:	0f b6 c8             	movzbl %al,%ecx
  80c80c:	6b d1 1c             	imul   $0x1c,%ecx,%edx
  80c80f:	c7 82 b0 7d b3 00 00 	movl   $0x0,0xb37db0(%edx)
  80c816:	00 00 00 
  80c819:	85 ff                	test   %edi,%edi
  80c81b:	74 08                	je     80c825 <find_entry+0x1cc>
  80c81d:	8b 07                	mov    (%edi),%eax
  80c81f:	89 82 a4 7d b3 00    	mov    %eax,0xb37da4(%edx)
  80c825:	6b c1 1c             	imul   $0x1c,%ecx,%eax
  80c828:	c6 80 b4 7d b3 00 00 	movb   $0x0,0xb37db4(%eax)
  80c82f:	89 f2                	mov    %esi,%edx
  80c831:	88 15 b8 7e b3 00    	mov    %dl,0xb37eb8
  80c837:	0f be ca             	movsbl %dl,%ecx
  80c83a:	eb 1b                	jmp    80c857 <find_entry+0x1fe>
  80c83c:	88 1d b8 7e b3 00    	mov    %bl,0xb37eb8
  80c842:	0f be cb             	movsbl %bl,%ecx
  80c845:	eb 10                	jmp    80c857 <find_entry+0x1fe>
  80c847:	88 1d b8 7e b3 00    	mov    %bl,0xb37eb8
  80c84d:	0f be cb             	movsbl %bl,%ecx
  80c850:	eb 05                	jmp    80c857 <find_entry+0x1fe>
  80c852:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  80c857:	89 c8                	mov    %ecx,%eax
  80c859:	83 c4 1c             	add    $0x1c,%esp
  80c85c:	5b                   	pop    %ebx
  80c85d:	5e                   	pop    %esi
  80c85e:	5f                   	pop    %edi
  80c85f:	5d                   	pop    %ebp
  80c860:	c3                   	ret    

0080c861 <etharp_query>:
  80c861:	55                   	push   %ebp
  80c862:	89 e5                	mov    %esp,%ebp
  80c864:	83 ec 28             	sub    $0x28,%esp
  80c867:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80c86a:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80c86d:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80c870:	8b 7d 08             	mov    0x8(%ebp),%edi
  80c873:	8b 75 0c             	mov    0xc(%ebp),%esi
  80c876:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80c87a:	89 34 24             	mov    %esi,(%esp)
  80c87d:	e8 1a cc ff ff       	call   80949c <ip_addr_isbroadcast>
  80c882:	84 c0                	test   %al,%al
  80c884:	0f 85 d1 01 00 00    	jne    80ca5b <etharp_query+0x1fa>
  80c88a:	8b 06                	mov    (%esi),%eax
  80c88c:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80c88f:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80c896:	e8 ff e1 ff ff       	call   80aa9a <ntohl>
  80c89b:	89 c3                	mov    %eax,%ebx
  80c89d:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80c8a4:	e8 f1 e1 ff ff       	call   80aa9a <ntohl>
  80c8a9:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80c8ac:	21 da                	and    %ebx,%edx
  80c8ae:	39 c2                	cmp    %eax,%edx
  80c8b0:	0f 84 a5 01 00 00    	je     80ca5b <etharp_query+0x1fa>
  80c8b6:	85 f6                	test   %esi,%esi
  80c8b8:	0f 84 9d 01 00 00    	je     80ca5b <etharp_query+0x1fa>
  80c8be:	83 3e 00             	cmpl   $0x0,(%esi)
  80c8c1:	0f 84 94 01 00 00    	je     80ca5b <etharp_query+0x1fa>
  80c8c7:	ba 01 00 00 00       	mov    $0x1,%edx
  80c8cc:	89 f0                	mov    %esi,%eax
  80c8ce:	e8 86 fd ff ff       	call   80c659 <find_entry>
  80c8d3:	89 c2                	mov    %eax,%edx
  80c8d5:	0f be c0             	movsbl %al,%eax
  80c8d8:	84 d2                	test   %dl,%dl
  80c8da:	0f 88 92 01 00 00    	js     80ca72 <etharp_query+0x211>
  80c8e0:	0f be d2             	movsbl %dl,%edx
  80c8e3:	89 55 ec             	mov    %edx,0xffffffec(%ebp)
  80c8e6:	6b c2 1c             	imul   $0x1c,%edx,%eax
  80c8e9:	05 a0 7d b3 00       	add    $0xb37da0,%eax
  80c8ee:	8b 50 10             	mov    0x10(%eax),%edx
  80c8f1:	85 d2                	test   %edx,%edx
  80c8f3:	75 09                	jne    80c8fe <etharp_query+0x9d>
  80c8f5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
  80c8fc:	eb 33                	jmp    80c931 <etharp_query+0xd0>
  80c8fe:	8d 42 ff             	lea    0xffffffff(%edx),%eax
  80c901:	83 f8 01             	cmp    $0x1,%eax
  80c904:	76 1c                	jbe    80c922 <etharp_query+0xc1>
  80c906:	c7 44 24 08 40 3c 81 	movl   $0x813c40,0x8(%esp)
  80c90d:	00 
  80c90e:	c7 44 24 04 92 03 00 	movl   $0x392,0x4(%esp)
  80c915:	00 
  80c916:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c91d:	e8 6a 3f ff ff       	call   80088c <_panic>
  80c922:	83 fa 01             	cmp    $0x1,%edx
  80c925:	74 0a                	je     80c931 <etharp_query+0xd0>
  80c927:	c6 45 f3 ff          	movb   $0xff,0xfffffff3(%ebp)
  80c92b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  80c92f:	75 0f                	jne    80c940 <etharp_query+0xdf>
  80c931:	89 74 24 04          	mov    %esi,0x4(%esp)
  80c935:	89 3c 24             	mov    %edi,(%esp)
  80c938:	e8 15 fb ff ff       	call   80c452 <etharp_request>
  80c93d:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  80c940:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  80c944:	0f 84 0b 01 00 00    	je     80ca55 <etharp_query+0x1f4>
  80c94a:	6b 45 ec 1c          	imul   $0x1c,0xffffffec(%ebp),%eax
  80c94e:	05 a0 7d b3 00       	add    $0xb37da0,%eax
  80c953:	8b 50 10             	mov    0x10(%eax),%edx
  80c956:	83 fa 02             	cmp    $0x2,%edx
  80c959:	75 1b                	jne    80c976 <etharp_query+0x115>
  80c95b:	8d 4f 25             	lea    0x25(%edi),%ecx
  80c95e:	83 c0 08             	add    $0x8,%eax
  80c961:	89 04 24             	mov    %eax,(%esp)
  80c964:	8b 55 10             	mov    0x10(%ebp),%edx
  80c967:	89 f8                	mov    %edi,%eax
  80c969:	e8 62 fa ff ff       	call   80c3d0 <etharp_send_ip>
  80c96e:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  80c971:	e9 df 00 00 00       	jmp    80ca55 <etharp_query+0x1f4>
  80c976:	83 fa 01             	cmp    $0x1,%edx
  80c979:	0f 85 d6 00 00 00    	jne    80ca55 <etharp_query+0x1f4>
  80c97f:	8b 55 10             	mov    0x10(%ebp),%edx
  80c982:	0f b7 42 08          	movzwl 0x8(%edx),%eax
  80c986:	66 39 42 0a          	cmp    %ax,0xa(%edx)
  80c98a:	75 21                	jne    80c9ad <etharp_query+0x14c>
  80c98c:	83 3a 00             	cmpl   $0x0,(%edx)
  80c98f:	74 1c                	je     80c9ad <etharp_query+0x14c>
  80c991:	c7 44 24 08 0d 3d 81 	movl   $0x813d0d,0x8(%esp)
  80c998:	00 
  80c999:	c7 44 24 04 b1 03 00 	movl   $0x3b1,0x4(%esp)
  80c9a0:	00 
  80c9a1:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80c9a8:	e8 df 3e ff ff       	call   80088c <_panic>
  80c9ad:	80 7a 0c 01          	cmpb   $0x1,0xc(%edx)
  80c9b1:	75 0f                	jne    80c9c2 <etharp_query+0x161>
  80c9b3:	8b 12                	mov    (%edx),%edx
  80c9b5:	85 d2                	test   %edx,%edx
  80c9b7:	0f 84 a5 00 00 00    	je     80ca62 <etharp_query+0x201>
  80c9bd:	8d 76 00             	lea    0x0(%esi),%esi
  80c9c0:	eb c0                	jmp    80c982 <etharp_query+0x121>
  80c9c2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80c9c9:	00 
  80c9ca:	0f b7 c0             	movzwl %ax,%eax
  80c9cd:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c9d1:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80c9d8:	e8 7a b3 ff ff       	call   807d57 <pbuf_alloc>
  80c9dd:	89 c3                	mov    %eax,%ebx
  80c9df:	85 c0                	test   %eax,%eax
  80c9e1:	74 72                	je     80ca55 <etharp_query+0x1f4>
  80c9e3:	8b 45 10             	mov    0x10(%ebp),%eax
  80c9e6:	89 44 24 04          	mov    %eax,0x4(%esp)
  80c9ea:	89 1c 24             	mov    %ebx,(%esp)
  80c9ed:	e8 fa ae ff ff       	call   8078ec <pbuf_copy>
  80c9f2:	84 c0                	test   %al,%al
  80c9f4:	74 0c                	je     80ca02 <etharp_query+0x1a1>
  80c9f6:	89 1c 24             	mov    %ebx,(%esp)
  80c9f9:	e8 96 b0 ff ff       	call   807a94 <pbuf_free>
  80c9fe:	66 90                	xchg   %ax,%ax
  80ca00:	eb 53                	jmp    80ca55 <etharp_query+0x1f4>
  80ca02:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  80ca09:	e8 51 a9 ff ff       	call   80735f <memp_malloc>
  80ca0e:	85 c0                	test   %eax,%eax
  80ca10:	74 3b                	je     80ca4d <etharp_query+0x1ec>
  80ca12:	89 c1                	mov    %eax,%ecx
  80ca14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  80ca1a:	89 58 04             	mov    %ebx,0x4(%eax)
  80ca1d:	6b 45 ec 1c          	imul   $0x1c,0xffffffec(%ebp),%eax
  80ca21:	8b 80 a0 7d b3 00    	mov    0xb37da0(%eax),%eax
  80ca27:	85 c0                	test   %eax,%eax
  80ca29:	74 12                	je     80ca3d <etharp_query+0x1dc>
  80ca2b:	8b 10                	mov    (%eax),%edx
  80ca2d:	85 d2                	test   %edx,%edx
  80ca2f:	74 04                	je     80ca35 <etharp_query+0x1d4>
  80ca31:	89 d0                	mov    %edx,%eax
  80ca33:	eb f6                	jmp    80ca2b <etharp_query+0x1ca>
  80ca35:	89 08                	mov    %ecx,(%eax)
  80ca37:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  80ca3b:	eb 18                	jmp    80ca55 <etharp_query+0x1f4>
  80ca3d:	6b 45 ec 1c          	imul   $0x1c,0xffffffec(%ebp),%eax
  80ca41:	89 88 a0 7d b3 00    	mov    %ecx,0xb37da0(%eax)
  80ca47:	c6 45 f3 00          	movb   $0x0,0xfffffff3(%ebp)
  80ca4b:	eb 08                	jmp    80ca55 <etharp_query+0x1f4>
  80ca4d:	89 1c 24             	mov    %ebx,(%esp)
  80ca50:	e8 3f b0 ff ff       	call   807a94 <pbuf_free>
  80ca55:	0f be 45 f3          	movsbl 0xfffffff3(%ebp),%eax
  80ca59:	eb 17                	jmp    80ca72 <etharp_query+0x211>
  80ca5b:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80ca60:	eb 10                	jmp    80ca72 <etharp_query+0x211>
  80ca62:	8b 45 10             	mov    0x10(%ebp),%eax
  80ca65:	89 04 24             	mov    %eax,(%esp)
  80ca68:	e8 05 ac ff ff       	call   807672 <pbuf_ref>
  80ca6d:	8b 5d 10             	mov    0x10(%ebp),%ebx
  80ca70:	eb 90                	jmp    80ca02 <etharp_query+0x1a1>
  80ca72:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80ca75:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80ca78:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80ca7b:	89 ec                	mov    %ebp,%esp
  80ca7d:	5d                   	pop    %ebp
  80ca7e:	c3                   	ret    

0080ca7f <etharp_output>:
  80ca7f:	55                   	push   %ebp
  80ca80:	89 e5                	mov    %esp,%ebp
  80ca82:	83 ec 28             	sub    $0x28,%esp
  80ca85:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80ca88:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80ca8b:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80ca8e:	8b 75 10             	mov    0x10(%ebp),%esi
  80ca91:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
  80ca98:	00 
  80ca99:	8b 45 0c             	mov    0xc(%ebp),%eax
  80ca9c:	89 04 24             	mov    %eax,(%esp)
  80ca9f:	e8 84 ac ff ff       	call   807728 <pbuf_header>
  80caa4:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
  80caa9:	84 c0                	test   %al,%al
  80caab:	0f 85 d5 00 00 00    	jne    80cb86 <etharp_output+0x107>
  80cab1:	8b 55 08             	mov    0x8(%ebp),%edx
  80cab4:	89 54 24 04          	mov    %edx,0x4(%esp)
  80cab8:	89 34 24             	mov    %esi,(%esp)
  80cabb:	e8 dc c9 ff ff       	call   80949c <ip_addr_isbroadcast>
  80cac0:	ba 27 3d 81 00       	mov    $0x813d27,%edx
  80cac5:	84 c0                	test   %al,%al
  80cac7:	0f 85 a2 00 00 00    	jne    80cb6f <etharp_output+0xf0>
  80cacd:	8b 1e                	mov    (%esi),%ebx
  80cacf:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80cad6:	e8 bf df ff ff       	call   80aa9a <ntohl>
  80cadb:	89 c7                	mov    %eax,%edi
  80cadd:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80cae4:	e8 b1 df ff ff       	call   80aa9a <ntohl>
  80cae9:	89 fa                	mov    %edi,%edx
  80caeb:	21 da                	and    %ebx,%edx
  80caed:	39 c2                	cmp    %eax,%edx
  80caef:	75 41                	jne    80cb32 <etharp_output+0xb3>
  80caf1:	c6 45 ee 01          	movb   $0x1,0xffffffee(%ebp)
  80caf5:	c6 45 ef 00          	movb   $0x0,0xffffffef(%ebp)
  80caf9:	c6 45 f0 5e          	movb   $0x5e,0xfffffff0(%ebp)
  80cafd:	8b 06                	mov    (%esi),%eax
  80caff:	89 04 24             	mov    %eax,(%esp)
  80cb02:	e8 93 df ff ff       	call   80aa9a <ntohl>
  80cb07:	c1 e8 10             	shr    $0x10,%eax
  80cb0a:	83 e0 7f             	and    $0x7f,%eax
  80cb0d:	88 45 f1             	mov    %al,0xfffffff1(%ebp)
  80cb10:	8b 06                	mov    (%esi),%eax
  80cb12:	89 04 24             	mov    %eax,(%esp)
  80cb15:	e8 80 df ff ff       	call   80aa9a <ntohl>
  80cb1a:	c1 e8 08             	shr    $0x8,%eax
  80cb1d:	88 45 f2             	mov    %al,0xfffffff2(%ebp)
  80cb20:	8b 06                	mov    (%esi),%eax
  80cb22:	89 04 24             	mov    %eax,(%esp)
  80cb25:	e8 70 df ff ff       	call   80aa9a <ntohl>
  80cb2a:	88 45 f3             	mov    %al,0xfffffff3(%ebp)
  80cb2d:	8d 55 ee             	lea    0xffffffee(%ebp),%edx
  80cb30:	eb 3d                	jmp    80cb6f <etharp_output+0xf0>
  80cb32:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80cb35:	8b 41 08             	mov    0x8(%ecx),%eax
  80cb38:	89 c2                	mov    %eax,%edx
  80cb3a:	23 16                	and    (%esi),%edx
  80cb3c:	23 41 04             	and    0x4(%ecx),%eax
  80cb3f:	39 c2                	cmp    %eax,%edx
  80cb41:	74 11                	je     80cb54 <etharp_output+0xd5>
  80cb43:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
  80cb48:	83 79 0c 00          	cmpl   $0x0,0xc(%ecx)
  80cb4c:	74 38                	je     80cb86 <etharp_output+0x107>
  80cb4e:	8b 75 08             	mov    0x8(%ebp),%esi
  80cb51:	83 c6 0c             	add    $0xc,%esi
  80cb54:	8b 45 0c             	mov    0xc(%ebp),%eax
  80cb57:	89 44 24 08          	mov    %eax,0x8(%esp)
  80cb5b:	89 74 24 04          	mov    %esi,0x4(%esp)
  80cb5f:	8b 55 08             	mov    0x8(%ebp),%edx
  80cb62:	89 14 24             	mov    %edx,(%esp)
  80cb65:	e8 f7 fc ff ff       	call   80c861 <etharp_query>
  80cb6a:	0f be d0             	movsbl %al,%edx
  80cb6d:	eb 17                	jmp    80cb86 <etharp_output+0x107>
  80cb6f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80cb72:	83 c1 25             	add    $0x25,%ecx
  80cb75:	89 14 24             	mov    %edx,(%esp)
  80cb78:	8b 55 0c             	mov    0xc(%ebp),%edx
  80cb7b:	8b 45 08             	mov    0x8(%ebp),%eax
  80cb7e:	e8 4d f8 ff ff       	call   80c3d0 <etharp_send_ip>
  80cb83:	0f be d0             	movsbl %al,%edx
  80cb86:	89 d0                	mov    %edx,%eax
  80cb88:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80cb8b:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80cb8e:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80cb91:	89 ec                	mov    %ebp,%esp
  80cb93:	5d                   	pop    %ebp
  80cb94:	c3                   	ret    

0080cb95 <etharp_find_addr>:
  80cb95:	55                   	push   %ebp
  80cb96:	89 e5                	mov    %esp,%ebp
  80cb98:	53                   	push   %ebx
  80cb99:	83 ec 04             	sub    $0x4,%esp
  80cb9c:	ba 02 00 00 00       	mov    $0x2,%edx
  80cba1:	8b 45 0c             	mov    0xc(%ebp),%eax
  80cba4:	e8 b0 fa ff ff       	call   80c659 <find_entry>
  80cba9:	84 c0                	test   %al,%al
  80cbab:	78 24                	js     80cbd1 <etharp_find_addr+0x3c>
  80cbad:	0f be c8             	movsbl %al,%ecx
  80cbb0:	6b c1 1c             	imul   $0x1c,%ecx,%eax
  80cbb3:	8d 98 a0 7d b3 00    	lea    0xb37da0(%eax),%ebx
  80cbb9:	83 7b 10 02          	cmpl   $0x2,0x10(%ebx)
  80cbbd:	75 12                	jne    80cbd1 <etharp_find_addr+0x3c>
  80cbbf:	8d 53 08             	lea    0x8(%ebx),%edx
  80cbc2:	8b 45 10             	mov    0x10(%ebp),%eax
  80cbc5:	89 10                	mov    %edx,(%eax)
  80cbc7:	8d 53 04             	lea    0x4(%ebx),%edx
  80cbca:	8b 45 14             	mov    0x14(%ebp),%eax
  80cbcd:	89 10                	mov    %edx,(%eax)
  80cbcf:	eb 05                	jmp    80cbd6 <etharp_find_addr+0x41>
  80cbd1:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  80cbd6:	89 c8                	mov    %ecx,%eax
  80cbd8:	83 c4 04             	add    $0x4,%esp
  80cbdb:	5b                   	pop    %ebx
  80cbdc:	5d                   	pop    %ebp
  80cbdd:	c3                   	ret    

0080cbde <update_arp_entry>:
  80cbde:	55                   	push   %ebp
  80cbdf:	89 e5                	mov    %esp,%ebp
  80cbe1:	83 ec 28             	sub    $0x28,%esp
  80cbe4:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80cbe7:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80cbea:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80cbed:	89 c7                	mov    %eax,%edi
  80cbef:	89 d6                	mov    %edx,%esi
  80cbf1:	89 cb                	mov    %ecx,%ebx
  80cbf3:	0f b6 45 08          	movzbl 0x8(%ebp),%eax
  80cbf7:	88 45 eb             	mov    %al,0xffffffeb(%ebp)
  80cbfa:	80 7f 24 06          	cmpb   $0x6,0x24(%edi)
  80cbfe:	74 1c                	je     80cc1c <update_arp_entry+0x3e>
  80cc00:	c7 44 24 08 68 3c 81 	movl   $0x813c68,0x8(%esp)
  80cc07:	00 
  80cc08:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
  80cc0f:	00 
  80cc10:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80cc17:	e8 70 3c ff ff       	call   80088c <_panic>
  80cc1c:	85 d2                	test   %edx,%edx
  80cc1e:	0f 84 0c 01 00 00    	je     80cd30 <update_arp_entry+0x152>
  80cc24:	83 3a 00             	cmpl   $0x0,(%edx)
  80cc27:	0f 84 03 01 00 00    	je     80cd30 <update_arp_entry+0x152>
  80cc2d:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80cc31:	89 14 24             	mov    %edx,(%esp)
  80cc34:	e8 63 c8 ff ff       	call   80949c <ip_addr_isbroadcast>
  80cc39:	84 c0                	test   %al,%al
  80cc3b:	0f 85 ef 00 00 00    	jne    80cd30 <update_arp_entry+0x152>
  80cc41:	8b 0e                	mov    (%esi),%ecx
  80cc43:	89 4d f0             	mov    %ecx,0xfffffff0(%ebp)
  80cc46:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  80cc4d:	e8 48 de ff ff       	call   80aa9a <ntohl>
  80cc52:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80cc55:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  80cc5c:	e8 39 de ff ff       	call   80aa9a <ntohl>
  80cc61:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  80cc64:	23 55 f0             	and    0xfffffff0(%ebp),%edx
  80cc67:	39 c2                	cmp    %eax,%edx
  80cc69:	0f 84 c1 00 00 00    	je     80cd30 <update_arp_entry+0x152>
  80cc6f:	0f b6 55 eb          	movzbl 0xffffffeb(%ebp),%edx
  80cc73:	89 f0                	mov    %esi,%eax
  80cc75:	e8 df f9 ff ff       	call   80c659 <find_entry>
  80cc7a:	89 c2                	mov    %eax,%edx
  80cc7c:	0f be c0             	movsbl %al,%eax
  80cc7f:	84 d2                	test   %dl,%dl
  80cc81:	0f 88 b5 00 00 00    	js     80cd3c <update_arp_entry+0x15e>
  80cc87:	0f be ca             	movsbl %dl,%ecx
  80cc8a:	6b c1 1c             	imul   $0x1c,%ecx,%eax
  80cc8d:	c7 80 b0 7d b3 00 02 	movl   $0x2,0xb37db0(%eax)
  80cc94:	00 00 00 
  80cc97:	89 b8 b8 7d b3 00    	mov    %edi,0xb37db8(%eax)
  80cc9d:	0f b6 53 05          	movzbl 0x5(%ebx),%edx
  80cca1:	88 90 ad 7d b3 00    	mov    %dl,0xb37dad(%eax)
  80cca7:	0f b6 53 04          	movzbl 0x4(%ebx),%edx
  80ccab:	88 90 ac 7d b3 00    	mov    %dl,0xb37dac(%eax)
  80ccb1:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
  80ccb5:	88 90 ab 7d b3 00    	mov    %dl,0xb37dab(%eax)
  80ccbb:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
  80ccbf:	88 90 aa 7d b3 00    	mov    %dl,0xb37daa(%eax)
  80ccc5:	0f b6 53 01          	movzbl 0x1(%ebx),%edx
  80ccc9:	88 90 a9 7d b3 00    	mov    %dl,0xb37da9(%eax)
  80cccf:	0f b6 13             	movzbl (%ebx),%edx
  80ccd2:	88 90 a8 7d b3 00    	mov    %dl,0xb37da8(%eax)
  80ccd8:	c6 80 b4 7d b3 00 00 	movb   $0x0,0xb37db4(%eax)
  80ccdf:	8b 90 a0 7d b3 00    	mov    0xb37da0(%eax),%edx
  80cce5:	85 d2                	test   %edx,%edx
  80cce7:	74 4e                	je     80cd37 <update_arp_entry+0x159>
  80cce9:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  80ccec:	8b 02                	mov    (%edx),%eax
  80ccee:	8b 4d e4             	mov    0xffffffe4(%ebp),%ecx
  80ccf1:	89 81 a0 7d b3 00    	mov    %eax,0xb37da0(%ecx)
  80ccf7:	8b 72 04             	mov    0x4(%edx),%esi
  80ccfa:	89 54 24 04          	mov    %edx,0x4(%esp)
  80ccfe:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
  80cd05:	e8 12 a6 ff ff       	call   80731c <memp_free>
  80cd0a:	8d 4f 25             	lea    0x25(%edi),%ecx
  80cd0d:	89 1c 24             	mov    %ebx,(%esp)
  80cd10:	89 f2                	mov    %esi,%edx
  80cd12:	89 f8                	mov    %edi,%eax
  80cd14:	e8 b7 f6 ff ff       	call   80c3d0 <etharp_send_ip>
  80cd19:	89 34 24             	mov    %esi,(%esp)
  80cd1c:	e8 73 ad ff ff       	call   807a94 <pbuf_free>
  80cd21:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80cd24:	8b 90 a0 7d b3 00    	mov    0xb37da0(%eax),%edx
  80cd2a:	85 d2                	test   %edx,%edx
  80cd2c:	74 09                	je     80cd37 <update_arp_entry+0x159>
  80cd2e:	eb bc                	jmp    80ccec <update_arp_entry+0x10e>
  80cd30:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
  80cd35:	eb 05                	jmp    80cd3c <update_arp_entry+0x15e>
  80cd37:	b8 00 00 00 00       	mov    $0x0,%eax
  80cd3c:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80cd3f:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80cd42:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80cd45:	89 ec                	mov    %ebp,%esp
  80cd47:	5d                   	pop    %ebp
  80cd48:	c3                   	ret    

0080cd49 <etharp_ip_input>:
  80cd49:	55                   	push   %ebp
  80cd4a:	89 e5                	mov    %esp,%ebp
  80cd4c:	83 ec 18             	sub    $0x18,%esp
  80cd4f:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80cd52:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80cd55:	8b 75 08             	mov    0x8(%ebp),%esi
  80cd58:	85 f6                	test   %esi,%esi
  80cd5a:	75 1c                	jne    80cd78 <etharp_ip_input+0x2f>
  80cd5c:	c7 44 24 08 db 2e 81 	movl   $0x812edb,0x8(%esp)
  80cd63:	00 
  80cd64:	c7 44 24 04 48 02 00 	movl   $0x248,0x4(%esp)
  80cd6b:	00 
  80cd6c:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80cd73:	e8 14 3b ff ff       	call   80088c <_panic>
  80cd78:	8b 45 0c             	mov    0xc(%ebp),%eax
  80cd7b:	8b 58 04             	mov    0x4(%eax),%ebx
  80cd7e:	8b 46 08             	mov    0x8(%esi),%eax
  80cd81:	89 c2                	mov    %eax,%edx
  80cd83:	23 53 1c             	and    0x1c(%ebx),%edx
  80cd86:	23 46 04             	and    0x4(%esi),%eax
  80cd89:	39 c2                	cmp    %eax,%edx
  80cd8b:	75 14                	jne    80cda1 <etharp_ip_input+0x58>
  80cd8d:	8d 4b 06             	lea    0x6(%ebx),%ecx
  80cd90:	8d 53 1c             	lea    0x1c(%ebx),%edx
  80cd93:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80cd9a:	89 f0                	mov    %esi,%eax
  80cd9c:	e8 3d fe ff ff       	call   80cbde <update_arp_entry>
  80cda1:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80cda4:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80cda7:	89 ec                	mov    %ebp,%esp
  80cda9:	5d                   	pop    %ebp
  80cdaa:	c3                   	ret    

0080cdab <etharp_tmr>:
  80cdab:	55                   	push   %ebp
  80cdac:	89 e5                	mov    %esp,%ebp
  80cdae:	56                   	push   %esi
  80cdaf:	53                   	push   %ebx
  80cdb0:	bb 00 00 00 00       	mov    $0x0,%ebx
  80cdb5:	0f b6 93 b4 7d b3 00 	movzbl 0xb37db4(%ebx),%edx
  80cdbc:	83 c2 01             	add    $0x1,%edx
  80cdbf:	88 93 b4 7d b3 00    	mov    %dl,0xb37db4(%ebx)
  80cdc5:	89 de                	mov    %ebx,%esi
  80cdc7:	8b 83 b0 7d b3 00    	mov    0xb37db0(%ebx),%eax
  80cdcd:	83 f8 02             	cmp    $0x2,%eax
  80cdd0:	75 07                	jne    80cdd9 <etharp_tmr+0x2e>
  80cdd2:	80 fa ef             	cmp    $0xef,%dl
  80cdd5:	77 10                	ja     80cde7 <etharp_tmr+0x3c>
  80cdd7:	eb 31                	jmp    80ce0a <etharp_tmr+0x5f>
  80cdd9:	83 f8 01             	cmp    $0x1,%eax
  80cddc:	8d 74 26 00          	lea    0x0(%esi),%esi
  80cde0:	75 28                	jne    80ce0a <etharp_tmr+0x5f>
  80cde2:	80 fa 01             	cmp    $0x1,%dl
  80cde5:	76 23                	jbe    80ce0a <etharp_tmr+0x5f>
  80cde7:	8b 83 a0 7d b3 00    	mov    0xb37da0(%ebx),%eax
  80cded:	85 c0                	test   %eax,%eax
  80cdef:	74 0f                	je     80ce00 <etharp_tmr+0x55>
  80cdf1:	e8 c0 f7 ff ff       	call   80c5b6 <free_etharp_q>
  80cdf6:	c7 83 a0 7d b3 00 00 	movl   $0x0,0xb37da0(%ebx)
  80cdfd:	00 00 00 
  80ce00:	c7 86 b0 7d b3 00 00 	movl   $0x0,0xb37db0(%esi)
  80ce07:	00 00 00 
  80ce0a:	83 c3 1c             	add    $0x1c,%ebx
  80ce0d:	81 fb 18 01 00 00    	cmp    $0x118,%ebx
  80ce13:	75 a0                	jne    80cdb5 <etharp_tmr+0xa>
  80ce15:	5b                   	pop    %ebx
  80ce16:	5e                   	pop    %esi
  80ce17:	5d                   	pop    %ebp
  80ce18:	c3                   	ret    

0080ce19 <etharp_arp_input>:
  80ce19:	55                   	push   %ebp
  80ce1a:	89 e5                	mov    %esp,%ebp
  80ce1c:	83 ec 28             	sub    $0x28,%esp
  80ce1f:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80ce22:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80ce25:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80ce28:	8b 7d 10             	mov    0x10(%ebp),%edi
  80ce2b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  80ce2f:	75 1c                	jne    80ce4d <etharp_arp_input+0x34>
  80ce31:	c7 44 24 08 db 2e 81 	movl   $0x812edb,0x8(%esp)
  80ce38:	00 
  80ce39:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
  80ce40:	00 
  80ce41:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80ce48:	e8 3f 3a ff ff       	call   80088c <_panic>
  80ce4d:	66 83 7f 0a 29       	cmpw   $0x29,0xa(%edi)
  80ce52:	77 11                	ja     80ce65 <etharp_arp_input+0x4c>
  80ce54:	89 3c 24             	mov    %edi,(%esp)
  80ce57:	e8 38 ac ff ff       	call   807a94 <pbuf_free>
  80ce5c:	8d 74 26 00          	lea    0x0(%esi),%esi
  80ce60:	e9 b7 01 00 00       	jmp    80d01c <etharp_arp_input+0x203>
  80ce65:	8b 77 04             	mov    0x4(%edi),%esi
  80ce68:	0f b7 5e 0e          	movzwl 0xe(%esi),%ebx
  80ce6c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80ce73:	e8 e7 d9 ff ff       	call   80a85f <htons>
  80ce78:	66 39 c3             	cmp    %ax,%bx
  80ce7b:	75 3f                	jne    80cebc <etharp_arp_input+0xa3>
  80ce7d:	0f b7 5e 12          	movzwl 0x12(%esi),%ebx
  80ce81:	c7 04 24 04 06 00 00 	movl   $0x604,(%esp)
  80ce88:	e8 d2 d9 ff ff       	call   80a85f <htons>
  80ce8d:	66 39 c3             	cmp    %ax,%bx
  80ce90:	75 2a                	jne    80cebc <etharp_arp_input+0xa3>
  80ce92:	0f b7 5e 10          	movzwl 0x10(%esi),%ebx
  80ce96:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  80ce9d:	e8 bd d9 ff ff       	call   80a85f <htons>
  80cea2:	66 39 c3             	cmp    %ax,%bx
  80cea5:	75 15                	jne    80cebc <etharp_arp_input+0xa3>
  80cea7:	0f b7 5e 0c          	movzwl 0xc(%esi),%ebx
  80ceab:	c7 04 24 06 08 00 00 	movl   $0x806,(%esp)
  80ceb2:	e8 a8 d9 ff ff       	call   80a85f <htons>
  80ceb7:	66 39 c3             	cmp    %ax,%bx
  80ceba:	74 0d                	je     80cec9 <etharp_arp_input+0xb0>
  80cebc:	89 3c 24             	mov    %edi,(%esp)
  80cebf:	e8 d0 ab ff ff       	call   807a94 <pbuf_free>
  80cec4:	e9 53 01 00 00       	jmp    80d01c <etharp_arp_input+0x203>
  80cec9:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80ced0:	00 
  80ced1:	8d 46 1c             	lea    0x1c(%esi),%eax
  80ced4:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ced8:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80cedb:	89 04 24             	mov    %eax,(%esp)
  80cede:	e8 85 43 ff ff       	call   801268 <memcpy>
  80cee3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80ceea:	00 
  80ceeb:	8d 46 26             	lea    0x26(%esi),%eax
  80ceee:	89 44 24 04          	mov    %eax,0x4(%esp)
  80cef2:	8d 45 ec             	lea    0xffffffec(%ebp),%eax
  80cef5:	89 04 24             	mov    %eax,(%esp)
  80cef8:	e8 6b 43 ff ff       	call   801268 <memcpy>
  80cefd:	8b 55 08             	mov    0x8(%ebp),%edx
  80cf00:	8b 42 04             	mov    0x4(%edx),%eax
  80cf03:	bb 00 00 00 00       	mov    $0x0,%ebx
  80cf08:	85 c0                	test   %eax,%eax
  80cf0a:	74 21                	je     80cf2d <etharp_arp_input+0x114>
  80cf0c:	3b 45 ec             	cmp    0xffffffec(%ebp),%eax
  80cf0f:	0f 94 c3             	sete   %bl
  80cf12:	84 db                	test   %bl,%bl
  80cf14:	74 17                	je     80cf2d <etharp_arp_input+0x114>
  80cf16:	8d 4e 16             	lea    0x16(%esi),%ecx
  80cf19:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  80cf20:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  80cf23:	8b 45 08             	mov    0x8(%ebp),%eax
  80cf26:	e8 b3 fc ff ff       	call   80cbde <update_arp_entry>
  80cf2b:	eb 15                	jmp    80cf42 <etharp_arp_input+0x129>
  80cf2d:	8d 4e 16             	lea    0x16(%esi),%ecx
  80cf30:	8d 55 f0             	lea    0xfffffff0(%ebp),%edx
  80cf33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80cf3a:	8b 45 08             	mov    0x8(%ebp),%eax
  80cf3d:	e8 9c fc ff ff       	call   80cbde <update_arp_entry>
  80cf42:	0f b7 46 14          	movzwl 0x14(%esi),%eax
  80cf46:	89 04 24             	mov    %eax,(%esp)
  80cf49:	e8 11 d9 ff ff       	call   80a85f <htons>
  80cf4e:	66 83 f8 01          	cmp    $0x1,%ax
  80cf52:	74 11                	je     80cf65 <etharp_arp_input+0x14c>
  80cf54:	66 83 f8 02          	cmp    $0x2,%ax
  80cf58:	0f 85 b6 00 00 00    	jne    80d014 <etharp_arp_input+0x1fb>
  80cf5e:	66 90                	xchg   %ax,%ax
  80cf60:	e9 9d 00 00 00       	jmp    80d002 <etharp_arp_input+0x1e9>
  80cf65:	84 db                	test   %bl,%bl
  80cf67:	0f 84 a7 00 00 00    	je     80d014 <etharp_arp_input+0x1fb>
  80cf6d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  80cf74:	e8 e6 d8 ff ff       	call   80a85f <htons>
  80cf79:	66 89 46 14          	mov    %ax,0x14(%esi)
  80cf7d:	0f b7 56 1c          	movzwl 0x1c(%esi),%edx
  80cf81:	0f b7 46 1e          	movzwl 0x1e(%esi),%eax
  80cf85:	66 89 46 28          	mov    %ax,0x28(%esi)
  80cf89:	66 89 56 26          	mov    %dx,0x26(%esi)
  80cf8d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80cf90:	0f b7 51 04          	movzwl 0x4(%ecx),%edx
  80cf94:	0f b7 41 06          	movzwl 0x6(%ecx),%eax
  80cf98:	66 89 46 1e          	mov    %ax,0x1e(%esi)
  80cf9c:	66 89 56 1c          	mov    %dx,0x1c(%esi)
  80cfa0:	b9 06 00 00 00       	mov    $0x6,%ecx
  80cfa5:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80cfa8:	80 7b 24 06          	cmpb   $0x6,0x24(%ebx)
  80cfac:	74 1c                	je     80cfca <etharp_arp_input+0x1b1>
  80cfae:	c7 44 24 08 c8 3b 81 	movl   $0x813bc8,0x8(%esp)
  80cfb5:	00 
  80cfb6:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
  80cfbd:	00 
  80cfbe:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80cfc5:	e8 c2 38 ff ff       	call   80088c <_panic>
  80cfca:	83 e9 01             	sub    $0x1,%ecx
  80cfcd:	0f b6 c1             	movzbl %cl,%eax
  80cfd0:	0f b6 54 30 16       	movzbl 0x16(%eax,%esi,1),%edx
  80cfd5:	88 54 30 20          	mov    %dl,0x20(%eax,%esi,1)
  80cfd9:	88 14 06             	mov    %dl,(%esi,%eax,1)
  80cfdc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  80cfdf:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
  80cfe3:	88 54 30 16          	mov    %dl,0x16(%eax,%esi,1)
  80cfe7:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
  80cfeb:	88 54 06 06          	mov    %dl,0x6(%esi,%eax,1)
  80cfef:	84 c9                	test   %cl,%cl
  80cff1:	75 d7                	jne    80cfca <etharp_arp_input+0x1b1>
  80cff3:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80cff7:	8b 45 08             	mov    0x8(%ebp),%eax
  80cffa:	89 04 24             	mov    %eax,(%esp)
  80cffd:	ff 50 18             	call   *0x18(%eax)
  80d000:	eb 12                	jmp    80d014 <etharp_arp_input+0x1fb>
  80d002:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80d005:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d009:	8b 4d 08             	mov    0x8(%ebp),%ecx
  80d00c:	89 0c 24             	mov    %ecx,(%esp)
  80d00f:	e8 5c 90 ff ff       	call   806070 <dhcp_arp_reply>
  80d014:	89 3c 24             	mov    %edi,(%esp)
  80d017:	e8 78 aa ff ff       	call   807a94 <pbuf_free>
  80d01c:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80d01f:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80d022:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80d025:	89 ec                	mov    %ebp,%esp
  80d027:	5d                   	pop    %ebp
  80d028:	c3                   	ret    

0080d029 <ethernet_input>:

/**
 * Process received ethernet frames. Using this function instead of directly
 * calling ip_input and passing ARP frames through etharp in ethernetif_input,
 * the ARP cache is protected from concurrent access.
 *
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  80d029:	55                   	push   %ebp
  80d02a:	89 e5                	mov    %esp,%ebp
  80d02c:	83 ec 18             	sub    $0x18,%esp
  80d02f:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80d032:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80d035:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80d038:	8b 75 0c             	mov    0xc(%ebp),%esi
  struct eth_hdr* ethhdr;

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_input: dest:%02x:%02x:%02x:%02x:%02x:%02x, src:%02x:%02x:%02x:%02x:%02x:%02x, type:%2hx\n",
     (unsigned)ethhdr->dest.addr[0], (unsigned)ethhdr->dest.addr[1], (unsigned)ethhdr->dest.addr[2],
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  switch (htons(ethhdr->type)) {
  80d03b:	8b 43 04             	mov    0x4(%ebx),%eax
  80d03e:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80d042:	89 04 24             	mov    %eax,(%esp)
  80d045:	e8 15 d8 ff ff       	call   80a85f <htons>
  80d04a:	66 3d 00 08          	cmp    $0x800,%ax
  80d04e:	74 08                	je     80d058 <ethernet_input+0x2f>
  80d050:	66 3d 06 08          	cmp    $0x806,%ax
  80d054:	75 61                	jne    80d0b7 <ethernet_input+0x8e>
  80d056:	eb 4a                	jmp    80d0a2 <ethernet_input+0x79>
    /* IP packet? */
    case ETHTYPE_IP:
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
  80d058:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80d05c:	89 34 24             	mov    %esi,(%esp)
  80d05f:	e8 e5 fc ff ff       	call   80cd49 <etharp_ip_input>
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -(s16_t)sizeof(struct eth_hdr))) {
  80d064:	c7 44 24 04 f2 ff ff 	movl   $0xfffffff2,0x4(%esp)
  80d06b:	ff 
  80d06c:	89 1c 24             	mov    %ebx,(%esp)
  80d06f:	e8 b4 a6 ff ff       	call   807728 <pbuf_header>
  80d074:	84 c0                	test   %al,%al
  80d076:	74 1c                	je     80d094 <ethernet_input+0x6b>
        LWIP_ASSERT("Can't move over header in packet", 0);
  80d078:	c7 44 24 08 90 3c 81 	movl   $0x813c90,0x8(%esp)
  80d07f:	00 
  80d080:	c7 44 24 04 7e 04 00 	movl   $0x47e,0x4(%esp)
  80d087:	00 
  80d088:	c7 04 24 b1 3c 81 00 	movl   $0x813cb1,(%esp)
  80d08f:	e8 f8 37 ff ff       	call   80088c <_panic>
        pbuf_free(p);
        p = NULL;
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
  80d094:	89 74 24 04          	mov    %esi,0x4(%esp)
  80d098:	89 1c 24             	mov    %ebx,(%esp)
  80d09b:	e8 d4 c6 ff ff       	call   809774 <ip_input>
  80d0a0:	eb 1d                	jmp    80d0bf <ethernet_input+0x96>
      }
      break;
      
    case ETHTYPE_ARP:
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  80d0a2:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80d0a6:	8d 46 25             	lea    0x25(%esi),%eax
  80d0a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d0ad:	89 34 24             	mov    %esi,(%esp)
  80d0b0:	e8 64 fd ff ff       	call   80ce19 <etharp_arp_input>
  80d0b5:	eb 08                	jmp    80d0bf <ethernet_input+0x96>
      break;

#if PPPOE_SUPPORT
    case ETHTYPE_PPPOEDISC: /* PPP Over Ethernet Discovery Stage */
      pppoe_disc_input(netif, p);
      break;

    case ETHTYPE_PPPOE: /* PPP Over Ethernet Session Stage */
      pppoe_data_input(netif, p);
      break;
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      pbuf_free(p);
  80d0b7:	89 1c 24             	mov    %ebx,(%esp)
  80d0ba:	e8 d5 a9 ff ff       	call   807a94 <pbuf_free>
      p = NULL;
      break;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
}
  80d0bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80d0c4:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80d0c7:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80d0ca:	89 ec                	mov    %ebp,%esp
  80d0cc:	5d                   	pop    %ebp
  80d0cd:	c3                   	ret    
	...

0080d0d0 <sys_init>:
static LIST_HEAD(thread_list, sys_thread) threads[thread_hash_size];

void
sys_init(void)
{
  80d0d0:	55                   	push   %ebp
  80d0d1:	89 e5                	mov    %esp,%ebp
  80d0d3:	53                   	push   %ebx
  80d0d4:	b9 c0 7e b3 00       	mov    $0xb37ec0,%ecx
    int i = 0;
    for (i = 0; i < NSEM; i++) {
	sems[i].freed = 1;
  80d0d9:	c7 01 01 00 00 00    	movl   $0x1,(%ecx)
  80d0df:	89 cb                	mov    %ecx,%ebx
	LIST_INSERT_HEAD(&sem_free, &sems[i], link);
  80d0e1:	8b 15 c0 92 b3 00    	mov    0xb392c0,%edx
  80d0e7:	89 51 0c             	mov    %edx,0xc(%ecx)
  80d0ea:	85 d2                	test   %edx,%edx
  80d0ec:	74 06                	je     80d0f4 <sys_init+0x24>
  80d0ee:	8d 41 0c             	lea    0xc(%ecx),%eax
  80d0f1:	89 42 10             	mov    %eax,0x10(%edx)
  80d0f4:	89 1d c0 92 b3 00    	mov    %ebx,0xb392c0
  80d0fa:	c7 41 10 c0 92 b3 00 	movl   $0xb392c0,0x10(%ecx)
  80d101:	83 c1 14             	add    $0x14,%ecx
  80d104:	81 f9 c0 92 b3 00    	cmp    $0xb392c0,%ecx
  80d10a:	75 cd                	jne    80d0d9 <sys_init+0x9>
  80d10c:	b9 e0 92 b3 00       	mov    $0xb392e0,%ecx
    }

    for (i = 0; i < NMBOX; i++) {
	mboxes[i].freed = 1;
  80d111:	c7 01 01 00 00 00    	movl   $0x1,(%ecx)
  80d117:	89 cb                	mov    %ecx,%ebx
	LIST_INSERT_HEAD(&mbox_free, &mboxes[i], link);
  80d119:	8b 15 e0 e0 b3 00    	mov    0xb3e0e0,%edx
  80d11f:	89 91 94 00 00 00    	mov    %edx,0x94(%ecx)
  80d125:	85 d2                	test   %edx,%edx
  80d127:	74 0c                	je     80d135 <sys_init+0x65>
  80d129:	8d 81 94 00 00 00    	lea    0x94(%ecx),%eax
  80d12f:	89 82 98 00 00 00    	mov    %eax,0x98(%edx)
  80d135:	89 1d e0 e0 b3 00    	mov    %ebx,0xb3e0e0
  80d13b:	c7 81 98 00 00 00 e0 	movl   $0xb3e0e0,0x98(%ecx)
  80d142:	e0 b3 00 
  80d145:	81 c1 9c 00 00 00    	add    $0x9c,%ecx
  80d14b:	81 f9 e0 e0 b3 00    	cmp    $0xb3e0e0,%ecx
  80d151:	75 be                	jne    80d111 <sys_init+0x41>
    }
}
  80d153:	5b                   	pop    %ebx
  80d154:	5d                   	pop    %ebp
  80d155:	c3                   	ret    

0080d156 <lwip_core_lock>:

sys_mbox_t
sys_mbox_new(int size)
{
    assert(size < MBOXSLOTS);
    struct sys_mbox_entry *mbe = LIST_FIRST(&mbox_free);
    if (!mbe) {
	cprintf("lwip: sys_mbox_new: out of mailboxes\n");
	return SYS_MBOX_NULL;
    }
    LIST_REMOVE(mbe, link);
    assert(mbe->freed);
    mbe->freed = 0;

    int i = mbe - &mboxes[0];
    mbe->head = -1;
    mbe->nextq = 0;
    mbe->queued_msg = sys_sem_new(0);
    mbe->free_msg = sys_sem_new(MBOXSLOTS);

    if (mbe->queued_msg == SYS_SEM_NULL ||
	mbe->free_msg == SYS_SEM_NULL)
    {
	sys_mbox_free(i);
	cprintf("lwip: sys_mbox_new: can't get semaphore\n");
	return SYS_MBOX_NULL;
    }
    return i;
}

void
sys_mbox_free(sys_mbox_t mbox)
{
    assert(!mboxes[mbox].freed);
    sys_sem_free(mboxes[mbox].queued_msg);
    sys_sem_free(mboxes[mbox].free_msg);
    LIST_INSERT_HEAD(&mbox_free, &mboxes[mbox], link);
    mboxes[mbox].freed = 1;
}

void
sys_mbox_post(sys_mbox_t mbox, void *msg)
{
    assert(sys_mbox_trypost(mbox, msg) == ERR_OK);
}

err_t 
sys_mbox_trypost(sys_mbox_t mbox, void *msg)
{
    assert(!mboxes[mbox].freed);

    sys_arch_sem_wait(mboxes[mbox].free_msg, 0);
    if (mboxes[mbox].nextq == mboxes[mbox].head)
	return ERR_MEM;

    int slot = mboxes[mbox].nextq;
    mboxes[mbox].nextq = (slot + 1) % MBOXSLOTS;
    mboxes[mbox].msg[slot] = msg;

    if (mboxes[mbox].head == -1)
	mboxes[mbox].head = slot;

    sys_sem_signal(mboxes[mbox].queued_msg);

    return ERR_OK;
}

sys_sem_t
sys_sem_new(u8_t count)
{
    struct sys_sem_entry *se = LIST_FIRST(&sem_free);
    if (!se) {
	cprintf("lwip: sys_sem_new: out of semaphores\n");
	return SYS_SEM_NULL;
    }
    LIST_REMOVE(se, link);
    assert(se->freed);
    se->freed = 0;

    se->counter = count;
    se->gen++;
    return se - &sems[0];
}

void
sys_sem_free(sys_sem_t sem)
{
    assert(!sems[sem].freed);
    sems[sem].freed = 1;
    sems[sem].gen++;
    LIST_INSERT_HEAD(&sem_free, &sems[sem], link);
}

void
sys_sem_signal(sys_sem_t sem)
{
    assert(!sems[sem].freed);
    sems[sem].counter++;
    if (sems[sem].waiters) {
	sems[sem].waiters = 0;
	thread_wakeup(&sems[sem].v);
    }
}

u32_t
sys_arch_sem_wait(sys_sem_t sem, u32_t tm_msec)
{
    assert(!sems[sem].freed);
    u32_t waited = 0;

    int gen = sems[sem].gen;

    while (tm_msec == 0 || waited < tm_msec) {
	if (sems[sem].counter > 0) {
	    sems[sem].counter--;
	    return waited;
 	} else if (tm_msec == SYS_ARCH_NOWAIT) {
	    return SYS_ARCH_TIMEOUT;
	} else {
	    uint32_t a = sys_time_msec();
	    uint32_t sleep_until = tm_msec ? a + (tm_msec - waited) : ~0;
	    sems[sem].waiters = 1;
	    uint32_t cur_v = sems[sem].v;
	    lwip_core_unlock();
	    thread_wait(&sems[sem].v, cur_v, sleep_until);
	    lwip_core_lock();
	    if (gen != sems[sem].gen) {
		cprintf("sys_arch_sem_wait: sem freed under waiter!\n");
		return SYS_ARCH_TIMEOUT;
	    }
	    uint32_t b = sys_time_msec();
	    waited += (b - a);
	}
    }

    return SYS_ARCH_TIMEOUT;
}

u32_t
sys_arch_mbox_fetch(sys_mbox_t mbox, void **msg, u32_t tm_msec)
{
    assert(!mboxes[mbox].freed);

    u32_t waited = sys_arch_sem_wait(mboxes[mbox].queued_msg, tm_msec);
    if (waited == SYS_ARCH_TIMEOUT)
	return waited;

    int slot = mboxes[mbox].head;
    if (slot == -1)
	panic("lwip: sys_arch_mbox_fetch: no message");
    if (msg)
	*msg = mboxes[mbox].msg[slot];

    mboxes[mbox].head = (slot + 1) % MBOXSLOTS;
    if (mboxes[mbox].head == mboxes[mbox].nextq)
	mboxes[mbox].head = -1;

    sys_sem_signal(mboxes[mbox].free_msg);
    return waited;
}

u32_t 
sys_arch_mbox_tryfetch(sys_mbox_t mbox, void **msg)
{
    return sys_arch_mbox_fetch(mbox, msg, SYS_ARCH_NOWAIT);
}

struct lwip_thread {
    void (*func)(void *arg);
    void *arg;
};

static void
lwip_thread_entry(uint32_t arg)
{
    struct lwip_thread *lt = (struct lwip_thread *)arg;
    lwip_core_lock();
    lt->func(lt->arg);
    lwip_core_unlock();
    free(lt);
}

sys_thread_t
sys_thread_new(char *name, void (* thread)(void *arg), void *arg, 
	       int stacksize, int prio)
{
    struct lwip_thread *lt = malloc(sizeof(*lt));
    if (lt == 0)
	panic("sys_thread_new: cannot allocate thread struct");

    if (stacksize > PGSIZE)
	panic("large stack %d", stacksize);

    lt->func = thread;
    lt->arg = arg;

    thread_id_t tid;
    int r = thread_create(&tid, name, lwip_thread_entry, (uint32_t)lt);

    if (r < 0)
	panic("lwip: sys_thread_new: cannot create: %s\n", e2s(r));

    return tid;
}

static void
timeout_cleanup(thread_id_t tid)
{
    lwip_core_lock();

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
	if (t->tid == tid) {
	    LIST_REMOVE(t, link);
	    free(t);
	    goto done;
	}

    if (debug) cprintf("timeout_cleanup: bogus tid %ld\n", tid);
 done:
    lwip_core_unlock();
}

struct sys_timeouts *
sys_arch_timeouts(void)
{
    thread_id_t tid = thread_id();

    struct sys_thread *t;
    LIST_FOREACH(t, &threads[tid % thread_hash_size], link)
	if (t->tid == tid)
	    goto out;

    t = malloc(sizeof(*t));
    if (t == 0)
	panic("sys_arch_timeouts: cannot malloc");

    int r = thread_onhalt(timeout_cleanup);
    if (r < 0)
	panic("thread_onhalt failed: %s", e2s(r));

    t->tid = tid;
    memset(&t->tmo, 0, sizeof(t->tmo));
    LIST_INSERT_HEAD(&threads[tid % thread_hash_size], t, link);

out:
    return &t->tmo;
}

void
lwip_core_lock(void)
{
  80d156:	55                   	push   %ebp
  80d157:	89 e5                	mov    %esp,%ebp
}
  80d159:	5d                   	pop    %ebp
  80d15a:	c3                   	ret    

0080d15b <lwip_core_unlock>:

void
lwip_core_unlock(void)
{
  80d15b:	55                   	push   %ebp
  80d15c:	89 e5                	mov    %esp,%ebp
}
  80d15e:	5d                   	pop    %ebp
  80d15f:	c3                   	ret    

0080d160 <sys_sem_free>:
  80d160:	55                   	push   %ebp
  80d161:	89 e5                	mov    %esp,%ebp
  80d163:	83 ec 18             	sub    $0x18,%esp
  80d166:	8b 55 08             	mov    0x8(%ebp),%edx
  80d169:	8d 04 92             	lea    (%edx,%edx,4),%eax
  80d16c:	83 3c 85 c0 7e b3 00 	cmpl   $0x0,0xb37ec0(,%eax,4)
  80d173:	00 
  80d174:	74 24                	je     80d19a <sys_sem_free+0x3a>
  80d176:	c7 44 24 0c 33 3d 81 	movl   $0x813d33,0xc(%esp)
  80d17d:	00 
  80d17e:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d185:	00 
  80d186:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80d18d:	00 
  80d18e:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d195:	e8 f2 36 ff ff       	call   80088c <_panic>
  80d19a:	8d 04 92             	lea    (%edx,%edx,4),%eax
  80d19d:	c1 e0 02             	shl    $0x2,%eax
  80d1a0:	c7 80 c0 7e b3 00 01 	movl   $0x1,0xb37ec0(%eax)
  80d1a7:	00 00 00 
  80d1aa:	83 80 c4 7e b3 00 01 	addl   $0x1,0xb37ec4(%eax)
  80d1b1:	8d 88 c0 7e b3 00    	lea    0xb37ec0(%eax),%ecx
  80d1b7:	8b 15 c0 92 b3 00    	mov    0xb392c0,%edx
  80d1bd:	89 51 0c             	mov    %edx,0xc(%ecx)
  80d1c0:	85 d2                	test   %edx,%edx
  80d1c2:	74 06                	je     80d1ca <sys_sem_free+0x6a>
  80d1c4:	8d 41 0c             	lea    0xc(%ecx),%eax
  80d1c7:	89 42 10             	mov    %eax,0x10(%edx)
  80d1ca:	89 0d c0 92 b3 00    	mov    %ecx,0xb392c0
  80d1d0:	c7 41 10 c0 92 b3 00 	movl   $0xb392c0,0x10(%ecx)
  80d1d7:	c9                   	leave  
  80d1d8:	c3                   	ret    

0080d1d9 <sys_mbox_free>:
  80d1d9:	55                   	push   %ebp
  80d1da:	89 e5                	mov    %esp,%ebp
  80d1dc:	56                   	push   %esi
  80d1dd:	53                   	push   %ebx
  80d1de:	83 ec 10             	sub    $0x10,%esp
  80d1e1:	8b 75 08             	mov    0x8(%ebp),%esi
  80d1e4:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d1ea:	83 b8 e0 92 b3 00 00 	cmpl   $0x0,0xb392e0(%eax)
  80d1f1:	74 24                	je     80d217 <sys_mbox_free+0x3e>
  80d1f3:	c7 44 24 0c 61 3d 81 	movl   $0x813d61,0xc(%esp)
  80d1fa:	00 
  80d1fb:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d202:	00 
  80d203:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
  80d20a:	00 
  80d20b:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d212:	e8 75 36 ff ff       	call   80088c <_panic>
  80d217:	69 de 9c 00 00 00    	imul   $0x9c,%esi,%ebx
  80d21d:	8b 83 6c 93 b3 00    	mov    0xb3936c(%ebx),%eax
  80d223:	89 04 24             	mov    %eax,(%esp)
  80d226:	e8 35 ff ff ff       	call   80d160 <sys_sem_free>
  80d22b:	81 c3 e0 92 b3 00    	add    $0xb392e0,%ebx
  80d231:	8b 83 90 00 00 00    	mov    0x90(%ebx),%eax
  80d237:	89 04 24             	mov    %eax,(%esp)
  80d23a:	e8 21 ff ff ff       	call   80d160 <sys_sem_free>
  80d23f:	89 d9                	mov    %ebx,%ecx
  80d241:	8b 15 e0 e0 b3 00    	mov    0xb3e0e0,%edx
  80d247:	89 93 94 00 00 00    	mov    %edx,0x94(%ebx)
  80d24d:	85 d2                	test   %edx,%edx
  80d24f:	74 0c                	je     80d25d <sys_mbox_free+0x84>
  80d251:	8d 83 94 00 00 00    	lea    0x94(%ebx),%eax
  80d257:	89 82 98 00 00 00    	mov    %eax,0x98(%edx)
  80d25d:	89 0d e0 e0 b3 00    	mov    %ecx,0xb3e0e0
  80d263:	c7 81 98 00 00 00 e0 	movl   $0xb3e0e0,0x98(%ecx)
  80d26a:	e0 b3 00 
  80d26d:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d273:	c7 80 e0 92 b3 00 01 	movl   $0x1,0xb392e0(%eax)
  80d27a:	00 00 00 
  80d27d:	83 c4 10             	add    $0x10,%esp
  80d280:	5b                   	pop    %ebx
  80d281:	5e                   	pop    %esi
  80d282:	5d                   	pop    %ebp
  80d283:	c3                   	ret    

0080d284 <sys_arch_timeouts>:
  80d284:	55                   	push   %ebp
  80d285:	89 e5                	mov    %esp,%ebp
  80d287:	57                   	push   %edi
  80d288:	56                   	push   %esi
  80d289:	53                   	push   %ebx
  80d28a:	83 ec 1c             	sub    $0x1c,%esp
  80d28d:	e8 e1 07 00 00       	call   80da73 <thread_id>
  80d292:	89 c6                	mov    %eax,%esi
  80d294:	ba 01 ff 00 ff       	mov    $0xff00ff01,%edx
  80d299:	f7 e2                	mul    %edx
  80d29b:	c1 ea 08             	shr    $0x8,%edx
  80d29e:	89 d0                	mov    %edx,%eax
  80d2a0:	c1 e0 08             	shl    $0x8,%eax
  80d2a3:	01 d0                	add    %edx,%eax
  80d2a5:	89 f2                	mov    %esi,%edx
  80d2a7:	29 c2                	sub    %eax,%edx
  80d2a9:	89 d0                	mov    %edx,%eax
  80d2ab:	c1 e0 02             	shl    $0x2,%eax
  80d2ae:	8d b8 00 e1 b3 00    	lea    0xb3e100(%eax),%edi
  80d2b4:	8b 98 00 e1 b3 00    	mov    0xb3e100(%eax),%ebx
  80d2ba:	85 db                	test   %ebx,%ebx
  80d2bc:	74 24                	je     80d2e2 <sys_arch_timeouts+0x5e>
  80d2be:	3b 33                	cmp    (%ebx),%esi
  80d2c0:	75 14                	jne    80d2d6 <sys_arch_timeouts+0x52>
  80d2c2:	e9 b4 00 00 00       	jmp    80d37b <sys_arch_timeouts+0xf7>
  80d2c7:	3b 33                	cmp    (%ebx),%esi
  80d2c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80d2d0:	0f 84 a5 00 00 00    	je     80d37b <sys_arch_timeouts+0xf7>
  80d2d6:	8b 5b 08             	mov    0x8(%ebx),%ebx
  80d2d9:	85 db                	test   %ebx,%ebx
  80d2db:	90                   	nop    
  80d2dc:	8d 74 26 00          	lea    0x0(%esi),%esi
  80d2e0:	75 e5                	jne    80d2c7 <sys_arch_timeouts+0x43>
  80d2e2:	c7 04 24 10 00 00 00 	movl   $0x10,(%esp)
  80d2e9:	e8 e6 5a ff ff       	call   802dd4 <malloc>
  80d2ee:	89 c3                	mov    %eax,%ebx
  80d2f0:	85 c0                	test   %eax,%eax
  80d2f2:	75 1c                	jne    80d310 <sys_arch_timeouts+0x8c>
  80d2f4:	c7 44 24 08 c4 3d 81 	movl   $0x813dc4,0x8(%esp)
  80d2fb:	00 
  80d2fc:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
  80d303:	00 
  80d304:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d30b:	e8 7c 35 ff ff       	call   80088c <_panic>
  80d310:	c7 04 24 86 d3 80 00 	movl   $0x80d386,(%esp)
  80d317:	e8 b0 07 00 00       	call   80dacc <thread_onhalt>
  80d31c:	85 c0                	test   %eax,%eax
  80d31e:	79 28                	jns    80d348 <sys_arch_timeouts+0xc4>
  80d320:	89 04 24             	mov    %eax,(%esp)
  80d323:	e8 10 0b 00 00       	call   80de38 <e2s>
  80d328:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80d32c:	c7 44 24 08 75 3d 81 	movl   $0x813d75,0x8(%esp)
  80d333:	00 
  80d334:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
  80d33b:	00 
  80d33c:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d343:	e8 44 35 ff ff       	call   80088c <_panic>
  80d348:	89 33                	mov    %esi,(%ebx)
  80d34a:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80d351:	00 
  80d352:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80d359:	00 
  80d35a:	8d 43 04             	lea    0x4(%ebx),%eax
  80d35d:	89 04 24             	mov    %eax,(%esp)
  80d360:	e8 2c 3e ff ff       	call   801191 <memset>
  80d365:	8b 07                	mov    (%edi),%eax
  80d367:	89 43 08             	mov    %eax,0x8(%ebx)
  80d36a:	85 c0                	test   %eax,%eax
  80d36c:	74 08                	je     80d376 <sys_arch_timeouts+0xf2>
  80d36e:	8b 17                	mov    (%edi),%edx
  80d370:	8d 43 08             	lea    0x8(%ebx),%eax
  80d373:	89 42 0c             	mov    %eax,0xc(%edx)
  80d376:	89 1f                	mov    %ebx,(%edi)
  80d378:	89 7b 0c             	mov    %edi,0xc(%ebx)
  80d37b:	8d 43 04             	lea    0x4(%ebx),%eax
  80d37e:	83 c4 1c             	add    $0x1c,%esp
  80d381:	5b                   	pop    %ebx
  80d382:	5e                   	pop    %esi
  80d383:	5f                   	pop    %edi
  80d384:	5d                   	pop    %ebp
  80d385:	c3                   	ret    

0080d386 <timeout_cleanup>:
  80d386:	55                   	push   %ebp
  80d387:	89 e5                	mov    %esp,%ebp
  80d389:	53                   	push   %ebx
  80d38a:	83 ec 04             	sub    $0x4,%esp
  80d38d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80d390:	ba 01 ff 00 ff       	mov    $0xff00ff01,%edx
  80d395:	89 d8                	mov    %ebx,%eax
  80d397:	f7 e2                	mul    %edx
  80d399:	c1 ea 08             	shr    $0x8,%edx
  80d39c:	89 d0                	mov    %edx,%eax
  80d39e:	c1 e0 08             	shl    $0x8,%eax
  80d3a1:	01 d0                	add    %edx,%eax
  80d3a3:	89 da                	mov    %ebx,%edx
  80d3a5:	29 c2                	sub    %eax,%edx
  80d3a7:	8b 0c 95 00 e1 b3 00 	mov    0xb3e100(,%edx,4),%ecx
  80d3ae:	85 c9                	test   %ecx,%ecx
  80d3b0:	74 36                	je     80d3e8 <timeout_cleanup+0x62>
  80d3b2:	39 19                	cmp    %ebx,(%ecx)
  80d3b4:	75 2b                	jne    80d3e1 <timeout_cleanup+0x5b>
  80d3b6:	eb 0a                	jmp    80d3c2 <timeout_cleanup+0x3c>
  80d3b8:	39 19                	cmp    %ebx,(%ecx)
  80d3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80d3c0:	75 1f                	jne    80d3e1 <timeout_cleanup+0x5b>
  80d3c2:	8b 51 08             	mov    0x8(%ecx),%edx
  80d3c5:	85 d2                	test   %edx,%edx
  80d3c7:	74 06                	je     80d3cf <timeout_cleanup+0x49>
  80d3c9:	8b 41 0c             	mov    0xc(%ecx),%eax
  80d3cc:	89 42 0c             	mov    %eax,0xc(%edx)
  80d3cf:	8b 51 0c             	mov    0xc(%ecx),%edx
  80d3d2:	8b 41 08             	mov    0x8(%ecx),%eax
  80d3d5:	89 02                	mov    %eax,(%edx)
  80d3d7:	89 0c 24             	mov    %ecx,(%esp)
  80d3da:	e8 21 59 ff ff       	call   802d00 <free>
  80d3df:	eb 07                	jmp    80d3e8 <timeout_cleanup+0x62>
  80d3e1:	8b 49 08             	mov    0x8(%ecx),%ecx
  80d3e4:	85 c9                	test   %ecx,%ecx
  80d3e6:	75 d0                	jne    80d3b8 <timeout_cleanup+0x32>
  80d3e8:	83 c4 04             	add    $0x4,%esp
  80d3eb:	5b                   	pop    %ebx
  80d3ec:	5d                   	pop    %ebp
  80d3ed:	8d 76 00             	lea    0x0(%esi),%esi
  80d3f0:	c3                   	ret    

0080d3f1 <lwip_thread_entry>:
  80d3f1:	55                   	push   %ebp
  80d3f2:	89 e5                	mov    %esp,%ebp
  80d3f4:	53                   	push   %ebx
  80d3f5:	83 ec 04             	sub    $0x4,%esp
  80d3f8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80d3fb:	8b 43 04             	mov    0x4(%ebx),%eax
  80d3fe:	89 04 24             	mov    %eax,(%esp)
  80d401:	ff 13                	call   *(%ebx)
  80d403:	89 1c 24             	mov    %ebx,(%esp)
  80d406:	e8 f5 58 ff ff       	call   802d00 <free>
  80d40b:	83 c4 04             	add    $0x4,%esp
  80d40e:	5b                   	pop    %ebx
  80d40f:	5d                   	pop    %ebp
  80d410:	c3                   	ret    

0080d411 <sys_thread_new>:
  80d411:	55                   	push   %ebp
  80d412:	89 e5                	mov    %esp,%ebp
  80d414:	53                   	push   %ebx
  80d415:	83 ec 24             	sub    $0x24,%esp
  80d418:	8b 5d 14             	mov    0x14(%ebp),%ebx
  80d41b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  80d422:	e8 ad 59 ff ff       	call   802dd4 <malloc>
  80d427:	89 c2                	mov    %eax,%edx
  80d429:	85 c0                	test   %eax,%eax
  80d42b:	75 1c                	jne    80d449 <sys_thread_new+0x38>
  80d42d:	c7 44 24 08 e8 3d 81 	movl   $0x813de8,0x8(%esp)
  80d434:	00 
  80d435:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
  80d43c:	00 
  80d43d:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d444:	e8 43 34 ff ff       	call   80088c <_panic>
  80d449:	81 fb 00 10 00 00    	cmp    $0x1000,%ebx
  80d44f:	7e 20                	jle    80d471 <sys_thread_new+0x60>
  80d451:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  80d455:	c7 44 24 08 8e 3d 81 	movl   $0x813d8e,0x8(%esp)
  80d45c:	00 
  80d45d:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
  80d464:	00 
  80d465:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d46c:	e8 1b 34 ff ff       	call   80088c <_panic>
  80d471:	8b 45 0c             	mov    0xc(%ebp),%eax
  80d474:	89 02                	mov    %eax,(%edx)
  80d476:	8b 45 10             	mov    0x10(%ebp),%eax
  80d479:	89 42 04             	mov    %eax,0x4(%edx)
  80d47c:	89 54 24 0c          	mov    %edx,0xc(%esp)
  80d480:	c7 44 24 08 f1 d3 80 	movl   $0x80d3f1,0x8(%esp)
  80d487:	00 
  80d488:	8b 45 08             	mov    0x8(%ebp),%eax
  80d48b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d48f:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  80d492:	89 04 24             	mov    %eax,(%esp)
  80d495:	e8 98 07 00 00       	call   80dc32 <thread_create>
  80d49a:	85 c0                	test   %eax,%eax
  80d49c:	79 28                	jns    80d4c6 <sys_thread_new+0xb5>
  80d49e:	89 04 24             	mov    %eax,(%esp)
  80d4a1:	e8 92 09 00 00       	call   80de38 <e2s>
  80d4a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80d4aa:	c7 44 24 08 18 3e 81 	movl   $0x813e18,0x8(%esp)
  80d4b1:	00 
  80d4b2:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
  80d4b9:	00 
  80d4ba:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d4c1:	e8 c6 33 ff ff       	call   80088c <_panic>
  80d4c6:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  80d4c9:	83 c4 24             	add    $0x24,%esp
  80d4cc:	5b                   	pop    %ebx
  80d4cd:	5d                   	pop    %ebp
  80d4ce:	c3                   	ret    

0080d4cf <sys_arch_sem_wait>:
  80d4cf:	55                   	push   %ebp
  80d4d0:	89 e5                	mov    %esp,%ebp
  80d4d2:	57                   	push   %edi
  80d4d3:	56                   	push   %esi
  80d4d4:	53                   	push   %ebx
  80d4d5:	83 ec 2c             	sub    $0x2c,%esp
  80d4d8:	8b 75 08             	mov    0x8(%ebp),%esi
  80d4db:	8d 04 b6             	lea    (%esi,%esi,4),%eax
  80d4de:	83 3c 85 c0 7e b3 00 	cmpl   $0x0,0xb37ec0(,%eax,4)
  80d4e5:	00 
  80d4e6:	74 24                	je     80d50c <sys_arch_sem_wait+0x3d>
  80d4e8:	c7 44 24 0c 33 3d 81 	movl   $0x813d33,0xc(%esp)
  80d4ef:	00 
  80d4f0:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d4f7:	00 
  80d4f8:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
  80d4ff:	00 
  80d500:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d507:	e8 80 33 ff ff       	call   80088c <_panic>
  80d50c:	8d 04 b6             	lea    (%esi,%esi,4),%eax
  80d50f:	8b 04 85 c4 7e b3 00 	mov    0xb37ec4(,%eax,4),%eax
  80d516:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  80d519:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80d51d:	0f 94 45 e7          	sete   0xffffffe7(%ebp)
  80d521:	0f 95 45 f3          	setne  0xfffffff3(%ebp)
  80d525:	8d 04 b6             	lea    (%esi,%esi,4),%eax
  80d528:	0f b7 04 85 c8 7e b3 	movzwl 0xb37ec8(,%eax,4),%eax
  80d52f:	00 
  80d530:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  80d537:	66 85 c0             	test   %ax,%ax
  80d53a:	75 3a                	jne    80d576 <sys_arch_sem_wait+0xa7>
  80d53c:	c7 45 e8 00 00 00 00 	movl   $0x0,0xffffffe8(%ebp)
  80d543:	83 7d 0c fe          	cmpl   $0xfffffffe,0xc(%ebp)
  80d547:	75 3d                	jne    80d586 <sys_arch_sem_wait+0xb7>
  80d549:	e9 ad 00 00 00       	jmp    80d5fb <sys_arch_sem_wait+0x12c>
  80d54e:	c7 04 24 44 3e 81 00 	movl   $0x813e44,(%esp)
  80d555:	e8 ff 33 ff ff       	call   800959 <cprintf>
  80d55a:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,0xffffffe8(%ebp)
  80d561:	e9 9c 00 00 00       	jmp    80d602 <sys_arch_sem_wait+0x133>
  80d566:	8d 04 b6             	lea    (%esi,%esi,4),%eax
  80d569:	0f b7 04 85 c8 7e b3 	movzwl 0xb37ec8(,%eax,4),%eax
  80d570:	00 
  80d571:	66 85 c0             	test   %ax,%ax
  80d574:	74 10                	je     80d586 <sys_arch_sem_wait+0xb7>
  80d576:	8d 14 b6             	lea    (%esi,%esi,4),%edx
  80d579:	83 e8 01             	sub    $0x1,%eax
  80d57c:	66 89 04 95 c8 7e b3 	mov    %ax,0xb37ec8(,%edx,4)
  80d583:	00 
  80d584:	eb 7c                	jmp    80d602 <sys_arch_sem_wait+0x133>
  80d586:	e8 e0 3e ff ff       	call   80146b <sys_time_msec>
  80d58b:	89 c7                	mov    %eax,%edi
  80d58d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80d592:	80 7d f3 00          	cmpb   $0x0,0xfffffff3(%ebp)
  80d596:	74 09                	je     80d5a1 <sys_arch_sem_wait+0xd2>
  80d598:	8b 55 0c             	mov    0xc(%ebp),%edx
  80d59b:	8d 04 17             	lea    (%edi,%edx,1),%eax
  80d59e:	2b 45 e8             	sub    0xffffffe8(%ebp),%eax
  80d5a1:	8d 1c b6             	lea    (%esi,%esi,4),%ebx
  80d5a4:	c1 e3 02             	shl    $0x2,%ebx
  80d5a7:	66 c7 83 ca 7e b3 00 	movw   $0x1,0xb37eca(%ebx)
  80d5ae:	01 00 
  80d5b0:	89 44 24 08          	mov    %eax,0x8(%esp)
  80d5b4:	8b 83 c8 7e b3 00    	mov    0xb37ec8(%ebx),%eax
  80d5ba:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d5be:	8d 83 c8 7e b3 00    	lea    0xb37ec8(%ebx),%eax
  80d5c4:	89 04 24             	mov    %eax,(%esp)
  80d5c7:	e8 b0 07 00 00       	call   80dd7c <thread_wait>
  80d5cc:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80d5cf:	39 83 c4 7e b3 00    	cmp    %eax,0xb37ec4(%ebx)
  80d5d5:	0f 85 73 ff ff ff    	jne    80d54e <sys_arch_sem_wait+0x7f>
  80d5db:	e8 8b 3e ff ff       	call   80146b <sys_time_msec>
  80d5e0:	29 f8                	sub    %edi,%eax
  80d5e2:	01 45 e8             	add    %eax,0xffffffe8(%ebp)
  80d5e5:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80d5e8:	39 55 0c             	cmp    %edx,0xc(%ebp)
  80d5eb:	0f 87 75 ff ff ff    	ja     80d566 <sys_arch_sem_wait+0x97>
  80d5f1:	80 7d e7 00          	cmpb   $0x0,0xffffffe7(%ebp)
  80d5f5:	0f 85 6b ff ff ff    	jne    80d566 <sys_arch_sem_wait+0x97>
  80d5fb:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,0xffffffe8(%ebp)
  80d602:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80d605:	83 c4 2c             	add    $0x2c,%esp
  80d608:	5b                   	pop    %ebx
  80d609:	5e                   	pop    %esi
  80d60a:	5f                   	pop    %edi
  80d60b:	5d                   	pop    %ebp
  80d60c:	c3                   	ret    

0080d60d <sys_sem_new>:
  80d60d:	55                   	push   %ebp
  80d60e:	89 e5                	mov    %esp,%ebp
  80d610:	53                   	push   %ebx
  80d611:	83 ec 14             	sub    $0x14,%esp
  80d614:	0f b6 5d 08          	movzbl 0x8(%ebp),%ebx
  80d618:	8b 0d c0 92 b3 00    	mov    0xb392c0,%ecx
  80d61e:	85 c9                	test   %ecx,%ecx
  80d620:	75 13                	jne    80d635 <sys_sem_new+0x28>
  80d622:	c7 04 24 70 3e 81 00 	movl   $0x813e70,(%esp)
  80d629:	e8 2b 33 ff ff       	call   800959 <cprintf>
  80d62e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80d633:	eb 60                	jmp    80d695 <sys_sem_new+0x88>
  80d635:	8b 51 0c             	mov    0xc(%ecx),%edx
  80d638:	85 d2                	test   %edx,%edx
  80d63a:	74 06                	je     80d642 <sys_sem_new+0x35>
  80d63c:	8b 41 10             	mov    0x10(%ecx),%eax
  80d63f:	89 42 10             	mov    %eax,0x10(%edx)
  80d642:	8b 51 10             	mov    0x10(%ecx),%edx
  80d645:	8b 41 0c             	mov    0xc(%ecx),%eax
  80d648:	89 02                	mov    %eax,(%edx)
  80d64a:	83 39 00             	cmpl   $0x0,(%ecx)
  80d64d:	75 24                	jne    80d673 <sys_sem_new+0x66>
  80d64f:	c7 44 24 0c 9d 3d 81 	movl   $0x813d9d,0xc(%esp)
  80d656:	00 
  80d657:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d65e:	00 
  80d65f:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
  80d666:	00 
  80d667:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d66e:	e8 19 32 ff ff       	call   80088c <_panic>
  80d673:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
  80d679:	66 0f b6 c3          	movzbw %bl,%ax
  80d67d:	66 89 41 08          	mov    %ax,0x8(%ecx)
  80d681:	83 41 04 01          	addl   $0x1,0x4(%ecx)
  80d685:	89 c8                	mov    %ecx,%eax
  80d687:	2d c0 7e b3 00       	sub    $0xb37ec0,%eax
  80d68c:	c1 f8 02             	sar    $0x2,%eax
  80d68f:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
  80d695:	83 c4 14             	add    $0x14,%esp
  80d698:	5b                   	pop    %ebx
  80d699:	5d                   	pop    %ebp
  80d69a:	c3                   	ret    

0080d69b <sys_mbox_new>:
  80d69b:	55                   	push   %ebp
  80d69c:	89 e5                	mov    %esp,%ebp
  80d69e:	56                   	push   %esi
  80d69f:	53                   	push   %ebx
  80d6a0:	83 ec 10             	sub    $0x10,%esp
  80d6a3:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  80d6a7:	7e 24                	jle    80d6cd <sys_mbox_new+0x32>
  80d6a9:	c7 44 24 0c a7 3d 81 	movl   $0x813da7,0xc(%esp)
  80d6b0:	00 
  80d6b1:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d6b8:	00 
  80d6b9:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
  80d6c0:	00 
  80d6c1:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d6c8:	e8 bf 31 ff ff       	call   80088c <_panic>
  80d6cd:	8b 1d e0 e0 b3 00    	mov    0xb3e0e0,%ebx
  80d6d3:	85 db                	test   %ebx,%ebx
  80d6d5:	75 16                	jne    80d6ed <sys_mbox_new+0x52>
  80d6d7:	c7 04 24 98 3e 81 00 	movl   $0x813e98,(%esp)
  80d6de:	e8 76 32 ff ff       	call   800959 <cprintf>
  80d6e3:	be ff ff ff ff       	mov    $0xffffffff,%esi
  80d6e8:	e9 bc 00 00 00       	jmp    80d7a9 <sys_mbox_new+0x10e>
  80d6ed:	8b 93 94 00 00 00    	mov    0x94(%ebx),%edx
  80d6f3:	85 d2                	test   %edx,%edx
  80d6f5:	74 0c                	je     80d703 <sys_mbox_new+0x68>
  80d6f7:	8b 83 98 00 00 00    	mov    0x98(%ebx),%eax
  80d6fd:	89 82 98 00 00 00    	mov    %eax,0x98(%edx)
  80d703:	8b 93 98 00 00 00    	mov    0x98(%ebx),%edx
  80d709:	8b 83 94 00 00 00    	mov    0x94(%ebx),%eax
  80d70f:	89 02                	mov    %eax,(%edx)
  80d711:	83 3b 00             	cmpl   $0x0,(%ebx)
  80d714:	75 24                	jne    80d73a <sys_mbox_new+0x9f>
  80d716:	c7 44 24 0c b8 3d 81 	movl   $0x813db8,0xc(%esp)
  80d71d:	00 
  80d71e:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d725:	00 
  80d726:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
  80d72d:	00 
  80d72e:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d735:	e8 52 31 ff ff       	call   80088c <_panic>
  80d73a:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
  80d740:	89 d8                	mov    %ebx,%eax
  80d742:	2d e0 92 b3 00       	sub    $0xb392e0,%eax
  80d747:	c1 f8 02             	sar    $0x2,%eax
  80d74a:	69 f0 97 6f f9 96    	imul   $0x96f96f97,%eax,%esi
  80d750:	c7 43 04 ff ff ff ff 	movl   $0xffffffff,0x4(%ebx)
  80d757:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  80d75e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80d765:	e8 a3 fe ff ff       	call   80d60d <sys_sem_new>
  80d76a:	89 83 8c 00 00 00    	mov    %eax,0x8c(%ebx)
  80d770:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  80d777:	e8 91 fe ff ff       	call   80d60d <sys_sem_new>
  80d77c:	89 83 90 00 00 00    	mov    %eax,0x90(%ebx)
  80d782:	83 bb 8c 00 00 00 ff 	cmpl   $0xffffffff,0x8c(%ebx)
  80d789:	74 05                	je     80d790 <sys_mbox_new+0xf5>
  80d78b:	83 f8 ff             	cmp    $0xffffffff,%eax
  80d78e:	75 19                	jne    80d7a9 <sys_mbox_new+0x10e>
  80d790:	89 34 24             	mov    %esi,(%esp)
  80d793:	e8 41 fa ff ff       	call   80d1d9 <sys_mbox_free>
  80d798:	c7 04 24 c0 3e 81 00 	movl   $0x813ec0,(%esp)
  80d79f:	e8 b5 31 ff ff       	call   800959 <cprintf>
  80d7a4:	be ff ff ff ff       	mov    $0xffffffff,%esi
  80d7a9:	89 f0                	mov    %esi,%eax
  80d7ab:	83 c4 10             	add    $0x10,%esp
  80d7ae:	5b                   	pop    %ebx
  80d7af:	5e                   	pop    %esi
  80d7b0:	5d                   	pop    %ebp
  80d7b1:	c3                   	ret    

0080d7b2 <sys_sem_signal>:
  80d7b2:	55                   	push   %ebp
  80d7b3:	89 e5                	mov    %esp,%ebp
  80d7b5:	83 ec 18             	sub    $0x18,%esp
  80d7b8:	8b 55 08             	mov    0x8(%ebp),%edx
  80d7bb:	8d 04 92             	lea    (%edx,%edx,4),%eax
  80d7be:	83 3c 85 c0 7e b3 00 	cmpl   $0x0,0xb37ec0(,%eax,4)
  80d7c5:	00 
  80d7c6:	74 24                	je     80d7ec <sys_sem_signal+0x3a>
  80d7c8:	c7 44 24 0c 33 3d 81 	movl   $0x813d33,0xc(%esp)
  80d7cf:	00 
  80d7d0:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d7d7:	00 
  80d7d8:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
  80d7df:	00 
  80d7e0:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d7e7:	e8 a0 30 ff ff       	call   80088c <_panic>
  80d7ec:	8d 04 92             	lea    (%edx,%edx,4),%eax
  80d7ef:	c1 e0 02             	shl    $0x2,%eax
  80d7f2:	66 83 80 c8 7e b3 00 	addw   $0x1,0xb37ec8(%eax)
  80d7f9:	01 
  80d7fa:	66 83 b8 ca 7e b3 00 	cmpw   $0x0,0xb37eca(%eax)
  80d801:	00 
  80d802:	74 16                	je     80d81a <sys_sem_signal+0x68>
  80d804:	66 c7 80 ca 7e b3 00 	movw   $0x0,0xb37eca(%eax)
  80d80b:	00 00 
  80d80d:	05 c8 7e b3 00       	add    $0xb37ec8,%eax
  80d812:	89 04 24             	mov    %eax,(%esp)
  80d815:	e8 65 02 00 00       	call   80da7f <thread_wakeup>
  80d81a:	c9                   	leave  
  80d81b:	c3                   	ret    

0080d81c <sys_arch_mbox_fetch>:
  80d81c:	55                   	push   %ebp
  80d81d:	89 e5                	mov    %esp,%ebp
  80d81f:	83 ec 28             	sub    $0x28,%esp
  80d822:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80d825:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80d828:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80d82b:	8b 75 08             	mov    0x8(%ebp),%esi
  80d82e:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d834:	83 b8 e0 92 b3 00 00 	cmpl   $0x0,0xb392e0(%eax)
  80d83b:	74 24                	je     80d861 <sys_arch_mbox_fetch+0x45>
  80d83d:	c7 44 24 0c 61 3d 81 	movl   $0x813d61,0xc(%esp)
  80d844:	00 
  80d845:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d84c:	00 
  80d84d:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
  80d854:	00 
  80d855:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d85c:	e8 2b 30 ff ff       	call   80088c <_panic>
  80d861:	8b 45 10             	mov    0x10(%ebp),%eax
  80d864:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d868:	69 de 9c 00 00 00    	imul   $0x9c,%esi,%ebx
  80d86e:	8b 83 6c 93 b3 00    	mov    0xb3936c(%ebx),%eax
  80d874:	89 04 24             	mov    %eax,(%esp)
  80d877:	e8 53 fc ff ff       	call   80d4cf <sys_arch_sem_wait>
  80d87c:	89 c7                	mov    %eax,%edi
  80d87e:	83 f8 ff             	cmp    $0xffffffff,%eax
  80d881:	0f 84 82 00 00 00    	je     80d909 <sys_arch_mbox_fetch+0xed>
  80d887:	8b 93 e4 92 b3 00    	mov    0xb392e4(%ebx),%edx
  80d88d:	83 fa ff             	cmp    $0xffffffff,%edx
  80d890:	75 1c                	jne    80d8ae <sys_arch_mbox_fetch+0x92>
  80d892:	c7 44 24 08 ec 3e 81 	movl   $0x813eec,0x8(%esp)
  80d899:	00 
  80d89a:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
  80d8a1:	00 
  80d8a2:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d8a9:	e8 de 2f ff ff       	call   80088c <_panic>
  80d8ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  80d8b2:	74 11                	je     80d8c5 <sys_arch_mbox_fetch+0xa9>
  80d8b4:	6b c6 27             	imul   $0x27,%esi,%eax
  80d8b7:	01 d0                	add    %edx,%eax
  80d8b9:	8b 04 85 ec 92 b3 00 	mov    0xb392ec(,%eax,4),%eax
  80d8c0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  80d8c3:	89 01                	mov    %eax,(%ecx)
  80d8c5:	8d 42 01             	lea    0x1(%edx),%eax
  80d8c8:	89 c2                	mov    %eax,%edx
  80d8ca:	c1 fa 1f             	sar    $0x1f,%edx
  80d8cd:	c1 ea 1b             	shr    $0x1b,%edx
  80d8d0:	01 d0                	add    %edx,%eax
  80d8d2:	83 e0 1f             	and    $0x1f,%eax
  80d8d5:	29 d0                	sub    %edx,%eax
  80d8d7:	69 d6 9c 00 00 00    	imul   $0x9c,%esi,%edx
  80d8dd:	89 82 e4 92 b3 00    	mov    %eax,0xb392e4(%edx)
  80d8e3:	3b 82 e8 92 b3 00    	cmp    0xb392e8(%edx),%eax
  80d8e9:	75 0a                	jne    80d8f5 <sys_arch_mbox_fetch+0xd9>
  80d8eb:	c7 82 e4 92 b3 00 ff 	movl   $0xffffffff,0xb392e4(%edx)
  80d8f2:	ff ff ff 
  80d8f5:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d8fb:	8b 80 70 93 b3 00    	mov    0xb39370(%eax),%eax
  80d901:	89 04 24             	mov    %eax,(%esp)
  80d904:	e8 a9 fe ff ff       	call   80d7b2 <sys_sem_signal>
  80d909:	89 f8                	mov    %edi,%eax
  80d90b:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80d90e:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80d911:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80d914:	89 ec                	mov    %ebp,%esp
  80d916:	5d                   	pop    %ebp
  80d917:	c3                   	ret    

0080d918 <sys_arch_mbox_tryfetch>:
  80d918:	55                   	push   %ebp
  80d919:	89 e5                	mov    %esp,%ebp
  80d91b:	83 ec 18             	sub    $0x18,%esp
  80d91e:	c7 44 24 08 fe ff ff 	movl   $0xfffffffe,0x8(%esp)
  80d925:	ff 
  80d926:	8b 45 0c             	mov    0xc(%ebp),%eax
  80d929:	89 44 24 04          	mov    %eax,0x4(%esp)
  80d92d:	8b 45 08             	mov    0x8(%ebp),%eax
  80d930:	89 04 24             	mov    %eax,(%esp)
  80d933:	e8 e4 fe ff ff       	call   80d81c <sys_arch_mbox_fetch>
  80d938:	c9                   	leave  
  80d939:	c3                   	ret    

0080d93a <sys_mbox_trypost>:
  80d93a:	55                   	push   %ebp
  80d93b:	89 e5                	mov    %esp,%ebp
  80d93d:	56                   	push   %esi
  80d93e:	53                   	push   %ebx
  80d93f:	83 ec 10             	sub    $0x10,%esp
  80d942:	8b 75 08             	mov    0x8(%ebp),%esi
  80d945:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d94b:	83 b8 e0 92 b3 00 00 	cmpl   $0x0,0xb392e0(%eax)
  80d952:	74 24                	je     80d978 <sys_mbox_trypost+0x3e>
  80d954:	c7 44 24 0c 61 3d 81 	movl   $0x813d61,0xc(%esp)
  80d95b:	00 
  80d95c:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80d963:	00 
  80d964:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
  80d96b:	00 
  80d96c:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80d973:	e8 14 2f ff ff       	call   80088c <_panic>
  80d978:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80d97f:	00 
  80d980:	69 de 9c 00 00 00    	imul   $0x9c,%esi,%ebx
  80d986:	8b 83 70 93 b3 00    	mov    0xb39370(%ebx),%eax
  80d98c:	89 04 24             	mov    %eax,(%esp)
  80d98f:	e8 3b fb ff ff       	call   80d4cf <sys_arch_sem_wait>
  80d994:	8b 8b e8 92 b3 00    	mov    0xb392e8(%ebx),%ecx
  80d99a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80d99f:	3b 8b e4 92 b3 00    	cmp    0xb392e4(%ebx),%ecx
  80d9a5:	74 55                	je     80d9fc <sys_mbox_trypost+0xc2>
  80d9a7:	69 de 9c 00 00 00    	imul   $0x9c,%esi,%ebx
  80d9ad:	8d 41 01             	lea    0x1(%ecx),%eax
  80d9b0:	89 c2                	mov    %eax,%edx
  80d9b2:	c1 fa 1f             	sar    $0x1f,%edx
  80d9b5:	c1 ea 1b             	shr    $0x1b,%edx
  80d9b8:	01 d0                	add    %edx,%eax
  80d9ba:	83 e0 1f             	and    $0x1f,%eax
  80d9bd:	29 d0                	sub    %edx,%eax
  80d9bf:	89 83 e8 92 b3 00    	mov    %eax,0xb392e8(%ebx)
  80d9c5:	6b c6 27             	imul   $0x27,%esi,%eax
  80d9c8:	01 c8                	add    %ecx,%eax
  80d9ca:	8b 55 0c             	mov    0xc(%ebp),%edx
  80d9cd:	89 14 85 ec 92 b3 00 	mov    %edx,0xb392ec(,%eax,4)
  80d9d4:	83 bb e4 92 b3 00 ff 	cmpl   $0xffffffff,0xb392e4(%ebx)
  80d9db:	75 06                	jne    80d9e3 <sys_mbox_trypost+0xa9>
  80d9dd:	89 8b e4 92 b3 00    	mov    %ecx,0xb392e4(%ebx)
  80d9e3:	69 c6 9c 00 00 00    	imul   $0x9c,%esi,%eax
  80d9e9:	8b 80 6c 93 b3 00    	mov    0xb3936c(%eax),%eax
  80d9ef:	89 04 24             	mov    %eax,(%esp)
  80d9f2:	e8 bb fd ff ff       	call   80d7b2 <sys_sem_signal>
  80d9f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80d9fc:	83 c4 10             	add    $0x10,%esp
  80d9ff:	5b                   	pop    %ebx
  80da00:	5e                   	pop    %esi
  80da01:	5d                   	pop    %ebp
  80da02:	c3                   	ret    

0080da03 <sys_mbox_post>:
  80da03:	55                   	push   %ebp
  80da04:	89 e5                	mov    %esp,%ebp
  80da06:	83 ec 18             	sub    $0x18,%esp
  80da09:	8b 45 0c             	mov    0xc(%ebp),%eax
  80da0c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80da10:	8b 45 08             	mov    0x8(%ebp),%eax
  80da13:	89 04 24             	mov    %eax,(%esp)
  80da16:	e8 1f ff ff ff       	call   80d93a <sys_mbox_trypost>
  80da1b:	84 c0                	test   %al,%al
  80da1d:	74 24                	je     80da43 <sys_mbox_post+0x40>
  80da1f:	c7 44 24 0c 14 3f 81 	movl   $0x813f14,0xc(%esp)
  80da26:	00 
  80da27:	c7 44 24 08 58 28 81 	movl   $0x812858,0x8(%esp)
  80da2e:	00 
  80da2f:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
  80da36:	00 
  80da37:	c7 04 24 44 3d 81 00 	movl   $0x813d44,(%esp)
  80da3e:	e8 49 2e ff ff       	call   80088c <_panic>
  80da43:	c9                   	leave  
  80da44:	c3                   	ret    
	...

0080da50 <thread_init>:
static struct thread_queue thread_queue;
static struct thread_queue kill_queue;

void
thread_init(void) {
  80da50:	55                   	push   %ebp
  80da51:	89 e5                	mov    %esp,%ebp

static inline void 
threadq_init(struct thread_queue *tq)
{
    tq->tq_first = 0;
  80da53:	c7 05 0c e5 b3 00 00 	movl   $0x0,0xb3e50c
  80da5a:	00 00 00 
    tq->tq_last = 0;
  80da5d:	c7 05 10 e5 b3 00 00 	movl   $0x0,0xb3e510
  80da64:	00 00 00 
    threadq_init(&thread_queue);
    max_tid = 0;
  80da67:	c7 05 04 e5 b3 00 00 	movl   $0x0,0xb3e504
  80da6e:	00 00 00 
}
  80da71:	5d                   	pop    %ebp
  80da72:	c3                   	ret    

0080da73 <thread_id>:

uint32_t
thread_id(void) {
  80da73:	55                   	push   %ebp
  80da74:	89 e5                	mov    %esp,%ebp
  80da76:	a1 08 e5 b3 00       	mov    0xb3e508,%eax
  80da7b:	8b 00                	mov    (%eax),%eax
    return cur_tc->tc_tid;
}
  80da7d:	5d                   	pop    %ebp
  80da7e:	c3                   	ret    

0080da7f <thread_wakeup>:

void
thread_wakeup(volatile uint32_t *addr) {
  80da7f:	55                   	push   %ebp
  80da80:	89 e5                	mov    %esp,%ebp
  80da82:	8b 55 08             	mov    0x8(%ebp),%edx
    struct thread_context *tc = thread_queue.tq_first;
  80da85:	a1 0c e5 b3 00       	mov    0xb3e50c,%eax
    while (tc) {
  80da8a:	85 c0                	test   %eax,%eax
  80da8c:	74 10                	je     80da9e <thread_wakeup+0x1f>
	if (tc->tc_wait_addr == addr)
  80da8e:	39 50 48             	cmp    %edx,0x48(%eax)
  80da91:	75 04                	jne    80da97 <thread_wakeup+0x18>
	    tc->tc_wakeup = 1;
  80da93:	c6 40 4c 01          	movb   $0x1,0x4c(%eax)
	tc = tc->tc_queue_link;
  80da97:	8b 40 64             	mov    0x64(%eax),%eax
  80da9a:	85 c0                	test   %eax,%eax
  80da9c:	75 f0                	jne    80da8e <thread_wakeup+0xf>
    }
}
  80da9e:	5d                   	pop    %ebp
  80da9f:	90                   	nop    
  80daa0:	c3                   	ret    

0080daa1 <thread_wakeups_pending>:

void
thread_wait(volatile uint32_t *addr, uint32_t val, uint32_t msec) {
    uint32_t s = sys_time_msec();
    uint32_t p = s;

    cur_tc->tc_wait_addr = addr;
    cur_tc->tc_wakeup = 0;

    while (p < msec) {
	if (p < s)
	    break;
	if (addr && *addr != val)
	    break;
	if (cur_tc->tc_wakeup)
	    break;

	thread_yield();
	p = sys_time_msec();
    }

    cur_tc->tc_wait_addr = 0;
    cur_tc->tc_wakeup = 0;
}

int
thread_wakeups_pending(void)
{
  80daa1:	55                   	push   %ebp
  80daa2:	89 e5                	mov    %esp,%ebp
    struct thread_context *tc = thread_queue.tq_first;
  80daa4:	8b 15 0c e5 b3 00    	mov    0xb3e50c,%edx
    int n = 0;
    while (tc) {
  80daaa:	b9 00 00 00 00       	mov    $0x0,%ecx
  80daaf:	85 d2                	test   %edx,%edx
  80dab1:	74 15                	je     80dac8 <thread_wakeups_pending+0x27>
  80dab3:	b9 00 00 00 00       	mov    $0x0,%ecx
	if (tc->tc_wakeup)
  80dab8:	0f b6 42 4c          	movzbl 0x4c(%edx),%eax
	    ++n;
  80dabc:	3c 01                	cmp    $0x1,%al
  80dabe:	83 d9 ff             	sbb    $0xffffffff,%ecx
	tc = tc->tc_queue_link;
  80dac1:	8b 52 64             	mov    0x64(%edx),%edx
  80dac4:	85 d2                	test   %edx,%edx
  80dac6:	75 f0                	jne    80dab8 <thread_wakeups_pending+0x17>
    }
    return n;
}
  80dac8:	89 c8                	mov    %ecx,%eax
  80daca:	5d                   	pop    %ebp
  80dacb:	c3                   	ret    

0080dacc <thread_onhalt>:

int
thread_onhalt(void (*fun)(thread_id_t)) {
  80dacc:	55                   	push   %ebp
  80dacd:	89 e5                	mov    %esp,%ebp
    if (cur_tc->tc_nonhalt >= THREAD_NUM_ONHALT)
  80dacf:	8b 0d 08 e5 b3 00    	mov    0xb3e508,%ecx
  80dad5:	8b 51 60             	mov    0x60(%ecx),%edx
  80dad8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80dadd:	83 fa 03             	cmp    $0x3,%edx
  80dae0:	7f 12                	jg     80daf4 <thread_onhalt+0x28>
	return -E_NO_MEM;

    cur_tc->tc_onhalt[cur_tc->tc_nonhalt++] = fun;
  80dae2:	8b 45 08             	mov    0x8(%ebp),%eax
  80dae5:	89 44 91 50          	mov    %eax,0x50(%ecx,%edx,4)
  80dae9:	8d 42 01             	lea    0x1(%edx),%eax
  80daec:	89 41 60             	mov    %eax,0x60(%ecx)
  80daef:	b8 00 00 00 00       	mov    $0x0,%eax
    return 0;
}
  80daf4:	5d                   	pop    %ebp
  80daf5:	c3                   	ret    

0080daf6 <thread_yield>:

static thread_id_t
alloc_tid(void) {
    int tid = max_tid++;
    if (max_tid == (uint32_t)~0)
	panic("alloc_tid: no more thread ids");
    return tid;
}

static void
thread_set_name(struct thread_context *tc, const char *name)
{
    strncpy(tc->tc_name, name, name_size - 1);
    tc->tc_name[name_size - 1] = 0;
}

static void
thread_entry(void) {
    cur_tc->tc_entry(cur_tc->tc_arg);
    thread_halt();
}

int
thread_create(thread_id_t *tid, const char *name, 
		void (*entry)(uint32_t), uint32_t arg) {
    struct thread_context *tc = malloc(sizeof(struct thread_context));
    if (!tc)
	return -E_NO_MEM;

    memset(tc, 0, sizeof(struct thread_context));
    
    thread_set_name(tc, name);
    tc->tc_tid = alloc_tid();

    tc->tc_stack_bottom = malloc(stack_size);
    if (!tc->tc_stack_bottom) {
	free(tc);
	return -E_NO_MEM;
    }

    void *stacktop = tc->tc_stack_bottom + stack_size;
    // Terminate stack unwinding
    stacktop = stacktop - 4;
    memset(stacktop, 0, 4);
    
    memset(&tc->tc_jb, 0, sizeof(tc->tc_jb));
    tc->tc_jb.jb_esp = (uint32_t)stacktop;
    tc->tc_jb.jb_eip = (uint32_t)&thread_entry;
    tc->tc_entry = entry;
    tc->tc_arg = arg;

    threadq_push(&thread_queue, tc);

    if (tid)
	*tid = tc->tc_tid;
    return 0;
}

static void
thread_clean(struct thread_context *tc) {
    if (!tc) return;

    int i;
    for (i = 0; i < tc->tc_nonhalt; i++)
	tc->tc_onhalt[i](tc->tc_tid);
    free(tc->tc_stack_bottom);
    free(tc);
}

void
thread_halt() {
    // right now the kill_queue will never be more than one
    // clean up a thread if one is on the queue
    thread_clean(threadq_pop(&kill_queue));

    threadq_push(&kill_queue, cur_tc);
    cur_tc = NULL;
    thread_yield();
    // WHAT IF THERE ARE NO MORE THREADS? HOW DO WE STOP?
    // when yield has no thread to run, it will return here!
    exit();
}

void
thread_yield(void) {
  80daf6:	55                   	push   %ebp
  80daf7:	89 e5                	mov    %esp,%ebp
  80daf9:	53                   	push   %ebx
  80dafa:	83 ec 04             	sub    $0x4,%esp

static inline struct thread_context *
threadq_pop(struct thread_queue *tq)
{
    if (!tq->tq_first)
  80dafd:	8b 1d 0c e5 b3 00    	mov    0xb3e50c,%ebx
  80db03:	85 db                	test   %ebx,%ebx
  80db05:	74 6c                	je     80db73 <thread_yield+0x7d>
	return 0;

    struct thread_context *tc = tq->tq_first;
    tq->tq_first = tc->tc_queue_link;
  80db07:	8b 43 64             	mov    0x64(%ebx),%eax
  80db0a:	a3 0c e5 b3 00       	mov    %eax,0xb3e50c
    tc->tc_queue_link = 0;
  80db0f:	c7 43 64 00 00 00 00 	movl   $0x0,0x64(%ebx)
    struct thread_context *next_tc = threadq_pop(&thread_queue);

    if (!next_tc)
	return;

    if (cur_tc) {
  80db16:	a1 08 e5 b3 00       	mov    0xb3e508,%eax
  80db1b:	85 c0                	test   %eax,%eax
  80db1d:	74 41                	je     80db60 <thread_yield+0x6a>
	if (jos_setjmp(&cur_tc->tc_jb) != 0)
  80db1f:	83 c0 30             	add    $0x30,%eax
  80db22:	89 04 24             	mov    %eax,(%esp)
  80db25:	e8 c6 02 00 00       	call   80ddf0 <jos_setjmp>
  80db2a:	85 c0                	test   %eax,%eax
  80db2c:	75 45                	jne    80db73 <thread_yield+0x7d>
	    return;
	threadq_push(&thread_queue, cur_tc);
  80db2e:	8b 15 08 e5 b3 00    	mov    0xb3e508,%edx

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80db34:	c7 42 64 00 00 00 00 	movl   $0x0,0x64(%edx)
    if (!tq->tq_first) {
  80db3b:	83 3d 0c e5 b3 00 00 	cmpl   $0x0,0xb3e50c
  80db42:	75 0e                	jne    80db52 <thread_yield+0x5c>
	tq->tq_first = tc;
  80db44:	89 15 0c e5 b3 00    	mov    %edx,0xb3e50c
	tq->tq_last = tc;
  80db4a:	89 15 10 e5 b3 00    	mov    %edx,0xb3e510
  80db50:	eb 0e                	jmp    80db60 <thread_yield+0x6a>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80db52:	a1 10 e5 b3 00       	mov    0xb3e510,%eax
  80db57:	89 50 64             	mov    %edx,0x64(%eax)
	tq->tq_last = tc;
  80db5a:	89 15 10 e5 b3 00    	mov    %edx,0xb3e510
    }

    cur_tc = next_tc;
  80db60:	89 1d 08 e5 b3 00    	mov    %ebx,0xb3e508
    jos_longjmp(&cur_tc->tc_jb, 1);
  80db66:	8d 43 30             	lea    0x30(%ebx),%eax
  80db69:	ba 01 00 00 00       	mov    $0x1,%edx
  80db6e:	e8 ad 02 00 00       	call   80de20 <jos_longjmp>
}
  80db73:	83 c4 04             	add    $0x4,%esp
  80db76:	5b                   	pop    %ebx
  80db77:	5d                   	pop    %ebp
  80db78:	c3                   	ret    

0080db79 <thread_halt>:
  80db79:	55                   	push   %ebp
  80db7a:	89 e5                	mov    %esp,%ebp
  80db7c:	56                   	push   %esi
  80db7d:	53                   	push   %ebx
  80db7e:	83 ec 10             	sub    $0x10,%esp

static inline struct thread_context *
threadq_pop(struct thread_queue *tq)
{
    if (!tq->tq_first)
  80db81:	8b 1d 14 e5 b3 00    	mov    0xb3e514,%ebx
  80db87:	85 db                	test   %ebx,%ebx
  80db89:	74 3e                	je     80dbc9 <thread_halt+0x50>
	return 0;

    struct thread_context *tc = tq->tq_first;
    tq->tq_first = tc->tc_queue_link;
  80db8b:	8b 43 64             	mov    0x64(%ebx),%eax
  80db8e:	a3 14 e5 b3 00       	mov    %eax,0xb3e514
    tc->tc_queue_link = 0;
  80db93:	c7 43 64 00 00 00 00 	movl   $0x0,0x64(%ebx)
  80db9a:	83 7b 60 00          	cmpl   $0x0,0x60(%ebx)
  80db9e:	7e 16                	jle    80dbb6 <thread_halt+0x3d>
  80dba0:	be 00 00 00 00       	mov    $0x0,%esi
  80dba5:	8b 03                	mov    (%ebx),%eax
  80dba7:	89 04 24             	mov    %eax,(%esp)
  80dbaa:	ff 54 b3 50          	call   *0x50(%ebx,%esi,4)
  80dbae:	83 c6 01             	add    $0x1,%esi
  80dbb1:	39 73 60             	cmp    %esi,0x60(%ebx)
  80dbb4:	7f ef                	jg     80dba5 <thread_halt+0x2c>
  80dbb6:	8b 43 04             	mov    0x4(%ebx),%eax
  80dbb9:	89 04 24             	mov    %eax,(%esp)
  80dbbc:	e8 3f 51 ff ff       	call   802d00 <free>
  80dbc1:	89 1c 24             	mov    %ebx,(%esp)
  80dbc4:	e8 37 51 ff ff       	call   802d00 <free>
  80dbc9:	8b 15 08 e5 b3 00    	mov    0xb3e508,%edx

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80dbcf:	c7 42 64 00 00 00 00 	movl   $0x0,0x64(%edx)
    if (!tq->tq_first) {
  80dbd6:	83 3d 14 e5 b3 00 00 	cmpl   $0x0,0xb3e514
  80dbdd:	75 0e                	jne    80dbed <thread_halt+0x74>
	tq->tq_first = tc;
  80dbdf:	89 15 14 e5 b3 00    	mov    %edx,0xb3e514
	tq->tq_last = tc;
  80dbe5:	89 15 18 e5 b3 00    	mov    %edx,0xb3e518
  80dbeb:	eb 0e                	jmp    80dbfb <thread_halt+0x82>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80dbed:	a1 18 e5 b3 00       	mov    0xb3e518,%eax
  80dbf2:	89 50 64             	mov    %edx,0x64(%eax)
	tq->tq_last = tc;
  80dbf5:	89 15 18 e5 b3 00    	mov    %edx,0xb3e518
  80dbfb:	c7 05 08 e5 b3 00 00 	movl   $0x0,0xb3e508
  80dc02:	00 00 00 
  80dc05:	e8 ec fe ff ff       	call   80daf6 <thread_yield>
  80dc0a:	e8 61 2c ff ff       	call   800870 <exit>
  80dc0f:	83 c4 10             	add    $0x10,%esp
  80dc12:	5b                   	pop    %ebx
  80dc13:	5e                   	pop    %esi
  80dc14:	5d                   	pop    %ebp
  80dc15:	c3                   	ret    

0080dc16 <thread_entry>:
  80dc16:	55                   	push   %ebp
  80dc17:	89 e5                	mov    %esp,%ebp
  80dc19:	83 ec 08             	sub    $0x8,%esp
  80dc1c:	8b 15 08 e5 b3 00    	mov    0xb3e508,%edx
  80dc22:	8b 42 2c             	mov    0x2c(%edx),%eax
  80dc25:	89 04 24             	mov    %eax,(%esp)
  80dc28:	ff 52 28             	call   *0x28(%edx)
  80dc2b:	e8 49 ff ff ff       	call   80db79 <thread_halt>
  80dc30:	c9                   	leave  
  80dc31:	c3                   	ret    

0080dc32 <thread_create>:
  80dc32:	55                   	push   %ebp
  80dc33:	89 e5                	mov    %esp,%ebp
  80dc35:	57                   	push   %edi
  80dc36:	56                   	push   %esi
  80dc37:	53                   	push   %ebx
  80dc38:	83 ec 0c             	sub    $0xc,%esp
  80dc3b:	8b 7d 08             	mov    0x8(%ebp),%edi
  80dc3e:	c7 04 24 68 00 00 00 	movl   $0x68,(%esp)
  80dc45:	e8 8a 51 ff ff       	call   802dd4 <malloc>
  80dc4a:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
  80dc4f:	85 c0                	test   %eax,%eax
  80dc51:	0f 84 1b 01 00 00    	je     80dd72 <thread_create+0x140>
  80dc57:	89 c6                	mov    %eax,%esi
  80dc59:	c7 44 24 08 68 00 00 	movl   $0x68,0x8(%esp)
  80dc60:	00 
  80dc61:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80dc68:	00 
  80dc69:	89 04 24             	mov    %eax,(%esp)
  80dc6c:	e8 20 35 ff ff       	call   801191 <memset>
  80dc71:	c7 44 24 08 1f 00 00 	movl   $0x1f,0x8(%esp)
  80dc78:	00 
  80dc79:	8b 45 0c             	mov    0xc(%ebp),%eax
  80dc7c:	89 44 24 04          	mov    %eax,0x4(%esp)
  80dc80:	8d 46 08             	lea    0x8(%esi),%eax
  80dc83:	89 04 24             	mov    %eax,(%esp)
  80dc86:	e8 76 33 ff ff       	call   801001 <strncpy>
  80dc8b:	c6 46 27 00          	movb   $0x0,0x27(%esi)
  80dc8f:	8b 15 04 e5 b3 00    	mov    0xb3e504,%edx
  80dc95:	8d 42 01             	lea    0x1(%edx),%eax
  80dc98:	a3 04 e5 b3 00       	mov    %eax,0xb3e504
  80dc9d:	83 f8 ff             	cmp    $0xffffffff,%eax
  80dca0:	75 1c                	jne    80dcbe <thread_create+0x8c>
  80dca2:	c7 44 24 08 3a 3f 81 	movl   $0x813f3a,0x8(%esp)
  80dca9:	00 
  80dcaa:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
  80dcb1:	00 
  80dcb2:	c7 04 24 58 3f 81 00 	movl   $0x813f58,(%esp)
  80dcb9:	e8 ce 2b ff ff       	call   80088c <_panic>
  80dcbe:	89 16                	mov    %edx,(%esi)
  80dcc0:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  80dcc7:	e8 08 51 ff ff       	call   802dd4 <malloc>
  80dccc:	89 46 04             	mov    %eax,0x4(%esi)
  80dccf:	85 c0                	test   %eax,%eax
  80dcd1:	75 12                	jne    80dce5 <thread_create+0xb3>
  80dcd3:	89 34 24             	mov    %esi,(%esp)
  80dcd6:	e8 25 50 ff ff       	call   802d00 <free>
  80dcdb:	ba fc ff ff ff       	mov    $0xfffffffc,%edx
  80dce0:	e9 8d 00 00 00       	jmp    80dd72 <thread_create+0x140>
  80dce5:	8d 98 fc 0f 00 00    	lea    0xffc(%eax),%ebx
  80dceb:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80dcf2:	00 
  80dcf3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80dcfa:	00 
  80dcfb:	89 1c 24             	mov    %ebx,(%esp)
  80dcfe:	e8 8e 34 ff ff       	call   801191 <memset>
  80dd03:	c7 44 24 08 18 00 00 	movl   $0x18,0x8(%esp)
  80dd0a:	00 
  80dd0b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80dd12:	00 
  80dd13:	8d 46 30             	lea    0x30(%esi),%eax
  80dd16:	89 04 24             	mov    %eax,(%esp)
  80dd19:	e8 73 34 ff ff       	call   801191 <memset>
  80dd1e:	89 5e 34             	mov    %ebx,0x34(%esi)
  80dd21:	c7 46 30 16 dc 80 00 	movl   $0x80dc16,0x30(%esi)
  80dd28:	8b 45 10             	mov    0x10(%ebp),%eax
  80dd2b:	89 46 28             	mov    %eax,0x28(%esi)
  80dd2e:	8b 45 14             	mov    0x14(%ebp),%eax
  80dd31:	89 46 2c             	mov    %eax,0x2c(%esi)

static inline void
threadq_push(struct thread_queue *tq, struct thread_context *tc)
{
    tc->tc_queue_link = 0;
  80dd34:	c7 46 64 00 00 00 00 	movl   $0x0,0x64(%esi)
    if (!tq->tq_first) {
  80dd3b:	83 3d 0c e5 b3 00 00 	cmpl   $0x0,0xb3e50c
  80dd42:	75 0e                	jne    80dd52 <thread_create+0x120>
	tq->tq_first = tc;
  80dd44:	89 35 0c e5 b3 00    	mov    %esi,0xb3e50c
	tq->tq_last = tc;
  80dd4a:	89 35 10 e5 b3 00    	mov    %esi,0xb3e510
  80dd50:	eb 0e                	jmp    80dd60 <thread_create+0x12e>
    } else {
	tq->tq_last->tc_queue_link = tc;
  80dd52:	a1 10 e5 b3 00       	mov    0xb3e510,%eax
  80dd57:	89 70 64             	mov    %esi,0x64(%eax)
	tq->tq_last = tc;
  80dd5a:	89 35 10 e5 b3 00    	mov    %esi,0xb3e510
  80dd60:	ba 00 00 00 00       	mov    $0x0,%edx
  80dd65:	85 ff                	test   %edi,%edi
  80dd67:	74 09                	je     80dd72 <thread_create+0x140>
  80dd69:	8b 06                	mov    (%esi),%eax
  80dd6b:	89 07                	mov    %eax,(%edi)
  80dd6d:	ba 00 00 00 00       	mov    $0x0,%edx
  80dd72:	89 d0                	mov    %edx,%eax
  80dd74:	83 c4 0c             	add    $0xc,%esp
  80dd77:	5b                   	pop    %ebx
  80dd78:	5e                   	pop    %esi
  80dd79:	5f                   	pop    %edi
  80dd7a:	5d                   	pop    %ebp
  80dd7b:	c3                   	ret    

0080dd7c <thread_wait>:
  80dd7c:	55                   	push   %ebp
  80dd7d:	89 e5                	mov    %esp,%ebp
  80dd7f:	57                   	push   %edi
  80dd80:	56                   	push   %esi
  80dd81:	53                   	push   %ebx
  80dd82:	83 ec 0c             	sub    $0xc,%esp
  80dd85:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80dd88:	8b 7d 10             	mov    0x10(%ebp),%edi
  80dd8b:	e8 db 36 ff ff       	call   80146b <sys_time_msec>
  80dd90:	89 c6                	mov    %eax,%esi
  80dd92:	a1 08 e5 b3 00       	mov    0xb3e508,%eax
  80dd97:	89 58 48             	mov    %ebx,0x48(%eax)
  80dd9a:	c6 40 4c 00          	movb   $0x0,0x4c(%eax)
  80dd9e:	39 fe                	cmp    %edi,%esi
  80dda0:	72 06                	jb     80dda8 <thread_wait+0x2c>
  80dda2:	eb 30                	jmp    80ddd4 <thread_wait+0x58>
  80dda4:	39 c6                	cmp    %eax,%esi
  80dda6:	77 2c                	ja     80ddd4 <thread_wait+0x58>
  80dda8:	85 db                	test   %ebx,%ebx
  80ddaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80ddb0:	74 07                	je     80ddb9 <thread_wait+0x3d>
  80ddb2:	8b 03                	mov    (%ebx),%eax
  80ddb4:	3b 45 0c             	cmp    0xc(%ebp),%eax
  80ddb7:	75 1b                	jne    80ddd4 <thread_wait+0x58>
  80ddb9:	a1 08 e5 b3 00       	mov    0xb3e508,%eax
  80ddbe:	0f b6 40 4c          	movzbl 0x4c(%eax),%eax
  80ddc2:	84 c0                	test   %al,%al
  80ddc4:	75 0e                	jne    80ddd4 <thread_wait+0x58>
  80ddc6:	e8 2b fd ff ff       	call   80daf6 <thread_yield>
  80ddcb:	e8 9b 36 ff ff       	call   80146b <sys_time_msec>
  80ddd0:	39 c7                	cmp    %eax,%edi
  80ddd2:	77 d0                	ja     80dda4 <thread_wait+0x28>
  80ddd4:	a1 08 e5 b3 00       	mov    0xb3e508,%eax
  80ddd9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
  80dde0:	c6 40 4c 00          	movb   $0x0,0x4c(%eax)
  80dde4:	83 c4 0c             	add    $0xc,%esp
  80dde7:	5b                   	pop    %ebx
  80dde8:	5e                   	pop    %esi
  80dde9:	5f                   	pop    %edi
  80ddea:	5d                   	pop    %ebp
  80ddeb:	c3                   	ret    
  80ddec:	00 00                	add    %al,(%eax)
	...

0080ddf0 <jos_setjmp>:
        .text; _ALIGN_TEXT; .globl x; .type x,@function; x:


ENTRY(jos_setjmp)
	movl	4(%esp), %ecx	// jos_jmp_buf
  80ddf0:	8b 4c 24 04          	mov    0x4(%esp),%ecx

	movl	0(%esp), %edx	// %eip as pushed by call
  80ddf4:	8b 14 24             	mov    (%esp),%edx
	movl	%edx,  0(%ecx)
  80ddf7:	89 11                	mov    %edx,(%ecx)

	leal	4(%esp), %edx	// where %esp will point when we return
  80ddf9:	8d 54 24 04          	lea    0x4(%esp),%edx
	movl	%edx,  4(%ecx)
  80ddfd:	89 51 04             	mov    %edx,0x4(%ecx)

	movl	%ebp,  8(%ecx)
  80de00:	89 69 08             	mov    %ebp,0x8(%ecx)
	movl	%ebx, 12(%ecx)
  80de03:	89 59 0c             	mov    %ebx,0xc(%ecx)
	movl	%esi, 16(%ecx)
  80de06:	89 71 10             	mov    %esi,0x10(%ecx)
	movl	%edi, 20(%ecx)
  80de09:	89 79 14             	mov    %edi,0x14(%ecx)

	movl	$0, %eax
  80de0c:	b8 00 00 00 00       	mov    $0x0,%eax
	ret
  80de11:	c3                   	ret    
  80de12:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80de19:	8d bc 27 00 00 00 00 	lea    0x0(%edi),%edi

0080de20 <jos_longjmp>:

ENTRY(jos_longjmp)
	// %eax is the jos_jmp_buf*
	// %edx is the return value

	movl	 0(%eax), %ecx	// %eip
  80de20:	8b 08                	mov    (%eax),%ecx
	movl	 4(%eax), %esp
  80de22:	8b 60 04             	mov    0x4(%eax),%esp
	movl	 8(%eax), %ebp
  80de25:	8b 68 08             	mov    0x8(%eax),%ebp
	movl	12(%eax), %ebx
  80de28:	8b 58 0c             	mov    0xc(%eax),%ebx
	movl	16(%eax), %esi
  80de2b:	8b 70 10             	mov    0x10(%eax),%esi
	movl	20(%eax), %edi
  80de2e:	8b 78 14             	mov    0x14(%eax),%edi

	movl	%edx, %eax
  80de31:	89 d0                	mov    %edx,%eax
	jmp	*%ecx
  80de33:	ff e1                	jmp    *%ecx
  80de35:	00 00                	add    %al,(%eax)
	...

0080de38 <e2s>:
	cprintf("%s: %s\n", s, e2s(err));
}

const char *
e2s(int err) {
  80de38:	55                   	push   %ebp
  80de39:	89 e5                	mov    %esp,%ebp
  80de3b:	8b 45 08             	mov    0x8(%ebp),%eax
  80de3e:	8b 04 85 60 80 81 00 	mov    0x818060(,%eax,4),%eax
	return sys_errlist[err];
}
  80de45:	5d                   	pop    %ebp
  80de46:	c3                   	ret    

0080de47 <perror>:
  80de47:	55                   	push   %ebp
  80de48:	89 e5                	mov    %esp,%ebp
  80de4a:	83 ec 18             	sub    $0x18,%esp
  80de4d:	a1 60 e5 b3 00       	mov    0xb3e560,%eax
  80de52:	89 04 24             	mov    %eax,(%esp)
  80de55:	e8 de ff ff ff       	call   80de38 <e2s>
  80de5a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80de5e:	8b 45 08             	mov    0x8(%ebp),%eax
  80de61:	89 44 24 04          	mov    %eax,0x4(%esp)
  80de65:	c7 04 24 73 3f 81 00 	movl   $0x813f73,(%esp)
  80de6c:	e8 e8 2a ff ff       	call   800959 <cprintf>
  80de71:	c9                   	leave  
  80de72:	c3                   	ret    
	...

0080de80 <jif_init>:
 */

err_t
jif_init(struct netif *netif)
{
  80de80:	55                   	push   %ebp
  80de81:	89 e5                	mov    %esp,%ebp
  80de83:	83 ec 28             	sub    $0x28,%esp
  80de86:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80de89:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80de8c:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80de8f:	8b 75 08             	mov    0x8(%ebp),%esi
    struct jif *jif;
    envid_t *output_envid; 

    jif = mem_malloc(sizeof(struct jif));
  80de92:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  80de99:	e8 52 8e ff ff       	call   806cf0 <mem_malloc>
  80de9e:	89 c7                	mov    %eax,%edi

    if (jif == NULL) {
  80dea0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80dea5:	85 ff                	test   %edi,%edi
  80dea7:	0f 84 8a 00 00 00    	je     80df37 <jif_init+0xb7>
	LWIP_DEBUGF(NETIF_DEBUG, ("jif_init: out of memory\n"));
	return ERR_MEM;
    }

    output_envid = (envid_t *)netif->state;
  80dead:	8b 5e 1c             	mov    0x1c(%esi),%ebx

    netif->state = jif;
  80deb0:	89 7e 1c             	mov    %edi,0x1c(%esi)
    netif->output = jif_output;
  80deb3:	c7 46 14 5d e0 80 00 	movl   $0x80e05d,0x14(%esi)
    netif->linkoutput = low_level_output;
  80deba:	c7 46 18 44 df 80 00 	movl   $0x80df44,0x18(%esi)
    memcpy(&netif->name[0], "en", 2);
  80dec1:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
  80dec8:	00 
  80dec9:	c7 44 24 04 8b 28 81 	movl   $0x81288b,0x4(%esp)
  80ded0:	00 
  80ded1:	8d 46 2f             	lea    0x2f(%esi),%eax
  80ded4:	89 04 24             	mov    %eax,(%esp)
  80ded7:	e8 8c 33 ff ff       	call   801268 <memcpy>

    jif->ethaddr = (struct eth_addr *)&(netif->hwaddr[0]);
  80dedc:	8d 46 25             	lea    0x25(%esi),%eax
  80dedf:	89 07                	mov    %eax,(%edi)
    jif->envid = *output_envid; 
  80dee1:	8b 03                	mov    (%ebx),%eax
  80dee3:	89 47 04             	mov    %eax,0x4(%edi)
  80dee6:	c6 46 24 06          	movb   $0x6,0x24(%esi)
  80deea:	66 c7 46 2c dc 05    	movw   $0x5dc,0x2c(%esi)
  80def0:	c6 46 2e 02          	movb   $0x2,0x2e(%esi)
  80def4:	c6 46 25 52          	movb   $0x52,0x25(%esi)
  80def8:	c6 46 26 54          	movb   $0x54,0x26(%esi)
  80defc:	c6 46 27 00          	movb   $0x0,0x27(%esi)
  80df00:	c6 46 28 12          	movb   $0x12,0x28(%esi)
  80df04:	c6 46 29 34          	movb   $0x34,0x29(%esi)
  80df08:	c6 46 2a 56          	movb   $0x56,0x2a(%esi)

    low_level_init(netif);

    etharp_init();

    // qemu user-net is dumb; if the host OS does not send and ARP request
    // first, the qemu will send packets destined for the host using the mac
    // addr 00:00:00:00:00; do a arp request for the user-net NAT at 10.0.2.2
    uint32_t ipaddr = inet_addr("10.0.2.2");
  80df0c:	c7 04 24 2c 21 81 00 	movl   $0x81212c,(%esp)
  80df13:	e8 60 cb ff ff       	call   80aa78 <inet_addr>
  80df18:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
    etharp_query(netif, (struct ip_addr *) &ipaddr, 0);
  80df1b:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  80df1e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80df25:	00 
  80df26:	89 44 24 04          	mov    %eax,0x4(%esp)
  80df2a:	89 34 24             	mov    %esi,(%esp)
  80df2d:	e8 2f e9 ff ff       	call   80c861 <etharp_query>
  80df32:	b8 00 00 00 00       	mov    $0x0,%eax

    return ERR_OK;
}
  80df37:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80df3a:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80df3d:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80df40:	89 ec                	mov    %ebp,%esp
  80df42:	5d                   	pop    %ebp
  80df43:	c3                   	ret    

0080df44 <low_level_output>:
  80df44:	55                   	push   %ebp
  80df45:	89 e5                	mov    %esp,%ebp
  80df47:	57                   	push   %edi
  80df48:	56                   	push   %esi
  80df49:	53                   	push   %ebx
  80df4a:	83 ec 1c             	sub    $0x1c,%esp
  80df4d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
  80df50:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  80df57:	00 
  80df58:	c7 44 24 04 00 00 00 	movl   $0x10000000,0x4(%esp)
  80df5f:	10 
  80df60:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80df67:	e8 9e 37 ff ff       	call   80170a <sys_page_alloc>
  80df6c:	85 c0                	test   %eax,%eax
  80df6e:	79 1c                	jns    80df8c <low_level_output+0x48>
  80df70:	c7 44 24 08 6c 44 81 	movl   $0x81446c,0x8(%esp)
  80df77:	00 
  80df78:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
  80df7f:	00 
  80df80:	c7 04 24 55 44 81 00 	movl   $0x814455,(%esp)
  80df87:	e8 00 29 ff ff       	call   80088c <_panic>
  80df8c:	8b 45 08             	mov    0x8(%ebp),%eax
  80df8f:	8b 78 1c             	mov    0x1c(%eax),%edi
  80df92:	be 00 00 00 00       	mov    $0x0,%esi
  80df97:	85 db                	test   %ebx,%ebx
  80df99:	74 78                	je     80e013 <low_level_output+0xcf>
  80df9b:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  80df9f:	0f b7 ca             	movzwl %dx,%ecx
  80dfa2:	be 00 00 00 00       	mov    $0x0,%esi
  80dfa7:	81 f9 d0 07 00 00    	cmp    $0x7d0,%ecx
  80dfad:	7f 13                	jg     80dfc2 <low_level_output+0x7e>
  80dfaf:	eb 35                	jmp    80dfe6 <low_level_output+0xa2>
  80dfb1:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  80dfb5:	0f b7 ca             	movzwl %dx,%ecx
  80dfb8:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
  80dfbb:	3d d0 07 00 00       	cmp    $0x7d0,%eax
  80dfc0:	7e 29                	jle    80dfeb <low_level_output+0xa7>
  80dfc2:	89 74 24 10          	mov    %esi,0x10(%esp)
  80dfc6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
  80dfca:	c7 44 24 08 94 44 81 	movl   $0x814494,0x8(%esp)
  80dfd1:	00 
  80dfd2:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
  80dfd9:	00 
  80dfda:	c7 04 24 55 44 81 00 	movl   $0x814455,(%esp)
  80dfe1:	e8 a6 28 ff ff       	call   80088c <_panic>
  80dfe6:	be 00 00 00 00       	mov    $0x0,%esi
  80dfeb:	0f b7 c2             	movzwl %dx,%eax
  80dfee:	89 44 24 08          	mov    %eax,0x8(%esp)
  80dff2:	8b 43 04             	mov    0x4(%ebx),%eax
  80dff5:	89 44 24 04          	mov    %eax,0x4(%esp)
  80dff9:	8d 86 04 00 00 10    	lea    0x10000004(%esi),%eax
  80dfff:	89 04 24             	mov    %eax,(%esp)
  80e002:	e8 61 32 ff ff       	call   801268 <memcpy>
  80e007:	0f b7 43 0a          	movzwl 0xa(%ebx),%eax
  80e00b:	01 c6                	add    %eax,%esi
  80e00d:	8b 1b                	mov    (%ebx),%ebx
  80e00f:	85 db                	test   %ebx,%ebx
  80e011:	75 9e                	jne    80dfb1 <low_level_output+0x6d>
  80e013:	89 35 00 00 00 10    	mov    %esi,0x10000000
  80e019:	c7 44 24 0c 07 00 00 	movl   $0x7,0xc(%esp)
  80e020:	00 
  80e021:	c7 44 24 08 00 00 00 	movl   $0x10000000,0x8(%esp)
  80e028:	10 
  80e029:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
  80e030:	00 
  80e031:	8b 47 04             	mov    0x4(%edi),%eax
  80e034:	89 04 24             	mov    %eax,(%esp)
  80e037:	e8 44 3d ff ff       	call   801d80 <ipc_send>
  80e03c:	c7 44 24 04 00 00 00 	movl   $0x10000000,0x4(%esp)
  80e043:	10 
  80e044:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80e04b:	e8 fe 35 ff ff       	call   80164e <sys_page_unmap>
  80e050:	b8 00 00 00 00       	mov    $0x0,%eax
  80e055:	83 c4 1c             	add    $0x1c,%esp
  80e058:	5b                   	pop    %ebx
  80e059:	5e                   	pop    %esi
  80e05a:	5f                   	pop    %edi
  80e05b:	5d                   	pop    %ebp
  80e05c:	c3                   	ret    

0080e05d <jif_output>:
  80e05d:	55                   	push   %ebp
  80e05e:	89 e5                	mov    %esp,%ebp
  80e060:	83 ec 18             	sub    $0x18,%esp
  80e063:	8b 45 10             	mov    0x10(%ebp),%eax
  80e066:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e06a:	8b 45 0c             	mov    0xc(%ebp),%eax
  80e06d:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e071:	8b 45 08             	mov    0x8(%ebp),%eax
  80e074:	89 04 24             	mov    %eax,(%esp)
  80e077:	e8 03 ea ff ff       	call   80ca7f <etharp_output>
  80e07c:	0f be c0             	movsbl %al,%eax
  80e07f:	c9                   	leave  
  80e080:	c3                   	ret    

0080e081 <jif_input>:
  80e081:	55                   	push   %ebp
  80e082:	89 e5                	mov    %esp,%ebp
  80e084:	57                   	push   %edi
  80e085:	56                   	push   %esi
  80e086:	53                   	push   %ebx
  80e087:	83 ec 1c             	sub    $0x1c,%esp
  80e08a:	8b 75 0c             	mov    0xc(%ebp),%esi
  80e08d:	8b 45 08             	mov    0x8(%ebp),%eax
  80e090:	8b 40 1c             	mov    0x1c(%eax),%eax
  80e093:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80e096:	0f b7 1e             	movzwl (%esi),%ebx
  80e099:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
  80e0a0:	00 
  80e0a1:	0f b7 c3             	movzwl %bx,%eax
  80e0a4:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e0a8:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80e0af:	e8 a3 9c ff ff       	call   807d57 <pbuf_alloc>
  80e0b4:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80e0b7:	85 c0                	test   %eax,%eax
  80e0b9:	0f 84 c5 00 00 00    	je     80e184 <jif_input+0x103>
  80e0bf:	83 c6 04             	add    $0x4,%esi
  80e0c2:	89 75 ec             	mov    %esi,0xffffffec(%ebp)
  80e0c5:	89 c6                	mov    %eax,%esi
  80e0c7:	bf 00 00 00 00       	mov    $0x0,%edi
  80e0cc:	0f bf db             	movswl %bx,%ebx
  80e0cf:	89 5d e4             	mov    %ebx,0xffffffe4(%ebp)
  80e0d2:	0f b7 46 0a          	movzwl 0xa(%esi),%eax
  80e0d6:	8b 5d e4             	mov    0xffffffe4(%ebp),%ebx
  80e0d9:	29 fb                	sub    %edi,%ebx
  80e0db:	39 c3                	cmp    %eax,%ebx
  80e0dd:	7e 02                	jle    80e0e1 <jif_input+0x60>
  80e0df:	89 c3                	mov    %eax,%ebx
  80e0e1:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  80e0e5:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  80e0e8:	01 f8                	add    %edi,%eax
  80e0ea:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e0ee:	8b 46 04             	mov    0x4(%esi),%eax
  80e0f1:	89 04 24             	mov    %eax,(%esp)
  80e0f4:	e8 6f 31 ff ff       	call   801268 <memcpy>
  80e0f9:	01 df                	add    %ebx,%edi
  80e0fb:	8b 36                	mov    (%esi),%esi
  80e0fd:	85 f6                	test   %esi,%esi
  80e0ff:	74 63                	je     80e164 <jif_input+0xe3>
  80e101:	eb cf                	jmp    80e0d2 <jif_input+0x51>
  80e103:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80e106:	89 54 24 04          	mov    %edx,0x4(%esp)
  80e10a:	8b 45 08             	mov    0x8(%ebp),%eax
  80e10d:	89 04 24             	mov    %eax,(%esp)
  80e110:	e8 34 ec ff ff       	call   80cd49 <etharp_ip_input>
  80e115:	c7 44 24 04 f2 ff ff 	movl   $0xfffffff2,0x4(%esp)
  80e11c:	ff 
  80e11d:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80e120:	89 14 24             	mov    %edx,(%esp)
  80e123:	e8 00 96 ff ff       	call   807728 <pbuf_header>
  80e128:	8b 45 08             	mov    0x8(%ebp),%eax
  80e12b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e12f:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80e132:	89 14 24             	mov    %edx,(%esp)
  80e135:	ff 50 10             	call   *0x10(%eax)
  80e138:	eb 4a                	jmp    80e184 <jif_input+0x103>
  80e13a:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  80e13d:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e141:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  80e144:	8b 02                	mov    (%edx),%eax
  80e146:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e14a:	8b 45 08             	mov    0x8(%ebp),%eax
  80e14d:	89 04 24             	mov    %eax,(%esp)
  80e150:	e8 c4 ec ff ff       	call   80ce19 <etharp_arp_input>
  80e155:	eb 2d                	jmp    80e184 <jif_input+0x103>
  80e157:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80e15a:	89 14 24             	mov    %edx,(%esp)
  80e15d:	e8 32 99 ff ff       	call   807a94 <pbuf_free>
  80e162:	eb 20                	jmp    80e184 <jif_input+0x103>
  80e164:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80e167:	8b 42 04             	mov    0x4(%edx),%eax
  80e16a:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80e16e:	89 04 24             	mov    %eax,(%esp)
  80e171:	e8 e9 c6 ff ff       	call   80a85f <htons>
  80e176:	66 3d 00 08          	cmp    $0x800,%ax
  80e17a:	74 87                	je     80e103 <jif_input+0x82>
  80e17c:	66 3d 06 08          	cmp    $0x806,%ax
  80e180:	75 d5                	jne    80e157 <jif_input+0xd6>
  80e182:	eb b6                	jmp    80e13a <jif_input+0xb9>
  80e184:	83 c4 1c             	add    $0x1c,%esp
  80e187:	5b                   	pop    %ebx
  80e188:	5e                   	pop    %esi
  80e189:	5f                   	pop    %edi
  80e18a:	5d                   	pop    %ebp
  80e18b:	c3                   	ret    
  80e18c:	00 00                	add    %al,(%eax)
	...

0080e190 <netconn_type>:
 * @return the netconn_type of conn
 */
enum netconn_type
netconn_type(struct netconn *conn)
{
  80e190:	55                   	push   %ebp
  80e191:	89 e5                	mov    %esp,%ebp
  80e193:	83 ec 18             	sub    $0x18,%esp
  80e196:	8b 45 08             	mov    0x8(%ebp),%eax
  LWIP_ERROR("netconn_type: invalid conn", (conn != NULL), return NETCONN_INVALID;);
  80e199:	85 c0                	test   %eax,%eax
  80e19b:	75 1c                	jne    80e1b9 <netconn_type+0x29>
  80e19d:	c7 44 24 08 bd 44 81 	movl   $0x8144bd,0x8(%esp)
  80e1a4:	00 
  80e1a5:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
  80e1ac:	00 
  80e1ad:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e1b4:	e8 d3 26 ff ff       	call   80088c <_panic>
  80e1b9:	8b 00                	mov    (%eax),%eax
  return conn->type;
}
  80e1bb:	c9                   	leave  
  80e1bc:	c3                   	ret    

0080e1bd <netconn_close>:

/**
 * Get the local or remote IP address and port of a netconn.
 * For RAW netconns, this returns the protocol instead of a port!
 *
 * @param conn the netconn to query
 * @param addr a pointer to which to save the IP address
 * @param port a pointer to which to save the port (or protocol for RAW)
 * @param local 1 to get the local IP address, 0 to get the remote one
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, struct ip_addr *addr, u16_t *port, u8_t local)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);

  msg.function = do_getaddr;
  msg.msg.conn = conn;
  msg.msg.msg.ad.ipaddr = addr;
  msg.msg.msg.ad.port = port;
  msg.msg.msg.ad.local = local;
  TCPIP_APIMSG(&msg);

  return conn->err;
}

/**
 * Bind a netconn to a specific local IP address and port.
 * Binding one netconn twice might not always be checked correctly!
 *
 * @param conn the netconn to bind
 * @param addr the local IP address to bind the netconn to (use IP_ADDR_ANY
 *             to bind to all addresses)
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, struct ip_addr *addr, u16_t port)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);

  msg.function = do_bind;
  msg.msg.conn = conn;
  msg.msg.msg.bc.ipaddr = addr;
  msg.msg.msg.bc.port = port;
  TCPIP_APIMSG(&msg);
  return conn->err;
}

/**
 * Connect a netconn to a specific remote IP address and port.
 *
 * @param conn the netconn to connect
 * @param addr the remote IP address to connect to
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, struct ip_addr *addr, u16_t port)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);

  msg.function = do_connect;
  msg.msg.conn = conn;
  msg.msg.msg.bc.ipaddr = addr;
  msg.msg.msg.bc.port = port;
  /* This is the only function which need to not block tcpip_thread */
  tcpip_apimsg(&msg);
  return conn->err;
}

/**
 * Disconnect a netconn from its current peer (only valid for UDP netconns).
 *
 * @param conn the netconn to disconnect
 * @return TODO: return value is not set here...
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);

  msg.function = do_disconnect;
  msg.msg.conn = conn;
  TCPIP_APIMSG(&msg);
  return conn->err;
}

/**
 * Set a TCP netconn into listen mode
 *
 * @param conn the tcp netconn to set to listen mode
 * @param backlog the listen backlog, only used if TCP_LISTEN_BACKLOG==1
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  struct api_msg msg;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);

  msg.function = do_listen;
  msg.msg.conn = conn;
#if TCP_LISTEN_BACKLOG
  msg.msg.msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  TCPIP_APIMSG(&msg);
  return conn->err;
}

/**
 * Accept a new connection on a TCP listening netconn.
 *
 * @param conn the TCP listen netconn
 * @return the newly accepted netconn or NULL on timeout
 */
struct netconn *
netconn_accept(struct netconn *conn)
{
  struct netconn *newconn;

  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return NULL;);
  LWIP_ERROR("netconn_accept: invalid acceptmbox", (conn->acceptmbox != SYS_MBOX_NULL), return NULL;);

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(conn->acceptmbox, (void *)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    newconn = NULL;
  } else
#else
  sys_arch_mbox_fetch(conn->acceptmbox, (void *)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);

#if TCP_LISTEN_BACKLOG
    if (newconn != NULL) {
      /* Let the stack know that we have accepted the connection. */
      struct api_msg msg;
      msg.function = do_recv;
      msg.msg.conn = conn;
      TCPIP_APIMSG(&msg);
    }
#endif /* TCP_LISTEN_BACKLOG */
  }

  return newconn;
}

/**
 * Receive data (in form of a netbuf containing a packet buffer) from a netconn
 *
 * @param conn the netconn from which to receive data
 * @return a new netbuf containing received data or NULL on memory error or timeout
 */
struct netbuf *
netconn_recv(struct netconn *conn)
{
  struct api_msg msg;
  struct netbuf *buf = NULL;
  struct pbuf *p;
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid conn",  (conn != NULL), return NULL;);

  if (conn->recvmbox == SYS_MBOX_NULL) {
    /* @todo: should calling netconn_recv on a TCP listen conn be fatal (ERR_CONN)?? */
    /* TCP listen conns don't have a recvmbox! */
    conn->err = ERR_CONN;
    return NULL;
  }

  if (ERR_IS_FATAL(conn->err)) {
    return NULL;
  }

  if (conn->type == NETCONN_TCP) {
#if LWIP_TCP
    if (conn->state == NETCONN_LISTEN) {
      /* @todo: should calling netconn_recv on a TCP listen conn be fatal?? */
      conn->err = ERR_CONN;
      return NULL;
    }

    buf = memp_malloc(MEMP_NETBUF);

    if (buf == NULL) {
      conn->err = ERR_MEM;
      return NULL;
    }

#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(conn->recvmbox, (void *)&p, conn->recv_timeout)==SYS_ARCH_TIMEOUT) {
      conn->err = ERR_TIMEOUT;
      p = NULL;
    }
#else
    sys_arch_mbox_fetch(conn->recvmbox, (void *)&p, 0);
#endif /* LWIP_SO_RCVTIMEO*/

    if (p != NULL) {
      len = p->tot_len;
      SYS_ARCH_DEC(conn->recv_avail, len);
    } else {
      len = 0;
    }

    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (p == NULL) {
      memp_free(MEMP_NETBUF, buf);
      /* Avoid to lose any previous error code */
      if (conn->err == ERR_OK) {
        conn->err = ERR_CLSD;
      }
      return NULL;
    }

    buf->p = p;
    buf->ptr = p;
    buf->port = 0;
    buf->addr = NULL;

    /* Let the stack know that we have taken the data. */
    msg.function = do_recv;
    msg.msg.conn = conn;
    if (buf != NULL) {
      msg.msg.msg.r.len = buf->p->tot_len;
    } else {
      msg.msg.msg.r.len = 1;
    }
    TCPIP_APIMSG(&msg);
#endif /* LWIP_TCP */
  } else {
#if (LWIP_UDP || LWIP_RAW)
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(conn->recvmbox, (void *)&buf, conn->recv_timeout)==SYS_ARCH_TIMEOUT) {
      buf = NULL;
    }
#else
    sys_arch_mbox_fetch(conn->recvmbox, (void *)&buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/
    if (buf!=NULL) {
      SYS_ARCH_DEC(conn->recv_avail, buf->p->tot_len);
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, buf->p->tot_len);
    }
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv: received %p (err %d)\n", (void *)buf, conn->err));

  return buf;
}

/**
 * Send data (in form of a netbuf) to a specific remote IP address and port.
 * Only to be used for UDP and RAW netconns (not TCP).
 *
 * @param conn the netconn over which to send data
 * @param buf a netbuf containing the data to send
 * @param addr the remote IP address to which to send the data
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, struct ip_addr *addr, u16_t port)
{
  if (buf != NULL) {
    buf->addr = addr;
    buf->port = port;
    return netconn_send(conn, buf);
  }
  return ERR_VAL;
}

/**
 * Send data over a UDP or RAW netconn (that is already connected).
 *
 * @param conn the UDP or RAW netconn over which to send data
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %d bytes\n", buf->p->tot_len));
  msg.function = do_send;
  msg.msg.conn = conn;
  msg.msg.msg.b = buf;
  TCPIP_APIMSG(&msg);
  return conn->err;
}

/**
 * Send data over a TCP netconn.
 *
 * @param conn the TCP netconn over which to send data
 * @param dataptr pointer to the application buffer that contains the data to send
 * @param size size of the application data to send
 * @param apiflags combination of following flags :
 * - NETCONN_COPY (0x01) data will be copied into memory belonging to the stack
 * - NETCONN_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write(struct netconn *conn, const void *dataptr, int size, u8_t apiflags)
{
  struct api_msg msg;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_write: invalid conn->type",  (conn->type == NETCONN_TCP), return ERR_VAL;);

  msg.function = do_write;
  msg.msg.conn = conn;
  msg.msg.msg.w.dataptr = dataptr;
  msg.msg.msg.w.apiflags = apiflags;
  msg.msg.msg.w.len = size;
  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&msg);
  return conn->err;
}

/**
 * Close a TCP netconn (doesn't delete it).
 *
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  80e1bd:	55                   	push   %ebp
  80e1be:	89 e5                	mov    %esp,%ebp
  80e1c0:	53                   	push   %ebx
  80e1c1:	83 ec 34             	sub    $0x34,%esp
  80e1c4:	8b 5d 08             	mov    0x8(%ebp),%ebx
  struct api_msg msg;

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  80e1c7:	85 db                	test   %ebx,%ebx
  80e1c9:	75 1c                	jne    80e1e7 <netconn_close+0x2a>
  80e1cb:	c7 44 24 08 ef 44 81 	movl   $0x8144ef,0x8(%esp)
  80e1d2:	00 
  80e1d3:	c7 44 24 04 ed 01 00 	movl   $0x1ed,0x4(%esp)
  80e1da:	00 
  80e1db:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e1e2:	e8 a5 26 ff ff       	call   80088c <_panic>

  msg.function = do_close;
  80e1e7:	c7 45 e8 d6 eb 80 00 	movl   $0x80ebd6,0xffffffe8(%ebp)
  msg.msg.conn = conn;
  80e1ee:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  tcpip_apimsg(&msg);
  80e1f1:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e1f4:	89 04 24             	mov    %eax,(%esp)
  80e1f7:	e8 98 6b ff ff       	call   804d94 <tcpip_apimsg>
  80e1fc:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  return conn->err;
}
  80e200:	83 c4 34             	add    $0x34,%esp
  80e203:	5b                   	pop    %ebx
  80e204:	5d                   	pop    %ebp
  80e205:	c3                   	ret    

0080e206 <netconn_write>:
  80e206:	55                   	push   %ebp
  80e207:	89 e5                	mov    %esp,%ebp
  80e209:	53                   	push   %ebx
  80e20a:	83 ec 34             	sub    $0x34,%esp
  80e20d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e210:	0f b6 55 14          	movzbl 0x14(%ebp),%edx
  80e214:	85 db                	test   %ebx,%ebx
  80e216:	75 1c                	jne    80e234 <netconn_write+0x2e>
  80e218:	c7 44 24 08 0b 45 81 	movl   $0x81450b,0x8(%esp)
  80e21f:	00 
  80e220:	c7 44 24 04 d3 01 00 	movl   $0x1d3,0x4(%esp)
  80e227:	00 
  80e228:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e22f:	e8 58 26 ff ff       	call   80088c <_panic>
  80e234:	83 3b 10             	cmpl   $0x10,(%ebx)
  80e237:	74 1c                	je     80e255 <netconn_write+0x4f>
  80e239:	c7 44 24 08 58 46 81 	movl   $0x814658,0x8(%esp)
  80e240:	00 
  80e241:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
  80e248:	00 
  80e249:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e250:	e8 37 26 ff ff       	call   80088c <_panic>
  80e255:	c7 45 e8 79 ee 80 00 	movl   $0x80ee79,0xffffffe8(%ebp)
  80e25c:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e25f:	8b 45 0c             	mov    0xc(%ebp),%eax
  80e262:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80e265:	88 55 f8             	mov    %dl,0xfffffff8(%ebp)
  80e268:	8b 45 10             	mov    0x10(%ebp),%eax
  80e26b:	89 45 f4             	mov    %eax,0xfffffff4(%ebp)
  80e26e:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e271:	89 04 24             	mov    %eax,(%esp)
  80e274:	e8 1b 6b ff ff       	call   804d94 <tcpip_apimsg>
  80e279:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e27d:	83 c4 34             	add    $0x34,%esp
  80e280:	5b                   	pop    %ebx
  80e281:	5d                   	pop    %ebp
  80e282:	c3                   	ret    

0080e283 <netconn_send>:
  80e283:	55                   	push   %ebp
  80e284:	89 e5                	mov    %esp,%ebp
  80e286:	53                   	push   %ebx
  80e287:	83 ec 34             	sub    $0x34,%esp
  80e28a:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e28d:	85 db                	test   %ebx,%ebx
  80e28f:	75 1c                	jne    80e2ad <netconn_send+0x2a>
  80e291:	c7 44 24 08 27 45 81 	movl   $0x814527,0x8(%esp)
  80e298:	00 
  80e299:	c7 44 24 04 b9 01 00 	movl   $0x1b9,0x4(%esp)
  80e2a0:	00 
  80e2a1:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e2a8:	e8 df 25 ff ff       	call   80088c <_panic>
  80e2ad:	c7 45 e8 02 f0 80 00 	movl   $0x80f002,0xffffffe8(%ebp)
  80e2b4:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e2b7:	8b 45 0c             	mov    0xc(%ebp),%eax
  80e2ba:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80e2bd:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e2c0:	89 04 24             	mov    %eax,(%esp)
  80e2c3:	e8 cc 6a ff ff       	call   804d94 <tcpip_apimsg>
  80e2c8:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e2cc:	83 c4 34             	add    $0x34,%esp
  80e2cf:	5b                   	pop    %ebx
  80e2d0:	5d                   	pop    %ebp
  80e2d1:	c3                   	ret    

0080e2d2 <netconn_sendto>:
  80e2d2:	55                   	push   %ebp
  80e2d3:	89 e5                	mov    %esp,%ebp
  80e2d5:	83 ec 08             	sub    $0x8,%esp
  80e2d8:	8b 55 0c             	mov    0xc(%ebp),%edx
  80e2db:	0f b7 4d 14          	movzwl 0x14(%ebp),%ecx
  80e2df:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  80e2e4:	85 d2                	test   %edx,%edx
  80e2e6:	74 1c                	je     80e304 <netconn_sendto+0x32>
  80e2e8:	8b 45 10             	mov    0x10(%ebp),%eax
  80e2eb:	89 42 08             	mov    %eax,0x8(%edx)
  80e2ee:	66 89 4a 0c          	mov    %cx,0xc(%edx)
  80e2f2:	89 54 24 04          	mov    %edx,0x4(%esp)
  80e2f6:	8b 45 08             	mov    0x8(%ebp),%eax
  80e2f9:	89 04 24             	mov    %eax,(%esp)
  80e2fc:	e8 82 ff ff ff       	call   80e283 <netconn_send>
  80e301:	0f be c0             	movsbl %al,%eax
  80e304:	c9                   	leave  
  80e305:	c3                   	ret    

0080e306 <netconn_listen_with_backlog>:
  80e306:	55                   	push   %ebp
  80e307:	89 e5                	mov    %esp,%ebp
  80e309:	53                   	push   %ebx
  80e30a:	83 ec 34             	sub    $0x34,%esp
  80e30d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e310:	85 db                	test   %ebx,%ebx
  80e312:	75 1c                	jne    80e330 <netconn_listen_with_backlog+0x2a>
  80e314:	c7 44 24 08 42 45 81 	movl   $0x814542,0x8(%esp)
  80e31b:	00 
  80e31c:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  80e323:	00 
  80e324:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e32b:	e8 5c 25 ff ff       	call   80088c <_panic>
  80e330:	c7 45 e8 c9 f0 80 00 	movl   $0x80f0c9,0xffffffe8(%ebp)
  80e337:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e33a:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e33d:	89 04 24             	mov    %eax,(%esp)
  80e340:	e8 4f 6a ff ff       	call   804d94 <tcpip_apimsg>
  80e345:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e349:	83 c4 34             	add    $0x34,%esp
  80e34c:	5b                   	pop    %ebx
  80e34d:	5d                   	pop    %ebp
  80e34e:	c3                   	ret    

0080e34f <netconn_disconnect>:
  80e34f:	55                   	push   %ebp
  80e350:	89 e5                	mov    %esp,%ebp
  80e352:	53                   	push   %ebx
  80e353:	83 ec 34             	sub    $0x34,%esp
  80e356:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e359:	85 db                	test   %ebx,%ebx
  80e35b:	75 1c                	jne    80e379 <netconn_disconnect+0x2a>
  80e35d:	c7 44 24 08 7c 46 81 	movl   $0x81467c,0x8(%esp)
  80e364:	00 
  80e365:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
  80e36c:	00 
  80e36d:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e374:	e8 13 25 ff ff       	call   80088c <_panic>
  80e379:	c7 45 e8 89 f2 80 00 	movl   $0x80f289,0xffffffe8(%ebp)
  80e380:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e383:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e386:	89 04 24             	mov    %eax,(%esp)
  80e389:	e8 06 6a ff ff       	call   804d94 <tcpip_apimsg>
  80e38e:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e392:	83 c4 34             	add    $0x34,%esp
  80e395:	5b                   	pop    %ebx
  80e396:	5d                   	pop    %ebp
  80e397:	c3                   	ret    

0080e398 <netconn_connect>:
  80e398:	55                   	push   %ebp
  80e399:	89 e5                	mov    %esp,%ebp
  80e39b:	53                   	push   %ebx
  80e39c:	83 ec 34             	sub    $0x34,%esp
  80e39f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e3a2:	0f b7 55 10          	movzwl 0x10(%ebp),%edx
  80e3a6:	85 db                	test   %ebx,%ebx
  80e3a8:	75 1c                	jne    80e3c6 <netconn_connect+0x2e>
  80e3aa:	c7 44 24 08 5f 45 81 	movl   $0x81455f,0x8(%esp)
  80e3b1:	00 
  80e3b2:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
  80e3b9:	00 
  80e3ba:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e3c1:	e8 c6 24 ff ff       	call   80088c <_panic>
  80e3c6:	c7 45 e8 bf f2 80 00 	movl   $0x80f2bf,0xffffffe8(%ebp)
  80e3cd:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e3d0:	8b 45 0c             	mov    0xc(%ebp),%eax
  80e3d3:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80e3d6:	66 89 55 f4          	mov    %dx,0xfffffff4(%ebp)
  80e3da:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e3dd:	89 04 24             	mov    %eax,(%esp)
  80e3e0:	e8 af 69 ff ff       	call   804d94 <tcpip_apimsg>
  80e3e5:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e3e9:	83 c4 34             	add    $0x34,%esp
  80e3ec:	5b                   	pop    %ebx
  80e3ed:	5d                   	pop    %ebp
  80e3ee:	c3                   	ret    

0080e3ef <netconn_bind>:
  80e3ef:	55                   	push   %ebp
  80e3f0:	89 e5                	mov    %esp,%ebp
  80e3f2:	53                   	push   %ebx
  80e3f3:	83 ec 34             	sub    $0x34,%esp
  80e3f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e3f9:	0f b7 55 10          	movzwl 0x10(%ebp),%edx
  80e3fd:	85 db                	test   %ebx,%ebx
  80e3ff:	75 1c                	jne    80e41d <netconn_bind+0x2e>
  80e401:	c7 44 24 08 7d 45 81 	movl   $0x81457d,0x8(%esp)
  80e408:	00 
  80e409:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
  80e410:	00 
  80e411:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e418:	e8 6f 24 ff ff       	call   80088c <_panic>
  80e41d:	c7 45 e8 91 f3 80 00 	movl   $0x80f391,0xffffffe8(%ebp)
  80e424:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e427:	8b 45 0c             	mov    0xc(%ebp),%eax
  80e42a:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80e42d:	66 89 55 f4          	mov    %dx,0xfffffff4(%ebp)
  80e431:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e434:	89 04 24             	mov    %eax,(%esp)
  80e437:	e8 58 69 ff ff       	call   804d94 <tcpip_apimsg>
  80e43c:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e440:	83 c4 34             	add    $0x34,%esp
  80e443:	5b                   	pop    %ebx
  80e444:	5d                   	pop    %ebp
  80e445:	c3                   	ret    

0080e446 <netconn_getaddr>:
  80e446:	55                   	push   %ebp
  80e447:	89 e5                	mov    %esp,%ebp
  80e449:	53                   	push   %ebx
  80e44a:	83 ec 34             	sub    $0x34,%esp
  80e44d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e450:	8b 55 0c             	mov    0xc(%ebp),%edx
  80e453:	8b 4d 10             	mov    0x10(%ebp),%ecx
  80e456:	0f b6 45 14          	movzbl 0x14(%ebp),%eax
  80e45a:	85 db                	test   %ebx,%ebx
  80e45c:	75 1c                	jne    80e47a <netconn_getaddr+0x34>
  80e45e:	c7 44 24 08 98 45 81 	movl   $0x814598,0x8(%esp)
  80e465:	00 
  80e466:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  80e46d:	00 
  80e46e:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e475:	e8 12 24 ff ff       	call   80088c <_panic>
  80e47a:	85 d2                	test   %edx,%edx
  80e47c:	75 1c                	jne    80e49a <netconn_getaddr+0x54>
  80e47e:	c7 44 24 08 b6 45 81 	movl   $0x8145b6,0x8(%esp)
  80e485:	00 
  80e486:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
  80e48d:	00 
  80e48e:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e495:	e8 f2 23 ff ff       	call   80088c <_panic>
  80e49a:	85 c9                	test   %ecx,%ecx
  80e49c:	75 1c                	jne    80e4ba <netconn_getaddr+0x74>
  80e49e:	c7 44 24 08 d4 45 81 	movl   $0x8145d4,0x8(%esp)
  80e4a5:	00 
  80e4a6:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
  80e4ad:	00 
  80e4ae:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e4b5:	e8 d2 23 ff ff       	call   80088c <_panic>
  80e4ba:	c7 45 e8 60 e8 80 00 	movl   $0x80e860,0xffffffe8(%ebp)
  80e4c1:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e4c4:	89 55 f0             	mov    %edx,0xfffffff0(%ebp)
  80e4c7:	89 4d f4             	mov    %ecx,0xfffffff4(%ebp)
  80e4ca:	88 45 f8             	mov    %al,0xfffffff8(%ebp)
  80e4cd:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e4d0:	89 04 24             	mov    %eax,(%esp)
  80e4d3:	e8 bc 68 ff ff       	call   804d94 <tcpip_apimsg>
  80e4d8:	0f be 43 0c          	movsbl 0xc(%ebx),%eax
  80e4dc:	83 c4 34             	add    $0x34,%esp
  80e4df:	5b                   	pop    %ebx
  80e4e0:	5d                   	pop    %ebp
  80e4e1:	c3                   	ret    

0080e4e2 <netconn_accept>:
  80e4e2:	55                   	push   %ebp
  80e4e3:	89 e5                	mov    %esp,%ebp
  80e4e5:	53                   	push   %ebx
  80e4e6:	83 ec 24             	sub    $0x24,%esp
  80e4e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e4ec:	85 db                	test   %ebx,%ebx
  80e4ee:	75 1c                	jne    80e50c <netconn_accept+0x2a>
  80e4f0:	c7 44 24 08 f2 45 81 	movl   $0x8145f2,0x8(%esp)
  80e4f7:	00 
  80e4f8:	c7 44 24 04 10 01 00 	movl   $0x110,0x4(%esp)
  80e4ff:	00 
  80e500:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e507:	e8 80 23 ff ff       	call   80088c <_panic>
  80e50c:	8b 53 18             	mov    0x18(%ebx),%edx
  80e50f:	83 fa ff             	cmp    $0xffffffff,%edx
  80e512:	75 1c                	jne    80e530 <netconn_accept+0x4e>
  80e514:	c7 44 24 08 a0 46 81 	movl   $0x8146a0,0x8(%esp)
  80e51b:	00 
  80e51c:	c7 44 24 04 11 01 00 	movl   $0x111,0x4(%esp)
  80e523:	00 
  80e524:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e52b:	e8 5c 23 ff ff       	call   80088c <_panic>
  80e530:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  80e533:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e53a:	00 
  80e53b:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e53f:	89 14 24             	mov    %edx,(%esp)
  80e542:	e8 d5 f2 ff ff       	call   80d81c <sys_arch_mbox_fetch>
  80e547:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80e54a:	85 c0                	test   %eax,%eax
  80e54c:	74 15                	je     80e563 <netconn_accept+0x81>
  80e54e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e555:	00 
  80e556:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80e55d:	00 
  80e55e:	89 1c 24             	mov    %ebx,(%esp)
  80e561:	ff d0                	call   *%eax
  80e563:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  80e566:	83 c4 24             	add    $0x24,%esp
  80e569:	5b                   	pop    %ebx
  80e56a:	5d                   	pop    %ebp
  80e56b:	c3                   	ret    

0080e56c <netconn_recv>:
  80e56c:	55                   	push   %ebp
  80e56d:	89 e5                	mov    %esp,%ebp
  80e56f:	53                   	push   %ebx
  80e570:	83 ec 34             	sub    $0x34,%esp
  80e573:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e576:	c7 45 e4 00 00 00 00 	movl   $0x0,0xffffffe4(%ebp)
  80e57d:	85 db                	test   %ebx,%ebx
  80e57f:	75 1c                	jne    80e59d <netconn_recv+0x31>
  80e581:	c7 44 24 08 0f 46 81 	movl   $0x81460f,0x8(%esp)
  80e588:	00 
  80e589:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
  80e590:	00 
  80e591:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e598:	e8 ef 22 ff ff       	call   80088c <_panic>
  80e59d:	8b 53 14             	mov    0x14(%ebx),%edx
  80e5a0:	83 fa ff             	cmp    $0xffffffff,%edx
  80e5a3:	75 0e                	jne    80e5b3 <netconn_recv+0x47>
  80e5a5:	c6 43 0c f8          	movb   $0xf8,0xc(%ebx)
  80e5a9:	b8 00 00 00 00       	mov    $0x0,%eax
  80e5ae:	e9 5f 01 00 00       	jmp    80e712 <netconn_recv+0x1a6>
  80e5b3:	80 7b 0c fc          	cmpb   $0xfc,0xc(%ebx)
  80e5b7:	0f 8c 50 01 00 00    	jl     80e70d <netconn_recv+0x1a1>
  80e5bd:	83 3b 10             	cmpl   $0x10,(%ebx)
  80e5c0:	0f 85 fc 00 00 00    	jne    80e6c2 <netconn_recv+0x156>
  80e5c6:	83 7b 04 02          	cmpl   $0x2,0x4(%ebx)
  80e5ca:	75 0e                	jne    80e5da <netconn_recv+0x6e>
  80e5cc:	c6 43 0c f8          	movb   $0xf8,0xc(%ebx)
  80e5d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80e5d5:	e9 38 01 00 00       	jmp    80e712 <netconn_recv+0x1a6>
  80e5da:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80e5e1:	e8 79 8d ff ff       	call   80735f <memp_malloc>
  80e5e6:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  80e5e9:	85 c0                	test   %eax,%eax
  80e5eb:	75 09                	jne    80e5f6 <netconn_recv+0x8a>
  80e5ed:	c6 43 0c ff          	movb   $0xff,0xc(%ebx)
  80e5f1:	e9 1c 01 00 00       	jmp    80e712 <netconn_recv+0x1a6>
  80e5f6:	8d 45 e0             	lea    0xffffffe0(%ebp),%eax
  80e5f9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e600:	00 
  80e601:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e605:	8b 43 14             	mov    0x14(%ebx),%eax
  80e608:	89 04 24             	mov    %eax,(%esp)
  80e60b:	e8 0c f2 ff ff       	call   80d81c <sys_arch_mbox_fetch>
  80e610:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80e613:	b8 00 00 00 00       	mov    $0x0,%eax
  80e618:	85 d2                	test   %edx,%edx
  80e61a:	74 08                	je     80e624 <netconn_recv+0xb8>
  80e61c:	0f b7 42 08          	movzwl 0x8(%edx),%eax
  80e620:	66 29 43 20          	sub    %ax,0x20(%ebx)
  80e624:	8b 53 2c             	mov    0x2c(%ebx),%edx
  80e627:	85 d2                	test   %edx,%edx
  80e629:	74 14                	je     80e63f <netconn_recv+0xd3>
  80e62b:	0f b7 c0             	movzwl %ax,%eax
  80e62e:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e632:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80e639:	00 
  80e63a:	89 1c 24             	mov    %ebx,(%esp)
  80e63d:	ff d2                	call   *%edx
  80e63f:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80e642:	85 d2                	test   %edx,%edx
  80e644:	75 2b                	jne    80e671 <netconn_recv+0x105>
  80e646:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e649:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e64d:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80e654:	e8 c3 8c ff ff       	call   80731c <memp_free>
  80e659:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  80e65d:	0f 85 aa 00 00 00    	jne    80e70d <netconn_recv+0x1a1>
  80e663:	c6 43 0c f9          	movb   $0xf9,0xc(%ebx)
  80e667:	b8 00 00 00 00       	mov    $0x0,%eax
  80e66c:	e9 a1 00 00 00       	jmp    80e712 <netconn_recv+0x1a6>
  80e671:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e674:	89 10                	mov    %edx,(%eax)
  80e676:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80e679:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e67c:	89 50 04             	mov    %edx,0x4(%eax)
  80e67f:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e682:	66 c7 40 0c 00 00    	movw   $0x0,0xc(%eax)
  80e688:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e68b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  80e692:	c7 45 e8 c1 ef 80 00 	movl   $0x80efc1,0xffffffe8(%ebp)
  80e699:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e69c:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e69f:	85 c0                	test   %eax,%eax
  80e6a1:	74 0c                	je     80e6af <netconn_recv+0x143>
  80e6a3:	8b 00                	mov    (%eax),%eax
  80e6a5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80e6a9:	66 89 45 f0          	mov    %ax,0xfffffff0(%ebp)
  80e6ad:	eb 06                	jmp    80e6b5 <netconn_recv+0x149>
  80e6af:	66 c7 45 f0 01 00    	movw   $0x1,0xfffffff0(%ebp)
  80e6b5:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e6b8:	89 04 24             	mov    %eax,(%esp)
  80e6bb:	e8 d4 66 ff ff       	call   804d94 <tcpip_apimsg>
  80e6c0:	eb 46                	jmp    80e708 <netconn_recv+0x19c>
  80e6c2:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  80e6c5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80e6cc:	00 
  80e6cd:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e6d1:	89 14 24             	mov    %edx,(%esp)
  80e6d4:	e8 43 f1 ff ff       	call   80d81c <sys_arch_mbox_fetch>
  80e6d9:	8b 55 e4             	mov    0xffffffe4(%ebp),%edx
  80e6dc:	85 d2                	test   %edx,%edx
  80e6de:	74 28                	je     80e708 <netconn_recv+0x19c>
  80e6e0:	8b 02                	mov    (%edx),%eax
  80e6e2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80e6e6:	66 29 43 20          	sub    %ax,0x20(%ebx)
  80e6ea:	8b 4b 2c             	mov    0x2c(%ebx),%ecx
  80e6ed:	85 c9                	test   %ecx,%ecx
  80e6ef:	74 17                	je     80e708 <netconn_recv+0x19c>
  80e6f1:	8b 02                	mov    (%edx),%eax
  80e6f3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  80e6f7:	89 44 24 08          	mov    %eax,0x8(%esp)
  80e6fb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  80e702:	00 
  80e703:	89 1c 24             	mov    %ebx,(%esp)
  80e706:	ff d1                	call   *%ecx
  80e708:	8b 45 e4             	mov    0xffffffe4(%ebp),%eax
  80e70b:	eb 05                	jmp    80e712 <netconn_recv+0x1a6>
  80e70d:	b8 00 00 00 00       	mov    $0x0,%eax
  80e712:	83 c4 34             	add    $0x34,%esp
  80e715:	5b                   	pop    %ebx
  80e716:	5d                   	pop    %ebp
  80e717:	c3                   	ret    

0080e718 <netconn_delete>:
  80e718:	55                   	push   %ebp
  80e719:	89 e5                	mov    %esp,%ebp
  80e71b:	53                   	push   %ebx
  80e71c:	83 ec 24             	sub    $0x24,%esp
  80e71f:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80e722:	85 db                	test   %ebx,%ebx
  80e724:	74 24                	je     80e74a <netconn_delete+0x32>
  80e726:	c7 45 e8 34 f4 80 00 	movl   $0x80f434,0xffffffe8(%ebp)
  80e72d:	89 5d ec             	mov    %ebx,0xffffffec(%ebp)
  80e730:	8d 45 e8             	lea    0xffffffe8(%ebp),%eax
  80e733:	89 04 24             	mov    %eax,(%esp)
  80e736:	e8 59 66 ff ff       	call   804d94 <tcpip_apimsg>
  80e73b:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  80e742:	89 1c 24             	mov    %ebx,(%esp)
  80e745:	e8 a5 0d 00 00       	call   80f4ef <netconn_free>
  80e74a:	b8 00 00 00 00       	mov    $0x0,%eax
  80e74f:	83 c4 24             	add    $0x24,%esp
  80e752:	5b                   	pop    %ebx
  80e753:	5d                   	pop    %ebp
  80e754:	c3                   	ret    

0080e755 <netconn_new_with_proto_and_callback>:
  80e755:	55                   	push   %ebp
  80e756:	89 e5                	mov    %esp,%ebp
  80e758:	56                   	push   %esi
  80e759:	53                   	push   %ebx
  80e75a:	83 ec 30             	sub    $0x30,%esp
  80e75d:	8b 75 0c             	mov    0xc(%ebp),%esi
  80e760:	8b 45 10             	mov    0x10(%ebp),%eax
  80e763:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e767:	8b 45 08             	mov    0x8(%ebp),%eax
  80e76a:	89 04 24             	mov    %eax,(%esp)
  80e76d:	e8 71 0f 00 00       	call   80f6e3 <netconn_alloc>
  80e772:	89 c3                	mov    %eax,%ebx
  80e774:	85 c0                	test   %eax,%eax
  80e776:	0f 84 d6 00 00 00    	je     80e852 <netconn_new_with_proto_and_callback+0xfd>
  80e77c:	c7 45 e4 5c f8 80 00 	movl   $0x80f85c,0xffffffe4(%ebp)
  80e783:	89 f0                	mov    %esi,%eax
  80e785:	88 45 ec             	mov    %al,0xffffffec(%ebp)
  80e788:	89 5d e8             	mov    %ebx,0xffffffe8(%ebp)
  80e78b:	8d 45 e4             	lea    0xffffffe4(%ebp),%eax
  80e78e:	89 04 24             	mov    %eax,(%esp)
  80e791:	e8 fe 65 ff ff       	call   804d94 <tcpip_apimsg>
  80e796:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
  80e79a:	0f 84 b2 00 00 00    	je     80e852 <netconn_new_with_proto_and_callback+0xfd>
  80e7a0:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80e7a4:	74 1c                	je     80e7c2 <netconn_new_with_proto_and_callback+0x6d>
  80e7a6:	c7 44 24 08 c4 46 81 	movl   $0x8146c4,0x8(%esp)
  80e7ad:	00 
  80e7ae:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
  80e7b5:	00 
  80e7b6:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e7bd:	e8 ca 20 ff ff       	call   80088c <_panic>
  80e7c2:	8b 43 10             	mov    0x10(%ebx),%eax
  80e7c5:	83 f8 ff             	cmp    $0xffffffff,%eax
  80e7c8:	75 1c                	jne    80e7e6 <netconn_new_with_proto_and_callback+0x91>
  80e7ca:	c7 44 24 08 2a 46 81 	movl   $0x81462a,0x8(%esp)
  80e7d1:	00 
  80e7d2:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
  80e7d9:	00 
  80e7da:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e7e1:	e8 a6 20 ff ff       	call   80088c <_panic>
  80e7e6:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80e7ea:	75 1c                	jne    80e808 <netconn_new_with_proto_and_callback+0xb3>
  80e7ec:	c7 44 24 08 43 46 81 	movl   $0x814643,0x8(%esp)
  80e7f3:	00 
  80e7f4:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
  80e7fb:	00 
  80e7fc:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e803:	e8 84 20 ff ff       	call   80088c <_panic>
  80e808:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80e80c:	74 1c                	je     80e82a <netconn_new_with_proto_and_callback+0xd5>
  80e80e:	c7 44 24 08 e8 46 81 	movl   $0x8146e8,0x8(%esp)
  80e815:	00 
  80e816:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
  80e81d:	00 
  80e81e:	c7 04 24 d8 44 81 00 	movl   $0x8144d8,(%esp)
  80e825:	e8 62 20 ff ff       	call   80088c <_panic>
  80e82a:	89 04 24             	mov    %eax,(%esp)
  80e82d:	e8 2e e9 ff ff       	call   80d160 <sys_sem_free>
  80e832:	8b 43 14             	mov    0x14(%ebx),%eax
  80e835:	89 04 24             	mov    %eax,(%esp)
  80e838:	e8 9c e9 ff ff       	call   80d1d9 <sys_mbox_free>
  80e83d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80e841:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80e848:	e8 cf 8a ff ff       	call   80731c <memp_free>
  80e84d:	bb 00 00 00 00       	mov    $0x0,%ebx
  80e852:	89 d8                	mov    %ebx,%eax
  80e854:	83 c4 30             	add    $0x30,%esp
  80e857:	5b                   	pop    %ebx
  80e858:	5e                   	pop    %esi
  80e859:	5d                   	pop    %ebp
  80e85a:	c3                   	ret    
  80e85b:	00 00                	add    %al,(%eax)
  80e85d:	00 00                	add    %al,(%eax)
	...

0080e860 <do_getaddr>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_getaddr(struct api_msg_msg *msg)
{
  80e860:	55                   	push   %ebp
  80e861:	89 e5                	mov    %esp,%ebp
  80e863:	53                   	push   %ebx
  80e864:	83 ec 04             	sub    $0x4,%esp
  80e867:	8b 4d 08             	mov    0x8(%ebp),%ecx
  if (msg->conn->pcb.ip != NULL) {
  80e86a:	8b 11                	mov    (%ecx),%edx
  80e86c:	8b 42 08             	mov    0x8(%edx),%eax
  80e86f:	85 c0                	test   %eax,%eax
  80e871:	0f 84 9f 00 00 00    	je     80e916 <do_getaddr+0xb6>
    *(msg->msg.ad.ipaddr) = (msg->msg.ad.local?msg->conn->pcb.ip->local_ip:msg->conn->pcb.ip->remote_ip);
  80e877:	8b 51 04             	mov    0x4(%ecx),%edx
  80e87a:	80 79 0c 00          	cmpb   $0x0,0xc(%ecx)
  80e87e:	74 06                	je     80e886 <do_getaddr+0x26>
  80e880:	8b 00                	mov    (%eax),%eax
  80e882:	89 02                	mov    %eax,(%edx)
  80e884:	eb 05                	jmp    80e88b <do_getaddr+0x2b>
  80e886:	8b 40 04             	mov    0x4(%eax),%eax
  80e889:	89 02                	mov    %eax,(%edx)
    
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  80e88b:	8b 11                	mov    (%ecx),%edx
  80e88d:	8b 02                	mov    (%edx),%eax
  80e88f:	25 f0 00 00 00       	and    $0xf0,%eax
  80e894:	83 f8 20             	cmp    $0x20,%eax
  80e897:	74 2f                	je     80e8c8 <do_getaddr+0x68>
  80e899:	83 f8 40             	cmp    $0x40,%eax
  80e89c:	74 07                	je     80e8a5 <do_getaddr+0x45>
  80e89e:	83 f8 10             	cmp    $0x10,%eax
  80e8a1:	75 77                	jne    80e91a <do_getaddr+0xba>
  80e8a3:	eb 53                	jmp    80e8f8 <do_getaddr+0x98>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  80e8a5:	80 79 0c 00          	cmpb   $0x0,0xc(%ecx)
  80e8a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80e8b0:	74 10                	je     80e8c2 <do_getaddr+0x62>
        *(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  80e8b2:	8b 41 08             	mov    0x8(%ecx),%eax
  80e8b5:	8b 52 08             	mov    0x8(%edx),%edx
  80e8b8:	66 0f b6 52 10       	movzbw 0x10(%edx),%dx
  80e8bd:	66 89 10             	mov    %dx,(%eax)
  80e8c0:	eb 58                	jmp    80e91a <do_getaddr+0xba>
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->conn->err = ERR_CONN;
  80e8c2:	c6 42 0c f8          	movb   $0xf8,0xc(%edx)
  80e8c6:	eb 52                	jmp    80e91a <do_getaddr+0xba>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  80e8c8:	80 79 0c 00          	cmpb   $0x0,0xc(%ecx)
  80e8cc:	74 0f                	je     80e8dd <do_getaddr+0x7d>
        *(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  80e8ce:	8b 41 08             	mov    0x8(%ecx),%eax
  80e8d1:	8b 52 08             	mov    0x8(%edx),%edx
  80e8d4:	0f b7 52 12          	movzwl 0x12(%edx),%edx
  80e8d8:	66 89 10             	mov    %dx,(%eax)
  80e8db:	eb 3d                	jmp    80e91a <do_getaddr+0xba>
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  80e8dd:	8b 42 08             	mov    0x8(%edx),%eax
  80e8e0:	f6 40 10 04          	testb  $0x4,0x10(%eax)
  80e8e4:	75 06                	jne    80e8ec <do_getaddr+0x8c>
          msg->conn->err = ERR_CONN;
  80e8e6:	c6 42 0c f8          	movb   $0xf8,0xc(%edx)
  80e8ea:	eb 2e                	jmp    80e91a <do_getaddr+0xba>
        } else {
          *(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  80e8ec:	8b 51 08             	mov    0x8(%ecx),%edx
  80e8ef:	0f b7 40 14          	movzwl 0x14(%eax),%eax
  80e8f3:	66 89 02             	mov    %ax,(%edx)
  80e8f6:	eb 22                	jmp    80e91a <do_getaddr+0xba>
        }
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      *(msg->msg.ad.port) = (msg->msg.ad.local?msg->conn->pcb.tcp->local_port:msg->conn->pcb.tcp->remote_port);
  80e8f8:	8b 59 08             	mov    0x8(%ecx),%ebx
  80e8fb:	80 79 0c 00          	cmpb   $0x0,0xc(%ecx)
  80e8ff:	74 09                	je     80e90a <do_getaddr+0xaa>
  80e901:	8b 42 08             	mov    0x8(%edx),%eax
  80e904:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
  80e908:	eb 07                	jmp    80e911 <do_getaddr+0xb1>
  80e90a:	8b 42 08             	mov    0x8(%edx),%eax
  80e90d:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
  80e911:	66 89 03             	mov    %ax,(%ebx)
  80e914:	eb 04                	jmp    80e91a <do_getaddr+0xba>
      break;
#endif /* LWIP_TCP */
    }
  } else {
    msg->conn->err = ERR_CONN;
  80e916:	c6 42 0c f8          	movb   $0xf8,0xc(%edx)
  }
  TCPIP_APIMSG_ACK(msg);
  80e91a:	8b 01                	mov    (%ecx),%eax
  80e91c:	8b 40 10             	mov    0x10(%eax),%eax
  80e91f:	89 04 24             	mov    %eax,(%esp)
  80e922:	e8 8b ee ff ff       	call   80d7b2 <sys_sem_signal>
}
  80e927:	83 c4 04             	add    $0x4,%esp
  80e92a:	5b                   	pop    %ebx
  80e92b:	5d                   	pop    %ebp
  80e92c:	c3                   	ret    

0080e92d <setup_tcp>:
  80e92d:	55                   	push   %ebp
  80e92e:	89 e5                	mov    %esp,%ebp
  80e930:	53                   	push   %ebx
  80e931:	83 ec 14             	sub    $0x14,%esp
  80e934:	8b 58 08             	mov    0x8(%eax),%ebx
  80e937:	89 44 24 04          	mov    %eax,0x4(%esp)
  80e93b:	89 1c 24             	mov    %ebx,(%esp)
  80e93e:	e8 d6 9a ff ff       	call   808419 <tcp_arg>
  80e943:	c7 44 24 04 bb f1 80 	movl   $0x80f1bb,0x4(%esp)
  80e94a:	00 
  80e94b:	89 1c 24             	mov    %ebx,(%esp)
  80e94e:	e8 d4 9a ff ff       	call   808427 <tcp_recv>
  80e953:	c7 44 24 04 c6 ee 80 	movl   $0x80eec6,0x4(%esp)
  80e95a:	00 
  80e95b:	89 1c 24             	mov    %ebx,(%esp)
  80e95e:	e8 d5 9a ff ff       	call   808438 <tcp_sent>
  80e963:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80e96a:	00 
  80e96b:	c7 44 24 04 6f ef 80 	movl   $0x80ef6f,0x4(%esp)
  80e972:	00 
  80e973:	89 1c 24             	mov    %ebx,(%esp)
  80e976:	e8 ed 9a ff ff       	call   808468 <tcp_poll>
  80e97b:	c7 44 24 04 0f ec 80 	movl   $0x80ec0f,0x4(%esp)
  80e982:	00 
  80e983:	89 1c 24             	mov    %ebx,(%esp)
  80e986:	e8 be 9a ff ff       	call   808449 <tcp_err>
  80e98b:	83 c4 14             	add    $0x14,%esp
  80e98e:	5b                   	pop    %ebx
  80e98f:	5d                   	pop    %ebp
  80e990:	c3                   	ret    

0080e991 <do_connected>:
  80e991:	55                   	push   %ebp
  80e992:	89 e5                	mov    %esp,%ebp
  80e994:	53                   	push   %ebx
  80e995:	83 ec 04             	sub    $0x4,%esp
  80e998:	8b 55 08             	mov    0x8(%ebp),%edx
  80e99b:	0f b6 4d 10          	movzbl 0x10(%ebp),%ecx
  80e99f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  80e9a4:	85 d2                	test   %edx,%edx
  80e9a6:	74 2c                	je     80e9d4 <do_connected+0x43>
  80e9a8:	89 d3                	mov    %edx,%ebx
  80e9aa:	88 4a 0c             	mov    %cl,0xc(%edx)
  80e9ad:	83 3a 10             	cmpl   $0x10,(%edx)
  80e9b0:	75 0b                	jne    80e9bd <do_connected+0x2c>
  80e9b2:	84 c9                	test   %cl,%cl
  80e9b4:	75 07                	jne    80e9bd <do_connected+0x2c>
  80e9b6:	89 d0                	mov    %edx,%eax
  80e9b8:	e8 70 ff ff ff       	call   80e92d <setup_tcp>
  80e9bd:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80e9c4:	8b 43 10             	mov    0x10(%ebx),%eax
  80e9c7:	89 04 24             	mov    %eax,(%esp)
  80e9ca:	e8 e3 ed ff ff       	call   80d7b2 <sys_sem_signal>
  80e9cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80e9d4:	83 c4 04             	add    $0x4,%esp
  80e9d7:	5b                   	pop    %ebx
  80e9d8:	5d                   	pop    %ebp
  80e9d9:	c3                   	ret    

0080e9da <do_close_internal>:
  80e9da:	55                   	push   %ebp
  80e9db:	89 e5                	mov    %esp,%ebp
  80e9dd:	53                   	push   %ebx
  80e9de:	83 ec 14             	sub    $0x14,%esp
  80e9e1:	89 c3                	mov    %eax,%ebx
  80e9e3:	85 c0                	test   %eax,%eax
  80e9e5:	75 1c                	jne    80ea03 <do_close_internal+0x29>
  80e9e7:	c7 44 24 08 35 45 81 	movl   $0x814535,0x8(%esp)
  80e9ee:	00 
  80e9ef:	c7 44 24 04 53 02 00 	movl   $0x253,0x4(%esp)
  80e9f6:	00 
  80e9f7:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80e9fe:	e8 89 1e ff ff       	call   80088c <_panic>
  80ea03:	83 38 10             	cmpl   $0x10,(%eax)
  80ea06:	74 1c                	je     80ea24 <do_close_internal+0x4a>
  80ea08:	c7 44 24 08 20 47 81 	movl   $0x814720,0x8(%esp)
  80ea0f:	00 
  80ea10:	c7 44 24 04 54 02 00 	movl   $0x254,0x4(%esp)
  80ea17:	00 
  80ea18:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ea1f:	e8 68 1e ff ff       	call   80088c <_panic>
  80ea24:	83 78 04 04          	cmpl   $0x4,0x4(%eax)
  80ea28:	74 1c                	je     80ea46 <do_close_internal+0x6c>
  80ea2a:	c7 44 24 08 ec 47 81 	movl   $0x8147ec,0x8(%esp)
  80ea31:	00 
  80ea32:	c7 44 24 04 55 02 00 	movl   $0x255,0x4(%esp)
  80ea39:	00 
  80ea3a:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ea41:	e8 46 1e ff ff       	call   80088c <_panic>
  80ea46:	8b 40 08             	mov    0x8(%eax),%eax
  80ea49:	85 c0                	test   %eax,%eax
  80ea4b:	75 1c                	jne    80ea69 <do_close_internal+0x8f>
  80ea4d:	c7 44 24 08 3e 47 81 	movl   $0x81473e,0x8(%esp)
  80ea54:	00 
  80ea55:	c7 44 24 04 56 02 00 	movl   $0x256,0x4(%esp)
  80ea5c:	00 
  80ea5d:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ea64:	e8 23 1e ff ff       	call   80088c <_panic>
  80ea69:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ea70:	00 
  80ea71:	89 04 24             	mov    %eax,(%esp)
  80ea74:	e8 a0 99 ff ff       	call   808419 <tcp_arg>
  80ea79:	8b 43 08             	mov    0x8(%ebx),%eax
  80ea7c:	83 78 10 01          	cmpl   $0x1,0x10(%eax)
  80ea80:	75 12                	jne    80ea94 <do_close_internal+0xba>
  80ea82:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ea89:	00 
  80ea8a:	89 04 24             	mov    %eax,(%esp)
  80ea8d:	e8 c8 99 ff ff       	call   80845a <tcp_accept>
  80ea92:	eb 64                	jmp    80eaf8 <do_close_internal+0x11e>
  80ea94:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ea9b:	00 
  80ea9c:	89 04 24             	mov    %eax,(%esp)
  80ea9f:	e8 83 99 ff ff       	call   808427 <tcp_recv>
  80eaa4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80eaab:	00 
  80eaac:	8b 43 08             	mov    0x8(%ebx),%eax
  80eaaf:	89 04 24             	mov    %eax,(%esp)
  80eab2:	e8 a3 99 ff ff       	call   80845a <tcp_accept>
  80eab7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80eabe:	00 
  80eabf:	8b 43 08             	mov    0x8(%ebx),%eax
  80eac2:	89 04 24             	mov    %eax,(%esp)
  80eac5:	e8 6e 99 ff ff       	call   808438 <tcp_sent>
  80eaca:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80ead1:	00 
  80ead2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ead9:	00 
  80eada:	8b 43 08             	mov    0x8(%ebx),%eax
  80eadd:	89 04 24             	mov    %eax,(%esp)
  80eae0:	e8 83 99 ff ff       	call   808468 <tcp_poll>
  80eae5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80eaec:	00 
  80eaed:	8b 43 08             	mov    0x8(%ebx),%eax
  80eaf0:	89 04 24             	mov    %eax,(%esp)
  80eaf3:	e8 51 99 ff ff       	call   808449 <tcp_err>
  80eaf8:	8b 43 08             	mov    0x8(%ebx),%eax
  80eafb:	89 04 24             	mov    %eax,(%esp)
  80eafe:	e8 0c a8 ff ff       	call   80930f <tcp_close>
  80eb03:	84 c0                	test   %al,%al
  80eb05:	75 57                	jne    80eb5e <do_close_internal+0x184>
  80eb07:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80eb0e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  80eb15:	c6 43 0c 00          	movb   $0x0,0xc(%ebx)
  80eb19:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80eb1c:	85 c0                	test   %eax,%eax
  80eb1e:	74 31                	je     80eb51 <do_close_internal+0x177>
  80eb20:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80eb27:	00 
  80eb28:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80eb2f:	00 
  80eb30:	89 1c 24             	mov    %ebx,(%esp)
  80eb33:	ff d0                	call   *%eax
  80eb35:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80eb38:	85 c0                	test   %eax,%eax
  80eb3a:	74 15                	je     80eb51 <do_close_internal+0x177>
  80eb3c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80eb43:	00 
  80eb44:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80eb4b:	00 
  80eb4c:	89 1c 24             	mov    %ebx,(%esp)
  80eb4f:	ff d0                	call   *%eax
  80eb51:	8b 43 10             	mov    0x10(%ebx),%eax
  80eb54:	89 04 24             	mov    %eax,(%esp)
  80eb57:	e8 56 ec ff ff       	call   80d7b2 <sys_sem_signal>
  80eb5c:	eb 72                	jmp    80ebd0 <do_close_internal+0x1f6>
  80eb5e:	8b 43 08             	mov    0x8(%ebx),%eax
  80eb61:	83 78 10 01          	cmpl   $0x1,0x10(%eax)
  80eb65:	75 1c                	jne    80eb83 <do_close_internal+0x1a9>
  80eb67:	c7 44 24 08 10 48 81 	movl   $0x814810,0x8(%esp)
  80eb6e:	00 
  80eb6f:	c7 44 24 04 75 02 00 	movl   $0x275,0x4(%esp)
  80eb76:	00 
  80eb77:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80eb7e:	e8 09 1d ff ff       	call   80088c <_panic>
  80eb83:	c7 44 24 04 c6 ee 80 	movl   $0x80eec6,0x4(%esp)
  80eb8a:	00 
  80eb8b:	89 04 24             	mov    %eax,(%esp)
  80eb8e:	e8 a5 98 ff ff       	call   808438 <tcp_sent>
  80eb93:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  80eb9a:	00 
  80eb9b:	c7 44 24 04 6f ef 80 	movl   $0x80ef6f,0x4(%esp)
  80eba2:	00 
  80eba3:	8b 43 08             	mov    0x8(%ebx),%eax
  80eba6:	89 04 24             	mov    %eax,(%esp)
  80eba9:	e8 ba 98 ff ff       	call   808468 <tcp_poll>
  80ebae:	c7 44 24 04 0f ec 80 	movl   $0x80ec0f,0x4(%esp)
  80ebb5:	00 
  80ebb6:	8b 43 08             	mov    0x8(%ebx),%eax
  80ebb9:	89 04 24             	mov    %eax,(%esp)
  80ebbc:	e8 88 98 ff ff       	call   808449 <tcp_err>
  80ebc1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80ebc5:	8b 43 08             	mov    0x8(%ebx),%eax
  80ebc8:	89 04 24             	mov    %eax,(%esp)
  80ebcb:	e8 49 98 ff ff       	call   808419 <tcp_arg>
  80ebd0:	83 c4 14             	add    $0x14,%esp
  80ebd3:	5b                   	pop    %ebx
  80ebd4:	5d                   	pop    %ebp
  80ebd5:	c3                   	ret    

0080ebd6 <do_close>:

/**
 * Close a TCP pcb contained in a netconn
 * Called from netconn_close
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
do_close(struct api_msg_msg *msg)
{
  80ebd6:	55                   	push   %ebp
  80ebd7:	89 e5                	mov    %esp,%ebp
  80ebd9:	83 ec 08             	sub    $0x8,%esp
  80ebdc:	8b 45 08             	mov    0x8(%ebp),%eax
#if LWIP_TCP
  if ((msg->conn->pcb.tcp != NULL) && (msg->conn->type == NETCONN_TCP)) {
  80ebdf:	8b 10                	mov    (%eax),%edx
  80ebe1:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  80ebe5:	74 15                	je     80ebfc <do_close+0x26>
  80ebe7:	83 3a 10             	cmpl   $0x10,(%edx)
  80ebea:	75 10                	jne    80ebfc <do_close+0x26>
      msg->conn->state = NETCONN_CLOSE;
  80ebec:	c7 42 04 04 00 00 00 	movl   $0x4,0x4(%edx)
      do_close_internal(msg->conn);
  80ebf3:	8b 00                	mov    (%eax),%eax
  80ebf5:	e8 e0 fd ff ff       	call   80e9da <do_close_internal>
  80ebfa:	eb 11                	jmp    80ec0d <do_close+0x37>
      /* for tcp netconns, do_close_internal ACKs the message */
  } else
#endif /* LWIP_TCP */
  {
    msg->conn->err = ERR_VAL;
  80ebfc:	c6 42 0c f7          	movb   $0xf7,0xc(%edx)
    TCPIP_APIMSG_ACK(msg);
  80ec00:	8b 00                	mov    (%eax),%eax
  80ec02:	8b 40 10             	mov    0x10(%eax),%eax
  80ec05:	89 04 24             	mov    %eax,(%esp)
  80ec08:	e8 a5 eb ff ff       	call   80d7b2 <sys_sem_signal>
  }
}
  80ec0d:	c9                   	leave  
  80ec0e:	c3                   	ret    

0080ec0f <err_tcp>:
  80ec0f:	55                   	push   %ebp
  80ec10:	89 e5                	mov    %esp,%ebp
  80ec12:	53                   	push   %ebx
  80ec13:	83 ec 14             	sub    $0x14,%esp
  80ec16:	8b 55 08             	mov    0x8(%ebp),%edx
  80ec19:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
  80ec1d:	85 d2                	test   %edx,%edx
  80ec1f:	75 1c                	jne    80ec3d <err_tcp+0x2e>
  80ec21:	c7 44 24 08 51 47 81 	movl   $0x814751,0x8(%esp)
  80ec28:	00 
  80ec29:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
  80ec30:	00 
  80ec31:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ec38:	e8 4f 1c ff ff       	call   80088c <_panic>
  80ec3d:	89 d3                	mov    %edx,%ebx
  80ec3f:	c7 42 08 00 00 00 00 	movl   $0x0,0x8(%edx)
  80ec46:	88 42 0c             	mov    %al,0xc(%edx)
  80ec49:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  80ec4d:	74 2f                	je     80ec7e <err_tcp+0x6f>
  80ec4f:	8b 42 2c             	mov    0x2c(%edx),%eax
  80ec52:	85 c0                	test   %eax,%eax
  80ec54:	74 15                	je     80ec6b <err_tcp+0x5c>
  80ec56:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ec5d:	00 
  80ec5e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ec65:	00 
  80ec66:	89 14 24             	mov    %edx,(%esp)
  80ec69:	ff d0                	call   *%eax
  80ec6b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ec72:	00 
  80ec73:	8b 43 14             	mov    0x14(%ebx),%eax
  80ec76:	89 04 24             	mov    %eax,(%esp)
  80ec79:	e8 85 ed ff ff       	call   80da03 <sys_mbox_post>
  80ec7e:	83 7b 10 ff          	cmpl   $0xffffffff,0x10(%ebx)
  80ec82:	74 18                	je     80ec9c <err_tcp+0x8d>
  80ec84:	83 7b 04 03          	cmpl   $0x3,0x4(%ebx)
  80ec88:	75 12                	jne    80ec9c <err_tcp+0x8d>
  80ec8a:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80ec91:	8b 43 10             	mov    0x10(%ebx),%eax
  80ec94:	89 04 24             	mov    %eax,(%esp)
  80ec97:	e8 16 eb ff ff       	call   80d7b2 <sys_sem_signal>
  80ec9c:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80eca0:	74 2f                	je     80ecd1 <err_tcp+0xc2>
  80eca2:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80eca5:	85 c0                	test   %eax,%eax
  80eca7:	74 15                	je     80ecbe <err_tcp+0xaf>
  80eca9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80ecb0:	00 
  80ecb1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ecb8:	00 
  80ecb9:	89 1c 24             	mov    %ebx,(%esp)
  80ecbc:	ff d0                	call   *%eax
  80ecbe:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80ecc5:	00 
  80ecc6:	8b 43 18             	mov    0x18(%ebx),%eax
  80ecc9:	89 04 24             	mov    %eax,(%esp)
  80eccc:	e8 32 ed ff ff       	call   80da03 <sys_mbox_post>
  80ecd1:	8b 43 04             	mov    0x4(%ebx),%eax
  80ecd4:	83 f8 01             	cmp    $0x1,%eax
  80ecd7:	74 05                	je     80ecde <err_tcp+0xcf>
  80ecd9:	83 f8 04             	cmp    $0x4,%eax
  80ecdc:	75 12                	jne    80ecf0 <err_tcp+0xe1>
  80ecde:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80ece5:	8b 43 10             	mov    0x10(%ebx),%eax
  80ece8:	89 04 24             	mov    %eax,(%esp)
  80eceb:	e8 c2 ea ff ff       	call   80d7b2 <sys_sem_signal>
  80ecf0:	83 c4 14             	add    $0x14,%esp
  80ecf3:	5b                   	pop    %ebx
  80ecf4:	5d                   	pop    %ebp
  80ecf5:	c3                   	ret    

0080ecf6 <do_writemore>:
  80ecf6:	55                   	push   %ebp
  80ecf7:	89 e5                	mov    %esp,%ebp
  80ecf9:	57                   	push   %edi
  80ecfa:	56                   	push   %esi
  80ecfb:	53                   	push   %ebx
  80ecfc:	83 ec 2c             	sub    $0x2c,%esp
  80ecff:	89 c3                	mov    %eax,%ebx
  80ed01:	83 78 04 01          	cmpl   $0x1,0x4(%eax)
  80ed05:	74 1c                	je     80ed23 <do_writemore+0x2d>
  80ed07:	c7 44 24 08 5e 47 81 	movl   $0x81475e,0x8(%esp)
  80ed0e:	00 
  80ed0f:	c7 44 24 04 b8 03 00 	movl   $0x3b8,0x4(%esp)
  80ed16:	00 
  80ed17:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ed1e:	e8 69 1b ff ff       	call   80088c <_panic>
  80ed23:	8b 70 24             	mov    0x24(%eax),%esi
  80ed26:	8b 46 04             	mov    0x4(%esi),%eax
  80ed29:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  80ed2c:	8b 7b 28             	mov    0x28(%ebx),%edi
  80ed2f:	8b 46 08             	mov    0x8(%esi),%eax
  80ed32:	89 c2                	mov    %eax,%edx
  80ed34:	29 fa                	sub    %edi,%edx
  80ed36:	66 29 f8             	sub    %di,%ax
  80ed39:	66 89 45 e6          	mov    %ax,0xffffffe6(%ebp)
  80ed3d:	81 fa 00 00 01 00    	cmp    $0x10000,%edx
  80ed43:	0f 9c c2             	setl   %dl
  80ed46:	66 0f b6 d2          	movzbw %dl,%dx
  80ed4a:	83 ea 01             	sub    $0x1,%edx
  80ed4d:	8b 4b 08             	mov    0x8(%ebx),%ecx
  80ed50:	89 4d ec             	mov    %ecx,0xffffffec(%ebp)
  80ed53:	0f b7 49 6e          	movzwl 0x6e(%ecx),%ecx
  80ed57:	0f b7 45 e6          	movzwl 0xffffffe6(%ebp),%eax
  80ed5b:	09 d0                	or     %edx,%eax
  80ed5d:	66 39 c8             	cmp    %cx,%ax
  80ed60:	76 02                	jbe    80ed64 <do_writemore+0x6e>
  80ed62:	89 c8                	mov    %ecx,%eax
  80ed64:	0f b7 c0             	movzwl %ax,%eax
  80ed67:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  80ed6a:	0f b6 46 0c          	movzbl 0xc(%esi),%eax
  80ed6e:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80ed72:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80ed75:	89 54 24 08          	mov    %edx,0x8(%esp)
  80ed79:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  80ed7c:	01 f8                	add    %edi,%eax
  80ed7e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80ed82:	8b 4d ec             	mov    0xffffffec(%ebp),%ecx
  80ed85:	89 0c 24             	mov    %ecx,(%esp)
  80ed88:	e8 d7 cd ff ff       	call   80bb64 <tcp_write>
  80ed8d:	89 c1                	mov    %eax,%ecx
  80ed8f:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80ed92:	03 53 28             	add    0x28(%ebx),%edx
  80ed95:	8b 43 24             	mov    0x24(%ebx),%eax
  80ed98:	3b 50 08             	cmp    0x8(%eax),%edx
  80ed9b:	7e 1c                	jle    80edb9 <do_writemore+0xc3>
  80ed9d:	c7 44 24 08 7b 47 81 	movl   $0x81477b,0x8(%esp)
  80eda4:	00 
  80eda5:	c7 44 24 04 cd 03 00 	movl   $0x3cd,0x4(%esp)
  80edac:	00 
  80edad:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80edb4:	e8 d3 1a ff ff       	call   80088c <_panic>
  80edb9:	84 c9                	test   %cl,%cl
  80edbb:	75 75                	jne    80ee32 <do_writemore+0x13c>
  80edbd:	89 53 28             	mov    %edx,0x28(%ebx)
  80edc0:	8b 43 24             	mov    0x24(%ebx),%eax
  80edc3:	be 00 00 00 00       	mov    $0x0,%esi
  80edc8:	3b 50 08             	cmp    0x8(%eax),%edx
  80edcb:	75 13                	jne    80ede0 <do_writemore+0xea>
  80edcd:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
  80edd4:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
  80eddb:	be 01 00 00 00       	mov    $0x1,%esi
  80ede0:	8b 43 08             	mov    0x8(%ebx),%eax
  80ede3:	83 78 78 00          	cmpl   $0x0,0x78(%eax)
  80ede7:	74 12                	je     80edfb <do_writemore+0x105>
  80ede9:	f6 40 20 40          	testb  $0x40,0x20(%eax)
  80eded:	75 0c                	jne    80edfb <do_writemore+0x105>
  80edef:	8b 50 74             	mov    0x74(%eax),%edx
  80edf2:	85 d2                	test   %edx,%edx
  80edf4:	74 70                	je     80ee66 <do_writemore+0x170>
  80edf6:	83 3a 00             	cmpl   $0x0,(%edx)
  80edf9:	74 6b                	je     80ee66 <do_writemore+0x170>
  80edfb:	89 04 24             	mov    %eax,(%esp)
  80edfe:	e8 e2 c0 ff ff       	call   80aee5 <tcp_output>
  80ee03:	88 43 0c             	mov    %al,0xc(%ebx)
  80ee06:	84 c0                	test   %al,%al
  80ee08:	75 42                	jne    80ee4c <do_writemore+0x156>
  80ee0a:	8b 43 08             	mov    0x8(%ebx),%eax
  80ee0d:	66 81 78 6e a0 2d    	cmpw   $0x2da0,0x6e(%eax)
  80ee13:	77 37                	ja     80ee4c <do_writemore+0x156>
  80ee15:	8b 43 2c             	mov    0x2c(%ebx),%eax
  80ee18:	85 c0                	test   %eax,%eax
  80ee1a:	74 30                	je     80ee4c <do_writemore+0x156>
  80ee1c:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  80ee1f:	89 54 24 08          	mov    %edx,0x8(%esp)
  80ee23:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  80ee2a:	00 
  80ee2b:	89 1c 24             	mov    %ebx,(%esp)
  80ee2e:	ff d0                	call   *%eax
  80ee30:	eb 1a                	jmp    80ee4c <do_writemore+0x156>
  80ee32:	80 f9 ff             	cmp    $0xff,%cl
  80ee35:	75 10                	jne    80ee47 <do_writemore+0x151>
  80ee37:	8b 43 08             	mov    0x8(%ebx),%eax
  80ee3a:	89 04 24             	mov    %eax,(%esp)
  80ee3d:	8d 76 00             	lea    0x0(%esi),%esi
  80ee40:	e8 a0 c0 ff ff       	call   80aee5 <tcp_output>
  80ee45:	eb 25                	jmp    80ee6c <do_writemore+0x176>
  80ee47:	88 4b 0c             	mov    %cl,0xc(%ebx)
  80ee4a:	eb 06                	jmp    80ee52 <do_writemore+0x15c>
  80ee4c:	89 f1                	mov    %esi,%ecx
  80ee4e:	84 c9                	test   %cl,%cl
  80ee50:	74 1a                	je     80ee6c <do_writemore+0x176>
  80ee52:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80ee59:	8b 43 10             	mov    0x10(%ebx),%eax
  80ee5c:	89 04 24             	mov    %eax,(%esp)
  80ee5f:	e8 4e e9 ff ff       	call   80d7b2 <sys_sem_signal>
  80ee64:	eb 06                	jmp    80ee6c <do_writemore+0x176>
  80ee66:	c6 43 0c 00          	movb   $0x0,0xc(%ebx)
  80ee6a:	eb 9e                	jmp    80ee0a <do_writemore+0x114>
  80ee6c:	b8 00 00 00 00       	mov    $0x0,%eax
  80ee71:	83 c4 2c             	add    $0x2c,%esp
  80ee74:	5b                   	pop    %ebx
  80ee75:	5e                   	pop    %esi
  80ee76:	5f                   	pop    %edi
  80ee77:	5d                   	pop    %ebp
  80ee78:	c3                   	ret    

0080ee79 <do_write>:
  80ee79:	55                   	push   %ebp
  80ee7a:	89 e5                	mov    %esp,%ebp
  80ee7c:	83 ec 08             	sub    $0x8,%esp
  80ee7f:	8b 55 08             	mov    0x8(%ebp),%edx
  80ee82:	8b 02                	mov    (%edx),%eax
  80ee84:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80ee88:	7c 2d                	jl     80eeb7 <do_write+0x3e>
  80ee8a:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80ee8e:	74 23                	je     80eeb3 <do_write+0x3a>
  80ee90:	83 38 10             	cmpl   $0x10,(%eax)
  80ee93:	75 1e                	jne    80eeb3 <do_write+0x3a>
  80ee95:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
  80ee9c:	8b 02                	mov    (%edx),%eax
  80ee9e:	89 50 24             	mov    %edx,0x24(%eax)
  80eea1:	8b 02                	mov    (%edx),%eax
  80eea3:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
  80eeaa:	8b 02                	mov    (%edx),%eax
  80eeac:	e8 45 fe ff ff       	call   80ecf6 <do_writemore>
  80eeb1:	eb 11                	jmp    80eec4 <do_write+0x4b>
  80eeb3:	c6 40 0c f7          	movb   $0xf7,0xc(%eax)
  80eeb7:	8b 02                	mov    (%edx),%eax
  80eeb9:	8b 40 10             	mov    0x10(%eax),%eax
  80eebc:	89 04 24             	mov    %eax,(%esp)
  80eebf:	e8 ee e8 ff ff       	call   80d7b2 <sys_sem_signal>
  80eec4:	c9                   	leave  
  80eec5:	c3                   	ret    

0080eec6 <sent_tcp>:
  80eec6:	55                   	push   %ebp
  80eec7:	89 e5                	mov    %esp,%ebp
  80eec9:	56                   	push   %esi
  80eeca:	53                   	push   %ebx
  80eecb:	83 ec 10             	sub    $0x10,%esp
  80eece:	8b 45 08             	mov    0x8(%ebp),%eax
  80eed1:	0f b7 75 10          	movzwl 0x10(%ebp),%esi
  80eed5:	85 c0                	test   %eax,%eax
  80eed7:	75 1c                	jne    80eef5 <sent_tcp+0x2f>
  80eed9:	c7 44 24 08 51 47 81 	movl   $0x814751,0x8(%esp)
  80eee0:	00 
  80eee1:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
  80eee8:	00 
  80eee9:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80eef0:	e8 97 19 ff ff       	call   80088c <_panic>
  80eef5:	89 c3                	mov    %eax,%ebx
  80eef7:	8b 40 04             	mov    0x4(%eax),%eax
  80eefa:	83 f8 01             	cmp    $0x1,%eax
  80eefd:	75 2b                	jne    80ef2a <sent_tcp+0x64>
  80eeff:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80ef03:	75 1c                	jne    80ef21 <sent_tcp+0x5b>
  80ef05:	c7 44 24 08 99 47 81 	movl   $0x814799,0x8(%esp)
  80ef0c:	00 
  80ef0d:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
  80ef14:	00 
  80ef15:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ef1c:	e8 6b 19 ff ff       	call   80088c <_panic>
  80ef21:	89 d8                	mov    %ebx,%eax
  80ef23:	e8 ce fd ff ff       	call   80ecf6 <do_writemore>
  80ef28:	eb 0f                	jmp    80ef39 <sent_tcp+0x73>
  80ef2a:	83 f8 04             	cmp    $0x4,%eax
  80ef2d:	8d 76 00             	lea    0x0(%esi),%esi
  80ef30:	75 07                	jne    80ef39 <sent_tcp+0x73>
  80ef32:	89 d8                	mov    %ebx,%eax
  80ef34:	e8 a1 fa ff ff       	call   80e9da <do_close_internal>
  80ef39:	8b 43 08             	mov    0x8(%ebx),%eax
  80ef3c:	85 c0                	test   %eax,%eax
  80ef3e:	74 23                	je     80ef63 <sent_tcp+0x9d>
  80ef40:	66 81 78 6e a0 2d    	cmpw   $0x2da0,0x6e(%eax)
  80ef46:	76 1b                	jbe    80ef63 <sent_tcp+0x9d>
  80ef48:	8b 53 2c             	mov    0x2c(%ebx),%edx
  80ef4b:	85 d2                	test   %edx,%edx
  80ef4d:	74 14                	je     80ef63 <sent_tcp+0x9d>
  80ef4f:	0f b7 c6             	movzwl %si,%eax
  80ef52:	89 44 24 08          	mov    %eax,0x8(%esp)
  80ef56:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80ef5d:	00 
  80ef5e:	89 1c 24             	mov    %ebx,(%esp)
  80ef61:	ff d2                	call   *%edx
  80ef63:	b8 00 00 00 00       	mov    $0x0,%eax
  80ef68:	83 c4 10             	add    $0x10,%esp
  80ef6b:	5b                   	pop    %ebx
  80ef6c:	5e                   	pop    %esi
  80ef6d:	5d                   	pop    %ebp
  80ef6e:	c3                   	ret    

0080ef6f <poll_tcp>:
  80ef6f:	55                   	push   %ebp
  80ef70:	89 e5                	mov    %esp,%ebp
  80ef72:	83 ec 18             	sub    $0x18,%esp
  80ef75:	8b 45 08             	mov    0x8(%ebp),%eax
  80ef78:	85 c0                	test   %eax,%eax
  80ef7a:	75 1c                	jne    80ef98 <poll_tcp+0x29>
  80ef7c:	c7 44 24 08 51 47 81 	movl   $0x814751,0x8(%esp)
  80ef83:	00 
  80ef84:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
  80ef8b:	00 
  80ef8c:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80ef93:	e8 f4 18 ff ff       	call   80088c <_panic>
  80ef98:	8b 50 04             	mov    0x4(%eax),%edx
  80ef9b:	83 fa 01             	cmp    $0x1,%edx
  80ef9e:	75 07                	jne    80efa7 <poll_tcp+0x38>
  80efa0:	e8 51 fd ff ff       	call   80ecf6 <do_writemore>
  80efa5:	eb 10                	jmp    80efb7 <poll_tcp+0x48>
  80efa7:	83 fa 04             	cmp    $0x4,%edx
  80efaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
  80efb0:	75 05                	jne    80efb7 <poll_tcp+0x48>
  80efb2:	e8 23 fa ff ff       	call   80e9da <do_close_internal>
  80efb7:	b8 00 00 00 00       	mov    $0x0,%eax
  80efbc:	c9                   	leave  
  80efbd:	8d 76 00             	lea    0x0(%esi),%esi
  80efc0:	c3                   	ret    

0080efc1 <do_recv>:
  80efc1:	55                   	push   %ebp
  80efc2:	89 e5                	mov    %esp,%ebp
  80efc4:	53                   	push   %ebx
  80efc5:	83 ec 14             	sub    $0x14,%esp
  80efc8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80efcb:	8b 03                	mov    (%ebx),%eax
  80efcd:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80efd1:	7c 1c                	jl     80efef <do_recv+0x2e>
  80efd3:	8b 50 08             	mov    0x8(%eax),%edx
  80efd6:	85 d2                	test   %edx,%edx
  80efd8:	74 15                	je     80efef <do_recv+0x2e>
  80efda:	83 38 10             	cmpl   $0x10,(%eax)
  80efdd:	75 10                	jne    80efef <do_recv+0x2e>
  80efdf:	0f b7 43 04          	movzwl 0x4(%ebx),%eax
  80efe3:	89 44 24 04          	mov    %eax,0x4(%esp)
  80efe7:	89 14 24             	mov    %edx,(%esp)
  80efea:	e8 db 94 ff ff       	call   8084ca <tcp_recved>
  80efef:	8b 03                	mov    (%ebx),%eax
  80eff1:	8b 40 10             	mov    0x10(%eax),%eax
  80eff4:	89 04 24             	mov    %eax,(%esp)
  80eff7:	e8 b6 e7 ff ff       	call   80d7b2 <sys_sem_signal>
  80effc:	83 c4 14             	add    $0x14,%esp
  80efff:	5b                   	pop    %ebx
  80f000:	5d                   	pop    %ebp
  80f001:	c3                   	ret    

0080f002 <do_send>:
  80f002:	55                   	push   %ebp
  80f003:	89 e5                	mov    %esp,%ebp
  80f005:	83 ec 18             	sub    $0x18,%esp
  80f008:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80f00b:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80f00e:	8b 75 08             	mov    0x8(%ebp),%esi
  80f011:	8b 1e                	mov    (%esi),%ebx
  80f013:	80 7b 0c fc          	cmpb   $0xfc,0xc(%ebx)
  80f017:	0f 8c 95 00 00 00    	jl     80f0b2 <do_send+0xb0>
  80f01d:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80f021:	0f 84 8b 00 00 00    	je     80f0b2 <do_send+0xb0>
  80f027:	8b 03                	mov    (%ebx),%eax
  80f029:	25 f0 00 00 00       	and    $0xf0,%eax
  80f02e:	83 f8 20             	cmp    $0x20,%eax
  80f031:	74 3f                	je     80f072 <do_send+0x70>
  80f033:	83 f8 40             	cmp    $0x40,%eax
  80f036:	75 7a                	jne    80f0b2 <do_send+0xb0>
  80f038:	8b 46 04             	mov    0x4(%esi),%eax
  80f03b:	8b 50 08             	mov    0x8(%eax),%edx
  80f03e:	85 d2                	test   %edx,%edx
  80f040:	75 16                	jne    80f058 <do_send+0x56>
  80f042:	8b 00                	mov    (%eax),%eax
  80f044:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f048:	8b 43 08             	mov    0x8(%ebx),%eax
  80f04b:	89 04 24             	mov    %eax,(%esp)
  80f04e:	e8 2f 27 00 00       	call   811782 <raw_send>
  80f053:	88 43 0c             	mov    %al,0xc(%ebx)
  80f056:	eb 5a                	jmp    80f0b2 <do_send+0xb0>
  80f058:	89 54 24 08          	mov    %edx,0x8(%esp)
  80f05c:	8b 00                	mov    (%eax),%eax
  80f05e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f062:	8b 43 08             	mov    0x8(%ebx),%eax
  80f065:	89 04 24             	mov    %eax,(%esp)
  80f068:	e8 0a 26 00 00       	call   811677 <raw_sendto>
  80f06d:	88 43 0c             	mov    %al,0xc(%ebx)
  80f070:	eb 40                	jmp    80f0b2 <do_send+0xb0>
  80f072:	8b 56 04             	mov    0x4(%esi),%edx
  80f075:	8b 4a 08             	mov    0x8(%edx),%ecx
  80f078:	85 c9                	test   %ecx,%ecx
  80f07a:	75 16                	jne    80f092 <do_send+0x90>
  80f07c:	8b 02                	mov    (%edx),%eax
  80f07e:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f082:	8b 43 08             	mov    0x8(%ebx),%eax
  80f085:	89 04 24             	mov    %eax,(%esp)
  80f088:	e8 bf cf ff ff       	call   80c04c <udp_send>
  80f08d:	88 43 0c             	mov    %al,0xc(%ebx)
  80f090:	eb 20                	jmp    80f0b2 <do_send+0xb0>
  80f092:	0f b7 42 0c          	movzwl 0xc(%edx),%eax
  80f096:	89 44 24 0c          	mov    %eax,0xc(%esp)
  80f09a:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  80f09e:	8b 02                	mov    (%edx),%eax
  80f0a0:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f0a4:	8b 43 08             	mov    0x8(%ebx),%eax
  80f0a7:	89 04 24             	mov    %eax,(%esp)
  80f0aa:	e8 49 cf ff ff       	call   80bff8 <udp_sendto>
  80f0af:	88 43 0c             	mov    %al,0xc(%ebx)
  80f0b2:	8b 06                	mov    (%esi),%eax
  80f0b4:	8b 40 10             	mov    0x10(%eax),%eax
  80f0b7:	89 04 24             	mov    %eax,(%esp)
  80f0ba:	e8 f3 e6 ff ff       	call   80d7b2 <sys_sem_signal>
  80f0bf:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80f0c2:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80f0c5:	89 ec                	mov    %ebp,%esp
  80f0c7:	5d                   	pop    %ebp
  80f0c8:	c3                   	ret    

0080f0c9 <do_listen>:
  80f0c9:	55                   	push   %ebp
  80f0ca:	89 e5                	mov    %esp,%ebp
  80f0cc:	83 ec 18             	sub    $0x18,%esp
  80f0cf:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80f0d2:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80f0d5:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80f0d8:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80f0db:	8b 03                	mov    (%ebx),%eax
  80f0dd:	80 78 0c fc          	cmpb   $0xfc,0xc(%eax)
  80f0e1:	0f 8c ba 00 00 00    	jl     80f1a1 <do_listen+0xd8>
  80f0e7:	8b 50 08             	mov    0x8(%eax),%edx
  80f0ea:	85 d2                	test   %edx,%edx
  80f0ec:	0f 84 af 00 00 00    	je     80f1a1 <do_listen+0xd8>
  80f0f2:	83 38 10             	cmpl   $0x10,(%eax)
  80f0f5:	0f 85 a6 00 00 00    	jne    80f1a1 <do_listen+0xd8>
  80f0fb:	83 7a 10 00          	cmpl   $0x0,0x10(%edx)
  80f0ff:	90                   	nop    
  80f100:	0f 85 97 00 00 00    	jne    80f19d <do_listen+0xd4>
  80f106:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
  80f10d:	00 
  80f10e:	89 14 24             	mov    %edx,(%esp)
  80f111:	e8 fc 96 ff ff       	call   808812 <tcp_listen_with_backlog>
  80f116:	89 c7                	mov    %eax,%edi
  80f118:	85 c0                	test   %eax,%eax
  80f11a:	75 08                	jne    80f124 <do_listen+0x5b>
  80f11c:	8b 03                	mov    (%ebx),%eax
  80f11e:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80f122:	eb 7d                	jmp    80f1a1 <do_listen+0xd8>
  80f124:	8b 03                	mov    (%ebx),%eax
  80f126:	8b 40 14             	mov    0x14(%eax),%eax
  80f129:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f12c:	74 11                	je     80f13f <do_listen+0x76>
  80f12e:	89 04 24             	mov    %eax,(%esp)
  80f131:	e8 a3 e0 ff ff       	call   80d1d9 <sys_mbox_free>
  80f136:	8b 03                	mov    (%ebx),%eax
  80f138:	c7 40 14 ff ff ff ff 	movl   $0xffffffff,0x14(%eax)
  80f13f:	8b 33                	mov    (%ebx),%esi
  80f141:	83 7e 18 ff          	cmpl   $0xffffffff,0x18(%esi)
  80f145:	75 1a                	jne    80f161 <do_listen+0x98>
  80f147:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80f14e:	e8 48 e5 ff ff       	call   80d69b <sys_mbox_new>
  80f153:	89 46 18             	mov    %eax,0x18(%esi)
  80f156:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f159:	75 06                	jne    80f161 <do_listen+0x98>
  80f15b:	8b 03                	mov    (%ebx),%eax
  80f15d:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80f161:	8b 03                	mov    (%ebx),%eax
  80f163:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
  80f167:	75 38                	jne    80f1a1 <do_listen+0xd8>
  80f169:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
  80f170:	8b 03                	mov    (%ebx),%eax
  80f172:	89 78 08             	mov    %edi,0x8(%eax)
  80f175:	8b 03                	mov    (%ebx),%eax
  80f177:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f17b:	8b 40 08             	mov    0x8(%eax),%eax
  80f17e:	89 04 24             	mov    %eax,(%esp)
  80f181:	e8 93 92 ff ff       	call   808419 <tcp_arg>
  80f186:	c7 44 24 04 9f f7 80 	movl   $0x80f79f,0x4(%esp)
  80f18d:	00 
  80f18e:	8b 03                	mov    (%ebx),%eax
  80f190:	8b 40 08             	mov    0x8(%eax),%eax
  80f193:	89 04 24             	mov    %eax,(%esp)
  80f196:	e8 bf 92 ff ff       	call   80845a <tcp_accept>
  80f19b:	eb 04                	jmp    80f1a1 <do_listen+0xd8>
  80f19d:	c6 40 0c f8          	movb   $0xf8,0xc(%eax)
  80f1a1:	8b 03                	mov    (%ebx),%eax
  80f1a3:	8b 40 10             	mov    0x10(%eax),%eax
  80f1a6:	89 04 24             	mov    %eax,(%esp)
  80f1a9:	e8 04 e6 ff ff       	call   80d7b2 <sys_sem_signal>
  80f1ae:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80f1b1:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80f1b4:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80f1b7:	89 ec                	mov    %ebp,%esp
  80f1b9:	5d                   	pop    %ebp
  80f1ba:	c3                   	ret    

0080f1bb <recv_tcp>:
  80f1bb:	55                   	push   %ebp
  80f1bc:	89 e5                	mov    %esp,%ebp
  80f1be:	56                   	push   %esi
  80f1bf:	53                   	push   %ebx
  80f1c0:	83 ec 10             	sub    $0x10,%esp
  80f1c3:	8b 55 08             	mov    0x8(%ebp),%edx
  80f1c6:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f1c9:	8b 75 10             	mov    0x10(%ebp),%esi
  80f1cc:	0f b6 4d 14          	movzbl 0x14(%ebp),%ecx
  80f1d0:	85 c0                	test   %eax,%eax
  80f1d2:	75 1c                	jne    80f1f0 <recv_tcp+0x35>
  80f1d4:	c7 44 24 08 34 48 81 	movl   $0x814834,0x8(%esp)
  80f1db:	00 
  80f1dc:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
  80f1e3:	00 
  80f1e4:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f1eb:	e8 9c 16 ff ff       	call   80088c <_panic>
  80f1f0:	85 d2                	test   %edx,%edx
  80f1f2:	75 1c                	jne    80f210 <recv_tcp+0x55>
  80f1f4:	c7 44 24 08 58 48 81 	movl   $0x814858,0x8(%esp)
  80f1fb:	00 
  80f1fc:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  80f203:	00 
  80f204:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f20b:	e8 7c 16 ff ff       	call   80088c <_panic>
  80f210:	89 d3                	mov    %edx,%ebx
  80f212:	39 42 08             	cmp    %eax,0x8(%edx)
  80f215:	74 1c                	je     80f233 <recv_tcp+0x78>
  80f217:	c7 44 24 08 af 47 81 	movl   $0x8147af,0x8(%esp)
  80f21e:	00 
  80f21f:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
  80f226:	00 
  80f227:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f22e:	e8 59 16 ff ff       	call   80088c <_panic>
  80f233:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
  80f238:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  80f23c:	74 44                	je     80f282 <recv_tcp+0xc7>
  80f23e:	88 4a 0c             	mov    %cl,0xc(%edx)
  80f241:	b8 00 00 00 00       	mov    $0x0,%eax
  80f246:	85 f6                	test   %esi,%esi
  80f248:	74 08                	je     80f252 <recv_tcp+0x97>
  80f24a:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80f24e:	66 01 42 20          	add    %ax,0x20(%edx)
  80f252:	8b 53 2c             	mov    0x2c(%ebx),%edx
  80f255:	85 d2                	test   %edx,%edx
  80f257:	74 14                	je     80f26d <recv_tcp+0xb2>
  80f259:	0f b7 c0             	movzwl %ax,%eax
  80f25c:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f260:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80f267:	00 
  80f268:	89 1c 24             	mov    %ebx,(%esp)
  80f26b:	ff d2                	call   *%edx
  80f26d:	89 74 24 04          	mov    %esi,0x4(%esp)
  80f271:	8b 43 14             	mov    0x14(%ebx),%eax
  80f274:	89 04 24             	mov    %eax,(%esp)
  80f277:	e8 be e6 ff ff       	call   80d93a <sys_mbox_trypost>
  80f27c:	3c 01                	cmp    $0x1,%al
  80f27e:	19 c0                	sbb    %eax,%eax
  80f280:	f7 d0                	not    %eax
  80f282:	83 c4 10             	add    $0x10,%esp
  80f285:	5b                   	pop    %ebx
  80f286:	5e                   	pop    %esi
  80f287:	5d                   	pop    %ebp
  80f288:	c3                   	ret    

0080f289 <do_disconnect>:
  80f289:	55                   	push   %ebp
  80f28a:	89 e5                	mov    %esp,%ebp
  80f28c:	53                   	push   %ebx
  80f28d:	83 ec 04             	sub    $0x4,%esp
  80f290:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80f293:	8b 13                	mov    (%ebx),%edx
  80f295:	8b 02                	mov    (%edx),%eax
  80f297:	25 f0 00 00 00       	and    $0xf0,%eax
  80f29c:	83 f8 20             	cmp    $0x20,%eax
  80f29f:	75 0b                	jne    80f2ac <do_disconnect+0x23>
  80f2a1:	8b 42 08             	mov    0x8(%edx),%eax
  80f2a4:	89 04 24             	mov    %eax,(%esp)
  80f2a7:	e8 84 c9 ff ff       	call   80bc30 <udp_disconnect>
  80f2ac:	8b 03                	mov    (%ebx),%eax
  80f2ae:	8b 40 10             	mov    0x10(%eax),%eax
  80f2b1:	89 04 24             	mov    %eax,(%esp)
  80f2b4:	e8 f9 e4 ff ff       	call   80d7b2 <sys_sem_signal>
  80f2b9:	83 c4 04             	add    $0x4,%esp
  80f2bc:	5b                   	pop    %ebx
  80f2bd:	5d                   	pop    %ebp
  80f2be:	c3                   	ret    

0080f2bf <do_connect>:
  80f2bf:	55                   	push   %ebp
  80f2c0:	89 e5                	mov    %esp,%ebp
  80f2c2:	83 ec 18             	sub    $0x18,%esp
  80f2c5:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80f2c8:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80f2cb:	8b 75 08             	mov    0x8(%ebp),%esi
  80f2ce:	8b 1e                	mov    (%esi),%ebx
  80f2d0:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80f2d4:	75 10                	jne    80f2e6 <do_connect+0x27>
  80f2d6:	8b 43 10             	mov    0x10(%ebx),%eax
  80f2d9:	89 04 24             	mov    %eax,(%esp)
  80f2dc:	e8 d1 e4 ff ff       	call   80d7b2 <sys_sem_signal>
  80f2e1:	e9 a1 00 00 00       	jmp    80f387 <do_connect+0xc8>
  80f2e6:	8b 03                	mov    (%ebx),%eax
  80f2e8:	25 f0 00 00 00       	and    $0xf0,%eax
  80f2ed:	83 f8 20             	cmp    $0x20,%eax
  80f2f0:	74 34                	je     80f326 <do_connect+0x67>
  80f2f2:	83 f8 40             	cmp    $0x40,%eax
  80f2f5:	74 0b                	je     80f302 <do_connect+0x43>
  80f2f7:	83 f8 10             	cmp    $0x10,%eax
  80f2fa:	0f 85 87 00 00 00    	jne    80f387 <do_connect+0xc8>
  80f300:	eb 50                	jmp    80f352 <do_connect+0x93>
  80f302:	8b 46 04             	mov    0x4(%esi),%eax
  80f305:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f309:	8b 43 08             	mov    0x8(%ebx),%eax
  80f30c:	89 04 24             	mov    %eax,(%esp)
  80f30f:	e8 89 22 00 00       	call   81159d <raw_connect>
  80f314:	88 43 0c             	mov    %al,0xc(%ebx)
  80f317:	8b 06                	mov    (%esi),%eax
  80f319:	8b 40 10             	mov    0x10(%eax),%eax
  80f31c:	89 04 24             	mov    %eax,(%esp)
  80f31f:	e8 8e e4 ff ff       	call   80d7b2 <sys_sem_signal>
  80f324:	eb 61                	jmp    80f387 <do_connect+0xc8>
  80f326:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80f32a:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f32e:	8b 46 04             	mov    0x4(%esi),%eax
  80f331:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f335:	8b 43 08             	mov    0x8(%ebx),%eax
  80f338:	89 04 24             	mov    %eax,(%esp)
  80f33b:	e8 84 ca ff ff       	call   80bdc4 <udp_connect>
  80f340:	88 43 0c             	mov    %al,0xc(%ebx)
  80f343:	8b 06                	mov    (%esi),%eax
  80f345:	8b 40 10             	mov    0x10(%eax),%eax
  80f348:	89 04 24             	mov    %eax,(%esp)
  80f34b:	e8 62 e4 ff ff       	call   80d7b2 <sys_sem_signal>
  80f350:	eb 35                	jmp    80f387 <do_connect+0xc8>
  80f352:	c7 43 04 03 00 00 00 	movl   $0x3,0x4(%ebx)
  80f359:	8b 06                	mov    (%esi),%eax
  80f35b:	e8 cd f5 ff ff       	call   80e92d <setup_tcp>
  80f360:	8b 1e                	mov    (%esi),%ebx
  80f362:	c7 44 24 0c 91 e9 80 	movl   $0x80e991,0xc(%esp)
  80f369:	00 
  80f36a:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80f36e:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f372:	8b 46 04             	mov    0x4(%esi),%eax
  80f375:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f379:	8b 43 08             	mov    0x8(%ebx),%eax
  80f37c:	89 04 24             	mov    %eax,(%esp)
  80f37f:	e8 d3 96 ff ff       	call   808a57 <tcp_connect>
  80f384:	88 43 0c             	mov    %al,0xc(%ebx)
  80f387:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80f38a:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80f38d:	89 ec                	mov    %ebp,%esp
  80f38f:	5d                   	pop    %ebp
  80f390:	c3                   	ret    

0080f391 <do_bind>:
  80f391:	55                   	push   %ebp
  80f392:	89 e5                	mov    %esp,%ebp
  80f394:	83 ec 18             	sub    $0x18,%esp
  80f397:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80f39a:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80f39d:	8b 75 08             	mov    0x8(%ebp),%esi
  80f3a0:	8b 1e                	mov    (%esi),%ebx
  80f3a2:	80 7b 0c fc          	cmpb   $0xfc,0xc(%ebx)
  80f3a6:	7c 75                	jl     80f41d <do_bind+0x8c>
  80f3a8:	8b 53 08             	mov    0x8(%ebx),%edx
  80f3ab:	85 d2                	test   %edx,%edx
  80f3ad:	74 6a                	je     80f419 <do_bind+0x88>
  80f3af:	8b 03                	mov    (%ebx),%eax
  80f3b1:	25 f0 00 00 00       	and    $0xf0,%eax
  80f3b6:	83 f8 20             	cmp    $0x20,%eax
  80f3b9:	74 23                	je     80f3de <do_bind+0x4d>
  80f3bb:	83 f8 40             	cmp    $0x40,%eax
  80f3be:	74 07                	je     80f3c7 <do_bind+0x36>
  80f3c0:	83 f8 10             	cmp    $0x10,%eax
  80f3c3:	75 58                	jne    80f41d <do_bind+0x8c>
  80f3c5:	eb 36                	jmp    80f3fd <do_bind+0x6c>
  80f3c7:	8b 46 04             	mov    0x4(%esi),%eax
  80f3ca:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f3ce:	8b 43 08             	mov    0x8(%ebx),%eax
  80f3d1:	89 04 24             	mov    %eax,(%esp)
  80f3d4:	e8 a7 21 00 00       	call   811580 <raw_bind>
  80f3d9:	88 43 0c             	mov    %al,0xc(%ebx)
  80f3dc:	eb 3f                	jmp    80f41d <do_bind+0x8c>
  80f3de:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80f3e2:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f3e6:	8b 46 04             	mov    0x4(%esi),%eax
  80f3e9:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f3ed:	8b 43 08             	mov    0x8(%ebx),%eax
  80f3f0:	89 04 24             	mov    %eax,(%esp)
  80f3f3:	e8 f0 c8 ff ff       	call   80bce8 <udp_bind>
  80f3f8:	88 43 0c             	mov    %al,0xc(%ebx)
  80f3fb:	eb 20                	jmp    80f41d <do_bind+0x8c>
  80f3fd:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  80f401:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f405:	8b 46 04             	mov    0x4(%esi),%eax
  80f408:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f40c:	89 14 24             	mov    %edx,(%esp)
  80f40f:	e8 fe 94 ff ff       	call   808912 <tcp_bind>
  80f414:	88 43 0c             	mov    %al,0xc(%ebx)
  80f417:	eb 04                	jmp    80f41d <do_bind+0x8c>
  80f419:	c6 43 0c f7          	movb   $0xf7,0xc(%ebx)
  80f41d:	8b 06                	mov    (%esi),%eax
  80f41f:	8b 40 10             	mov    0x10(%eax),%eax
  80f422:	89 04 24             	mov    %eax,(%esp)
  80f425:	e8 88 e3 ff ff       	call   80d7b2 <sys_sem_signal>
  80f42a:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80f42d:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80f430:	89 ec                	mov    %ebp,%esp
  80f432:	5d                   	pop    %ebp
  80f433:	c3                   	ret    

0080f434 <do_delconn>:
  80f434:	55                   	push   %ebp
  80f435:	89 e5                	mov    %esp,%ebp
  80f437:	53                   	push   %ebx
  80f438:	83 ec 14             	sub    $0x14,%esp
  80f43b:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80f43e:	8b 13                	mov    (%ebx),%edx
  80f440:	83 7a 08 00          	cmpl   $0x0,0x8(%edx)
  80f444:	74 55                	je     80f49b <do_delconn+0x67>
  80f446:	8b 02                	mov    (%edx),%eax
  80f448:	25 f0 00 00 00       	and    $0xf0,%eax
  80f44d:	83 f8 20             	cmp    $0x20,%eax
  80f450:	74 20                	je     80f472 <do_delconn+0x3e>
  80f452:	83 f8 40             	cmp    $0x40,%eax
  80f455:	74 0b                	je     80f462 <do_delconn+0x2e>
  80f457:	83 f8 10             	cmp    $0x10,%eax
  80f45a:	75 3f                	jne    80f49b <do_delconn+0x67>
  80f45c:	8d 74 26 00          	lea    0x0(%esi),%esi
  80f460:	eb 29                	jmp    80f48b <do_delconn+0x57>
  80f462:	8b 42 08             	mov    0x8(%edx),%eax
  80f465:	89 04 24             	mov    %eax,(%esp)
  80f468:	e8 be 21 00 00       	call   81162b <raw_remove>
  80f46d:	8d 76 00             	lea    0x0(%esi),%esi
  80f470:	eb 29                	jmp    80f49b <do_delconn+0x67>
  80f472:	8b 42 08             	mov    0x8(%edx),%eax
  80f475:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
  80f47c:	8b 03                	mov    (%ebx),%eax
  80f47e:	8b 40 08             	mov    0x8(%eax),%eax
  80f481:	89 04 24             	mov    %eax,(%esp)
  80f484:	e8 13 c8 ff ff       	call   80bc9c <udp_remove>
  80f489:	eb 10                	jmp    80f49b <do_delconn+0x67>
  80f48b:	c7 42 04 04 00 00 00 	movl   $0x4,0x4(%edx)
  80f492:	8b 03                	mov    (%ebx),%eax
  80f494:	e8 41 f5 ff ff       	call   80e9da <do_close_internal>
  80f499:	eb 4e                	jmp    80f4e9 <do_delconn+0xb5>
  80f49b:	8b 03                	mov    (%ebx),%eax
  80f49d:	8b 50 2c             	mov    0x2c(%eax),%edx
  80f4a0:	85 d2                	test   %edx,%edx
  80f4a2:	74 33                	je     80f4d7 <do_delconn+0xa3>
  80f4a4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80f4ab:	00 
  80f4ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80f4b3:	00 
  80f4b4:	89 04 24             	mov    %eax,(%esp)
  80f4b7:	ff d2                	call   *%edx
  80f4b9:	8b 13                	mov    (%ebx),%edx
  80f4bb:	8b 42 2c             	mov    0x2c(%edx),%eax
  80f4be:	85 c0                	test   %eax,%eax
  80f4c0:	74 15                	je     80f4d7 <do_delconn+0xa3>
  80f4c2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80f4c9:	00 
  80f4ca:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  80f4d1:	00 
  80f4d2:	89 14 24             	mov    %edx,(%esp)
  80f4d5:	ff d0                	call   *%eax
  80f4d7:	8b 03                	mov    (%ebx),%eax
  80f4d9:	8b 40 10             	mov    0x10(%eax),%eax
  80f4dc:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f4df:	74 08                	je     80f4e9 <do_delconn+0xb5>
  80f4e1:	89 04 24             	mov    %eax,(%esp)
  80f4e4:	e8 c9 e2 ff ff       	call   80d7b2 <sys_sem_signal>
  80f4e9:	83 c4 14             	add    $0x14,%esp
  80f4ec:	5b                   	pop    %ebx
  80f4ed:	5d                   	pop    %ebp
  80f4ee:	c3                   	ret    

0080f4ef <netconn_free>:
  80f4ef:	55                   	push   %ebp
  80f4f0:	89 e5                	mov    %esp,%ebp
  80f4f2:	53                   	push   %ebx
  80f4f3:	83 ec 24             	sub    $0x24,%esp
  80f4f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
  80f4f9:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80f4fd:	74 1c                	je     80f51b <netconn_free+0x2c>
  80f4ff:	c7 44 24 08 78 48 81 	movl   $0x814878,0x8(%esp)
  80f506:	00 
  80f507:	c7 44 24 04 26 02 00 	movl   $0x226,0x4(%esp)
  80f50e:	00 
  80f50f:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f516:	e8 71 13 ff ff       	call   80088c <_panic>
  80f51b:	83 7b 14 ff          	cmpl   $0xffffffff,0x14(%ebx)
  80f51f:	75 26                	jne    80f547 <netconn_free+0x58>
  80f521:	eb 4d                	jmp    80f570 <netconn_free+0x81>
  80f523:	83 3b 10             	cmpl   $0x10,(%ebx)
  80f526:	75 14                	jne    80f53c <netconn_free+0x4d>
  80f528:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  80f52b:	85 c0                	test   %eax,%eax
  80f52d:	8d 76 00             	lea    0x0(%esi),%esi
  80f530:	74 15                	je     80f547 <netconn_free+0x58>
  80f532:	89 04 24             	mov    %eax,(%esp)
  80f535:	e8 5a 85 ff ff       	call   807a94 <pbuf_free>
  80f53a:	eb 0b                	jmp    80f547 <netconn_free+0x58>
  80f53c:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  80f53f:	89 04 24             	mov    %eax,(%esp)
  80f542:	e8 80 5c ff ff       	call   8051c7 <netbuf_delete>
  80f547:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  80f54a:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f54e:	8b 43 14             	mov    0x14(%ebx),%eax
  80f551:	89 04 24             	mov    %eax,(%esp)
  80f554:	e8 bf e3 ff ff       	call   80d918 <sys_arch_mbox_tryfetch>
  80f559:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f55c:	75 c5                	jne    80f523 <netconn_free+0x34>
  80f55e:	8b 43 14             	mov    0x14(%ebx),%eax
  80f561:	89 04 24             	mov    %eax,(%esp)
  80f564:	e8 70 dc ff ff       	call   80d1d9 <sys_mbox_free>
  80f569:	c7 43 14 ff ff ff ff 	movl   $0xffffffff,0x14(%ebx)
  80f570:	83 7b 18 ff          	cmpl   $0xffffffff,0x18(%ebx)
  80f574:	75 0d                	jne    80f583 <netconn_free+0x94>
  80f576:	eb 34                	jmp    80f5ac <netconn_free+0xbd>
  80f578:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
  80f57b:	89 04 24             	mov    %eax,(%esp)
  80f57e:	e8 95 f1 ff ff       	call   80e718 <netconn_delete>
  80f583:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
  80f586:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f58a:	8b 43 18             	mov    0x18(%ebx),%eax
  80f58d:	89 04 24             	mov    %eax,(%esp)
  80f590:	e8 83 e3 ff ff       	call   80d918 <sys_arch_mbox_tryfetch>
  80f595:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f598:	75 de                	jne    80f578 <netconn_free+0x89>
  80f59a:	8b 43 18             	mov    0x18(%ebx),%eax
  80f59d:	89 04 24             	mov    %eax,(%esp)
  80f5a0:	e8 34 dc ff ff       	call   80d1d9 <sys_mbox_free>
  80f5a5:	c7 43 18 ff ff ff ff 	movl   $0xffffffff,0x18(%ebx)
  80f5ac:	8b 43 10             	mov    0x10(%ebx),%eax
  80f5af:	89 04 24             	mov    %eax,(%esp)
  80f5b2:	e8 a9 db ff ff       	call   80d160 <sys_sem_free>
  80f5b7:	c7 43 10 ff ff ff ff 	movl   $0xffffffff,0x10(%ebx)
  80f5be:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80f5c2:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80f5c9:	e8 4e 7d ff ff       	call   80731c <memp_free>
  80f5ce:	83 c4 24             	add    $0x24,%esp
  80f5d1:	5b                   	pop    %ebx
  80f5d2:	5d                   	pop    %ebp
  80f5d3:	c3                   	ret    

0080f5d4 <recv_udp>:
  80f5d4:	55                   	push   %ebp
  80f5d5:	89 e5                	mov    %esp,%ebp
  80f5d7:	83 ec 28             	sub    $0x28,%esp
  80f5da:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80f5dd:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80f5e0:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80f5e3:	8b 55 08             	mov    0x8(%ebp),%edx
  80f5e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f5e9:	8b 7d 10             	mov    0x10(%ebp),%edi
  80f5ec:	0f b7 4d 18          	movzwl 0x18(%ebp),%ecx
  80f5f0:	66 89 4d f2          	mov    %cx,0xfffffff2(%ebp)
  80f5f4:	85 c0                	test   %eax,%eax
  80f5f6:	75 1c                	jne    80f614 <recv_udp+0x40>
  80f5f8:	c7 44 24 08 a8 48 81 	movl   $0x8148a8,0x8(%esp)
  80f5ff:	00 
  80f600:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  80f607:	00 
  80f608:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f60f:	e8 78 12 ff ff       	call   80088c <_panic>
  80f614:	85 d2                	test   %edx,%edx
  80f616:	75 1c                	jne    80f634 <recv_udp+0x60>
  80f618:	c7 44 24 08 cc 48 81 	movl   $0x8148cc,0x8(%esp)
  80f61f:	00 
  80f620:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
  80f627:	00 
  80f628:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f62f:	e8 58 12 ff ff       	call   80088c <_panic>
  80f634:	89 d3                	mov    %edx,%ebx
  80f636:	39 42 08             	cmp    %eax,0x8(%edx)
  80f639:	74 1c                	je     80f657 <recv_udp+0x83>
  80f63b:	c7 44 24 08 cd 47 81 	movl   $0x8147cd,0x8(%esp)
  80f642:	00 
  80f643:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
  80f64a:	00 
  80f64b:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f652:	e8 35 12 ff ff       	call   80088c <_panic>
  80f657:	83 7a 14 ff          	cmpl   $0xffffffff,0x14(%edx)
  80f65b:	75 0a                	jne    80f667 <recv_udp+0x93>
  80f65d:	89 3c 24             	mov    %edi,(%esp)
  80f660:	e8 2f 84 ff ff       	call   807a94 <pbuf_free>
  80f665:	eb 6f                	jmp    80f6d6 <recv_udp+0x102>
  80f667:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80f66e:	e8 ec 7c ff ff       	call   80735f <memp_malloc>
  80f673:	85 c0                	test   %eax,%eax
  80f675:	75 0b                	jne    80f682 <recv_udp+0xae>
  80f677:	89 3c 24             	mov    %edi,(%esp)
  80f67a:	e8 15 84 ff ff       	call   807a94 <pbuf_free>
  80f67f:	90                   	nop    
  80f680:	eb 54                	jmp    80f6d6 <recv_udp+0x102>
  80f682:	89 c6                	mov    %eax,%esi
  80f684:	89 38                	mov    %edi,(%eax)
  80f686:	89 78 04             	mov    %edi,0x4(%eax)
  80f689:	8b 45 14             	mov    0x14(%ebp),%eax
  80f68c:	89 46 08             	mov    %eax,0x8(%esi)
  80f68f:	0f b7 45 f2          	movzwl 0xfffffff2(%ebp),%eax
  80f693:	66 89 46 0c          	mov    %ax,0xc(%esi)
  80f697:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80f69b:	66 01 43 20          	add    %ax,0x20(%ebx)
  80f69f:	8b 53 2c             	mov    0x2c(%ebx),%edx
  80f6a2:	85 d2                	test   %edx,%edx
  80f6a4:	74 15                	je     80f6bb <recv_udp+0xe7>
  80f6a6:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80f6aa:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f6ae:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80f6b5:	00 
  80f6b6:	89 1c 24             	mov    %ebx,(%esp)
  80f6b9:	ff d2                	call   *%edx
  80f6bb:	89 74 24 04          	mov    %esi,0x4(%esp)
  80f6bf:	8b 43 14             	mov    0x14(%ebx),%eax
  80f6c2:	89 04 24             	mov    %eax,(%esp)
  80f6c5:	e8 70 e2 ff ff       	call   80d93a <sys_mbox_trypost>
  80f6ca:	84 c0                	test   %al,%al
  80f6cc:	74 08                	je     80f6d6 <recv_udp+0x102>
  80f6ce:	89 34 24             	mov    %esi,(%esp)
  80f6d1:	e8 f1 5a ff ff       	call   8051c7 <netbuf_delete>
  80f6d6:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80f6d9:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80f6dc:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80f6df:	89 ec                	mov    %ebp,%esp
  80f6e1:	5d                   	pop    %ebp
  80f6e2:	c3                   	ret    

0080f6e3 <netconn_alloc>:
  80f6e3:	55                   	push   %ebp
  80f6e4:	89 e5                	mov    %esp,%ebp
  80f6e6:	53                   	push   %ebx
  80f6e7:	83 ec 14             	sub    $0x14,%esp
  80f6ea:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80f6f1:	e8 69 7c ff ff       	call   80735f <memp_malloc>
  80f6f6:	bb 00 00 00 00       	mov    $0x0,%ebx
  80f6fb:	85 c0                	test   %eax,%eax
  80f6fd:	0f 84 94 00 00 00    	je     80f797 <netconn_alloc+0xb4>
  80f703:	89 c3                	mov    %eax,%ebx
  80f705:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
  80f709:	8b 45 08             	mov    0x8(%ebp),%eax
  80f70c:	89 03                	mov    %eax,(%ebx)
  80f70e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  80f715:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80f71c:	e8 ec de ff ff       	call   80d60d <sys_sem_new>
  80f721:	89 43 10             	mov    %eax,0x10(%ebx)
  80f724:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f727:	75 17                	jne    80f740 <netconn_alloc+0x5d>
  80f729:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80f72d:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80f734:	e8 e3 7b ff ff       	call   80731c <memp_free>
  80f739:	bb 00 00 00 00       	mov    $0x0,%ebx
  80f73e:	eb 57                	jmp    80f797 <netconn_alloc+0xb4>
  80f740:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  80f747:	e8 4f df ff ff       	call   80d69b <sys_mbox_new>
  80f74c:	89 43 14             	mov    %eax,0x14(%ebx)
  80f74f:	83 f8 ff             	cmp    $0xffffffff,%eax
  80f752:	75 22                	jne    80f776 <netconn_alloc+0x93>
  80f754:	8b 43 10             	mov    0x10(%ebx),%eax
  80f757:	89 04 24             	mov    %eax,(%esp)
  80f75a:	e8 01 da ff ff       	call   80d160 <sys_sem_free>
  80f75f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80f763:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  80f76a:	e8 ad 7b ff ff       	call   80731c <memp_free>
  80f76f:	bb 00 00 00 00       	mov    $0x0,%ebx
  80f774:	eb 21                	jmp    80f797 <netconn_alloc+0xb4>
  80f776:	c7 43 18 ff ff ff ff 	movl   $0xffffffff,0x18(%ebx)
  80f77d:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  80f784:	c7 43 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%ebx)
  80f78b:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f78e:	89 43 2c             	mov    %eax,0x2c(%ebx)
  80f791:	66 c7 43 20 00 00    	movw   $0x0,0x20(%ebx)
  80f797:	89 d8                	mov    %ebx,%eax
  80f799:	83 c4 14             	add    $0x14,%esp
  80f79c:	5b                   	pop    %ebx
  80f79d:	5d                   	pop    %ebp
  80f79e:	c3                   	ret    

0080f79f <accept_function>:
  80f79f:	55                   	push   %ebp
  80f7a0:	89 e5                	mov    %esp,%ebp
  80f7a2:	83 ec 18             	sub    $0x18,%esp
  80f7a5:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80f7a8:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80f7ab:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80f7ae:	0f b6 7d 10          	movzbl 0x10(%ebp),%edi
  80f7b2:	8b 75 08             	mov    0x8(%ebp),%esi
  80f7b5:	83 7e 18 ff          	cmpl   $0xffffffff,0x18(%esi)
  80f7b9:	75 1c                	jne    80f7d7 <accept_function+0x38>
  80f7bb:	c7 44 24 08 ec 48 81 	movl   $0x8148ec,0x8(%esp)
  80f7c2:	00 
  80f7c3:	c7 44 24 04 65 01 00 	movl   $0x165,0x4(%esp)
  80f7ca:	00 
  80f7cb:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f7d2:	e8 b5 10 ff ff       	call   80088c <_panic>
  80f7d7:	8b 46 2c             	mov    0x2c(%esi),%eax
  80f7da:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f7de:	8b 06                	mov    (%esi),%eax
  80f7e0:	89 04 24             	mov    %eax,(%esp)
  80f7e3:	e8 fb fe ff ff       	call   80f6e3 <netconn_alloc>
  80f7e8:	89 c3                	mov    %eax,%ebx
  80f7ea:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80f7ef:	85 c0                	test   %eax,%eax
  80f7f1:	74 5a                	je     80f84d <accept_function+0xae>
  80f7f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f7f6:	89 43 08             	mov    %eax,0x8(%ebx)
  80f7f9:	89 d8                	mov    %ebx,%eax
  80f7fb:	e8 2d f1 ff ff       	call   80e92d <setup_tcp>
  80f800:	89 f8                	mov    %edi,%eax
  80f802:	88 43 0c             	mov    %al,0xc(%ebx)
  80f805:	8b 46 2c             	mov    0x2c(%esi),%eax
  80f808:	85 c0                	test   %eax,%eax
  80f80a:	74 15                	je     80f821 <accept_function+0x82>
  80f80c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80f813:	00 
  80f814:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80f81b:	00 
  80f81c:	89 34 24             	mov    %esi,(%esp)
  80f81f:	ff d0                	call   *%eax
  80f821:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  80f825:	8b 46 18             	mov    0x18(%esi),%eax
  80f828:	89 04 24             	mov    %eax,(%esp)
  80f82b:	e8 0a e1 ff ff       	call   80d93a <sys_mbox_trypost>
  80f830:	ba 00 00 00 00       	mov    $0x0,%edx
  80f835:	84 c0                	test   %al,%al
  80f837:	74 14                	je     80f84d <accept_function+0xae>
  80f839:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
  80f840:	89 1c 24             	mov    %ebx,(%esp)
  80f843:	e8 a7 fc ff ff       	call   80f4ef <netconn_free>
  80f848:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80f84d:	89 d0                	mov    %edx,%eax
  80f84f:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80f852:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80f855:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80f858:	89 ec                	mov    %ebp,%esp
  80f85a:	5d                   	pop    %ebp
  80f85b:	c3                   	ret    

0080f85c <do_newconn>:
  80f85c:	55                   	push   %ebp
  80f85d:	89 e5                	mov    %esp,%ebp
  80f85f:	83 ec 18             	sub    $0x18,%esp
  80f862:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  80f865:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  80f868:	8b 75 08             	mov    0x8(%ebp),%esi
  80f86b:	8b 06                	mov    (%esi),%eax
  80f86d:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80f871:	0f 85 df 00 00 00    	jne    80f956 <do_newconn+0xfa>
  80f877:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
  80f87b:	8b 1e                	mov    (%esi),%ebx
  80f87d:	83 7b 08 00          	cmpl   $0x0,0x8(%ebx)
  80f881:	74 1c                	je     80f89f <do_newconn+0x43>
  80f883:	c7 44 24 08 18 49 81 	movl   $0x814918,0x8(%esp)
  80f88a:	00 
  80f88b:	c7 44 24 04 8a 01 00 	movl   $0x18a,0x4(%esp)
  80f892:	00 
  80f893:	c7 04 24 09 47 81 00 	movl   $0x814709,(%esp)
  80f89a:	e8 ed 0f ff ff       	call   80088c <_panic>
  80f89f:	8b 03                	mov    (%ebx),%eax
  80f8a1:	25 f0 00 00 00       	and    $0xf0,%eax
  80f8a6:	83 f8 20             	cmp    $0x20,%eax
  80f8a9:	74 4b                	je     80f8f6 <do_newconn+0x9a>
  80f8ab:	83 f8 40             	cmp    $0x40,%eax
  80f8ae:	74 12                	je     80f8c2 <do_newconn+0x66>
  80f8b0:	83 f8 10             	cmp    $0x10,%eax
  80f8b3:	0f 85 99 00 00 00    	jne    80f952 <do_newconn+0xf6>
  80f8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  80f8c0:	eb 6f                	jmp    80f931 <do_newconn+0xd5>
  80f8c2:	0f b6 46 04          	movzbl 0x4(%esi),%eax
  80f8c6:	89 04 24             	mov    %eax,(%esp)
  80f8c9:	e8 01 1d 00 00       	call   8115cf <raw_new>
  80f8ce:	89 43 08             	mov    %eax,0x8(%ebx)
  80f8d1:	8b 06                	mov    (%esi),%eax
  80f8d3:	8b 50 08             	mov    0x8(%eax),%edx
  80f8d6:	85 d2                	test   %edx,%edx
  80f8d8:	75 06                	jne    80f8e0 <do_newconn+0x84>
  80f8da:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80f8de:	eb 76                	jmp    80f956 <do_newconn+0xfa>
  80f8e0:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f8e4:	c7 44 24 04 6d f9 80 	movl   $0x80f96d,0x4(%esp)
  80f8eb:	00 
  80f8ec:	89 14 24             	mov    %edx,(%esp)
  80f8ef:	e8 c7 1c 00 00       	call   8115bb <raw_recv>
  80f8f4:	eb 60                	jmp    80f956 <do_newconn+0xfa>
  80f8f6:	e8 64 c3 ff ff       	call   80bc5f <udp_new>
  80f8fb:	89 43 08             	mov    %eax,0x8(%ebx)
  80f8fe:	8b 06                	mov    (%esi),%eax
  80f900:	8b 50 08             	mov    0x8(%eax),%edx
  80f903:	85 d2                	test   %edx,%edx
  80f905:	75 06                	jne    80f90d <do_newconn+0xb1>
  80f907:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80f90b:	eb 49                	jmp    80f956 <do_newconn+0xfa>
  80f90d:	83 38 22             	cmpl   $0x22,(%eax)
  80f910:	75 04                	jne    80f916 <do_newconn+0xba>
  80f912:	c6 42 10 01          	movb   $0x1,0x10(%edx)
  80f916:	8b 06                	mov    (%esi),%eax
  80f918:	89 44 24 08          	mov    %eax,0x8(%esp)
  80f91c:	c7 44 24 04 d4 f5 80 	movl   $0x80f5d4,0x4(%esp)
  80f923:	00 
  80f924:	8b 40 08             	mov    0x8(%eax),%eax
  80f927:	89 04 24             	mov    %eax,(%esp)
  80f92a:	e8 1c c3 ff ff       	call   80bc4b <udp_recv>
  80f92f:	eb 25                	jmp    80f956 <do_newconn+0xfa>
  80f931:	e8 36 95 ff ff       	call   808e6c <tcp_new>
  80f936:	89 43 08             	mov    %eax,0x8(%ebx)
  80f939:	8b 06                	mov    (%esi),%eax
  80f93b:	83 78 08 00          	cmpl   $0x0,0x8(%eax)
  80f93f:	90                   	nop    
  80f940:	75 06                	jne    80f948 <do_newconn+0xec>
  80f942:	c6 40 0c ff          	movb   $0xff,0xc(%eax)
  80f946:	eb 0e                	jmp    80f956 <do_newconn+0xfa>
  80f948:	e8 e0 ef ff ff       	call   80e92d <setup_tcp>
  80f94d:	8d 76 00             	lea    0x0(%esi),%esi
  80f950:	eb 04                	jmp    80f956 <do_newconn+0xfa>
  80f952:	c6 43 0c f7          	movb   $0xf7,0xc(%ebx)
  80f956:	8b 06                	mov    (%esi),%eax
  80f958:	8b 40 10             	mov    0x10(%eax),%eax
  80f95b:	89 04 24             	mov    %eax,(%esp)
  80f95e:	e8 4f de ff ff       	call   80d7b2 <sys_sem_signal>
  80f963:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  80f966:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  80f969:	89 ec                	mov    %ebp,%esp
  80f96b:	5d                   	pop    %ebp
  80f96c:	c3                   	ret    

0080f96d <recv_raw>:
  80f96d:	55                   	push   %ebp
  80f96e:	89 e5                	mov    %esp,%ebp
  80f970:	83 ec 18             	sub    $0x18,%esp
  80f973:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  80f976:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  80f979:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  80f97c:	8b 45 08             	mov    0x8(%ebp),%eax
  80f97f:	8b 7d 10             	mov    0x10(%ebp),%edi
  80f982:	85 c0                	test   %eax,%eax
  80f984:	0f 84 cc 00 00 00    	je     80fa56 <recv_raw+0xe9>
  80f98a:	89 c6                	mov    %eax,%esi
  80f98c:	83 78 14 ff          	cmpl   $0xffffffff,0x14(%eax)
  80f990:	0f 84 c0 00 00 00    	je     80fa56 <recv_raw+0xe9>
  80f996:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  80f99d:	00 
  80f99e:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  80f9a2:	89 44 24 04          	mov    %eax,0x4(%esp)
  80f9a6:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
  80f9ad:	e8 a5 83 ff ff       	call   807d57 <pbuf_alloc>
  80f9b2:	89 c3                	mov    %eax,%ebx
  80f9b4:	85 c0                	test   %eax,%eax
  80f9b6:	0f 84 9a 00 00 00    	je     80fa56 <recv_raw+0xe9>
  80f9bc:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80f9c0:	89 04 24             	mov    %eax,(%esp)
  80f9c3:	e8 24 7f ff ff       	call   8078ec <pbuf_copy>
  80f9c8:	84 c0                	test   %al,%al
  80f9ca:	74 76                	je     80fa42 <recv_raw+0xd5>
  80f9cc:	89 1c 24             	mov    %ebx,(%esp)
  80f9cf:	e8 c0 80 ff ff       	call   807a94 <pbuf_free>
  80f9d4:	e9 7d 00 00 00       	jmp    80fa56 <recv_raw+0xe9>
  80f9d9:	89 1c 24             	mov    %ebx,(%esp)
  80f9dc:	e8 b3 80 ff ff       	call   807a94 <pbuf_free>
  80f9e1:	eb 73                	jmp    80fa56 <recv_raw+0xe9>
  80f9e3:	89 d7                	mov    %edx,%edi
  80f9e5:	89 1a                	mov    %ebx,(%edx)
  80f9e7:	89 5a 04             	mov    %ebx,0x4(%edx)
  80f9ea:	8b 43 04             	mov    0x4(%ebx),%eax
  80f9ed:	83 c0 0c             	add    $0xc,%eax
  80f9f0:	89 42 08             	mov    %eax,0x8(%edx)
  80f9f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  80f9f6:	66 0f b6 40 10       	movzbw 0x10(%eax),%ax
  80f9fb:	66 89 42 0c          	mov    %ax,0xc(%edx)
  80f9ff:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80fa03:	66 01 46 20          	add    %ax,0x20(%esi)
  80fa07:	8b 56 2c             	mov    0x2c(%esi),%edx
  80fa0a:	85 d2                	test   %edx,%edx
  80fa0c:	74 15                	je     80fa23 <recv_raw+0xb6>
  80fa0e:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  80fa12:	89 44 24 08          	mov    %eax,0x8(%esp)
  80fa16:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  80fa1d:	00 
  80fa1e:	89 34 24             	mov    %esi,(%esp)
  80fa21:	ff d2                	call   *%edx
  80fa23:	89 7c 24 04          	mov    %edi,0x4(%esp)
  80fa27:	8b 46 14             	mov    0x14(%esi),%eax
  80fa2a:	89 04 24             	mov    %eax,(%esp)
  80fa2d:	e8 08 df ff ff       	call   80d93a <sys_mbox_trypost>
  80fa32:	84 c0                	test   %al,%al
  80fa34:	74 20                	je     80fa56 <recv_raw+0xe9>
  80fa36:	89 3c 24             	mov    %edi,(%esp)
  80fa39:	e8 89 57 ff ff       	call   8051c7 <netbuf_delete>
  80fa3e:	66 90                	xchg   %ax,%ax
  80fa40:	eb 14                	jmp    80fa56 <recv_raw+0xe9>
  80fa42:	c7 04 24 06 00 00 00 	movl   $0x6,(%esp)
  80fa49:	e8 11 79 ff ff       	call   80735f <memp_malloc>
  80fa4e:	89 c2                	mov    %eax,%edx
  80fa50:	85 c0                	test   %eax,%eax
  80fa52:	75 8f                	jne    80f9e3 <recv_raw+0x76>
  80fa54:	eb 83                	jmp    80f9d9 <recv_raw+0x6c>
  80fa56:	b8 00 00 00 00       	mov    $0x0,%eax
  80fa5b:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  80fa5e:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  80fa61:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  80fa64:	89 ec                	mov    %ebp,%esp
  80fa66:	5d                   	pop    %ebp
  80fa67:	c3                   	ret    
	...

0080fa70 <tcp_parseopt>:
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  80fa70:	55                   	push   %ebp
  80fa71:	89 e5                	mov    %esp,%ebp
  80fa73:	57                   	push   %edi
  80fa74:	56                   	push   %esi
  80fa75:	53                   	push   %ebx
  80fa76:	83 ec 0c             	sub    $0xc,%esp
  80fa79:	89 c7                	mov    %eax,%edi
  u8_t c;
  u8_t *opts, opt;
  u16_t mss;

  opts = (u8_t *)tcphdr + TCP_HLEN;
  80fa7b:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  80fa80:	8d 70 14             	lea    0x14(%eax),%esi

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  80fa83:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80fa87:	89 04 24             	mov    %eax,(%esp)
  80fa8a:	e8 e6 ad ff ff       	call   80a875 <ntohs>
  80fa8f:	66 c1 e8 0c          	shr    $0xc,%ax
  80fa93:	bb 00 00 00 00       	mov    $0x0,%ebx
  80fa98:	66 83 f8 05          	cmp    $0x5,%ax
  80fa9c:	77 53                	ja     80faf1 <tcp_parseopt+0x81>
  80fa9e:	eb 77                	jmp    80fb17 <tcp_parseopt+0xa7>
    for(c = 0; c < (TCPH_HDRLEN(tcphdr) - 5) << 2 ;) {
      opt = opts[c];
  80faa0:	0f b6 d3             	movzbl %bl,%edx
  80faa3:	0f b6 04 32          	movzbl (%edx,%esi,1),%eax
      if (opt == 0x00) {
  80faa7:	84 c0                	test   %al,%al
  80faa9:	74 6c                	je     80fb17 <tcp_parseopt+0xa7>
        /* End of options. */
        break;
      } else if (opt == 0x01) {
  80faab:	3c 01                	cmp    $0x1,%al
  80faad:	8d 76 00             	lea    0x0(%esi),%esi
  80fab0:	75 05                	jne    80fab7 <tcp_parseopt+0x47>
        ++c;
  80fab2:	83 c3 01             	add    $0x1,%ebx
  80fab5:	eb 3a                	jmp    80faf1 <tcp_parseopt+0x81>
        /* NOP option. */
      } else if (opt == 0x02 &&
  80fab7:	3c 02                	cmp    $0x2,%al
  80fab9:	75 2b                	jne    80fae6 <tcp_parseopt+0x76>
  80fabb:	80 7c 16 01 04       	cmpb   $0x4,0x1(%esi,%edx,1)
  80fac0:	75 24                	jne    80fae6 <tcp_parseopt+0x76>
        opts[c + 1] == 0x04) {
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  80fac2:	0f b6 44 16 02       	movzbl 0x2(%esi,%edx,1),%eax
  80fac7:	c1 e0 08             	shl    $0x8,%eax
  80faca:	66 0f b6 54 16 03    	movzbw 0x3(%esi,%edx,1),%dx
  80fad0:	09 c2                	or     %eax,%edx
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  80fad2:	8d 42 ff             	lea    0xffffffff(%edx),%eax
  80fad5:	66 3d b3 05          	cmp    $0x5b3,%ax
  80fad9:	76 05                	jbe    80fae0 <tcp_parseopt+0x70>
  80fadb:	ba b4 05 00 00       	mov    $0x5b4,%edx
  80fae0:	66 89 57 34          	mov    %dx,0x34(%edi)
  80fae4:	eb 31                	jmp    80fb17 <tcp_parseopt+0xa7>

        /* And we are done processing options. */
        break;
      } else {
        if (opts[c + 1] == 0) {
  80fae6:	0f b6 44 16 01       	movzbl 0x1(%esi,%edx,1),%eax
  80faeb:	84 c0                	test   %al,%al
  80faed:	74 28                	je     80fb17 <tcp_parseopt+0xa7>
          /* If the length field is zero, the options are malformed
             and we don't process them further. */
          break;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  80faef:	01 c3                	add    %eax,%ebx
  80faf1:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  80faf6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80fafa:	89 04 24             	mov    %eax,(%esp)
  80fafd:	e8 73 ad ff ff       	call   80a875 <ntohs>
  80fb02:	0f b6 d3             	movzbl %bl,%edx
  80fb05:	66 c1 e8 0c          	shr    $0xc,%ax
  80fb09:	0f b7 c0             	movzwl %ax,%eax
  80fb0c:	8d 04 85 ec ff ff ff 	lea    0xffffffec(,%eax,4),%eax
  80fb13:	39 c2                	cmp    %eax,%edx
  80fb15:	7c 89                	jl     80faa0 <tcp_parseopt+0x30>
      }
    }
  }
}
  80fb17:	83 c4 0c             	add    $0xc,%esp
  80fb1a:	5b                   	pop    %ebx
  80fb1b:	5e                   	pop    %esi
  80fb1c:	5f                   	pop    %edi
  80fb1d:	5d                   	pop    %ebp
  80fb1e:	c3                   	ret    

0080fb1f <tcp_receive>:
  80fb1f:	55                   	push   %ebp
  80fb20:	89 e5                	mov    %esp,%ebp
  80fb22:	57                   	push   %edi
  80fb23:	56                   	push   %esi
  80fb24:	53                   	push   %ebx
  80fb25:	83 ec 2c             	sub    $0x2c,%esp
  80fb28:	89 c7                	mov    %eax,%edi
  80fb2a:	f6 05 40 e5 b3 00 10 	testb  $0x10,0xb3e540
  80fb31:	0f 84 6c 04 00 00    	je     80ffa3 <tcp_receive+0x484>
  80fb37:	0f b7 58 5c          	movzwl 0x5c(%eax),%ebx
  80fb3b:	8b 48 60             	mov    0x60(%eax),%ecx
  80fb3e:	8b 15 38 e5 b3 00    	mov    0xb3e538,%edx
  80fb44:	39 d1                	cmp    %edx,%ecx
  80fb46:	78 24                	js     80fb6c <tcp_receive+0x4d>
  80fb48:	39 d1                	cmp    %edx,%ecx
  80fb4a:	75 0a                	jne    80fb56 <tcp_receive+0x37>
  80fb4c:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  80fb51:	39 47 64             	cmp    %eax,0x64(%edi)
  80fb54:	78 16                	js     80fb6c <tcp_receive+0x4d>
  80fb56:	8b 47 64             	mov    0x64(%edi),%eax
  80fb59:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  80fb5f:	75 3a                	jne    80fb9b <tcp_receive+0x7c>
  80fb61:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  80fb66:	66 3b 58 0e          	cmp    0xe(%eax),%bx
  80fb6a:	73 2f                	jae    80fb9b <tcp_receive+0x7c>
  80fb6c:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  80fb71:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
  80fb75:	66 89 47 5c          	mov    %ax,0x5c(%edi)
  80fb79:	89 57 60             	mov    %edx,0x60(%edi)
  80fb7c:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  80fb81:	89 47 64             	mov    %eax,0x64(%edi)
  80fb84:	66 83 7f 5c 00       	cmpw   $0x0,0x5c(%edi)
  80fb89:	74 10                	je     80fb9b <tcp_receive+0x7c>
  80fb8b:	80 bf a4 00 00 00 00 	cmpb   $0x0,0xa4(%edi)
  80fb92:	74 07                	je     80fb9b <tcp_receive+0x7c>
  80fb94:	c6 87 a4 00 00 00 00 	movb   $0x0,0xa4(%edi)
  80fb9b:	8b 47 48             	mov    0x48(%edi),%eax
  80fb9e:	8b 15 3c e5 b3 00    	mov    0xb3e53c,%edx
  80fba4:	39 d0                	cmp    %edx,%eax
  80fba6:	0f 85 af 00 00 00    	jne    80fc5b <tcp_receive+0x13c>
  80fbac:	66 c7 47 6c 00 00    	movw   $0x0,0x6c(%edi)
  80fbb2:	0f b7 57 5c          	movzwl 0x5c(%edi),%edx
  80fbb6:	03 57 60             	add    0x60(%edi),%edx
  80fbb9:	0f b7 c3             	movzwl %bx,%eax
  80fbbc:	01 c8                	add    %ecx,%eax
  80fbbe:	39 c2                	cmp    %eax,%edx
  80fbc0:	0f 85 08 03 00 00    	jne    80fece <tcp_receive+0x3af>
  80fbc6:	0f b6 47 4c          	movzbl 0x4c(%edi),%eax
  80fbca:	83 c0 01             	add    $0x1,%eax
  80fbcd:	88 47 4c             	mov    %al,0x4c(%edi)
  80fbd0:	3c 02                	cmp    $0x2,%al
  80fbd2:	0f 86 f6 02 00 00    	jbe    80fece <tcp_receive+0x3af>
  80fbd8:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80fbdc:	0f 84 ec 02 00 00    	je     80fece <tcp_receive+0x3af>
  80fbe2:	f6 47 20 04          	testb  $0x4,0x20(%edi)
  80fbe6:	75 57                	jne    80fc3f <tcp_receive+0x120>
  80fbe8:	89 3c 24             	mov    %edi,(%esp)
  80fbeb:	90                   	nop    
  80fbec:	8d 74 26 00          	lea    0x0(%esi),%esi
  80fbf0:	e8 ec b7 ff ff       	call   80b3e1 <tcp_rexmit>
  80fbf5:	0f b7 57 4e          	movzwl 0x4e(%edi),%edx
  80fbf9:	0f b7 47 5c          	movzwl 0x5c(%edi),%eax
  80fbfd:	66 39 c2             	cmp    %ax,%dx
  80fc00:	76 09                	jbe    80fc0b <tcp_receive+0xec>
  80fc02:	66 d1 e8             	shr    %ax
  80fc05:	66 89 47 50          	mov    %ax,0x50(%edi)
  80fc09:	eb 09                	jmp    80fc14 <tcp_receive+0xf5>
  80fc0b:	89 d0                	mov    %edx,%eax
  80fc0d:	66 d1 e8             	shr    %ax
  80fc10:	66 89 47 50          	mov    %ax,0x50(%edi)
  80fc14:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  80fc18:	8d 14 00             	lea    (%eax,%eax,1),%edx
  80fc1b:	0f b7 47 50          	movzwl 0x50(%edi),%eax
  80fc1f:	39 d0                	cmp    %edx,%eax
  80fc21:	7d 04                	jge    80fc27 <tcp_receive+0x108>
  80fc23:	66 89 57 50          	mov    %dx,0x50(%edi)
  80fc27:	0f b7 47 34          	movzwl 0x34(%edi),%eax
  80fc2b:	8d 04 40             	lea    (%eax,%eax,2),%eax
  80fc2e:	66 03 47 50          	add    0x50(%edi),%ax
  80fc32:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80fc36:	80 4f 20 04          	orb    $0x4,0x20(%edi)
  80fc3a:	e9 8f 02 00 00       	jmp    80fece <tcp_receive+0x3af>
  80fc3f:	0f b7 47 4e          	movzwl 0x4e(%edi),%eax
  80fc43:	89 c2                	mov    %eax,%edx
  80fc45:	66 03 57 34          	add    0x34(%edi),%dx
  80fc49:	66 39 d0             	cmp    %dx,%ax
  80fc4c:	0f 83 7c 02 00 00    	jae    80fece <tcp_receive+0x3af>
  80fc52:	66 89 57 4e          	mov    %dx,0x4e(%edi)
  80fc56:	e9 73 02 00 00       	jmp    80fece <tcp_receive+0x3af>
  80fc5b:	89 d1                	mov    %edx,%ecx
  80fc5d:	29 c1                	sub    %eax,%ecx
  80fc5f:	89 c8                	mov    %ecx,%eax
  80fc61:	83 e8 01             	sub    $0x1,%eax
  80fc64:	0f 88 b3 01 00 00    	js     80fe1d <tcp_receive+0x2fe>
  80fc6a:	89 d0                	mov    %edx,%eax
  80fc6c:	2b 47 58             	sub    0x58(%edi),%eax
  80fc6f:	85 c0                	test   %eax,%eax
  80fc71:	0f 8f a6 01 00 00    	jg     80fe1d <tcp_receive+0x2fe>
  80fc77:	0f b6 47 20          	movzbl 0x20(%edi),%eax
  80fc7b:	a8 04                	test   $0x4,%al
  80fc7d:	74 0e                	je     80fc8d <tcp_receive+0x16e>
  80fc7f:	83 e0 fb             	and    $0xfffffffb,%eax
  80fc82:	88 47 20             	mov    %al,0x20(%edi)
  80fc85:	0f b7 47 50          	movzwl 0x50(%edi),%eax
  80fc89:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80fc8d:	c6 47 46 00          	movb   $0x0,0x46(%edi)
  80fc91:	0f b7 47 40          	movzwl 0x40(%edi),%eax
  80fc95:	66 c1 f8 03          	sar    $0x3,%ax
  80fc99:	66 03 47 42          	add    0x42(%edi),%ax
  80fc9d:	66 89 47 44          	mov    %ax,0x44(%edi)
  80fca1:	89 d0                	mov    %edx,%eax
  80fca3:	66 2b 47 48          	sub    0x48(%edi),%ax
  80fca7:	66 89 47 6c          	mov    %ax,0x6c(%edi)
  80fcab:	66 01 47 6e          	add    %ax,0x6e(%edi)
  80fcaf:	c6 47 4c 00          	movb   $0x0,0x4c(%edi)
  80fcb3:	89 57 48             	mov    %edx,0x48(%edi)
  80fcb6:	83 7f 10 03          	cmpl   $0x3,0x10(%edi)
  80fcba:	0f 86 d7 00 00 00    	jbe    80fd97 <tcp_receive+0x278>
  80fcc0:	0f b7 4f 4e          	movzwl 0x4e(%edi),%ecx
  80fcc4:	66 3b 4f 50          	cmp    0x50(%edi),%cx
  80fcc8:	73 18                	jae    80fce2 <tcp_receive+0x1c3>
  80fcca:	89 c8                	mov    %ecx,%eax
  80fccc:	66 03 47 34          	add    0x34(%edi),%ax
  80fcd0:	66 39 c1             	cmp    %ax,%cx
  80fcd3:	0f 83 be 00 00 00    	jae    80fd97 <tcp_receive+0x278>
  80fcd9:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80fcdd:	e9 b5 00 00 00       	jmp    80fd97 <tcp_receive+0x278>
  80fce2:	0f b7 57 34          	movzwl 0x34(%edi),%edx
  80fce6:	0f af d2             	imul   %edx,%edx
  80fce9:	0f b7 c1             	movzwl %cx,%eax
  80fcec:	89 c3                	mov    %eax,%ebx
  80fcee:	89 d0                	mov    %edx,%eax
  80fcf0:	c1 fa 1f             	sar    $0x1f,%edx
  80fcf3:	f7 fb                	idiv   %ebx
  80fcf5:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  80fcf8:	66 39 c1             	cmp    %ax,%cx
  80fcfb:	0f 83 96 00 00 00    	jae    80fd97 <tcp_receive+0x278>
  80fd01:	66 89 47 4e          	mov    %ax,0x4e(%edi)
  80fd05:	e9 8d 00 00 00       	jmp    80fd97 <tcp_receive+0x278>
  80fd0a:	8b 77 78             	mov    0x78(%edi),%esi
  80fd0d:	8b 06                	mov    (%esi),%eax
  80fd0f:	89 47 78             	mov    %eax,0x78(%edi)
  80fd12:	0f b7 5f 70          	movzwl 0x70(%edi),%ebx
  80fd16:	8b 46 04             	mov    0x4(%esi),%eax
  80fd19:	89 04 24             	mov    %eax,(%esp)
  80fd1c:	e8 2f 79 ff ff       	call   807650 <pbuf_clen>
  80fd21:	66 0f b6 c0          	movzbw %al,%ax
  80fd25:	66 39 c3             	cmp    %ax,%bx
  80fd28:	73 1c                	jae    80fd46 <tcp_receive+0x227>
  80fd2a:	c7 44 24 08 38 49 81 	movl   $0x814938,0x8(%esp)
  80fd31:	00 
  80fd32:	c7 44 24 04 55 03 00 	movl   $0x355,0x4(%esp)
  80fd39:	00 
  80fd3a:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  80fd41:	e8 46 0b ff ff       	call   80088c <_panic>
  80fd46:	0f b7 5f 70          	movzwl 0x70(%edi),%ebx
  80fd4a:	8b 46 04             	mov    0x4(%esi),%eax
  80fd4d:	89 04 24             	mov    %eax,(%esp)
  80fd50:	e8 fb 78 ff ff       	call   807650 <pbuf_clen>
  80fd55:	66 0f b6 c0          	movzbw %al,%ax
  80fd59:	66 29 c3             	sub    %ax,%bx
  80fd5c:	66 89 5f 70          	mov    %bx,0x70(%edi)
  80fd60:	89 34 24             	mov    %esi,(%esp)
  80fd63:	e8 b6 88 ff ff       	call   80861e <tcp_seg_free>
  80fd68:	66 83 7f 70 00       	cmpw   $0x0,0x70(%edi)
  80fd6d:	74 28                	je     80fd97 <tcp_receive+0x278>
  80fd6f:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80fd73:	75 22                	jne    80fd97 <tcp_receive+0x278>
  80fd75:	83 7f 74 00          	cmpl   $0x0,0x74(%edi)
  80fd79:	75 1c                	jne    80fd97 <tcp_receive+0x278>
  80fd7b:	c7 44 24 08 60 49 81 	movl   $0x814960,0x8(%esp)
  80fd82:	00 
  80fd83:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
  80fd8a:	00 
  80fd8b:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  80fd92:	e8 f5 0a ff ff       	call   80088c <_panic>
  80fd97:	8b 47 78             	mov    0x78(%edi),%eax
  80fd9a:	85 c0                	test   %eax,%eax
  80fd9c:	74 68                	je     80fe06 <tcp_receive+0x2e7>
  80fd9e:	8b 40 10             	mov    0x10(%eax),%eax
  80fda1:	8b 40 04             	mov    0x4(%eax),%eax
  80fda4:	89 04 24             	mov    %eax,(%esp)
  80fda7:	e8 ee ac ff ff       	call   80aa9a <ntohl>
  80fdac:	89 c6                	mov    %eax,%esi
  80fdae:	8b 47 78             	mov    0x78(%edi),%eax
  80fdb1:	0f b7 58 0c          	movzwl 0xc(%eax),%ebx
  80fdb5:	8b 40 10             	mov    0x10(%eax),%eax
  80fdb8:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80fdbc:	89 04 24             	mov    %eax,(%esp)
  80fdbf:	e8 b1 aa ff ff       	call   80a875 <ntohs>
  80fdc4:	a8 01                	test   $0x1,%al
  80fdc6:	75 1b                	jne    80fde3 <tcp_receive+0x2c4>
  80fdc8:	8b 47 78             	mov    0x78(%edi),%eax
  80fdcb:	8b 40 10             	mov    0x10(%eax),%eax
  80fdce:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80fdd2:	89 04 24             	mov    %eax,(%esp)
  80fdd5:	e8 9b aa ff ff       	call   80a875 <ntohs>
  80fdda:	b9 00 00 00 00       	mov    $0x0,%ecx
  80fddf:	a8 02                	test   $0x2,%al
  80fde1:	74 05                	je     80fde8 <tcp_receive+0x2c9>
  80fde3:	b9 01 00 00 00       	mov    $0x1,%ecx
  80fde8:	89 f2                	mov    %esi,%edx
  80fdea:	2b 15 3c e5 b3 00    	sub    0xb3e53c,%edx
  80fdf0:	0f b7 c3             	movzwl %bx,%eax
  80fdf3:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  80fdf6:	01 c2                	add    %eax,%edx
  80fdf8:	85 d2                	test   %edx,%edx
  80fdfa:	0f 8e 0a ff ff ff    	jle    80fd0a <tcp_receive+0x1eb>
  80fe00:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80fe04:	75 08                	jne    80fe0e <tcp_receive+0x2ef>
  80fe06:	66 c7 47 32 ff ff    	movw   $0xffff,0x32(%edi)
  80fe0c:	eb 06                	jmp    80fe14 <tcp_receive+0x2f5>
  80fe0e:	66 c7 47 32 00 00    	movw   $0x0,0x32(%edi)
  80fe14:	c6 47 30 00          	movb   $0x0,0x30(%edi)
  80fe18:	e9 b1 00 00 00       	jmp    80fece <tcp_receive+0x3af>
  80fe1d:	66 c7 47 6c 00 00    	movw   $0x0,0x6c(%edi)
  80fe23:	e9 a6 00 00 00       	jmp    80fece <tcp_receive+0x3af>
  80fe28:	8b 77 74             	mov    0x74(%edi),%esi
  80fe2b:	8b 06                	mov    (%esi),%eax
  80fe2d:	89 47 74             	mov    %eax,0x74(%edi)
  80fe30:	0f b7 5f 70          	movzwl 0x70(%edi),%ebx
  80fe34:	8b 46 04             	mov    0x4(%esi),%eax
  80fe37:	89 04 24             	mov    %eax,(%esp)
  80fe3a:	e8 11 78 ff ff       	call   807650 <pbuf_clen>
  80fe3f:	66 0f b6 c0          	movzbw %al,%ax
  80fe43:	66 39 c3             	cmp    %ax,%bx
  80fe46:	73 1c                	jae    80fe64 <tcp_receive+0x345>
  80fe48:	c7 44 24 08 38 49 81 	movl   $0x814938,0x8(%esp)
  80fe4f:	00 
  80fe50:	c7 44 24 04 7f 03 00 	movl   $0x37f,0x4(%esp)
  80fe57:	00 
  80fe58:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  80fe5f:	e8 28 0a ff ff       	call   80088c <_panic>
  80fe64:	0f b7 5f 70          	movzwl 0x70(%edi),%ebx
  80fe68:	8b 46 04             	mov    0x4(%esi),%eax
  80fe6b:	89 04 24             	mov    %eax,(%esp)
  80fe6e:	e8 dd 77 ff ff       	call   807650 <pbuf_clen>
  80fe73:	66 0f b6 c0          	movzbw %al,%ax
  80fe77:	66 29 c3             	sub    %ax,%bx
  80fe7a:	66 89 5f 70          	mov    %bx,0x70(%edi)
  80fe7e:	89 34 24             	mov    %esi,(%esp)
  80fe81:	e8 98 87 ff ff       	call   80861e <tcp_seg_free>
  80fe86:	66 83 7f 70 00       	cmpw   $0x0,0x70(%edi)
  80fe8b:	74 29                	je     80feb6 <tcp_receive+0x397>
  80fe8d:	83 7f 78 00          	cmpl   $0x0,0x78(%edi)
  80fe91:	75 23                	jne    80feb6 <tcp_receive+0x397>
  80fe93:	8b 47 74             	mov    0x74(%edi),%eax
  80fe96:	85 c0                	test   %eax,%eax
  80fe98:	75 23                	jne    80febd <tcp_receive+0x39e>
  80fe9a:	c7 44 24 08 60 49 81 	movl   $0x814960,0x8(%esp)
  80fea1:	00 
  80fea2:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
  80fea9:	00 
  80feaa:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  80feb1:	e8 d6 09 ff ff       	call   80088c <_panic>
  80feb6:	8b 47 74             	mov    0x74(%edi),%eax
  80feb9:	85 c0                	test   %eax,%eax
  80febb:	74 11                	je     80fece <tcp_receive+0x3af>
  80febd:	8b 40 10             	mov    0x10(%eax),%eax
  80fec0:	8b 40 04             	mov    0x4(%eax),%eax
  80fec3:	89 04 24             	mov    %eax,(%esp)
  80fec6:	e8 c1 a9 ff ff       	call   80a88c <htonl>
  80fecb:	89 47 54             	mov    %eax,0x54(%edi)
  80fece:	8b 47 74             	mov    0x74(%edi),%eax
  80fed1:	85 c0                	test   %eax,%eax
  80fed3:	74 72                	je     80ff47 <tcp_receive+0x428>
  80fed5:	8b 35 3c e5 b3 00    	mov    0xb3e53c,%esi
  80fedb:	89 75 e0             	mov    %esi,0xffffffe0(%ebp)
  80fede:	8b 40 10             	mov    0x10(%eax),%eax
  80fee1:	8b 40 04             	mov    0x4(%eax),%eax
  80fee4:	89 04 24             	mov    %eax,(%esp)
  80fee7:	e8 ae ab ff ff       	call   80aa9a <ntohl>
  80feec:	89 c6                	mov    %eax,%esi
  80feee:	8b 47 74             	mov    0x74(%edi),%eax
  80fef1:	0f b7 58 0c          	movzwl 0xc(%eax),%ebx
  80fef5:	8b 40 10             	mov    0x10(%eax),%eax
  80fef8:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80fefc:	89 04 24             	mov    %eax,(%esp)
  80feff:	e8 71 a9 ff ff       	call   80a875 <ntohs>
  80ff04:	a8 01                	test   $0x1,%al
  80ff06:	75 1b                	jne    80ff23 <tcp_receive+0x404>
  80ff08:	8b 47 74             	mov    0x74(%edi),%eax
  80ff0b:	8b 40 10             	mov    0x10(%eax),%eax
  80ff0e:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  80ff12:	89 04 24             	mov    %eax,(%esp)
  80ff15:	e8 5b a9 ff ff       	call   80a875 <ntohs>
  80ff1a:	b9 00 00 00 00       	mov    $0x0,%ecx
  80ff1f:	a8 02                	test   $0x2,%al
  80ff21:	74 05                	je     80ff28 <tcp_receive+0x409>
  80ff23:	b9 01 00 00 00       	mov    $0x1,%ecx
  80ff28:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  80ff2b:	29 f2                	sub    %esi,%edx
  80ff2d:	0f b7 c3             	movzwl %bx,%eax
  80ff30:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  80ff33:	39 c2                	cmp    %eax,%edx
  80ff35:	78 10                	js     80ff47 <tcp_receive+0x428>
  80ff37:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  80ff3c:	2b 47 58             	sub    0x58(%edi),%eax
  80ff3f:	85 c0                	test   %eax,%eax
  80ff41:	0f 8e e1 fe ff ff    	jle    80fe28 <tcp_receive+0x309>
  80ff47:	8b 57 38             	mov    0x38(%edi),%edx
  80ff4a:	85 d2                	test   %edx,%edx
  80ff4c:	74 55                	je     80ffa3 <tcp_receive+0x484>
  80ff4e:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  80ff53:	39 47 3c             	cmp    %eax,0x3c(%edi)
  80ff56:	79 4b                	jns    80ffa3 <tcp_receive+0x484>
  80ff58:	0f b7 4f 40          	movzwl 0x40(%edi),%ecx
  80ff5c:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  80ff61:	66 29 d0             	sub    %dx,%ax
  80ff64:	89 ca                	mov    %ecx,%edx
  80ff66:	66 c1 fa 03          	sar    $0x3,%dx
  80ff6a:	66 29 d0             	sub    %dx,%ax
  80ff6d:	8d 0c 08             	lea    (%eax,%ecx,1),%ecx
  80ff70:	66 89 4f 40          	mov    %cx,0x40(%edi)
  80ff74:	0f b7 5f 42          	movzwl 0x42(%edi),%ebx
  80ff78:	89 c2                	mov    %eax,%edx
  80ff7a:	66 c1 fa 0f          	sar    $0xf,%dx
  80ff7e:	31 d0                	xor    %edx,%eax
  80ff80:	66 29 d0             	sub    %dx,%ax
  80ff83:	89 da                	mov    %ebx,%edx
  80ff85:	66 c1 fa 02          	sar    $0x2,%dx
  80ff89:	66 29 d0             	sub    %dx,%ax
  80ff8c:	01 d8                	add    %ebx,%eax
  80ff8e:	66 89 47 42          	mov    %ax,0x42(%edi)
  80ff92:	66 c1 f9 03          	sar    $0x3,%cx
  80ff96:	01 c8                	add    %ecx,%eax
  80ff98:	66 89 47 44          	mov    %ax,0x44(%edi)
  80ff9c:	c7 47 38 00 00 00 00 	movl   $0x0,0x38(%edi)
  80ffa3:	0f b7 15 42 e5 b3 00 	movzwl 0xb3e542,%edx
  80ffaa:	66 85 d2             	test   %dx,%dx
  80ffad:	0f 84 84 07 00 00    	je     810737 <tcp_receive+0xc18>
  80ffb3:	8b 4f 24             	mov    0x24(%edi),%ecx
  80ffb6:	8b 1d 38 e5 b3 00    	mov    0xb3e538,%ebx
  80ffbc:	89 ce                	mov    %ecx,%esi
  80ffbe:	29 de                	sub    %ebx,%esi
  80ffc0:	89 f0                	mov    %esi,%eax
  80ffc2:	83 e8 01             	sub    $0x1,%eax
  80ffc5:	0f 88 36 01 00 00    	js     810101 <tcp_receive+0x5e2>
  80ffcb:	8d 41 01             	lea    0x1(%ecx),%eax
  80ffce:	29 d8                	sub    %ebx,%eax
  80ffd0:	0f b7 d2             	movzwl %dx,%edx
  80ffd3:	29 d0                	sub    %edx,%eax
  80ffd5:	85 c0                	test   %eax,%eax
  80ffd7:	0f 8f 24 01 00 00    	jg     810101 <tcp_receive+0x5e2>
  80ffdd:	8b 1d 20 e5 b3 00    	mov    0xb3e520,%ebx
  80ffe3:	85 db                	test   %ebx,%ebx
  80ffe5:	75 1c                	jne    810003 <tcp_receive+0x4e4>
  80ffe7:	c7 44 24 08 bb 4a 81 	movl   $0x814abb,0x8(%esp)
  80ffee:	00 
  80ffef:	c7 44 24 04 e5 03 00 	movl   $0x3e5,0x4(%esp)
  80fff6:	00 
  80fff7:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  80fffe:	e8 89 08 ff ff       	call   80088c <_panic>
  810003:	89 f1                	mov    %esi,%ecx
  810005:	81 fe fe 7f 00 00    	cmp    $0x7ffe,%esi
  81000b:	7e 1c                	jle    810029 <tcp_receive+0x50a>
  81000d:	c7 44 24 08 cb 4a 81 	movl   $0x814acb,0x8(%esp)
  810014:	00 
  810015:	c7 44 24 04 e6 03 00 	movl   $0x3e6,0x4(%esp)
  81001c:	00 
  81001d:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810024:	e8 63 08 ff ff       	call   80088c <_panic>
  810029:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  81002d:	39 d6                	cmp    %edx,%esi
  81002f:	7e 73                	jle    8100a4 <tcp_receive+0x585>
  810031:	0f b7 73 08          	movzwl 0x8(%ebx),%esi
  810035:	0f b7 c6             	movzwl %si,%eax
  810038:	39 c1                	cmp    %eax,%ecx
  81003a:	7e 1c                	jle    810058 <tcp_receive+0x539>
  81003c:	c7 44 24 08 da 4a 81 	movl   $0x814ada,0x8(%esp)
  810043:	00 
  810044:	c7 44 24 04 e8 03 00 	movl   $0x3e8,0x4(%esp)
  81004b:	00 
  81004c:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810053:	e8 34 08 ff ff       	call   80088c <_panic>
  810058:	89 f0                	mov    %esi,%eax
  81005a:	66 29 c8             	sub    %cx,%ax
  81005d:	29 d1                	sub    %edx,%ecx
  81005f:	66 89 43 08          	mov    %ax,0x8(%ebx)
  810063:	66 c7 43 0a 00 00    	movw   $0x0,0xa(%ebx)
  810069:	8b 1b                	mov    (%ebx),%ebx
  81006b:	0f b7 53 0a          	movzwl 0xa(%ebx),%edx
  81006f:	39 ca                	cmp    %ecx,%edx
  810071:	7c ea                	jl     81005d <tcp_receive+0x53e>
  810073:	89 c8                	mov    %ecx,%eax
  810075:	f7 d8                	neg    %eax
  810077:	98                   	cwtl   
  810078:	89 44 24 04          	mov    %eax,0x4(%esp)
  81007c:	89 1c 24             	mov    %ebx,(%esp)
  81007f:	e8 a4 76 ff ff       	call   807728 <pbuf_header>
  810084:	84 c0                	test   %al,%al
  810086:	74 4d                	je     8100d5 <tcp_receive+0x5b6>
  810088:	c7 44 24 08 ea 4a 81 	movl   $0x814aea,0x8(%esp)
  81008f:	00 
  810090:	c7 44 24 04 f5 03 00 	movl   $0x3f5,0x4(%esp)
  810097:	00 
  810098:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  81009f:	e8 e8 07 ff ff       	call   80088c <_panic>
  8100a4:	89 f0                	mov    %esi,%eax
  8100a6:	f7 d8                	neg    %eax
  8100a8:	98                   	cwtl   
  8100a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  8100ad:	89 1c 24             	mov    %ebx,(%esp)
  8100b0:	e8 73 76 ff ff       	call   807728 <pbuf_header>
  8100b5:	84 c0                	test   %al,%al
  8100b7:	74 1c                	je     8100d5 <tcp_receive+0x5b6>
  8100b9:	c7 44 24 08 ea 4a 81 	movl   $0x814aea,0x8(%esp)
  8100c0:	00 
  8100c1:	c7 44 24 04 fa 03 00 	movl   $0x3fa,0x4(%esp)
  8100c8:	00 
  8100c9:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  8100d0:	e8 b7 07 ff ff       	call   80088c <_panic>
  8100d5:	8b 43 04             	mov    0x4(%ebx),%eax
  8100d8:	a3 24 e5 b3 00       	mov    %eax,0xb3e524
  8100dd:	8b 47 24             	mov    0x24(%edi),%eax
  8100e0:	66 2b 05 38 e5 b3 00 	sub    0xb3e538,%ax
  8100e7:	66 29 05 28 e5 b3 00 	sub    %ax,0xb3e528
  8100ee:	8b 57 24             	mov    0x24(%edi),%edx
  8100f1:	89 15 38 e5 b3 00    	mov    %edx,0xb3e538
  8100f7:	a1 2c e5 b3 00       	mov    0xb3e52c,%eax
  8100fc:	89 50 04             	mov    %edx,0x4(%eax)
  8100ff:	eb 10                	jmp    810111 <tcp_receive+0x5f2>
  810101:	39 cb                	cmp    %ecx,%ebx
  810103:	79 1d                	jns    810122 <tcp_receive+0x603>
  810105:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  810109:	89 3c 24             	mov    %edi,(%esp)
  81010c:	e8 d4 ad ff ff       	call   80aee5 <tcp_output>
  810111:	8b 1d 38 e5 b3 00    	mov    0xb3e538,%ebx
  810117:	8b 4f 24             	mov    0x24(%edi),%ecx
  81011a:	39 cb                	cmp    %ecx,%ebx
  81011c:	0f 88 02 06 00 00    	js     810724 <tcp_receive+0xc05>
  810122:	0f b7 57 28          	movzwl 0x28(%edi),%edx
  810126:	b8 01 00 00 00       	mov    $0x1,%eax
  81012b:	29 d0                	sub    %edx,%eax
  81012d:	01 d8                	add    %ebx,%eax
  81012f:	29 c8                	sub    %ecx,%eax
  810131:	85 c0                	test   %eax,%eax
  810133:	0f 8f eb 05 00 00    	jg     810724 <tcp_receive+0xc05>
  810139:	39 cb                	cmp    %ecx,%ebx
  81013b:	0f 85 91 03 00 00    	jne    8104d2 <tcp_receive+0x9b3>
  810141:	8b 57 7c             	mov    0x7c(%edi),%edx
  810144:	85 d2                	test   %edx,%edx
  810146:	0f 84 8a 00 00 00    	je     8101d6 <tcp_receive+0x6b7>
  81014c:	8b 42 10             	mov    0x10(%edx),%eax
  81014f:	8b 48 04             	mov    0x4(%eax),%ecx
  810152:	0f b7 05 28 e5 b3 00 	movzwl 0xb3e528,%eax
  810159:	89 ce                	mov    %ecx,%esi
  81015b:	29 c6                	sub    %eax,%esi
  81015d:	89 f0                	mov    %esi,%eax
  81015f:	29 d8                	sub    %ebx,%eax
  810161:	85 c0                	test   %eax,%eax
  810163:	7f 71                	jg     8101d6 <tcp_receive+0x6b7>
  810165:	66 83 7a 0c 00       	cmpw   $0x0,0xc(%edx)
  81016a:	74 21                	je     81018d <tcp_receive+0x66e>
  81016c:	89 c8                	mov    %ecx,%eax
  81016e:	66 29 d8             	sub    %bx,%ax
  810171:	66 a3 28 e5 b3 00    	mov    %ax,0xb3e528
  810177:	0f b7 c0             	movzwl %ax,%eax
  81017a:	89 44 24 04          	mov    %eax,0x4(%esp)
  81017e:	a1 20 e5 b3 00       	mov    0xb3e520,%eax
  810183:	89 04 24             	mov    %eax,(%esp)
  810186:	e8 99 7a ff ff       	call   807c24 <pbuf_realloc>
  81018b:	eb 49                	jmp    8101d6 <tcp_receive+0x6b7>
  81018d:	a1 2c e5 b3 00       	mov    0xb3e52c,%eax
  810192:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810196:	89 04 24             	mov    %eax,(%esp)
  810199:	e8 d7 a6 ff ff       	call   80a875 <ntohs>
  81019e:	89 c3                	mov    %eax,%ebx
  8101a0:	8b 47 7c             	mov    0x7c(%edi),%eax
  8101a3:	8b 40 10             	mov    0x10(%eax),%eax
  8101a6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8101aa:	89 04 24             	mov    %eax,(%esp)
  8101ad:	e8 c3 a6 ff ff       	call   80a875 <ntohs>
  8101b2:	89 da                	mov    %ebx,%edx
  8101b4:	83 e2 03             	and    $0x3,%edx
  8101b7:	83 e0 03             	and    $0x3,%eax
  8101ba:	39 c2                	cmp    %eax,%edx
  8101bc:	75 18                	jne    8101d6 <tcp_receive+0x6b7>
  8101be:	8b 57 7c             	mov    0x7c(%edi),%edx
  8101c1:	8b 02                	mov    (%edx),%eax
  8101c3:	89 47 7c             	mov    %eax,0x7c(%edi)
  8101c6:	89 54 24 04          	mov    %edx,0x4(%esp)
  8101ca:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  8101d1:	e8 46 71 ff ff       	call   80731c <memp_free>
  8101d6:	0f b7 1d 28 e5 b3 00 	movzwl 0xb3e528,%ebx
  8101dd:	a1 2c e5 b3 00       	mov    0xb3e52c,%eax
  8101e2:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8101e6:	89 04 24             	mov    %eax,(%esp)
  8101e9:	e8 87 a6 ff ff       	call   80a875 <ntohs>
  8101ee:	a8 01                	test   $0x1,%al
  8101f0:	75 1a                	jne    81020c <tcp_receive+0x6ed>
  8101f2:	a1 2c e5 b3 00       	mov    0xb3e52c,%eax
  8101f7:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8101fb:	89 04 24             	mov    %eax,(%esp)
  8101fe:	e8 72 a6 ff ff       	call   80a875 <ntohs>
  810203:	ba 00 00 00 00       	mov    $0x0,%edx
  810208:	a8 02                	test   $0x2,%al
  81020a:	74 05                	je     810211 <tcp_receive+0x6f2>
  81020c:	ba 01 00 00 00       	mov    $0x1,%edx
  810211:	8d 14 13             	lea    (%ebx,%edx,1),%edx
  810214:	66 89 15 42 e5 b3 00 	mov    %dx,0xb3e542
  81021b:	83 7f 10 07          	cmpl   $0x7,0x10(%edi)
  81021f:	74 06                	je     810227 <tcp_receive+0x708>
  810221:	0f b7 c2             	movzwl %dx,%eax
  810224:	01 47 24             	add    %eax,0x24(%edi)
  810227:	0f b7 47 28          	movzwl 0x28(%edi),%eax
  81022b:	66 39 c2             	cmp    %ax,%dx
  81022e:	76 08                	jbe    810238 <tcp_receive+0x719>
  810230:	66 c7 47 28 00 00    	movw   $0x0,0x28(%edi)
  810236:	eb 07                	jmp    81023f <tcp_receive+0x720>
  810238:	66 29 d0             	sub    %dx,%ax
  81023b:	66 89 47 28          	mov    %ax,0x28(%edi)
  81023f:	0f b7 47 2a          	movzwl 0x2a(%edi),%eax
  810243:	66 39 c2             	cmp    %ax,%dx
  810246:	76 08                	jbe    810250 <tcp_receive+0x731>
  810248:	66 c7 47 2a 00 00    	movw   $0x0,0x2a(%edi)
  81024e:	eb 07                	jmp    810257 <tcp_receive+0x738>
  810250:	66 29 d0             	sub    %dx,%ax
  810253:	66 89 47 2a          	mov    %ax,0x2a(%edi)
  810257:	a1 20 e5 b3 00       	mov    0xb3e520,%eax
  81025c:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
  810261:	74 0f                	je     810272 <tcp_receive+0x753>
  810263:	a3 48 e5 b3 00       	mov    %eax,0xb3e548
  810268:	c7 05 20 e5 b3 00 00 	movl   $0x0,0xb3e520
  81026f:	00 00 00 
  810272:	a1 2c e5 b3 00       	mov    0xb3e52c,%eax
  810277:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  81027b:	89 04 24             	mov    %eax,(%esp)
  81027e:	e8 f2 a5 ff ff       	call   80a875 <ntohs>
  810283:	a8 01                	test   $0x1,%al
  810285:	74 07                	je     81028e <tcp_receive+0x76f>
  810287:	c6 05 44 e5 b3 00 20 	movb   $0x20,0xb3e544
  81028e:	8b 5f 7c             	mov    0x7c(%edi),%ebx
  810291:	85 db                	test   %ebx,%ebx
  810293:	0f 84 06 02 00 00    	je     81049f <tcp_receive+0x980>
  810299:	8b 43 10             	mov    0x10(%ebx),%eax
  81029c:	8b 70 04             	mov    0x4(%eax),%esi
  81029f:	3b 77 24             	cmp    0x24(%edi),%esi
  8102a2:	0f 85 f7 01 00 00    	jne    81049f <tcp_receive+0x980>
  8102a8:	89 35 38 e5 b3 00    	mov    %esi,0xb3e538
  8102ae:	0f b7 53 0c          	movzwl 0xc(%ebx),%edx
  8102b2:	66 89 55 e6          	mov    %dx,0xffffffe6(%ebp)
  8102b6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8102ba:	89 04 24             	mov    %eax,(%esp)
  8102bd:	e8 b3 a5 ff ff       	call   80a875 <ntohs>
  8102c2:	a8 01                	test   $0x1,%al
  8102c4:	75 18                	jne    8102de <tcp_receive+0x7bf>
  8102c6:	8b 43 10             	mov    0x10(%ebx),%eax
  8102c9:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8102cd:	89 04 24             	mov    %eax,(%esp)
  8102d0:	e8 a0 a5 ff ff       	call   80a875 <ntohs>
  8102d5:	ba 00 00 00 00       	mov    $0x0,%edx
  8102da:	a8 02                	test   $0x2,%al
  8102dc:	74 05                	je     8102e3 <tcp_receive+0x7c4>
  8102de:	ba 01 00 00 00       	mov    $0x1,%edx
  8102e3:	0f b7 45 e6          	movzwl 0xffffffe6(%ebp),%eax
  8102e7:	8d 04 02             	lea    (%edx,%eax,1),%eax
  8102ea:	01 f0                	add    %esi,%eax
  8102ec:	89 47 24             	mov    %eax,0x24(%edi)
  8102ef:	0f b7 77 28          	movzwl 0x28(%edi),%esi
  8102f3:	0f b7 4b 0c          	movzwl 0xc(%ebx),%ecx
  8102f7:	66 89 4d e8          	mov    %cx,0xffffffe8(%ebp)
  8102fb:	8b 43 10             	mov    0x10(%ebx),%eax
  8102fe:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810302:	89 04 24             	mov    %eax,(%esp)
  810305:	e8 6b a5 ff ff       	call   80a875 <ntohs>
  81030a:	a8 01                	test   $0x1,%al
  81030c:	75 18                	jne    810326 <tcp_receive+0x807>
  81030e:	8b 43 10             	mov    0x10(%ebx),%eax
  810311:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810315:	89 04 24             	mov    %eax,(%esp)
  810318:	e8 58 a5 ff ff       	call   80a875 <ntohs>
  81031d:	b9 00 00 00 00       	mov    $0x0,%ecx
  810322:	a8 02                	test   $0x2,%al
  810324:	74 05                	je     81032b <tcp_receive+0x80c>
  810326:	b9 01 00 00 00       	mov    $0x1,%ecx
  81032b:	0f b7 d6             	movzwl %si,%edx
  81032e:	0f b7 45 e8          	movzwl 0xffffffe8(%ebp),%eax
  810332:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  810335:	39 c2                	cmp    %eax,%edx
  810337:	7d 08                	jge    810341 <tcp_receive+0x822>
  810339:	66 c7 47 28 00 00    	movw   $0x0,0x28(%edi)
  81033f:	eb 4a                	jmp    81038b <tcp_receive+0x86c>
  810341:	0f b7 77 28          	movzwl 0x28(%edi),%esi
  810345:	66 89 75 ec          	mov    %si,0xffffffec(%ebp)
  810349:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  81034d:	8b 43 10             	mov    0x10(%ebx),%eax
  810350:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810354:	89 04 24             	mov    %eax,(%esp)
  810357:	e8 19 a5 ff ff       	call   80a875 <ntohs>
  81035c:	a8 01                	test   $0x1,%al
  81035e:	75 18                	jne    810378 <tcp_receive+0x859>
  810360:	8b 43 10             	mov    0x10(%ebx),%eax
  810363:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810367:	89 04 24             	mov    %eax,(%esp)
  81036a:	e8 06 a5 ff ff       	call   80a875 <ntohs>
  81036f:	ba 00 00 00 00       	mov    $0x0,%edx
  810374:	a8 02                	test   $0x2,%al
  810376:	74 05                	je     81037d <tcp_receive+0x85e>
  810378:	ba 01 00 00 00       	mov    $0x1,%edx
  81037d:	0f b7 45 ec          	movzwl 0xffffffec(%ebp),%eax
  810381:	66 29 f0             	sub    %si,%ax
  810384:	66 29 d0             	sub    %dx,%ax
  810387:	66 89 47 28          	mov    %ax,0x28(%edi)
  81038b:	0f b7 77 2a          	movzwl 0x2a(%edi),%esi
  81038f:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  810393:	66 89 45 ea          	mov    %ax,0xffffffea(%ebp)
  810397:	8b 43 10             	mov    0x10(%ebx),%eax
  81039a:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  81039e:	89 04 24             	mov    %eax,(%esp)
  8103a1:	e8 cf a4 ff ff       	call   80a875 <ntohs>
  8103a6:	a8 01                	test   $0x1,%al
  8103a8:	75 18                	jne    8103c2 <tcp_receive+0x8a3>
  8103aa:	8b 43 10             	mov    0x10(%ebx),%eax
  8103ad:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8103b1:	89 04 24             	mov    %eax,(%esp)
  8103b4:	e8 bc a4 ff ff       	call   80a875 <ntohs>
  8103b9:	b9 00 00 00 00       	mov    $0x0,%ecx
  8103be:	a8 02                	test   $0x2,%al
  8103c0:	74 05                	je     8103c7 <tcp_receive+0x8a8>
  8103c2:	b9 01 00 00 00       	mov    $0x1,%ecx
  8103c7:	0f b7 d6             	movzwl %si,%edx
  8103ca:	0f b7 45 ea          	movzwl 0xffffffea(%ebp),%eax
  8103ce:	8d 04 01             	lea    (%ecx,%eax,1),%eax
  8103d1:	39 c2                	cmp    %eax,%edx
  8103d3:	7d 08                	jge    8103dd <tcp_receive+0x8be>
  8103d5:	66 c7 47 2a 00 00    	movw   $0x0,0x2a(%edi)
  8103db:	eb 4a                	jmp    810427 <tcp_receive+0x908>
  8103dd:	0f b7 57 2a          	movzwl 0x2a(%edi),%edx
  8103e1:	66 89 55 ee          	mov    %dx,0xffffffee(%ebp)
  8103e5:	0f b7 73 0c          	movzwl 0xc(%ebx),%esi
  8103e9:	8b 43 10             	mov    0x10(%ebx),%eax
  8103ec:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8103f0:	89 04 24             	mov    %eax,(%esp)
  8103f3:	e8 7d a4 ff ff       	call   80a875 <ntohs>
  8103f8:	a8 01                	test   $0x1,%al
  8103fa:	75 18                	jne    810414 <tcp_receive+0x8f5>
  8103fc:	8b 43 10             	mov    0x10(%ebx),%eax
  8103ff:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810403:	89 04 24             	mov    %eax,(%esp)
  810406:	e8 6a a4 ff ff       	call   80a875 <ntohs>
  81040b:	ba 00 00 00 00       	mov    $0x0,%edx
  810410:	a8 02                	test   $0x2,%al
  810412:	74 05                	je     810419 <tcp_receive+0x8fa>
  810414:	ba 01 00 00 00       	mov    $0x1,%edx
  810419:	0f b7 45 ee          	movzwl 0xffffffee(%ebp),%eax
  81041d:	66 29 f0             	sub    %si,%ax
  810420:	66 29 d0             	sub    %dx,%ax
  810423:	66 89 47 2a          	mov    %ax,0x2a(%edi)
  810427:	8b 43 04             	mov    0x4(%ebx),%eax
  81042a:	66 83 78 08 00       	cmpw   $0x0,0x8(%eax)
  81042f:	74 24                	je     810455 <tcp_receive+0x936>
  810431:	8b 15 48 e5 b3 00    	mov    0xb3e548,%edx
  810437:	85 d2                	test   %edx,%edx
  810439:	74 0e                	je     810449 <tcp_receive+0x92a>
  81043b:	89 44 24 04          	mov    %eax,0x4(%esp)
  81043f:	89 14 24             	mov    %edx,(%esp)
  810442:	e8 3c 72 ff ff       	call   807683 <pbuf_cat>
  810447:	eb 05                	jmp    81044e <tcp_receive+0x92f>
  810449:	a3 48 e5 b3 00       	mov    %eax,0xb3e548
  81044e:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)
  810455:	8b 43 10             	mov    0x10(%ebx),%eax
  810458:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  81045c:	89 04 24             	mov    %eax,(%esp)
  81045f:	e8 11 a4 ff ff       	call   80a875 <ntohs>
  810464:	a8 01                	test   $0x1,%al
  810466:	74 14                	je     81047c <tcp_receive+0x95d>
  810468:	c6 05 44 e5 b3 00 20 	movb   $0x20,0xb3e544
  81046f:	83 7f 10 04          	cmpl   $0x4,0x10(%edi)
  810473:	75 07                	jne    81047c <tcp_receive+0x95d>
  810475:	c7 47 10 07 00 00 00 	movl   $0x7,0x10(%edi)
  81047c:	8b 03                	mov    (%ebx),%eax
  81047e:	89 47 7c             	mov    %eax,0x7c(%edi)
  810481:	89 1c 24             	mov    %ebx,(%esp)
  810484:	e8 95 81 ff ff       	call   80861e <tcp_seg_free>
  810489:	8b 5f 7c             	mov    0x7c(%edi),%ebx
  81048c:	85 db                	test   %ebx,%ebx
  81048e:	74 0f                	je     81049f <tcp_receive+0x980>
  810490:	8b 43 10             	mov    0x10(%ebx),%eax
  810493:	8b 70 04             	mov    0x4(%eax),%esi
  810496:	3b 77 24             	cmp    0x24(%edi),%esi
  810499:	0f 84 09 fe ff ff    	je     8102a8 <tcp_receive+0x789>
  81049f:	0f b6 47 20          	movzbl 0x20(%edi),%eax
  8104a3:	a8 01                	test   $0x1,%al
  8104a5:	74 1b                	je     8104c2 <tcp_receive+0x9a3>
  8104a7:	83 e0 fe             	and    $0xfffffffe,%eax
  8104aa:	83 c8 02             	or     $0x2,%eax
  8104ad:	88 47 20             	mov    %al,0x20(%edi)
  8104b0:	89 3c 24             	mov    %edi,(%esp)
  8104b3:	e8 2d aa ff ff       	call   80aee5 <tcp_output>
  8104b8:	b8 01 00 00 00       	mov    $0x1,%eax
  8104bd:	e9 a8 02 00 00       	jmp    81076a <tcp_receive+0xc4b>
  8104c2:	83 c8 01             	or     $0x1,%eax
  8104c5:	88 47 20             	mov    %al,0x20(%edi)
  8104c8:	b8 01 00 00 00       	mov    $0x1,%eax
  8104cd:	e9 98 02 00 00       	jmp    81076a <tcp_receive+0xc4b>
  8104d2:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  8104d6:	89 3c 24             	mov    %edi,(%esp)
  8104d9:	e8 07 aa ff ff       	call   80aee5 <tcp_output>
  8104de:	8b 5f 7c             	mov    0x7c(%edi),%ebx
  8104e1:	85 db                	test   %ebx,%ebx
  8104e3:	75 19                	jne    8104fe <tcp_receive+0x9df>
  8104e5:	c7 04 24 1c e5 b3 00 	movl   $0xb3e51c,(%esp)
  8104ec:	e8 e5 80 ff ff       	call   8085d6 <tcp_seg_copy>
  8104f1:	89 47 7c             	mov    %eax,0x7c(%edi)
  8104f4:	b8 00 00 00 00       	mov    $0x0,%eax
  8104f9:	e9 6c 02 00 00       	jmp    81076a <tcp_receive+0xc4b>
  8104fe:	8b 0d 38 e5 b3 00    	mov    0xb3e538,%ecx
  810504:	89 4d d8             	mov    %ecx,0xffffffd8(%ebp)
  810507:	be 00 00 00 00       	mov    $0x0,%esi
  81050c:	8b 43 10             	mov    0x10(%ebx),%eax
  81050f:	8b 50 04             	mov    0x4(%eax),%edx
  810512:	3b 55 d8             	cmp    0xffffffd8(%ebp),%edx
  810515:	0f 85 93 00 00 00    	jne    8105ae <tcp_receive+0xa8f>
  81051b:	0f b7 05 28 e5 b3 00 	movzwl 0xb3e528,%eax
  810522:	66 3b 43 0c          	cmp    0xc(%ebx),%ax
  810526:	0f 86 39 02 00 00    	jbe    810765 <tcp_receive+0xc46>
  81052c:	c7 04 24 1c e5 b3 00 	movl   $0xb3e51c,(%esp)
  810533:	e8 9e 80 ff ff       	call   8085d6 <tcp_seg_copy>
  810538:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  81053b:	85 c0                	test   %eax,%eax
  81053d:	0f 84 22 02 00 00    	je     810765 <tcp_receive+0xc46>
  810543:	8b 03                	mov    (%ebx),%eax
  810545:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  810548:	89 02                	mov    %eax,(%edx)
  81054a:	85 f6                	test   %esi,%esi
  81054c:	74 04                	je     810552 <tcp_receive+0xa33>
  81054e:	89 16                	mov    %edx,(%esi)
  810550:	eb 06                	jmp    810558 <tcp_receive+0xa39>
  810552:	8b 4d f0             	mov    0xfffffff0(%ebp),%ecx
  810555:	89 4f 7c             	mov    %ecx,0x7c(%edi)
  810558:	89 1c 24             	mov    %ebx,(%esp)
  81055b:	e8 be 80 ff ff       	call   80861e <tcp_seg_free>
  810560:	8b 5d f0             	mov    0xfffffff0(%ebp),%ebx
  810563:	8b 03                	mov    (%ebx),%eax
  810565:	85 c0                	test   %eax,%eax
  810567:	0f 84 f8 01 00 00    	je     810765 <tcp_receive+0xc46>
  81056d:	8b 0d 38 e5 b3 00    	mov    0xb3e538,%ecx
  810573:	8b 40 10             	mov    0x10(%eax),%eax
  810576:	8b 50 04             	mov    0x4(%eax),%edx
  810579:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  81057d:	29 d0                	sub    %edx,%eax
  81057f:	01 c8                	add    %ecx,%eax
  810581:	85 c0                	test   %eax,%eax
  810583:	0f 8e dc 01 00 00    	jle    810765 <tcp_receive+0xc46>
  810589:	89 d0                	mov    %edx,%eax
  81058b:	66 29 c8             	sub    %cx,%ax
  81058e:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  810592:	0f b7 c0             	movzwl %ax,%eax
  810595:	89 44 24 04          	mov    %eax,0x4(%esp)
  810599:	8b 43 04             	mov    0x4(%ebx),%eax
  81059c:	89 04 24             	mov    %eax,(%esp)
  81059f:	e8 80 76 ff ff       	call   807c24 <pbuf_realloc>
  8105a4:	b8 00 00 00 00       	mov    $0x0,%eax
  8105a9:	e9 bc 01 00 00       	jmp    81076a <tcp_receive+0xc4b>
  8105ae:	85 f6                	test   %esi,%esi
  8105b0:	75 5c                	jne    81060e <tcp_receive+0xaef>
  8105b2:	39 55 d8             	cmp    %edx,0xffffffd8(%ebp)
  8105b5:	0f 89 01 01 00 00    	jns    8106bc <tcp_receive+0xb9d>
  8105bb:	0f b7 05 28 e5 b3 00 	movzwl 0xb3e528,%eax
  8105c2:	03 45 d8             	add    0xffffffd8(%ebp),%eax
  8105c5:	29 d0                	sub    %edx,%eax
  8105c7:	85 c0                	test   %eax,%eax
  8105c9:	7e 20                	jle    8105eb <tcp_receive+0xacc>
  8105cb:	89 d0                	mov    %edx,%eax
  8105cd:	66 2b 45 d8          	sub    0xffffffd8(%ebp),%ax
  8105d1:	66 a3 28 e5 b3 00    	mov    %ax,0xb3e528
  8105d7:	0f b7 c0             	movzwl %ax,%eax
  8105da:	89 44 24 04          	mov    %eax,0x4(%esp)
  8105de:	a1 20 e5 b3 00       	mov    0xb3e520,%eax
  8105e3:	89 04 24             	mov    %eax,(%esp)
  8105e6:	e8 39 76 ff ff       	call   807c24 <pbuf_realloc>
  8105eb:	c7 04 24 1c e5 b3 00 	movl   $0xb3e51c,(%esp)
  8105f2:	e8 df 7f ff ff       	call   8085d6 <tcp_seg_copy>
  8105f7:	85 c0                	test   %eax,%eax
  8105f9:	0f 84 66 01 00 00    	je     810765 <tcp_receive+0xc46>
  8105ff:	89 18                	mov    %ebx,(%eax)
  810601:	89 47 7c             	mov    %eax,0x7c(%edi)
  810604:	b8 00 00 00 00       	mov    $0x0,%eax
  810609:	e9 5c 01 00 00       	jmp    81076a <tcp_receive+0xc4b>
  81060e:	8b 4d d8             	mov    0xffffffd8(%ebp),%ecx
  810611:	8b 46 10             	mov    0x10(%esi),%eax
  810614:	2b 48 04             	sub    0x4(%eax),%ecx
  810617:	89 4d dc             	mov    %ecx,0xffffffdc(%ebp)
  81061a:	83 e9 01             	sub    $0x1,%ecx
  81061d:	0f 88 99 00 00 00    	js     8106bc <tcp_receive+0xb9d>
  810623:	8b 45 d8             	mov    0xffffffd8(%ebp),%eax
  810626:	83 c0 01             	add    $0x1,%eax
  810629:	29 d0                	sub    %edx,%eax
  81062b:	85 c0                	test   %eax,%eax
  81062d:	0f 8f 89 00 00 00    	jg     8106bc <tcp_receive+0xb9d>
  810633:	0f b7 05 28 e5 b3 00 	movzwl 0xb3e528,%eax
  81063a:	03 45 d8             	add    0xffffffd8(%ebp),%eax
  81063d:	29 d0                	sub    %edx,%eax
  81063f:	85 c0                	test   %eax,%eax
  810641:	7e 20                	jle    810663 <tcp_receive+0xb44>
  810643:	89 d0                	mov    %edx,%eax
  810645:	66 2b 45 d8          	sub    0xffffffd8(%ebp),%ax
  810649:	66 a3 28 e5 b3 00    	mov    %ax,0xb3e528
  81064f:	0f b7 c0             	movzwl %ax,%eax
  810652:	89 44 24 04          	mov    %eax,0x4(%esp)
  810656:	a1 20 e5 b3 00       	mov    0xb3e520,%eax
  81065b:	89 04 24             	mov    %eax,(%esp)
  81065e:	e8 c1 75 ff ff       	call   807c24 <pbuf_realloc>
  810663:	c7 04 24 1c e5 b3 00 	movl   $0xb3e51c,(%esp)
  81066a:	e8 67 7f ff ff       	call   8085d6 <tcp_seg_copy>
  81066f:	85 c0                	test   %eax,%eax
  810671:	0f 84 ee 00 00 00    	je     810765 <tcp_receive+0xc46>
  810677:	89 18                	mov    %ebx,(%eax)
  810679:	89 06                	mov    %eax,(%esi)
  81067b:	8b 46 10             	mov    0x10(%esi),%eax
  81067e:	8b 48 04             	mov    0x4(%eax),%ecx
  810681:	8b 15 38 e5 b3 00    	mov    0xb3e538,%edx
  810687:	0f b7 46 0c          	movzwl 0xc(%esi),%eax
  81068b:	29 d0                	sub    %edx,%eax
  81068d:	01 c8                	add    %ecx,%eax
  81068f:	85 c0                	test   %eax,%eax
  810691:	0f 8e ce 00 00 00    	jle    810765 <tcp_receive+0xc46>
  810697:	89 d0                	mov    %edx,%eax
  810699:	66 29 c8             	sub    %cx,%ax
  81069c:	66 89 46 0c          	mov    %ax,0xc(%esi)
  8106a0:	0f b7 c0             	movzwl %ax,%eax
  8106a3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8106a7:	8b 46 04             	mov    0x4(%esi),%eax
  8106aa:	89 04 24             	mov    %eax,(%esp)
  8106ad:	e8 72 75 ff ff       	call   807c24 <pbuf_realloc>
  8106b2:	b8 00 00 00 00       	mov    $0x0,%eax
  8106b7:	e9 ae 00 00 00       	jmp    81076a <tcp_receive+0xc4b>
  8106bc:	8b 03                	mov    (%ebx),%eax
  8106be:	89 de                	mov    %ebx,%esi
  8106c0:	85 c0                	test   %eax,%eax
  8106c2:	74 07                	je     8106cb <tcp_receive+0xbac>
  8106c4:	89 c3                	mov    %eax,%ebx
  8106c6:	e9 41 fe ff ff       	jmp    81050c <tcp_receive+0x9ed>
  8106cb:	8b 45 d8             	mov    0xffffffd8(%ebp),%eax
  8106ce:	29 d0                	sub    %edx,%eax
  8106d0:	85 c0                	test   %eax,%eax
  8106d2:	0f 8e 8d 00 00 00    	jle    810765 <tcp_receive+0xc46>
  8106d8:	c7 04 24 1c e5 b3 00 	movl   $0xb3e51c,(%esp)
  8106df:	e8 f2 7e ff ff       	call   8085d6 <tcp_seg_copy>
  8106e4:	89 03                	mov    %eax,(%ebx)
  8106e6:	85 c0                	test   %eax,%eax
  8106e8:	74 7b                	je     810765 <tcp_receive+0xc46>
  8106ea:	8b 43 10             	mov    0x10(%ebx),%eax
  8106ed:	8b 48 04             	mov    0x4(%eax),%ecx
  8106f0:	8b 15 38 e5 b3 00    	mov    0xb3e538,%edx
  8106f6:	0f b7 43 0c          	movzwl 0xc(%ebx),%eax
  8106fa:	29 d0                	sub    %edx,%eax
  8106fc:	01 c8                	add    %ecx,%eax
  8106fe:	85 c0                	test   %eax,%eax
  810700:	7e 63                	jle    810765 <tcp_receive+0xc46>
  810702:	89 d0                	mov    %edx,%eax
  810704:	66 29 c8             	sub    %cx,%ax
  810707:	66 89 43 0c          	mov    %ax,0xc(%ebx)
  81070b:	0f b7 c0             	movzwl %ax,%eax
  81070e:	89 44 24 04          	mov    %eax,0x4(%esp)
  810712:	8b 43 04             	mov    0x4(%ebx),%eax
  810715:	89 04 24             	mov    %eax,(%esp)
  810718:	e8 07 75 ff ff       	call   807c24 <pbuf_realloc>
  81071d:	b8 00 00 00 00       	mov    $0x0,%eax
  810722:	eb 46                	jmp    81076a <tcp_receive+0xc4b>
  810724:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  810728:	89 3c 24             	mov    %edi,(%esp)
  81072b:	e8 b5 a7 ff ff       	call   80aee5 <tcp_output>
  810730:	b8 00 00 00 00       	mov    $0x0,%eax
  810735:	eb 33                	jmp    81076a <tcp_receive+0xc4b>
  810737:	a1 38 e5 b3 00       	mov    0xb3e538,%eax
  81073c:	8b 57 24             	mov    0x24(%edi),%edx
  81073f:	39 d0                	cmp    %edx,%eax
  810741:	78 0f                	js     810752 <tcp_receive+0xc33>
  810743:	83 c0 01             	add    $0x1,%eax
  810746:	29 d0                	sub    %edx,%eax
  810748:	0f b7 57 28          	movzwl 0x28(%edi),%edx
  81074c:	29 d0                	sub    %edx,%eax
  81074e:	85 c0                	test   %eax,%eax
  810750:	7e 13                	jle    810765 <tcp_receive+0xc46>
  810752:	80 4f 20 02          	orb    $0x2,0x20(%edi)
  810756:	89 3c 24             	mov    %edi,(%esp)
  810759:	e8 87 a7 ff ff       	call   80aee5 <tcp_output>
  81075e:	b8 00 00 00 00       	mov    $0x0,%eax
  810763:	eb 05                	jmp    81076a <tcp_receive+0xc4b>
  810765:	b8 00 00 00 00       	mov    $0x0,%eax
  81076a:	0f b6 c0             	movzbl %al,%eax
  81076d:	83 c4 2c             	add    $0x2c,%esp
  810770:	5b                   	pop    %ebx
  810771:	5e                   	pop    %esi
  810772:	5f                   	pop    %edi
  810773:	5d                   	pop    %ebp
  810774:	c3                   	ret    

00810775 <tcp_input>:
  810775:	55                   	push   %ebp
  810776:	89 e5                	mov    %esp,%ebp
  810778:	57                   	push   %edi
  810779:	56                   	push   %esi
  81077a:	53                   	push   %ebx
  81077b:	83 ec 3c             	sub    $0x3c,%esp
  81077e:	8b 7d 08             	mov    0x8(%ebp),%edi
  810781:	8b 5f 04             	mov    0x4(%edi),%ebx
  810784:	89 1d 34 e5 b3 00    	mov    %ebx,0xb3e534
  81078a:	0f b7 03             	movzwl (%ebx),%eax
  81078d:	89 04 24             	mov    %eax,(%esp)
  810790:	e8 e0 a0 ff ff       	call   80a875 <ntohs>
  810795:	c1 e8 06             	shr    $0x6,%eax
  810798:	83 e0 3c             	and    $0x3c,%eax
  81079b:	01 c3                	add    %eax,%ebx
  81079d:	89 1d 30 e5 b3 00    	mov    %ebx,0xb3e530
  8107a3:	a1 34 e5 b3 00       	mov    0xb3e534,%eax
  8107a8:	0f b7 00             	movzwl (%eax),%eax
  8107ab:	89 04 24             	mov    %eax,(%esp)
  8107ae:	e8 c2 a0 ff ff       	call   80a875 <ntohs>
  8107b3:	c1 e8 06             	shr    $0x6,%eax
  8107b6:	83 e0 3c             	and    $0x3c,%eax
  8107b9:	f7 d8                	neg    %eax
  8107bb:	98                   	cwtl   
  8107bc:	89 44 24 04          	mov    %eax,0x4(%esp)
  8107c0:	89 3c 24             	mov    %edi,(%esp)
  8107c3:	e8 60 6f ff ff       	call   807728 <pbuf_header>
  8107c8:	84 c0                	test   %al,%al
  8107ca:	75 07                	jne    8107d3 <tcp_input+0x5e>
  8107cc:	66 83 7f 08 13       	cmpw   $0x13,0x8(%edi)
  8107d1:	77 0d                	ja     8107e0 <tcp_input+0x6b>
  8107d3:	89 3c 24             	mov    %edi,(%esp)
  8107d6:	e8 b9 72 ff ff       	call   807a94 <pbuf_free>
  8107db:	e9 89 0d 00 00       	jmp    811569 <tcp_input+0xdf4>
  8107e0:	8b 45 0c             	mov    0xc(%ebp),%eax
  8107e3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8107e7:	a1 34 e5 b3 00       	mov    0xb3e534,%eax
  8107ec:	83 c0 10             	add    $0x10,%eax
  8107ef:	89 04 24             	mov    %eax,(%esp)
  8107f2:	e8 a5 8c ff ff       	call   80949c <ip_addr_isbroadcast>
  8107f7:	84 c0                	test   %al,%al
  8107f9:	75 2a                	jne    810825 <tcp_input+0xb0>
  8107fb:	a1 34 e5 b3 00       	mov    0xb3e534,%eax
  810800:	8b 58 10             	mov    0x10(%eax),%ebx
  810803:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  81080a:	e8 8b a2 ff ff       	call   80aa9a <ntohl>
  81080f:	89 c6                	mov    %eax,%esi
  810811:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  810818:	e8 7d a2 ff ff       	call   80aa9a <ntohl>
  81081d:	89 f2                	mov    %esi,%edx
  81081f:	21 da                	and    %ebx,%edx
  810821:	39 c2                	cmp    %eax,%edx
  810823:	75 0d                	jne    810832 <tcp_input+0xbd>
  810825:	89 3c 24             	mov    %edi,(%esp)
  810828:	e8 67 72 ff ff       	call   807a94 <pbuf_free>
  81082d:	e9 37 0d 00 00       	jmp    811569 <tcp_input+0xdf4>
  810832:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  810838:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  81083c:	89 44 24 10          	mov    %eax,0x10(%esp)
  810840:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
  810847:	00 
  810848:	8d 42 10             	lea    0x10(%edx),%eax
  81084b:	89 44 24 08          	mov    %eax,0x8(%esp)
  81084f:	83 c2 0c             	add    $0xc,%edx
  810852:	89 54 24 04          	mov    %edx,0x4(%esp)
  810856:	89 3c 24             	mov    %edi,(%esp)
  810859:	e8 01 9d ff ff       	call   80a55f <inet_chksum_pseudo>
  81085e:	66 85 c0             	test   %ax,%ax
  810861:	74 0d                	je     810870 <tcp_input+0xfb>
  810863:	89 3c 24             	mov    %edi,(%esp)
  810866:	e8 29 72 ff ff       	call   807a94 <pbuf_free>
  81086b:	e9 f9 0c 00 00       	jmp    811569 <tcp_input+0xdf4>
  810870:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  810875:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810879:	89 04 24             	mov    %eax,(%esp)
  81087c:	e8 f4 9f ff ff       	call   80a875 <ntohs>
  810881:	66 c1 e8 0c          	shr    $0xc,%ax
  810885:	0f b6 c0             	movzbl %al,%eax
  810888:	c1 e0 02             	shl    $0x2,%eax
  81088b:	f7 d8                	neg    %eax
  81088d:	89 44 24 04          	mov    %eax,0x4(%esp)
  810891:	89 3c 24             	mov    %edi,(%esp)
  810894:	e8 8f 6e ff ff       	call   807728 <pbuf_header>
  810899:	84 c0                	test   %al,%al
  81089b:	74 0d                	je     8108aa <tcp_input+0x135>
  81089d:	89 3c 24             	mov    %edi,(%esp)
  8108a0:	e8 ef 71 ff ff       	call   807a94 <pbuf_free>
  8108a5:	e9 bf 0c 00 00       	jmp    811569 <tcp_input+0xdf4>
  8108aa:	8b 1d 30 e5 b3 00    	mov    0xb3e530,%ebx
  8108b0:	0f b7 03             	movzwl (%ebx),%eax
  8108b3:	89 04 24             	mov    %eax,(%esp)
  8108b6:	e8 ba 9f ff ff       	call   80a875 <ntohs>
  8108bb:	66 89 03             	mov    %ax,(%ebx)
  8108be:	8b 1d 30 e5 b3 00    	mov    0xb3e530,%ebx
  8108c4:	0f b7 43 02          	movzwl 0x2(%ebx),%eax
  8108c8:	89 04 24             	mov    %eax,(%esp)
  8108cb:	e8 a5 9f ff ff       	call   80a875 <ntohs>
  8108d0:	66 89 43 02          	mov    %ax,0x2(%ebx)
  8108d4:	8b 1d 30 e5 b3 00    	mov    0xb3e530,%ebx
  8108da:	8b 43 04             	mov    0x4(%ebx),%eax
  8108dd:	89 04 24             	mov    %eax,(%esp)
  8108e0:	e8 b5 a1 ff ff       	call   80aa9a <ntohl>
  8108e5:	89 43 04             	mov    %eax,0x4(%ebx)
  8108e8:	a3 38 e5 b3 00       	mov    %eax,0xb3e538
  8108ed:	8b 1d 30 e5 b3 00    	mov    0xb3e530,%ebx
  8108f3:	8b 43 08             	mov    0x8(%ebx),%eax
  8108f6:	89 04 24             	mov    %eax,(%esp)
  8108f9:	e8 9c a1 ff ff       	call   80aa9a <ntohl>
  8108fe:	89 43 08             	mov    %eax,0x8(%ebx)
  810901:	a3 3c e5 b3 00       	mov    %eax,0xb3e53c
  810906:	8b 1d 30 e5 b3 00    	mov    0xb3e530,%ebx
  81090c:	0f b7 43 0e          	movzwl 0xe(%ebx),%eax
  810910:	89 04 24             	mov    %eax,(%esp)
  810913:	e8 5d 9f ff ff       	call   80a875 <ntohs>
  810918:	66 89 43 0e          	mov    %ax,0xe(%ebx)
  81091c:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  810921:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  810925:	89 04 24             	mov    %eax,(%esp)
  810928:	e8 48 9f ff ff       	call   80a875 <ntohs>
  81092d:	83 e0 3f             	and    $0x3f,%eax
  810930:	a2 40 e5 b3 00       	mov    %al,0xb3e540
  810935:	0f b6 c0             	movzbl %al,%eax
  810938:	89 45 d4             	mov    %eax,0xffffffd4(%ebp)
  81093b:	a8 03                	test   $0x3,%al
  81093d:	0f 95 c0             	setne  %al
  810940:	66 0f b6 c0          	movzbw %al,%ax
  810944:	66 03 47 08          	add    0x8(%edi),%ax
  810948:	66 89 45 da          	mov    %ax,0xffffffda(%ebp)
  81094c:	66 a3 42 e5 b3 00    	mov    %ax,0xb3e542
  810952:	8b 35 c8 e5 b3 00    	mov    0xb3e5c8,%esi
  810958:	85 f6                	test   %esi,%esi
  81095a:	0f 84 2d 01 00 00    	je     810a8d <tcp_input+0x318>
  810960:	8b 46 10             	mov    0x10(%esi),%eax
  810963:	85 c0                	test   %eax,%eax
  810965:	74 14                	je     81097b <tcp_input+0x206>
  810967:	83 f8 0a             	cmp    $0xa,%eax
  81096a:	74 30                	je     81099c <tcp_input+0x227>
  81096c:	83 f8 01             	cmp    $0x1,%eax
  81096f:	90                   	nop    
  810970:	75 6d                	jne    8109df <tcp_input+0x26a>
  810972:	eb 4f                	jmp    8109c3 <tcp_input+0x24e>
  810974:	8b 42 10             	mov    0x10(%edx),%eax
  810977:	85 c0                	test   %eax,%eax
  810979:	75 1c                	jne    810997 <tcp_input+0x222>
  81097b:	c7 44 24 08 80 49 81 	movl   $0x814980,0x8(%esp)
  810982:	00 
  810983:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
  81098a:	00 
  81098b:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810992:	e8 f5 fe fe ff       	call   80088c <_panic>
  810997:	83 f8 0a             	cmp    $0xa,%eax
  81099a:	75 1c                	jne    8109b8 <tcp_input+0x243>
  81099c:	c7 44 24 08 a8 49 81 	movl   $0x8149a8,0x8(%esp)
  8109a3:	00 
  8109a4:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
  8109ab:	00 
  8109ac:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  8109b3:	e8 d4 fe fe ff       	call   80088c <_panic>
  8109b8:	89 f1                	mov    %esi,%ecx
  8109ba:	83 f8 01             	cmp    $0x1,%eax
  8109bd:	74 04                	je     8109c3 <tcp_input+0x24e>
  8109bf:	89 d6                	mov    %edx,%esi
  8109c1:	eb 35                	jmp    8109f8 <tcp_input+0x283>
  8109c3:	c7 44 24 08 d4 49 81 	movl   $0x8149d4,0x8(%esp)
  8109ca:	00 
  8109cb:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
  8109d2:	00 
  8109d3:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  8109da:	e8 ad fe fe ff       	call   80088c <_panic>
  8109df:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  8109e4:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  8109e7:	0f b7 18             	movzwl (%eax),%ebx
  8109ea:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  8109f0:	89 55 dc             	mov    %edx,0xffffffdc(%ebp)
  8109f3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8109f8:	66 39 5e 1e          	cmp    %bx,0x1e(%esi)
  8109fc:	0f 85 80 00 00 00    	jne    810a82 <tcp_input+0x30d>
  810a02:	0f b7 46 1c          	movzwl 0x1c(%esi),%eax
  810a06:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  810a09:	66 3b 42 02          	cmp    0x2(%edx),%ax
  810a0d:	75 73                	jne    810a82 <tcp_input+0x30d>
  810a0f:	8b 46 04             	mov    0x4(%esi),%eax
  810a12:	8b 55 dc             	mov    0xffffffdc(%ebp),%edx
  810a15:	3b 42 0c             	cmp    0xc(%edx),%eax
  810a18:	75 68                	jne    810a82 <tcp_input+0x30d>
  810a1a:	8b 06                	mov    (%esi),%eax
  810a1c:	3b 42 10             	cmp    0x10(%edx),%eax
  810a1f:	75 61                	jne    810a82 <tcp_input+0x30d>
  810a21:	8b 46 0c             	mov    0xc(%esi),%eax
  810a24:	39 f0                	cmp    %esi,%eax
  810a26:	75 1c                	jne    810a44 <tcp_input+0x2cf>
  810a28:	c7 44 24 08 fc 49 81 	movl   $0x8149fc,0x8(%esp)
  810a2f:	00 
  810a30:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
  810a37:	00 
  810a38:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810a3f:	e8 48 fe fe ff       	call   80088c <_panic>
  810a44:	85 c9                	test   %ecx,%ecx
  810a46:	0f 84 bb 0a 00 00    	je     811507 <tcp_input+0xd92>
  810a4c:	89 41 0c             	mov    %eax,0xc(%ecx)
  810a4f:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  810a54:	89 46 0c             	mov    %eax,0xc(%esi)
  810a57:	89 35 c8 e5 b3 00    	mov    %esi,0xb3e5c8
  810a5d:	39 76 0c             	cmp    %esi,0xc(%esi)
  810a60:	0f 85 af 0a 00 00    	jne    811515 <tcp_input+0xda0>
  810a66:	c7 44 24 08 28 4a 81 	movl   $0x814a28,0x8(%esp)
  810a6d:	00 
  810a6e:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
  810a75:	00 
  810a76:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810a7d:	e8 0a fe fe ff       	call   80088c <_panic>
  810a82:	8b 56 0c             	mov    0xc(%esi),%edx
  810a85:	85 d2                	test   %edx,%edx
  810a87:	0f 85 e7 fe ff ff    	jne    810974 <tcp_input+0x1ff>
  810a8d:	8b 1d dc e5 b3 00    	mov    0xb3e5dc,%ebx
  810a93:	85 db                	test   %ebx,%ebx
  810a95:	0f 84 a3 00 00 00    	je     810b3e <tcp_input+0x3c9>
  810a9b:	83 7b 10 0a          	cmpl   $0xa,0x10(%ebx)
  810a9f:	74 24                	je     810ac5 <tcp_input+0x350>
  810aa1:	eb 06                	jmp    810aa9 <tcp_input+0x334>
  810aa3:	83 7b 10 0a          	cmpl   $0xa,0x10(%ebx)
  810aa7:	74 2b                	je     810ad4 <tcp_input+0x35f>
  810aa9:	c7 44 24 08 54 4a 81 	movl   $0x814a54,0x8(%esp)
  810ab0:	00 
  810ab1:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
  810ab8:	00 
  810ab9:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810ac0:	e8 c7 fd fe ff       	call   80088c <_panic>
  810ac5:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  810acb:	0f b7 11             	movzwl (%ecx),%edx
  810ace:	8b 35 34 e5 b3 00    	mov    0xb3e534,%esi
  810ad4:	66 39 53 1e          	cmp    %dx,0x1e(%ebx)
  810ad8:	75 59                	jne    810b33 <tcp_input+0x3be>
  810ada:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  810ade:	66 3b 41 02          	cmp    0x2(%ecx),%ax
  810ae2:	75 4f                	jne    810b33 <tcp_input+0x3be>
  810ae4:	8b 43 04             	mov    0x4(%ebx),%eax
  810ae7:	3b 46 0c             	cmp    0xc(%esi),%eax
  810aea:	75 47                	jne    810b33 <tcp_input+0x3be>
  810aec:	8b 03                	mov    (%ebx),%eax
  810aee:	3b 46 10             	cmp    0x10(%esi),%eax
  810af1:	75 40                	jne    810b33 <tcp_input+0x3be>
  810af3:	0f b7 45 da          	movzwl 0xffffffda(%ebp),%eax
  810af7:	89 c2                	mov    %eax,%edx
  810af9:	03 15 38 e5 b3 00    	add    0xb3e538,%edx
  810aff:	89 d0                	mov    %edx,%eax
  810b01:	2b 43 24             	sub    0x24(%ebx),%eax
  810b04:	85 c0                	test   %eax,%eax
  810b06:	7e 03                	jle    810b0b <tcp_input+0x396>
  810b08:	89 53 24             	mov    %edx,0x24(%ebx)
  810b0b:	66 83 7d da 00       	cmpw   $0x0,0xffffffda(%ebp)
  810b10:	74 0c                	je     810b1e <tcp_input+0x3a9>
  810b12:	80 4b 20 02          	orb    $0x2,0x20(%ebx)
  810b16:	89 1c 24             	mov    %ebx,(%esp)
  810b19:	e8 c7 a3 ff ff       	call   80aee5 <tcp_output>
  810b1e:	89 1c 24             	mov    %ebx,(%esp)
  810b21:	e8 bf a3 ff ff       	call   80aee5 <tcp_output>
  810b26:	89 3c 24             	mov    %edi,(%esp)
  810b29:	e8 66 6f ff ff       	call   807a94 <pbuf_free>
  810b2e:	e9 36 0a 00 00       	jmp    811569 <tcp_input+0xdf4>
  810b33:	8b 5b 0c             	mov    0xc(%ebx),%ebx
  810b36:	85 db                	test   %ebx,%ebx
  810b38:	0f 85 65 ff ff ff    	jne    810aa3 <tcp_input+0x32e>
  810b3e:	8b 1d d0 e5 b3 00    	mov    0xb3e5d0,%ebx
  810b44:	85 db                	test   %ebx,%ebx
  810b46:	0f 84 55 09 00 00    	je     8114a1 <tcp_input+0xd2c>
  810b4c:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  810b52:	8b 35 34 e5 b3 00    	mov    0xb3e534,%esi
  810b58:	ba 00 00 00 00       	mov    $0x0,%edx
  810b5d:	85 db                	test   %ebx,%ebx
  810b5f:	74 0f                	je     810b70 <tcp_input+0x3fb>
  810b61:	8b 03                	mov    (%ebx),%eax
  810b63:	85 c0                	test   %eax,%eax
  810b65:	74 09                	je     810b70 <tcp_input+0x3fb>
  810b67:	3b 46 10             	cmp    0x10(%esi),%eax
  810b6a:	0f 85 95 01 00 00    	jne    810d05 <tcp_input+0x590>
  810b70:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  810b74:	66 3b 41 02          	cmp    0x2(%ecx),%ax
  810b78:	0f 85 87 01 00 00    	jne    810d05 <tcp_input+0x590>
  810b7e:	85 d2                	test   %edx,%edx
  810b80:	74 14                	je     810b96 <tcp_input+0x421>
  810b82:	8b 43 0c             	mov    0xc(%ebx),%eax
  810b85:	89 42 0c             	mov    %eax,0xc(%edx)
  810b88:	a1 d0 e5 b3 00       	mov    0xb3e5d0,%eax
  810b8d:	89 43 0c             	mov    %eax,0xc(%ebx)
  810b90:	89 1d d0 e5 b3 00    	mov    %ebx,0xb3e5d0
  810b96:	f6 45 d4 10          	testb  $0x10,0xffffffd4(%ebp)
  810b9a:	74 40                	je     810bdc <tcp_input+0x467>
  810b9c:	0f b7 01             	movzwl (%ecx),%eax
  810b9f:	89 44 24 14          	mov    %eax,0x14(%esp)
  810ba3:	0f b7 41 02          	movzwl 0x2(%ecx),%eax
  810ba7:	89 44 24 10          	mov    %eax,0x10(%esp)
  810bab:	8d 46 0c             	lea    0xc(%esi),%eax
  810bae:	89 44 24 0c          	mov    %eax,0xc(%esp)
  810bb2:	8d 46 10             	lea    0x10(%esi),%eax
  810bb5:	89 44 24 08          	mov    %eax,0x8(%esp)
  810bb9:	0f b7 45 da          	movzwl 0xffffffda(%ebp),%eax
  810bbd:	03 05 38 e5 b3 00    	add    0xb3e538,%eax
  810bc3:	89 44 24 04          	mov    %eax,0x4(%esp)
  810bc7:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  810bcc:	83 c0 01             	add    $0x1,%eax
  810bcf:	89 04 24             	mov    %eax,(%esp)
  810bd2:	e8 b1 a1 ff ff       	call   80ad88 <tcp_rst>
  810bd7:	e9 1c 01 00 00       	jmp    810cf8 <tcp_input+0x583>
  810bdc:	f6 45 d4 02          	testb  $0x2,0xffffffd4(%ebp)
  810be0:	0f 84 12 01 00 00    	je     810cf8 <tcp_input+0x583>
  810be6:	0f b6 43 14          	movzbl 0x14(%ebx),%eax
  810bea:	89 04 24             	mov    %eax,(%esp)
  810bed:	8d 76 00             	lea    0x0(%esi),%esi
  810bf0:	e8 eb 80 ff ff       	call   808ce0 <tcp_alloc>
  810bf5:	89 c6                	mov    %eax,%esi
  810bf7:	85 c0                	test   %eax,%eax
  810bf9:	0f 84 f9 00 00 00    	je     810cf8 <tcp_input+0x583>
  810bff:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  810c05:	b8 00 00 00 00       	mov    $0x0,%eax
  810c0a:	83 fa f0             	cmp    $0xfffffff0,%edx
  810c0d:	74 03                	je     810c12 <tcp_input+0x49d>
  810c0f:	8b 42 10             	mov    0x10(%edx),%eax
  810c12:	89 06                	mov    %eax,(%esi)
  810c14:	0f b7 43 1c          	movzwl 0x1c(%ebx),%eax
  810c18:	66 89 46 1c          	mov    %ax,0x1c(%esi)
  810c1c:	b8 00 00 00 00       	mov    $0x0,%eax
  810c21:	83 fa f4             	cmp    $0xfffffff4,%edx
  810c24:	74 03                	je     810c29 <tcp_input+0x4b4>
  810c26:	8b 42 0c             	mov    0xc(%edx),%eax
  810c29:	89 46 04             	mov    %eax,0x4(%esi)
  810c2c:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  810c32:	0f b7 01             	movzwl (%ecx),%eax
  810c35:	66 89 46 1e          	mov    %ax,0x1e(%esi)
  810c39:	c7 46 10 03 00 00 00 	movl   $0x3,0x10(%esi)
  810c40:	8b 15 38 e5 b3 00    	mov    0xb3e538,%edx
  810c46:	8d 42 01             	lea    0x1(%edx),%eax
  810c49:	89 46 24             	mov    %eax,0x24(%esi)
  810c4c:	0f b7 41 0e          	movzwl 0xe(%ecx),%eax
  810c50:	66 89 46 5c          	mov    %ax,0x5c(%esi)
  810c54:	66 89 46 50          	mov    %ax,0x50(%esi)
  810c58:	83 ea 01             	sub    $0x1,%edx
  810c5b:	89 56 60             	mov    %edx,0x60(%esi)
  810c5e:	8b 43 18             	mov    0x18(%ebx),%eax
  810c61:	89 46 18             	mov    %eax,0x18(%esi)
  810c64:	8b 43 20             	mov    0x20(%ebx),%eax
  810c67:	89 86 90 00 00 00    	mov    %eax,0x90(%esi)
  810c6d:	0f b7 43 08          	movzwl 0x8(%ebx),%eax
  810c71:	66 25 99 01          	and    $0x199,%ax
  810c75:	66 89 46 08          	mov    %ax,0x8(%esi)
  810c79:	a1 c8 e5 b3 00       	mov    0xb3e5c8,%eax
  810c7e:	89 46 0c             	mov    %eax,0xc(%esi)
  810c81:	89 35 c8 e5 b3 00    	mov    %esi,0xb3e5c8
  810c87:	e8 a1 3e ff ff       	call   804b2d <tcp_timer_needed>
  810c8c:	89 f0                	mov    %esi,%eax
  810c8e:	e8 dd ed ff ff       	call   80fa70 <tcp_parseopt>
  810c93:	8d 46 04             	lea    0x4(%esi),%eax
  810c96:	89 44 24 04          	mov    %eax,0x4(%esp)
  810c9a:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  810c9e:	89 04 24             	mov    %eax,(%esp)
  810ca1:	e8 ee 77 ff ff       	call   808494 <tcp_eff_send_mss>
  810ca6:	66 89 46 34          	mov    %ax,0x34(%esi)
  810caa:	c7 04 24 b4 05 04 02 	movl   $0x20405b4,(%esp)
  810cb1:	e8 d6 9b ff ff       	call   80a88c <htonl>
  810cb6:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  810cb9:	8d 45 f0             	lea    0xfffffff0(%ebp),%eax
  810cbc:	c7 44 24 18 04 00 00 	movl   $0x4,0x18(%esp)
  810cc3:	00 
  810cc4:	89 44 24 14          	mov    %eax,0x14(%esp)
  810cc8:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  810ccf:	00 
  810cd0:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
  810cd7:	00 
  810cd8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  810cdf:	00 
  810ce0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  810ce7:	00 
  810ce8:	89 34 24             	mov    %esi,(%esp)
  810ceb:	e8 93 a7 ff ff       	call   80b483 <tcp_enqueue>
  810cf0:	89 34 24             	mov    %esi,(%esp)
  810cf3:	e8 ed a1 ff ff       	call   80aee5 <tcp_output>
  810cf8:	89 3c 24             	mov    %edi,(%esp)
  810cfb:	e8 94 6d ff ff       	call   807a94 <pbuf_free>
  810d00:	e9 64 08 00 00       	jmp    811569 <tcp_input+0xdf4>
  810d05:	8b 43 0c             	mov    0xc(%ebx),%eax
  810d08:	85 c0                	test   %eax,%eax
  810d0a:	0f 84 91 07 00 00    	je     8114a1 <tcp_input+0xd2c>
  810d10:	89 da                	mov    %ebx,%edx
  810d12:	89 c3                	mov    %eax,%ebx
  810d14:	e9 44 fe ff ff       	jmp    810b5d <tcp_input+0x3e8>
  810d19:	c7 05 1c e5 b3 00 00 	movl   $0x0,0xb3e51c
  810d20:	00 00 00 
  810d23:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  810d27:	66 a3 28 e5 b3 00    	mov    %ax,0xb3e528
  810d2d:	8b 47 04             	mov    0x4(%edi),%eax
  810d30:	a3 24 e5 b3 00       	mov    %eax,0xb3e524
  810d35:	89 3d 20 e5 b3 00    	mov    %edi,0xb3e520
  810d3b:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  810d3e:	a3 2c e5 b3 00       	mov    %eax,0xb3e52c
  810d43:	c7 05 48 e5 b3 00 00 	movl   $0x0,0xb3e548
  810d4a:	00 00 00 
  810d4d:	c6 05 44 e5 b3 00 00 	movb   $0x0,0xb3e544
  810d54:	8b 86 80 00 00 00    	mov    0x80(%esi),%eax
  810d5a:	85 c0                	test   %eax,%eax
  810d5c:	74 50                	je     810dae <tcp_input+0x639>
  810d5e:	8b 96 88 00 00 00    	mov    0x88(%esi),%edx
  810d64:	85 d2                	test   %edx,%edx
  810d66:	74 1e                	je     810d86 <tcp_input+0x611>
  810d68:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  810d6f:	00 
  810d70:	89 44 24 08          	mov    %eax,0x8(%esp)
  810d74:	89 74 24 04          	mov    %esi,0x4(%esp)
  810d78:	8b 46 18             	mov    0x18(%esi),%eax
  810d7b:	89 04 24             	mov    %eax,(%esp)
  810d7e:	ff d2                	call   *%edx
  810d80:	84 c0                	test   %al,%al
  810d82:	74 11                	je     810d95 <tcp_input+0x620>
  810d84:	eb 1b                	jmp    810da1 <tcp_input+0x62c>
  810d86:	89 04 24             	mov    %eax,(%esp)
  810d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  810d90:	e8 ff 6c ff ff       	call   807a94 <pbuf_free>
  810d95:	c7 86 80 00 00 00 00 	movl   $0x0,0x80(%esi)
  810d9c:	00 00 00 
  810d9f:	eb 0d                	jmp    810dae <tcp_input+0x639>
  810da1:	89 3c 24             	mov    %edi,(%esp)
  810da4:	e8 eb 6c ff ff       	call   807a94 <pbuf_free>
  810da9:	e9 bb 07 00 00       	jmp    811569 <tcp_input+0xdf4>
  810dae:	89 35 e4 e5 b3 00    	mov    %esi,0xb3e5e4
  810db4:	0f b6 15 40 e5 b3 00 	movzbl 0xb3e540,%edx
  810dbb:	f6 c2 04             	test   $0x4,%dl
  810dbe:	74 68                	je     810e28 <tcp_input+0x6b3>
  810dc0:	8b 4e 10             	mov    0x10(%esi),%ecx
  810dc3:	83 f9 02             	cmp    $0x2,%ecx
  810dc6:	75 11                	jne    810dd9 <tcp_input+0x664>
  810dc8:	8b 46 54             	mov    0x54(%esi),%eax
  810dcb:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  810dd1:	0f 85 5e 07 00 00    	jne    811535 <tcp_input+0xdc0>
  810dd7:	eb 3f                	jmp    810e18 <tcp_input+0x6a3>
  810dd9:	a1 38 e5 b3 00       	mov    0xb3e538,%eax
  810dde:	89 c2                	mov    %eax,%edx
  810de0:	2b 56 24             	sub    0x24(%esi),%edx
  810de3:	0f 88 4c 07 00 00    	js     811535 <tcp_input+0xdc0>
  810de9:	0f b7 46 28          	movzwl 0x28(%esi),%eax
  810ded:	29 c2                	sub    %eax,%edx
  810def:	85 d2                	test   %edx,%edx
  810df1:	0f 8f 3e 07 00 00    	jg     811535 <tcp_input+0xdc0>
  810df7:	e9 29 07 00 00       	jmp    811525 <tcp_input+0xdb0>
  810dfc:	c7 44 24 08 84 4a 81 	movl   $0x814a84,0x8(%esp)
  810e03:	00 
  810e04:	c7 44 24 04 09 02 00 	movl   $0x209,0x4(%esp)
  810e0b:	00 
  810e0c:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810e13:	e8 74 fa fe ff       	call   80088c <_panic>
  810e18:	c6 05 44 e5 b3 00 08 	movb   $0x8,0xb3e544
  810e1f:	80 66 20 fe          	andb   $0xfe,0x20(%esi)
  810e23:	e9 0d 07 00 00       	jmp    811535 <tcp_input+0xdc0>
  810e28:	a1 cc e5 b3 00       	mov    0xb3e5cc,%eax
  810e2d:	89 46 2c             	mov    %eax,0x2c(%esi)
  810e30:	c6 86 a5 00 00 00 00 	movb   $0x0,0xa5(%esi)
  810e37:	83 7e 10 09          	cmpl   $0x9,0x10(%esi)
  810e3b:	0f 87 f9 04 00 00    	ja     81133a <tcp_input+0xbc5>
  810e41:	8b 46 10             	mov    0x10(%esi),%eax
  810e44:	ff 24 85 28 4b 81 00 	jmp    *0x814b28(,%eax,4)
  810e4b:	89 d0                	mov    %edx,%eax
  810e4d:	83 e0 12             	and    $0x12,%eax
  810e50:	83 f8 12             	cmp    $0x12,%eax
  810e53:	0f 85 10 01 00 00    	jne    810f69 <tcp_input+0x7f4>
  810e59:	8b 46 78             	mov    0x78(%esi),%eax
  810e5c:	8b 40 10             	mov    0x10(%eax),%eax
  810e5f:	8b 40 04             	mov    0x4(%eax),%eax
  810e62:	89 04 24             	mov    %eax,(%esp)
  810e65:	e8 30 9c ff ff       	call   80aa9a <ntohl>
  810e6a:	8d 48 01             	lea    0x1(%eax),%ecx
  810e6d:	3b 0d 3c e5 b3 00    	cmp    0xb3e53c,%ecx
  810e73:	0f 85 f0 00 00 00    	jne    810f69 <tcp_input+0x7f4>
  810e79:	66 83 46 6e 01       	addw   $0x1,0x6e(%esi)
  810e7e:	8b 15 38 e5 b3 00    	mov    0xb3e538,%edx
  810e84:	8d 42 01             	lea    0x1(%edx),%eax
  810e87:	89 46 24             	mov    %eax,0x24(%esi)
  810e8a:	89 4e 48             	mov    %ecx,0x48(%esi)
  810e8d:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  810e92:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
  810e96:	66 89 46 5c          	mov    %ax,0x5c(%esi)
  810e9a:	83 ea 01             	sub    $0x1,%edx
  810e9d:	89 56 60             	mov    %edx,0x60(%esi)
  810ea0:	c7 46 10 04 00 00 00 	movl   $0x4,0x10(%esi)
  810ea7:	89 f0                	mov    %esi,%eax
  810ea9:	e8 c2 eb ff ff       	call   80fa70 <tcp_parseopt>
  810eae:	8d 46 04             	lea    0x4(%esi),%eax
  810eb1:	89 44 24 04          	mov    %eax,0x4(%esp)
  810eb5:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  810eb9:	89 04 24             	mov    %eax,(%esp)
  810ebc:	e8 d3 75 ff ff       	call   808494 <tcp_eff_send_mss>
  810ec1:	66 89 46 34          	mov    %ax,0x34(%esi)
  810ec5:	0f b7 c0             	movzwl %ax,%eax
  810ec8:	8d 04 80             	lea    (%eax,%eax,4),%eax
  810ecb:	01 c0                	add    %eax,%eax
  810ecd:	66 89 46 50          	mov    %ax,0x50(%esi)
  810ed1:	66 83 7e 4e 01       	cmpw   $0x1,0x4e(%esi)
  810ed6:	75 08                	jne    810ee0 <tcp_input+0x76b>
  810ed8:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  810edc:	01 c0                	add    %eax,%eax
  810ede:	eb 04                	jmp    810ee4 <tcp_input+0x76f>
  810ee0:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  810ee4:	66 89 46 4e          	mov    %ax,0x4e(%esi)
  810ee8:	0f b7 46 70          	movzwl 0x70(%esi),%eax
  810eec:	66 85 c0             	test   %ax,%ax
  810eef:	75 1c                	jne    810f0d <tcp_input+0x798>
  810ef1:	c7 44 24 08 fd 4a 81 	movl   $0x814afd,0x8(%esp)
  810ef8:	00 
  810ef9:	c7 44 24 04 35 02 00 	movl   $0x235,0x4(%esp)
  810f00:	00 
  810f01:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  810f08:	e8 7f f9 fe ff       	call   80088c <_panic>
  810f0d:	83 e8 01             	sub    $0x1,%eax
  810f10:	66 89 46 70          	mov    %ax,0x70(%esi)
  810f14:	8b 56 78             	mov    0x78(%esi),%edx
  810f17:	8b 02                	mov    (%edx),%eax
  810f19:	89 46 78             	mov    %eax,0x78(%esi)
  810f1c:	85 c0                	test   %eax,%eax
  810f1e:	75 08                	jne    810f28 <tcp_input+0x7b3>
  810f20:	66 c7 46 32 ff ff    	movw   $0xffff,0x32(%esi)
  810f26:	eb 0a                	jmp    810f32 <tcp_input+0x7bd>
  810f28:	66 c7 46 32 00 00    	movw   $0x0,0x32(%esi)
  810f2e:	c6 46 46 00          	movb   $0x0,0x46(%esi)
  810f32:	89 14 24             	mov    %edx,(%esp)
  810f35:	e8 e4 76 ff ff       	call   80861e <tcp_seg_free>
  810f3a:	8b 96 8c 00 00 00    	mov    0x8c(%esi),%edx
  810f40:	85 d2                	test   %edx,%edx
  810f42:	74 14                	je     810f58 <tcp_input+0x7e3>
  810f44:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  810f4b:	00 
  810f4c:	89 74 24 04          	mov    %esi,0x4(%esp)
  810f50:	8b 46 18             	mov    0x18(%esi),%eax
  810f53:	89 04 24             	mov    %eax,(%esp)
  810f56:	ff d2                	call   *%edx
  810f58:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  810f5c:	89 34 24             	mov    %esi,(%esp)
  810f5f:	e8 81 9f ff ff       	call   80aee5 <tcp_output>
  810f64:	e9 cc 05 00 00       	jmp    811535 <tcp_input+0xdc0>
  810f69:	f6 05 40 e5 b3 00 10 	testb  $0x10,0xb3e540
  810f70:	0f 84 bf 05 00 00    	je     811535 <tcp_input+0xdc0>
  810f76:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  810f7c:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  810f82:	0f b7 01             	movzwl (%ecx),%eax
  810f85:	89 44 24 14          	mov    %eax,0x14(%esp)
  810f89:	0f b7 41 02          	movzwl 0x2(%ecx),%eax
  810f8d:	89 44 24 10          	mov    %eax,0x10(%esp)
  810f91:	8d 42 0c             	lea    0xc(%edx),%eax
  810f94:	89 44 24 0c          	mov    %eax,0xc(%esp)
  810f98:	83 c2 10             	add    $0x10,%edx
  810f9b:	89 54 24 08          	mov    %edx,0x8(%esp)
  810f9f:	0f b7 05 42 e5 b3 00 	movzwl 0xb3e542,%eax
  810fa6:	03 05 38 e5 b3 00    	add    0xb3e538,%eax
  810fac:	89 44 24 04          	mov    %eax,0x4(%esp)
  810fb0:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  810fb5:	89 04 24             	mov    %eax,(%esp)
  810fb8:	e8 cb 9d ff ff       	call   80ad88 <tcp_rst>
  810fbd:	e9 73 05 00 00       	jmp    811535 <tcp_input+0xdc0>
  810fc2:	89 d0                	mov    %edx,%eax
  810fc4:	83 e0 14             	and    $0x14,%eax
  810fc7:	83 f8 10             	cmp    $0x10,%eax
  810fca:	0f 85 65 05 00 00    	jne    811535 <tcp_input+0xdc0>
  810fd0:	8b 1d 3c e5 b3 00    	mov    0xb3e53c,%ebx
  810fd6:	89 d8                	mov    %ebx,%eax
  810fd8:	2b 46 48             	sub    0x48(%esi),%eax
  810fdb:	83 e8 01             	sub    $0x1,%eax
  810fde:	0f 88 b9 00 00 00    	js     81109d <tcp_input+0x928>
  810fe4:	89 d8                	mov    %ebx,%eax
  810fe6:	2b 46 54             	sub    0x54(%esi),%eax
  810fe9:	85 c0                	test   %eax,%eax
  810feb:	0f 8f ac 00 00 00    	jg     81109d <tcp_input+0x928>
  810ff1:	c7 46 10 04 00 00 00 	movl   $0x4,0x10(%esi)
  810ff8:	8b 96 90 00 00 00    	mov    0x90(%esi),%edx
  810ffe:	85 d2                	test   %edx,%edx
  811000:	75 1c                	jne    81101e <tcp_input+0x8a9>
  811002:	c7 44 24 08 13 4b 81 	movl   $0x814b13,0x8(%esp)
  811009:	00 
  81100a:	c7 44 24 04 5b 02 00 	movl   $0x25b,0x4(%esp)
  811011:	00 
  811012:	c7 04 24 a4 4a 81 00 	movl   $0x814aa4,(%esp)
  811019:	e8 6e f8 fe ff       	call   80088c <_panic>
  81101e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  811025:	00 
  811026:	89 74 24 04          	mov    %esi,0x4(%esp)
  81102a:	8b 46 18             	mov    0x18(%esi),%eax
  81102d:	89 04 24             	mov    %eax,(%esp)
  811030:	ff d2                	call   *%edx
  811032:	84 c0                	test   %al,%al
  811034:	74 17                	je     81104d <tcp_input+0x8d8>
  811036:	89 34 24             	mov    %esi,(%esp)
  811039:	e8 9b 7b ff ff       	call   808bd9 <tcp_abort>
  81103e:	c7 05 e4 e5 b3 00 00 	movl   $0x0,0xb3e5e4
  811045:	00 00 00 
  811048:	e9 30 04 00 00       	jmp    81147d <tcp_input+0xd08>
  81104d:	0f b7 5e 4e          	movzwl 0x4e(%esi),%ebx
  811051:	89 f0                	mov    %esi,%eax
  811053:	e8 c7 ea ff ff       	call   80fb1f <tcp_receive>
  811058:	89 c2                	mov    %eax,%edx
  81105a:	66 83 fb 01          	cmp    $0x1,%bx
  81105e:	75 08                	jne    811068 <tcp_input+0x8f3>
  811060:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  811064:	01 c0                	add    %eax,%eax
  811066:	eb 04                	jmp    81106c <tcp_input+0x8f7>
  811068:	0f b7 46 34          	movzwl 0x34(%esi),%eax
  81106c:	66 89 46 4e          	mov    %ax,0x4e(%esi)
  811070:	f6 05 40 e5 b3 00 01 	testb  $0x1,0xb3e540
  811077:	0f 84 b8 04 00 00    	je     811535 <tcp_input+0xdc0>
  81107d:	84 d2                	test   %dl,%dl
  81107f:	0f 84 b0 04 00 00    	je     811535 <tcp_input+0xdc0>
  811085:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  811089:	89 34 24             	mov    %esi,(%esp)
  81108c:	e8 54 9e ff ff       	call   80aee5 <tcp_output>
  811091:	c7 46 10 07 00 00 00 	movl   $0x7,0x10(%esi)
  811098:	e9 98 04 00 00       	jmp    811535 <tcp_input+0xdc0>
  81109d:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  8110a3:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  8110a9:	0f b7 01             	movzwl (%ecx),%eax
  8110ac:	89 44 24 14          	mov    %eax,0x14(%esp)
  8110b0:	0f b7 41 02          	movzwl 0x2(%ecx),%eax
  8110b4:	89 44 24 10          	mov    %eax,0x10(%esp)
  8110b8:	8d 42 0c             	lea    0xc(%edx),%eax
  8110bb:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8110bf:	83 c2 10             	add    $0x10,%edx
  8110c2:	89 54 24 08          	mov    %edx,0x8(%esp)
  8110c6:	0f b7 05 42 e5 b3 00 	movzwl 0xb3e542,%eax
  8110cd:	03 05 38 e5 b3 00    	add    0xb3e538,%eax
  8110d3:	89 44 24 04          	mov    %eax,0x4(%esp)
  8110d7:	89 1c 24             	mov    %ebx,(%esp)
  8110da:	e8 a9 9c ff ff       	call   80ad88 <tcp_rst>
  8110df:	e9 51 04 00 00       	jmp    811535 <tcp_input+0xdc0>
  8110e4:	89 f0                	mov    %esi,%eax
  8110e6:	e8 34 ea ff ff       	call   80fb1f <tcp_receive>
  8110eb:	f6 05 40 e5 b3 00 01 	testb  $0x1,0xb3e540
  8110f2:	0f 84 3d 04 00 00    	je     811535 <tcp_input+0xdc0>
  8110f8:	84 c0                	test   %al,%al
  8110fa:	0f 84 35 04 00 00    	je     811535 <tcp_input+0xdc0>
  811100:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  811104:	89 34 24             	mov    %esi,(%esp)
  811107:	e8 d9 9d ff ff       	call   80aee5 <tcp_output>
  81110c:	c7 46 10 07 00 00 00 	movl   $0x7,0x10(%esi)
  811113:	e9 1d 04 00 00       	jmp    811535 <tcp_input+0xdc0>
  811118:	89 f0                	mov    %esi,%eax
  81111a:	e8 00 ea ff ff       	call   80fb1f <tcp_receive>
  81111f:	0f b6 05 40 e5 b3 00 	movzbl 0xb3e540,%eax
  811126:	a8 01                	test   $0x1,%al
  811128:	0f 84 9b 00 00 00    	je     8111c9 <tcp_input+0xa54>
  81112e:	a8 10                	test   $0x10,%al
  811130:	74 7f                	je     8111b1 <tcp_input+0xa3c>
  811132:	8b 46 54             	mov    0x54(%esi),%eax
  811135:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  81113b:	75 74                	jne    8111b1 <tcp_input+0xa3c>
  81113d:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  811141:	89 34 24             	mov    %esi,(%esp)
  811144:	e8 9c 9d ff ff       	call   80aee5 <tcp_output>
  811149:	89 34 24             	mov    %esi,(%esp)
  81114c:	e8 51 75 ff ff       	call   8086a2 <tcp_pcb_purge>
  811151:	8b 15 c8 e5 b3 00    	mov    0xb3e5c8,%edx
  811157:	39 d6                	cmp    %edx,%esi
  811159:	75 0a                	jne    811165 <tcp_input+0x9f0>
  81115b:	8b 42 0c             	mov    0xc(%edx),%eax
  81115e:	a3 c8 e5 b3 00       	mov    %eax,0xb3e5c8
  811163:	eb 26                	jmp    81118b <tcp_input+0xa16>
  811165:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  81116b:	85 d2                	test   %edx,%edx
  81116d:	74 1c                	je     81118b <tcp_input+0xa16>
  81116f:	8b 42 0c             	mov    0xc(%edx),%eax
  811172:	85 c0                	test   %eax,%eax
  811174:	74 10                	je     811186 <tcp_input+0xa11>
  811176:	39 c6                	cmp    %eax,%esi
  811178:	0f 85 c7 03 00 00    	jne    811545 <tcp_input+0xdd0>
  81117e:	8b 40 0c             	mov    0xc(%eax),%eax
  811181:	89 42 0c             	mov    %eax,0xc(%edx)
  811184:	eb 05                	jmp    81118b <tcp_input+0xa16>
  811186:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  81118b:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
  811192:	c7 46 10 0a 00 00 00 	movl   $0xa,0x10(%esi)
  811199:	a1 dc e5 b3 00       	mov    0xb3e5dc,%eax
  81119e:	89 46 0c             	mov    %eax,0xc(%esi)
  8111a1:	89 35 dc e5 b3 00    	mov    %esi,0xb3e5dc
  8111a7:	e8 81 39 ff ff       	call   804b2d <tcp_timer_needed>
  8111ac:	e9 84 03 00 00       	jmp    811535 <tcp_input+0xdc0>
  8111b1:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  8111b5:	89 34 24             	mov    %esi,(%esp)
  8111b8:	e8 28 9d ff ff       	call   80aee5 <tcp_output>
  8111bd:	c7 46 10 08 00 00 00 	movl   $0x8,0x10(%esi)
  8111c4:	e9 6c 03 00 00       	jmp    811535 <tcp_input+0xdc0>
  8111c9:	a8 10                	test   $0x10,%al
  8111cb:	0f 84 64 03 00 00    	je     811535 <tcp_input+0xdc0>
  8111d1:	8b 46 54             	mov    0x54(%esi),%eax
  8111d4:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  8111da:	0f 85 55 03 00 00    	jne    811535 <tcp_input+0xdc0>
  8111e0:	c7 46 10 06 00 00 00 	movl   $0x6,0x10(%esi)
  8111e7:	e9 49 03 00 00       	jmp    811535 <tcp_input+0xdc0>
  8111ec:	89 f0                	mov    %esi,%eax
  8111ee:	e8 2c e9 ff ff       	call   80fb1f <tcp_receive>
  8111f3:	f6 05 40 e5 b3 00 01 	testb  $0x1,0xb3e540
  8111fa:	0f 84 35 03 00 00    	je     811535 <tcp_input+0xdc0>
  811200:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  811204:	89 34 24             	mov    %esi,(%esp)
  811207:	e8 d9 9c ff ff       	call   80aee5 <tcp_output>
  81120c:	89 34 24             	mov    %esi,(%esp)
  81120f:	e8 8e 74 ff ff       	call   8086a2 <tcp_pcb_purge>
  811214:	8b 15 c8 e5 b3 00    	mov    0xb3e5c8,%edx
  81121a:	39 d6                	cmp    %edx,%esi
  81121c:	75 0a                	jne    811228 <tcp_input+0xab3>
  81121e:	8b 42 0c             	mov    0xc(%edx),%eax
  811221:	a3 c8 e5 b3 00       	mov    %eax,0xb3e5c8
  811226:	eb 26                	jmp    81124e <tcp_input+0xad9>
  811228:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  81122e:	85 d2                	test   %edx,%edx
  811230:	74 1c                	je     81124e <tcp_input+0xad9>
  811232:	8b 42 0c             	mov    0xc(%edx),%eax
  811235:	85 c0                	test   %eax,%eax
  811237:	74 10                	je     811249 <tcp_input+0xad4>
  811239:	39 c6                	cmp    %eax,%esi
  81123b:	0f 85 10 03 00 00    	jne    811551 <tcp_input+0xddc>
  811241:	8b 40 0c             	mov    0xc(%eax),%eax
  811244:	89 42 0c             	mov    %eax,0xc(%edx)
  811247:	eb 05                	jmp    81124e <tcp_input+0xad9>
  811249:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  81124e:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
  811255:	c7 46 10 0a 00 00 00 	movl   $0xa,0x10(%esi)
  81125c:	a1 dc e5 b3 00       	mov    0xb3e5dc,%eax
  811261:	89 46 0c             	mov    %eax,0xc(%esi)
  811264:	89 35 dc e5 b3 00    	mov    %esi,0xb3e5dc
  81126a:	e8 be 38 ff ff       	call   804b2d <tcp_timer_needed>
  81126f:	e9 c1 02 00 00       	jmp    811535 <tcp_input+0xdc0>
  811274:	89 f0                	mov    %esi,%eax
  811276:	e8 a4 e8 ff ff       	call   80fb1f <tcp_receive>
  81127b:	f6 05 40 e5 b3 00 10 	testb  $0x10,0xb3e540
  811282:	0f 84 ad 02 00 00    	je     811535 <tcp_input+0xdc0>
  811288:	8b 46 54             	mov    0x54(%esi),%eax
  81128b:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  811291:	0f 85 9e 02 00 00    	jne    811535 <tcp_input+0xdc0>
  811297:	80 4e 20 02          	orb    $0x2,0x20(%esi)
  81129b:	89 34 24             	mov    %esi,(%esp)
  81129e:	e8 42 9c ff ff       	call   80aee5 <tcp_output>
  8112a3:	89 34 24             	mov    %esi,(%esp)
  8112a6:	e8 f7 73 ff ff       	call   8086a2 <tcp_pcb_purge>
  8112ab:	8b 15 c8 e5 b3 00    	mov    0xb3e5c8,%edx
  8112b1:	39 d6                	cmp    %edx,%esi
  8112b3:	75 0a                	jne    8112bf <tcp_input+0xb4a>
  8112b5:	8b 42 0c             	mov    0xc(%edx),%eax
  8112b8:	a3 c8 e5 b3 00       	mov    %eax,0xb3e5c8
  8112bd:	eb 26                	jmp    8112e5 <tcp_input+0xb70>
  8112bf:	89 15 d4 e5 b3 00    	mov    %edx,0xb3e5d4
  8112c5:	85 d2                	test   %edx,%edx
  8112c7:	74 1c                	je     8112e5 <tcp_input+0xb70>
  8112c9:	8b 42 0c             	mov    0xc(%edx),%eax
  8112cc:	85 c0                	test   %eax,%eax
  8112ce:	74 10                	je     8112e0 <tcp_input+0xb6b>
  8112d0:	39 c6                	cmp    %eax,%esi
  8112d2:	0f 85 85 02 00 00    	jne    81155d <tcp_input+0xde8>
  8112d8:	8b 40 0c             	mov    0xc(%eax),%eax
  8112db:	89 42 0c             	mov    %eax,0xc(%edx)
  8112de:	eb 05                	jmp    8112e5 <tcp_input+0xb70>
  8112e0:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  8112e5:	c7 46 0c 00 00 00 00 	movl   $0x0,0xc(%esi)
  8112ec:	c7 46 10 0a 00 00 00 	movl   $0xa,0x10(%esi)
  8112f3:	a1 dc e5 b3 00       	mov    0xb3e5dc,%eax
  8112f8:	89 46 0c             	mov    %eax,0xc(%esi)
  8112fb:	89 35 dc e5 b3 00    	mov    %esi,0xb3e5dc
  811301:	e8 27 38 ff ff       	call   804b2d <tcp_timer_needed>
  811306:	e9 2a 02 00 00       	jmp    811535 <tcp_input+0xdc0>
  81130b:	89 f0                	mov    %esi,%eax
  81130d:	e8 0d e8 ff ff       	call   80fb1f <tcp_receive>
  811312:	f6 05 40 e5 b3 00 10 	testb  $0x10,0xb3e540
  811319:	0f 84 16 02 00 00    	je     811535 <tcp_input+0xdc0>
  81131f:	8b 46 54             	mov    0x54(%esi),%eax
  811322:	3b 05 3c e5 b3 00    	cmp    0xb3e53c,%eax
  811328:	0f 85 07 02 00 00    	jne    811535 <tcp_input+0xdc0>
  81132e:	c6 05 44 e5 b3 00 10 	movb   $0x10,0xb3e544
  811335:	e9 fb 01 00 00       	jmp    811535 <tcp_input+0xdc0>
  81133a:	c7 05 e4 e5 b3 00 00 	movl   $0x0,0xb3e5e4
  811341:	00 00 00 
  811344:	0f b6 05 44 e5 b3 00 	movzbl 0xb3e544,%eax
  81134b:	a8 08                	test   $0x8,%al
  81134d:	74 3f                	je     81138e <tcp_input+0xc19>
  81134f:	8b 96 98 00 00 00    	mov    0x98(%esi),%edx
  811355:	85 d2                	test   %edx,%edx
  811357:	74 10                	je     811369 <tcp_input+0xbf4>
  811359:	c7 44 24 04 fa ff ff 	movl   $0xfffffffa,0x4(%esp)
  811360:	ff 
  811361:	8b 46 18             	mov    0x18(%esi),%eax
  811364:	89 04 24             	mov    %eax,(%esp)
  811367:	ff d2                	call   *%edx
  811369:	89 74 24 04          	mov    %esi,0x4(%esp)
  81136d:	c7 04 24 c8 e5 b3 00 	movl   $0xb3e5c8,(%esp)
  811374:	e8 a2 73 ff ff       	call   80871b <tcp_pcb_remove>
  811379:	89 74 24 04          	mov    %esi,0x4(%esp)
  81137d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  811384:	e8 93 5f ff ff       	call   80731c <memp_free>
  811389:	e9 ef 00 00 00       	jmp    81147d <tcp_input+0xd08>
  81138e:	a8 10                	test   $0x10,%al
  811390:	74 25                	je     8113b7 <tcp_input+0xc42>
  811392:	89 74 24 04          	mov    %esi,0x4(%esp)
  811396:	c7 04 24 c8 e5 b3 00 	movl   $0xb3e5c8,(%esp)
  81139d:	e8 79 73 ff ff       	call   80871b <tcp_pcb_remove>
  8113a2:	89 74 24 04          	mov    %esi,0x4(%esp)
  8113a6:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  8113ad:	e8 6a 5f ff ff       	call   80731c <memp_free>
  8113b2:	e9 c6 00 00 00       	jmp    81147d <tcp_input+0xd08>
  8113b7:	0f b7 46 6c          	movzwl 0x6c(%esi),%eax
  8113bb:	66 85 c0             	test   %ax,%ax
  8113be:	74 21                	je     8113e1 <tcp_input+0xc6c>
  8113c0:	8b 96 84 00 00 00    	mov    0x84(%esi),%edx
  8113c6:	85 d2                	test   %edx,%edx
  8113c8:	74 17                	je     8113e1 <tcp_input+0xc6c>
  8113ca:	0f b7 c0             	movzwl %ax,%eax
  8113cd:	89 44 24 08          	mov    %eax,0x8(%esp)
  8113d1:	89 74 24 04          	mov    %esi,0x4(%esp)
  8113d5:	8b 46 18             	mov    0x18(%esi),%eax
  8113d8:	89 04 24             	mov    %eax,(%esp)
  8113db:	ff d2                	call   *%edx
  8113dd:	89 c2                	mov    %eax,%edx
  8113df:	eb 05                	jmp    8113e6 <tcp_input+0xc71>
  8113e1:	ba 00 00 00 00       	mov    $0x0,%edx
  8113e6:	a1 48 e5 b3 00       	mov    0xb3e548,%eax
  8113eb:	85 c0                	test   %eax,%eax
  8113ed:	74 51                	je     811440 <tcp_input+0xccb>
  8113ef:	f6 05 40 e5 b3 00 08 	testb  $0x8,0xb3e540
  8113f6:	74 04                	je     8113fc <tcp_input+0xc87>
  8113f8:	80 48 0d 01          	orb    $0x1,0xd(%eax)
  8113fc:	8b 96 88 00 00 00    	mov    0x88(%esi),%edx
  811402:	85 d2                	test   %edx,%edx
  811404:	74 20                	je     811426 <tcp_input+0xcb1>
  811406:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  81140d:	00 
  81140e:	89 44 24 08          	mov    %eax,0x8(%esp)
  811412:	89 74 24 04          	mov    %esi,0x4(%esp)
  811416:	8b 46 18             	mov    0x18(%esi),%eax
  811419:	89 04 24             	mov    %eax,(%esp)
  81141c:	ff d2                	call   *%edx
  81141e:	89 c2                	mov    %eax,%edx
  811420:	84 c0                	test   %al,%al
  811422:	75 11                	jne    811435 <tcp_input+0xcc0>
  811424:	eb 1a                	jmp    811440 <tcp_input+0xccb>
  811426:	89 04 24             	mov    %eax,(%esp)
  811429:	e8 66 66 ff ff       	call   807a94 <pbuf_free>
  81142e:	ba 00 00 00 00       	mov    $0x0,%edx
  811433:	eb 0b                	jmp    811440 <tcp_input+0xccb>
  811435:	a1 48 e5 b3 00       	mov    0xb3e548,%eax
  81143a:	89 86 80 00 00 00    	mov    %eax,0x80(%esi)
  811440:	f6 05 44 e5 b3 00 20 	testb  $0x20,0xb3e544
  811447:	74 28                	je     811471 <tcp_input+0xcfc>
  811449:	8b 96 88 00 00 00    	mov    0x88(%esi),%edx
  81144f:	85 d2                	test   %edx,%edx
  811451:	74 22                	je     811475 <tcp_input+0xd00>
  811453:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  81145a:	00 
  81145b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  811462:	00 
  811463:	89 74 24 04          	mov    %esi,0x4(%esp)
  811467:	8b 46 18             	mov    0x18(%esi),%eax
  81146a:	89 04 24             	mov    %eax,(%esp)
  81146d:	ff d2                	call   *%edx
  81146f:	89 c2                	mov    %eax,%edx
  811471:	84 d2                	test   %dl,%dl
  811473:	75 08                	jne    81147d <tcp_input+0xd08>
  811475:	89 34 24             	mov    %esi,(%esp)
  811478:	e8 68 9a ff ff       	call   80aee5 <tcp_output>
  81147d:	a1 20 e5 b3 00       	mov    0xb3e520,%eax
  811482:	85 c0                	test   %eax,%eax
  811484:	0f 84 df 00 00 00    	je     811569 <tcp_input+0xdf4>
  81148a:	89 04 24             	mov    %eax,(%esp)
  81148d:	e8 02 66 ff ff       	call   807a94 <pbuf_free>
  811492:	c7 05 20 e5 b3 00 00 	movl   $0x0,0xb3e520
  811499:	00 00 00 
  81149c:	e9 c8 00 00 00       	jmp    811569 <tcp_input+0xdf4>
  8114a1:	a1 30 e5 b3 00       	mov    0xb3e530,%eax
  8114a6:	0f b7 40 0c          	movzwl 0xc(%eax),%eax
  8114aa:	89 04 24             	mov    %eax,(%esp)
  8114ad:	e8 c3 93 ff ff       	call   80a875 <ntohs>
  8114b2:	a8 04                	test   $0x4,%al
  8114b4:	75 47                	jne    8114fd <tcp_input+0xd88>
  8114b6:	8b 0d 30 e5 b3 00    	mov    0xb3e530,%ecx
  8114bc:	8b 15 34 e5 b3 00    	mov    0xb3e534,%edx
  8114c2:	0f b7 01             	movzwl (%ecx),%eax
  8114c5:	89 44 24 14          	mov    %eax,0x14(%esp)
  8114c9:	0f b7 41 02          	movzwl 0x2(%ecx),%eax
  8114cd:	89 44 24 10          	mov    %eax,0x10(%esp)
  8114d1:	8d 42 0c             	lea    0xc(%edx),%eax
  8114d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8114d8:	83 c2 10             	add    $0x10,%edx
  8114db:	89 54 24 08          	mov    %edx,0x8(%esp)
  8114df:	0f b7 05 42 e5 b3 00 	movzwl 0xb3e542,%eax
  8114e6:	03 05 38 e5 b3 00    	add    0xb3e538,%eax
  8114ec:	89 44 24 04          	mov    %eax,0x4(%esp)
  8114f0:	a1 3c e5 b3 00       	mov    0xb3e53c,%eax
  8114f5:	89 04 24             	mov    %eax,(%esp)
  8114f8:	e8 8b 98 ff ff       	call   80ad88 <tcp_rst>
  8114fd:	89 3c 24             	mov    %edi,(%esp)
  811500:	e8 8f 65 ff ff       	call   807a94 <pbuf_free>
  811505:	eb 62                	jmp    811569 <tcp_input+0xdf4>
  811507:	85 f6                	test   %esi,%esi
  811509:	0f 85 0a f8 ff ff    	jne    810d19 <tcp_input+0x5a4>
  81150f:	90                   	nop    
  811510:	e9 78 f5 ff ff       	jmp    810a8d <tcp_input+0x318>
  811515:	85 f6                	test   %esi,%esi
  811517:	0f 85 fc f7 ff ff    	jne    810d19 <tcp_input+0x5a4>
  81151d:	8d 76 00             	lea    0x0(%esi),%esi
  811520:	e9 7c ff ff ff       	jmp    8114a1 <tcp_input+0xd2c>
  811525:	85 c9                	test   %ecx,%ecx
  811527:	0f 85 eb f8 ff ff    	jne    810e18 <tcp_input+0x6a3>
  81152d:	8d 76 00             	lea    0x0(%esi),%esi
  811530:	e9 c7 f8 ff ff       	jmp    810dfc <tcp_input+0x687>
  811535:	c7 05 e4 e5 b3 00 00 	movl   $0x0,0xb3e5e4
  81153c:	00 00 00 
  81153f:	90                   	nop    
  811540:	e9 ff fd ff ff       	jmp    811344 <tcp_input+0xbcf>
  811545:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  81154a:	89 c2                	mov    %eax,%edx
  81154c:	e9 1e fc ff ff       	jmp    81116f <tcp_input+0x9fa>
  811551:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  811556:	89 c2                	mov    %eax,%edx
  811558:	e9 d5 fc ff ff       	jmp    811232 <tcp_input+0xabd>
  81155d:	a3 d4 e5 b3 00       	mov    %eax,0xb3e5d4
  811562:	89 c2                	mov    %eax,%edx
  811564:	e9 60 fd ff ff       	jmp    8112c9 <tcp_input+0xb54>
  811569:	83 c4 3c             	add    $0x3c,%esp
  81156c:	5b                   	pop    %ebx
  81156d:	5e                   	pop    %esi
  81156e:	5f                   	pop    %edi
  81156f:	5d                   	pop    %ebp
  811570:	c3                   	ret    
	...

00811580 <raw_bind>:
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, struct ip_addr *ipaddr)
{
  811580:	55                   	push   %ebp
  811581:	89 e5                	mov    %esp,%ebp
  811583:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&pcb->local_ip, ipaddr);
  811586:	ba 00 00 00 00       	mov    $0x0,%edx
  81158b:	85 c0                	test   %eax,%eax
  81158d:	74 02                	je     811591 <raw_bind+0x11>
  81158f:	8b 10                	mov    (%eax),%edx
  811591:	8b 45 08             	mov    0x8(%ebp),%eax
  811594:	89 10                	mov    %edx,(%eax)
  return ERR_OK;
}
  811596:	b8 00 00 00 00       	mov    $0x0,%eax
  81159b:	5d                   	pop    %ebp
  81159c:	c3                   	ret    

0081159d <raw_connect>:

/**
 * Connect an RAW PCB. This function is required by upper layers
 * of lwip. Using the raw api you could use raw_sendto() instead
 *
 * This will associate the RAW PCB with the remote address.
 *
 * @param pcb RAW PCB to be connected with remote address ipaddr and port.
 * @param ipaddr remote IP address to connect with.
 *
 * @return lwIP error code
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, struct ip_addr *ipaddr)
{
  81159d:	55                   	push   %ebp
  81159e:	89 e5                	mov    %esp,%ebp
  8115a0:	8b 45 0c             	mov    0xc(%ebp),%eax
  ip_addr_set(&pcb->remote_ip, ipaddr);
  8115a3:	ba 00 00 00 00       	mov    $0x0,%edx
  8115a8:	85 c0                	test   %eax,%eax
  8115aa:	74 02                	je     8115ae <raw_connect+0x11>
  8115ac:	8b 10                	mov    (%eax),%edx
  8115ae:	8b 45 08             	mov    0x8(%ebp),%eax
  8115b1:	89 50 04             	mov    %edx,0x4(%eax)
  return ERR_OK;
}
  8115b4:	b8 00 00 00 00       	mov    $0x0,%eax
  8115b9:	5d                   	pop    %ebp
  8115ba:	c3                   	ret    

008115bb <raw_recv>:


/**
 * Set the callback function for received packets that match the
 * raw PCB's protocol and binding. 
 * 
 * The callback function MUST either
 * - eat the packet by calling pbuf_free() and returning non-zero. The
 *   packet will not be passed to other raw PCBs or other protocol layers.
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 * 
 * @return non-zero if the packet was free()d, zero if the packet remains
 * available for others.
 */
void
raw_recv(struct raw_pcb *pcb,
         u8_t (* recv)(void *arg, struct raw_pcb *upcb, struct pbuf *p,
                      struct ip_addr *addr),
         void *recv_arg)
{
  8115bb:	55                   	push   %ebp
  8115bc:	89 e5                	mov    %esp,%ebp
  8115be:	8b 45 08             	mov    0x8(%ebp),%eax
  /* remember recv() callback and user data */
  pcb->recv = recv;
  8115c1:	8b 55 0c             	mov    0xc(%ebp),%edx
  8115c4:	89 50 14             	mov    %edx,0x14(%eax)
  pcb->recv_arg = recv_arg;
  8115c7:	8b 55 10             	mov    0x10(%ebp),%edx
  8115ca:	89 50 18             	mov    %edx,0x18(%eax)
}
  8115cd:	5d                   	pop    %ebp
  8115ce:	c3                   	ret    

008115cf <raw_new>:

/**
 * Send the raw IP packet to the given address. Note that actually you cannot
 * modify the IP headers (this is inconsistent with the receive callback where
 * you actually get the IP headers), you can only specify the IP payload here.
 * It requires some more changes in lwIP. (there will be a raw_send() function
 * then.)
 *
 * @param pcb the raw pcb which to send
 * @param p the IP payload to send
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, struct ip_addr *ipaddr)
{
  err_t err;
  struct netif *netif;
  struct ip_addr *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  
  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 3, ("raw_sendto\n"));
  
  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, IP_HLEN)) {
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 2, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
    }
    /* chain header q in front of given pbuf p */
    pbuf_chain(q, p);
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  }  else {
    /* first pbuf q equals given pbuf */
    q = p;
    if(pbuf_header(q, -IP_HLEN)) {
      LWIP_ASSERT("Can't restore header we just removed!", 0);
      return ERR_MEM;
    }
  }
  
  if ((netif = ip_route(ipaddr)) == NULL) {
    LWIP_DEBUGF(RAW_DEBUG | 1, ("raw_sendto: No route to 0x%"X32_F"\n", ipaddr->addr));
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
      pbuf_free(q);
    }
    return ERR_RTE;
  }

  if (ip_addr_isany(&pcb->local_ip)) {
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
  }

#if LWIP_NETIF_HWADDRHINT
  netif->addr_hint = &(pcb->addr_hint);
#endif /* LWIP_NETIF_HWADDRHINT*/
  err = ip_output_if (q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
#if LWIP_NETIF_HWADDRHINT
  netif->addr_hint = NULL;
#endif /* LWIP_NETIF_HWADDRHINT*/

  /* did we chain a header earlier? */
  if (q != p) {
    /* free the header */
    pbuf_free(q);
  }
  return err;
}

/**
 * Send the raw IP packet to the address given by raw_connect()
 *
 * @param pcb the raw pcb which to send
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  return raw_sendto(pcb, p, &pcb->remote_ip);
}

/**
 * Remove an RAW PCB.
 *
 * @param pcb RAW PCB to be removed. The PCB is removed from the list of
 * RAW PCB's and the data structure is freed from memory.
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for(pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
}

/**
 * Create a RAW PCB.
 *
 * @return The RAW PCB which was created. NULL if the PCB data structure
 * could not be allocated.
 *
 * @param proto the protocol number of the IPs payload (e.g. IP_PROTO_ICMP)
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto) {
  8115cf:	55                   	push   %ebp
  8115d0:	89 e5                	mov    %esp,%ebp
  8115d2:	83 ec 18             	sub    $0x18,%esp
  8115d5:	89 5d f8             	mov    %ebx,0xfffffff8(%ebp)
  8115d8:	89 75 fc             	mov    %esi,0xfffffffc(%ebp)
  8115db:	8b 75 08             	mov    0x8(%ebp),%esi
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | 3, ("raw_new\n"));

  pcb = memp_malloc(MEMP_RAW_PCB);
  8115de:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  8115e5:	e8 75 5d ff ff       	call   80735f <memp_malloc>
  8115ea:	89 c3                	mov    %eax,%ebx
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  8115ec:	85 c0                	test   %eax,%eax
  8115ee:	74 2f                	je     81161f <raw_new+0x50>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  8115f0:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  8115f7:	00 
  8115f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8115ff:	00 
  811600:	89 04 24             	mov    %eax,(%esp)
  811603:	e8 89 fb fe ff       	call   801191 <memset>
    pcb->protocol = proto;
  811608:	89 f0                	mov    %esi,%eax
  81160a:	88 43 10             	mov    %al,0x10(%ebx)
    pcb->ttl = RAW_TTL;
  81160d:	c6 43 0b ff          	movb   $0xff,0xb(%ebx)
    pcb->next = raw_pcbs;
  811611:	a1 4c e5 b3 00       	mov    0xb3e54c,%eax
  811616:	89 43 0c             	mov    %eax,0xc(%ebx)
    raw_pcbs = pcb;
  811619:	89 1d 4c e5 b3 00    	mov    %ebx,0xb3e54c
  }
  return pcb;
}
  81161f:	89 d8                	mov    %ebx,%eax
  811621:	8b 5d f8             	mov    0xfffffff8(%ebp),%ebx
  811624:	8b 75 fc             	mov    0xfffffffc(%ebp),%esi
  811627:	89 ec                	mov    %ebp,%esp
  811629:	5d                   	pop    %ebp
  81162a:	c3                   	ret    

0081162b <raw_remove>:
  81162b:	55                   	push   %ebp
  81162c:	89 e5                	mov    %esp,%ebp
  81162e:	83 ec 08             	sub    $0x8,%esp
  811631:	8b 4d 08             	mov    0x8(%ebp),%ecx
  811634:	8b 15 4c e5 b3 00    	mov    0xb3e54c,%edx
  81163a:	39 ca                	cmp    %ecx,%edx
  81163c:	74 06                	je     811644 <raw_remove+0x19>
  81163e:	85 d2                	test   %edx,%edx
  811640:	75 0e                	jne    811650 <raw_remove+0x25>
  811642:	eb 21                	jmp    811665 <raw_remove+0x3a>
  811644:	8b 42 0c             	mov    0xc(%edx),%eax
  811647:	a3 4c e5 b3 00       	mov    %eax,0xb3e54c
  81164c:	eb 17                	jmp    811665 <raw_remove+0x3a>
  81164e:	89 c2                	mov    %eax,%edx
  811650:	8b 42 0c             	mov    0xc(%edx),%eax
  811653:	85 c0                	test   %eax,%eax
  811655:	74 0e                	je     811665 <raw_remove+0x3a>
  811657:	39 c1                	cmp    %eax,%ecx
  811659:	75 f3                	jne    81164e <raw_remove+0x23>
  81165b:	8b 41 0c             	mov    0xc(%ecx),%eax
  81165e:	89 42 0c             	mov    %eax,0xc(%edx)
  811661:	85 c0                	test   %eax,%eax
  811663:	75 e9                	jne    81164e <raw_remove+0x23>
  811665:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  811669:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  811670:	e8 a7 5c ff ff       	call   80731c <memp_free>
  811675:	c9                   	leave  
  811676:	c3                   	ret    

00811677 <raw_sendto>:
  811677:	55                   	push   %ebp
  811678:	89 e5                	mov    %esp,%ebp
  81167a:	57                   	push   %edi
  81167b:	56                   	push   %esi
  81167c:	53                   	push   %ebx
  81167d:	83 ec 1c             	sub    $0x1c,%esp
  811680:	8b 5d 08             	mov    0x8(%ebp),%ebx
  811683:	8b 7d 0c             	mov    0xc(%ebp),%edi
  811686:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  81168d:	00 
  81168e:	89 3c 24             	mov    %edi,(%esp)
  811691:	e8 92 60 ff ff       	call   807728 <pbuf_header>
  811696:	84 c0                	test   %al,%al
  811698:	74 39                	je     8116d3 <raw_sendto+0x5c>
  81169a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  8116a1:	00 
  8116a2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  8116a9:	00 
  8116aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  8116b1:	e8 a1 66 ff ff       	call   807d57 <pbuf_alloc>
  8116b6:	89 c6                	mov    %eax,%esi
  8116b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8116bd:	85 f6                	test   %esi,%esi
  8116bf:	0f 84 b5 00 00 00    	je     81177a <raw_sendto+0x103>
  8116c5:	89 7c 24 04          	mov    %edi,0x4(%esp)
  8116c9:	89 34 24             	mov    %esi,(%esp)
  8116cc:	e8 30 60 ff ff       	call   807701 <pbuf_chain>
  8116d1:	eb 32                	jmp    811705 <raw_sendto+0x8e>
  8116d3:	c7 44 24 04 ec ff ff 	movl   $0xffffffec,0x4(%esp)
  8116da:	ff 
  8116db:	89 3c 24             	mov    %edi,(%esp)
  8116de:	e8 45 60 ff ff       	call   807728 <pbuf_header>
  8116e3:	89 fe                	mov    %edi,%esi
  8116e5:	84 c0                	test   %al,%al
  8116e7:	74 1c                	je     811705 <raw_sendto+0x8e>
  8116e9:	c7 44 24 08 50 4b 81 	movl   $0x814b50,0x8(%esp)
  8116f0:	00 
  8116f1:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
  8116f8:	00 
  8116f9:	c7 04 24 76 4b 81 00 	movl   $0x814b76,(%esp)
  811700:	e8 87 f1 fe ff       	call   80088c <_panic>
  811705:	8b 45 10             	mov    0x10(%ebp),%eax
  811708:	89 04 24             	mov    %eax,(%esp)
  81170b:	e8 8d 7f ff ff       	call   80969d <ip_route>
  811710:	85 c0                	test   %eax,%eax
  811712:	75 18                	jne    81172c <raw_sendto+0xb5>
  811714:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  811719:	39 fe                	cmp    %edi,%esi
  81171b:	74 5d                	je     81177a <raw_sendto+0x103>
  81171d:	89 34 24             	mov    %esi,(%esp)
  811720:	e8 6f 63 ff ff       	call   807a94 <pbuf_free>
  811725:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  81172a:	eb 4e                	jmp    81177a <raw_sendto+0x103>
  81172c:	89 da                	mov    %ebx,%edx
  81172e:	85 db                	test   %ebx,%ebx
  811730:	74 05                	je     811737 <raw_sendto+0xc0>
  811732:	83 3b 00             	cmpl   $0x0,(%ebx)
  811735:	75 03                	jne    81173a <raw_sendto+0xc3>
  811737:	8d 50 04             	lea    0x4(%eax),%edx
  81173a:	89 44 24 18          	mov    %eax,0x18(%esp)
  81173e:	0f b6 43 10          	movzbl 0x10(%ebx),%eax
  811742:	89 44 24 14          	mov    %eax,0x14(%esp)
  811746:	0f b6 43 0a          	movzbl 0xa(%ebx),%eax
  81174a:	89 44 24 10          	mov    %eax,0x10(%esp)
  81174e:	0f b6 43 0b          	movzbl 0xb(%ebx),%eax
  811752:	89 44 24 0c          	mov    %eax,0xc(%esp)
  811756:	8b 45 10             	mov    0x10(%ebp),%eax
  811759:	89 44 24 08          	mov    %eax,0x8(%esp)
  81175d:	89 54 24 04          	mov    %edx,0x4(%esp)
  811761:	89 34 24             	mov    %esi,(%esp)
  811764:	e8 87 7d ff ff       	call   8094f0 <ip_output_if>
  811769:	89 c3                	mov    %eax,%ebx
  81176b:	39 fe                	cmp    %edi,%esi
  81176d:	74 08                	je     811777 <raw_sendto+0x100>
  81176f:	89 34 24             	mov    %esi,(%esp)
  811772:	e8 1d 63 ff ff       	call   807a94 <pbuf_free>
  811777:	0f be c3             	movsbl %bl,%eax
  81177a:	83 c4 1c             	add    $0x1c,%esp
  81177d:	5b                   	pop    %ebx
  81177e:	5e                   	pop    %esi
  81177f:	5f                   	pop    %edi
  811780:	5d                   	pop    %ebp
  811781:	c3                   	ret    

00811782 <raw_send>:
  811782:	55                   	push   %ebp
  811783:	89 e5                	mov    %esp,%ebp
  811785:	83 ec 18             	sub    $0x18,%esp
  811788:	8b 55 08             	mov    0x8(%ebp),%edx
  81178b:	8d 42 04             	lea    0x4(%edx),%eax
  81178e:	89 44 24 08          	mov    %eax,0x8(%esp)
  811792:	8b 45 0c             	mov    0xc(%ebp),%eax
  811795:	89 44 24 04          	mov    %eax,0x4(%esp)
  811799:	89 14 24             	mov    %edx,(%esp)
  81179c:	e8 d6 fe ff ff       	call   811677 <raw_sendto>
  8117a1:	0f be c0             	movsbl %al,%eax
  8117a4:	c9                   	leave  
  8117a5:	c3                   	ret    

008117a6 <raw_input>:
  8117a6:	55                   	push   %ebp
  8117a7:	89 e5                	mov    %esp,%ebp
  8117a9:	57                   	push   %edi
  8117aa:	56                   	push   %esi
  8117ab:	53                   	push   %ebx
  8117ac:	83 ec 1c             	sub    $0x1c,%esp
  8117af:	8b 45 08             	mov    0x8(%ebp),%eax
  8117b2:	8b 40 04             	mov    0x4(%eax),%eax
  8117b5:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  8117b8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
  8117bc:	89 04 24             	mov    %eax,(%esp)
  8117bf:	e8 b1 90 ff ff       	call   80a875 <ntohs>
  8117c4:	0f b6 f8             	movzbl %al,%edi
  8117c7:	8b 1d 4c e5 b3 00    	mov    0xb3e54c,%ebx
  8117cd:	85 db                	test   %ebx,%ebx
  8117cf:	74 69                	je     81183a <raw_input+0x94>
  8117d1:	be 00 00 00 00       	mov    $0x0,%esi
  8117d6:	0f b6 53 10          	movzbl 0x10(%ebx),%edx
  8117da:	0f bf c7             	movswl %di,%eax
  8117dd:	39 c2                	cmp    %eax,%edx
  8117df:	75 4c                	jne    81182d <raw_input+0x87>
  8117e1:	8b 53 14             	mov    0x14(%ebx),%edx
  8117e4:	85 d2                	test   %edx,%edx
  8117e6:	74 45                	je     81182d <raw_input+0x87>
  8117e8:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  8117eb:	83 c0 0c             	add    $0xc,%eax
  8117ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
  8117f2:	8b 45 08             	mov    0x8(%ebp),%eax
  8117f5:	89 44 24 08          	mov    %eax,0x8(%esp)
  8117f9:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  8117fd:	8b 43 18             	mov    0x18(%ebx),%eax
  811800:	89 04 24             	mov    %eax,(%esp)
  811803:	ff d2                	call   *%edx
  811805:	84 c0                	test   %al,%al
  811807:	74 24                	je     81182d <raw_input+0x87>
  811809:	b8 01 00 00 00       	mov    $0x1,%eax
  81180e:	85 f6                	test   %esi,%esi
  811810:	74 2d                	je     81183f <raw_input+0x99>
  811812:	8b 43 0c             	mov    0xc(%ebx),%eax
  811815:	89 46 0c             	mov    %eax,0xc(%esi)
  811818:	a1 4c e5 b3 00       	mov    0xb3e54c,%eax
  81181d:	89 43 0c             	mov    %eax,0xc(%ebx)
  811820:	89 1d 4c e5 b3 00    	mov    %ebx,0xb3e54c
  811826:	b8 01 00 00 00       	mov    $0x1,%eax
  81182b:	eb 12                	jmp    81183f <raw_input+0x99>
  81182d:	8b 43 0c             	mov    0xc(%ebx),%eax
  811830:	89 de                	mov    %ebx,%esi
  811832:	85 c0                	test   %eax,%eax
  811834:	74 04                	je     81183a <raw_input+0x94>
  811836:	89 c3                	mov    %eax,%ebx
  811838:	eb 9c                	jmp    8117d6 <raw_input+0x30>
  81183a:	b8 00 00 00 00       	mov    $0x0,%eax
  81183f:	0f b6 c0             	movzbl %al,%eax
  811842:	83 c4 1c             	add    $0x1c,%esp
  811845:	5b                   	pop    %ebx
  811846:	5e                   	pop    %esi
  811847:	5f                   	pop    %edi
  811848:	5d                   	pop    %ebp
  811849:	c3                   	ret    
  81184a:	00 00                	add    %al,(%eax)
  81184c:	00 00                	add    %al,(%eax)
	...

00811850 <icmp_time_exceeded>:
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  811850:	55                   	push   %ebp
  811851:	89 e5                	mov    %esp,%ebp
  811853:	57                   	push   %edi
  811854:	56                   	push   %esi
  811855:	53                   	push   %ebx
  811856:	83 ec 1c             	sub    $0x1c,%esp
  struct pbuf *q;
  struct ip_hdr *iphdr;
  struct icmp_te_hdr *tehdr;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  811859:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  811860:	00 
  811861:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%esp)
  811868:	00 
  811869:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  811870:	e8 e2 64 ff ff       	call   807d57 <pbuf_alloc>
  811875:	89 c7                	mov    %eax,%edi
                 PBUF_RAM);
  if (q == NULL) {
  811877:	85 c0                	test   %eax,%eax
  811879:	0f 84 d8 00 00 00    	je     811957 <icmp_time_exceeded+0x107>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  81187f:	66 83 78 0a 23       	cmpw   $0x23,0xa(%eax)
  811884:	77 1c                	ja     8118a2 <icmp_time_exceeded+0x52>
  811886:	c7 44 24 08 8c 4b 81 	movl   $0x814b8c,0x8(%esp)
  81188d:	00 
  81188e:	c7 44 24 04 1e 01 00 	movl   $0x11e,0x4(%esp)
  811895:	00 
  811896:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  81189d:	e8 ea ef fe ff       	call   80088c <_panic>
             (q->len >= (sizeof(struct icmp_dur_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = p->payload;
  8118a2:	8b 45 08             	mov    0x8(%ebp),%eax
  8118a5:	8b 70 04             	mov    0x4(%eax),%esi
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  tehdr = q->payload;
  8118a8:	8b 5f 04             	mov    0x4(%edi),%ebx
  ICMPH_TYPE_SET(tehdr, ICMP_TE);
  8118ab:	0f b7 03             	movzwl (%ebx),%eax
  8118ae:	89 04 24             	mov    %eax,(%esp)
  8118b1:	e8 bf 8f ff ff       	call   80a875 <ntohs>
  8118b6:	0f b6 c0             	movzbl %al,%eax
  8118b9:	80 cc 0b             	or     $0xb,%ah
  8118bc:	89 04 24             	mov    %eax,(%esp)
  8118bf:	e8 9b 8f ff ff       	call   80a85f <htons>
  8118c4:	66 89 03             	mov    %ax,(%ebx)
  ICMPH_CODE_SET(tehdr, t);
  8118c7:	0f b7 c0             	movzwl %ax,%eax
  8118ca:	89 04 24             	mov    %eax,(%esp)
  8118cd:	e8 a3 8f ff ff       	call   80a875 <ntohs>
  8118d2:	b0 00                	mov    $0x0,%al
  8118d4:	66 0b 45 0c          	or     0xc(%ebp),%ax
  8118d8:	0f b7 c0             	movzwl %ax,%eax
  8118db:	89 04 24             	mov    %eax,(%esp)
  8118de:	e8 7c 8f ff ff       	call   80a85f <htons>
  8118e3:	66 89 03             	mov    %ax,(%ebx)

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_dur_hdr), (u8_t *)p->payload,
  8118e6:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  8118ed:	00 
  8118ee:	8b 55 08             	mov    0x8(%ebp),%edx
  8118f1:	8b 42 04             	mov    0x4(%edx),%eax
  8118f4:	89 44 24 04          	mov    %eax,0x4(%esp)
  8118f8:	8b 47 04             	mov    0x4(%edi),%eax
  8118fb:	83 c0 08             	add    $0x8,%eax
  8118fe:	89 04 24             	mov    %eax,(%esp)
  811901:	e8 62 f9 fe ff       	call   801268 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  tehdr->chksum = 0;
  811906:	66 c7 43 02 00 00    	movw   $0x0,0x2(%ebx)
  tehdr->chksum = inet_chksum(tehdr, q->len);
  81190c:	0f b7 47 0a          	movzwl 0xa(%edi),%eax
  811910:	89 44 24 04          	mov    %eax,0x4(%esp)
  811914:	89 1c 24             	mov    %ebx,(%esp)
  811917:	e8 2a 8c ff ff       	call   80a546 <inet_chksum>
  81191c:	66 89 43 02          	mov    %ax,0x2(%ebx)
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_output(q, NULL, &(iphdr->src), ICMP_TTL, 0, IP_PROTO_ICMP);
  811920:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  811927:	00 
  811928:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  81192f:	00 
  811930:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  811937:	00 
  811938:	83 c6 0c             	add    $0xc,%esi
  81193b:	89 74 24 08          	mov    %esi,0x8(%esp)
  81193f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  811946:	00 
  811947:	89 3c 24             	mov    %edi,(%esp)
  81194a:	e8 ae 7d ff ff       	call   8096fd <ip_output>
  pbuf_free(q);
  81194f:	89 3c 24             	mov    %edi,(%esp)
  811952:	e8 3d 61 ff ff       	call   807a94 <pbuf_free>
}
  811957:	83 c4 1c             	add    $0x1c,%esp
  81195a:	5b                   	pop    %ebx
  81195b:	5e                   	pop    %esi
  81195c:	5f                   	pop    %edi
  81195d:	5d                   	pop    %ebp
  81195e:	c3                   	ret    

0081195f <icmp_dest_unreach>:
  81195f:	55                   	push   %ebp
  811960:	89 e5                	mov    %esp,%ebp
  811962:	57                   	push   %edi
  811963:	56                   	push   %esi
  811964:	53                   	push   %ebx
  811965:	83 ec 1c             	sub    $0x1c,%esp
  811968:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  81196f:	00 
  811970:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%esp)
  811977:	00 
  811978:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  81197f:	e8 d3 63 ff ff       	call   807d57 <pbuf_alloc>
  811984:	89 c7                	mov    %eax,%edi
  811986:	85 c0                	test   %eax,%eax
  811988:	0f 84 d8 00 00 00    	je     811a66 <icmp_dest_unreach+0x107>
  81198e:	66 83 78 0a 23       	cmpw   $0x23,0xa(%eax)
  811993:	77 1c                	ja     8119b1 <icmp_dest_unreach+0x52>
  811995:	c7 44 24 08 8c 4b 81 	movl   $0x814b8c,0x8(%esp)
  81199c:	00 
  81199d:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
  8119a4:	00 
  8119a5:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  8119ac:	e8 db ee fe ff       	call   80088c <_panic>
  8119b1:	8b 45 08             	mov    0x8(%ebp),%eax
  8119b4:	8b 70 04             	mov    0x4(%eax),%esi
  8119b7:	8b 5f 04             	mov    0x4(%edi),%ebx
  8119ba:	0f b7 03             	movzwl (%ebx),%eax
  8119bd:	89 04 24             	mov    %eax,(%esp)
  8119c0:	e8 b0 8e ff ff       	call   80a875 <ntohs>
  8119c5:	0f b6 c0             	movzbl %al,%eax
  8119c8:	80 cc 03             	or     $0x3,%ah
  8119cb:	89 04 24             	mov    %eax,(%esp)
  8119ce:	e8 8c 8e ff ff       	call   80a85f <htons>
  8119d3:	66 89 03             	mov    %ax,(%ebx)
  8119d6:	0f b7 c0             	movzwl %ax,%eax
  8119d9:	89 04 24             	mov    %eax,(%esp)
  8119dc:	e8 94 8e ff ff       	call   80a875 <ntohs>
  8119e1:	b0 00                	mov    $0x0,%al
  8119e3:	66 0b 45 0c          	or     0xc(%ebp),%ax
  8119e7:	0f b7 c0             	movzwl %ax,%eax
  8119ea:	89 04 24             	mov    %eax,(%esp)
  8119ed:	e8 6d 8e ff ff       	call   80a85f <htons>
  8119f2:	66 89 03             	mov    %ax,(%ebx)
  8119f5:	c7 44 24 08 1c 00 00 	movl   $0x1c,0x8(%esp)
  8119fc:	00 
  8119fd:	8b 55 08             	mov    0x8(%ebp),%edx
  811a00:	8b 42 04             	mov    0x4(%edx),%eax
  811a03:	89 44 24 04          	mov    %eax,0x4(%esp)
  811a07:	8b 47 04             	mov    0x4(%edi),%eax
  811a0a:	83 c0 08             	add    $0x8,%eax
  811a0d:	89 04 24             	mov    %eax,(%esp)
  811a10:	e8 53 f8 fe ff       	call   801268 <memcpy>
  811a15:	66 c7 43 02 00 00    	movw   $0x0,0x2(%ebx)
  811a1b:	0f b7 47 0a          	movzwl 0xa(%edi),%eax
  811a1f:	89 44 24 04          	mov    %eax,0x4(%esp)
  811a23:	89 1c 24             	mov    %ebx,(%esp)
  811a26:	e8 1b 8b ff ff       	call   80a546 <inet_chksum>
  811a2b:	66 89 43 02          	mov    %ax,0x2(%ebx)
  811a2f:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  811a36:	00 
  811a37:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  811a3e:	00 
  811a3f:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  811a46:	00 
  811a47:	83 c6 0c             	add    $0xc,%esi
  811a4a:	89 74 24 08          	mov    %esi,0x8(%esp)
  811a4e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  811a55:	00 
  811a56:	89 3c 24             	mov    %edi,(%esp)
  811a59:	e8 9f 7c ff ff       	call   8096fd <ip_output>
  811a5e:	89 3c 24             	mov    %edi,(%esp)
  811a61:	e8 2e 60 ff ff       	call   807a94 <pbuf_free>
  811a66:	83 c4 1c             	add    $0x1c,%esp
  811a69:	5b                   	pop    %ebx
  811a6a:	5e                   	pop    %esi
  811a6b:	5f                   	pop    %edi
  811a6c:	5d                   	pop    %ebp
  811a6d:	c3                   	ret    

00811a6e <icmp_input>:
  811a6e:	55                   	push   %ebp
  811a6f:	89 e5                	mov    %esp,%ebp
  811a71:	83 ec 48             	sub    $0x48,%esp
  811a74:	89 5d f4             	mov    %ebx,0xfffffff4(%ebp)
  811a77:	89 75 f8             	mov    %esi,0xfffffff8(%ebp)
  811a7a:	89 7d fc             	mov    %edi,0xfffffffc(%ebp)
  811a7d:	8b 75 08             	mov    0x8(%ebp),%esi
  811a80:	8b 7e 04             	mov    0x4(%esi),%edi
  811a83:	0f b7 07             	movzwl (%edi),%eax
  811a86:	89 04 24             	mov    %eax,(%esp)
  811a89:	e8 e7 8d ff ff       	call   80a875 <ntohs>
  811a8e:	c1 e8 06             	shr    $0x6,%eax
  811a91:	89 c3                	mov    %eax,%ebx
  811a93:	83 e3 3c             	and    $0x3c,%ebx
  811a96:	89 d8                	mov    %ebx,%eax
  811a98:	f7 d8                	neg    %eax
  811a9a:	98                   	cwtl   
  811a9b:	89 45 d8             	mov    %eax,0xffffffd8(%ebp)
  811a9e:	89 44 24 04          	mov    %eax,0x4(%esp)
  811aa2:	89 34 24             	mov    %esi,(%esp)
  811aa5:	e8 7e 5c ff ff       	call   807728 <pbuf_header>
  811aaa:	84 c0                	test   %al,%al
  811aac:	0f 85 0b 03 00 00    	jne    811dbd <icmp_input+0x34f>
  811ab2:	66 83 7e 08 03       	cmpw   $0x3,0x8(%esi)
  811ab7:	0f 86 00 03 00 00    	jbe    811dbd <icmp_input+0x34f>
  811abd:	8b 46 04             	mov    0x4(%esi),%eax
  811ac0:	80 38 08             	cmpb   $0x8,(%eax)
  811ac3:	0f 85 ea 02 00 00    	jne    811db3 <icmp_input+0x345>
  811ac9:	8b 45 0c             	mov    0xc(%ebp),%eax
  811acc:	89 44 24 04          	mov    %eax,0x4(%esp)
  811ad0:	8d 47 10             	lea    0x10(%edi),%eax
  811ad3:	89 04 24             	mov    %eax,(%esp)
  811ad6:	e8 c1 79 ff ff       	call   80949c <ip_addr_isbroadcast>
  811adb:	84 c0                	test   %al,%al
  811add:	75 2b                	jne    811b0a <icmp_input+0x9c>
  811adf:	8b 57 10             	mov    0x10(%edi),%edx
  811ae2:	89 55 dc             	mov    %edx,0xffffffdc(%ebp)
  811ae5:	c7 04 24 00 00 00 f0 	movl   $0xf0000000,(%esp)
  811aec:	e8 a9 8f ff ff       	call   80aa9a <ntohl>
  811af1:	89 45 e0             	mov    %eax,0xffffffe0(%ebp)
  811af4:	c7 04 24 00 00 00 e0 	movl   $0xe0000000,(%esp)
  811afb:	e8 9a 8f ff ff       	call   80aa9a <ntohl>
  811b00:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  811b03:	23 55 dc             	and    0xffffffdc(%ebp),%edx
  811b06:	39 c2                	cmp    %eax,%edx
  811b08:	75 0d                	jne    811b17 <icmp_input+0xa9>
  811b0a:	89 34 24             	mov    %esi,(%esp)
  811b0d:	e8 82 5f ff ff       	call   807a94 <pbuf_free>
  811b12:	e9 b8 02 00 00       	jmp    811dcf <icmp_input+0x361>
  811b17:	66 83 7e 08 07       	cmpw   $0x7,0x8(%esi)
  811b1c:	8d 74 26 00          	lea    0x0(%esi),%esi
  811b20:	0f 86 97 02 00 00    	jbe    811dbd <icmp_input+0x34f>
  811b26:	89 34 24             	mov    %esi,(%esp)
  811b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  811b30:	e8 88 89 ff ff       	call   80a4bd <inet_chksum_pbuf>
  811b35:	66 85 c0             	test   %ax,%ax
  811b38:	74 0d                	je     811b47 <icmp_input+0xd9>
  811b3a:	89 34 24             	mov    %esi,(%esp)
  811b3d:	e8 52 5f ff ff       	call   807a94 <pbuf_free>
  811b42:	e9 88 02 00 00       	jmp    811dcf <icmp_input+0x361>
  811b47:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
  811b4e:	00 
  811b4f:	89 34 24             	mov    %esi,(%esp)
  811b52:	e8 d1 5b ff ff       	call   807728 <pbuf_header>
  811b57:	84 c0                	test   %al,%al
  811b59:	0f 84 f1 00 00 00    	je     811c50 <icmp_input+0x1e2>
  811b5f:	0f bf c3             	movswl %bx,%eax
  811b62:	89 44 24 04          	mov    %eax,0x4(%esp)
  811b66:	89 34 24             	mov    %esi,(%esp)
  811b69:	e8 ba 5b ff ff       	call   807728 <pbuf_header>
  811b6e:	84 c0                	test   %al,%al
  811b70:	74 1c                	je     811b8e <icmp_input+0x120>
  811b72:	c7 44 24 08 b8 4b 81 	movl   $0x814bb8,0x8(%esp)
  811b79:	00 
  811b7a:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
  811b81:	00 
  811b82:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811b89:	e8 fe ec fe ff       	call   80088c <_panic>
  811b8e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  811b95:	00 
  811b96:	0f b7 46 08          	movzwl 0x8(%esi),%eax
  811b9a:	89 44 24 04          	mov    %eax,0x4(%esp)
  811b9e:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  811ba5:	e8 ad 61 ff ff       	call   807d57 <pbuf_alloc>
  811baa:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  811bad:	85 c0                	test   %eax,%eax
  811baf:	0f 84 12 02 00 00    	je     811dc7 <icmp_input+0x359>
  811bb5:	0f b7 50 0a          	movzwl 0xa(%eax),%edx
  811bb9:	0f bf c3             	movswl %bx,%eax
  811bbc:	83 c0 08             	add    $0x8,%eax
  811bbf:	39 c2                	cmp    %eax,%edx
  811bc1:	73 1c                	jae    811bdf <icmp_input+0x171>
  811bc3:	c7 44 24 08 ec 4b 81 	movl   $0x814bec,0x8(%esp)
  811bca:	00 
  811bcb:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
  811bd2:	00 
  811bd3:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811bda:	e8 ad ec fe ff       	call   80088c <_panic>
  811bdf:	89 74 24 04          	mov    %esi,0x4(%esp)
  811be3:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  811be6:	89 04 24             	mov    %eax,(%esp)
  811be9:	e8 fe 5c ff ff       	call   8078ec <pbuf_copy>
  811bee:	84 c0                	test   %al,%al
  811bf0:	74 1c                	je     811c0e <icmp_input+0x1a0>
  811bf2:	c7 44 24 08 24 4c 81 	movl   $0x814c24,0x8(%esp)
  811bf9:	00 
  811bfa:	c7 44 24 04 88 00 00 	movl   $0x88,0x4(%esp)
  811c01:	00 
  811c02:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811c09:	e8 7e ec fe ff       	call   80088c <_panic>
  811c0e:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  811c11:	8b 7a 04             	mov    0x4(%edx),%edi
  811c14:	8b 45 d8             	mov    0xffffffd8(%ebp),%eax
  811c17:	89 44 24 04          	mov    %eax,0x4(%esp)
  811c1b:	89 14 24             	mov    %edx,(%esp)
  811c1e:	e8 05 5b ff ff       	call   807728 <pbuf_header>
  811c23:	84 c0                	test   %al,%al
  811c25:	74 1c                	je     811c43 <icmp_input+0x1d5>
  811c27:	c7 44 24 08 4c 4c 81 	movl   $0x814c4c,0x8(%esp)
  811c2e:	00 
  811c2f:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  811c36:	00 
  811c37:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811c3e:	e8 49 ec fe ff       	call   80088c <_panic>
  811c43:	89 34 24             	mov    %esi,(%esp)
  811c46:	e8 49 5e ff ff       	call   807a94 <pbuf_free>
  811c4b:	8b 75 ec             	mov    0xffffffec(%ebp),%esi
  811c4e:	eb 30                	jmp    811c80 <icmp_input+0x212>
  811c50:	c7 44 24 04 de ff ff 	movl   $0xffffffde,0x4(%esp)
  811c57:	ff 
  811c58:	89 34 24             	mov    %esi,(%esp)
  811c5b:	e8 c8 5a ff ff       	call   807728 <pbuf_header>
  811c60:	84 c0                	test   %al,%al
  811c62:	74 1c                	je     811c80 <icmp_input+0x212>
  811c64:	c7 44 24 08 4c 4c 81 	movl   $0x814c4c,0x8(%esp)
  811c6b:	00 
  811c6c:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  811c73:	00 
  811c74:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811c7b:	e8 0c ec fe ff       	call   80088c <_panic>
  811c80:	8b 56 04             	mov    0x4(%esi),%edx
  811c83:	89 55 e8             	mov    %edx,0xffffffe8(%ebp)
  811c86:	8b 57 0c             	mov    0xc(%edi),%edx
  811c89:	8b 47 10             	mov    0x10(%edi),%eax
  811c8c:	89 47 0c             	mov    %eax,0xc(%edi)
  811c8f:	89 57 10             	mov    %edx,0x10(%edi)
  811c92:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  811c95:	0f b7 02             	movzwl (%edx),%eax
  811c98:	89 04 24             	mov    %eax,(%esp)
  811c9b:	e8 d5 8b ff ff       	call   80a875 <ntohs>
  811ca0:	0f b6 c0             	movzbl %al,%eax
  811ca3:	89 04 24             	mov    %eax,(%esp)
  811ca6:	e8 b4 8b ff ff       	call   80a85f <htons>
  811cab:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  811cae:	66 89 02             	mov    %ax,(%edx)
  811cb1:	0f b7 42 02          	movzwl 0x2(%edx),%eax
  811cb5:	66 89 45 e6          	mov    %ax,0xffffffe6(%ebp)
  811cb9:	c7 04 24 ff f7 00 00 	movl   $0xf7ff,(%esp)
  811cc0:	e8 9a 8b ff ff       	call   80a85f <htons>
  811cc5:	66 39 45 e6          	cmp    %ax,0xffffffe6(%ebp)
  811cc9:	72 28                	jb     811cf3 <icmp_input+0x285>
  811ccb:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  811cce:	0f b7 52 02          	movzwl 0x2(%edx),%edx
  811cd2:	66 89 55 f2          	mov    %dx,0xfffffff2(%ebp)
  811cd6:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  811cdd:	e8 7d 8b ff ff       	call   80a85f <htons>
  811ce2:	0f b7 55 f2          	movzwl 0xfffffff2(%ebp),%edx
  811ce6:	8d 44 02 01          	lea    0x1(%edx,%eax,1),%eax
  811cea:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  811ced:	66 89 42 02          	mov    %ax,0x2(%edx)
  811cf1:	eb 22                	jmp    811d15 <icmp_input+0x2a7>
  811cf3:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  811cf6:	0f b7 40 02          	movzwl 0x2(%eax),%eax
  811cfa:	66 89 45 f0          	mov    %ax,0xfffffff0(%ebp)
  811cfe:	c7 04 24 00 08 00 00 	movl   $0x800,(%esp)
  811d05:	e8 55 8b ff ff       	call   80a85f <htons>
  811d0a:	66 03 45 f0          	add    0xfffffff0(%ebp),%ax
  811d0e:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  811d11:	66 89 42 02          	mov    %ax,0x2(%edx)
  811d15:	0f b7 47 08          	movzwl 0x8(%edi),%eax
  811d19:	89 04 24             	mov    %eax,(%esp)
  811d1c:	e8 54 8b ff ff       	call   80a875 <ntohs>
  811d21:	66 0d 00 ff          	or     $0xff00,%ax
  811d25:	0f b7 c0             	movzwl %ax,%eax
  811d28:	89 04 24             	mov    %eax,(%esp)
  811d2b:	e8 2f 8b ff ff       	call   80a85f <htons>
  811d30:	66 89 47 08          	mov    %ax,0x8(%edi)
  811d34:	66 c7 47 0a 00 00    	movw   $0x0,0xa(%edi)
  811d3a:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  811d41:	00 
  811d42:	89 3c 24             	mov    %edi,(%esp)
  811d45:	e8 fc 87 ff ff       	call   80a546 <inet_chksum>
  811d4a:	66 89 47 0a          	mov    %ax,0xa(%edi)
  811d4e:	0f bf c3             	movswl %bx,%eax
  811d51:	89 44 24 04          	mov    %eax,0x4(%esp)
  811d55:	89 34 24             	mov    %esi,(%esp)
  811d58:	e8 cb 59 ff ff       	call   807728 <pbuf_header>
  811d5d:	84 c0                	test   %al,%al
  811d5f:	74 1c                	je     811d7d <icmp_input+0x30f>
  811d61:	c7 44 24 08 90 3c 81 	movl   $0x813c90,0x8(%esp)
  811d68:	00 
  811d69:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  811d70:	00 
  811d71:	c7 04 24 80 4c 81 00 	movl   $0x814c80,(%esp)
  811d78:	e8 0f eb fe ff       	call   80088c <_panic>
  811d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
  811d80:	89 44 24 18          	mov    %eax,0x18(%esp)
  811d84:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
  811d8b:	00 
  811d8c:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  811d93:	00 
  811d94:	c7 44 24 0c ff 00 00 	movl   $0xff,0xc(%esp)
  811d9b:	00 
  811d9c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  811da3:	00 
  811da4:	8d 47 0c             	lea    0xc(%edi),%eax
  811da7:	89 44 24 04          	mov    %eax,0x4(%esp)
  811dab:	89 34 24             	mov    %esi,(%esp)
  811dae:	e8 3d 77 ff ff       	call   8094f0 <ip_output_if>
  811db3:	89 34 24             	mov    %esi,(%esp)
  811db6:	e8 d9 5c ff ff       	call   807a94 <pbuf_free>
  811dbb:	eb 12                	jmp    811dcf <icmp_input+0x361>
  811dbd:	89 34 24             	mov    %esi,(%esp)
  811dc0:	e8 cf 5c ff ff       	call   807a94 <pbuf_free>
  811dc5:	eb 08                	jmp    811dcf <icmp_input+0x361>
  811dc7:	89 34 24             	mov    %esi,(%esp)
  811dca:	e8 c5 5c ff ff       	call   807a94 <pbuf_free>
  811dcf:	8b 5d f4             	mov    0xfffffff4(%ebp),%ebx
  811dd2:	8b 75 f8             	mov    0xfffffff8(%ebp),%esi
  811dd5:	8b 7d fc             	mov    0xfffffffc(%ebp),%edi
  811dd8:	89 ec                	mov    %ebp,%esp
  811dda:	5d                   	pop    %ebp
  811ddb:	c3                   	ret    
  811ddc:	00 00                	add    %al,(%eax)
	...

00811de0 <__udivdi3>:
  811de0:	55                   	push   %ebp
  811de1:	89 e5                	mov    %esp,%ebp
  811de3:	57                   	push   %edi
  811de4:	56                   	push   %esi
  811de5:	83 ec 1c             	sub    $0x1c,%esp
  811de8:	8b 45 10             	mov    0x10(%ebp),%eax
  811deb:	8b 55 14             	mov    0x14(%ebp),%edx
  811dee:	8b 7d 0c             	mov    0xc(%ebp),%edi
  811df1:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  811df4:	89 c1                	mov    %eax,%ecx
  811df6:	8b 45 08             	mov    0x8(%ebp),%eax
  811df9:	85 d2                	test   %edx,%edx
  811dfb:	89 d6                	mov    %edx,%esi
  811dfd:	89 45 e8             	mov    %eax,0xffffffe8(%ebp)
  811e00:	75 1e                	jne    811e20 <__udivdi3+0x40>
  811e02:	39 f9                	cmp    %edi,%ecx
  811e04:	0f 86 8d 00 00 00    	jbe    811e97 <__udivdi3+0xb7>
  811e0a:	89 fa                	mov    %edi,%edx
  811e0c:	f7 f1                	div    %ecx
  811e0e:	89 c1                	mov    %eax,%ecx
  811e10:	89 c8                	mov    %ecx,%eax
  811e12:	89 f2                	mov    %esi,%edx
  811e14:	83 c4 1c             	add    $0x1c,%esp
  811e17:	5e                   	pop    %esi
  811e18:	5f                   	pop    %edi
  811e19:	5d                   	pop    %ebp
  811e1a:	c3                   	ret    
  811e1b:	90                   	nop    
  811e1c:	8d 74 26 00          	lea    0x0(%esi),%esi
  811e20:	39 fa                	cmp    %edi,%edx
  811e22:	0f 87 98 00 00 00    	ja     811ec0 <__udivdi3+0xe0>
  811e28:	0f bd c2             	bsr    %edx,%eax
  811e2b:	83 f0 1f             	xor    $0x1f,%eax
  811e2e:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  811e31:	74 7f                	je     811eb2 <__udivdi3+0xd2>
  811e33:	b8 20 00 00 00       	mov    $0x20,%eax
  811e38:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  811e3b:	2b 45 e4             	sub    0xffffffe4(%ebp),%eax
  811e3e:	89 c1                	mov    %eax,%ecx
  811e40:	d3 ea                	shr    %cl,%edx
  811e42:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  811e46:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  811e49:	89 f0                	mov    %esi,%eax
  811e4b:	d3 e0                	shl    %cl,%eax
  811e4d:	09 c2                	or     %eax,%edx
  811e4f:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  811e52:	89 55 e0             	mov    %edx,0xffffffe0(%ebp)
  811e55:	89 fa                	mov    %edi,%edx
  811e57:	d3 e0                	shl    %cl,%eax
  811e59:	0f b6 4d ec          	movzbl 0xffffffec(%ebp),%ecx
  811e5d:	89 45 f4             	mov    %eax,0xfffffff4(%ebp)
  811e60:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  811e63:	d3 e8                	shr    %cl,%eax
  811e65:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  811e69:	d3 e2                	shl    %cl,%edx
  811e6b:	0f b6 4d ec          	movzbl 0xffffffec(%ebp),%ecx
  811e6f:	09 d0                	or     %edx,%eax
  811e71:	d3 ef                	shr    %cl,%edi
  811e73:	89 fa                	mov    %edi,%edx
  811e75:	f7 75 e0             	divl   0xffffffe0(%ebp)
  811e78:	89 d1                	mov    %edx,%ecx
  811e7a:	89 c7                	mov    %eax,%edi
  811e7c:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
  811e7f:	f7 e7                	mul    %edi
  811e81:	39 d1                	cmp    %edx,%ecx
  811e83:	89 c6                	mov    %eax,%esi
  811e85:	89 55 dc             	mov    %edx,0xffffffdc(%ebp)
  811e88:	72 6f                	jb     811ef9 <__udivdi3+0x119>
  811e8a:	39 ca                	cmp    %ecx,%edx
  811e8c:	74 5e                	je     811eec <__udivdi3+0x10c>
  811e8e:	89 f9                	mov    %edi,%ecx
  811e90:	31 f6                	xor    %esi,%esi
  811e92:	e9 79 ff ff ff       	jmp    811e10 <__udivdi3+0x30>
  811e97:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  811e9a:	85 c0                	test   %eax,%eax
  811e9c:	74 32                	je     811ed0 <__udivdi3+0xf0>
  811e9e:	89 f2                	mov    %esi,%edx
  811ea0:	89 f8                	mov    %edi,%eax
  811ea2:	f7 f1                	div    %ecx
  811ea4:	89 c6                	mov    %eax,%esi
  811ea6:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  811ea9:	f7 f1                	div    %ecx
  811eab:	89 c1                	mov    %eax,%ecx
  811ead:	e9 5e ff ff ff       	jmp    811e10 <__udivdi3+0x30>
  811eb2:	39 d7                	cmp    %edx,%edi
  811eb4:	77 2a                	ja     811ee0 <__udivdi3+0x100>
  811eb6:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  811eb9:	39 55 e8             	cmp    %edx,0xffffffe8(%ebp)
  811ebc:	73 22                	jae    811ee0 <__udivdi3+0x100>
  811ebe:	66 90                	xchg   %ax,%ax
  811ec0:	31 c9                	xor    %ecx,%ecx
  811ec2:	31 f6                	xor    %esi,%esi
  811ec4:	e9 47 ff ff ff       	jmp    811e10 <__udivdi3+0x30>
  811ec9:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
  811ed0:	b8 01 00 00 00       	mov    $0x1,%eax
  811ed5:	31 d2                	xor    %edx,%edx
  811ed7:	f7 75 f0             	divl   0xfffffff0(%ebp)
  811eda:	89 c1                	mov    %eax,%ecx
  811edc:	eb c0                	jmp    811e9e <__udivdi3+0xbe>
  811ede:	66 90                	xchg   %ax,%ax
  811ee0:	b9 01 00 00 00       	mov    $0x1,%ecx
  811ee5:	31 f6                	xor    %esi,%esi
  811ee7:	e9 24 ff ff ff       	jmp    811e10 <__udivdi3+0x30>
  811eec:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  811eef:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  811ef3:	d3 e0                	shl    %cl,%eax
  811ef5:	39 c6                	cmp    %eax,%esi
  811ef7:	76 95                	jbe    811e8e <__udivdi3+0xae>
  811ef9:	8d 4f ff             	lea    0xffffffff(%edi),%ecx
  811efc:	31 f6                	xor    %esi,%esi
  811efe:	e9 0d ff ff ff       	jmp    811e10 <__udivdi3+0x30>
	...

00811f10 <__umoddi3>:
  811f10:	55                   	push   %ebp
  811f11:	89 e5                	mov    %esp,%ebp
  811f13:	57                   	push   %edi
  811f14:	56                   	push   %esi
  811f15:	83 ec 30             	sub    $0x30,%esp
  811f18:	8b 55 14             	mov    0x14(%ebp),%edx
  811f1b:	8b 45 10             	mov    0x10(%ebp),%eax
  811f1e:	8b 75 08             	mov    0x8(%ebp),%esi
  811f21:	8b 7d 0c             	mov    0xc(%ebp),%edi
  811f24:	85 d2                	test   %edx,%edx
  811f26:	c7 45 d0 00 00 00 00 	movl   $0x0,0xffffffd0(%ebp)
  811f2d:	89 c1                	mov    %eax,%ecx
  811f2f:	c7 45 d4 00 00 00 00 	movl   $0x0,0xffffffd4(%ebp)
  811f36:	89 45 ec             	mov    %eax,0xffffffec(%ebp)
  811f39:	89 55 e8             	mov    %edx,0xffffffe8(%ebp)
  811f3c:	89 75 f0             	mov    %esi,0xfffffff0(%ebp)
  811f3f:	89 7d e0             	mov    %edi,0xffffffe0(%ebp)
  811f42:	75 1c                	jne    811f60 <__umoddi3+0x50>
  811f44:	39 f8                	cmp    %edi,%eax
  811f46:	89 fa                	mov    %edi,%edx
  811f48:	0f 86 d4 00 00 00    	jbe    812022 <__umoddi3+0x112>
  811f4e:	89 f0                	mov    %esi,%eax
  811f50:	f7 f1                	div    %ecx
  811f52:	89 55 d0             	mov    %edx,0xffffffd0(%ebp)
  811f55:	c7 45 d4 00 00 00 00 	movl   $0x0,0xffffffd4(%ebp)
  811f5c:	eb 12                	jmp    811f70 <__umoddi3+0x60>
  811f5e:	66 90                	xchg   %ax,%ax
  811f60:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  811f63:	39 4d e8             	cmp    %ecx,0xffffffe8(%ebp)
  811f66:	76 18                	jbe    811f80 <__umoddi3+0x70>
  811f68:	89 75 d0             	mov    %esi,0xffffffd0(%ebp)
  811f6b:	89 7d d4             	mov    %edi,0xffffffd4(%ebp)
  811f6e:	66 90                	xchg   %ax,%ax
  811f70:	8b 45 d0             	mov    0xffffffd0(%ebp),%eax
  811f73:	8b 55 d4             	mov    0xffffffd4(%ebp),%edx
  811f76:	83 c4 30             	add    $0x30,%esp
  811f79:	5e                   	pop    %esi
  811f7a:	5f                   	pop    %edi
  811f7b:	5d                   	pop    %ebp
  811f7c:	c3                   	ret    
  811f7d:	8d 76 00             	lea    0x0(%esi),%esi
  811f80:	0f bd 45 e8          	bsr    0xffffffe8(%ebp),%eax
  811f84:	83 f0 1f             	xor    $0x1f,%eax
  811f87:	89 45 dc             	mov    %eax,0xffffffdc(%ebp)
  811f8a:	0f 84 c0 00 00 00    	je     812050 <__umoddi3+0x140>
  811f90:	b8 20 00 00 00       	mov    $0x20,%eax
  811f95:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  811f98:	2b 45 dc             	sub    0xffffffdc(%ebp),%eax
  811f9b:	8b 7d ec             	mov    0xffffffec(%ebp),%edi
  811f9e:	8b 75 f0             	mov    0xfffffff0(%ebp),%esi
  811fa1:	89 c1                	mov    %eax,%ecx
  811fa3:	89 45 e4             	mov    %eax,0xffffffe4(%ebp)
  811fa6:	d3 ea                	shr    %cl,%edx
  811fa8:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  811fab:	0f b6 4d dc          	movzbl 0xffffffdc(%ebp),%ecx
  811faf:	d3 e0                	shl    %cl,%eax
  811fb1:	09 c2                	or     %eax,%edx
  811fb3:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  811fb6:	d3 e7                	shl    %cl,%edi
  811fb8:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  811fbc:	89 55 f4             	mov    %edx,0xfffffff4(%ebp)
  811fbf:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  811fc2:	d3 e8                	shr    %cl,%eax
  811fc4:	0f b6 4d dc          	movzbl 0xffffffdc(%ebp),%ecx
  811fc8:	d3 e2                	shl    %cl,%edx
  811fca:	09 d0                	or     %edx,%eax
  811fcc:	8b 55 e0             	mov    0xffffffe0(%ebp),%edx
  811fcf:	d3 e6                	shl    %cl,%esi
  811fd1:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  811fd5:	d3 ea                	shr    %cl,%edx
  811fd7:	f7 75 f4             	divl   0xfffffff4(%ebp)
  811fda:	89 55 cc             	mov    %edx,0xffffffcc(%ebp)
  811fdd:	f7 e7                	mul    %edi
  811fdf:	39 55 cc             	cmp    %edx,0xffffffcc(%ebp)
  811fe2:	0f 82 a5 00 00 00    	jb     81208d <__umoddi3+0x17d>
  811fe8:	3b 55 cc             	cmp    0xffffffcc(%ebp),%edx
  811feb:	0f 84 94 00 00 00    	je     812085 <__umoddi3+0x175>
  811ff1:	8b 4d cc             	mov    0xffffffcc(%ebp),%ecx
  811ff4:	29 c6                	sub    %eax,%esi
  811ff6:	19 d1                	sbb    %edx,%ecx
  811ff8:	89 4d cc             	mov    %ecx,0xffffffcc(%ebp)
  811ffb:	0f b6 4d dc          	movzbl 0xffffffdc(%ebp),%ecx
  811fff:	89 f2                	mov    %esi,%edx
  812001:	8b 45 cc             	mov    0xffffffcc(%ebp),%eax
  812004:	d3 ea                	shr    %cl,%edx
  812006:	0f b6 4d e4          	movzbl 0xffffffe4(%ebp),%ecx
  81200a:	d3 e0                	shl    %cl,%eax
  81200c:	0f b6 4d dc          	movzbl 0xffffffdc(%ebp),%ecx
  812010:	09 c2                	or     %eax,%edx
  812012:	8b 45 cc             	mov    0xffffffcc(%ebp),%eax
  812015:	89 55 d0             	mov    %edx,0xffffffd0(%ebp)
  812018:	d3 e8                	shr    %cl,%eax
  81201a:	89 45 d4             	mov    %eax,0xffffffd4(%ebp)
  81201d:	e9 4e ff ff ff       	jmp    811f70 <__umoddi3+0x60>
  812022:	8b 45 ec             	mov    0xffffffec(%ebp),%eax
  812025:	85 c0                	test   %eax,%eax
  812027:	74 17                	je     812040 <__umoddi3+0x130>
  812029:	8b 45 e0             	mov    0xffffffe0(%ebp),%eax
  81202c:	8b 55 e8             	mov    0xffffffe8(%ebp),%edx
  81202f:	f7 f1                	div    %ecx
  812031:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  812034:	f7 f1                	div    %ecx
  812036:	e9 17 ff ff ff       	jmp    811f52 <__umoddi3+0x42>
  81203b:	90                   	nop    
  81203c:	8d 74 26 00          	lea    0x0(%esi),%esi
  812040:	b8 01 00 00 00       	mov    $0x1,%eax
  812045:	31 d2                	xor    %edx,%edx
  812047:	f7 75 ec             	divl   0xffffffec(%ebp)
  81204a:	89 c1                	mov    %eax,%ecx
  81204c:	eb db                	jmp    812029 <__umoddi3+0x119>
  81204e:	66 90                	xchg   %ax,%ax
  812050:	8b 45 e8             	mov    0xffffffe8(%ebp),%eax
  812053:	39 45 e0             	cmp    %eax,0xffffffe0(%ebp)
  812056:	77 19                	ja     812071 <__umoddi3+0x161>
  812058:	8b 55 ec             	mov    0xffffffec(%ebp),%edx
  81205b:	39 55 f0             	cmp    %edx,0xfffffff0(%ebp)
  81205e:	73 11                	jae    812071 <__umoddi3+0x161>
  812060:	8b 55 f0             	mov    0xfffffff0(%ebp),%edx
  812063:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  812066:	89 55 d0             	mov    %edx,0xffffffd0(%ebp)
  812069:	89 4d d4             	mov    %ecx,0xffffffd4(%ebp)
  81206c:	e9 ff fe ff ff       	jmp    811f70 <__umoddi3+0x60>
  812071:	8b 4d e0             	mov    0xffffffe0(%ebp),%ecx
  812074:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
  812077:	2b 45 ec             	sub    0xffffffec(%ebp),%eax
  81207a:	1b 4d e8             	sbb    0xffffffe8(%ebp),%ecx
  81207d:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
  812080:	89 4d e0             	mov    %ecx,0xffffffe0(%ebp)
  812083:	eb db                	jmp    812060 <__umoddi3+0x150>
  812085:	39 f0                	cmp    %esi,%eax
  812087:	0f 86 64 ff ff ff    	jbe    811ff1 <__umoddi3+0xe1>
  81208d:	29 f8                	sub    %edi,%eax
  81208f:	1b 55 f4             	sbb    0xfffffff4(%ebp),%edx
  812092:	e9 5a ff ff ff       	jmp    811ff1 <__umoddi3+0xe1>
