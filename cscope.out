cscope 15 /home/wuxy/mitjos -q 0000007355 0001259123
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

39 
	$boŸmaö
()

41 
Proghdr
 *
ph
, *
ïh
;

44 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

47 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

48 
bad
;

51 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

52 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

53 ; 
ph
 < 
ïh
;Öh++)

54 
	`ªad£g
(
ph
->
p_va
,Öh->
p_memsz
,Öh->
p_off£t
);

58 (((*)()Ë(
ELFHDR
->
e_íåy
 & 0xFFFFFF))();

60 
bad
:

61 
	`outw
(0x8A00, 0x8A00);

62 
	`outw
(0x8A00, 0x8E00);

65 
	}
}

70 
	$ªad£g
(
uöt32_t
 
va
, uöt32_à
cou¡
, uöt32_à
off£t
)

72 
uöt32_t
 
íd_va
;

74 
va
 &= 0xFFFFFF;

75 
íd_va
 = 
va
 + 
cou¡
;

78 
va
 &~(
SECTSIZE
 - 1);

81 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

86 
va
 < 
íd_va
) {

87 
	`ªad£˘
((
uöt8_t
*Ë
va
, 
off£t
);

88 
va
 +
SECTSIZE
;

89 
off£t
++;

91 
	}
}

94 
	$waôdisk
()

97 (
	`öb
(0x1F7) & 0xC0) != 0x40)

99 
	}
}

102 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

105 
	`waôdisk
();

107 
	`outb
(0x1F2, 1);

108 
	`outb
(0x1F3, 
off£t
);

109 
	`outb
(0x1F4, 
off£t
 >> 8);

110 
	`outb
(0x1F5, 
off£t
 >> 16);

111 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

112 
	`outb
(0x1F7, 0x20);

115 
	`waôdisk
();

118 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

119 
	}
}

	@fs/bc.c

2 
	~"fs.h
"

6 
	$diskaddr
(
uöt32_t
 
blockno
)

8 i‡(
blockno
 =0 || (
su≥r
 && blocknÿ>su≥r->
s_nblocks
))

9 
	`∑nic
("bad blockÇumbî %08x i¿diskaddr", 
blockno
);

10  (*Ë(
DISKMAP
 + 
blockno
 * 
BLKSIZE
);

11 
	}
}

14 
boﬁ


15 
	$va_is_m≠≥d
(*
va
)

17  (
vpd
[
	`PDX
(
va
)] & 
PTE_P
Ë&& (
v±
[
	`VPN
(va)] & PTE_P);

18 
	}
}

21 
boﬁ


22 
	$va_is_dúty
(*
va
)

24  (
v±
[
	`VPN
(
va
)] & 
PTE_D
) != 0;

25 
	}
}

31 
	$bc_pgÁu…
(
UTøp‰ame
 *
utf
)

33 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

34 
uöt32_t
 
blockno
 = ((uöt32_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

35 
r
;

39 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

40 
	`∑nic
("page fault in FS:Éip %08x, va %08x,Érr %04x",

41 
utf
->
utf_eù
, 
addr
, utf->
utf_îr
);

47 if((
r
=
	`sys_∑ge_Æloc
(0,
	`ROUNDDOWN
(
addr
,
BLKSIZE
),
PTE_USER
))<0)

48 
	`∑nic
("Ælo¯∑gêÁûed:%e\n",
r
);

50 
	`ide_ªad
(
blockno
*
BLKSECTS
,
	`ROUNDDOWN
(
addr
,
BLKSIZE
),BLKSECTS);

55 i‡(
su≥r
 && 
blockno
 >su≥r->
s_nblocks
)

56 
	`∑nic
("ªadögÇ⁄-exi°íàblock %08x\n", 
blockno
);

59 i‡(
bôm≠
 && 
	`block_is_‰ì
(
blockno
))

60 
	`∑nic
("ªadög fªêblock %08x\n", 
blockno
);

61 
	}
}

71 
	$Êush_block
(*
addr
)

73 
uöt32_t
 
blockno
 = ((uöt32_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

75 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

76 
	`∑nic
("Êush_block o‡bad v®%08x", 
addr
);

79 
r
;

80 *
blkva
;

81 
blkva
=
	`ROUNDDOWN
(
addr
,
BLKSIZE
);

82 if(
	`va_is_m≠≥d
(
addr
)&&
	`va_is_dúty
(addr))

84 
	`ide_wrôe
(
blockno
*
BLKSECTS
,
blkva
,BLKSECTS);

85 if((
r
=
	`sys_∑ge_m≠
(0,
blkva
,0,blkva,
PTE_USER
))<0)

86 
	`∑nic
("∑gêm≠pög faûed:%e\n",
r
);

90 
	}
}

95 
	$check_bc
()

97 
Su≥r
 
backup
;

100 
	`memmove
(&
backup
, 
	`diskaddr
(1),  backup);

103 
	`°r˝y
(
	`diskaddr
(1), "OOPS!\n");

104 
	`Êush_block
(
	`diskaddr
(1));

105 
	`as£π
(
	`va_is_m≠≥d
(
	`diskaddr
(1)));

106 
	`as£π
(!
	`va_is_dúty
(
	`diskaddr
(1)));

109 
	`sys_∑ge_unm≠
(0, 
	`diskaddr
(1));

110 
	`as£π
(!
	`va_is_m≠≥d
(
	`diskaddr
(1)));

113 
	`as£π
(
	`°rcmp
(
	`diskaddr
(1), "OOPS!\n") == 0);

116 
	`memmove
(
	`diskaddr
(1), &
backup
,  backup);

117 
	`Êush_block
(
	`diskaddr
(1));

119 
	`˝rötf
("block cache is good\n");

120 
	}
}

123 
	$bc_öô
()

125 
	`£t_pgÁu…_h™dÀr
(
bc_pgÁu…
);

126 
	`check_bc
();

127 
	}
}

	@fs/fs.c

1 
	~<öc/°rög.h
>

3 
	~"fs.h
"

11 
	$check_su≥r
()

13 i‡(
su≥r
->
s_magic
 !
FS_MAGIC
)

14 
	`∑nic
("bad file system magicÇumber");

16 i‡(
su≥r
->
s_nblocks
 > 
DISKSIZE
/
BLKSIZE
)

17 
	`∑nic
("file system isÅooÜarge");

19 
	`˝rötf
("superblock is good\n");

20 
	}
}

28 
boﬁ


29 
	$block_is_‰ì
(
uöt32_t
 
blockno
)

31 i‡(
su≥r
 =0 || 
blockno
 >su≥r->
s_nblocks
)

33 i‡(
bôm≠
[
blockno
 / 32] & (1 << (blockno % 32)))

36 
	}
}

40 
	$‰ì_block
(
uöt32_t
 
blockno
)

43 i‡(
blockno
 == 0)

44 
	`∑nic
("attemptÅo free zero block");

45 
bôm≠
[
blockno
/32] |= 1<<(blockno%32);

46 
	}
}

57 
	$Æloc_block
()

64 
uöt32_t
 
blockno
;

65 
blockno
=1;blockno<
su≥r
->
s_nblocks
;blockno++)

66 if(
	`block_is_‰ì
(
blockno
))

68 
bôm≠
[
blockno
/32] &= ~(1<<(blockno%32));

69 
	`Êush_block
(
	`diskaddr
(2));

70  
blockno
;

73  -
E_NO_DISK
;

74 
	}
}

81 
	$check_bôm≠
()

83 
uöt32_t
 
i
;

86 
i
 = 0; i * 
BLKBITSIZE
 < 
su≥r
->
s_nblocks
; i++)

87 
	`as£π
(!
	`block_is_‰ì
(2+
i
));

90 
	`as£π
(!
	`block_is_‰ì
(0));

91 
	`as£π
(!
	`block_is_‰ì
(1));

93 
	`˝rötf
("bitmap is good\n");

94 
	}
}

102 
	$fs_öô
()

104 
	`°©ic_as£π
((
Fûe
) == 256);

107 i‡(
	`ide_¥obe_disk1
())

108 
	`ide_£t_disk
(1);

110 
	`ide_£t_disk
(0);

111 
	`bc_öô
();

114 
su≥r
 = (
Su≥r
*)
	`diskaddr
(1);

117 
bôm≠
 = 
	`diskaddr
(2);

119 
	`check_su≥r
();

120 
	`check_bôm≠
();

121 
	}
}

140 
	$fûe_block_wÆk
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, uöt32_à**
µdiskbno
, 
boﬁ
 
Æloc
)

143 
blkno
;

144 if(
fûebno
<
NDIRECT
)

147 *
µdiskbno
=&
f
->
f_dúe˘
[
fûebno
];

149 if((
fûebno
<
NDIRECT
+
NINDIRECT
)&&(filebno>=NDIRECT))

151 if(!
f
->
f_ödúe˘
)

153 if(!
Æloc
)

154  -
E_NOT_FOUND
;

155 if((
blkno
=
	`Æloc_block
())<0)

156  -
E_NO_DISK
;

158 
f
->
f_ödúe˘
=
blkno
;

159 
	`mem£t
(
	`diskaddr
(
blkno
),0,
BLKSIZE
);

160 *
µdiskbno
=
NULL
;

163 *
µdiskbno
=(
uöt32_t
 *)
	`diskaddr
(
f
->
f_ödúe˘
)+
fûebno
-10;

168  -
E_INVAL
;

172 
	}
}

183 
	$fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, **
blk
)

186 
r
;

187 
uöt32_t
 *
pdiskbno
;

188 if(
fûebno
<
NDIRECT
+
NINDIRECT
&&filebno>=0)

190 if((
r
=
	`fûe_block_wÆk
(
f
,
fûebno
,&
pdiskbno
,1))<0)

191  
r
;

193 if(
pdiskbno
&&*pdiskbno)

195 *
blk
=(*)
	`diskaddr
(*
pdiskbno
);

198 if((*
pdiskbno
=(
uöt32_t
)
	`Æloc_block
())<0)

199  -
E_NO_DISK
;

200 
	`mem£t
(
	`diskaddr
(*
pdiskbno
),0,
BLKSIZE
);

201 *
blk
=(*)
	`diskaddr
(*
pdiskbno
);

202 if(
fûebno
<
NDIRECT
)

203 
f
->
f_dúe˘
[
fûebno
]=*
pdiskbno
;

205 *((
uöt32_t
 *)
	`diskaddr
(
f
->
f_ödúe˘
)+
fûebno
-10)=*
pdiskbno
;

209  -
E_INVAL
;

212 
	}
}

219 
	$dú_lookup
(
Fûe
 *
dú
, c⁄° *
«me
, Fûê**
fûe
)

221 
r
;

222 
uöt32_t
 
i
, 
j
, 
nblock
;

223 *
blk
;

224 
Fûe
 *
f
;

229 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

230 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

231 
i
 = 0; i < 
nblock
; i++) {

232 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

233  
r
;

234 
f
 = (
Fûe
*Ë
blk
;

235 
j
 = 0; j < 
BLKFILES
; j++)

236 i‡(
	`°rcmp
(
f
[
j
].
f_«me
, 
«me
) == 0) {

237 *
fûe
 = &
f
[
j
];

241  -
E_NOT_FOUND
;

242 
	}
}

247 
	$dú_Æloc_fûe
(
Fûe
 *
dú
, Fûê**
fûe
)

249 
r
;

250 
uöt32_t
 
nblock
, 
i
, 
j
;

251 *
blk
;

252 
Fûe
 *
f
;

254 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

255 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

256 
i
 = 0; i < 
nblock
; i++) {

257 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

258  
r
;

259 
f
 = (
Fûe
*Ë
blk
;

260 
j
 = 0; j < 
BLKFILES
; j++)

261 i‡(
f
[
j
].
f_«me
[0] == '\0') {

262 *
fûe
 = &
f
[
j
];

266 
dú
->
f_size
 +
BLKSIZE
;

267 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

268  
r
;

269 
f
 = (
Fûe
*Ë
blk
;

270 *
fûe
 = &
f
[0];

272 
	}
}

276 
	$skù_¶ash
(c⁄° *
p
)

278 *
p
 == '/')

279 
p
++;

280  
p
;

281 
	}
}

290 
	$wÆk_∑th
(c⁄° *
∑th
, 
Fûe
 **
pdú
, Fûê**
pf
, *
œ°ñem
)

292 c⁄° *
p
;

293 
«me
[
MAXNAMELEN
];

294 
Fûe
 *
dú
, *
f
;

295 
r
;

299 
∑th
 = 
	`skù_¶ash
(path);

300 
f
 = &
su≥r
->
s_roŸ
;

301 
dú
 = 0;

302 
«me
[0] = 0;

304 i‡(
pdú
)

305 *
pdú
 = 0;

306 *
pf
 = 0;

307 *
∑th
 != '\0') {

308 
dú
 = 
f
;

309 
p
 = 
∑th
;

310 *
∑th
 != '/' && *path != '\0')

311 
∑th
++;

312 i‡(
∑th
 - 
p
 >
MAXNAMELEN
)

313  -
E_BAD_PATH
;

314 
	`memmove
(
«me
, 
p
, 
∑th
 -Ö);

315 
«me
[
∑th
 - 
p
] = '\0';

316 
∑th
 = 
	`skù_¶ash
(path);

318 i‡(
dú
->
f_ty≥
 !
FTYPE_DIR
)

319  -
E_NOT_FOUND
;

321 i‡((
r
 = 
	`dú_lookup
(
dú
, 
«me
, &
f
)) < 0) {

322 i‡(
r
 =-
E_NOT_FOUND
 && *
∑th
 == '\0') {

323 i‡(
pdú
)

324 *
pdú
 = 
dú
;

325 i‡(
œ°ñem
)

326 
	`°r˝y
(
œ°ñem
, 
«me
);

327 *
pf
 = 0;

329  
r
;

333 i‡(
pdú
)

334 *
pdú
 = 
dú
;

335 *
pf
 = 
f
;

337 
	}
}

346 
	$fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
pf
)

348 
«me
[
MAXNAMELEN
];

349 
r
;

350 
Fûe
 *
dú
, *
f
;

352 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, &
dú
, &
f
, 
«me
)) == 0)

353  -
E_FILE_EXISTS
;

354 i‡(
r
 !-
E_NOT_FOUND
 || 
dú
 == 0)

355  
r
;

356 i‡(
	`dú_Æloc_fûe
(
dú
, &
f
) < 0)

357  
r
;

358 
	`°r˝y
(
f
->
f_«me
, 
«me
);

359 *
pf
 = 
f
;

360 
	`fûe_Êush
(
dú
);

362 
	}
}

367 
	$fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
pf
)

369  
	`wÆk_∑th
(
∑th
, 0, 
pf
, 0);

370 
	}
}

375 
ssize_t


376 
	$fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

378 
r
, 
bn
;

379 
off_t
 
pos
;

380 *
blk
;

382 i‡(
off£t
 >
f
->
f_size
)

385 
cou¡
 = 
	`MIN
(cou¡, 
f
->
f_size
 - 
off£t
);

387 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

388 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

389  
r
;

390 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

391 
	`memmove
(
buf
, 
blk
 + 
pos
 % 
BLKSIZE
, 
bn
);

392 
pos
 +
bn
;

393 
buf
 +
bn
;

396  
cou¡
;

397 
	}
}

404 
	$fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

406 
r
, 
bn
;

407 
off_t
 
pos
;

408 *
blk
;

411 i‡(
off£t
 + 
cou¡
 > 
f
->
f_size
)

412 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
off£t
 + 
cou¡
)) < 0)

413  
r
;

415 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

416 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

417  
r
;

418 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

419 
	`memmove
(
blk
 + 
pos
 % 
BLKSIZE
, 
buf
, 
bn
);

420 
pos
 +
bn
;

421 
buf
 +
bn
;

424  
cou¡
;

425 
	}
}

431 
	$fûe_‰ì_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
)

433 
r
;

434 
uöt32_t
 *
±r
;

436 i‡((
r
 = 
	`fûe_block_wÆk
(
f
, 
fûebno
, &
±r
, 0)) < 0)

437  
r
;

438 i‡(*
±r
) {

439 
	`‰ì_block
(*
±r
);

440 *
±r
 = 0;

443 
	}
}

455 
	$fûe_åunˇã_blocks
(
Fûe
 *
f
, 
off_t
 
√wsize
)

457 
r
;

458 
uöt32_t
 
bno
, 
ﬁd_nblocks
, 
√w_nblocks
;

460 
ﬁd_nblocks
 = (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE;

461 
√w_nblocks
 = (
√wsize
 + 
BLKSIZE
 - 1) / BLKSIZE;

462 
bno
 = 
√w_nblocks
; bnÿ< 
ﬁd_nblocks
; bno++)

463 i‡((
r
 = 
	`fûe_‰ì_block
(
f
, 
bno
)) < 0)

464 
	`˝rötf
("w¨nög: fûe_‰ì_block: %e", 
r
);

466 i‡(
√w_nblocks
 <
NDIRECT
 && 
f
->
f_ödúe˘
) {

467 
	`‰ì_block
(
f
->
f_ödúe˘
);

468 
f
->
f_ödúe˘
 = 0;

470 
	}
}

475 
	$fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
)

477 i‡(
f
->
f_size
 > 
√wsize
)

478 
	`fûe_åunˇã_blocks
(
f
, 
√wsize
);

479 
f
->
f_size
 = 
√wsize
;

480 
	`Êush_block
(
f
);

482 
	}
}

489 
	$fûe_Êush
(
Fûe
 *
f
)

491 
i
;

492 
uöt32_t
 *
pdiskbno
;

494 
i
 = 0; i < (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE; i++) {

495 i‡(
	`fûe_block_wÆk
(
f
, 
i
, &
pdiskbno
, 0) < 0 ||

496 
pdiskbno
 =
NULL
 || *pdiskbno == 0)

498 
	`Êush_block
(
	`diskaddr
(*
pdiskbno
));

501 
	`Êush_block
(
f
);

503 i‡(
f
->
f_ödúe˘
)

504 
	`Êush_block
(
	`diskaddr
(
f
->
f_ödúe˘
));

505 
	}
}

509 
	$fûe_ªmove
(c⁄° *
∑th
)

511 
r
;

512 
Fûe
 *
f
;

514 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, 0, &
f
, 0)) < 0)

515  
r
;

517 
	`fûe_åunˇã_blocks
(
f
, 0);

518 
f
->
f_«me
[0] = '\0';

519 
f
->
f_size
 = 0;

520 
	`Êush_block
(
f
);

523 
	}
}

527 
	$fs_sync
()

529 
i
;

530 
i
 = 1; i < 
su≥r
->
s_nblocks
; i++)

531 
	`Êush_block
(
	`diskaddr
(
i
));

532 
	}
}

	@fs/fs.h

1 
	~<öc/fs.h
>

2 
	~<öc/lib.h
>

4 
	#SECTSIZE
 512

5 
	#BLKSECTS
 (
BLKSIZE
 / 
SECTSIZE
)

6 

	)

9 
	#DISKMAP
 0x10000000

	)

12 
	#DISKSIZE
 0xC0000000

	)

14 
Su≥r
 *
	gsu≥r
;

15 
uöt32_t
 *
	gbôm≠
;

18 
boﬁ
 
ide_¥obe_disk1
();

19 
ide_£t_disk
(
diskno
);

20 
ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

21 
ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

24 * 
diskaddr
(
uöt32_t
 
blockno
);

25 
boﬁ
 
va_is_m≠≥d
(*
va
);

26 
boﬁ
 
va_is_dúty
(*
va
);

27 
Êush_block
(*
addr
);

28 
bc_öô
();

31 
fs_öô
();

32 
fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûe_blockno
, **
pblk
);

33 
fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
f
);

34 
fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
f
);

35 
ssize_t
 
fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

36 
fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

37 
fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
);

38 
fûe_Êush
(
Fûe
 *
f
);

39 
fûe_ªmove
(c⁄° *
∑th
);

40 
fs_sync
();

43 
boﬁ
 
block_is_‰ì
(
uöt32_t
 
blockno
);

44 
Æloc_block
();

47 
fs_ã°
();

	@fs/fsformat.c

6 
	#off_t
 
xxx_off_t


	)

7 
	#boﬁ
 
xxx_boﬁ


	)

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<öây≥s.h
>

12 
	~<°d¨g.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<sys/mm™.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/ty≥s.h
>

20 #unde‡
off_t


21 #unde‡
boﬁ


25 
	#JOS_INC_TYPES_H


	)

27 
uöt32_t
 
	tphyßddr_t
;

28 
uöt32_t
 
	toff_t
;

29 
	tboﬁ
;

31 
	~<öc/mmu.h
>

32 
	~<öc/fs.h
>

34 
	#ROUNDUP
(
n
, 
v
Ë(“Ë- 1 + (vË- (“Ë- 1Ë% (v))

	)

35 
	#MAX_DIR_ENTS
 128

	)

37 
	sDú


39 
Fûe
 *
	mf
;

40 
Fûe
 *
	míts
;

41 
	mn
;

44 
uöt32_t
 
	gnblocks
;

45 *
	gdiskm≠
, *
	gdiskpos
;

46 
Su≥r
 *
	gsu≥r
;

47 
uöt32_t
 *
	gbôm≠
;

50 
	$∑nic
(c⁄° *
fmt
, ...)

52 
va_li°
 
≠
;

54 
	`va_°¨t
(
≠
, 
fmt
);

55 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

56 
	`va_íd
(
≠
);

57 
	`Âutc
('\n', 
°dîr
);

58 
	`ab‹t
();

59 
	}
}

62 
	$ªadn
(
f
, *
out
, 
size_t
 
n
)

64 
size_t
 
p
 = 0;

65 
p
 < 
n
) {

66 
size_t
 
m
 = 
	`ªad
(
f
, 
out
 + 
p
, 
n
 -Ö);

67 i‡(
m
 < 0)

68 
	`∑nic
("ªad: %s", 
	`°ªº‹
(
î∫o
));

69 i‡(
m
 == 0)

70 
	`∑nic
("read: Unexpected EOF");

71 
p
 +
m
;

73 
	}
}

75 
uöt32_t


76 
	$blockof
(*
pos
)

78  ((*)
pos
 - 
diskm≠
Ë/ 
BLKSIZE
;

79 
	}
}

82 
	$Æloc
(
uöt32_t
 
byãs
)

84 *
°¨t
 = 
diskpos
;

85 
diskpos
 +
	`ROUNDUP
(
byãs
, 
BLKSIZE
);

86 i‡(
	`blockof
(
diskpos
Ë>
nblocks
)

87 
	`∑nic
("out of disk blocks");

88  
°¨t
;

89 
	}
}

92 
	$›ídisk
(c⁄° *
«me
)

94 
r
, 
diskfd
, 
nbôblocks
;

96 i‡((
diskfd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_CREAT
, 0666)) < 0)

97 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

99 i‡((
r
 = 
	`·runˇã
(
diskfd
, 0)) < 0

100 || (
r
 = 
	`·runˇã
(
diskfd
, 
nblocks
 * 
BLKSIZE
)) < 0)

101 
	`∑nic
("åunˇã %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

103 i‡((
diskm≠
 = 
	`mm≠
(
NULL
, 
nblocks
 * 
BLKSIZE
, 
PROT_READ
|
PROT_WRITE
,

104 
MAP_SHARED
, 
diskfd
, 0)Ë=
MAP_FAILED
)

105 
	`∑nic
("mm≠ %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

107 
	`˛o£
(
diskfd
);

109 
diskpos
 = 
diskm≠
;

110 
	`Æloc
(
BLKSIZE
);

111 
su≥r
 = 
	`Æloc
(
BLKSIZE
);

112 
su≥r
->
s_magic
 = 
FS_MAGIC
;

113 
su≥r
->
s_nblocks
 = 
nblocks
;

114 
su≥r
->
s_roŸ
.
f_ty≥
 = 
FTYPE_DIR
;

115 
	`°r˝y
(
su≥r
->
s_roŸ
.
f_«me
, "/");

117 
nbôblocks
 = (
nblocks
 + 
BLKBITSIZE
 - 1) / BLKBITSIZE;

118 
bôm≠
 = 
	`Æloc
(
nbôblocks
);

119 
	`mem£t
(
bôm≠
, 0xFF, 
nbôblocks
 * 
BLKSIZE
);

120 
	}
}

123 
	$föishdisk
()

125 
r
, 
i
;

127 
i
 = 0; i < 
	`blockof
(
diskpos
); ++i)

128 
bôm≠
[
i
/32] &= ~(1<<(i%32));

130 i‡((
r
 = 
	`msync
(
diskm≠
, 
nblocks
 * 
BLKSIZE
, 
MS_SYNC
)) < 0)

131 
	`∑nic
("msync: %s", 
	`°ªº‹
(
î∫o
));

132 
	}
}

135 
	$föishfûe
(
Fûe
 *
f
, 
uöt32_t
 
°¨t
, uöt32_à
Àn
)

137 
i
;

138 
f
->
f_size
 = 
Àn
;

139 
Àn
 = 
	`ROUNDUP
÷í, 
BLKSIZE
);

140 
i
 = 0; i < 
Àn
 / 
BLKSIZE
 && i < 
NDIRECT
; ++i)

141 
f
->
f_dúe˘
[
i
] = 
°¨t
 + i;

142 i‡(
i
 =
NDIRECT
) {

143 
uöt32_t
 *
öd
 = 
	`Æloc
(
BLKSIZE
);

144 
f
->
f_ödúe˘
 = 
	`blockof
(
öd
);

145 ; 
i
 < 
Àn
 / 
BLKSIZE
; ++i)

146 
öd
[
i
 - 
NDIRECT
] = 
°¨t
 + i;

148 
	}
}

151 
	$°¨tdú
(
Fûe
 *
f
, 
Dú
 *
dout
)

153 
dout
->
f
 = f;

154 
dout
->
íts
 = 
	`mÆloc
(
MAX_DIR_ENTS
 *  *dout->ents);

155 
dout
->
n
 = 0;

156 
	}
}

158 
Fûe
 *

159 
	$dúadd
(
Dú
 *
d
, 
uöt32_t
 
ty≥
, c⁄° *
«me
)

161 
Fûe
 *
out
 = &
d
->
íts
[d->
n
++];

162 i‡(
d
->
n
 > 
MAX_DIR_ENTS
)

163 
	`∑nic
("too many directoryÉntries");

164 
	`°r˝y
(
out
->
f_«me
, 
«me
);

165 
out
->
f_ty≥
 = 
ty≥
;

166  
out
;

167 
	}
}

170 
	$föishdú
(
Dú
 *
d
)

172 
size
 = 
d
->
n
 * (
Fûe
);

173 
Fûe
 *
°¨t
 = 
	`Æloc
(
size
);

174 
	`memmove
(
°¨t
, 
d
->
íts
, 
size
);

175 
	`föishfûe
(
d
->
f
, 
	`blockof
(
°¨t
), 
	`ROUNDUP
(
size
, 
BLKSIZE
));

176 
	`‰ì
(
d
->
íts
);

177 
d
->
íts
 = 
NULL
;

178 
	}
}

181 
	$wrôefûe
(
Dú
 *
dú
, c⁄° *
«me
)

183 
r
, 
fd
;

184 
Fûe
 *
f
;

185 
°©
 
°
;

186 c⁄° *
œ°
;

187 *
°¨t
;

189 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0)

190 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

191 i‡((
r
 = 
	`f°©
(
fd
, &
°
)) < 0)

192 
	`∑nic
("°© %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

193 i‡(!
	`S_ISREG
(
°
.
°_mode
))

194 
	`∑nic
("%†i†nŸáÑeguœ∏fûe", 
«me
);

195 i‡(
°
.
°_size
 >
MAXFILESIZE
)

196 
	`∑nic
("%†toÿœrge", 
«me
);

198 
œ°
 = 
	`°ºchr
(
«me
, '/');

199 i‡(
œ°
)

200 
œ°
++;

202 
œ°
 = 
«me
;

204 
f
 = 
	`dúadd
(
dú
, 
FTYPE_REG
, 
œ°
);

205 
°¨t
 = 
	`Æloc
(
°
.
°_size
);

206 
	`ªadn
(
fd
, 
°¨t
, 
°
.
°_size
);

207 
	`föishfûe
(
f
, 
	`blockof
(
°¨t
), 
°
.
°_size
);

208 
	`˛o£
(
fd
);

209 
	}
}

212 
	$ußge
()

214 
	`Ârötf
(
°dîr
, "Usage: fsformat fs.img NBLOCKS files...\n");

215 
	`exô
(2);

216 
	}
}

219 
	$maö
(
¨gc
, **
¨gv
)

221 
i
;

222 *
s
;

223 
Dú
 
roŸ
;

225 
	`as£π
(
BLKSIZE
 % (
Fûe
) == 0);

227 i‡(
¨gc
 < 3)

228 
	`ußge
();

230 
nblocks
 = 
	`°πﬁ
(
¨gv
[2], &
s
, 0);

231 i‡(*
s
 || s =
¨gv
[2] || 
nblocks
 < 2 ||Çblocks > 1024)

232 
	`ußge
();

234 
	`›ídisk
(
¨gv
[1]);

236 
	`°¨tdú
(&
su≥r
->
s_roŸ
, &
roŸ
);

237 
i
 = 3; i < 
¨gc
; i++)

238 
	`wrôefûe
(&
roŸ
, 
¨gv
[
i
]);

239 
	`föishdú
(&
roŸ
);

241 
	`föishdisk
();

243 
	}
}

	@fs/ide.c

7 
	~"fs.h
"

8 
	~<öc/x86.h
>

10 
	#IDE_BSY
 0x80

	)

11 
	#IDE_DRDY
 0x40

	)

12 
	#IDE_DF
 0x20

	)

13 
	#IDE_ERR
 0x01

	)

15 
	gdiskno
 = 1;

18 
	$ide_waô_ªady
(
boﬁ
 
check_îr‹
)

20 
r
;

22 ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

25 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

28 
	}
}

30 
boﬁ


31 
	$ide_¥obe_disk1
()

33 
r
, 
x
;

36 
	`ide_waô_ªady
(0);

39 
	`outb
(0x1F6, 0xE0 | (1<<4));

42 
x
 = 0;

43 
x
 < 1000 && ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DF
|
IDE_ERR
)) != 0;

44 
x
++)

48 
	`outb
(0x1F6, 0xE0 | (0<<4));

50 
	`˝rötf
("Devi˚ 1Öª£n˚: %d\n", (
x
 < 1000));

51  (
x
 < 1000);

52 
	}
}

55 
	$ide_£t_disk
(
d
)

57 i‡(
d
 != 0 && d != 1)

58 
	`∑nic
("bad diskÇumber");

59 
diskno
 = 
d
;

60 
	}
}

63 
	$ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
)

65 
r
;

67 
	`as£π
(
n£cs
 <= 256);

69 
	`ide_waô_ªady
(0);

71 
	`outb
(0x1F2, 
n£cs
);

72 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

73 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

74 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

75 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

76 
	`outb
(0x1F7, 0x20);

78 ; 
n£cs
 > 0;Ç£cs--, 
d°
 +
SECTSIZE
) {

79 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

80  
r
;

81 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

85 
	}
}

88 
	$ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
)

90 
r
;

92 
	`as£π
(
n£cs
 <= 256);

94 
	`ide_waô_ªady
(0);

96 
	`outb
(0x1F2, 
n£cs
);

97 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

98 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

99 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

100 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

101 
	`outb
(0x1F7, 0x30);

103 ; 
n£cs
 > 0;Ç£cs--, 
§c
 +
SECTSIZE
) {

104 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

105  
r
;

106 
	`out¶
(0x1F0, 
§c
, 
SECTSIZE
/4);

110 
	}
}

	@fs/serv.c

6 
	~<öc/x86.h
>

7 
	~<öc/°rög.h
>

9 
	~"fs.h
"

12 
	#debug
 0

	)

32 
	sO≥nFûe
 {

33 
uöt32_t
 
	mo_fûeid
;

34 
Fûe
 *
	mo_fûe
;

35 
	mo_mode
;

36 
Fd
 *
	mo_fd
;

40 
	#MAXOPEN
 1024

	)

41 
	#FILEVA
 0xD0000000

	)

44 
O≥nFûe
 
	g›íèb
[
MAXOPEN
] = {

49 
Fsùc
 *
	gf§eq
 = (Fsipc *)0x0ffff000;

52 
	$£rve_öô
()

54 
i
;

55 
uöçå_t
 
va
 = 
FILEVA
;

56 
i
 = 0; i < 
MAXOPEN
; i++) {

57 
›íèb
[
i
].
o_fûeid
 = i;

58 
›íèb
[
i
].
o_fd
 = (
Fd
*Ë
va
;

59 
va
 +
PGSIZE
;

61 
	}
}

65 
	$›ífûe_Æloc
(
O≥nFûe
 **
o
)

67 
i
, 
r
;

70 
i
 = 0; i < 
MAXOPEN
; i++) {

71 
	`∑gîef
(
›íèb
[
i
].
o_fd
)) {

73 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
›íèb
[
i
].
o_fd
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

74  
r
;

77 
›íèb
[
i
].
o_fûeid
 +
MAXOPEN
;

78 *
o
 = &
›íèb
[
i
];

79 
	`mem£t
(
›íèb
[
i
].
o_fd
, 0, 
PGSIZE
);

80  (*
o
)->
o_fûeid
;

83  -
E_MAX_OPEN
;

84 
	}
}

88 
	$›ífûe_lookup
(
ívid_t
 
ívid
, 
uöt32_t
 
fûeid
, 
O≥nFûe
 **
po
)

90 
O≥nFûe
 *
o
;

92 
o
 = &
›íèb
[
fûeid
 % 
MAXOPEN
];

93 i‡(
	`∑gîef
(
o
->
o_fd
Ë=1 || o->
o_fûeid
 !
fûeid
)

94  -
E_INVAL
;

95 *
po
 = 
o
;

97 
	}
}

103 
	$£rve_›í
(
ívid_t
 
ívid
, 
F§eq_›í
 *
ªq
,

104 **
pg_°‹e
, *
≥rm_°‹e
)

106 
∑th
[
MAXPATHLEN
];

107 
Fûe
 *
f
;

108 
fûeid
;

109 
r
;

110 
O≥nFûe
 *
o
;

112 i‡(
debug
)

113 
	`˝rötf
("£rve_›í %08x %†0x%x\n", 
ívid
, 
ªq
->
ªq_∑th
,Ñeq->
ªq_omode
);

116 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

117 
∑th
[
MAXPATHLEN
-1] = 0;

120 i‡((
r
 = 
	`›ífûe_Æloc
(&
o
)) < 0) {

121 i‡(
debug
)

122 
	`˝rötf
("›ífûe_Ælo¯Áûed: %e", 
r
);

123  
r
;

125 
fûeid
 = 
r
;

128 i‡(
ªq
->
ªq_omode
 & 
O_CREAT
) {

129 i‡((
r
 = 
	`fûe_¸óã
(
∑th
, &
f
)) < 0) {

130 i‡(!(
ªq
->
ªq_omode
 & 
O_EXCL
Ë&& 
r
 =-
E_FILE_EXISTS
)

131 
åy_›í
;

132 i‡(
debug
)

133 
	`˝rötf
("fûe_¸óã faûed: %e", 
r
);

134  
r
;

137 
åy_›í
:

138 i‡((
r
 = 
	`fûe_›í
(
∑th
, &
f
)) < 0) {

139 i‡(
debug
)

140 
	`˝rötf
("fûe_›í faûed: %e", 
r
);

141  
r
;

146 i‡(
ªq
->
ªq_omode
 & 
O_TRUNC
) {

147 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0) {

148 i‡(
debug
)

149 
	`˝rötf
("fûe_£t_sizêÁûed: %e", 
r
);

150  
r
;

155 
o
->
o_fûe
 = 
f
;

158 
o
->
o_fd
->
fd_fûe
.
id
 = o->
o_fûeid
;

159 
o
->
o_fd
->
fd_omode
 = 
ªq
->
ªq_omode
 & 
O_ACCMODE
;

160 
o
->
o_fd
->
fd_dev_id
 = 
devfûe
.
dev_id
;

161 
o
->
o_mode
 = 
ªq
->
ªq_omode
;

163 i‡(
debug
)

164 
	`˝rötf
("£ndög suc˚ss,Öagê%08x\n", (
uöçå_t
Ë
o
->
o_fd
);

167 *
pg_°‹e
 = 
o
->
o_fd
;

168 *
≥rm_°‹e
 = 
PTE_P
|
PTE_U
|
PTE_W
;

170 
	}
}

175 
	$£rve_£t_size
(
ívid_t
 
ívid
, 
F§eq_£t_size
 *
ªq
)

177 
O≥nFûe
 *
o
;

178 
r
;

180 i‡(
debug
)

181 
	`˝rötf
("£rve_£t_sizê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_size
);

188 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

189  
r
;

193  
	`fûe_£t_size
(
o
->
o_fûe
, 
ªq
->
ªq_size
);

194 
	}
}

201 
	$£rve_ªad
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

203 
F§eq_ªad
 *
ªq
 = &
ùc
->
ªad
;

204 
F§ë_ªad
 *
ªt
 = &
ùc
->
ªadRë
;

206 i‡(
debug
)

207 
	`˝rötf
("£rve_ªad %08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

218 
r
;

219 
O≥nFûe
 *
o
;

220 
size_t
 
cou¡
;

221 
ªtcou¡
;

222 if((
r
=
	`›ífûe_lookup
(
ívid
,
ªq
->
ªq_fûeid
,&
o
))<0){

223 if(
debug
)

224 
	`˝rötf
("›ífûe_looku∞Áûed: %e\n",
r
);

225  
r
;

227 if(
ªq
->
ªq_n
>
PGSIZE
)

228 
cou¡
=
PGSIZE
;

230 
cou¡
=
ªq
->
ªq_n
;

231 
ªtcou¡
=
	`fûe_ªad
(
o
->
o_fûe
,(*)
ªt
->
ªt_buf
,
cou¡
,o->
o_fd
->
fd_off£t
);

232 
o
->
o_fd
->
fd_off£t
+=
ªtcou¡
;

233 if(
debug
)

234 
	`˝rötf
("£rve_ªad:ªt_buf=%s\n",
ªt
->
ªt_buf
);

235  
ªtcou¡
;

237 
	}
}

244 
	$£rve_wrôe
(
ívid_t
 
ívid
, 
F§eq_wrôe
 *
ªq
)

246 i‡(
debug
)

247 
	`˝rötf
("£rve_wrôê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

250 
r
;

251 
O≥nFûe
 *
o
;

252 
size_t
 
cou¡
;

253 
ªtcou¡
;

254 if((
r
=
	`›ífûe_lookup
(
ívid
,
ªq
->
ªq_fûeid
,&
o
))<0){

255  
r
;

257 
cou¡
=
ªq
->
ªq_n
;

258 
ªtcou¡
=
	`fûe_wrôe
(
o
->
o_fûe
,(*)
ªq
->
ªq_buf
,
cou¡
,o->
o_fd
->
fd_off£t
);

259 
o
->
o_fd
->
fd_off£t
+=
ªtcou¡
;

260  
ªtcou¡
;

262 
	}
}

267 
	$£rve_°©
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

269 
F§eq_°©
 *
ªq
 = &
ùc
->
°©
;

270 
F§ë_°©
 *
ªt
 = &
ùc
->
°©Rë
;

271 
O≥nFûe
 *
o
;

272 
r
;

274 i‡(
debug
)

275 
	`˝rötf
("£rve_°© %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

277 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

278  
r
;

280 
	`°r˝y
(
ªt
->
ªt_«me
, 
o
->
o_fûe
->
f_«me
);

281 
ªt
->
ªt_size
 = 
o
->
o_fûe
->
f_size
;

282 
ªt
->
ªt_isdú
 = (
o
->
o_fûe
->
f_ty≥
 =
FTYPE_DIR
);

284 
	}
}

288 
	$£rve_Êush
(
ívid_t
 
ívid
, 
F§eq_Êush
 *
ªq
)

290 
O≥nFûe
 *
o
;

291 
r
;

293 i‡(
debug
)

294 
	`˝rötf
("£rve_Êush %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

296 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

297  
r
;

298 
	`fûe_Êush
(
o
->
o_fûe
);

300 
	}
}

304 
	$£rve_ªmove
(
ívid_t
 
ívid
, 
F§eq_ªmove
 *
ªq
)

306 
∑th
[
MAXPATHLEN
];

307 
r
;

309 i‡(
debug
)

310 
	`˝rötf
("£rve_ªmovê%08x %s\n", 
ívid
, 
ªq
->
ªq_∑th
);

316 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

317 
∑th
[
MAXPATHLEN
-1] = 0;

320  
	`fûe_ªmove
(
∑th
);

321 
	}
}

325 
	$£rve_sync
(
ívid_t
 
ívid
, 
Fsùc
 *
ªq
)

327 
	`fs_sync
();

329 
	}
}

331 (*
	tfsh™dÀr
)(
	tívid_t
 
	tívid
, 
	tFsùc
 *
	tªq
);

333 
fsh™dÀr
 
h™dÀrs
[] = {

336 [
FSREQ_SET_SIZE
] = (
fsh™dÀr
)
£rve_£t_size
,

337 [
FSREQ_READ
] = 
£rve_ªad
,

338 [
FSREQ_WRITE
] = (
fsh™dÀr
)
£rve_wrôe
,

339 [
FSREQ_STAT
] = 
£rve_°©
,

340 [
FSREQ_FLUSH
] = (
fsh™dÀr
)
£rve_Êush
,

341 [
FSREQ_REMOVE
] = (
fsh™dÀr
)
£rve_ªmove
,

342 [
FSREQ_SYNC
] = 
£rve_sync


343 
	}
};

344 
	#NHANDLERS
 ((
h™dÀrs
)/(h™dÀrs[0]))

	)

347 
	$£rve
()

349 
uöt32_t
 
ªq
, 
whom
;

350 
≥rm
, 
r
;

351 *
pg
;

354 
≥rm
 = 0;

356 
ªq
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, 
f§eq
, &
≥rm
);

357 i‡(
debug
)

358 
	`˝rötf
("fsÑeq %d from %08x [page %08x: %s]\n",

359 
ªq
, 
whom
, 
v±
[
	`VPN
(
f§eq
)], fsreq);

362 i‡(!(
≥rm
 & 
PTE_P
)) {

363 
	`˝rötf
("InvalidÑequest from %08x:ÇoárgumentÖage\n",

364 
whom
);

368 
pg
 = 
NULL
;

369 i‡(
ªq
 =
FSREQ_OPEN
) {

370 
r
 = 
	`£rve_›í
(
whom
, (
F§eq_›í
*)
f§eq
, &
pg
, &
≥rm
);

371 } i‡(
ªq
 < 
NHANDLERS
 && 
h™dÀrs
[req]) {

372 
r
 = 
h™dÀrs
[
ªq
](
whom
, 
f§eq
);

374 
	`˝rötf
("InvÆidÑeque° codê%d from %08x\n", 
whom
, 
ªq
);

375 
r
 = -
E_INVAL
;

377 
	`ùc_£nd
(
whom
, 
r
, 
pg
, 
≥rm
);

378 
	`sys_∑ge_unm≠
(0, 
f§eq
);

380 
	}
}

383 
	$umaö
()

385 
	`°©ic_as£π
((
Fûe
) == 256);

386 
bö¨y«me
 = "fs";

387 
	`˝rötf
("FS isÑunning\n");

390 
	`outw
(0x8A00, 0x8A00);

391 
	`˝rötf
("FS can do I/O\n");

393 
	`£rve_öô
();

394 
	`fs_öô
();

395 
	`fs_ã°
();

397 
	`£rve
();

398 
	}
}

	@fs/test.c

2 
	~<öc/x86.h
>

3 
	~<öc/°rög.h
>

5 
	~"fs.h
"

7 *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

10 
	$fs_ã°
()

12 
Fûe
 *
f
;

13 
r
;

14 *
blk
;

15 
uöt32_t
 *
bôs
;

18 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
PGSIZE
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

19 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

20 
bôs
 = (
uöt32_t
*Ë
PGSIZE
;

21 
	`memmove
(
bôs
, 
bôm≠
, 
PGSIZE
);

23 i‡((
r
 = 
	`Æloc_block
()) < 0)

24 
	`∑nic
("Æloc_block: %e", 
r
);

26 
	`as£π
(
bôs
[
r
/32] & (1 << (r%32)));

28 
	`as£π
(!(
bôm≠
[
r
/32] & (1 << (r%32))));

29 
	`˝rötf
("alloc_block is good\n");

31 i‡((
r
 = 
	`fûe_›í
("/nŸ-found", &
f
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

32 
	`∑nic
("fûe_›í /nŸ-found: %e", 
r
);

33 i‡(
r
 == 0)

34 
	`∑nic
("file_open /not-found succeeded!");

35 i‡((
r
 = 
	`fûe_›í
("/√wmŸd", &
f
)) < 0)

36 
	`∑nic
("fûe_›í /√wmŸd: %e", 
r
);

37 
	`˝rötf
("file_open is good\n");

39 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

40 
	`∑nic
("fûe_gë_block: %e", 
r
);

42 i‡(
	`°rcmp
(
blk
, 
msg
) != 0)

43 
	`∑nic
("file_get_blockÑeturned wrong data");

44 
	`˝rötf
("file_get_block is good\n");

46 *(vﬁ©ûê*)
blk
 = *(volatile *)blk;

47 
	`as£π
((
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

48 
	`fûe_Êush
(
f
);

49 
	`as£π
(!(
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

50 
	`˝rötf
("file_flush is good\n");

52 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0)

53 
	`∑nic
("fûe_£t_size: %e", 
r
);

54 
	`as£π
(
f
->
f_dúe˘
[0] == 0);

55 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

56 
	`˝rötf
("file_truncate is good\n");

58 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
	`°æí
(
msg
))) < 0)

59 
	`∑nic
("fûe_£t_sizê2: %e", 
r
);

60 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

62 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

63 
	`∑nic
("fûe_gë_block 2: %e", 
r
);

64 
	`°r˝y
(
blk
, 
msg
);

65 
	`as£π
((
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

66 
	`fûe_Êush
(
f
);

67 
	`as£π
(!(
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

68 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

69 
	`˝rötf
("fileÑewrite is good\n");

70 
	}
}

	@inc/args.h

74 *
¨gv0
;

76 
	#_ARGSET
(
x
Ë(xË0

	)

77 
	#_ARGUSED
(
x
Ëi‡(xË{ } 

	)

79 
	#ARGBEGIN
 (
¨gv
?0:◊rgv=(*)&
¨gc
)),(
¨gv0
?0:(argv0=*argv)),\

80 
¨gv
++,
¨gc
--;\

81 
¨gv
[0] &&árgv[0][0]=='-' &&árgv[0][1];\

82 
¨gc
--, 
¨gv
++) {\

83 *
_¨gs
, *
_¨gt
;\

84 
_¨gc
;\

85 
_¨gs
 = &
¨gv
[0][1];\

86 if(
_¨gs
[0]=='-' && _args[1]==0){\

87 
¨gc
--; 
¨gv
++; ;\

89 
_¨gc
 = 0;\

90 *
_¨gs
 && (
_¨gc
 = *_args++))\

91 
_¨gc
)

	)

92 
	#ARGEND
 
	`_ARGSET
(
_¨gt
);
	`_ARGUSED
(_¨gt);_ARGUSED(
_¨gc
);_ARGUSED(
_¨gs
);}_ARGUSED(
¨gv
);_ARGUSED(
¨gc
);

	)

93 
	#ARGF
(Ë(
_¨gt
=
_¨gs
, _args="",\

94 (*
_¨gt
? _¨gt: 
¨gv
[1]? (
¨gc
--, *++¨gv): 0))

	)

95 
	#EARGF
(
x
Ë(
_¨gt
=
_¨gs
, _args="",\

96 (*
_¨gt
? _¨gt: 
¨gv
[1]? (
¨gc
--, *++¨gv): ((
x
), 
	`ab‹t
(), (*)0)))

	)

98 
	#ARGC
(Ë
_¨gc


	)

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	sElf
 {

7 
uöt32_t
 
	me_magic
;

8 
uöt8_t
 
	me_ñf
[12];

9 
uöt16_t
 
	me_ty≥
;

10 
uöt16_t
 
	me_machöe
;

11 
uöt32_t
 
	me_vîsi⁄
;

12 
uöt32_t
 
	me_íåy
;

13 
uöt32_t
 
	me_phoff
;

14 
uöt32_t
 
	me_shoff
;

15 
uöt32_t
 
	me_Êags
;

16 
uöt16_t
 
	me_ehsize
;

17 
uöt16_t
 
	me_phítsize
;

18 
uöt16_t
 
	me_phnum
;

19 
uöt16_t
 
	me_shítsize
;

20 
uöt16_t
 
	me_shnum
;

21 
uöt16_t
 
	me_sh°∫dx
;

24 
	sProghdr
 {

25 
uöt32_t
 
	mp_ty≥
;

26 
uöt32_t
 
	mp_off£t
;

27 
uöt32_t
 
	mp_va
;

28 
uöt32_t
 
	mp_∑
;

29 
uöt32_t
 
	mp_fûesz
;

30 
uöt32_t
 
	mp_memsz
;

31 
uöt32_t
 
	mp_Êags
;

32 
uöt32_t
 
	mp_Æign
;

35 
	sSe˘hdr
 {

36 
uöt32_t
 
	msh_«me
;

37 
uöt32_t
 
	msh_ty≥
;

38 
uöt32_t
 
	msh_Êags
;

39 
uöt32_t
 
	msh_addr
;

40 
uöt32_t
 
	msh_off£t
;

41 
uöt32_t
 
	msh_size
;

42 
uöt32_t
 
	msh_lök
;

43 
uöt32_t
 
	msh_öfo
;

44 
uöt32_t
 
	msh_addølign
;

45 
uöt32_t
 
	msh_ítsize
;

49 
	#ELF_PROG_LOAD
 1

	)

52 
	#ELF_PROG_FLAG_EXEC
 1

	)

53 
	#ELF_PROG_FLAG_WRITE
 2

	)

54 
	#ELF_PROG_FLAG_READ
 4

	)

57 
	#ELF_SHT_NULL
 0

	)

58 
	#ELF_SHT_PROGBITS
 1

	)

59 
	#ELF_SHT_SYMTAB
 2

	)

60 
	#ELF_SHT_STRTAB
 3

	)

63 
	#ELF_SHN_UNDEF
 0

	)

	@inc/env.h

3 #i‚de‡
JOS_INC_ENV_H


4 
	#JOS_INC_ENV_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<öc/queue.h
>

8 
	~<öc/å≠.h
>

9 
	~<öc/memœyout.h
>

11 
öt32_t
 
	tívid_t
;

29 
	#LOG2NENV
 10

	)

30 
	#NENV
 (1 << 
LOG2NENV
)

	)

31 
	#ENVX
(
ívid
Ë(”nvidË& (
NENV
 - 1))

	)

34 
	#ENV_FREE
 0

	)

35 
	#ENV_RUNNABLE
 1

	)

36 
	#ENV_NOT_RUNNABLE
 2

	)

38 
	sEnv
 {

39 
Tøp‰ame
 
	mív_tf
;

40 
LIST_ENTRY
(
Env
Ë
	mív_lök
;

41 
ívid_t
 
	mív_id
;

42 
ívid_t
 
	mív_∑ª¡_id
;

43 
	mív_°©us
;

44 
uöt32_t
 
	mív_runs
;

47 
pde_t
 *
	mív_pgdú
;

48 
phyßddr_t
 
	mív_¸3
;

51 *
	mív_pgÁu…_upˇŒ
;

54 
boﬁ
 
	mív_ùc_ªcvög
;

55 *
	mív_ùc_d°va
;

56 
uöt32_t
 
	mív_ùc_vÆue
;

57 
ívid_t
 
	mív_ùc_‰om
;

58 
	mív_ùc_≥rm
;

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

7 
	#E_UNSPECIFIED
 1

8 
	#E_BAD_ENV
 2

10 
	#E_INVAL
 3

11 
	#E_NO_MEM
 4

12 
	#E_NO_FREE_ENV
 5

14 
	#E_FAULT
 6

15 

	)

16 
	#E_IPC_NOT_RECV
 7

17 
	#E_EOF
 8

18 

	)

20 
	#E_NO_DISK
 9

21 
	#E_MAX_OPEN
 10

22 
	#E_NOT_FOUND
 11

23 
	#E_BAD_PATH
 12

24 
	#E_FILE_EXISTS
 13

25 
	#E_NOT_EXEC
 14

26 
	#E_NOT_SUPP
 15

27 

	)

28 
	#MAXERROR
 15

	)

	@inc/fd.h

5 #i‚de‡
JOS_INC_FD_H


6 
	#JOS_INC_FD_H


	)

8 
	~<öc/ty≥s.h
>

9 
	~<öc/fs.h
>

12 
	gFd
;

13 
	gSèt
;

14 
	gDev
;

16 
	sDev
 {

17 
	mdev_id
;

18 *
	mdev_«me
;

19 
ssize_t
 (*
dev_ªad
)(
Fd
 *
	mfd
, *
	mbuf
, 
size_t
 
	mÀn
);

20 
ssize_t
 (*
dev_wrôe
)(
Fd
 *
	mfd
, c⁄° *
	mbuf
, 
size_t
 
	mÀn
);

21 (*
	mdev_˛o£
)(
Fd
 *
	mfd
);

22 (*
	mdev_°©
)(
Fd
 *
	mfd
, 
Sèt
 *
	m°©
);

23 (*
	mdev_åunc
)(
Fd
 *
	mfd
, 
off_t
 
	mÀngth
);

26 
	sFdFûe
 {

27 
	mid
;

29 
	sFdSock
 {

30 
	msockid
;

32 
	sFd
 {

33 
	mfd_dev_id
;

34 
off_t
 
	mfd_off£t
;

35 
	mfd_omode
;

38 
FdFûe
 
	mfd_fûe
;

39 
FdSock
 
	mfd_sock
;

43 
	sSèt
 {

44 
	m°_«me
[
MAXNAMELEN
];

45 
off_t
 
	m°_size
;

46 
	m°_isdú
;

47 
Dev
 *
	m°_dev
;

50 * 
fd2d©a
(
Fd
 *
fd
);

51 
fd2num
(
Fd
 *
fd
);

52 
fd_Æloc
(
Fd
 **
fd_°‹e
);

53 
fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
);

54 
fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
);

55 
dev_lookup
(
devid
, 
Dev
 **
dev_°‹e
);

57 
Dev
 
devfûe
;

58 
Dev
 
devsock
;

	@inc/fs.h

3 #i‚de‡
JOS_INC_FS_H


4 
	#JOS_INC_FS_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<öc/mmu.h
>

12 
	#BLKSIZE
 
PGSIZE


	)

13 
	#BLKBITSIZE
 (
BLKSIZE
 * 8)

	)

17 
	#MAXNAMELEN
 128

	)

20 
	#MAXPATHLEN
 1024

	)

23 
	#NDIRECT
 10

	)

25 
	#NINDIRECT
 (
BLKSIZE
 / 4)

	)

27 
	#MAXFILESIZE
 ((
NDIRECT
 + 
NINDIRECT
Ë* 
BLKSIZE
)

	)

29 
	sFûe
 {

30 
	mf_«me
[
MAXNAMELEN
];

31 
off_t
 
	mf_size
;

32 
uöt32_t
 
	mf_ty≥
;

36 
uöt32_t
 
	mf_dúe˘
[
NDIRECT
];

37 
uöt32_t
 
	mf_ödúe˘
;

41 
uöt8_t
 
	mf_∑d
[256 - 
MAXNAMELEN
 - 8 - 4*
NDIRECT
 - 4];

42 } 
__©åibuã__
((
∑cked
));

45 
	#BLKFILES
 (
BLKSIZE
 / (
Fûe
))

	)

48 
	#FTYPE_REG
 0

49 
	#FTYPE_DIR
 1

50 

	)

54 
	#FS_MAGIC
 0x4A0530AE

55 

	)

56 
	sSu≥r
 {

57 
uöt32_t
 
	ms_magic
;

58 
uöt32_t
 
	ms_nblocks
;

59 
Fûe
 
	ms_roŸ
;

64 
	mFSREQ_OPEN
 = 1,

65 
	mFSREQ_SET_SIZE
,

67 
	mFSREQ_READ
,

68 
	mFSREQ_WRITE
,

70 
	mFSREQ_STAT
,

71 
	mFSREQ_FLUSH
,

72 
	mFSREQ_REMOVE
,

73 
	mFSREQ_SYNC


76 
	uFsùc
 {

77 
	sF§eq_›í
 {

78 
	mªq_∑th
[
MAXPATHLEN
];

79 
	mªq_omode
;

80 } 
	m›í
;

81 
	sF§eq_£t_size
 {

82 
	mªq_fûeid
;

83 
off_t
 
	mªq_size
;

84 } 
	m£t_size
;

85 
	sF§eq_ªad
 {

86 
	mªq_fûeid
;

87 
size_t
 
	mªq_n
;

88 } 
	mªad
;

89 
	sF§ë_ªad
 {

90 
	mªt_buf
[
PGSIZE
];

91 } 
	mªadRë
;

92 
	sF§eq_wrôe
 {

93 
	mªq_fûeid
;

94 
size_t
 
	mªq_n
;

95 
	mªq_buf
[
PGSIZE
 - ((Ë+ (
size_t
))];

96 } 
	mwrôe
;

97 
	sF§eq_°©
 {

98 
	mªq_fûeid
;

99 } 
	m°©
;

100 
	sF§ë_°©
 {

101 
	mªt_«me
[
MAXNAMELEN
];

102 
off_t
 
	mªt_size
;

103 
	mªt_isdú
;

104 } 
	m°©Rë
;

105 
	sF§eq_Êush
 {

106 
	mªq_fûeid
;

107 } 
	mÊush
;

108 
	sF§eq_ªmove
 {

109 
	mªq_∑th
[
MAXPATHLEN
];

110 } 
	mªmove
;

	@inc/isareg.h

14 #i‚de‡
IO_ISABEGIN


15 
	#IO_ISABEGIN
 0x000

	)

18 
	#IO_DMA1
 0x000

	)

19 
	#IO_ICU1
 0x020

	)

20 
	#IO_PMP1
 0x026

	)

21 
	#IO_TIMER1
 0x040

	)

22 
	#IO_TIMER2
 0x048

	)

23 
	#IO_KBD
 0x060

	)

24 
	#IO_PPI
 0x061

	)

25 
	#IO_RTC
 0x070

	)

26 
	#IO_NMI
 
IO_RTC


	)

27 
	#IO_DMAPG
 0x080

	)

28 
	#IO_ICU2
 0x0A0

	)

29 
	#IO_DMA2
 0x0C0

	)

30 
	#IO_NPX
 0x0F0

	)

35 
	#IO_WD2
 0x170

	)

36 
	#IO_PMP2
 0x178

	)

40 
	#IO_WD1
 0x1f0

	)

41 
	#IO_GAME
 0x200

	)

45 
	#IO_BMS2
 0x238

	)

46 
	#IO_BMS1
 0x23¯

	)

50 
	#IO_LPT2
 0x278

	)

54 
	#IO_COM4
 0x2e8

	)

58 
	#IO_COM2
 0x2f8

	)

62 
	#IO_BT0
 0x330

	)

63 
	#IO_AHA0
 0x330

	)

64 
	#IO_UHA0
 0x330

	)

65 
	#IO_BT1
 0x334

	)

66 
	#IO_AHA1
 0x334

	)

70 
	#IO_WDS
 0x350

	)

74 
	#IO_FD2
 0x370

	)

75 
	#IO_LPT1
 0x378

	)

79 
	#IO_MDA
 0x3B0

	)

80 
	#IO_LPT3
 0x3BC

	)

81 
	#IO_VGA
 0x3C0

	)

82 
	#IO_CGA
 0x3D0

	)

86 
	#IO_COM3
 0x3e8

	)

87 
	#IO_FD1
 0x3f0

	)

88 
	#IO_COM1
 0x3f8

	)

90 
	#IO_ISAEND
 0x3FF

	)

99 #i‚def 
IO_ISASIZES


100 
	#IO_ISASIZES


	)

102 
	#IO_COMSIZE
 8

	)

103 
	#IO_CGASIZE
 16

	)

104 
	#IO_DMASIZE
 16

	)

105 
	#IO_DPGSIZE
 32

	)

106 
	#IO_FDCSIZE
 8

	)

107 
	#IO_WDCSIZE
 8

	)

108 
	#IO_GAMSIZE
 16

	)

109 
	#IO_ICUSIZE
 16

	)

110 
	#IO_KBDSIZE
 16

	)

111 
	#IO_LPTSIZE
 8

	)

112 
	#IO_MDASIZE
 16

	)

113 
	#IO_RTCSIZE
 16

	)

114 
	#IO_TMRSIZE
 16

	)

115 
	#IO_NPXSIZE
 16

	)

116 
	#IO_VGASIZE
 16

	)

117 
	#IO_PMPSIZE
 2

	)

124 #i‚def 
IOM_BEGIN


125 
	#IOM_BEGIN
 0x0a0000

	)

126 
	#IOM_END
 0x100000

	)

127 
	#IOM_SIZE
 (
IOM_END
 - 
IOM_BEGIN
)

	)

	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/lib.h

7 #i‚de‡
JOS_INC_LIB_H


8 
	#JOS_INC_LIB_H
 1

	)

10 
	~<öc/ty≥s.h
>

11 
	~<öc/°dio.h
>

12 
	~<öc/°d¨g.h
>

13 
	~<öc/°rög.h
>

14 
	~<öc/îr‹.h
>

15 
	~<öc/as£π.h
>

16 
	~<öc/ív.h
>

17 
	~<öc/memœyout.h
>

18 
	~<öc/sysˇŒ.h
>

19 
	~<öc/å≠.h
>

20 
	~<öc/fs.h
>

21 
	~<öc/fd.h
>

22 
	~<öc/¨gs.h
>

23 
	~<öc/mÆloc.h
>

24 
	~<öc/ns.h
>

26 
	#USED
(
x
Ë()(x)

	)

29 *
bö¨y«me
;

30 vﬁ©ûê
Env
 *
ív
;

31 vﬁ©ûê
Env
 
ívs
[
NENV
];

32 vﬁ©ûê
Page
 
∑ges
[];

33 
exô
();

36 
£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
));

39 * 
	`ªadlöe
(c⁄° *
buf
);

42 
	`sys_˝uts
(c⁄° *
°rög
, 
size_t
 
Àn
);

43 
	`sys_cgëc
();

44 
ívid_t
 
	`sys_gëívid
();

45 
	`sys_ív_de°roy
(
ívid_t
);

46 
	`sys_yõld
();

47 
ívid_t
 
	`sys_exof‹k
();

48 
	`sys_ív_£t_°©us
(
ívid_t
 
ív
, 
°©us
);

49 
	`sys_ív_£t_å≠‰ame
(
ívid_t
 
ív
, 
Tøp‰ame
 *
tf
);

50 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ív
, *
upˇŒ
);

51 
	`sys_∑ge_Æloc
(
ívid_t
 
ív
, *
pg
, 
≥rm
);

52 
	`sys_∑ge_m≠
(
ívid_t
 
§c_ív
, *
§c_pg
,

53 
ívid_t
 
d°_ív
, *
d°_pg
, 
≥rm
);

54 
	`sys_∑ge_unm≠
(
ívid_t
 
ív
, *
pg
);

55 
	`sys_ùc_åy_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

56 
	`sys_ùc_ªcv
(*
rcv_pg
);

57 
	`sys_time_m£c
();

59 
__ölöe
 
ívid_t
 
	$sys_exof‹k
(Ë
	`__©åibuã__
((
Æways_ölöe
));

60 
__ölöe
 
ívid_t


61 
	$sys_exof‹k
()

63 
ívid_t
 
ªt
;

64 
__asm
 
	`__vﬁ©ûe
("int %2"

65 : "˜" (
ªt
)

66 : "a" (
SYS_exof‹k
),

67 "i" (
T_SYSCALL
)

69  
ªt
;

70 
	}
}

73 
ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

74 
öt32_t
 
ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
);

77 
	#PTE_SHARE
 0x400

	)

78 
ívid_t
 
f‹k
();

79 
ívid_t
 
sf‹k
();

82 
˛o£
(
fd
);

83 
ssize_t
 
ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
);

84 
ssize_t
 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
);

85 
£ek
(
fd
, 
off_t
 
off£t
);

86 
˛o£_Æl
();

87 
ssize_t
 
ªadn
(
fd
, *
buf
, 
size_t
 
nbyãs
);

88 
dup
(
ﬁdfd
, 
√wfd
);

89 
f°©
(
fd
, 
Sèt
 *
°©buf
);

90 
°©
(c⁄° *
∑th
, 
Sèt
 *
°©buf
);

93 
›í
(c⁄° *
∑th
, 
mode
);

94 
·runˇã
(
fd
, 
off_t
 
size
);

95 
ªmove
(c⁄° *
∑th
);

96 
sync
();

99 
∑gîef
(*
addr
);

102 
ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

103 
böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

104 
shutdown
(
s
, 
how
);

105 
c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

106 
li°í
(
s
, 
backlog
);

107 
sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

110 
nsùc_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

111 
nsùc_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

112 
nsùc_shutdown
(
s
, 
how
);

113 
nsùc_˛o£
(
s
);

114 
nsùc_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

115 
nsùc_li°í
(
s
, 
backlog
);

116 
nsùc_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
);

117 
nsùc_£nd
(
s
, c⁄° *
buf
, 
size
, 
Êags
);

118 
nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

121 
ívid_t
 
•awn
(c⁄° *
¥ogøm
, c⁄° **
¨gv
);

122 
ívid_t
 
•aw∆
(c⁄° *
¥ogøm
, c⁄° *
¨g0
, ...);

126 
	#O_RDONLY
 0x0000

	)

127 
	#O_WRONLY
 0x0001

	)

128 
	#O_RDWR
 0x0002

	)

129 
	#O_ACCMODE
 0x0003

	)

131 
	#O_CREAT
 0x0100

	)

132 
	#O_TRUNC
 0x0200

	)

133 
	#O_EXCL
 0x0400

	)

134 
	#O_MKDIR
 0x0800

	)

	@inc/malloc.h

1 #i‚de‡
JOS_INC_MALLOC_H


2 
	#JOS_INC_MALLOC_H
 1

	)

4 *
mÆloc
(
size_t
 
size
);

5 
‰ì
(*
addr
);

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/queue.h
>

7 
	~<öc/mmu.h
>

16 
	#GD_KT
 0x08

17 
	#GD_KD
 0x10

18 
	#GD_UT
 0x18

19 
	#GD_UD
 0x20

20 
	#GD_TSS
 0x28

21 

	)

82 
	#KERNBASE
 0xF0000000

	)

87 
	#IOPHYSMEM
 0x0A0000

	)

88 
	#EXTPHYSMEM
 0x100000

	)

94 
	#VPT
 (
KERNBASE
 - 
PTSIZE
)

	)

95 
	#KSTACKTOP
 
VPT


	)

96 
	#KSTKSIZE
 (8*
PGSIZE
)

97 
	#ULIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

105 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

107 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

109 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

116 
	#UTOP
 
UENVS


	)

118 
	#UXSTACKTOP
 
UTOP


	)

121 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

124 
	#UTEXT
 (2*
PTSIZE
)

	)

127 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

130 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

132 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

135 #i‚de‡
__ASSEMBLER__


151 
uöt32_t
 
	t±e_t
;

152 
uöt32_t
 
	tpde_t
;

154 vﬁ©ûê
±e_t
 
v±
[];

155 vﬁ©ûê
pde_t
 
vpd
[];

166 
LIST_HEAD
(
Page_li°
, 
Page
);

167 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

169 
	sPage
 {

170 
Page_LIST_íåy_t
 
µ_lök
;

177 
uöt16_t
 
µ_ªf
;

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
∑
Ë(((
uöçå_t
Ë’a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 

	)

34 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

35 
	#VPD
(
œ
Ë
	`PDX
(la)

36 

	)

38 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

41 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

44 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

47 
	#NPDENTRIES
 1024

48 
	#NPTENTRIES
 1024

49 

	)

50 
	#PGSIZE
 4096

51 
	#PGSHIFT
 12

52 

	)

53 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

54 
	#PTSHIFT
 22

55 

	)

56 
	#PTXSHIFT
 12

57 
	#PDXSHIFT
 22

58 

	)

60 
	#PTE_P
 0x001

61 
	#PTE_W
 0x002

62 
	#PTE_U
 0x004

63 
	#PTE_PWT
 0x008

64 
	#PTE_PCD
 0x010

65 
	#PTE_A
 0x020

66 
	#PTE_D
 0x040

67 
	#PTE_PS
 0x080

68 
	#PTE_MBZ
 0x180

69 

	)

72 
	#PTE_AVAIL
 0xE00

73 

	)

75 
	#PTE_USER
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

78 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

81 
	#CR0_PE
 0x00000001

82 
	#CR0_MP
 0x00000002

83 
	#CR0_EM
 0x00000004

84 
	#CR0_TS
 0x00000008

85 
	#CR0_ET
 0x00000010

86 
	#CR0_NE
 0x00000020

87 
	#CR0_WP
 0x00010000

88 
	#CR0_AM
 0x00040000

89 
	#CR0_NW
 0x20000000

90 
	#CR0_CD
 0x40000000

91 
	#CR0_PG
 0x80000000

92 

	)

93 
	#CR4_PCE
 0x00000100

94 
	#CR4_MCE
 0x00000040

95 
	#CR4_PSE
 0x00000010

96 
	#CR4_DE
 0x00000008

97 
	#CR4_TSD
 0x00000004

98 
	#CR4_PVI
 0x00000002

99 
	#CR4_VME
 0x00000001

100 

	)

102 
	#FL_CF
 0x00000001

103 
	#FL_PF
 0x00000004

104 
	#FL_AF
 0x00000010

105 
	#FL_ZF
 0x00000040

106 
	#FL_SF
 0x00000080

107 
	#FL_TF
 0x00000100

108 
	#FL_IF
 0x00000200

109 
	#FL_DF
 0x00000400

110 
	#FL_OF
 0x00000800

111 
	#FL_IOPL_MASK
 0x00003000

112 
	#FL_IOPL_0
 0x00000000

113 
	#FL_IOPL_1
 0x00001000

114 
	#FL_IOPL_2
 0x00002000

115 
	#FL_IOPL_3
 0x00003000

116 
	#FL_NT
 0x00004000

117 
	#FL_RF
 0x00010000

118 
	#FL_VM
 0x00020000

119 
	#FL_AC
 0x00040000

120 
	#FL_VIF
 0x00080000

121 
	#FL_VIP
 0x00100000

122 
	#FL_ID
 0x00200000

123 

	)

125 
	#FEC_PR
 0x1

126 
	#FEC_WR
 0x2

127 
	#FEC_U
 0x4

128 

	)

136 #ifde‡
__ASSEMBLER__


141 
	#SEG_NULL
 \

142 .
w‹d
 0, 0; \

143 .
byã
 0, 0, 0, 0

	)

144 
	#SEG
(
ty≥
,
ba£
,
lim
) \

145 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

146 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

147 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

151 
	~<öc/ty≥s.h
>

154 
	sSegdesc
 {

155 
	msd_lim_15_0
 : 16;

156 
	msd_ba£_15_0
 : 16;

157 
	msd_ba£_23_16
 : 8;

158 
	msd_ty≥
 : 4;

159 
	msd_s
 : 1;

160 
	msd_d∂
 : 2;

161 
	msd_p
 : 1;

162 
	msd_lim_19_16
 : 4;

163 
	msd_avl
 : 1;

164 
	msd_rsv1
 : 1;

165 
	msd_db
 : 1;

166 
	msd_g
 : 1;

167 
	msd_ba£_31_24
 : 8;

170 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

172 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

174 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

175 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

176 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

177 (Ë(
ba£
Ë>> 24 }

	)

178 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

179 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

180 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

181 (Ë(
ba£
Ë>> 24 }

	)

186 
	#STA_X
 0x8

187 
	#STA_E
 0x4

188 
	#STA_C
 0x4

189 
	#STA_W
 0x2

190 
	#STA_R
 0x2

191 
	#STA_A
 0x1

192 

	)

194 
	#STS_T16A
 0x1

195 
	#STS_LDT
 0x2

196 
	#STS_T16B
 0x3

197 
	#STS_CG16
 0x4

198 
	#STS_TG
 0x5

199 
	#STS_IG16
 0x6

200 
	#STS_TG16
 0x7

201 
	#STS_T32A
 0x9

202 
	#STS_T32B
 0xB

203 
	#STS_CG32
 0xC

204 
	#STS_IG32
 0xE

205 
	#STS_TG32
 0xF

206 

	)

214 #i‚de‡
__ASSEMBLER__


217 
	sTask°©e
 {

218 
uöt32_t
 
	mts_lök
;

219 
uöçå_t
 
	mts_e•0
;

220 
uöt16_t
 
	mts_ss0
;

221 
uöt16_t
 
	mts_∑ddög1
;

222 
uöçå_t
 
	mts_e•1
;

223 
uöt16_t
 
	mts_ss1
;

224 
uöt16_t
 
	mts_∑ddög2
;

225 
uöçå_t
 
	mts_e•2
;

226 
uöt16_t
 
	mts_ss2
;

227 
uöt16_t
 
	mts_∑ddög3
;

228 
phyßddr_t
 
	mts_¸3
;

229 
uöçå_t
 
	mts_eù
;

230 
uöt32_t
 
	mts_eÊags
;

231 
uöt32_t
 
	mts_óx
;

232 
uöt32_t
 
	mts_ecx
;

233 
uöt32_t
 
	mts_edx
;

234 
uöt32_t
 
	mts_ebx
;

235 
uöçå_t
 
	mts_e•
;

236 
uöçå_t
 
	mts_ebp
;

237 
uöt32_t
 
	mts_esi
;

238 
uöt32_t
 
	mts_edi
;

239 
uöt16_t
 
	mts_es
;

240 
uöt16_t
 
	mts_∑ddög4
;

241 
uöt16_t
 
	mts_cs
;

242 
uöt16_t
 
	mts_∑ddög5
;

243 
uöt16_t
 
	mts_ss
;

244 
uöt16_t
 
	mts_∑ddög6
;

245 
uöt16_t
 
	mts_ds
;

246 
uöt16_t
 
	mts_∑ddög7
;

247 
uöt16_t
 
	mts_fs
;

248 
uöt16_t
 
	mts_∑ddög8
;

249 
uöt16_t
 
	mts_gs
;

250 
uöt16_t
 
	mts_∑ddög9
;

251 
uöt16_t
 
	mts_ldt
;

252 
uöt16_t
 
	mts_∑ddög10
;

253 
uöt16_t
 
	mts_t
;

254 
uöt16_t
 
	mts_iomb
;

258 
	sG©edesc
 {

259 
	mgd_off_15_0
 : 16;

260 
	mgd_ss
 : 16;

261 
	mgd_¨gs
 : 5;

262 
	mgd_rsv1
 : 3;

263 
	mgd_ty≥
 : 4;

264 
	mgd_s
 : 1;

265 
	mgd_d∂
 : 2;

266 
	mgd_p
 : 1;

267 
	mgd_off_31_16
 : 16;

284 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

286 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

287 (
g©e
).
gd_ss
 = (
£l
); \

288 (
g©e
).
gd_¨gs
 = 0; \

289 (
g©e
).
gd_rsv1
 = 0; \

290 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

291 (
g©e
).
gd_s
 = 0; \

292 (
g©e
).
gd_d∂
 = (
d∂
); \

293 (
g©e
).
gd_p
 = 1; \

294 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

295 }

	)

298 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

300 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

301 (
g©e
).
gd_ss
 = (
ss
); \

302 (
g©e
).
gd_¨gs
 = 0; \

303 (
g©e
).
gd_rsv1
 = 0; \

304 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

305 (
g©e
).
gd_s
 = 0; \

306 (
g©e
).
gd_d∂
 = (
d∂
); \

307 (
g©e
).
gd_p
 = 1; \

308 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

309 }

	)

312 
	sP£udodesc
 {

313 
uöt16_t
 
	mpd_lim
;

314 
uöt32_t
 
	mpd_ba£
;

315 } 
__©åibuã__
 ((
∑cked
));

	@inc/ns.h

3 #i‚de‡
JOS_INC_NS_H


4 
	#JOS_INC_NS_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<lwù/sockës.h
>

9 
	sjif_pkt
 {

10 
	mjp_Àn
;

11 
	mjp_d©a
[0];

18 
	mNSREQ_ACCEPT
 = 1,

19 
	mNSREQ_BIND
,

20 
	mNSREQ_SHUTDOWN
,

21 
	mNSREQ_CLOSE
,

22 
	mNSREQ_CONNECT
,

23 
	mNSREQ_LISTEN
,

25 
	mNSREQ_RECV
,

26 
	mNSREQ_SEND
,

27 
	mNSREQ_SOCKET
,

30 
	mNSREQ_INPUT
,

33 
	mNSREQ_OUTPUT
,

36 
	mNSREQ_TIMER
,

39 
	uNsùc
 {

40 
	sN§eq_ac˚±
 {

41 
	mªq_s
;

42 } 
	mac˚±
;

44 
	sN§ë_ac˚±
 {

45 
sockaddr
 
	mªt_addr
;

46 
sockÀn_t
 
	mªt_addæí
;

47 } 
	mac˚±Rë
;

49 
	sN§eq_böd
 {

50 
	mªq_s
;

51 
sockaddr
 
	mªq_«me
;

52 
sockÀn_t
 
	mªq_«mñí
;

53 } 
	mböd
;

55 
	sN§eq_shutdown
 {

56 
	mªq_s
;

57 
	mªq_how
;

58 } 
	mshutdown
;

60 
	sN§eq_˛o£
 {

61 
	mªq_s
;

62 } 
	m˛o£
;

64 
	sN§eq_c⁄√˘
 {

65 
	mªq_s
;

66 
sockaddr
 
	mªq_«me
;

67 
sockÀn_t
 
	mªq_«mñí
;

68 } 
	mc⁄√˘
;

70 
	sN§eq_li°í
 {

71 
	mªq_s
;

72 
	mªq_backlog
;

73 } 
	mli°í
;

75 
	sN§eq_ªcv
 {

76 
	mªq_s
;

77 
	mªq_Àn
;

78 
	mªq_Êags
;

79 } 
	mªcv
;

81 
	sN§ë_ªcv
 {

82 
	mªt_buf
[0];

83 } 
	mªcvRë
;

85 
	sN§eq_£nd
 {

86 
	mªq_s
;

87 
	mªq_size
;

88 
	mªq_Êags
;

89 
	mªq_buf
[0];

90 } 
	m£nd
;

92 
	sN§eq_sockë
 {

93 
	mªq_domaö
;

94 
	mªq_ty≥
;

95 
	mªq_¥Ÿocﬁ
;

96 } 
	msockë
;

98 
jif_pkt
 
	mpkt
;

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöçå_t
 
	mn_vÆue
;

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

6 
__buûtö_va_li°
 
	tva_li°
;

8 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
◊p,Üa°)

	)

10 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
◊p,Åy≥)

	)

12 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
˝utch¨
(
c
);

12 
gëch¨
();

13 
isc⁄s
(
fd
);

16 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

17 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

18 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

19 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

22 
	`˝rötf
(c⁄° *
fmt
, ...);

23 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

26 
	`¥ötf
(c⁄° *
fmt
, ...);

27 
	`Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	`vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

31 * 
	`ªadlöe
(c⁄° *
¥om±
);

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

12 
p°r˝y
(*
buf
, 
buf_size
, c⁄° *
°r
);

13 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

14 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

15 * 
°rchr
(c⁄° *
s
, 
c
);

16 * 
°rföd
(c⁄° *
s
, 
c
);

18 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

20 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

21 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

22 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

24 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/syscall.h

1 #i‚de‡
JOS_INC_SYSCALL_H


2 
	#JOS_INC_SYSCALL_H


	)

7 
	mSYS_˝uts
 = 0,

8 
	mSYS_cgëc
,

9 
	mSYS_gëívid
,

10 
	mSYS_ív_de°roy
,

11 
	mSYS_∑ge_Æloc
,

12 
	mSYS_∑ge_m≠
,

13 
	mSYS_∑ge_unm≠
,

14 
	mSYS_exof‹k
,

15 
	mSYS_ív_£t_°©us
,

16 
	mSYS_ív_£t_å≠‰ame
,

17 
	mSYS_ív_£t_pgÁu…_upˇŒ
,

18 
	mSYS_yõld
,

19 
	mSYS_ùc_åy_£nd
,

20 
	mSYS_ùc_ªcv
,

21 
	mSYS_time_m£c
,

22 
	mNSYSCALLS


	@inc/timerreg.h

42 
	#TIMER_FREQ
 1193182

	)

43 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

48 
	#TIMER_CNTR0
 (
IO_TIMER1
 + 0Ë

	)

49 
	#TIMER_CNTR1
 (
IO_TIMER1
 + 1Ë

	)

50 
	#TIMER_CNTR2
 (
IO_TIMER1
 + 2Ë

	)

51 
	#TIMER_MODE
 (
IO_TIMER1
 + 3Ë

	)

52 
	#TIMER_SEL0
 0x00

	)

53 
	#TIMER_SEL1
 0x40

	)

54 
	#TIMER_SEL2
 0x80

	)

55 
	#TIMER_INTTC
 0x00

	)

56 
	#TIMER_ONESHOT
 0x02

	)

57 
	#TIMER_RATEGEN
 0x04

	)

58 
	#TIMER_SQWAVE
 0x06

	)

59 
	#TIMER_SWSTROBE
 0x08

	)

60 
	#TIMER_HWSTROBE
 0x0®

	)

61 
	#TIMER_LATCH
 0x00

	)

62 
	#TIMER_LSB
 0x10

	)

63 
	#TIMER_MSB
 0x20

	)

64 
	#TIMER_16BIT
 0x30

	)

65 
	#TIMER_BCD
 0x01

	)

	@inc/trap.h

1 #i‚de‡
JOS_INC_TRAP_H


2 
	#JOS_INC_TRAP_H


	)

6 
	#T_DIVIDE
 0

7 
	#T_DEBUG
 1

8 
	#T_NMI
 2

9 
	#T_BRKPT
 3

10 
	#T_OFLOW
 4

11 
	#T_BOUND
 5

12 
	#T_ILLOP
 6

13 
	#T_DEVICE
 7

14 
	#T_DBLFLT
 8

16 
	#T_TSS
 10

17 
	#T_SEGNP
 11

18 
	#T_STACK
 12

19 
	#T_GPFLT
 13

20 
	#T_PGFLT
 14

22 
	#T_FPERR
 16

23 
	#T_ALIGN
 17

24 
	#T_MCHK
 18

25 
	#T_SIMDERR
 19

26 

	)

29 
	#T_SYSCALL
 48

30 
	#T_DEFAULT
 500

31 

	)

33 
	#IRQ_TIMER
 0

	)

34 
	#IRQ_KBD
 1

	)

35 
	#IRQ_SERIAL
 4

	)

36 
	#IRQ_SPURIOUS
 7

	)

37 
	#IRQ_IDE
 14

	)

38 
	#IRQ_ERROR
 19

	)

40 #i‚de‡
__ASSEMBLER__


42 
	~<öc/ty≥s.h
>

44 
	sPushRegs
 {

46 
uöt32_t
 
	mªg_edi
;

47 
uöt32_t
 
	mªg_esi
;

48 
uöt32_t
 
	mªg_ebp
;

49 
uöt32_t
 
	mªg_€•
;

50 
uöt32_t
 
	mªg_ebx
;

51 
uöt32_t
 
	mªg_edx
;

52 
uöt32_t
 
	mªg_ecx
;

53 
uöt32_t
 
	mªg_óx
;

54 } 
__©åibuã__
((
∑cked
));

56 
	sTøp‰ame
 {

57 
PushRegs
 
	mtf_ªgs
;

58 
uöt16_t
 
	mtf_es
;

59 
uöt16_t
 
	mtf_∑ddög1
;

60 
uöt16_t
 
	mtf_ds
;

61 
uöt16_t
 
	mtf_∑ddög2
;

62 
uöt32_t
 
	mtf_å≠no
;

64 
uöt32_t
 
	mtf_îr
;

65 
uöçå_t
 
	mtf_eù
;

66 
uöt16_t
 
	mtf_cs
;

67 
uöt16_t
 
	mtf_∑ddög3
;

68 
uöt32_t
 
	mtf_eÊags
;

70 
uöçå_t
 
	mtf_e•
;

71 
uöt16_t
 
	mtf_ss
;

72 
uöt16_t
 
	mtf_∑ddög4
;

73 } 
__©åibuã__
((
∑cked
));

75 
	sUTøp‰ame
 {

77 
uöt32_t
 
	mutf_Áu…_va
;

78 
uöt32_t
 
	mutf_îr
;

80 
PushRegs
 
	mutf_ªgs
;

81 
uöçå_t
 
	mutf_eù
;

82 
uöt32_t
 
	mutf_eÊags
;

84 
uöçå_t
 
	mutf_e•
;

85 } 
__©åibuã__
((
∑cked
));

91 
	#SIZEOF_STRUCT_TRAPFRAME
 0x44

	)

	@inc/types.h

1 #i‚de‡
JOS_INC_TYPES_H


2 
	#JOS_INC_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

9 
	tboﬁ
;

12 
__sig√d
 
	töt8_t
;

13 
	tuöt8_t
;

14 
	töt16_t
;

15 
	tuöt16_t
;

16 
	töt32_t
;

17 
	tuöt32_t
;

18 
	töt64_t
;

19 
	tuöt64_t
;

25 
öt32_t
 
	töçå_t
;

26 
uöt32_t
 
	tuöçå_t
;

27 
uöt32_t
 
	tphyßddr_t
;

30 
uöt32_t
 
	tµn_t
;

33 
uöt32_t
 
	tsize_t
;

36 
öt32_t
 
	tssize_t
;

39 
öt32_t
 
	toff_t
;

41 
uöt64_t
 
	tbfd_vma
;

42 
öt64_t
 
	tbfd_sig√d_vma
;

43 
uöt8_t
 
	tbfd_byã
;

45 
	#MIN
(
_a
, 
_b
) \

47 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

48 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

49 
__a
 <
__b
 ? __a : __b; \

50 })

	)

51 
	#MAX
(
_a
, 
_b
) \

53 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

54 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

55 
__a
 >
__b
 ? __a : __b; \

56 })

	)

60 
	#ROUNDDOWN
(
a
, 
n
) \

62 
uöt32_t
 
__a
 = (uöt32_tË(
a
); \

63 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

64 })

	)

66 
	#ROUNDUP
(
a
, 
n
) \

68 
uöt32_t
 
__n
 = (uöt32_tË(
n
); \

69 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt32_t
Ë◊Ë+ 
__n
 - 1, __n)); \

70 })

	)

73 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

6 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	$wrôe_e•
(
uöt32_t
 
e•
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

37 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
__ölöe
 

40 
	$bªakpoöt
()

42 
__asm
 
	`__vﬁ©ûe
("int3");

43 
	}
}

45 
__ölöe
 
uöt8_t


46 
	$öb
(
p‹t
)

48 
uöt8_t
 
d©a
;

49 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

50  
d©a
;

51 
	}
}

53 
__ölöe
 

54 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

56 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

57 "=D" (
addr
), "=c" (
˙t
) :

58 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

60 
	}
}

62 
__ölöe
 
uöt16_t


63 
	$öw
(
p‹t
)

65 
uöt16_t
 
d©a
;

66 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

67  
d©a
;

68 
	}
}

70 
__ölöe
 

71 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

73 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

74 "=D" (
addr
), "=c" (
˙t
) :

75 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

77 
	}
}

79 
__ölöe
 
uöt32_t


80 
	$öl
(
p‹t
)

82 
uöt32_t
 
d©a
;

83 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

84  
d©a
;

85 
	}
}

87 
__ölöe
 

88 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

90 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

91 "=D" (
addr
), "=c" (
˙t
) :

92 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

94 
	}
}

96 
__ölöe
 

97 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

99 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

100 
	}
}

102 
__ölöe
 

103 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

105 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

106 "=S" (
addr
), "=c" (
˙t
) :

107 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

109 
	}
}

111 
__ölöe
 

112 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

114 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

115 
	}
}

117 
__ölöe
 

118 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

120 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

121 "=S" (
addr
), "=c" (
˙t
) :

122 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

124 
	}
}

126 
__ölöe
 

127 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

129 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

130 "=S" (
addr
), "=c" (
˙t
) :

131 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

133 
	}
}

135 
__ölöe
 

136 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

138 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

139 
	}
}

141 
__ölöe
 

142 
	$övÕg
(*
addr
)

144 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

145 
	}
}

147 
__ölöe
 

148 
	$lidt
(*
p
)

150 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

151 
	}
}

153 
__ölöe
 

154 
	$Œdt
(
uöt16_t
 
£l
)

156 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

157 
	}
}

159 
__ölöe
 

160 
	$…r
(
uöt16_t
 
£l
)

162 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

163 
	}
}

165 
__ölöe
 

166 
	$l¸0
(
uöt32_t
 
vÆ
)

168 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

169 
	}
}

171 
__ölöe
 
uöt32_t


172 
	$r¸0
()

174 
uöt32_t
 
vÆ
;

175 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

176  
vÆ
;

177 
	}
}

179 
__ölöe
 
uöt32_t


180 
	$r¸2
()

182 
uöt32_t
 
vÆ
;

183 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

184  
vÆ
;

185 
	}
}

187 
__ölöe
 

188 
	$l¸3
(
uöt32_t
 
vÆ
)

190 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

191 
	}
}

193 
__ölöe
 
uöt32_t


194 
	$r¸3
()

196 
uöt32_t
 
vÆ
;

197 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

198  
vÆ
;

199 
	}
}

201 
__ölöe
 

202 
	$l¸4
(
uöt32_t
 
vÆ
)

204 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

205 
	}
}

207 
__ölöe
 
uöt32_t


208 
	$r¸4
()

210 
uöt32_t
 
¸4
;

211 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

212  
¸4
;

213 
	}
}

215 
__ölöe
 

216 
	$ébÊush
()

218 
uöt32_t
 
¸3
;

219 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

220 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

221 
	}
}

223 
__ölöe
 
uöt32_t


224 
	$ªad_eÊags
()

226 
uöt32_t
 
eÊags
;

227 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

228  
eÊags
;

229 
	}
}

231 
__ölöe
 

232 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

234 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

235 
	}
}

237 
__ölöe
 
uöt32_t


238 
	$ªad_ebp
()

240 
uöt32_t
 
ebp
;

241 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

242  
ebp
;

243 
	}
}

245 
__ölöe
 
uöt32_t


246 
	$ªad_e•
()

248 
uöt32_t
 
e•
;

249 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

250  
e•
;

251 
	}
}

253 
__ölöe
 

254 
	$wrôe_e•
(
uöt32_t
 
e•
)

256 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%e•" : : "r" (
e•
));

257 
	}
}

258 
__ölöe
 

259 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

261 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

262 
asm
 volatile("cpuid"

263 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

264 : "a" (
öfo
));

265 i‡(
óxp
)

266 *
óxp
 = 
óx
;

267 i‡(
ebxp
)

268 *
ebxp
 = 
ebx
;

269 i‡(
ecxp
)

270 *
ecxp
 = 
ecx
;

271 i‡(
edxp
)

272 *
edxp
 = 
edx
;

273 
	}
}

275 
__ölöe
 
uöt64_t


276 
	$ªad_tsc
()

278 
uöt64_t
 
tsc
;

279 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

280  
tsc
;

281 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/c⁄sﬁe.h
>

10 
	~<kîn/picúq.h
>

12 
c⁄s_öå
((*
¥oc
)());

13 
	`c⁄s_putc
(
c
);

18 
	$dñay
()

20 
	`öb
(0x84);

21 
	`öb
(0x84);

22 
	`öb
(0x84);

23 
	`öb
(0x84);

24 
	}
}

28 
	#COM1
 0x3F8

	)

30 
	#COM_RX
 0

31 
	#COM_TX
 0

32 
	#COM_DLL
 0

33 
	#COM_DLM
 1

34 
	#COM_IER
 1

35 
	#COM_IER_RDI
 0x01

36 
	#COM_IIR
 2

37 
	#COM_FCR
 2

38 
	#COM_LCR
 3

39 
	#COM_LCR_DLAB
 0x80

40 
	#COM_LCR_WLEN8
 0x03

41 
	#COM_MCR
 4

42 
	#COM_MCR_RTS
 0x02

43 
	#COM_MCR_DTR
 0x01

44 
	#COM_MCR_OUT2
 0x08

45 
	#COM_LSR
 5

46 
	#COM_LSR_DATA
 0x01

47 
	#COM_LSR_TXRDY
 0x20

48 
	#COM_LSR_TSRE
 0x40

49 

	)

50 
boﬁ
 
	g£rül_exi°s
;

53 
	$£rül_¥oc_d©a
()

55 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

57  
	`öb
(
COM1
+
COM_RX
);

58 
	}
}

61 
	$£rül_öå
()

63 i‡(
£rül_exi°s
)

64 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

65 
	}
}

68 
	$£rül_putc
(
c
)

70 
i
;

72 
i
 = 0;

73 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

74 
i
++)

75 
	`dñay
();

77 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

78 
	}
}

81 
	$£rül_öô
()

84 
	`outb
(
COM1
+
COM_FCR
, 0);

87 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

88 
	`outb
(
COM1
+
COM_DLL
, (
uöt8_t
) (115200 / 9600));

89 
	`outb
(
COM1
+
COM_DLM
, 0);

92 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

95 
	`outb
(
COM1
+
COM_MCR
, 0);

97 
	`outb
(
COM1
+
COM_IER
, 
COM_IER_RDI
);

101 
£rül_exi°s
 = (
	`öb
(
COM1
+
COM_LSR
) != 0xFF);

102 (Ë
	`öb
(
COM1
+
COM_IIR
);

103 (Ë
	`öb
(
COM1
+
COM_RX
);

105 
	}
}

114 
	$Õt_putc
(
c
)

116 
i
;

118 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

119 
	`dñay
();

120 
	`outb
(0x378+0, 
c
);

121 
	`outb
(0x378+2, 0x08|0x04|0x01);

122 
	`outb
(0x378+2, 0x08);

123 
	}
}

130 
	gaddr_6845
;

131 
uöt16_t
 *
	g¸t_buf
;

132 
uöt16_t
 
	g¸t_pos
;

135 
	$cga_öô
()

137 vﬁ©ûê
uöt16_t
 *
˝
;

138 
uöt16_t
 
was
;

139 
pos
;

141 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

142 
was
 = *
˝
;

143 *
˝
 = (
uöt16_t
) 0xA55A;

144 i‡(*
˝
 != 0xA55A) {

145 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

146 
addr_6845
 = 
MONO_BASE
;

148 *
˝
 = 
was
;

149 
addr_6845
 = 
CGA_BASE
;

153 
	`outb
(
addr_6845
, 14);

154 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

155 
	`outb
(
addr_6845
, 15);

156 
pos
 |
	`öb
(
addr_6845
 + 1);

158 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

159 
¸t_pos
 = 
pos
;

160 
	}
}

165 
	$cga_putc
(
c
)

168 i‡(!(
c
 & ~0xFF))

169 
c
 |= 0x0700;

171 
c
 & 0xff) {

173 i‡(
¸t_pos
 > 0) {

174 
¸t_pos
--;

175 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

179 
¸t_pos
 +
CRT_COLS
;

182 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

185 
	`c⁄s_putc
(' ');

186 
	`c⁄s_putc
(' ');

187 
	`c⁄s_putc
(' ');

188 
	`c⁄s_putc
(' ');

189 
	`c⁄s_putc
(' ');

192 
¸t_buf
[
¸t_pos
++] = 
c
;

197 i‡(
¸t_pos
 >
CRT_SIZE
) {

198 
i
;

200 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

201 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

202 
¸t_buf
[
i
] = 0x0700 | ' ';

203 
¸t_pos
 -
CRT_COLS
;

207 
	`outb
(
addr_6845
, 14);

208 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

209 
	`outb
(
addr_6845
, 15);

210 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

211 
	}
}

216 
	#NO
 0

	)

218 
	#SHIFT
 (1<<0)

	)

219 
	#CTL
 (1<<1)

	)

220 
	#ALT
 (1<<2)

	)

222 
	#CAPSLOCK
 (1<<3)

	)

223 
	#NUMLOCK
 (1<<4)

	)

224 
	#SCROLLLOCK
 (1<<5)

	)

226 
	#E0ESC
 (1<<6)

	)

228 
uöt8_t
 
	gshi·code
[256] =

230 [0x1D] = 
CTL
,

231 [0x2A] = 
SHIFT
,

232 [0x36] = 
SHIFT
,

233 [0x38] = 
ALT
,

234 [0x9D] = 
CTL
,

235 [0xB8] = 
ALT


238 
uöt8_t
 
	gtoggÀcode
[256] =

240 [0x3A] = 
CAPSLOCK
,

241 [0x45] = 
NUMLOCK
,

242 [0x46] = 
SCROLLLOCK


245 
uöt8_t
 
	gn‹mÆm≠
[256] =

247 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

250 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

252 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

253 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

254 
NO
, ' ', NO, NO, NO, NO, NO, NO,

255 
NO
, NO, NO, NO, NO, NO, NO, '7',

257 '2', '3', '0', '.', 
NO
, NO, NO, NO,

258 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

259 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

260 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

261 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

262 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

263 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


266 
uöt8_t
 
	gshi·m≠
[256] =

268 
NO
, 033, '!', '@', '#', '$', '%', '^',

271 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

273 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

274 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

275 
NO
, ' ', NO, NO, NO, NO, NO, NO,

276 
NO
, NO, NO, NO, NO, NO, NO, '7',

278 '2', '3', '0', '.', 
NO
, NO, NO, NO,

279 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

280 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

281 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

282 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

283 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

284 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


287 
	#C
(
x
Ë(x - '@')

	)

289 
uöt8_t
 
	g˘lm≠
[256] =

291 
NO
, NO, NO, NO, NO, NO, NO, NO,

292 
NO
, NO, NO, NO, NO, NO, NO, NO,

293 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

294 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

295 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

296 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

297 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

298 [0x97] = 
KEY_HOME
,

299 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

300 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

301 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

302 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

303 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


306 
uöt8_t
 *
	gch¨code
[4] = {

307 
n‹mÆm≠
,

308 
shi·m≠
,

309 
˘lm≠
,

310 
˘lm≠


318 
	$kbd_¥oc_d©a
()

320 
c
;

321 
uöt8_t
 
d©a
;

322 
uöt32_t
 
shi·
;

324 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

327 
d©a
 = 
	`öb
(
KBDATAP
);

329 i‡(
d©a
 == 0xE0) {

331 
shi·
 |
E0ESC
;

333 } i‡(
d©a
 & 0x80) {

335 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

336 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

338 } i‡(
shi·
 & 
E0ESC
) {

340 
d©a
 |= 0x80;

341 
shi·
 &~
E0ESC
;

344 
shi·
 |
shi·code
[
d©a
];

345 
shi·
 ^
toggÀcode
[
d©a
];

347 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

348 i‡(
shi·
 & 
CAPSLOCK
) {

349 i‡('a' <
c
 && c <= 'z')

350 
c
 += 'A' - 'a';

351 i‡('A' <
c
 && c <= 'Z')

352 
c
 += 'a' - 'A';

357 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

358 
	`˝rötf
("Rebooting!\n");

359 
	`outb
(0x92, 0x3);

362  
c
;

363 
	}
}

366 
	$kbd_öå
()

368 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

369 
	}
}

372 
	$kbd_öô
()

375 
	`kbd_öå
();

376 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<1));

377 
	}
}

386 
	#CONSBUFSIZE
 512

	)

389 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

390 
uöt32_t
 
	mΩos
;

391 
uöt32_t
 
	mwpos
;

392 } 
	gc⁄s
;

397 
c⁄s_öå
((*
¥oc
)())

399 
c
;

401 (
c
 = (*
¥oc
)()) != -1) {

402 i‡(
c
 == 0)

404 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

405 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

406 
c⁄s
.
wpos
 = 0;

408 
	}
}

412 
	$c⁄s_gëc
()

414 
c
;

419 
	`£rül_öå
();

420 
	`kbd_öå
();

423 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

424 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

425 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

426 
c⁄s
.
Ωos
 = 0;

427  
c
;

430 
	}
}

434 
	$c⁄s_putc
(
c
)

436 
	`£rül_putc
(
c
);

437 
	`Õt_putc
(
c
);

438 
	`cga_putc
(
c
);

439 
	}
}

443 
	$c⁄s_öô
()

445 
	`cga_öô
();

446 
	`kbd_öô
();

447 
	`£rül_öô
();

449 i‡(!
£rül_exi°s
)

450 
	`˝rötf
("SerialÖort doesÇotÉxist!\n");

451 
	}
}

457 
	$˝utch¨
(
c
)

459 
	`c⁄s_putc
(
c
);

460 
	}
}

463 
	$gëch¨
()

465 
c
;

467 (
c
 = 
	`c⁄s_gëc
()) == 0)

469  
c
;

470 
	}
}

473 
	$isc⁄s
(
fdnum
)

477 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

16 
	#CRT_ROWS
 25

	)

17 
	#CRT_COLS
 80

	)

18 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

20 
c⁄s_öô
();

21 
c⁄s_gëc
();

23 
kbd_öå
();

24 
£rül_öå
();

	@kern/dis-asm.h

9 #i‚de‡
DIS_ASM_H


10 
	#DIS_ASM_H


	)

11 
	~<öc/ty≥s.h
>

12 
	~<öc/°dio.h
>

13 
	~<öc/as£π.h
>

14 
	~<öc/°rög.h
>

16 
	#PARAMS
(
x
Ë
	)
x

17 *
	tPTR
;

18 
	#•rötf_vma
(
s
,
x
Ë
	`•rötf
 (s, "%0x", x)

	)

19 
	#¢¥ötf_vma
(
s
,
ss
,
x
Ë
	`¢¥ötf
 (s, ss, "%0x", x)

	)

21 
	#BFD64


	)

23 
	ebfd_Êavour
 {

24 
	mbfd_èrgë_unknown_Êavour
,

25 
	mbfd_èrgë_aout_Êavour
,

26 
	mbfd_èrgë_coff_Êavour
,

27 
	mbfd_èrgë_ecoff_Êavour
,

28 
	mbfd_èrgë_ñf_Êavour
,

29 
	mbfd_èrgë_õì_Êavour
,

30 
	mbfd_èrgë_∆m_Êavour
,

31 
	mbfd_èrgë_ﬂsys_Êavour
,

32 
	mbfd_èrgë_ãkhex_Êavour
,

33 
	mbfd_èrgë_§ec_Êavour
,

34 
	mbfd_èrgë_ihex_Êavour
,

35 
	mbfd_èrgë_som_Êavour
,

36 
	mbfd_èrgë_os9k_Êavour
,

37 
	mbfd_èrgë_vîßdos_Êavour
,

38 
	mbfd_èrgë_msdos_Êavour
,

39 
	mbfd_èrgë_evax_Êavour


42 
	ebfd_ídün
 { 
	mBFD_ENDIAN_BIG
, 
	mBFD_ENDIAN_LITTLE
, 
	mBFD_ENDIAN_UNKNOWN
 };

44 
	ebfd_¨chôe˘uª


46 
	mbfd_¨ch_unknown
,

47 
	mbfd_¨ch_obscuª
,

48 
	mbfd_¨ch_m68k
,

49 
	#bfd_mach_m68000
 1

	)

50 
	#bfd_mach_m68008
 2

	)

51 
	#bfd_mach_m68010
 3

	)

52 
	#bfd_mach_m68020
 4

	)

53 
	#bfd_mach_m68030
 5

	)

54 
	#bfd_mach_m68040
 6

	)

55 
	#bfd_mach_m68060
 7

	)

56 
	#bfd_mach_˝u32
 8

	)

57 
	#bfd_mach_mcf5200
 9

	)

58 
	#bfd_mach_mcf5206e
 10

	)

59 
	#bfd_mach_mcf5307
 11

	)

60 
	#bfd_mach_mcf5407
 12

	)

61 
	#bfd_mach_mcf528x
 13

	)

62 
	#bfd_mach_mcfv4e
 14

	)

63 
	#bfd_mach_mcf521x
 15

	)

64 
	#bfd_mach_mcf5249
 16

	)

65 
	#bfd_mach_mcf547x
 17

	)

66 
	#bfd_mach_mcf548x
 18

	)

67 
	mbfd_¨ch_vax
,

68 
	mbfd_¨ch_i960
,

77 
	#bfd_mach_i960_c‹e
 1

	)

78 
	#bfd_mach_i960_ka_ß
 2

	)

79 
	#bfd_mach_i960_kb_sb
 3

	)

80 
	#bfd_mach_i960_mc
 4

	)

81 
	#bfd_mach_i960_xa
 5

	)

82 
	#bfd_mach_i960_ˇ
 6

	)

83 
	#bfd_mach_i960_jx
 7

	)

84 
	#bfd_mach_i960_hx
 8

	)

86 
	mbfd_¨ch_a29k
,

87 
	mbfd_¨ch_•¨c
,

88 
	#bfd_mach_•¨c
 1

	)

90 
	#bfd_mach_•¨c_•¨˛ë
 2

	)

91 
	#bfd_mach_•¨c_•¨˛ôe
 3

	)

92 
	#bfd_mach_•¨c_v8∂us
 4

	)

93 
	#bfd_mach_•¨c_v8∂uß
 5

	)

94 
	#bfd_mach_•¨c_•¨˛ôe_À
 6

	)

95 
	#bfd_mach_•¨c_v9
 7

	)

96 
	#bfd_mach_•¨c_v9a
 8

	)

97 
	#bfd_mach_•¨c_v8∂usb
 9

	)

98 
	#bfd_mach_•¨c_v9b
 10

	)

100 
	#bfd_mach_•¨c_v9_p
(
mach
) \

101 ((
mach
Ë>
bfd_mach_•¨c_v8∂us
 && (machË<
bfd_mach_•¨c_v9b
 \

102 && (
mach
Ë!
bfd_mach_•¨c_•¨˛ôe_À
)

	)

103 
	mbfd_¨ch_mùs
,

104 
	#bfd_mach_mùs3000
 3000

	)

105 
	#bfd_mach_mùs3900
 3900

	)

106 
	#bfd_mach_mùs4000
 4000

	)

107 
	#bfd_mach_mùs4010
 4010

	)

108 
	#bfd_mach_mùs4100
 4100

	)

109 
	#bfd_mach_mùs4300
 4300

	)

110 
	#bfd_mach_mùs4400
 4400

	)

111 
	#bfd_mach_mùs4600
 4600

	)

112 
	#bfd_mach_mùs4650
 4650

	)

113 
	#bfd_mach_mùs5000
 5000

	)

114 
	#bfd_mach_mùs6000
 6000

	)

115 
	#bfd_mach_mùs8000
 8000

	)

116 
	#bfd_mach_mùs10000
 10000

	)

117 
	#bfd_mach_mùs16
 16

	)

118 
	mbfd_¨ch_i386
,

119 
	#bfd_mach_i386_i386
 0

	)

120 
	#bfd_mach_i386_i8086
 1

	)

121 
	#bfd_mach_i386_i386_öãl_sy¡ax
 2

	)

122 
	#bfd_mach_x86_64
 3

	)

123 
	#bfd_mach_x86_64_öãl_sy¡ax
 4

	)

124 
	mbfd_¨ch_we32k
,

125 
	mbfd_¨ch_èh€
,

126 
	mbfd_¨ch_i860
,

127 
	mbfd_¨ch_romp
,

128 
	mbfd_¨ch_Ælü¡
,

129 
	mbfd_¨ch_c⁄vex
,

130 
	mbfd_¨ch_m88k
,

131 
	mbfd_¨ch_pyømid
,

132 
	mbfd_¨ch_h8300
,

133 
	#bfd_mach_h8300
 1

	)

134 
	#bfd_mach_h8300h
 2

	)

135 
	#bfd_mach_h8300s
 3

	)

136 
	mbfd_¨ch_powîpc
,

137 
	#bfd_mach_µc
 0

	)

138 
	#bfd_mach_µc64
 1

	)

139 
	#bfd_mach_µc_403
 403

	)

140 
	#bfd_mach_µc_403gc
 4030

	)

141 
	#bfd_mach_µc_e500
 500

	)

142 
	#bfd_mach_µc_505
 505

	)

143 
	#bfd_mach_µc_601
 601

	)

144 
	#bfd_mach_µc_602
 602

	)

145 
	#bfd_mach_µc_603
 603

	)

146 
	#bfd_mach_µc_ec603e
 6031

	)

147 
	#bfd_mach_µc_604
 604

	)

148 
	#bfd_mach_µc_620
 620

	)

149 
	#bfd_mach_µc_630
 630

	)

150 
	#bfd_mach_µc_750
 750

	)

151 
	#bfd_mach_µc_860
 860

	)

152 
	#bfd_mach_µc_a35
 35

	)

153 
	#bfd_mach_µc_rs64ii
 642

	)

154 
	#bfd_mach_µc_rs64iii
 643

	)

155 
	#bfd_mach_µc_7400
 7400

	)

156 
	mbfd_¨ch_rs6000
,

157 
	mbfd_¨ch_hµa
,

158 
	#bfd_mach_hµa10
 10

	)

159 
	#bfd_mach_hµa11
 11

	)

160 
	#bfd_mach_hµa20
 20

	)

161 
	#bfd_mach_hµa20w
 25

	)

162 
	mbfd_¨ch_d10v
,

163 
	mbfd_¨ch_z8k
,

164 
	#bfd_mach_z8001
 1

	)

165 
	#bfd_mach_z8002
 2

	)

166 
	mbfd_¨ch_h8500
,

167 
	mbfd_¨ch_sh
,

168 
	#bfd_mach_sh
 1

	)

169 
	#bfd_mach_sh2
 0x20

	)

170 
	#bfd_mach_sh_d•
 0x2d

	)

171 
	#bfd_mach_sh2a
 0x2a

	)

172 
	#bfd_mach_sh2a_noÂu
 0x2b

	)

173 
	#bfd_mach_sh2e
 0x2e

	)

174 
	#bfd_mach_sh3
 0x30

	)

175 
	#bfd_mach_sh3_nommu
 0x31

	)

176 
	#bfd_mach_sh3_d•
 0x3d

	)

177 
	#bfd_mach_sh3e
 0x3e

	)

178 
	#bfd_mach_sh4
 0x40

	)

179 
	#bfd_mach_sh4_noÂu
 0x41

	)

180 
	#bfd_mach_sh4_nommu_noÂu
 0x42

	)

181 
	#bfd_mach_sh4a
 0x4a

	)

182 
	#bfd_mach_sh4a_noÂu
 0x4b

	)

183 
	#bfd_mach_sh4Æ_d•
 0x4d

	)

184 
	#bfd_mach_sh5
 0x50

	)

185 
	mbfd_¨ch_Æpha
,

186 
	#bfd_mach_Æpha
 1

	)

187 
	mbfd_¨ch_¨m
,

188 
	#bfd_mach_¨m_unknown
 0

	)

189 
	#bfd_mach_¨m_2
 1

	)

190 
	#bfd_mach_¨m_2a
 2

	)

191 
	#bfd_mach_¨m_3
 3

	)

192 
	#bfd_mach_¨m_3M
 4

	)

193 
	#bfd_mach_¨m_4
 5

	)

194 
	#bfd_mach_¨m_4T
 6

	)

195 
	#bfd_mach_¨m_5
 7

	)

196 
	#bfd_mach_¨m_5T
 8

	)

197 
	#bfd_mach_¨m_5TE
 9

	)

198 
	#bfd_mach_¨m_XSˇÀ
 10

	)

199 
	#bfd_mach_¨m_ï9312
 11

	)

200 
	#bfd_mach_¨m_iWMMXt
 12

	)

201 
	#bfd_mach_¨m_iWMMXt2
 13

	)

202 
	mbfd_¨ch_ns32k
,

203 
	mbfd_¨ch_w65
,

204 
	mbfd_¨ch_tic30
,

205 
	mbfd_¨ch_v850
,

206 
	#bfd_mach_v850
 0

	)

207 
	mbfd_¨ch_¨c
,

208 
	#bfd_mach_¨c_ba£
 0

	)

209 
	mbfd_¨ch_m32r
,

210 
	#bfd_mach_m32r
 0

	)

211 
	mbfd_¨ch_mn10200
,

212 
	mbfd_¨ch_mn10300
,

213 
	mbfd_¨ch_¸is
,

214 
	#bfd_mach_¸is_v0_v10
 255

	)

215 
	#bfd_mach_¸is_v32
 32

	)

216 
	#bfd_mach_¸is_v10_v32
 1032

	)

217 
	mbfd_¨ch_œ°


219 
	#bfd_mach_s390_31
 31

	)

220 
	#bfd_mach_s390_64
 64

	)

222 
	ssymbﬁ_ˇche_íåy


224 c⁄° *
	m«me
;

227 
PTR
 
	mp
;

228 
bfd_vma
 
	mi
;

229 } 
	mud©a
;

230 } 
	tasymbﬁ
;

234 
	edis_ö¢_ty≥
 {

235 
	mdis_n⁄ö¢
,

236 
	mdis_n⁄bønch
,

237 
	mdis_bønch
,

238 
	mdis_c⁄dbønch
,

239 
	mdis_j§
,

240 
	mdis_c⁄dj§
,

241 
	mdis_dªf
,

242 
	mdis_dªf2


255 
	sdißs£mbÀ_öfo
 {

258 
PTR
 
	m≠∂iˇti⁄_d©a
;

264 
bfd_Êavour
 
	mÊavour
;

266 
bfd_¨chôe˘uª
 
	m¨ch
;

268 
	mmach
;

270 
bfd_ídün
 
	mídün
;

277 
asymbﬁ
 **
	msymbﬁs
;

279 
	mnum_symbﬁs
;

284 
	mÊags
;

285 
	#INSN_HAS_RELOC
 0x80000000

	)

286 
PTR
 
	m¥iv©e_d©a
;

293 (*
	mªad_mem‹y_func
)

294 
PARAMS
 ((
bfd_vma
 
memaddr
,
bfd_byã
 *
myaddr
,
Àngth
,
dißs£mbÀ_öfo
 *
öfo
));

300 (*
	mmem‹y_îr‹_func
)

301 
PARAMS
 ((
°©us
, 
bfd_vma
 
memaddr
, 
dißs£mbÀ_öfo
 *
öfo
));

304 (*
	m¥öt_addªss_func
)

305 
PARAMS
 ((
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
));

314 (* 
	msymbﬁ_©_addªss_func
)

315 
PARAMS
 ((
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 * 
öfo
));

318 
bfd_byã
 *
	mbuf„r
;

319 
bfd_vma
 
	mbuf„r_vma
;

320 
	mbuf„r_Àngth
;

326 
	mbyãs_≥r_löe
;

333 
	mbyãs_≥r_chunk
;

334 
bfd_ídün
 
	mdi•œy_ídün
;

343 
	mö¢_öfo_vÆid
;

344 
	mbønch_dñay_ö¢s
;

346 
	md©a_size
;

347 
dis_ö¢_ty≥
 
	mö¢_ty≥
;

348 
bfd_vma
 
	mèrgë
;

350 
bfd_vma
 
	mèrgë2
;

353 * 
	mdißs£mbÀr_›ti⁄s
;

355 } 
	tdißs£mbÀ_öfo
;

360 (*
	tdißs£mbÀr_·y≥
)

361 
	tPARAMS
((
	tbfd_vma
, 
	tdißs£mbÀ_öfo
 *));

363 
¥öt_ö¢_big_mùs
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

364 
¥öt_ö¢_lôée_mùs
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

365 
¥öt_ö¢_i386
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

366 
¥öt_ö¢_m68k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

367 
¥öt_ö¢_z8001
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

368 
¥öt_ö¢_z8002
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

369 
¥öt_ö¢_h8300
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

370 
¥öt_ö¢_h8300h
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

371 
¥öt_ö¢_h8300s
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

372 
¥öt_ö¢_h8500
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

373 
¥öt_ö¢_Æpha
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

374 
dißs£mbÀr_·y≥
 
¨c_gë_dißs£mbÀr
 
	`PARAMS
 ((, ));

375 
¥öt_ö¢_¨m
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

376 
¥öt_ö¢_•¨c
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

377 
¥öt_ö¢_big_a29k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

378 
¥öt_ö¢_lôée_a29k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

379 
¥öt_ö¢_i960
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

380 
¥öt_ö¢_sh
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

381 
¥öt_ö¢_shl
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

382 
¥öt_ö¢_hµa
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

383 
¥öt_ö¢_m32r
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

384 
¥öt_ö¢_m88k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

385 
¥öt_ö¢_mn10200
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

386 
¥öt_ö¢_mn10300
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

387 
¥öt_ö¢_ns32k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

388 
¥öt_ö¢_big_powîpc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

389 
¥öt_ö¢_lôée_powîpc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

390 
¥öt_ö¢_rs6000
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

391 
¥öt_ö¢_w65
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

392 
¥öt_ö¢_d10v
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

393 
¥öt_ö¢_v850
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

394 
¥öt_ö¢_tic30
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

395 
¥öt_ö¢_µc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

396 
¥öt_ö¢_s390
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

397 
¥öt_ö¢_¸isv32
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

401 
dißs£mbÀr_·y≥
 
dißs£mbÀr
 
	`PARAMS
 ((
bfd
 *));

410 
buf„r_ªad_mem‹y


411 
	`PARAMS
 ((
bfd_vma
, 
bfd_byã
 *, , 
dißs£mbÀ_öfo
 *));

415 
≥º‹_mem‹y
 
	`PARAMS
 ((, 
bfd_vma
, 
dißs£mbÀ_öfo
 *));

421 
gíîic_¥öt_addªss


422 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

425 
gíîic_symbﬁ_©_addªss


426 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

430 
	#INIT_DISASSEMBLE_INFO
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
) \

431 (
INFO
).
Êavour
 = 
bfd_èrgë_unknown_Êavour
, \

432 (
INFO
).
¨ch
 = 
bfd_¨ch_unknown
, \

433 (
INFO
).
mach
 = 0, \

434 (
INFO
).
ídün
 = 
BFD_ENDIAN_UNKNOWN
, \

435 
	`INIT_DISASSEMBLE_INFO_NO_ARCH
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
)

	)

442 
	#INIT_DISASSEMBLE_INFO_NO_ARCH
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
) \

443 (
INFO
).
symbﬁs
 = 
NULL
, \

444 (
INFO
).
num_symbﬁs
 = 0, \

445 (
INFO
).
¥iv©e_d©a
 = 
NULL
, \

446 (
INFO
).
buf„r
 = 
NULL
, \

447 (
INFO
).
buf„r_vma
 = 0, \

448 (
INFO
).
buf„r_Àngth
 = 0, \

449 (
INFO
).
ªad_mem‹y_func
 = 
buf„r_ªad_mem‹y
, \

450 (
INFO
).
mem‹y_îr‹_func
 = 
≥º‹_mem‹y
, \

451 (
INFO
).
¥öt_addªss_func
 = 
gíîic_¥öt_addªss
, \

452 (
INFO
).
symbﬁ_©_addªss_func
 = 
gíîic_symbﬁ_©_addªss
, \

453 (
INFO
).
Êags
 = 0, \

454 (
INFO
).
byãs_≥r_löe
 = 0, \

455 (
INFO
).
byãs_≥r_chunk
 = 0, \

456 (
INFO
).
di•œy_ídün
 = 
BFD_ENDIAN_UNKNOWN
, \

457 (
INFO
).
dißs£mbÀr_›ti⁄s
 = 
NULL
, \

458 (
INFO
).
ö¢_öfo_vÆid
 = 0

	)

460 
	#_
(
x
Ë
	)
x

461 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

465 
bfd_vma
 
	`bfd_gël32
 (c⁄° 
bfd_byã
 *
addr
);

466 
bfd_vma
 
	`bfd_gëb32
 (c⁄° 
bfd_byã
 *
addr
);

467 
bfd_vma
 
	`bfd_gël16
 (c⁄° 
bfd_byã
 *
addr
);

468 
bfd_vma
 
	`bfd_gëb16
 (c⁄° 
bfd_byã
 *
addr
);

469 
	ebfd_boﬁón
 {
Ál£
, 
åue
} 
	tboﬁón
;

470 
boﬁón
 
	tbfd_boﬁón
;

	@kern/disas.c

1 
	~<kîn/dis-asm.h
>

2 
	~<kîn/dißs.h
>

3 
	~<öc/îr‹.h
>

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°rög.h
>

10 
	$buf„r_ªad_mem‹y
(
bfd_vma
 
memaddr
,
bfd_byã
 *
myaddr
,
Àngth
,
dißs£mbÀ_öfo
 *
öfo
)

13 i‡((
memaddr
 < 
öfo
->
buf„r_vma
)

14 ||(
memaddr
 + 
Àngth
 > 
öfo
->
buf„r_vma
 + info->
buf„r_Àngth
))

20 
	`memmove
 (
myaddr
, 
öfo
->
buf„r
 + (
memaddr
 - info->
buf„r_vma
), 
Àngth
);

22 
	}
}

26 
	$≥º‹_mem‹y
 (
°©us
, 
bfd_vma
 
memaddr
, 
dißs£mbÀ_öfo
 *
öfo
)

28 i‡(
°©us
 != -1)

30 
	`˝rötf
("Unknow¿îr‹ %d\n", 
°©us
);

34 
	`˝rötf
("Addªs†0x%08x i†ouào‡bounds.\n", 
memaddr
);

35 
	}
}

38 
	$gíîic_¥öt_addªss
 (
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
)

40 
	`˝rötf
("0x%08x",
addr
);

41 
	}
}

46 
	$gíîic_symbﬁ_©_addªss
 (
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
)

49 
	}
}

51 
bfd_vma
 
	$bfd_gël32
 (c⁄° 
bfd_byã
 *
addr
)

53 
v
;

55 
v
 = (Ë
addr
[0];

56 
v
 |(Ë
addr
[1] << 8;

57 
v
 |(Ë
addr
[2] << 16;

58 
v
 |(Ë
addr
[3] << 24;

59  (
bfd_vma
Ë
v
;

60 
	}
}

62 
bfd_vma
 
	$bfd_gëb32
 (c⁄° 
bfd_byã
 *
addr
)

64 
v
;

66 
v
 = (Ë
addr
[0] << 24;

67 
v
 |(Ë
addr
[1] << 16;

68 
v
 |(Ë
addr
[2] << 8;

69 
v
 |(Ë
addr
[3];

70  (
bfd_vma
Ë
v
;

71 
	}
}

73 
bfd_vma
 
	$bfd_gël16
 (c⁄° 
bfd_byã
 *
addr
)

75 
v
;

77 
v
 = (Ë
addr
[0];

78 
v
 |(Ë
addr
[1] << 8;

79  (
bfd_vma
Ë
v
;

80 
	}
}

82 
bfd_vma
 
	$bfd_gëb16
 (c⁄° 
bfd_byã
 *
addr
)

84 
v
;

86 
v
 = (Ë
addr
[0] << 24;

87 
v
 |(Ë
addr
[1] << 16;

88  (
bfd_vma
Ë
v
;

89 
	}
}

91 
	$m⁄ô‹_dißs
(
uöt32_t
 
pc
, 
nb_ö¢
)

93 
cou¡
, 
i
;

94 
dißs£mbÀ_öfo
 
dißsm_öfo
;

95 (*
¥öt_ö¢
)(
bfd_vma
 
pc
, 
dißs£mbÀ_öfo
 *
öfo
);

97 
	`INIT_DISASSEMBLE_INFO
(
dißsm_öfo
, 
NULL
, 
˝rötf
);

103 
dißsm_öfo
.
buf„r_vma
 = 
pc
;

104 
dißsm_öfo
.
buf„r_Àngth
=7;

105 
dißsm_öfo
.
buf„r
=(
bfd_byã
 *)
pc
;

109 
	`˝rötf
("\n");

110 
dißsm_öfo
.
ídün
 = 
BFD_ENDIAN_LITTLE
;

112 
dißsm_öfo
.
mach
 = 
bfd_mach_i386_i386
;

113 
¥öt_ö¢
 = 
¥öt_ö¢_i386
;

115 
i
 = 0; i < 
nb_ö¢
; i++) {

116 
	`˝rötf
("0x%08x: ", 
pc
);

118 
cou¡
 = 
	`¥öt_ö¢
(
pc
, &
dißsm_öfo
);

119 
	`˝rötf
("\n");

120 i‡(
cou¡
 < 0)

122 
pc
 +
cou¡
;

124 
	}
}

	@kern/disas.h

1 #i‚de‡
_KERN_DISAS_H


2 
	#_KERN_DISAS_H


	)

3 
m⁄ô‹_dißs
(
uöt32_t
 
pc
, 
nb_ö¢
);

	@kern/e100.c

44 
	~<öc/x86.h
>

45 
	~<öc/as£π.h
>

47 
	~<kîn/e100.h
>

48 
	~<kîn/pci.h
>

50 
	#CSR_STATUS
 0x0

	)

51 
	#CSR_STAT_ACK
 0x1

	)

52 
	#CSR_CMD_LO
 0x2

	)

53 
	#CSR_CMD_HI
 0x3

	)

54 
	#CSR_GEN_PTR
 0x4

	)

55 
	#CSR_PORT
 0x8

	)

56 
	#CSR_FLASH_CTRL
 0xc

	)

57 
	#CSR_EEPROM_CTRL_LO
 0xe

	)

58 
	#CSR_EEPROM_CTRL_HI
 0xf

	)

59 
	#CSR_MDI_CTRL
 0x10

	)

60 
	#CSR_RX_DMA_COUNT
 0x14

	)

61 
	escb_°©us
{

62 
	mrus_ªady
=0x10,

63 
	mrus_mask
=0x3c,

65 
	eru_°©e
{

66 
	mRU_SUSPENDED
=0,

67 
	mRU_RUNNING
=1,

68 
	mRU_UNINITIALIZED
=-1,

70 
	escb_°©_ack
{

71 
	m°©_ack_nŸ_ours
=0x00,

72 
	m°©_ack_sw_gí
=0x04,

73 
	m°©_ack_∫r
=0x10,

74 
	m°©_ack_cu_idÀ
=0x20,

75 
	m°©_ack_‰ame_rx
=0x40,

76 
	m°©_ack_cu_cmd_d⁄e
=0x80,

77 
	m°©_ack_nŸ_¥e£¡
=0xFF,

78 
	m°©_ack_rx
=(
°©_ack_sw_gí
|
°©_ack_∫r
|
°©_ack_‰ame_rx
),

79 
	m°©_ack_tx
=(
°©_ack_cu_idÀ
|
°©_ack_cu_cmd_d⁄e
),

85 
	escb_cmd_hi
{

86 
	múq_mask_n⁄e
=0x00,

87 
	múq_mask_Æl
=0x01,

88 
	múq_sw_gí
=0x02,

90 
	escb_cmd_lo
{

91 
	mcuc_n›
=0x00,

92 
	mruc_°¨t
=0x01,

93 
	mruc_lﬂd_ba£
=0x06,

94 
	mcuc_°¨t
=0x10,

95 
	mcuc_ªsume
=0x20,

96 
	mcuc_dump_addr
=0x40,

97 
	mcuc_dump_°©s
=0x50,

98 
	mcuc_lﬂd_ba£
=0x60,

99 
	mcuc_dump_ª£t
=0x70,

101 
	ep‹t
{

102 
	mso·w¨e_ª£t
=0x0000,

103 
	m£l·e°
=0x0001,

104 
	m£À˘ive_ª£t
=0x0002,

107 
	scb
{

108 vﬁ©ûê
uöt16_t
 
	m°©us
;

109 
uöt16_t
 
	mcmd
;

110 
uöt32_t
 
	mlök
;

115 
	$dñay
()

117 
	`öb
(0x84);

118 
	`öb
(0x84);

119 
	`öb
(0x84);

120 
	`öb
(0x84);

121 
	`öb
(0x84);

122 
	`öb
(0x84);

123 
	`öb
(0x84);

124 
	`öb
(0x84);

125 
	}
}

126 
	gCSR_ADDR
;

128 
	$pci_e100_©èch
(
pci_func
 *
pcif
)

130 
	`pci_func_íabÀ
(
pcif
);

131 
	`˝rötf
("CSR Mem‹y M≠≥d Ba£ Addªs†Regi°î:%d byã†© 0x%x\n",
pcif
->
ªg_size
[0],pcif->
ªg_ba£
[0]);

132 
	`˝rötf
("CSR I/O M≠≥d Ba£ Addªs†Regi°î:%d byã†© 0x%x\n",
pcif
->
ªg_size
[1],pcif->
ªg_ba£
[1]);

133 
	`˝rötf
("Fœsh Mem‹y Ba£ Addªs†Regi°î:%d byã†© 0x%x\n",
pcif
->
ªg_size
[2],pcif->
ªg_ba£
[2]);

134 
CSR_ADDR
=
pcif
->
ªg_ba£
[1];

135 
	`˝rötf
("p‹t:0x%x,£À˘ive_ª£t=0x%x\n",
CSR_ADDR
+
CSR_PORT
,
£À˘ive_ª£t
);

136 
	`oué
(
CSR_ADDR
+
CSR_PORT
,
so·w¨e_ª£t
);

137 
	`dñay
();

140 
	}
}

	@kern/e100.h

1 #i‚de‡
JOS_KERN_E100_H


2 
	#JOS_KERN_E100_H


	)

3 
	~<öc/ty≥s.h
>

4 
	~<kîn/pci.h
>

5 
	#PCI_VENDOR_ID_INTEL
 0x8086

	)

6 
	#INTEL_82559_ETHERNET_DEVICE_ID
 0x1209

	)

8 
pci_e100_©èch
(
pci_func
 *
pcif
);

	@kern/env.c

3 
	~<öc/x86.h
>

4 
	~<öc/mmu.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/ñf.h
>

10 
	~<kîn/ív.h
>

11 
	~<kîn/pm≠.h
>

12 
	~<kîn/å≠.h
>

13 
	~<kîn/m⁄ô‹.h
>

14 
	~<kîn/sched.h
>

16 
Env
 *
	gívs
 = 
NULL
;

17 
Env
 *
	gcuªnv
 = 
NULL
;

18 
Env_li°
 
	gív_‰ì_li°
;

20 
	#ENVGENSHIFT
 12

21 

	)

34 
	$ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
)

36 
Env
 *
e
;

39 i‡(
ívid
 == 0) {

40 *
ív_°‹e
 = 
cuªnv
;

49 
e
 = &
ívs
[
	`ENVX
(
ívid
)];

50 i‡(
e
->
ív_°©us
 =
ENV_FREE
 ||É->
ív_id
 !
ívid
) {

51 *
ív_°‹e
 = 0;

52  -
E_BAD_ENV
;

60 i‡(
check≥rm
 && 
e
 !
cuªnv
 &&É->
ív_∑ª¡_id
 !cuªnv->
ív_id
) {

61 *
ív_°‹e
 = 0;

62  -
E_BAD_ENV
;

65 *
ív_°‹e
 = 
e
;

67 
	}
}

76 
	$ív_öô
()

79 
i
;

80 
	`LIST_INIT
(&
ív_‰ì_li°
);

81 
i
=
NENV
-1;i>=0;i--)

83 
ívs
[
i
].
ív_id
=0;

84 
ívs
[
i
].
ív_°©us
=
ENV_FREE
;

85 
	`LIST_INSERT_HEAD
(&
ív_‰ì_li°
,&
ívs
[
i
],
ív_lök
);

87 
	}
}

100 
	$ív_£tup_vm
(
Env
 *
e
)

102 
i
, 
r
;

103 
Page
 *
p
 = 
NULL
;

106 i‡((
r
 = 
	`∑ge_Æloc
(&
p
)) < 0)

107  
r
;

128 
e
->
ív_¸3
=
	`∑ge2∑
(
p
);

129 
e
->
ív_pgdú
=(
pde_t
*)
	`∑ge2kva
(
p
);

130 
p
->
µ_ªf
++;

131 
	`mem£t
(
e
->
ív_pgdú
,0,
PGSIZE
);

132 
i
=
	`PDX
(
UTOP
);i<
NPDENTRIES
;i++)

133 
e
->
ív_pgdú
[
i
]=
boŸ_pgdú
[i];

136 
e
->
ív_pgdú
[
	`PDX
(
VPT
)] =É->
ív_¸3
 | 
PTE_P
 | 
PTE_W
;

137 
e
->
ív_pgdú
[
	`PDX
(
UVPT
)] =É->
ív_¸3
 | 
PTE_P
 | 
PTE_U
;

140 
	}
}

151 
	$ív_Æloc
(
Env
 **
√wív_°‹e
, 
ívid_t
 
∑ª¡_id
)

153 
öt32_t
 
gíî©i⁄
;

154 
r
;

155 
Env
 *
e
;

157 i‡(!(
e
 = 
	`LIST_FIRST
(&
ív_‰ì_li°
)))

158  -
E_NO_FREE_ENV
;

161 i‡((
r
 = 
	`ív_£tup_vm
(
e
)) < 0)

162  
r
;

165 
gíî©i⁄
 = (
e
->
ív_id
 + (1 << 
ENVGENSHIFT
)Ë& ~(
NENV
 - 1);

166 i‡(
gíî©i⁄
 <= 0)

167 
gíî©i⁄
 = 1 << 
ENVGENSHIFT
;

168 
e
->
ív_id
 = 
gíî©i⁄
 | (ê- 
ívs
);

171 
e
->
ív_∑ª¡_id
 = 
∑ª¡_id
;

172 
e
->
ív_°©us
 = 
ENV_RUNNABLE
;

173 
e
->
ív_runs
 = 0;

179 
	`mem£t
(&
e
->
ív_tf
, 0, (e->env_tf));

186 
e
->
ív_tf
.
tf_ds
 = 
GD_UD
 | 3;

187 
e
->
ív_tf
.
tf_es
 = 
GD_UD
 | 3;

188 
e
->
ív_tf
.
tf_ss
 = 
GD_UD
 | 3;

189 
e
->
ív_tf
.
tf_e•
 = 
USTACKTOP
;

190 
e
->
ív_tf
.
tf_cs
 = 
GD_UT
 | 3;

195 
e
->
ív_tf
.
tf_eÊags
|=
FL_IF
;

197 
e
->
ív_pgÁu…_upˇŒ
 = 0;

200 
e
->
ív_ùc_ªcvög
 = 0;

204 if(
e
==&
ívs
[1])

205 
e
->
ív_tf
.
tf_eÊags
|=
FL_IOPL_3
;

207 
	`LIST_REMOVE
(
e
, 
ív_lök
);

208 *
√wív_°‹e
 = 
e
;

212 
	}
}

222 
	$£gmít_Æloc
(
Env
 *
e
, *
va
, 
size_t
 
Àn
)

230 
uöçå_t
 
a
,
œ°
;

231 
Page
 *
⁄ïage
;

232 
a
=
	`ROUNDDOWN
((
phyßddr_t
)
va
,
PGSIZE
);

233 
œ°
=
	`ROUNDDOWN
((
phyßddr_t
)(
va
+
Àn
),
PGSIZE
);

235 if(
	`∑ge_Æloc
(&
⁄ïage
)<0)

236 
	`∑nic
("AllocÖhysicalÖage failed!\n");

238 if(
	`∑ge_ö£π
(
e
->
ív_pgdú
,
⁄ïage
,(*)
a
,
PTE_U
|
PTE_W
)<0)

239 
	`∑nic
("InsertÖage failed!\n");

240 if(
a
==
œ°
) ;

241 
a
˜+
PGSIZE
;

243 
	}
}

268 
	$lﬂd_icode
(
Env
 *
e
, 
uöt8_t
 *
bö¨y
, 
size_t
 
size
)

299 
phyßddr_t
 
ﬁd_¸3
;

300 
Elf
 *
ñfhdr
;

301 
Proghdr
 *
ph
,*
ïh
;

302 
Page
 *
⁄ïage
;

304 
ﬁd_¸3
=
	`r¸3
();

305 
	`l¸3
(
e
->
ív_¸3
);

306 
ñfhdr
=(
Elf
*)
bö¨y
;

308 if(
ñfhdr
->
e_magic
!=
ELF_MAGIC
)

309 
	`∑nic
("This binary isÇot ELF format!\n");

310 
ph
 = (
Proghdr
*)(
bö¨y
+
ñfhdr
->
e_phoff
);

311 
ïh
 = 
ph
+
ñfhdr
->
e_phnum
;

312 ;
ph
<
ïh
;ph++){

313 if(
ph
->
p_ty≥
 =
ELF_PROG_LOAD
)

315 
	`£gmít_Æloc
(
e
,(*)
ph
->
p_va
,ph->
p_memsz
);

317 
	`mem£t
((*)(
ph
->
p_va
+ph->
p_fûesz
),0,ph->
p_memsz
-ph->p_filesz);

318 
	`memmove
((*)
ph
->
p_va
,(*)(
bö¨y
+ph->
p_off£t
),ph->
p_fûesz
);

323 
e
->
ív_tf
.
tf_eù
=
ñfhdr
->
e_íåy
;

328 if(
	`∑ge_Æloc
(&
⁄ïage
)<0)

329 
	`∑nic
("Alloc oneÖage inÜoad_icode failed\n");

330 if(
	`∑ge_ö£π
(
e
->
ív_pgdú
,
⁄ïage
,(*)(
USTACKTOP
-
PGSIZE
),
PTE_U
|
PTE_W
)<0)

331 
	`∑nic
("Insert oneÖage inÜoad_icode failed\n");

332 
	`mem£t
((*)(
USTACKTOP
-
PGSIZE
),0,PGSIZE);

333 
	`l¸3
(
ﬁd_¸3
);

334 
	}
}

344 
	$ív_¸óã
(
uöt8_t
 *
bö¨y
, 
size_t
 
size
)

347 
r
;

348 
Env
 *
√wív
;

349 if((
r
=
	`ív_Æloc
(&
√wív
,0))<0)

350 
	`∑nic
("ív_¸óã:%e",
r
);

351 
	`lﬂd_icode
(
√wív
,
bö¨y
,
size
);

352 
	}
}

358 
	$ív_‰ì
(
Env
 *
e
)

360 
±e_t
 *
±
;

361 
uöt32_t
 
pdío
, 
±ío
;

362 
phyßddr_t
 
∑
;

367 i‡(
e
 =
cuªnv
)

368 
	`l¸3
(
boŸ_¸3
);

374 
	`°©ic_as£π
(
UTOP
 % 
PTSIZE
 == 0);

375 
pdío
 = 0;Ödíÿ< 
	`PDX
(
UTOP
);Ödeno++) {

378 i‡(!(
e
->
ív_pgdú
[
pdío
] & 
PTE_P
))

382 
∑
 = 
	`PTE_ADDR
(
e
->
ív_pgdú
[
pdío
]);

383 
±
 = (
±e_t
*Ë
	`KADDR
(
∑
);

386 
±ío
 = 0;Öãnÿ<
	`PTX
(~0);Öteno++) {

387 i‡(
±
[
±ío
] & 
PTE_P
)

388 
	`∑ge_ªmove
(
e
->
ív_pgdú
, 
	`PGADDR
(
pdío
, 
±ío
, 0));

392 
e
->
ív_pgdú
[
pdío
] = 0;

393 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

397 
∑
 = 
e
->
ív_¸3
;

398 
e
->
ív_pgdú
 = 0;

399 
e
->
ív_¸3
 = 0;

400 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

403 
e
->
ív_°©us
 = 
ENV_FREE
;

404 
	`LIST_INSERT_HEAD
(&
ív_‰ì_li°
, 
e
, 
ív_lök
);

405 
	}
}

413 
	$ív_de°roy
(
Env
 *
e
)

415 
	`ív_‰ì
(
e
);

417 i‡(
cuªnv
 =
e
) {

418 
cuªnv
 = 
NULL
;

419 
	`sched_yõld
();

421 
	}
}

431 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
)

433 
__asm
 
	`__vﬁ©ûe
("movl %0,%%esp\n"

439 : : "g" (
tf
) : "memory");

440 
	`∑nic
("iret failed");

441 
	}
}

450 
	$ív_run
(
Env
 *
e
)

466 
cuªnv
=
e
;

467 
cuªnv
->
ív_runs
++;

468 
	`l¸3
(
cuªnv
->
ív_¸3
);

470 
	`ív_p›_tf
(&
cuªnv
->
ív_tf
);

472 
	}
}

	@kern/env.h

3 #i‚de‡
JOS_KERN_ENV_H


4 
	#JOS_KERN_ENV_H


	)

6 
	~<öc/ív.h
>

8 #i‚de‡
JOS_MULTIENV


11 
	#JOS_MULTIENV
 0

	)

14 
Env
 *
ívs
;

15 
Env
 *
cuªnv
;

17 
LIST_HEAD
(
Env_li°
, 
Env
);

19 
ív_öô
();

20 
ív_Æloc
(
Env
 **
e
, 
ívid_t
 
∑ª¡_id
);

21 
ív_‰ì
(
Env
 *
e
);

22 
ív_¸óã
(
uöt8_t
 *
bö¨y
, 
size_t
 
size
);

23 
ív_de°roy
(
Env
 *
e
);

25 
ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
);

27 
	$ív_run
(
Env
 *
e
Ë
	`__©åibuã__
((
n‹ëu∫
));

28 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	#ENV_CREATE2
(
°¨t
, 
size
) { \

32 
uöt8_t
 
°¨t
[], 
size
[]; \

33 
	`ív_¸óã
(
°¨t
, ()
size
); \

34 
	}

	)
}

36 
	#ENV_CREATE
(
x
) { \

37 
uöt8_t
 
_bö¨y_obj_
##
x
##
_°¨t
[], \

38 
_bö¨y_obj_
##
x
##
_size
[]; \

39 
	`ív_¸óã
(
_bö¨y_obj_
##
x
##
_°¨t
, \

40 ()
_bö¨y_obj_
##
x
##
_size
); \

41 }

	)

	@kern/i386-dis.c

38 
	~<kîn/dis-asm.h
>

39 
	#MAXLEN
 20

	)

41 #i‚de‡
UNIXWARE_COMPAT


44 
	#UNIXWARE_COMPAT
 1

	)

47 
„tch_d©a
 
PARAMS
 ((
dißs£mbÀ_öfo
 *, 
bfd_byã
 *));

48 
ck¥efix
 
PARAMS
 (());

49 c⁄° *
¥efix_«me
 
PARAMS
 ((, ));

50 
¥öt_ö¢
 
PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

51 
doÊﬂt
 
PARAMS
 (());

52 
OP_ST
 
PARAMS
 ((, ));

53 
OP_STi
 
PARAMS
 ((, ));

54 
put›
 
PARAMS
 ((const *, ));

55 
ﬂµíd
 
PARAMS
 ((const *));

56 
≠≥nd_£g
 
PARAMS
 (());

57 
OP_ödúE
 
PARAMS
 ((, ));

58 
¥öt_›î™d_vÆue
 (*
buf
, 
size_t
 
bufsize
, 
hex
,

59 
bfd_vma
 
di•
);

60 
OP_E
 
PARAMS
 ((, ));

61 
OP_G
 
PARAMS
 ((, ));

62 
bfd_vma
 
gë64
 
PARAMS
 (());

63 
bfd_sig√d_vma
 
gë32
 
PARAMS
 (());

64 
bfd_sig√d_vma
 
gë32s
 
PARAMS
 (());

65 
gë16
 
PARAMS
 (());

66 
£t_›
 
PARAMS
 ((
bfd_vma
, ));

67 
OP_REG
 
PARAMS
 ((, ));

68 
OP_IMREG
 
PARAMS
 ((, ));

69 
OP_I
 
PARAMS
 ((, ));

70 
OP_I64
 
PARAMS
 ((, ));

71 
OP_sI
 
PARAMS
 ((, ));

72 
OP_J
 
PARAMS
 ((, ));

73 
OP_SEG
 
PARAMS
 ((, ));

74 
OP_DIR
 
PARAMS
 ((, ));

75 
OP_OFF
 
PARAMS
 ((, ));

76 
OP_OFF64
 
PARAMS
 ((, ));

77 
±r_ªg
 
PARAMS
 ((, ));

78 
OP_ESªg
 
PARAMS
 ((, ));

79 
OP_DSªg
 
PARAMS
 ((, ));

80 
OP_C
 
PARAMS
 ((, ));

81 
OP_D
 
PARAMS
 ((, ));

82 
OP_T
 
PARAMS
 ((, ));

83 
OP_Rd
 
PARAMS
 ((, ));

84 
OP_MMX
 
PARAMS
 ((, ));

85 
OP_XMM
 
PARAMS
 ((, ));

86 
OP_EM
 
PARAMS
 ((, ));

87 
OP_EX
 
PARAMS
 ((, ));

88 
OP_MS
 
PARAMS
 ((, ));

89 
OP_XS
 
PARAMS
 ((, ));

90 
OP_3DNowSuffix
 
PARAMS
 ((, ));

91 
OP_SIMD_Suffix
 
PARAMS
 ((, ));

92 
SIMD_Fixup
 
PARAMS
 ((, ));

93 
BadOp
 
PARAMS
 (());

95 
	sdis_¥iv©e
 {

97 
bfd_byã
 *
	mmax_„tched
;

98 
bfd_byã
 
	mthe_buf„r
[
MAXLEN
];

99 
bfd_vma
 
	mö¢_°¨t
;

100 
	m‹ig_sizeÊag
;

105 
	#FWAIT_OPCODE
 (0x9b)

	)

108 
	gmode_64bô
;

111 
	g¥efixes
;

114 
	gªx
;

116 
	gªx_u£d
;

117 
	#REX_MODE64
 8

	)

118 
	#REX_EXTX
 4

	)

119 
	#REX_EXTY
 2

	)

120 
	#REX_EXTZ
 1

	)

125 
	#USED_REX
(
vÆue
) \

127 i‡(
vÆue
) \

128 
ªx_u£d
 |(
ªx
 & 
vÆue
) ? (value) | 0x40 : 0; \

130 
ªx_u£d
 |= 0x40; \

131 }

	)

135 
	gu£d_¥efixes
;

138 
	#PREFIX_REPZ
 1

	)

139 
	#PREFIX_REPNZ
 2

	)

140 
	#PREFIX_LOCK
 4

	)

141 
	#PREFIX_CS
 8

	)

142 
	#PREFIX_SS
 0x10

	)

143 
	#PREFIX_DS
 0x20

	)

144 
	#PREFIX_ES
 0x40

	)

145 
	#PREFIX_FS
 0x80

	)

146 
	#PREFIX_GS
 0x100

	)

147 
	#PREFIX_DATA
 0x200

	)

148 
	#PREFIX_ADDR
 0x400

	)

149 
	#PREFIX_FWAIT
 0x800

	)

154 
	#FETCH_DATA
(
öfo
, 
addr
) \

155 ((
addr
Ë<((
dis_¥iv©e
 *Ë(
öfo
->
¥iv©e_d©a
))->
max_„tched
 \

156 ? 1 : 
	`„tch_d©a
 ((
öfo
), (
addr
)))

	)

159 
	$„tch_d©a
 (
öfo
, 
addr
)

160 
dißs£mbÀ_öfo
 *
öfo
;

161 
bfd_byã
 *
addr
;

163 
°©us
;

164 
dis_¥iv©e
 *
¥iv
 = (dis_¥iv©ê*Ë
öfo
->
¥iv©e_d©a
;

165 
bfd_vma
 
°¨t_vma
 = 
¥iv
->
ö¢_°¨t
 + (¥iv->
max_„tched
 -Öriv->
the_buf„r
);

167 
°©us
 = (*
öfo
->
ªad_mem‹y_func
)(
°¨t_vma
,
¥iv
->
max_„tched
,
addr
-priv->max_fetched,info);

168 i‡(
°©us
 != 0)

174 i‡(
¥iv
->
max_„tched
 =¥iv->
the_buf„r
)

175 (*
öfo
->
mem‹y_îr‹_func
Ë(
°©us
, 
°¨t_vma
, info);

179 
¥iv
->
max_„tched
 = 
addr
;

181 
	}
}

183 
	#XX
 
NULL
, 0

	)

185 
	#Eb
 
OP_E
, 
b_mode


	)

186 
	#Ev
 
OP_E
, 
v_mode


	)

187 
	#Ed
 
OP_E
, 
d_mode


	)

188 
	#ödúEb
 
OP_ödúE
, 
b_mode


	)

189 
	#ödúEv
 
OP_ödúE
, 
v_mode


	)

190 
	#Ew
 
OP_E
, 
w_mode


	)

191 
	#Ma
 
OP_E
, 
v_mode


	)

192 
	#M
 
OP_E
, 0

	)

193 
	#Mp
 
OP_E
, 0

	)

194 
	#Gb
 
OP_G
, 
b_mode


	)

195 
	#Gv
 
OP_G
, 
v_mode


	)

196 
	#Gd
 
OP_G
, 
d_mode


	)

197 
	#Gw
 
OP_G
, 
w_mode


	)

198 
	#Rd
 
OP_Rd
, 
d_mode


	)

199 
	#Rm
 
OP_Rd
, 
m_mode


	)

200 
	#Ib
 
OP_I
, 
b_mode


	)

201 
	#sIb
 
OP_sI
, 
b_mode


	)

202 
	#Iv
 
OP_I
, 
v_mode


	)

203 
	#Iq
 
OP_I
, 
q_mode


	)

204 
	#Iv64
 
OP_I64
, 
v_mode


	)

205 
	#Iw
 
OP_I
, 
w_mode


	)

206 
	#Jb
 
OP_J
, 
b_mode


	)

207 
	#Jv
 
OP_J
, 
v_mode


	)

208 
	#Cm
 
OP_C
, 
m_mode


	)

209 
	#Dm
 
OP_D
, 
m_mode


	)

210 
	#Td
 
OP_T
, 
d_mode


	)

212 
	#RMeAX
 
OP_REG
, 
eAX_ªg


	)

213 
	#RMeBX
 
OP_REG
, 
eBX_ªg


	)

214 
	#RMeCX
 
OP_REG
, 
eCX_ªg


	)

215 
	#RMeDX
 
OP_REG
, 
eDX_ªg


	)

216 
	#RMeSP
 
OP_REG
, 
eSP_ªg


	)

217 
	#RMeBP
 
OP_REG
, 
eBP_ªg


	)

218 
	#RMeSI
 
OP_REG
, 
eSI_ªg


	)

219 
	#RMeDI
 
OP_REG
, 
eDI_ªg


	)

220 
	#RMrAX
 
OP_REG
, 
rAX_ªg


	)

221 
	#RMrBX
 
OP_REG
, 
rBX_ªg


	)

222 
	#RMrCX
 
OP_REG
, 
rCX_ªg


	)

223 
	#RMrDX
 
OP_REG
, 
rDX_ªg


	)

224 
	#RMrSP
 
OP_REG
, 
rSP_ªg


	)

225 
	#RMrBP
 
OP_REG
, 
rBP_ªg


	)

226 
	#RMrSI
 
OP_REG
, 
rSI_ªg


	)

227 
	#RMrDI
 
OP_REG
, 
rDI_ªg


	)

228 
	#RMAL
 
OP_REG
, 
Æ_ªg


	)

229 
	#RMAL
 
OP_REG
, 
Æ_ªg


	)

230 
	#RMCL
 
OP_REG
, 
˛_ªg


	)

231 
	#RMDL
 
OP_REG
, 
dl_ªg


	)

232 
	#RMBL
 
OP_REG
, 
bl_ªg


	)

233 
	#RMAH
 
OP_REG
, 
ah_ªg


	)

234 
	#RMCH
 
OP_REG
, 
ch_ªg


	)

235 
	#RMDH
 
OP_REG
, 
dh_ªg


	)

236 
	#RMBH
 
OP_REG
, 
bh_ªg


	)

237 
	#RMAX
 
OP_REG
, 
ax_ªg


	)

238 
	#RMDX
 
OP_REG
, 
dx_ªg


	)

240 
	#eAX
 
OP_IMREG
, 
eAX_ªg


	)

241 
	#eBX
 
OP_IMREG
, 
eBX_ªg


	)

242 
	#eCX
 
OP_IMREG
, 
eCX_ªg


	)

243 
	#eDX
 
OP_IMREG
, 
eDX_ªg


	)

244 
	#eSP
 
OP_IMREG
, 
eSP_ªg


	)

245 
	#eBP
 
OP_IMREG
, 
eBP_ªg


	)

246 
	#eSI
 
OP_IMREG
, 
eSI_ªg


	)

247 
	#eDI
 
OP_IMREG
, 
eDI_ªg


	)

248 
	#AL
 
OP_IMREG
, 
Æ_ªg


	)

249 
	#AL
 
OP_IMREG
, 
Æ_ªg


	)

250 
	#CL
 
OP_IMREG
, 
˛_ªg


	)

251 
	#DL
 
OP_IMREG
, 
dl_ªg


	)

252 
	#BL
 
OP_IMREG
, 
bl_ªg


	)

253 
	#AH
 
OP_IMREG
, 
ah_ªg


	)

254 
	#CH
 
OP_IMREG
, 
ch_ªg


	)

255 
	#DH
 
OP_IMREG
, 
dh_ªg


	)

256 
	#BH
 
OP_IMREG
, 
bh_ªg


	)

257 
	#AX
 
OP_IMREG
, 
ax_ªg


	)

258 
	#DX
 
OP_IMREG
, 
dx_ªg


	)

259 
	#ödúDX
 
OP_IMREG
, 
ödú_dx_ªg


	)

261 
	#Sw
 
OP_SEG
, 
w_mode


	)

262 
	#Ap
 
OP_DIR
, 0

	)

263 
	#Ob
 
OP_OFF
, 
b_mode


	)

264 
	#Ob64
 
OP_OFF64
, 
b_mode


	)

265 
	#Ov
 
OP_OFF
, 
v_mode


	)

266 
	#Ov64
 
OP_OFF64
, 
v_mode


	)

267 
	#Xb
 
OP_DSªg
, 
eSI_ªg


	)

268 
	#Xv
 
OP_DSªg
, 
eSI_ªg


	)

269 
	#Yb
 
OP_ESªg
, 
eDI_ªg


	)

270 
	#Yv
 
OP_ESªg
, 
eDI_ªg


	)

271 
	#DSBX
 
OP_DSªg
, 
eBX_ªg


	)

273 
	#es
 
OP_REG
, 
es_ªg


	)

274 
	#ss
 
OP_REG
, 
ss_ªg


	)

275 
	#cs
 
OP_REG
, 
cs_ªg


	)

276 
	#ds
 
OP_REG
, 
ds_ªg


	)

277 
	#fs
 
OP_REG
, 
fs_ªg


	)

278 
	#gs
 
OP_REG
, 
gs_ªg


	)

280 
	#MX
 
OP_MMX
, 0

	)

281 
	#XM
 
OP_XMM
, 0

	)

282 
	#EM
 
OP_EM
, 
v_mode


	)

283 
	#EX
 
OP_EX
, 
v_mode


	)

284 
	#MS
 
OP_MS
, 
v_mode


	)

285 
	#XS
 
OP_XS
, 
v_mode


	)

286 
	#N⁄e
 
OP_E
, 0

	)

287 
	#OPSUF
 
OP_3DNowSuffix
, 0

	)

288 
	#OPSIMD
 
OP_SIMD_Suffix
, 0

	)

290 
	#c⁄d_jump_Êag
 
NULL
, 
c⁄d_jump_mode


	)

291 
	#lo›_jcxz_Êag
 
NULL
, 
lo›_jcxz_mode


	)

294 
	#SUFFIX_ALWAYS
 4

	)

295 
	#AFLAG
 2

	)

296 
	#DFLAG
 1

	)

298 
	#b_mode
 1

	)

299 
	#v_mode
 2

	)

300 
	#w_mode
 3

	)

301 
	#d_mode
 4

	)

302 
	#q_mode
 5

	)

303 
	#x_mode
 6

	)

304 
	#m_mode
 7

	)

305 
	#c⁄d_jump_mode
 8

	)

306 
	#lo›_jcxz_mode
 9

	)

308 
	#es_ªg
 100

	)

309 
	#cs_ªg
 101

	)

310 
	#ss_ªg
 102

	)

311 
	#ds_ªg
 103

	)

312 
	#fs_ªg
 104

	)

313 
	#gs_ªg
 105

	)

315 
	#eAX_ªg
 108

	)

316 
	#eCX_ªg
 109

	)

317 
	#eDX_ªg
 110

	)

318 
	#eBX_ªg
 111

	)

319 
	#eSP_ªg
 112

	)

320 
	#eBP_ªg
 113

	)

321 
	#eSI_ªg
 114

	)

322 
	#eDI_ªg
 115

	)

324 
	#Æ_ªg
 116

	)

325 
	#˛_ªg
 117

	)

326 
	#dl_ªg
 118

	)

327 
	#bl_ªg
 119

	)

328 
	#ah_ªg
 120

	)

329 
	#ch_ªg
 121

	)

330 
	#dh_ªg
 122

	)

331 
	#bh_ªg
 123

	)

333 
	#ax_ªg
 124

	)

334 
	#cx_ªg
 125

	)

335 
	#dx_ªg
 126

	)

336 
	#bx_ªg
 127

	)

337 
	#•_ªg
 128

	)

338 
	#bp_ªg
 129

	)

339 
	#si_ªg
 130

	)

340 
	#di_ªg
 131

	)

342 
	#rAX_ªg
 132

	)

343 
	#rCX_ªg
 133

	)

344 
	#rDX_ªg
 134

	)

345 
	#rBX_ªg
 135

	)

346 
	#rSP_ªg
 136

	)

347 
	#rBP_ªg
 137

	)

348 
	#rSI_ªg
 138

	)

349 
	#rDI_ªg
 139

	)

351 
	#ödú_dx_ªg
 150

	)

353 
	#FLOATCODE
 1

	)

354 
	#USE_GROUPS
 2

	)

355 
	#USE_PREFIX_USER_TABLE
 3

	)

356 
	#X86_64_SPECIAL
 4

	)

358 
	#FLOAT
 
NULL
, NULL, 
FLOATCODE
, NULL, 0, NULL, 0

	)

360 
	#GRP1b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 0, NULL, 0

	)

361 
	#GRP1S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 1, NULL, 0

	)

362 
	#GRP1Ss
 
NULL
, NULL, 
USE_GROUPS
, NULL, 2, NULL, 0

	)

363 
	#GRP2b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 3, NULL, 0

	)

364 
	#GRP2S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 4, NULL, 0

	)

365 
	#GRP2b_⁄e
 
NULL
, NULL, 
USE_GROUPS
, NULL, 5, NULL, 0

	)

366 
	#GRP2S_⁄e
 
NULL
, NULL, 
USE_GROUPS
, NULL, 6, NULL, 0

	)

367 
	#GRP2b_˛
 
NULL
, NULL, 
USE_GROUPS
, NULL, 7, NULL, 0

	)

368 
	#GRP2S_˛
 
NULL
, NULL, 
USE_GROUPS
, NULL, 8, NULL, 0

	)

369 
	#GRP3b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 9, NULL, 0

	)

370 
	#GRP3S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 10, NULL, 0

	)

371 
	#GRP4
 
NULL
, NULL, 
USE_GROUPS
, NULL, 11, NULL, 0

	)

372 
	#GRP5
 
NULL
, NULL, 
USE_GROUPS
, NULL, 12, NULL, 0

	)

373 
	#GRP6
 
NULL
, NULL, 
USE_GROUPS
, NULL, 13, NULL, 0

	)

374 
	#GRP7
 
NULL
, NULL, 
USE_GROUPS
, NULL, 14, NULL, 0

	)

375 
	#GRP8
 
NULL
, NULL, 
USE_GROUPS
, NULL, 15, NULL, 0

	)

376 
	#GRP9
 
NULL
, NULL, 
USE_GROUPS
, NULL, 16, NULL, 0

	)

377 
	#GRP10
 
NULL
, NULL, 
USE_GROUPS
, NULL, 17, NULL, 0

	)

378 
	#GRP11
 
NULL
, NULL, 
USE_GROUPS
, NULL, 18, NULL, 0

	)

379 
	#GRP12
 
NULL
, NULL, 
USE_GROUPS
, NULL, 19, NULL, 0

	)

380 
	#GRP13
 
NULL
, NULL, 
USE_GROUPS
, NULL, 20, NULL, 0

	)

381 
	#GRP14
 
NULL
, NULL, 
USE_GROUPS
, NULL, 21, NULL, 0

	)

382 
	#GRPAMD
 
NULL
, NULL, 
USE_GROUPS
, NULL, 22, NULL, 0

	)

384 
	#PREGRP0
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 0, NULL, 0

	)

385 
	#PREGRP1
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 1, NULL, 0

	)

386 
	#PREGRP2
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 2, NULL, 0

	)

387 
	#PREGRP3
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 3, NULL, 0

	)

388 
	#PREGRP4
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 4, NULL, 0

	)

389 
	#PREGRP5
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 5, NULL, 0

	)

390 
	#PREGRP6
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 6, NULL, 0

	)

391 
	#PREGRP7
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 7, NULL, 0

	)

392 
	#PREGRP8
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 8, NULL, 0

	)

393 
	#PREGRP9
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 9, NULL, 0

	)

394 
	#PREGRP10
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 10, NULL, 0

	)

395 
	#PREGRP11
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 11, NULL, 0

	)

396 
	#PREGRP12
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 12, NULL, 0

	)

397 
	#PREGRP13
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 13, NULL, 0

	)

398 
	#PREGRP14
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 14, NULL, 0

	)

399 
	#PREGRP15
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 15, NULL, 0

	)

400 
	#PREGRP16
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 16, NULL, 0

	)

401 
	#PREGRP17
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 17, NULL, 0

	)

402 
	#PREGRP18
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 18, NULL, 0

	)

403 
	#PREGRP19
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 19, NULL, 0

	)

404 
	#PREGRP20
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 20, NULL, 0

	)

405 
	#PREGRP21
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 21, NULL, 0

	)

406 
	#PREGRP22
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 22, NULL, 0

	)

407 
	#PREGRP23
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 23, NULL, 0

	)

408 
	#PREGRP24
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 24, NULL, 0

	)

409 
	#PREGRP25
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 25, NULL, 0

	)

410 
	#PREGRP26
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 26, NULL, 0

	)

412 
	#X86_64_0
 
NULL
, NULL, 
X86_64_SPECIAL
, NULL, 0, NULL, 0

	)

414 (*
	t›_πn
Ë
	tPARAMS
 ((
	tbyãmode
, 
	tsizeÊag
));

416 
	sdis386
 {

417 c⁄° *
«me
;

418 
›_πn
 
›1
;

419 
byãmode1
;

420 
›_πn
 
›2
;

421 
byãmode2
;

422 
›_πn
 
›3
;

423 
byãmode3
;

456 c⁄° 
dis386
 dis386[] = {

458 { "addB", 
Eb
, 
Gb
, 
XX
 },

459 { "addS", 
Ev
, 
Gv
, 
XX
 },

460 { "addB", 
Gb
, 
Eb
, 
XX
 },

461 { "addS", 
Gv
, 
Ev
, 
XX
 },

462 { "addB", 
AL
, 
Ib
, 
XX
 },

463 { "addS", 
eAX
, 
Iv
, 
XX
 },

464 { "push{T|}", 
es
, 
XX
, XX },

465 { "p›{T|}", 
es
, 
XX
, XX },

467 { "‹B", 
Eb
, 
Gb
, 
XX
 },

468 { "‹S", 
Ev
, 
Gv
, 
XX
 },

469 { "‹B", 
Gb
, 
Eb
, 
XX
 },

470 { "‹S", 
Gv
, 
Ev
, 
XX
 },

471 { "‹B", 
AL
, 
Ib
, 
XX
 },

472 { "‹S", 
eAX
, 
Iv
, 
XX
 },

473 { "push{T|}", 
cs
, 
XX
, XX },

474 { "(bad)", 
XX
, XX, XX },

476 { "adcB", 
Eb
, 
Gb
, 
XX
 },

477 { "adcS", 
Ev
, 
Gv
, 
XX
 },

478 { "adcB", 
Gb
, 
Eb
, 
XX
 },

479 { "adcS", 
Gv
, 
Ev
, 
XX
 },

480 { "adcB", 
AL
, 
Ib
, 
XX
 },

481 { "adcS", 
eAX
, 
Iv
, 
XX
 },

482 { "push{T|}", 
ss
, 
XX
, XX },

483 { "p›T|}", 
ss
, 
XX
, XX },

485 { "sbbB", 
Eb
, 
Gb
, 
XX
 },

486 { "sbbS", 
Ev
, 
Gv
, 
XX
 },

487 { "sbbB", 
Gb
, 
Eb
, 
XX
 },

488 { "sbbS", 
Gv
, 
Ev
, 
XX
 },

489 { "sbbB", 
AL
, 
Ib
, 
XX
 },

490 { "sbbS", 
eAX
, 
Iv
, 
XX
 },

491 { "push{T|}", 
ds
, 
XX
, XX },

492 { "p›{T|}", 
ds
, 
XX
, XX },

494 { "™dB", 
Eb
, 
Gb
, 
XX
 },

495 { "™dS", 
Ev
, 
Gv
, 
XX
 },

496 { "™dB", 
Gb
, 
Eb
, 
XX
 },

497 { "™dS", 
Gv
, 
Ev
, 
XX
 },

498 { "™dB", 
AL
, 
Ib
, 
XX
 },

499 { "™dS", 
eAX
, 
Iv
, 
XX
 },

500 { "(bad)", 
XX
, XX, XX },

501 { "dØ{|}", 
XX
, XX, XX },

503 { "subB", 
Eb
, 
Gb
, 
XX
 },

504 { "subS", 
Ev
, 
Gv
, 
XX
 },

505 { "subB", 
Gb
, 
Eb
, 
XX
 },

506 { "subS", 
Gv
, 
Ev
, 
XX
 },

507 { "subB", 
AL
, 
Ib
, 
XX
 },

508 { "subS", 
eAX
, 
Iv
, 
XX
 },

509 { "(bad)", 
XX
, XX, XX },

510 { "das{|}", 
XX
, XX, XX },

512 { "x‹B", 
Eb
, 
Gb
, 
XX
 },

513 { "x‹S", 
Ev
, 
Gv
, 
XX
 },

514 { "x‹B", 
Gb
, 
Eb
, 
XX
 },

515 { "x‹S", 
Gv
, 
Ev
, 
XX
 },

516 { "x‹B", 
AL
, 
Ib
, 
XX
 },

517 { "x‹S", 
eAX
, 
Iv
, 
XX
 },

518 { "(bad)", 
XX
, XX, XX },

519 { "Øa{|}", 
XX
, XX, XX },

521 { "cmpB", 
Eb
, 
Gb
, 
XX
 },

522 { "cmpS", 
Ev
, 
Gv
, 
XX
 },

523 { "cmpB", 
Gb
, 
Eb
, 
XX
 },

524 { "cmpS", 
Gv
, 
Ev
, 
XX
 },

525 { "cmpB", 
AL
, 
Ib
, 
XX
 },

526 { "cmpS", 
eAX
, 
Iv
, 
XX
 },

527 { "(bad)", 
XX
, XX, XX },

528 { "Øs{|}", 
XX
, XX, XX },

530 { "öc{S|}", 
RMeAX
, 
XX
, XX },

531 { "öc{S|}", 
RMeCX
, 
XX
, XX },

532 { "öc{S|}", 
RMeDX
, 
XX
, XX },

533 { "öc{S|}", 
RMeBX
, 
XX
, XX },

534 { "öc{S|}", 
RMeSP
, 
XX
, XX },

535 { "öc{S|}", 
RMeBP
, 
XX
, XX },

536 { "öc{S|}", 
RMeSI
, 
XX
, XX },

537 { "öc{S|}", 
RMeDI
, 
XX
, XX },

539 { "dec{S|}", 
RMeAX
, 
XX
, XX },

540 { "dec{S|}", 
RMeCX
, 
XX
, XX },

541 { "dec{S|}", 
RMeDX
, 
XX
, XX },

542 { "dec{S|}", 
RMeBX
, 
XX
, XX },

543 { "dec{S|}", 
RMeSP
, 
XX
, XX },

544 { "dec{S|}", 
RMeBP
, 
XX
, XX },

545 { "dec{S|}", 
RMeSI
, 
XX
, XX },

546 { "dec{S|}", 
RMeDI
, 
XX
, XX },

548 { "pushS", 
RMrAX
, 
XX
, XX },

549 { "pushS", 
RMrCX
, 
XX
, XX },

550 { "pushS", 
RMrDX
, 
XX
, XX },

551 { "pushS", 
RMrBX
, 
XX
, XX },

552 { "pushS", 
RMrSP
, 
XX
, XX },

553 { "pushS", 
RMrBP
, 
XX
, XX },

554 { "pushS", 
RMrSI
, 
XX
, XX },

555 { "pushS", 
RMrDI
, 
XX
, XX },

557 { "p›S", 
RMrAX
, 
XX
, XX },

558 { "p›S", 
RMrCX
, 
XX
, XX },

559 { "p›S", 
RMrDX
, 
XX
, XX },

560 { "p›S", 
RMrBX
, 
XX
, XX },

561 { "p›S", 
RMrSP
, 
XX
, XX },

562 { "p›S", 
RMrBP
, 
XX
, XX },

563 { "p›S", 
RMrSI
, 
XX
, XX },

564 { "p›S", 
RMrDI
, 
XX
, XX },

566 { "pusha{P|}", 
XX
, XX, XX },

567 { "p›a{P|}", 
XX
, XX, XX },

568 { "bound{S|}", 
Gv
, 
Ma
, 
XX
 },

569 { 
X86_64_0
 },

570 { "(bad)", 
XX
, XX, XX },

571 { "(bad)", 
XX
, XX, XX },

572 { "(bad)", 
XX
, XX, XX },

573 { "(bad)", 
XX
, XX, XX },

575 { "pushT", 
Iq
, 
XX
, XX },

576 { "imulS", 
Gv
, 
Ev
, 
Iv
 },

577 { "pushT", 
sIb
, 
XX
, XX },

578 { "imulS", 
Gv
, 
Ev
, 
sIb
 },

579 { "ös{b||b|}", 
Yb
, 
ödúDX
, 
XX
 },

580 { "ös{R||R|}", 
Yv
, 
ödúDX
, 
XX
 },

581 { "outs{b||b|}", 
ödúDX
, 
Xb
, 
XX
 },

582 { "outs{R||R|}", 
ödúDX
, 
Xv
, 
XX
 },

584 { "joH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

585 { "jnoH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

586 { "jbH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

587 { "j´H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

588 { "jeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

589 { "j√H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

590 { "jbeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

591 { "jaH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

593 { "jsH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

594 { "jnsH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

595 { "jpH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

596 { "j≈H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

597 { "jlH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

598 { "jgeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

599 { "jÀH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

600 { "jgH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

602 { 
GRP1b
 },

603 { 
GRP1S
 },

604 { "(bad)", 
XX
, XX, XX },

605 { 
GRP1Ss
 },

606 { "ã°B", 
Eb
, 
Gb
, 
XX
 },

607 { "ã°S", 
Ev
, 
Gv
, 
XX
 },

608 { "xchgB", 
Eb
, 
Gb
, 
XX
 },

609 { "xchgS", 
Ev
, 
Gv
, 
XX
 },

611 { "movB", 
Eb
, 
Gb
, 
XX
 },

612 { "movS", 
Ev
, 
Gv
, 
XX
 },

613 { "movB", 
Gb
, 
Eb
, 
XX
 },

614 { "movS", 
Gv
, 
Ev
, 
XX
 },

615 { "movQ", 
Ev
, 
Sw
, 
XX
 },

616 { "ÀaS", 
Gv
, 
M
, 
XX
 },

617 { "movQ", 
Sw
, 
Ev
, 
XX
 },

618 { "p›U", 
Ev
, 
XX
, XX },

620 { "n›", 
XX
, XX, XX },

622 { "xchgS", 
RMeCX
, 
eAX
, 
XX
 },

623 { "xchgS", 
RMeDX
, 
eAX
, 
XX
 },

624 { "xchgS", 
RMeBX
, 
eAX
, 
XX
 },

625 { "xchgS", 
RMeSP
, 
eAX
, 
XX
 },

626 { "xchgS", 
RMeBP
, 
eAX
, 
XX
 },

627 { "xchgS", 
RMeSI
, 
eAX
, 
XX
 },

628 { "xchgS", 
RMeDI
, 
eAX
, 
XX
 },

630 { "cW{tR||tR|}", 
XX
, XX, XX },

631 { "cR{tO||tO|}", 
XX
, XX, XX },

632 { "lˇŒ{T|}", 
Ap
, 
XX
, XX },

633 { "(bad)", 
XX
, XX, XX },

634 { "pushfT", 
XX
, XX, XX },

635 { "p›fT", 
XX
, XX, XX },

636 { "ßhf{|}", 
XX
, XX, XX },

637 { "œhf{|}", 
XX
, XX, XX },

639 { "movB", 
AL
, 
Ob64
, 
XX
 },

640 { "movS", 
eAX
, 
Ov64
, 
XX
 },

641 { "movB", 
Ob64
, 
AL
, 
XX
 },

642 { "movS", 
Ov64
, 
eAX
, 
XX
 },

643 { "movs{b||b|}", 
Yb
, 
Xb
, 
XX
 },

644 { "movs{R||R|}", 
Yv
, 
Xv
, 
XX
 },

645 { "cmps{b||b|}", 
Xb
, 
Yb
, 
XX
 },

646 { "cmps{R||R|}", 
Xv
, 
Yv
, 
XX
 },

648 { "ã°B", 
AL
, 
Ib
, 
XX
 },

649 { "ã°S", 
eAX
, 
Iv
, 
XX
 },

650 { "°osB", 
Yb
, 
AL
, 
XX
 },

651 { "°osS", 
Yv
, 
eAX
, 
XX
 },

652 { "lodsB", 
AL
, 
Xb
, 
XX
 },

653 { "lodsS", 
eAX
, 
Xv
, 
XX
 },

654 { "sˇsB", 
AL
, 
Yb
, 
XX
 },

655 { "sˇsS", 
eAX
, 
Yv
, 
XX
 },

657 { "movB", 
RMAL
, 
Ib
, 
XX
 },

658 { "movB", 
RMCL
, 
Ib
, 
XX
 },

659 { "movB", 
RMDL
, 
Ib
, 
XX
 },

660 { "movB", 
RMBL
, 
Ib
, 
XX
 },

661 { "movB", 
RMAH
, 
Ib
, 
XX
 },

662 { "movB", 
RMCH
, 
Ib
, 
XX
 },

663 { "movB", 
RMDH
, 
Ib
, 
XX
 },

664 { "movB", 
RMBH
, 
Ib
, 
XX
 },

666 { "movS", 
RMeAX
, 
Iv64
, 
XX
 },

667 { "movS", 
RMeCX
, 
Iv64
, 
XX
 },

668 { "movS", 
RMeDX
, 
Iv64
, 
XX
 },

669 { "movS", 
RMeBX
, 
Iv64
, 
XX
 },

670 { "movS", 
RMeSP
, 
Iv64
, 
XX
 },

671 { "movS", 
RMeBP
, 
Iv64
, 
XX
 },

672 { "movS", 
RMeSI
, 
Iv64
, 
XX
 },

673 { "movS", 
RMeDI
, 
Iv64
, 
XX
 },

675 { 
GRP2b
 },

676 { 
GRP2S
 },

677 { "ªtT", 
Iw
, 
XX
, XX },

678 { "ªtT", 
XX
, XX, XX },

679 { "Às{S|}", 
Gv
, 
Mp
, 
XX
 },

680 { "ldsS", 
Gv
, 
Mp
, 
XX
 },

681 { "movA", 
Eb
, 
Ib
, 
XX
 },

682 { "movQ", 
Ev
, 
Iv
, 
XX
 },

684 { "íãrT", 
Iw
, 
Ib
, 
XX
 },

685 { "ÀaveT", 
XX
, XX, XX },

686 { "ÃëP", 
Iw
, 
XX
, XX },

687 { "ÃëP", 
XX
, XX, XX },

688 { "öt3", 
XX
, XX, XX },

689 { "öt", 
Ib
, 
XX
, XX },

690 { "öto{|}", 
XX
, XX, XX },

691 { "úëP", 
XX
, XX, XX },

693 { 
GRP2b_⁄e
 },

694 { 
GRP2S_⁄e
 },

695 { 
GRP2b_˛
 },

696 { 
GRP2S_˛
 },

697 { "Øm{|}", 
sIb
, 
XX
, XX },

698 { "Ød{|}", 
sIb
, 
XX
, XX },

699 { "(bad)", 
XX
, XX, XX },

700 { "xœt", 
DSBX
, 
XX
, XX },

702 { 
FLOAT
 },

703 { 
FLOAT
 },

704 { 
FLOAT
 },

705 { 
FLOAT
 },

706 { 
FLOAT
 },

707 { 
FLOAT
 },

708 { 
FLOAT
 },

709 { 
FLOAT
 },

711 { "lo›√FH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

712 { "lo›eFH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

713 { "lo›FH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

714 { "jEcxzH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

715 { "öB", 
AL
, 
Ib
, 
XX
 },

716 { "öS", 
eAX
, 
Ib
, 
XX
 },

717 { "outB", 
Ib
, 
AL
, 
XX
 },

718 { "outS", 
Ib
, 
eAX
, 
XX
 },

720 { "ˇŒT", 
Jv
, 
XX
, XX },

721 { "jmpT", 
Jv
, 
XX
, XX },

722 { "ljmp{T|}", 
Ap
, 
XX
, XX },

723 { "jmp", 
Jb
, 
XX
, XX },

724 { "öB", 
AL
, 
ödúDX
, 
XX
 },

725 { "öS", 
eAX
, 
ödúDX
, 
XX
 },

726 { "outB", 
ödúDX
, 
AL
, 
XX
 },

727 { "outS", 
ödúDX
, 
eAX
, 
XX
 },

729 { "(bad)", 
XX
, XX, XX },

730 { "(bad)", 
XX
, XX, XX },

731 { "(bad)", 
XX
, XX, XX },

732 { "(bad)", 
XX
, XX, XX },

733 { "h…", 
XX
, XX, XX },

734 { "cmc", 
XX
, XX, XX },

735 { 
GRP3b
 },

736 { 
GRP3S
 },

738 { "˛c", 
XX
, XX, XX },

739 { "°c", 
XX
, XX, XX },

740 { "˛i", 
XX
, XX, XX },

741 { "°i", 
XX
, XX, XX },

742 { "˛d", 
XX
, XX, XX },

743 { "°d", 
XX
, XX, XX },

744 { 
GRP4
 },

745 { 
GRP5
 },

746 
	}
};

748 c⁄° 
dis386
 
	gdis386_twobyã
[] = {

750 { 
GRP6
 },

751 { 
GRP7
 },

752 { "œrS", 
Gv
, 
Ew
, 
XX
 },

753 { "l¶S", 
Gv
, 
Ew
, 
XX
 },

754 { "(bad)", 
XX
, XX, XX },

755 { "sysˇŒ", 
XX
, XX, XX },

756 { "˛ts", 
XX
, XX, XX },

757 { "sy§ëP", 
XX
, XX, XX },

759 { "övd", 
XX
, XX, XX },

760 { "wbövd", 
XX
, XX, XX },

761 { "(bad)", 
XX
, XX, XX },

762 { "ud2a", 
XX
, XX, XX },

763 { "(bad)", 
XX
, XX, XX },

764 { 
GRPAMD
 },

765 { "„mms", 
XX
, XX, XX },

766 { "", 
MX
, 
EM
, 
OPSUF
 },

768 { 
PREGRP8
 },

769 { 
PREGRP9
 },

770 { "movÕX", 
XM
, 
EX
, 
SIMD_Fixup
, 'h' },

771 { "movÕX", 
EX
, 
XM
, 
SIMD_Fixup
, 'h' },

772 { "u≈ckÕX", 
XM
, 
EX
, 
XX
 },

773 { "u≈ckhpX", 
XM
, 
EX
, 
XX
 },

774 { "movhpX", 
XM
, 
EX
, 
SIMD_Fixup
, 'l' },

775 { "movhpX", 
EX
, 
XM
, 
SIMD_Fixup
, 'l' },

777 { 
GRP14
 },

778 { "(bad)", 
XX
, XX, XX },

779 { "(bad)", 
XX
, XX, XX },

780 { "(bad)", 
XX
, XX, XX },

781 { "(bad)", 
XX
, XX, XX },

782 { "(bad)", 
XX
, XX, XX },

783 { "(bad)", 
XX
, XX, XX },

784 { "(bad)", 
XX
, XX, XX },

786 { "movL", 
Rm
, 
Cm
, 
XX
 },

787 { "movL", 
Rm
, 
Dm
, 
XX
 },

788 { "movL", 
Cm
, 
Rm
, 
XX
 },

789 { "movL", 
Dm
, 
Rm
, 
XX
 },

790 { "movL", 
Rd
, 
Td
, 
XX
 },

791 { "(bad)", 
XX
, XX, XX },

792 { "movL", 
Td
, 
Rd
, 
XX
 },

793 { "(bad)", 
XX
, XX, XX },

795 { "mov≠X", 
XM
, 
EX
, 
XX
 },

796 { "mov≠X", 
EX
, 
XM
, 
XX
 },

797 { 
PREGRP2
 },

798 { "mov¡pX", 
Ev
, 
XM
, 
XX
 },

799 { 
PREGRP4
 },

800 { 
PREGRP3
 },

801 { "ucomisX", 
XM
,
EX
, 
XX
 },

802 { "comisX", 
XM
,
EX
, 
XX
 },

804 { "wrm§", 
XX
, XX, XX },

805 { "rdtsc", 
XX
, XX, XX },

806 { "rdm§", 
XX
, XX, XX },

807 { "rdpmc", 
XX
, XX, XX },

808 { "sy£¡î", 
XX
, XX, XX },

809 { "sy£xô", 
XX
, XX, XX },

810 { "(bad)", 
XX
, XX, XX },

811 { "(bad)", 
XX
, XX, XX },

813 { "(bad)", 
XX
, XX, XX },

814 { "(bad)", 
XX
, XX, XX },

815 { "(bad)", 
XX
, XX, XX },

816 { "(bad)", 
XX
, XX, XX },

817 { "(bad)", 
XX
, XX, XX },

818 { "(bad)", 
XX
, XX, XX },

819 { "(bad)", 
XX
, XX, XX },

820 { "(bad)", 
XX
, XX, XX },

822 { "cmovo", 
Gv
, 
Ev
, 
XX
 },

823 { "cmovno", 
Gv
, 
Ev
, 
XX
 },

824 { "cmovb", 
Gv
, 
Ev
, 
XX
 },

825 { "cmov´", 
Gv
, 
Ev
, 
XX
 },

826 { "cmove", 
Gv
, 
Ev
, 
XX
 },

827 { "cmov√", 
Gv
, 
Ev
, 
XX
 },

828 { "cmovbe", 
Gv
, 
Ev
, 
XX
 },

829 { "cmova", 
Gv
, 
Ev
, 
XX
 },

831 { "cmovs", 
Gv
, 
Ev
, 
XX
 },

832 { "cmovns", 
Gv
, 
Ev
, 
XX
 },

833 { "cmovp", 
Gv
, 
Ev
, 
XX
 },

834 { "cmov≈", 
Gv
, 
Ev
, 
XX
 },

835 { "cmovl", 
Gv
, 
Ev
, 
XX
 },

836 { "cmovge", 
Gv
, 
Ev
, 
XX
 },

837 { "cmovÀ", 
Gv
, 
Ev
, 
XX
 },

838 { "cmovg", 
Gv
, 
Ev
, 
XX
 },

840 { "movmskpX", 
Gd
, 
XS
, 
XX
 },

841 { 
PREGRP13
 },

842 { 
PREGRP12
 },

843 { 
PREGRP11
 },

844 { "™dpX", 
XM
, 
EX
, 
XX
 },

845 { "™d≈X", 
XM
, 
EX
, 
XX
 },

846 { "‹pX", 
XM
, 
EX
, 
XX
 },

847 { "x‹pX", 
XM
, 
EX
, 
XX
 },

849 { 
PREGRP0
 },

850 { 
PREGRP10
 },

851 { 
PREGRP17
 },

852 { 
PREGRP16
 },

853 { 
PREGRP14
 },

854 { 
PREGRP7
 },

855 { 
PREGRP5
 },

856 { 
PREGRP6
 },

858 { "pu≈cklbw", 
MX
, 
EM
, 
XX
 },

859 { "pu≈cklwd", 
MX
, 
EM
, 
XX
 },

860 { "pu≈ckldq", 
MX
, 
EM
, 
XX
 },

861 { "∑cksswb", 
MX
, 
EM
, 
XX
 },

862 { "pcmpgtb", 
MX
, 
EM
, 
XX
 },

863 { "pcmpgtw", 
MX
, 
EM
, 
XX
 },

864 { "pcmpgtd", 
MX
, 
EM
, 
XX
 },

865 { "∑ckuswb", 
MX
, 
EM
, 
XX
 },

867 { "pu≈ckhbw", 
MX
, 
EM
, 
XX
 },

868 { "pu≈ckhwd", 
MX
, 
EM
, 
XX
 },

869 { "pu≈ckhdq", 
MX
, 
EM
, 
XX
 },

870 { "∑ckssdw", 
MX
, 
EM
, 
XX
 },

871 { 
PREGRP26
 },

872 { 
PREGRP24
 },

873 { "movd", 
MX
, 
Ed
, 
XX
 },

874 { 
PREGRP19
 },

876 { 
PREGRP22
 },

877 { 
GRP10
 },

878 { 
GRP11
 },

879 { 
GRP12
 },

880 { "pcm≥qb", 
MX
, 
EM
, 
XX
 },

881 { "pcm≥qw", 
MX
, 
EM
, 
XX
 },

882 { "pcm≥qd", 
MX
, 
EM
, 
XX
 },

883 { "emms", 
XX
, XX, XX },

885 { "(bad)", 
XX
, XX, XX },

886 { "(bad)", 
XX
, XX, XX },

887 { "(bad)", 
XX
, XX, XX },

888 { "(bad)", 
XX
, XX, XX },

889 { "(bad)", 
XX
, XX, XX },

890 { "(bad)", 
XX
, XX, XX },

891 { 
PREGRP23
 },

892 { 
PREGRP20
 },

894 { "joH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

895 { "jnoH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

896 { "jbH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

897 { "j´H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

898 { "jeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

899 { "j√H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

900 { "jbeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

901 { "jaH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

903 { "jsH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

904 { "jnsH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

905 { "jpH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

906 { "j≈H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

907 { "jlH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

908 { "jgeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

909 { "jÀH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

910 { "jgH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

912 { "£to", 
Eb
, 
XX
, XX },

913 { "£äo", 
Eb
, 
XX
, XX },

914 { "£tb", 
Eb
, 
XX
, XX },

915 { "£èe", 
Eb
, 
XX
, XX },

916 { "£ã", 
Eb
, 
XX
, XX },

917 { "£äe", 
Eb
, 
XX
, XX },

918 { "£tbe", 
Eb
, 
XX
, XX },

919 { "£è", 
Eb
, 
XX
, XX },

921 { "£ts", 
Eb
, 
XX
, XX },

922 { "£äs", 
Eb
, 
XX
, XX },

923 { "£ç", 
Eb
, 
XX
, XX },

924 { "£äp", 
Eb
, 
XX
, XX },

925 { "£é", 
Eb
, 
XX
, XX },

926 { "£tge", 
Eb
, 
XX
, XX },

927 { "£ée", 
Eb
, 
XX
, XX },

928 { "£tg", 
Eb
, 
XX
, XX },

930 { "pushT", 
fs
, 
XX
, XX },

931 { "p›T", 
fs
, 
XX
, XX },

932 { "˝uid", 
XX
, XX, XX },

933 { "btS", 
Ev
, 
Gv
, 
XX
 },

934 { "shldS", 
Ev
, 
Gv
, 
Ib
 },

935 { "shldS", 
Ev
, 
Gv
, 
CL
 },

936 { "(bad)", 
XX
, XX, XX },

937 { "(bad)", 
XX
, XX, XX },

939 { "pushT", 
gs
, 
XX
, XX },

940 { "p›T", 
gs
, 
XX
, XX },

941 { "rsm", 
XX
, XX, XX },

942 { "btsS", 
Ev
, 
Gv
, 
XX
 },

943 { "shrdS", 
Ev
, 
Gv
, 
Ib
 },

944 { "shrdS", 
Ev
, 
Gv
, 
CL
 },

945 { 
GRP13
 },

946 { "imulS", 
Gv
, 
Ev
, 
XX
 },

948 { "cmpxchgB", 
Eb
, 
Gb
, 
XX
 },

949 { "cmpxchgS", 
Ev
, 
Gv
, 
XX
 },

950 { "lssS", 
Gv
, 
Mp
, 
XX
 },

951 { "båS", 
Ev
, 
Gv
, 
XX
 },

952 { "lfsS", 
Gv
, 
Mp
, 
XX
 },

953 { "lgsS", 
Gv
, 
Mp
, 
XX
 },

954 { "movz{bR|x|bR|x}", 
Gv
, 
Eb
, 
XX
 },

955 { "movz{wR|x|wR|x}", 
Gv
, 
Ew
, 
XX
 },

957 { "(bad)", 
XX
, XX, XX },

958 { "ud2b", 
XX
, XX, XX },

959 { 
GRP8
 },

960 { "btcS", 
Ev
, 
Gv
, 
XX
 },

961 { "bsfS", 
Gv
, 
Ev
, 
XX
 },

962 { "b§S", 
Gv
, 
Ev
, 
XX
 },

963 { "movs{bR|x|bR|x}", 
Gv
, 
Eb
, 
XX
 },

964 { "movs{wR|x|wR|x}", 
Gv
, 
Ew
, 
XX
 },

966 { "xaddB", 
Eb
, 
Gb
, 
XX
 },

967 { "xaddS", 
Ev
, 
Gv
, 
XX
 },

968 { 
PREGRP1
 },

969 { "mov¡iS", 
Ev
, 
Gv
, 
XX
 },

970 { "pö§w", 
MX
, 
Ed
, 
Ib
 },

971 { "≥xåw", 
Gd
, 
MS
, 
Ib
 },

972 { "shuÂX", 
XM
, 
EX
, 
Ib
 },

973 { 
GRP9
 },

975 { "bsw≠", 
RMeAX
, 
XX
, XX },

976 { "bsw≠", 
RMeCX
, 
XX
, XX },

977 { "bsw≠", 
RMeDX
, 
XX
, XX },

978 { "bsw≠", 
RMeBX
, 
XX
, XX },

979 { "bsw≠", 
RMeSP
, 
XX
, XX },

980 { "bsw≠", 
RMeBP
, 
XX
, XX },

981 { "bsw≠", 
RMeSI
, 
XX
, XX },

982 { "bsw≠", 
RMeDI
, 
XX
, XX },

984 { "(bad)", 
XX
, XX, XX },

985 { "p§lw", 
MX
, 
EM
, 
XX
 },

986 { "p§ld", 
MX
, 
EM
, 
XX
 },

987 { "p§lq", 
MX
, 
EM
, 
XX
 },

988 { "∑ddq", 
MX
, 
EM
, 
XX
 },

989 { "pmuŒw", 
MX
, 
EM
, 
XX
 },

990 { 
PREGRP21
 },

991 { "pmovmskb", 
Gd
, 
MS
, 
XX
 },

993 { "psubusb", 
MX
, 
EM
, 
XX
 },

994 { "psubusw", 
MX
, 
EM
, 
XX
 },

995 { "pmöub", 
MX
, 
EM
, 
XX
 },

996 { "∑nd", 
MX
, 
EM
, 
XX
 },

997 { "∑ddusb", 
MX
, 
EM
, 
XX
 },

998 { "∑ddusw", 
MX
, 
EM
, 
XX
 },

999 { "pmaxub", 
MX
, 
EM
, 
XX
 },

1000 { "∑ndn", 
MX
, 
EM
, 
XX
 },

1002 { "∑vgb", 
MX
, 
EM
, 
XX
 },

1003 { "p§aw", 
MX
, 
EM
, 
XX
 },

1004 { "p§ad", 
MX
, 
EM
, 
XX
 },

1005 { "∑vgw", 
MX
, 
EM
, 
XX
 },

1006 { "pmulhuw", 
MX
, 
EM
, 
XX
 },

1007 { "pmulhw", 
MX
, 
EM
, 
XX
 },

1008 { 
PREGRP15
 },

1009 { 
PREGRP25
 },

1011 { "psubsb", 
MX
, 
EM
, 
XX
 },

1012 { "psubsw", 
MX
, 
EM
, 
XX
 },

1013 { "pmösw", 
MX
, 
EM
, 
XX
 },

1014 { "p‹", 
MX
, 
EM
, 
XX
 },

1015 { "∑ddsb", 
MX
, 
EM
, 
XX
 },

1016 { "∑ddsw", 
MX
, 
EM
, 
XX
 },

1017 { "pmaxsw", 
MX
, 
EM
, 
XX
 },

1018 { "px‹", 
MX
, 
EM
, 
XX
 },

1020 { "(bad)", 
XX
, XX, XX },

1021 { "p¶lw", 
MX
, 
EM
, 
XX
 },

1022 { "p¶ld", 
MX
, 
EM
, 
XX
 },

1023 { "p¶lq", 
MX
, 
EM
, 
XX
 },

1024 { "pmuludq", 
MX
, 
EM
, 
XX
 },

1025 { "pmaddwd", 
MX
, 
EM
, 
XX
 },

1026 { "pßdbw", 
MX
, 
EM
, 
XX
 },

1027 { 
PREGRP18
 },

1029 { "psubb", 
MX
, 
EM
, 
XX
 },

1030 { "psubw", 
MX
, 
EM
, 
XX
 },

1031 { "psubd", 
MX
, 
EM
, 
XX
 },

1032 { "psubq", 
MX
, 
EM
, 
XX
 },

1033 { "∑ddb", 
MX
, 
EM
, 
XX
 },

1034 { "∑ddw", 
MX
, 
EM
, 
XX
 },

1035 { "∑ddd", 
MX
, 
EM
, 
XX
 },

1036 { "(bad)", 
XX
, XX, XX }

1039 c⁄° 
	g⁄ebyã_has_modrm
[256] = {

1062 c⁄° 
	gtwobyã_has_modrm
[256] = {

1085 c⁄° 
	gtwobyã_u£s_SSE_¥efix
[256] = {

1108 
	gobuf
[100];

1109 *
	gobuÂ
;

1110 
	gs¸©chbuf
[100];

1111 *
	g°¨t_codï
;

1112 *
	gö¢_codï
;

1113 *
	gcodï
;

1114 
dißs£mbÀ_öfo
 *
	gthe_öfo
;

1115 
	gmod
;

1116 
	grm
;

1117 
	gªg
;

1118 
	g√ed_modrm
;

1123 
	#MODRM_CHECK
 i‡(!
√ed_modrm
Ë
	`∑nic
("modî check");

	)

1125 c⁄° * c⁄° *
	g«mes64
;

1126 c⁄° * c⁄° *
	g«mes32
;

1127 c⁄° * c⁄° *
	g«mes16
;

1128 c⁄° * c⁄° *
	g«mes8
;

1129 c⁄° * c⁄° *
	g«mes8ªx
;

1130 c⁄° * c⁄° *
	g«mes_£g
;

1131 c⁄° * c⁄° *
	gödex16
;

1133 c⁄° * c⁄° 
	göãl_«mes64
[] = {

1137 c⁄° * c⁄° 
	göãl_«mes32
[] = {

1141 c⁄° * c⁄° 
	göãl_«mes16
[] = {

1145 c⁄° * c⁄° 
	göãl_«mes8
[] = {

1148 c⁄° * c⁄° 
	göãl_«mes8ªx
[] = {

1152 c⁄° * c⁄° 
	göãl_«mes_£g
[] = {

1155 c⁄° * c⁄° 
	göãl_ödex16
[] = {

1159 c⁄° * c⁄° 
	g©t_«mes64
[] = {

1163 c⁄° * c⁄° 
	g©t_«mes32
[] = {

1167 c⁄° * c⁄° 
	g©t_«mes16
[] = {

1171 c⁄° * c⁄° 
	g©t_«mes8
[] = {

1174 c⁄° * c⁄° 
	g©t_«mes8ªx
[] = {

1178 c⁄° * c⁄° 
	g©t_«mes_£g
[] = {

1181 c⁄° * c⁄° 
	g©t_ödex16
[] = {

1185 c⁄° 
dis386
 
	ggΩs
[][8] = {

1188 { "addA", 
Eb
, 
Ib
, 
XX
 },

1189 { "‹A", 
Eb
, 
Ib
, 
XX
 },

1190 { "adcA", 
Eb
, 
Ib
, 
XX
 },

1191 { "sbbA", 
Eb
, 
Ib
, 
XX
 },

1192 { "™dA", 
Eb
, 
Ib
, 
XX
 },

1193 { "subA", 
Eb
, 
Ib
, 
XX
 },

1194 { "x‹A", 
Eb
, 
Ib
, 
XX
 },

1195 { "cmpA", 
Eb
, 
Ib
, 
XX
 }

1199 { "addQ", 
Ev
, 
Iv
, 
XX
 },

1200 { "‹Q", 
Ev
, 
Iv
, 
XX
 },

1201 { "adcQ", 
Ev
, 
Iv
, 
XX
 },

1202 { "sbbQ", 
Ev
, 
Iv
, 
XX
 },

1203 { "™dQ", 
Ev
, 
Iv
, 
XX
 },

1204 { "subQ", 
Ev
, 
Iv
, 
XX
 },

1205 { "x‹Q", 
Ev
, 
Iv
, 
XX
 },

1206 { "cmpQ", 
Ev
, 
Iv
, 
XX
 }

1210 { "addQ", 
Ev
, 
sIb
, 
XX
 },

1211 { "‹Q", 
Ev
, 
sIb
, 
XX
 },

1212 { "adcQ", 
Ev
, 
sIb
, 
XX
 },

1213 { "sbbQ", 
Ev
, 
sIb
, 
XX
 },

1214 { "™dQ", 
Ev
, 
sIb
, 
XX
 },

1215 { "subQ", 
Ev
, 
sIb
, 
XX
 },

1216 { "x‹Q", 
Ev
, 
sIb
, 
XX
 },

1217 { "cmpQ", 
Ev
, 
sIb
, 
XX
 }

1221 { "rﬁA", 
Eb
, 
Ib
, 
XX
 },

1222 { "r‹A", 
Eb
, 
Ib
, 
XX
 },

1223 { "r˛A", 
Eb
, 
Ib
, 
XX
 },

1224 { "r¸A", 
Eb
, 
Ib
, 
XX
 },

1225 { "shlA", 
Eb
, 
Ib
, 
XX
 },

1226 { "shrA", 
Eb
, 
Ib
, 
XX
 },

1227 { "(bad)", 
XX
, XX, XX },

1228 { "ßrA", 
Eb
, 
Ib
, 
XX
 },

1232 { "rﬁQ", 
Ev
, 
Ib
, 
XX
 },

1233 { "r‹Q", 
Ev
, 
Ib
, 
XX
 },

1234 { "r˛Q", 
Ev
, 
Ib
, 
XX
 },

1235 { "r¸Q", 
Ev
, 
Ib
, 
XX
 },

1236 { "shlQ", 
Ev
, 
Ib
, 
XX
 },

1237 { "shrQ", 
Ev
, 
Ib
, 
XX
 },

1238 { "(bad)", 
XX
, XX, XX },

1239 { "ßrQ", 
Ev
, 
Ib
, 
XX
 },

1243 { "rﬁA", 
Eb
, 
XX
, XX },

1244 { "r‹A", 
Eb
, 
XX
, XX },

1245 { "r˛A", 
Eb
, 
XX
, XX },

1246 { "r¸A", 
Eb
, 
XX
, XX },

1247 { "shlA", 
Eb
, 
XX
, XX },

1248 { "shrA", 
Eb
, 
XX
, XX },

1249 { "(bad)", 
XX
, XX, XX },

1250 { "ßrA", 
Eb
, 
XX
, XX },

1254 { "rﬁQ", 
Ev
, 
XX
, XX },

1255 { "r‹Q", 
Ev
, 
XX
, XX },

1256 { "r˛Q", 
Ev
, 
XX
, XX },

1257 { "r¸Q", 
Ev
, 
XX
, XX },

1258 { "shlQ", 
Ev
, 
XX
, XX },

1259 { "shrQ", 
Ev
, 
XX
, XX },

1260 { "(bad)", 
XX
, XX, XX},

1261 { "ßrQ", 
Ev
, 
XX
, XX },

1265 { "rﬁA", 
Eb
, 
CL
, 
XX
 },

1266 { "r‹A", 
Eb
, 
CL
, 
XX
 },

1267 { "r˛A", 
Eb
, 
CL
, 
XX
 },

1268 { "r¸A", 
Eb
, 
CL
, 
XX
 },

1269 { "shlA", 
Eb
, 
CL
, 
XX
 },

1270 { "shrA", 
Eb
, 
CL
, 
XX
 },

1271 { "(bad)", 
XX
, XX, XX },

1272 { "ßrA", 
Eb
, 
CL
, 
XX
 },

1276 { "rﬁQ", 
Ev
, 
CL
, 
XX
 },

1277 { "r‹Q", 
Ev
, 
CL
, 
XX
 },

1278 { "r˛Q", 
Ev
, 
CL
, 
XX
 },

1279 { "r¸Q", 
Ev
, 
CL
, 
XX
 },

1280 { "shlQ", 
Ev
, 
CL
, 
XX
 },

1281 { "shrQ", 
Ev
, 
CL
, 
XX
 },

1282 { "(bad)", 
XX
, XX, XX },

1283 { "ßrQ", 
Ev
, 
CL
, 
XX
 }

1287 { "ã°A", 
Eb
, 
Ib
, 
XX
 },

1288 { "(bad)", 
Eb
, 
XX
, XX },

1289 { "nŸA", 
Eb
, 
XX
, XX },

1290 { "√gA", 
Eb
, 
XX
, XX },

1291 { "mulA", 
Eb
, 
XX
, XX },

1292 { "imulA", 
Eb
, 
XX
, XX },

1293 { "divA", 
Eb
, 
XX
, XX },

1294 { "idivA", 
Eb
, 
XX
, XX }

1298 { "ã°Q", 
Ev
, 
Iv
, 
XX
 },

1299 { "(bad)", 
XX
, XX, XX },

1300 { "nŸQ", 
Ev
, 
XX
, XX },

1301 { "√gQ", 
Ev
, 
XX
, XX },

1302 { "mulQ", 
Ev
, 
XX
, XX },

1303 { "imulQ", 
Ev
, 
XX
, XX },

1304 { "divQ", 
Ev
, 
XX
, XX },

1305 { "idivQ", 
Ev
, 
XX
, XX },

1309 { "öcA", 
Eb
, 
XX
, XX },

1310 { "decA", 
Eb
, 
XX
, XX },

1311 { "(bad)", 
XX
, XX, XX },

1312 { "(bad)", 
XX
, XX, XX },

1313 { "(bad)", 
XX
, XX, XX },

1314 { "(bad)", 
XX
, XX, XX },

1315 { "(bad)", 
XX
, XX, XX },

1316 { "(bad)", 
XX
, XX, XX },

1320 { "öcQ", 
Ev
, 
XX
, XX },

1321 { "decQ", 
Ev
, 
XX
, XX },

1322 { "ˇŒT", 
ödúEv
, 
XX
, XX },

1323 { "lˇŒT", 
ödúEv
, 
XX
, XX },

1324 { "jmpT", 
ödúEv
, 
XX
, XX },

1325 { "ljmpT", 
ödúEv
, 
XX
, XX },

1326 { "pushU", 
Ev
, 
XX
, XX },

1327 { "(bad)", 
XX
, XX, XX },

1331 { "¶dtQ", 
Ev
, 
XX
, XX },

1332 { "°rQ", 
Ev
, 
XX
, XX },

1333 { "Œdt", 
Ew
, 
XX
, XX },

1334 { "…r", 
Ew
, 
XX
, XX },

1335 { "vîr", 
Ew
, 
XX
, XX },

1336 { "vîw", 
Ew
, 
XX
, XX },

1337 { "(bad)", 
XX
, XX, XX },

1338 { "(bad)", 
XX
, XX, XX }

1342 { "sgdtQ", 
M
, 
XX
, XX },

1343 { "sidtQ", 
M
, 
XX
, XX },

1344 { "lgdtQ", 
M
, 
XX
, XX },

1345 { "lidtQ", 
M
, 
XX
, XX },

1346 { "smswQ", 
Ev
, 
XX
, XX },

1347 { "(bad)", 
XX
, XX, XX },

1348 { "lmsw", 
Ew
, 
XX
, XX },

1349 { "övÕg", 
Ew
, 
XX
, XX },

1353 { "(bad)", 
XX
, XX, XX },

1354 { "(bad)", 
XX
, XX, XX },

1355 { "(bad)", 
XX
, XX, XX },

1356 { "(bad)", 
XX
, XX, XX },

1357 { "btQ", 
Ev
, 
Ib
, 
XX
 },

1358 { "btsQ", 
Ev
, 
Ib
, 
XX
 },

1359 { "båQ", 
Ev
, 
Ib
, 
XX
 },

1360 { "btcQ", 
Ev
, 
Ib
, 
XX
 },

1364 { "(bad)", 
XX
, XX, XX },

1365 { "cmpxchg8b", 
Ev
, 
XX
, XX },

1366 { "(bad)", 
XX
, XX, XX },

1367 { "(bad)", 
XX
, XX, XX },

1368 { "(bad)", 
XX
, XX, XX },

1369 { "(bad)", 
XX
, XX, XX },

1370 { "(bad)", 
XX
, XX, XX },

1371 { "(bad)", 
XX
, XX, XX },

1375 { "(bad)", 
XX
, XX, XX },

1376 { "(bad)", 
XX
, XX, XX },

1377 { "p§lw", 
MS
, 
Ib
, 
XX
 },

1378 { "(bad)", 
XX
, XX, XX },

1379 { "p§aw", 
MS
, 
Ib
, 
XX
 },

1380 { "(bad)", 
XX
, XX, XX },

1381 { "p¶lw", 
MS
, 
Ib
, 
XX
 },

1382 { "(bad)", 
XX
, XX, XX },

1386 { "(bad)", 
XX
, XX, XX },

1387 { "(bad)", 
XX
, XX, XX },

1388 { "p§ld", 
MS
, 
Ib
, 
XX
 },

1389 { "(bad)", 
XX
, XX, XX },

1390 { "p§ad", 
MS
, 
Ib
, 
XX
 },

1391 { "(bad)", 
XX
, XX, XX },

1392 { "p¶ld", 
MS
, 
Ib
, 
XX
 },

1393 { "(bad)", 
XX
, XX, XX },

1397 { "(bad)", 
XX
, XX, XX },

1398 { "(bad)", 
XX
, XX, XX },

1399 { "p§lq", 
MS
, 
Ib
, 
XX
 },

1400 { "p§ldq", 
MS
, 
Ib
, 
XX
 },

1401 { "(bad)", 
XX
, XX, XX },

1402 { "(bad)", 
XX
, XX, XX },

1403 { "p¶lq", 
MS
, 
Ib
, 
XX
 },

1404 { "p¶ldq", 
MS
, 
Ib
, 
XX
 },

1408 { "fxßve", 
Ev
, 
XX
, XX },

1409 { "fxr°‹", 
Ev
, 
XX
, XX },

1410 { "ldmxc§", 
Ev
, 
XX
, XX },

1411 { "°mxc§", 
Ev
, 
XX
, XX },

1412 { "(bad)", 
XX
, XX, XX },

1413 { "l„n˚", 
N⁄e
, 
XX
, XX },

1414 { "m„n˚", 
N⁄e
, 
XX
, XX },

1415 { "s„n˚", 
N⁄e
, 
XX
, XX },

1420 { "¥e„tch¡a", 
Ev
, 
XX
, XX },

1421 { "¥e„tcht0", 
Ev
, 
XX
, XX },

1422 { "¥e„tcht1", 
Ev
, 
XX
, XX },

1423 { "¥e„tcht2", 
Ev
, 
XX
, XX },

1424 { "(bad)", 
XX
, XX, XX },

1425 { "(bad)", 
XX
, XX, XX },

1426 { "(bad)", 
XX
, XX, XX },

1427 { "(bad)", 
XX
, XX, XX },

1431 { "¥e„tch", 
Eb
, 
XX
, XX },

1432 { "¥e„tchw", 
Eb
, 
XX
, XX },

1433 { "(bad)", 
XX
, XX, XX },

1434 { "(bad)", 
XX
, XX, XX },

1435 { "(bad)", 
XX
, XX, XX },

1436 { "(bad)", 
XX
, XX, XX },

1437 { "(bad)", 
XX
, XX, XX },

1438 { "(bad)", 
XX
, XX, XX },

1442 c⁄° 
dis386
 
	g¥efix_u£r_èbÀ
[][4] = {

1445 { "addps", 
XM
, 
EX
, 
XX
 },

1446 { "addss", 
XM
, 
EX
, 
XX
 },

1447 { "addpd", 
XM
, 
EX
, 
XX
 },

1448 { "addsd", 
XM
, 
EX
, 
XX
 },

1452 { "", 
XM
, 
EX
, 
OPSIMD
 },

1453 { "", 
XM
, 
EX
, 
OPSIMD
 },

1454 { "", 
XM
, 
EX
, 
OPSIMD
 },

1455 { "", 
XM
, 
EX
, 
OPSIMD
 },

1459 { "cvçi2ps", 
XM
, 
EM
, 
XX
 },

1460 { "cvtsi2ssY", 
XM
, 
Ev
, 
XX
 },

1461 { "cvçi2pd", 
XM
, 
EM
, 
XX
 },

1462 { "cvtsi2sdY", 
XM
, 
Ev
, 
XX
 },

1466 { "cvçs2pi", 
MX
, 
EX
, 
XX
 },

1467 { "cvtss2siY", 
Gv
, 
EX
, 
XX
 },

1468 { "cvçd2pi", 
MX
, 
EX
, 
XX
 },

1469 { "cvtsd2siY", 
Gv
, 
EX
, 
XX
 },

1473 { "cvâps2pi", 
MX
, 
EX
, 
XX
 },

1474 { "cvâss2siY", 
Gv
, 
EX
, 
XX
 },

1475 { "cvâpd2pi", 
MX
, 
EX
, 
XX
 },

1476 { "cvâsd2siY", 
Gv
, 
EX
, 
XX
 },

1480 { "divps", 
XM
, 
EX
, 
XX
 },

1481 { "divss", 
XM
, 
EX
, 
XX
 },

1482 { "divpd", 
XM
, 
EX
, 
XX
 },

1483 { "divsd", 
XM
, 
EX
, 
XX
 },

1487 { "maxps", 
XM
, 
EX
, 
XX
 },

1488 { "maxss", 
XM
, 
EX
, 
XX
 },

1489 { "maxpd", 
XM
, 
EX
, 
XX
 },

1490 { "maxsd", 
XM
, 
EX
, 
XX
 },

1494 { "möps", 
XM
, 
EX
, 
XX
 },

1495 { "möss", 
XM
, 
EX
, 
XX
 },

1496 { "möpd", 
XM
, 
EX
, 
XX
 },

1497 { "mösd", 
XM
, 
EX
, 
XX
 },

1501 { "movups", 
XM
, 
EX
, 
XX
 },

1502 { "movss", 
XM
, 
EX
, 
XX
 },

1503 { "movupd", 
XM
, 
EX
, 
XX
 },

1504 { "movsd", 
XM
, 
EX
, 
XX
 },

1508 { "movups", 
EX
, 
XM
, 
XX
 },

1509 { "movss", 
EX
, 
XM
, 
XX
 },

1510 { "movupd", 
EX
, 
XM
, 
XX
 },

1511 { "movsd", 
EX
, 
XM
, 
XX
 },

1515 { "muÕs", 
XM
, 
EX
, 
XX
 },

1516 { "mulss", 
XM
, 
EX
, 
XX
 },

1517 { "muÕd", 
XM
, 
EX
, 
XX
 },

1518 { "mulsd", 
XM
, 
EX
, 
XX
 },

1522 { "r˝ps", 
XM
, 
EX
, 
XX
 },

1523 { "r˝ss", 
XM
, 
EX
, 
XX
 },

1524 { "(bad)", 
XM
, 
EX
, 
XX
 },

1525 { "(bad)", 
XM
, 
EX
, 
XX
 },

1529 { "rsqπps", 
XM
, 
EX
, 
XX
 },

1530 { "rsqπss", 
XM
, 
EX
, 
XX
 },

1531 { "(bad)", 
XM
, 
EX
, 
XX
 },

1532 { "(bad)", 
XM
, 
EX
, 
XX
 },

1536 { "sqπps", 
XM
, 
EX
, 
XX
 },

1537 { "sqπss", 
XM
, 
EX
, 
XX
 },

1538 { "sqπpd", 
XM
, 
EX
, 
XX
 },

1539 { "sqπsd", 
XM
, 
EX
, 
XX
 },

1543 { "subps", 
XM
, 
EX
, 
XX
 },

1544 { "subss", 
XM
, 
EX
, 
XX
 },

1545 { "subpd", 
XM
, 
EX
, 
XX
 },

1546 { "subsd", 
XM
, 
EX
, 
XX
 },

1550 { "(bad)", 
XM
, 
EX
, 
XX
 },

1551 { "cvtdq2pd", 
XM
, 
EX
, 
XX
 },

1552 { "cvâpd2dq", 
XM
, 
EX
, 
XX
 },

1553 { "cvçd2dq", 
XM
, 
EX
, 
XX
 },

1557 { "cvtdq2ps", 
XM
, 
EX
, 
XX
 },

1558 { "cvâps2dq",
XM
, 
EX
, 
XX
 },

1559 { "cvçs2dq",
XM
, 
EX
, 
XX
 },

1560 { "(bad)", 
XM
, 
EX
, 
XX
 },

1564 { "cvçs2pd", 
XM
, 
EX
, 
XX
 },

1565 { "cvtss2sd", 
XM
, 
EX
, 
XX
 },

1566 { "cvçd2ps", 
XM
, 
EX
, 
XX
 },

1567 { "cvtsd2ss", 
XM
, 
EX
, 
XX
 },

1571 { "maskmovq", 
MX
, 
MS
, 
XX
 },

1572 { "(bad)", 
XM
, 
EX
, 
XX
 },

1573 { "maskmovdqu", 
XM
, 
EX
, 
XX
 },

1574 { "(bad)", 
XM
, 
EX
, 
XX
 },

1578 { "movq", 
MX
, 
EM
, 
XX
 },

1579 { "movdqu", 
XM
, 
EX
, 
XX
 },

1580 { "movdqa", 
XM
, 
EX
, 
XX
 },

1581 { "(bad)", 
XM
, 
EX
, 
XX
 },

1585 { "movq", 
EM
, 
MX
, 
XX
 },

1586 { "movdqu", 
EX
, 
XM
, 
XX
 },

1587 { "movdqa", 
EX
, 
XM
, 
XX
 },

1588 { "(bad)", 
EX
, 
XM
, 
XX
 },

1592 { "(bad)", 
EX
, 
XM
, 
XX
 },

1593 { "movq2dq", 
XM
, 
MS
, 
XX
 },

1594 { "movq", 
EX
, 
XM
, 
XX
 },

1595 { "movdq2q", 
MX
, 
XS
, 
XX
 },

1599 { "pshufw", 
MX
, 
EM
, 
Ib
 },

1600 { "pshufhw", 
XM
, 
EX
, 
Ib
 },

1601 { "pshufd", 
XM
, 
EX
, 
Ib
 },

1602 { "pshuÊw", 
XM
, 
EX
, 
Ib
 },

1606 { "movd", 
Ed
, 
MX
, 
XX
 },

1607 { "movq", 
XM
, 
EX
, 
XX
 },

1608 { "movd", 
Ed
, 
XM
, 
XX
 },

1609 { "(bad)", 
Ed
, 
XM
, 
XX
 },

1613 { "(bad)", 
MX
, 
EX
, 
XX
 },

1614 { "(bad)", 
XM
, 
EX
, 
XX
 },

1615 { "pu≈ckhqdq", 
XM
, 
EX
, 
XX
 },

1616 { "(bad)", 
XM
, 
EX
, 
XX
 },

1620 { "mov¡q", 
Ev
, 
MX
, 
XX
 },

1621 { "(bad)", 
Ev
, 
XM
, 
XX
 },

1622 { "mov¡dq", 
Ev
, 
XM
, 
XX
 },

1623 { "(bad)", 
Ev
, 
XM
, 
XX
 },

1627 { "(bad)", 
MX
, 
EX
, 
XX
 },

1628 { "(bad)", 
XM
, 
EX
, 
XX
 },

1629 { "pu≈cklqdq", 
XM
, 
EX
, 
XX
 },

1630 { "(bad)", 
XM
, 
EX
, 
XX
 },

1634 c⁄° 
dis386
 
	gx86_64_èbÀ
[][2] = {

1636 { "¨∂", 
Ew
, 
Gw
, 
XX
 },

1637 { "movs{||lq|xd}", 
Gv
, 
Ed
, 
XX
 },

1641 
	#INTERNAL_DISASSEMBLER_ERROR
 
	`_
("<öã∫Æ dißs£mbÀ∏îr‹>")

	)

1644 
	$ck¥efix
 ()

1646 
√wªx
;

1647 
ªx
 = 0;

1648 
¥efixes
 = 0;

1649 
u£d_¥efixes
 = 0;

1650 
ªx_u£d
 = 0;

1653 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

1654 
√wªx
 = 0;

1655 *
codï
)

1674 i‡(
mode_64bô
)

1675 
√wªx
 = *
codï
;

1680 
¥efixes
 |
PREFIX_REPZ
;

1683 
¥efixes
 |
PREFIX_REPNZ
;

1686 
¥efixes
 |
PREFIX_LOCK
;

1689 
¥efixes
 |
PREFIX_CS
;

1692 
¥efixes
 |
PREFIX_SS
;

1695 
¥efixes
 |
PREFIX_DS
;

1698 
¥efixes
 |
PREFIX_ES
;

1701 
¥efixes
 |
PREFIX_FS
;

1704 
¥efixes
 |
PREFIX_GS
;

1707 
¥efixes
 |
PREFIX_DATA
;

1710 
¥efixes
 |
PREFIX_ADDR
;

1712 
FWAIT_OPCODE
:

1716 i‡(
¥efixes
)

1718 
¥efixes
 |
PREFIX_FWAIT
;

1719 
codï
++;

1722 
¥efixes
 = 
PREFIX_FWAIT
;

1728 i‡(
ªx
)

1730 
	`ﬂµíd
 (
	`¥efix_«me
 (
ªx
, 0));

1731 
	`ﬂµíd
 (" ");

1733 
ªx
 = 
√wªx
;

1734 
codï
++;

1736 
	}
}

1742 
	$¥efix_«me
 (
¥ef
, 
sizeÊag
)

1743 
¥ef
;

1744 
sizeÊag
;

1746 
¥ef
)

1800  (
sizeÊag
 & 
DFLAG
) ? "data16" : "data32";

1802 i‡(
mode_64bô
)

1803  (
sizeÊag
 & 
AFLAG
) ? "addr32" : "addr64";

1805  ((
sizeÊag
 & 
AFLAG
Ë&& !
mode_64bô
) ? "addr16" : "addr32";

1806 
FWAIT_OPCODE
:

1809  
NULL
;

1811 
	}
}

1813 
	g›1out
[100], 
	g›2out
[100], 
	g›3out
[100];

1814 
	g›_ad
, 
	g›_ödex
[3];

1815 
bfd_vma
 
	g›_addªss
[3];

1816 
bfd_vma
 
	g›_rùªl
[3];

1817 
bfd_vma
 
	g°¨t_pc
;

1828 
öt8_t
 
	göãl_sy¡ax
;

1829 
	g›í_ch¨
;

1830 
	g˛o£_ch¨
;

1831 
	g£∑øt‹_ch¨
;

1832 
	gsˇÀ_ch¨
;

1835 
	$¥öt_ö¢_i386
 (
pc
, 
öfo
)

1836 
bfd_vma
 
pc
;

1837 
dißs£mbÀ_öfo
 *
öfo
;

1839 
öãl_sy¡ax
 = -1;

1841  
	`¥öt_ö¢
 (
pc
, 
öfo
);

1842 
	}
}

1845 
	$¥öt_ö¢
 (
pc
, 
öfo
)

1846 
bfd_vma
 
pc
;

1847 
dißs£mbÀ_öfo
 *
öfo
;

1849 c⁄° 
dis386
 *
dp
;

1850 
i
;

1851 
two_sour˚_›s
;

1852 *
fú°
, *
£c⁄d
, *
thúd
;

1853 
√edcomma
;

1854 
u£s_SSE_¥efix
;

1855 
sizeÊag
;

1856 c⁄° *
p
;

1857 
dis_¥iv©e
 
¥iv
;

1859 
mode_64bô
 = (
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax


1860 || 
öfo
->
mach
 =
bfd_mach_x86_64
);

1862 i‡(
öãl_sy¡ax
 == -1)

1863 
öãl_sy¡ax
 = (
öfo
->
mach
 =
bfd_mach_i386_i386_öãl_sy¡ax


1864 || 
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax
);

1866 i‡(
öfo
->
mach
 =
bfd_mach_i386_i386


1867 || 
öfo
->
mach
 =
bfd_mach_x86_64


1868 || 
öfo
->
mach
 =
bfd_mach_i386_i386_öãl_sy¡ax


1869 || 
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax
)

1870 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1871 i‡(
öfo
->
mach
 =
bfd_mach_i386_i8086
)

1872 
¥iv
.
‹ig_sizeÊag
 = 0;

1874 
	`∑nic
("print_insn:error occured");

1876 
p
 = 
öfo
->
dißs£mbÀr_›ti⁄s
;Ö !
NULL
; )

1878 i‡(
	`°∫cmp
 (
p
, "x86-64", 6) == 0)

1880 
mode_64bô
 = 1;

1881 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1883 i‡(
	`°∫cmp
 (
p
, "i386", 4) == 0)

1885 
mode_64bô
 = 0;

1886 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1888 i‡(
	`°∫cmp
 (
p
, "i8086", 5) == 0)

1890 
mode_64bô
 = 0;

1891 
¥iv
.
‹ig_sizeÊag
 = 0;

1893 i‡(
	`°∫cmp
 (
p
, "intel", 5) == 0)

1895 
öãl_sy¡ax
 = 1;

1897 i‡(
	`°∫cmp
 (
p
, "att", 3) == 0)

1899 
öãl_sy¡ax
 = 0;

1901 i‡(
	`°∫cmp
 (
p
, "addr", 4) == 0)

1903 i‡(
p
[4] == '1' &&Ö[5] == '6')

1904 
¥iv
.
‹ig_sizeÊag
 &~
AFLAG
;

1905 i‡(
p
[4] == '3' &&Ö[5] == '2')

1906 
¥iv
.
‹ig_sizeÊag
 |
AFLAG
;

1908 i‡(
	`°∫cmp
 (
p
, "data", 4) == 0)

1910 i‡(
p
[4] == '1' &&Ö[5] == '6')

1911 
¥iv
.
‹ig_sizeÊag
 &~
DFLAG
;

1912 i‡(
p
[4] == '3' &&Ö[5] == '2')

1913 
¥iv
.
‹ig_sizeÊag
 |
DFLAG
;

1915 i‡(
	`°∫cmp
 (
p
, "suffix", 6) == 0)

1916 
¥iv
.
‹ig_sizeÊag
 |
SUFFIX_ALWAYS
;

1918 
p
 = 
	`°rchr
 (p, ',');

1919 i‡(
p
 !
NULL
)

1920 
p
++;

1923 i‡(
öãl_sy¡ax
)

1925 
«mes64
 = 
öãl_«mes64
;

1926 
«mes32
 = 
öãl_«mes32
;

1927 
«mes16
 = 
öãl_«mes16
;

1928 
«mes8
 = 
öãl_«mes8
;

1929 
«mes8ªx
 = 
öãl_«mes8ªx
;

1930 
«mes_£g
 = 
öãl_«mes_£g
;

1931 
ödex16
 = 
öãl_ödex16
;

1932 
›í_ch¨
 = '[';

1933 
˛o£_ch¨
 = ']';

1934 
£∑øt‹_ch¨
 = '+';

1935 
sˇÀ_ch¨
 = '*';

1939 
«mes64
 = 
©t_«mes64
;

1940 
«mes32
 = 
©t_«mes32
;

1941 
«mes16
 = 
©t_«mes16
;

1942 
«mes8
 = 
©t_«mes8
;

1943 
«mes8ªx
 = 
©t_«mes8ªx
;

1944 
«mes_£g
 = 
©t_«mes_£g
;

1945 
ödex16
 = 
©t_ödex16
;

1946 
›í_ch¨
 = '(';

1947 
˛o£_ch¨
 = ')';

1948 
£∑øt‹_ch¨
 = ',';

1949 
sˇÀ_ch¨
 = ',';

1954 
öfo
->
byãs_≥r_löe
 = 7;

1956 
öfo
->
¥iv©e_d©a
 = (
PTR
Ë&
¥iv
;

1957 
¥iv
.
max_„tched
 =Öriv.
the_buf„r
;

1958 
¥iv
.
ö¢_°¨t
 = 
pc
;

1960 
obuf
[0] = 0;

1961 
›1out
[0] = 0;

1962 
›2out
[0] = 0;

1963 
›3out
[0] = 0;

1965 
›_ödex
[0] = op_index[1] = op_index[2] = -1;

1967 
the_öfo
 = 
öfo
;

1969 
°¨t_pc
 = 
pc
;

1970 
°¨t_codï
 = 
¥iv
.
the_buf„r
;

1971 
codï
 = 
¥iv
.
the_buf„r
;

1976 c⁄° *
«me
;

1981 i‡(
codï
 > 
¥iv
.
the_buf„r
)

1983 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

1984 i‡(
«me
 !
NULL
)

2001 
obuÂ
 = 
obuf
;

2002 
	`ck¥efix
 ();

2004 
ö¢_codï
 = 
codï
;

2005 
sizeÊag
 = 
¥iv
.
‹ig_sizeÊag
;

2007 
	`FETCH_DATA
 (
öfo
, 
codï
 + 1);

2009 
two_sour˚_›s
 = (*
codï
 == 0x62) || (*codep == 0xc8);

2011 i‡((
¥efixes
 & 
PREFIX_FWAIT
)

2012 && ((*
codï
 < 0xd8) || (*codep > 0xdf)))

2014 c⁄° *
«me
;

2018 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

2019 i‡(
«me
 =
NULL
)

2020 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2023 
	`˝rötf
("%s",
«me
);

2027 i‡(*
codï
 == 0x0f)

2029 
	`FETCH_DATA
 (
öfo
, 
codï
 + 2);

2030 
dp
 = &
dis386_twobyã
[*++
codï
];

2031 
√ed_modrm
 = 
twobyã_has_modrm
[*
codï
];

2032 
u£s_SSE_¥efix
 = 
twobyã_u£s_SSE_¥efix
[*
codï
];

2037 
dp
 = &
dis386
[*
codï
];

2038 
√ed_modrm
 = 
⁄ebyã_has_modrm
[*
codï
];

2039 
u£s_SSE_¥efix
 = 0;

2042 
codï
++;

2044 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_REPZ
))

2046 
	`ﬂµíd
 ("repz ");

2047 
u£d_¥efixes
 |
PREFIX_REPZ
;

2049 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_REPNZ
))

2051 
	`ﬂµíd
 ("repnz ");

2052 
u£d_¥efixes
 |
PREFIX_REPNZ
;

2054 i‡(
¥efixes
 & 
PREFIX_LOCK
)

2056 
	`ﬂµíd
 ("lock ");

2057 
u£d_¥efixes
 |
PREFIX_LOCK
;

2060 i‡(
¥efixes
 & 
PREFIX_ADDR
)

2062 
sizeÊag
 ^
AFLAG
;

2063 i‡(
dp
->
byãmode3
 !
lo›_jcxz_mode
 || 
öãl_sy¡ax
)

2065 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

2066 
	`ﬂµíd
 ("addr32 ");

2068 
	`ﬂµíd
 ("addr16 ");

2069 
u£d_¥efixes
 |
PREFIX_ADDR
;

2073 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_DATA
))

2075 
sizeÊag
 ^
DFLAG
;

2076 i‡(
dp
->
byãmode3
 =
c⁄d_jump_mode


2077 && 
dp
->
byãmode1
 =
v_mode


2078 && !
öãl_sy¡ax
)

2080 i‡(
sizeÊag
 & 
DFLAG
)

2081 
	`ﬂµíd
 ("data32 ");

2083 
	`ﬂµíd
 ("data16 ");

2084 
u£d_¥efixes
 |
PREFIX_DATA
;

2088 i‡(
√ed_modrm
)

2090 
	`FETCH_DATA
 (
öfo
, 
codï
 + 1);

2091 
mod
 = (*
codï
 >> 6) & 3;

2092 
ªg
 = (*
codï
 >> 3) & 7;

2093 
rm
 = *
codï
 & 7;

2097 i‡(
dp
->
«me
 =
NULL
 && dp->
byãmode1
 =
FLOATCODE
)

2099 
	`doÊﬂt
 (
sizeÊag
);

2103 
ödex
;

2104 i‡(
dp
->
«me
 =
NULL
)

2106 
dp
->
byãmode1
)

2108 
USE_GROUPS
:

2109 
dp
 = &
gΩs
[dp->
byãmode2
][
ªg
];

2112 
USE_PREFIX_USER_TABLE
:

2113 
ödex
 = 0;

2114 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

2115 i‡(
¥efixes
 & 
PREFIX_REPZ
)

2116 
ödex
 = 1;

2119 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2120 i‡(
¥efixes
 & 
PREFIX_DATA
)

2121 
ödex
 = 2;

2124 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPNZ
);

2125 i‡(
¥efixes
 & 
PREFIX_REPNZ
)

2126 
ödex
 = 3;

2129 
dp
 = &
¥efix_u£r_èbÀ
[dp->
byãmode2
][
ödex
];

2132 
X86_64_SPECIAL
:

2133 
dp
 = &
x86_64_èbÀ
[dp->
byãmode2
][
mode_64bô
];

2137 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

2142 i‡(
	`put›
 (
dp
->
«me
, 
sizeÊag
) == 0)

2144 
obuÂ
 = 
›1out
;

2145 
›_ad
 = 2;

2146 i‡(
dp
->
›1
)

2147 (*
dp
->
›1
Ë(dp->
byãmode1
, 
sizeÊag
);

2151 
obuÂ
 = 
›2out
;

2152 
›_ad
 = 1;

2153 i‡(
dp
->
›2
)

2154 (*
dp
->
›2
Ë(dp->
byãmode2
, 
sizeÊag
);

2156 
obuÂ
 = 
›3out
;

2157 
›_ad
 = 0;

2158 i‡(
dp
->
›3
)

2159 (*
dp
->
›3
Ë(dp->
byãmode3
, 
sizeÊag
);

2167 i‡((
¥efixes
 & ~
u£d_¥efixes
) != 0)

2169 c⁄° *
«me
;

2171 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

2172 i‡(
«me
 =
NULL
)

2173 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2176 
	`˝rötf
("%s",
«me
);

2179 i‡(
ªx
 & ~
ªx_u£d
)

2181 c⁄° *
«me
;

2182 
«me
 = 
	`¥efix_«me
 (
ªx
 | 0x40, 
¥iv
.
‹ig_sizeÊag
);

2183 i‡(
«me
 =
NULL
)

2184 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2187 
	`˝rötf
("%s",
«me
);

2190 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

2191 
i
 = 
	`°æí
 (
obuf
); i < 6; i++)

2192 
	`ﬂµíd
 (" ");

2193 
	`ﬂµíd
 (" ");

2197 
	`˝rötf
("%s",
obuf
);

2201 i‡(
öãl_sy¡ax
 || 
two_sour˚_›s
)

2203 
fú°
 = 
›1out
;

2204 
£c⁄d
 = 
›2out
;

2205 
thúd
 = 
›3out
;

2206 
›_ad
 = 
›_ödex
[0];

2207 
›_ödex
[0] = op_index[2];

2208 
›_ödex
[2] = 
›_ad
;

2212 
fú°
 = 
›3out
;

2213 
£c⁄d
 = 
›2out
;

2214 
thúd
 = 
›1out
;

2216 
√edcomma
 = 0;

2217 i‡(*
fú°
)

2219 i‡(
›_ödex
[0] !-1 && !
›_rùªl
[0])

2220 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[0]], info);

2225 
	`˝rötf
("%s",
fú°
);

2227 
√edcomma
 = 1;

2229 i‡(*
£c⁄d
)

2231 i‡(
√edcomma
)

2235 
	`˝rötf
("%c",',');

2238 i‡(
›_ödex
[1] !-1 && !
›_rùªl
[1])

2239 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[1]], info);

2244 
	`˝rötf
("%s",
£c⁄d
);

2247 
√edcomma
 = 1;

2249 i‡(*
thúd
)

2251 i‡(
√edcomma
)

2255 
	`˝rötf
("%c",',');

2258 i‡(
›_ödex
[2] !-1 && !
›_rùªl
[2])

2259 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[2]], info);

2264 
	`˝rötf
("%s",
thúd
);

2268 
i
 = 0; i < 3; i++)

2269 i‡(
›_ödex
[
i
] !-1 && 
›_rùªl
[i])

2273 
	`˝rötf
("%s"," #");

2274 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë(
°¨t_pc
 + 
codï
 - 
°¨t_codï


2275 + 
›_addªss
[
›_ödex
[
i
]]), 
öfo
);

2277  
codï
 - 
¥iv
.
the_buf„r
;

2278 
	}
}

2280 c⁄° *
	gÊﬂt_mem
[] = {

2355 
	#ST
 
OP_ST
, 0

	)

2356 
	#STi
 
OP_STi
, 0

	)

2358 
	#FGRPd9_2
 
NULL
, NULL, 0, NULL, 0, NULL, 0

	)

2359 
	#FGRPd9_4
 
NULL
, NULL, 1, NULL, 0, NULL, 0

	)

2360 
	#FGRPd9_5
 
NULL
, NULL, 2, NULL, 0, NULL, 0

	)

2361 
	#FGRPd9_6
 
NULL
, NULL, 3, NULL, 0, NULL, 0

	)

2362 
	#FGRPd9_7
 
NULL
, NULL, 4, NULL, 0, NULL, 0

	)

2363 
	#FGRPda_5
 
NULL
, NULL, 5, NULL, 0, NULL, 0

	)

2364 
	#FGRPdb_4
 
NULL
, NULL, 6, NULL, 0, NULL, 0

	)

2365 
	#FGRPde_3
 
NULL
, NULL, 7, NULL, 0, NULL, 0

	)

2366 
	#FGRPdf_4
 
NULL
, NULL, 8, NULL, 0, NULL, 0

	)

2368 c⁄° 
dis386
 
	gÊﬂt_ªg
[][8] = {

2371 { "Ádd", 
ST
, 
STi
, 
XX
 },

2372 { "fmul", 
ST
, 
STi
, 
XX
 },

2373 { "fcom", 
STi
, 
XX
, XX },

2374 { "fcomp", 
STi
, 
XX
, XX },

2375 { "fsub", 
ST
, 
STi
, 
XX
 },

2376 { "fsubr", 
ST
, 
STi
, 
XX
 },

2377 { "fdiv", 
ST
, 
STi
, 
XX
 },

2378 { "fdivr", 
ST
, 
STi
, 
XX
 },

2382 { "Êd", 
STi
, 
XX
, XX },

2383 { "fxch", 
STi
, 
XX
, XX },

2384 { 
FGRPd9_2
 },

2385 { "(bad)", 
XX
, XX, XX },

2386 { 
FGRPd9_4
 },

2387 { 
FGRPd9_5
 },

2388 { 
FGRPd9_6
 },

2389 { 
FGRPd9_7
 },

2393 { "fcmovb", 
ST
, 
STi
, 
XX
 },

2394 { "fcmove", 
ST
, 
STi
, 
XX
 },

2395 { "fcmovbe",
ST
, 
STi
, 
XX
 },

2396 { "fcmovu", 
ST
, 
STi
, 
XX
 },

2397 { "(bad)", 
XX
, XX, XX },

2398 { 
FGRPda_5
 },

2399 { "(bad)", 
XX
, XX, XX },

2400 { "(bad)", 
XX
, XX, XX },

2404 { "fcmovnb",
ST
, 
STi
, 
XX
 },

2405 { "fcmov√",
ST
, 
STi
, 
XX
 },

2406 { "fcmovnbe",
ST
, 
STi
, 
XX
 },

2407 { "fcmovnu",
ST
, 
STi
, 
XX
 },

2408 { 
FGRPdb_4
 },

2409 { "fucomi", 
ST
, 
STi
, 
XX
 },

2410 { "fcomi", 
ST
, 
STi
, 
XX
 },

2411 { "(bad)", 
XX
, XX, XX },

2415 { "Ádd", 
STi
, 
ST
, 
XX
 },

2416 { "fmul", 
STi
, 
ST
, 
XX
 },

2417 { "(bad)", 
XX
, XX, XX },

2418 { "(bad)", 
XX
, XX, XX },

2419 #i‡
UNIXWARE_COMPAT


2420 { "fsub", 
STi
, 
ST
, 
XX
 },

2421 { "fsubr", 
STi
, 
ST
, 
XX
 },

2422 { "fdiv", 
STi
, 
ST
, 
XX
 },

2423 { "fdivr", 
STi
, 
ST
, 
XX
 },

2425 { "fsubr", 
STi
, 
ST
, 
XX
 },

2426 { "fsub", 
STi
, 
ST
, 
XX
 },

2427 { "fdivr", 
STi
, 
ST
, 
XX
 },

2428 { "fdiv", 
STi
, 
ST
, 
XX
 },

2433 { "f‰ì", 
STi
, 
XX
, XX },

2434 { "(bad)", 
XX
, XX, XX },

2435 { "f°", 
STi
, 
XX
, XX },

2436 { "f°p", 
STi
, 
XX
, XX },

2437 { "fucom", 
STi
, 
XX
, XX },

2438 { "fucomp", 
STi
, 
XX
, XX },

2439 { "(bad)", 
XX
, XX, XX },

2440 { "(bad)", 
XX
, XX, XX },

2444 { "Áddp", 
STi
, 
ST
, 
XX
 },

2445 { "fmuÕ", 
STi
, 
ST
, 
XX
 },

2446 { "(bad)", 
XX
, XX, XX },

2447 { 
FGRPde_3
 },

2448 #i‡
UNIXWARE_COMPAT


2449 { "fsubp", 
STi
, 
ST
, 
XX
 },

2450 { "fsubΩ", 
STi
, 
ST
, 
XX
 },

2451 { "fdivp", 
STi
, 
ST
, 
XX
 },

2452 { "fdivΩ", 
STi
, 
ST
, 
XX
 },

2454 { "fsubΩ", 
STi
, 
ST
, 
XX
 },

2455 { "fsubp", 
STi
, 
ST
, 
XX
 },

2456 { "fdivΩ", 
STi
, 
ST
, 
XX
 },

2457 { "fdivp", 
STi
, 
ST
, 
XX
 },

2462 { "f‰ìp", 
STi
, 
XX
, XX },

2463 { "(bad)", 
XX
, XX, XX },

2464 { "(bad)", 
XX
, XX, XX },

2465 { "(bad)", 
XX
, XX, XX },

2466 { 
FGRPdf_4
 },

2467 { "fucomù",
ST
, 
STi
, 
XX
 },

2468 { "fcomù", 
ST
, 
STi
, 
XX
 },

2469 { "(bad)", 
XX
, XX, XX },

2473 c⁄° *
	gfgΩs
[][8] = {

2522 
	$doÊﬂt
 (
sizeÊag
)

2523 
sizeÊag
;

2525 c⁄° 
dis386
 *
dp
;

2526 
Êﬂt›
;

2528 
Êﬂt›
 = 
codï
[-1];

2530 i‡(
mod
 != 3)

2532 
	`put›
 (
Êﬂt_mem
[(
Êﬂt›
 - 0xd8Ë* 8 + 
ªg
], 
sizeÊag
);

2533 
obuÂ
 = 
›1out
;

2534 i‡(
Êﬂt›
 == 0xdb)

2535 
	`OP_E
 (
x_mode
, 
sizeÊag
);

2536 i‡(
Êﬂt›
 == 0xdd)

2537 
	`OP_E
 (
d_mode
, 
sizeÊag
);

2539 
	`OP_E
 (
v_mode
, 
sizeÊag
);

2543 
MODRM_CHECK
;

2544 
codï
++;

2545 
dp
 = &
Êﬂt_ªg
[
Êﬂt›
 - 0xd8][
ªg
];

2546 i‡(
dp
->
«me
 =
NULL
)

2548 
	`put›
 (
fgΩs
[
dp
->
byãmode1
][
rm
], 
sizeÊag
);

2551 i‡(
Êﬂt›
 =0xd‡&& 
codï
[-1] == 0xe0)

2553 
	`p°r˝y
 (
›1out
, (›1out), 
«mes16
[0]);

2559 
	`put›
 (
dp
->
«me
, 
sizeÊag
);

2561 
obuÂ
 = 
›1out
;

2562 i‡(
dp
->
›1
)

2563 (*
dp
->
›1
Ë(dp->
byãmode1
, 
sizeÊag
);

2564 
obuÂ
 = 
›2out
;

2565 i‡(
dp
->
›2
)

2566 (*
dp
->
›2
Ë(dp->
byãmode2
, 
sizeÊag
);

2568 
	}
}

2571 
	$OP_ST
 (
byãmode
, 
sizeÊag
)

2572 
byãmode
;

2573 
sizeÊag
;

2575 
	`ﬂµíd
 ("%st");

2576 
	}
}

2579 
	$OP_STi
 (
byãmode
, 
sizeÊag
)

2580 
byãmode
;

2581 
sizeÊag
;

2583 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%°(%d)", 
rm
);

2584 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

2585 
	}
}

2589 
	$put›
 (
ãm∂©e
, 
sizeÊag
)

2590 c⁄° *
ãm∂©e
;

2591 
sizeÊag
;

2593 c⁄° *
p
;

2594 
Æt
;

2596 
p
 = 
ãm∂©e
; *p;Ö++)

2598 *
p
)

2601 *
obuÂ
++ = *
p
;

2604 
Æt
 = 0;

2605 i‡(
öãl_sy¡ax
)

2606 
Æt
 += 1;

2607 i‡(
mode_64bô
)

2608 
Æt
 += 2;

2609 
Æt
 != 0)

2611 *++
p
 != '|')

2613 i‡(*
p
 == '}')

2619 
obuÂ
 = 
obuf
 + 5;

2622 i‡(*
p
 == '\0')

2624 
	`∑nic
("putop:erron occured");

2626 
Æt
--;

2630 *++
p
 != '}')

2632 i‡(*
p
 == '\0')

2634 
	`∑nic
("putop:erron occured");

2640 i‡(
öãl_sy¡ax
)

2642 i‡(
mod
 !3 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2643 *
obuÂ
++ = 'b';

2646 i‡(
öãl_sy¡ax
)

2648 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2649 *
obuÂ
++ = 'b';

2652 i‡(
mode_64bô
)

2654 i‡(
sizeÊag
 & 
AFLAG
)

2655 *
obuÂ
++ = 'r';

2657 *
obuÂ
++ = 'e';

2660 i‡(
sizeÊag
 & 
AFLAG
)

2661 *
obuÂ
++ = 'e';

2662 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_ADDR
);

2665 i‡(
öãl_sy¡ax
)

2667 i‡((
¥efixes
 & 
PREFIX_ADDR
Ë|| (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2669 i‡(
sizeÊag
 & 
AFLAG
)

2670 *
obuÂ
++ = 
mode_64bô
 ? 'q' : 'l';

2672 *
obuÂ
++ = 
mode_64bô
 ? 'l' : 'w';

2673 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_ADDR
);

2677 i‡(
öãl_sy¡ax
)

2679 i‡((
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
)) == PREFIX_CS

2680 || (
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
)) == PREFIX_DS)

2682 
u£d_¥efixes
 |
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
);

2683 *
obuÂ
++ = ',';

2684 *
obuÂ
++ = 'p';

2685 i‡(
¥efixes
 & 
PREFIX_DS
)

2686 *
obuÂ
++ = 't';

2688 *
obuÂ
++ = 'n';

2692 i‡(
öãl_sy¡ax
)

2694 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2695 *
obuÂ
++ = 'l';

2698 i‡((
¥efixes
 & 
PREFIX_FWAIT
) == 0)

2699 *
obuÂ
++ = 'n';

2701 
u£d_¥efixes
 |
PREFIX_FWAIT
;

2704 
	`USED_REX
 (
REX_MODE64
);

2705 i‡(
ªx
 & 
REX_MODE64
)

2706 *
obuÂ
++ = 'o';

2708 *
obuÂ
++ = 'd';

2711 i‡(
öãl_sy¡ax
)

2713 i‡(
mode_64bô
)

2715 *
obuÂ
++ = 'q';

2720 i‡(
öãl_sy¡ax
)

2722 i‡((
¥efixes
 & 
PREFIX_DATA
)

2723 || (
ªx
 & 
REX_MODE64
)

2724 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2726 
	`USED_REX
 (
REX_MODE64
);

2727 i‡(
ªx
 & 
REX_MODE64
)

2728 *
obuÂ
++ = 'q';

2731 i‡(
sizeÊag
 & 
DFLAG
)

2732 *
obuÂ
++ = 'l';

2734 *
obuÂ
++ = 'w';

2735 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2740 i‡(
öãl_sy¡ax
)

2742 i‡(
mode_64bô
)

2744 *
obuÂ
++ = 'q';

2749 i‡(
öãl_sy¡ax
)

2751 
	`USED_REX
 (
REX_MODE64
);

2752 i‡(
mod
 !3 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2754 i‡(
ªx
 & 
REX_MODE64
)

2755 *
obuÂ
++ = 'q';

2758 i‡(
sizeÊag
 & 
DFLAG
)

2759 *
obuÂ
++ = 'l';

2761 *
obuÂ
++ = 'w';

2762 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2767 
	`USED_REX
 (
REX_MODE64
);

2768 i‡(
öãl_sy¡ax
)

2770 i‡(
ªx
 & 
REX_MODE64
)

2772 *
obuÂ
++ = 'q';

2773 *
obuÂ
++ = 't';

2775 i‡(
sizeÊag
 & 
DFLAG
)

2777 *
obuÂ
++ = 'd';

2778 *
obuÂ
++ = 'q';

2782 *
obuÂ
++ = 'w';

2783 *
obuÂ
++ = 'd';

2788 i‡(
ªx
 & 
REX_MODE64
)

2789 *
obuÂ
++ = 'q';

2790 i‡(
sizeÊag
 & 
DFLAG
)

2791 *
obuÂ
++ = 'l';

2793 *
obuÂ
++ = 'w';

2795 i‡(!(
ªx
 & 
REX_MODE64
))

2796 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2799 i‡(
öãl_sy¡ax
)

2801 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2803 i‡(
ªx
 & 
REX_MODE64
)

2804 *
obuÂ
++ = 'q';

2807 i‡(
sizeÊag
 & 
DFLAG
)

2808 *
obuÂ
++ = 'l';

2810 *
obuÂ
++ = 'w';

2811 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2816 i‡(
¥efixes
 & 
PREFIX_DATA
)

2817 *
obuÂ
++ = 'd';

2819 *
obuÂ
++ = 's';

2820 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2823 i‡(
öãl_sy¡ax
)

2825 i‡(
ªx
 & 
REX_MODE64
)

2827 
	`USED_REX
 (
REX_MODE64
);

2828 *
obuÂ
++ = 'q';

2834 
	`USED_REX
 (0);

2835 i‡(
ªx
)

2836 *
obuÂ
++ = 'l';

2837 i‡(
sizeÊag
 & 
DFLAG
)

2838 *
obuÂ
++ = 'w';

2840 *
obuÂ
++ = 'b';

2841 i‡(
öãl_sy¡ax
)

2843 i‡(
ªx
)

2845 *
obuÂ
++ = 'q';

2846 *
obuÂ
++ = 'e';

2848 i‡(
sizeÊag
 & 
DFLAG
)

2850 *
obuÂ
++ = 'd';

2851 *
obuÂ
++ = 'e';

2855 *
obuÂ
++ = 'w';

2858 i‡(!
ªx
)

2859 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2863 *
obuÂ
 = 0;

2865 
	}
}

2868 
	$ﬂµíd
 (
s
)

2869 c⁄° *
s
;

2871 
	`°r˝y
 (
obuÂ
, 
s
);

2872 
obuÂ
 +
	`°æí
 (
s
);

2873 
	}
}

2876 
	$≠≥nd_£g
 ()

2878 i‡(
¥efixes
 & 
PREFIX_CS
)

2880 
u£d_¥efixes
 |
PREFIX_CS
;

2881 
	`ﬂµíd
 ("%cs:" + 
öãl_sy¡ax
);

2883 i‡(
¥efixes
 & 
PREFIX_DS
)

2885 
u£d_¥efixes
 |
PREFIX_DS
;

2886 
	`ﬂµíd
 ("%ds:" + 
öãl_sy¡ax
);

2888 i‡(
¥efixes
 & 
PREFIX_SS
)

2890 
u£d_¥efixes
 |
PREFIX_SS
;

2891 
	`ﬂµíd
 ("%ss:" + 
öãl_sy¡ax
);

2893 i‡(
¥efixes
 & 
PREFIX_ES
)

2895 
u£d_¥efixes
 |
PREFIX_ES
;

2896 
	`ﬂµíd
 ("%es:" + 
öãl_sy¡ax
);

2898 i‡(
¥efixes
 & 
PREFIX_FS
)

2900 
u£d_¥efixes
 |
PREFIX_FS
;

2901 
	`ﬂµíd
 ("%fs:" + 
öãl_sy¡ax
);

2903 i‡(
¥efixes
 & 
PREFIX_GS
)

2905 
u£d_¥efixes
 |
PREFIX_GS
;

2906 
	`ﬂµíd
 ("%gs:" + 
öãl_sy¡ax
);

2908 
	}
}

2911 
	$OP_ödúE
 (
byãmode
, 
sizeÊag
)

2912 
byãmode
;

2913 
sizeÊag
;

2915 i‡(!
öãl_sy¡ax
)

2916 
	`ﬂµíd
 ("*");

2917 
	`OP_E
 (
byãmode
, 
sizeÊag
);

2918 
	}
}

2921 
	$¥öt_›î™d_vÆue
 (*
buf
, 
size_t
 
bufsize
, 
hex
, 
bfd_vma
 
di•
)

2923 i‡(
mode_64bô
)

2925 i‡(
hex
)

2927 
tmp
[30];

2928 
i
;

2929 
buf
[0] = '0';

2930 
buf
[1] = 'x';

2931 
	`¢¥ötf_vma
 (
tmp
, —mp), 
di•
);

2933 
i
 = 0; 
tmp
[i] == '0' &&Åmp[i + 1]; i++);

2934 
	`p°r˝y
 (
buf
 + 2, 
bufsize
 - 2, 
tmp
 + 
i
);

2939 
bfd_sig√d_vma
 
v
 = 
di•
;

2940 
tmp
[30];

2941 
i
;

2942 i‡(
v
 < 0)

2944 *(
buf
++) = '-';

2945 
v
 = -
di•
;

2947 i‡(
v
 < 0)

2949 
	`p°r˝y
 (
buf
, 
bufsize
, "9223372036854775808");

2954 i‡(!
v
)

2956 
	`p°r˝y
 (
buf
, 
bufsize
, "0");

2961 
i
 = 0;

2962 
tmp
[29] = 0;

2963 
v
)

2965 
tmp
[28 - 
i
] = (
v
 % 10) + '0';

2966 
v
 /= 10;

2967 
i
++;

2969 
	`p°r˝y
 (
buf
, 
bufsize
, 
tmp
 + 29 - 
i
);

2975 i‡(
hex
)

2976 
	`¢¥ötf
 (
buf
, 
bufsize
, "0x%x", (Ë
di•
);

2978 
	`¢¥ötf
 (
buf
, 
bufsize
, "%d", (Ë
di•
);

2980 
	}
}

2983 
	$OP_E
 (
byãmode
, 
sizeÊag
)

2984 
byãmode
;

2985 
sizeÊag
;

2987 
bfd_vma
 
di•
;

2988 
add
 = 0;

2989 
rùªl
 = 0;

2990 
	`USED_REX
 (
REX_EXTZ
);

2991 i‡(
ªx
 & 
REX_EXTZ
)

2992 
add
 += 8;

2995 
MODRM_CHECK
;

2996 
codï
++;

2998 i‡(
mod
 == 3)

3000 
byãmode
)

3002 
b_mode
:

3003 
	`USED_REX
 (0);

3004 i‡(
ªx
)

3005 
	`ﬂµíd
 (
«mes8ªx
[
rm
 + 
add
]);

3007 
	`ﬂµíd
 (
«mes8
[
rm
 + 
add
]);

3009 
w_mode
:

3010 
	`ﬂµíd
 (
«mes16
[
rm
 + 
add
]);

3012 
d_mode
:

3013 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3015 
q_mode
:

3016 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3018 
m_mode
:

3019 i‡(
mode_64bô
)

3020 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3022 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3024 
v_mode
:

3025 
	`USED_REX
 (
REX_MODE64
);

3026 i‡(
ªx
 & 
REX_MODE64
)

3027 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3028 i‡(
sizeÊag
 & 
DFLAG
)

3029 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3031 
	`ﬂµíd
 (
«mes16
[
rm
 + 
add
]);

3032 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3035 i‡(!(
codï
[-2] == 0xAE && codep[-1] == 0xF8 )

3036 && !(
codï
[-2] == 0xAE && codep[-1] == 0xF0 )

3037 && !(
codï
[-2] == 0xAE && codep[-1] == 0xe8 ))

3038 
	`BadOp
 ();

3041 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3047 
di•
 = 0;

3048 
	`≠≥nd_£g
 ();

3050 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

3052 
havesib
;

3053 
haveba£
;

3054 
ba£
;

3055 
ödex
 = 0;

3056 
sˇÀ
 = 0;

3058 
havesib
 = 0;

3059 
haveba£
 = 1;

3060 
ba£
 = 
rm
;

3063 i‡(
ba£
 == 4)

3065 
havesib
 = 1;

3066 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3067 
sˇÀ
 = (*
codï
 >> 6) & 3;

3068 
ödex
 = (*
codï
 >> 3) & 7;

3069 
ba£
 = *
codï
 & 7;

3070 
	`USED_REX
 (
REX_EXTY
);

3071 
	`USED_REX
 (
REX_EXTZ
);

3074 i‡(
ªx
 & 
REX_EXTY
)

3075 
ödex
 += 8;

3076 i‡(
ªx
 & 
REX_EXTZ
)

3077 
ba£
 += 8;

3079 
codï
++;

3083 
mod
)

3086 i‡((
ba£
 & 7) == 5)

3088 
haveba£
 = 0;

3089 i‡(
mode_64bô
 && !
havesib
 && (
sizeÊag
 & 
AFLAG
))

3090 
rùªl
 = 1;

3091 
di•
 = 
	`gë32s
 ();

3095 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3096 
di•
 = *
codï
++;

3097 i‡((
di•
 & 0x80) != 0)

3098 
di•
 -= 0x100;

3101 
di•
 = 
	`gë32s
 ();

3105 i‡(!
öãl_sy¡ax
)

3106 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3108 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), !
rùªl
, 
di•
);

3109 
	`ﬂµíd
 (
s¸©chbuf
);

3110 i‡(
rùªl
)

3112 
	`£t_›
 (
di•
, 1);

3113 
	`ﬂµíd
 ("(%rip)");

3117 i‡(
haveba£
 || (
havesib
 && (
ödex
 !4 || 
sˇÀ
 != 0)))

3119 i‡(
öãl_sy¡ax
)

3121 
byãmode
)

3123 
b_mode
:

3124 
	`ﬂµíd
 ("BYTE PTR ");

3126 
w_mode
:

3127 
	`ﬂµíd
 ("WORD PTR ");

3129 
v_mode
:

3130 
	`ﬂµíd
 ("DWORD PTR ");

3132 
d_mode
:

3133 
	`ﬂµíd
 ("QWORD PTR ");

3135 
m_mode
:

3136 i‡(
mode_64bô
)

3137 
	`ﬂµíd
 ("DWORD PTR ");

3139 
	`ﬂµíd
 ("QWORD PTR ");

3141 
x_mode
:

3142 
	`ﬂµíd
 ("XWORD PTR ");

3149 *
obuÂ
++ = 
›í_ch¨
;

3150 i‡(
öãl_sy¡ax
 && 
rùªl
)

3151 
	`ﬂµíd
 ("rip + ");

3152 *
obuÂ
 = '\0';

3153 
	`USED_REX
 (
REX_EXTZ
);

3154 i‡(!
havesib
 && (
ªx
 & 
REX_EXTZ
))

3155 
ba£
 += 8;

3156 i‡(
haveba£
)

3157 
	`ﬂµíd
 (
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3158 ? 
«mes64
[
ba£
] : 
«mes32
[base]);

3159 i‡(
havesib
)

3161 i‡(
ödex
 != 4)

3163 i‡(
öãl_sy¡ax
)

3165 i‡(
haveba£
)

3167 *
obuÂ
++ = 
£∑øt‹_ch¨
;

3168 *
obuÂ
 = '\0';

3170 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), "%s",

3171 
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3172 ? 
«mes64
[
ödex
] : 
«mes32
[index]);

3175 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), ",%s",

3176 
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3177 ? 
«mes64
[
ödex
] : 
«mes32
[index]);

3178 
	`ﬂµíd
 (
s¸©chbuf
);

3180 i‡(!
öãl_sy¡ax


3181 || (
öãl_sy¡ax


3182 && 
byãmode
 !
b_mode


3183 && 
byãmode
 !
w_mode


3184 && 
byãmode
 !
v_mode
))

3186 if(
sˇÀ
){

3187 *
obuÂ
++ = 
sˇÀ_ch¨
;

3188 *
obuÂ
 = '\0';

3189 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%d", 1 << 
sˇÀ
);

3190 
	`ﬂµíd
 (
s¸©chbuf
);

3196 i‡(
öãl_sy¡ax
)

3197 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3200 i‡(
di•
 != 0)

3202 i‡((
bfd_sig√d_vma
Ë
di•
 > 0)

3204 *
obuÂ
++ = '+';

3205 *
obuÂ
 = '\0';

3208 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (scratchbuf), 0,

3209 
di•
);

3210 
	`ﬂµíd
 (
s¸©chbuf
);

3214 *
obuÂ
++ = 
˛o£_ch¨
;

3215 *
obuÂ
 = '\0';

3217 i‡(
öãl_sy¡ax
)

3219 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3221 i‡(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3222 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
))

3226 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3227 
	`ﬂµíd
 (":");

3229 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
di•
);

3230 
	`ﬂµíd
 (
s¸©chbuf
);

3238 
mod
)

3241 i‡((
rm
 & 7) == 6)

3243 
di•
 = 
	`gë16
 ();

3244 i‡((
di•
 & 0x8000) != 0)

3245 
di•
 -= 0x10000;

3249 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3250 
di•
 = *
codï
++;

3251 i‡((
di•
 & 0x80) != 0)

3252 
di•
 -= 0x100;

3255 
di•
 = 
	`gë16
 ();

3256 i‡((
di•
 & 0x8000) != 0)

3257 
di•
 -= 0x10000;

3261 i‡(!
öãl_sy¡ax
)

3262 i‡(
mod
 !0 || (
rm
 & 7) == 6)

3264 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 0, 
di•
);

3265 
	`ﬂµíd
 (
s¸©chbuf
);

3268 i‡(
mod
 !0 || (
rm
 & 7) != 6)

3270 *
obuÂ
++ = 
›í_ch¨
;

3271 *
obuÂ
 = '\0';

3272 
	`ﬂµíd
 (
ödex16
[
rm
 + 
add
]);

3273 *
obuÂ
++ = 
˛o£_ch¨
;

3274 *
obuÂ
 = '\0';

3280 
	}
}

3283 
	$OP_G
 (
byãmode
, 
sizeÊag
)

3284 
byãmode
;

3285 
sizeÊag
;

3287 
add
 = 0;

3288 
	`USED_REX
 (
REX_EXTX
);

3289 i‡(
ªx
 & 
REX_EXTX
)

3290 
add
 += 8;

3291 
byãmode
)

3293 
b_mode
:

3294 
	`USED_REX
 (0);

3295 i‡(
ªx
)

3296 
	`ﬂµíd
 (
«mes8ªx
[
ªg
 + 
add
]);

3298 
	`ﬂµíd
 (
«mes8
[
ªg
 + 
add
]);

3300 
w_mode
:

3301 
	`ﬂµíd
 (
«mes16
[
ªg
 + 
add
]);

3303 
d_mode
:

3304 
	`ﬂµíd
 (
«mes32
[
ªg
 + 
add
]);

3306 
q_mode
:

3307 
	`ﬂµíd
 (
«mes64
[
ªg
 + 
add
]);

3309 
v_mode
:

3310 
	`USED_REX
 (
REX_MODE64
);

3311 i‡(
ªx
 & 
REX_MODE64
)

3312 
	`ﬂµíd
 (
«mes64
[
ªg
 + 
add
]);

3313 i‡(
sizeÊag
 & 
DFLAG
)

3314 
	`ﬂµíd
 (
«mes32
[
ªg
 + 
add
]);

3316 
	`ﬂµíd
 (
«mes16
[
ªg
 + 
add
]);

3317 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3320 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3323 
	}
}

3325 
bfd_vma


3326 
	$gë64
 ()

3328 
bfd_vma
 
x
;

3329 #ifde‡
BFD64


3330 
a
;

3331 
b
;

3333 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 8);

3334 
a
 = *
codï
++ & 0xff;

3335 
a
 |(*
codï
++ & 0xff) << 8;

3336 
a
 |(*
codï
++ & 0xff) << 16;

3337 
a
 |(*
codï
++ & 0xff) << 24;

3338 
b
 = *
codï
++ & 0xff;

3339 
b
 |(*
codï
++ & 0xff) << 8;

3340 
b
 |(*
codï
++ & 0xff) << 16;

3341 
b
 |(*
codï
++ & 0xff) << 24;

3342 
x
 = 
a
 + ((
bfd_vma
Ë
b
 << 32);

3344 
	`ab‹t
 ();

3345 
	`∑nic
("get64:erron occured");

3346 
x
 = 0;

3348  
x
;

3349 
	}
}

3351 
bfd_sig√d_vma


3352 
	$gë32
 ()

3354 
bfd_sig√d_vma
 
x
 = 0;

3356 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 4);

3357 
x
 = *
codï
++ & (
bfd_sig√d_vma
) 0xff;

3358 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 8;

3359 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 16;

3360 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 24;

3361  
x
;

3362 
	}
}

3364 
bfd_sig√d_vma


3365 
	$gë32s
 ()

3367 
bfd_sig√d_vma
 
x
 = 0;

3369 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 4);

3370 
x
 = *
codï
++ & (
bfd_sig√d_vma
) 0xff;

3371 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 8;

3372 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 16;

3373 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 24;

3375 
x
 = (x ^ ((
bfd_sig√d_vma
) 1 << 31)) - ((bfd_signed_vma) 1 << 31);

3377  
x
;

3378 
	}
}

3381 
	$gë16
 ()

3383 
x
 = 0;

3385 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 2);

3386 
x
 = *
codï
++ & 0xff;

3387 
x
 |(*
codï
++ & 0xff) << 8;

3388  
x
;

3389 
	}
}

3392 
	$£t_›
 (
›
, 
rùªl
)

3393 
bfd_vma
 
›
;

3394 
rùªl
;

3396 
›_ödex
[
›_ad
] = op_ad;

3397 i‡(
mode_64bô
)

3399 
›_addªss
[
›_ad
] = 
›
;

3400 
›_rùªl
[
›_ad
] = 
rùªl
;

3405 
›_addªss
[
›_ad
] = 
›
 & 0xffffffff;

3406 
›_rùªl
[
›_ad
] = 
rùªl
 & 0xffffffff;

3408 
	}
}

3411 
	$OP_REG
 (
code
, 
sizeÊag
)

3412 
code
;

3413 
sizeÊag
;

3415 c⁄° *
s
;

3416 
add
 = 0;

3417 
	`USED_REX
 (
REX_EXTZ
);

3418 i‡(
ªx
 & 
REX_EXTZ
)

3419 
add
 = 8;

3421 
code
)

3423 
ödú_dx_ªg
:

3424 i‡(
öãl_sy¡ax
)

3425 
s
 = "[dx]";

3427 
s
 = "(%dx)";

3429 
ax_ªg
: 
cx_ªg
: 
dx_ªg
: 
bx_ªg
:

3430 
•_ªg
: 
bp_ªg
: 
si_ªg
: 
di_ªg
:

3431 
s
 = 
«mes16
[
code
 - 
ax_ªg
 + 
add
];

3433 
es_ªg
: 
ss_ªg
: 
cs_ªg
:

3434 
ds_ªg
: 
fs_ªg
: 
gs_ªg
:

3435 
s
 = 
«mes_£g
[
code
 - 
es_ªg
 + 
add
];

3437 
Æ_ªg
: 
ah_ªg
: 
˛_ªg
: 
ch_ªg
:

3438 
dl_ªg
: 
dh_ªg
: 
bl_ªg
: 
bh_ªg
:

3439 
	`USED_REX
 (0);

3440 i‡(
ªx
)

3441 
s
 = 
«mes8ªx
[
code
 - 
Æ_ªg
 + 
add
];

3443 
s
 = 
«mes8
[
code
 - 
Æ_ªg
];

3445 
rAX_ªg
: 
rCX_ªg
: 
rDX_ªg
: 
rBX_ªg
:

3446 
rSP_ªg
: 
rBP_ªg
: 
rSI_ªg
: 
rDI_ªg
:

3447 i‡(
mode_64bô
)

3449 
s
 = 
«mes64
[
code
 - 
rAX_ªg
 + 
add
];

3452 
code
 +
eAX_ªg
 - 
rAX_ªg
;

3454 
eAX_ªg
: 
eCX_ªg
: 
eDX_ªg
: 
eBX_ªg
:

3455 
eSP_ªg
: 
eBP_ªg
: 
eSI_ªg
: 
eDI_ªg
:

3456 
	`USED_REX
 (
REX_MODE64
);

3457 i‡(
ªx
 & 
REX_MODE64
)

3458 
s
 = 
«mes64
[
code
 - 
eAX_ªg
 + 
add
];

3459 i‡(
sizeÊag
 & 
DFLAG
)

3460 
s
 = 
«mes32
[
code
 - 
eAX_ªg
 + 
add
];

3462 
s
 = 
«mes16
[
code
 - 
eAX_ªg
 + 
add
];

3463 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3466 
s
 = 
INTERNAL_DISASSEMBLER_ERROR
;

3469 
	`ﬂµíd
 (
s
);

3470 
	}
}

3473 
	$OP_IMREG
 (
code
, 
sizeÊag
)

3474 
code
;

3475 
sizeÊag
;

3477 c⁄° *
s
;

3479 
code
)

3481 
ödú_dx_ªg
:

3482 i‡(
öãl_sy¡ax
)

3483 
s
 = "[dx]";

3485 
s
 = "(%dx)";

3487 
ax_ªg
: 
cx_ªg
: 
dx_ªg
: 
bx_ªg
:

3488 
•_ªg
: 
bp_ªg
: 
si_ªg
: 
di_ªg
:

3489 
s
 = 
«mes16
[
code
 - 
ax_ªg
];

3491 
es_ªg
: 
ss_ªg
: 
cs_ªg
:

3492 
ds_ªg
: 
fs_ªg
: 
gs_ªg
:

3493 
s
 = 
«mes_£g
[
code
 - 
es_ªg
];

3495 
Æ_ªg
: 
ah_ªg
: 
˛_ªg
: 
ch_ªg
:

3496 
dl_ªg
: 
dh_ªg
: 
bl_ªg
: 
bh_ªg
:

3497 
	`USED_REX
 (0);

3498 i‡(
ªx
)

3499 
s
 = 
«mes8ªx
[
code
 - 
Æ_ªg
];

3501 
s
 = 
«mes8
[
code
 - 
Æ_ªg
];

3503 
eAX_ªg
: 
eCX_ªg
: 
eDX_ªg
: 
eBX_ªg
:

3504 
eSP_ªg
: 
eBP_ªg
: 
eSI_ªg
: 
eDI_ªg
:

3505 
	`USED_REX
 (
REX_MODE64
);

3506 i‡(
ªx
 & 
REX_MODE64
)

3507 
s
 = 
«mes64
[
code
 - 
eAX_ªg
];

3508 i‡(
sizeÊag
 & 
DFLAG
)

3509 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3511 
s
 = 
«mes16
[
code
 - 
eAX_ªg
];

3512 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3515 
s
 = 
INTERNAL_DISASSEMBLER_ERROR
;

3518 
	`ﬂµíd
 (
s
);

3519 
	}
}

3522 
	$OP_I
 (
byãmode
, 
sizeÊag
)

3523 
byãmode
;

3524 
sizeÊag
;

3526 
bfd_sig√d_vma
 
›
;

3527 
bfd_sig√d_vma
 
mask
 = -1;

3529 
byãmode
)

3531 
b_mode
:

3532 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3533 
›
 = *
codï
++;

3534 
mask
 = 0xff;

3536 
q_mode
:

3537 i‡(
mode_64bô
)

3539 
›
 = 
	`gë32s
 ();

3543 
v_mode
:

3544 
	`USED_REX
 (
REX_MODE64
);

3545 i‡(
ªx
 & 
REX_MODE64
)

3546 
›
 = 
	`gë32s
 ();

3547 i‡(
sizeÊag
 & 
DFLAG
)

3549 
›
 = 
	`gë32
 ();

3550 
mask
 = 0xffffffff;

3554 
›
 = 
	`gë16
 ();

3555 
mask
 = 0xfffff;

3557 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3559 
w_mode
:

3560 
mask
 = 0xfffff;

3561 
›
 = 
	`gë16
 ();

3564 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3568 
›
 &
mask
;

3569 
s¸©chbuf
[0] = '$';

3570 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3571 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3572 
s¸©chbuf
[0] = '\0';

3573 
	}
}

3576 
	$OP_I64
 (
byãmode
, 
sizeÊag
)

3577 
byãmode
;

3578 
sizeÊag
;

3580 
bfd_sig√d_vma
 
›
;

3581 
bfd_sig√d_vma
 
mask
 = -1;

3583 i‡(!
mode_64bô
)

3585 
	`OP_I
 (
byãmode
, 
sizeÊag
);

3589 
byãmode
)

3591 
b_mode
:

3592 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3593 
›
 = *
codï
++;

3594 
mask
 = 0xff;

3596 
v_mode
:

3597 
	`USED_REX
 (
REX_MODE64
);

3598 i‡(
ªx
 & 
REX_MODE64
)

3599 
›
 = 
	`gë64
 ();

3600 i‡(
sizeÊag
 & 
DFLAG
)

3602 
›
 = 
	`gë32
 ();

3603 
mask
 = 0xffffffff;

3607 
›
 = 
	`gë16
 ();

3608 
mask
 = 0xfffff;

3610 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3612 
w_mode
:

3613 
mask
 = 0xfffff;

3614 
›
 = 
	`gë16
 ();

3617 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3621 
›
 &
mask
;

3622 
s¸©chbuf
[0] = '$';

3623 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3624 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3625 
s¸©chbuf
[0] = '\0';

3626 
	}
}

3629 
	$OP_sI
 (
byãmode
, 
sizeÊag
)

3630 
byãmode
;

3631 
sizeÊag
;

3633 
bfd_sig√d_vma
 
›
;

3634 
bfd_sig√d_vma
 
mask
 = -1;

3636 
byãmode
)

3638 
b_mode
:

3639 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3640 
›
 = *
codï
++;

3641 i‡((
›
 & 0x80) != 0)

3642 
›
 -= 0x100;

3643 
mask
 = 0xffffffff;

3645 
v_mode
:

3646 
	`USED_REX
 (
REX_MODE64
);

3647 i‡(
ªx
 & 
REX_MODE64
)

3648 
›
 = 
	`gë32s
 ();

3649 i‡(
sizeÊag
 & 
DFLAG
)

3651 
›
 = 
	`gë32s
 ();

3652 
mask
 = 0xffffffff;

3656 
mask
 = 0xffffffff;

3657 
›
 = 
	`gë16
 ();

3658 i‡((
›
 & 0x8000) != 0)

3659 
›
 -= 0x10000;

3661 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3663 
w_mode
:

3664 
›
 = 
	`gë16
 ();

3665 
mask
 = 0xffffffff;

3666 i‡((
›
 & 0x8000) != 0)

3667 
›
 -= 0x10000;

3670 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3674 
s¸©chbuf
[0] = '$';

3675 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3676 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3677 
	}
}

3680 
	$OP_J
 (
byãmode
, 
sizeÊag
)

3681 
byãmode
;

3682 
sizeÊag
;

3684 
bfd_vma
 
di•
;

3685 
bfd_vma
 
mask
 = -1;

3687 
byãmode
)

3689 
b_mode
:

3690 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3691 
di•
 = *
codï
++;

3692 i‡((
di•
 & 0x80) != 0)

3693 
di•
 -= 0x100;

3695 
v_mode
:

3696 i‡(
sizeÊag
 & 
DFLAG
)

3697 
di•
 = 
	`gë32s
 ();

3700 
di•
 = 
	`gë16
 ();

3704 
mask
 = 0xffff;

3708 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3711 
di•
 = (
°¨t_pc
 + 
codï
 - 
°¨t_codï
 + di•Ë& 
mask
;

3712 
	`£t_›
 (
di•
, 0);

3713 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
di•
);

3714 
	`ﬂµíd
 (
s¸©chbuf
);

3715 
	}
}

3718 
	$OP_SEG
 (
dummy
, 
sizeÊag
)

3719 
dummy
;

3720 
sizeÊag
;

3722 
	`ﬂµíd
 (
«mes_£g
[
ªg
]);

3723 
	}
}

3726 
	$OP_DIR
 (
dummy
, 
sizeÊag
)

3727 
dummy
;

3728 
sizeÊag
;

3730 
£g
, 
off£t
;

3732 i‡(
sizeÊag
 & 
DFLAG
)

3734 
off£t
 = 
	`gë32
 ();

3735 
£g
 = 
	`gë16
 ();

3739 
off£t
 = 
	`gë16
 ();

3740 
£g
 = 
	`gë16
 ();

3742 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3743 i‡(
öãl_sy¡ax
)

3744 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "0x%x,0x%x", 
£g
, 
off£t
);

3746 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "$0x%x,$0x%x", 
£g
, 
off£t
);

3747 
	`ﬂµíd
 (
s¸©chbuf
);

3748 
	}
}

3751 
	$OP_OFF
 (
byãmode
, 
sizeÊag
)

3752 
byãmode
;

3753 
sizeÊag
;

3755 
bfd_vma
 
off
;

3757 
	`≠≥nd_£g
 ();

3759 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

3760 
off
 = 
	`gë32
 ();

3762 
off
 = 
	`gë16
 ();

3764 i‡(
öãl_sy¡ax
)

3766 i‡(!(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3767 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
)))

3769 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3770 
	`ﬂµíd
 (":");

3773 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
off
);

3774 
	`ﬂµíd
 (
s¸©chbuf
);

3775 
	}
}

3778 
	$OP_OFF64
 (
byãmode
, 
sizeÊag
)

3779 
byãmode
;

3780 
sizeÊag
;

3782 
bfd_vma
 
off
;

3784 i‡(!
mode_64bô
)

3786 
	`OP_OFF
 (
byãmode
, 
sizeÊag
);

3790 
	`≠≥nd_£g
 ();

3792 
off
 = 
	`gë64
 ();

3794 i‡(
öãl_sy¡ax
)

3796 i‡(!(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3797 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
)))

3799 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3800 
	`ﬂµíd
 (":");

3803 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
off
);

3804 
	`ﬂµíd
 (
s¸©chbuf
);

3805 
	}
}

3808 
	$±r_ªg
 (
code
, 
sizeÊag
)

3809 
code
;

3810 
sizeÊag
;

3812 c⁄° *
s
;

3813 i‡(
öãl_sy¡ax
)

3814 
	`ﬂµíd
 ("[");

3816 
	`ﬂµíd
 ("(");

3818 
	`USED_REX
 (
REX_MODE64
);

3819 i‡(
ªx
 & 
REX_MODE64
)

3821 i‡(!(
sizeÊag
 & 
AFLAG
))

3822 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3824 
s
 = 
«mes64
[
code
 - 
eAX_ªg
];

3826 i‡(
sizeÊag
 & 
AFLAG
)

3827 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3829 
s
 = 
«mes16
[
code
 - 
eAX_ªg
];

3830 
	`ﬂµíd
 (
s
);

3831 i‡(
öãl_sy¡ax
)

3832 
	`ﬂµíd
 ("]");

3834 
	`ﬂµíd
 (")");

3835 
	}
}

3838 
	$OP_ESªg
 (
code
, 
sizeÊag
)

3839 
code
;

3840 
sizeÊag
;

3842 
	`ﬂµíd
 ("%es:" + 
öãl_sy¡ax
);

3843 
	`±r_ªg
 (
code
, 
sizeÊag
);

3844 
	}
}

3847 
	$OP_DSªg
 (
code
, 
sizeÊag
)

3848 
code
;

3849 
sizeÊag
;

3851 i‡((
¥efixes


3852 & (
PREFIX_CS


3853 | 
PREFIX_DS


3854 | 
PREFIX_SS


3855 | 
PREFIX_ES


3856 | 
PREFIX_FS


3857 | 
PREFIX_GS
)) == 0)

3858 
¥efixes
 |
PREFIX_DS
;

3859 
	`≠≥nd_£g
 ();

3860 
	`±r_ªg
 (
code
, 
sizeÊag
);

3861 
	}
}

3864 
	$OP_C
 (
dummy
, 
sizeÊag
)

3865 
dummy
;

3866 
sizeÊag
;

3868 
add
 = 0;

3869 
	`USED_REX
 (
REX_EXTX
);

3870 i‡(
ªx
 & 
REX_EXTX
)

3871 
add
 = 8;

3872 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%¸%d", 
ªg
 + 
add
);

3873 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3874 
	}
}

3877 
	$OP_D
 (
dummy
, 
sizeÊag
)

3878 
dummy
;

3879 
sizeÊag
;

3881 
add
 = 0;

3882 
	`USED_REX
 (
REX_EXTX
);

3883 i‡(
ªx
 & 
REX_EXTX
)

3884 
add
 = 8;

3885 i‡(
öãl_sy¡ax
)

3886 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "db%d", 
ªg
 + 
add
);

3888 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%db%d", 
ªg
 + 
add
);

3889 
	`ﬂµíd
 (
s¸©chbuf
);

3890 
	}
}

3893 
	$OP_T
 (
dummy
, 
sizeÊag
)

3894 
dummy
;

3895 
sizeÊag
;

3897 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%å%d", 
ªg
);

3898 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3899 
	}
}

3902 
	$OP_Rd
 (
byãmode
, 
sizeÊag
)

3903 
byãmode
;

3904 
sizeÊag
;

3906 i‡(
mod
 == 3)

3907 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3909 
	`BadOp
 ();

3910 
	}
}

3913 
	$OP_MMX
 (
byãmode
, 
sizeÊag
)

3914 
byãmode
;

3915 
sizeÊag
;

3917 
add
 = 0;

3918 
	`USED_REX
 (
REX_EXTX
);

3919 i‡(
ªx
 & 
REX_EXTX
)

3920 
add
 = 8;

3921 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3922 i‡(
¥efixes
 & 
PREFIX_DATA
)

3923 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
ªg
 + 
add
);

3925 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%mm%d", 
ªg
 + 
add
);

3926 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3927 
	}
}

3930 
	$OP_XMM
 (
byãmode
, 
sizeÊag
)

3931 
byãmode
;

3932 
sizeÊag
;

3934 
add
 = 0;

3935 
	`USED_REX
 (
REX_EXTX
);

3936 i‡(
ªx
 & 
REX_EXTX
)

3937 
add
 = 8;

3938 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
ªg
 + 
add
);

3939 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3940 
	}
}

3943 
	$OP_EM
 (
byãmode
, 
sizeÊag
)

3944 
byãmode
;

3945 
sizeÊag
;

3947 
add
 = 0;

3948 i‡(
mod
 != 3)

3950 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3953 
	`USED_REX
 (
REX_EXTZ
);

3954 i‡(
ªx
 & 
REX_EXTZ
)

3955 
add
 = 8;

3958 
MODRM_CHECK
;

3959 
codï
++;

3960 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3961 i‡(
¥efixes
 & 
PREFIX_DATA
)

3962 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
rm
 + 
add
);

3964 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%mm%d", 
rm
 + 
add
);

3965 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3966 
	}
}

3969 
	$OP_EX
 (
byãmode
, 
sizeÊag
)

3970 
byãmode
;

3971 
sizeÊag
;

3973 
add
 = 0;

3974 i‡(
mod
 != 3)

3976 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3979 
	`USED_REX
 (
REX_EXTZ
);

3980 i‡(
ªx
 & 
REX_EXTZ
)

3981 
add
 = 8;

3984 
MODRM_CHECK
;

3985 
codï
++;

3986 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
rm
 + 
add
);

3987 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3988 
	}
}

3991 
	$OP_MS
 (
byãmode
, 
sizeÊag
)

3992 
byãmode
;

3993 
sizeÊag
;

3995 i‡(
mod
 == 3)

3996 
	`OP_EM
 (
byãmode
, 
sizeÊag
);

3998 
	`BadOp
 ();

3999 
	}
}

4002 
	$OP_XS
 (
byãmode
, 
sizeÊag
)

4003 
byãmode
;

4004 
sizeÊag
;

4006 i‡(
mod
 == 3)

4007 
	`OP_EX
 (
byãmode
, 
sizeÊag
);

4009 
	`BadOp
 ();

4010 
	}
}

4012 c⁄° *
	gSuffix3DNow
[] = {

4013  
NULL
, NULL, NULL, NULL,

4014  
NULL
, NULL, NULL, NULL,

4015  
NULL
, NULL, NULL, NULL,

4016  "pi2fw", "pi2fd", 
NULL
, NULL,

4017  
NULL
, NULL, NULL, NULL,

4018  
NULL
, NULL, NULL, NULL,

4019  
NULL
, NULL, NULL, NULL,

4020  "pf2iw", "pf2id", 
NULL
, NULL,

4021  
NULL
, NULL, NULL, NULL,

4022  
NULL
, NULL, NULL, NULL,

4023  
NULL
, NULL, NULL, NULL,

4024  
NULL
, NULL, NULL, NULL,

4025  
NULL
, NULL, NULL, NULL,

4026  
NULL
, NULL, NULL, NULL,

4027  
NULL
, NULL, NULL, NULL,

4028  
NULL
, NULL, NULL, NULL,

4029  
NULL
, NULL, NULL, NULL,

4030  
NULL
, NULL, NULL, NULL,

4031  
NULL
, NULL, NULL, NULL,

4032  
NULL
, NULL, NULL, NULL,

4033  
NULL
, NULL, NULL, NULL,

4034  
NULL
, NULL, NULL, NULL,

4035  
NULL
, NULL, NULL, NULL,

4036  
NULL
, NULL, NULL, NULL,

4037  
NULL
, NULL, NULL, NULL,

4038  
NULL
, NULL, NULL, NULL,

4039  
NULL
, NULL, NULL, NULL,

4040  
NULL
, NULL, NULL, NULL,

4041  
NULL
, NULL, NULL, NULL,

4042  
NULL
, NULL, NULL, NULL,

4043  
NULL
, NULL, NULL, NULL,

4044  
NULL
, NULL, NULL, NULL,

4045  
NULL
, NULL, NULL, NULL,

4046  
NULL
, NULL, NULL, NULL,

4047  
NULL
, NULL, "pfnacc", NULL,

4048  
NULL
, NULL, "pfpnacc", NULL,

4049  "pfcmpge", 
NULL
, NULL, NULL,

4050  "pfmö", 
NULL
, "pfrcp", "pfrsqrt",

4051  
NULL
, NULL, "pfsub", NULL,

4052  
NULL
, NULL, "pfadd", NULL,

4053  "pfcmpgt", 
NULL
, NULL, NULL,

4054  "pfmax", 
NULL
, "pfrcpit1", "pfrsqit1",

4055  
NULL
, NULL, "pfsubr", NULL,

4056  
NULL
, NULL, "pfacc", NULL,

4057  "pfcm≥q", 
NULL
, NULL, NULL,

4058  "pfmul", 
NULL
, "pfrcpit2", "pfmulhrw",

4059  
NULL
, NULL, NULL, "pswapd",

4060  
NULL
, NULL, NULL, "pavgusb",

4061  
NULL
, NULL, NULL, NULL,

4062  
NULL
, NULL, NULL, NULL,

4063  
NULL
, NULL, NULL, NULL,

4064  
NULL
, NULL, NULL, NULL,

4065  
NULL
, NULL, NULL, NULL,

4066  
NULL
, NULL, NULL, NULL,

4067  
NULL
, NULL, NULL, NULL,

4068  
NULL
, NULL, NULL, NULL,

4069  
NULL
, NULL, NULL, NULL,

4070  
NULL
, NULL, NULL, NULL,

4071  
NULL
, NULL, NULL, NULL,

4072  
NULL
, NULL, NULL, NULL,

4073  
NULL
, NULL, NULL, NULL,

4074  
NULL
, NULL, NULL, NULL,

4075  
NULL
, NULL, NULL, NULL,

4076  
NULL
, NULL, NULL, NULL,

4080 
	$OP_3DNowSuffix
 (
byãmode
, 
sizeÊag
)

4081 
byãmode
;

4082 
sizeÊag
;

4084 c⁄° *
m√m⁄ic
;

4086 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

4090 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

4091 
m√m⁄ic
 = 
Suffix3DNow
[*
codï
++ & 0xff];

4092 i‡(
m√m⁄ic
)

4093 
	`ﬂµíd
 (
m√m⁄ic
);

4100 
›1out
[0] = '\0';

4101 
›2out
[0] = '\0';

4102 
	`BadOp
 ();

4104 
	}
}

4106 c⁄° *
	gsimd_cmp_›
[] = {

4118 
	$OP_SIMD_Suffix
 (
byãmode
, 
sizeÊag
)

4119 
byãmode
;

4120 
sizeÊag
;

4122 
cmp_ty≥
;

4124 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

4125 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

4126 
cmp_ty≥
 = *
codï
++ & 0xff;

4127 i‡(
cmp_ty≥
 < 8)

4129 
suffix1
 = 'p', 
suffix2
 = 's';

4130 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

4131 i‡(
¥efixes
 & 
PREFIX_REPZ
)

4132 
suffix1
 = 's';

4135 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

4136 i‡(
¥efixes
 & 
PREFIX_DATA
)

4137 
suffix2
 = 'd';

4140 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPNZ
);

4141 i‡(
¥efixes
 & 
PREFIX_REPNZ
)

4142 
suffix1
 = 's', 
suffix2
 = 'd';

4145 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), "cmp%s%c%c",

4146 
simd_cmp_›
[
cmp_ty≥
], 
suffix1
, 
suffix2
);

4147 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

4148 
	`ﬂµíd
 (
s¸©chbuf
);

4153 
›1out
[0] = '\0';

4154 
›2out
[0] = '\0';

4155 
	`BadOp
 ();

4157 
	}
}

4160 
	$SIMD_Fixup
 (
exåach¨
, 
sizeÊag
)

4161 
exåach¨
;

4162 
sizeÊag
;

4166 i‡(
mod
 == 3)

4168 *
p
 = 
obuf
 + 
	`°æí
 (obuf);

4169 *(
p
 + 1) = '\0';

4170 *
p
 = *(p - 1);

4171 *(
p
 - 1) = *(p - 2);

4172 *(
p
 - 2) = *(p - 3);

4173 *(
p
 - 3Ë
exåach¨
;

4175 
	}
}

4178 
	$BadOp
 ()

4181 
codï
 = 
ö¢_codï
 + 1;

4182 
	`ﬂµíd
 ("(bad)");

4183 
	}
}

	@kern/init.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

7 
	~<kîn/m⁄ô‹.h
>

8 
	~<kîn/c⁄sﬁe.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/k˛ock.h
>

11 
	~<kîn/ív.h
>

12 
	~<kîn/å≠.h
>

13 
	~<kîn/sched.h
>

14 
	~<kîn/picúq.h
>

15 
	~<kîn/time.h
>

16 
	~<kîn/pci.h
>

20 
	$i386_öô
()

22 
ed©a
[], 
íd
[];

27 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

31 
	`c⁄s_öô
();

33 
	`˝rötf
("6828 decimal is %o octal!\n", 6828);

36 
	`i386_dëe˘_mem‹y
();

37 
	`i386_vm_öô
();

40 
	`ív_öô
();

41 
	`idt_öô
();

44 
	`pic_öô
();

45 
	`k˛ock_öô
();

47 
	`time_öô
();

48 
	`pci_öô
();

51 
	`ENV_CREATE
(
u£r_idÀ
);

54 
	`ENV_CREATE
(
fs_fs
);

56 #i‡!
	`deföed
(
TEST_NO_NS
)

58 
	`ENV_CREATE
(
√t_ns
);

61 #i‡
	`deföed
(
TEST
)

63 
	`ENV_CREATE2
(
TEST
, 
TESTSIZE
);

72 
	`sched_yõld
();

73 
	}
}

80 c⁄° *
	g∑nic°r
;

87 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

89 
va_li°
 
≠
;

91 i‡(
∑nic°r
)

92 
dód
;

93 
∑nic°r
 = 
fmt
;

96 
__asm
 
	`__vﬁ©ûe
("cli; cld");

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
	`˝rötf
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

100 
	`v˝rötf
(
fmt
, 
≠
);

101 
	`˝rötf
("\n");

102 
	`va_íd
(
≠
);

104 
dód
:

107 
	`m⁄ô‹
(
NULL
);

108 
	}
}

112 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

114 
va_li°
 
≠
;

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

118 
	`v˝rötf
(
fmt
, 
≠
);

119 
	`˝rötf
("\n");

120 
	`va_íd
(
≠
);

121 
	}
}

	@kern/kclock.c

8 
	~<öc/x86.h
>

9 
	~<öc/°dio.h
>

10 
	~<öc/ißªg.h
>

11 
	~<öc/timîªg.h
>

13 
	~<kîn/k˛ock.h
>

14 
	~<kîn/picúq.h
>

18 
	$mc146818_ªad
(
ªg
)

20 
	`outb
(
IO_RTC
, 
ªg
);

21  
	`öb
(
IO_RTC
+1);

22 
	}
}

25 
	$mc146818_wrôe
(
ªg
, 
d©um
)

27 
	`outb
(
IO_RTC
, 
ªg
);

28 
	`outb
(
IO_RTC
+1, 
d©um
);

29 
	}
}

33 
	$k˛ock_öô
()

36 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

37 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

38 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

39 
	`˝rötf
(" SetupÅimer interrupts via 8259A\n");

40 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<0));

41 
	`˝rötf
(" unmaskedÅimer interrupt\n");

42 
	}
}

	@kern/kclock.h

3 #i‚de‡
JOS_KERN_KCLOCK_H


4 
	#JOS_KERN_KCLOCK_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	#IO_RTC
 0x070

	)

11 
	#MC_NVRAM_START
 0xê

	)

12 
	#MC_NVRAM_SIZE
 50

	)

15 
	#NVRAM_BASELO
 (
MC_NVRAM_START
 + 7Ë

	)

16 
	#NVRAM_BASEHI
 (
MC_NVRAM_START
 + 8Ë

	)

19 
	#NVRAM_EXTLO
 (
MC_NVRAM_START
 + 9Ë

	)

20 
	#NVRAM_EXTHI
 (
MC_NVRAM_START
 + 10Ë

	)

23 
	#NVRAM_PEXTLO
 (
MC_NVRAM_START
 + 34Ë

	)

24 
	#NVRAM_PEXTHI
 (
MC_NVRAM_START
 + 35Ë

	)

27 
	#NVRAM_CENTURY
 (
MC_NVRAM_START
 + 36Ë

	)

29 
mc146818_ªad
(
ªg
);

30 
mc146818_wrôe
(
ªg
, 
d©um
);

31 
k˛ock_öô
();

	@kern/kdebug.c

1 
	~<öc/°ab.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/memœyout.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/kdebug.h
>

7 
	~<kîn/pm≠.h
>

8 
	~<kîn/ív.h
>

10 c⁄° 
Sèb
 
__STAB_BEGIN__
[];

11 c⁄° 
Sèb
 
__STAB_END__
[];

12 c⁄° 
__STABSTR_BEGIN__
[];

13 c⁄° 
__STABSTR_END__
[];

15 
	sU£rSèbD©a
 {

16 c⁄° 
Sèb
 *
	m°abs
;

17 c⁄° 
Sèb
 *
	m°ab_íd
;

18 c⁄° *
	m°ab°r
;

19 c⁄° *
	m°ab°r_íd
;

60 
	$°ab_bö£¨ch
(c⁄° 
Sèb
 *
°abs
, *
ªgi⁄_À·
, *
ªgi⁄_right
,

61 
ty≥
, 
uöçå_t
 
addr
)

63 
l
 = *
ªgi⁄_À·
, 
r
 = *
ªgi⁄_right
, 
™y_m©ches
 = 0;

65 
l
 <
r
) {

66 
åue_m
 = (
l
 + 
r
Ë/ 2, 
m
 =Årue_m;

69 
m
 >
l
 && 
°abs
[m].
n_ty≥
 !
ty≥
)

70 
m
--;

71 i‡(
m
 < 
l
) {

72 
l
 = 
åue_m
 + 1;

77 
™y_m©ches
 = 1;

78 i‡(
°abs
[
m
].
n_vÆue
 < 
addr
) {

79 *
ªgi⁄_À·
 = 
m
;

80 
l
 = 
åue_m
 + 1;

81 } i‡(
°abs
[
m
].
n_vÆue
 > 
addr
) {

82 *
ªgi⁄_right
 = 
m
 - 1;

83 
r
 = 
m
 - 1;

87 *
ªgi⁄_À·
 = 
m
;

88 
l
 = 
m
;

89 
addr
++;

93 i‡(!
™y_m©ches
)

94 *
ªgi⁄_right
 = *
ªgi⁄_À·
 - 1;

97 
l
 = *
ªgi⁄_right
;

98 
l
 > *
ªgi⁄_À·
 && 
°abs
[l].
n_ty≥
 !
ty≥
;

99 
l
--)

101 *
ªgi⁄_À·
 = 
l
;

103 
	}
}

114 
	$debugöfo_eù
(
uöçå_t
 
addr
, 
Eùdebugöfo
 *
öfo
)

116 c⁄° 
Sèb
 *
°abs
, *
°ab_íd
;

117 c⁄° *
°ab°r
, *
°ab°r_íd
;

118 
lfûe
, 
rfûe
, 
lfun
, 
rfun
, 
Œöe
, 
æöe
;

121 
öfo
->
eù_fûe
 = "<unknown>";

122 
öfo
->
eù_löe
 = 0;

123 
öfo
->
eù_‚_«me
 = "<unknown>";

124 
öfo
->
eù_‚_«mñí
 = 9;

125 
öfo
->
eù_‚_addr
 = 
addr
;

126 
öfo
->
eù_‚_«rg
 = 0;

129 i‡(
addr
 >
ULIM
) {

130 
°abs
 = 
__STAB_BEGIN__
;

131 
°ab_íd
 = 
__STAB_END__
;

132 
°ab°r
 = 
__STABSTR_BEGIN__
;

133 
°ab°r_íd
 = 
__STABSTR_END__
;

140 c⁄° 
U£rSèbD©a
 *
usd
 = (c⁄° U£rSèbD©®*Ë
USTABDATA
;

145 
	`u£r_mem_check
(
cuªnv
,(*)
usd
,(
U£rSèbD©a
),0);

146 
°abs
 = 
usd
->stabs;

147 
°ab_íd
 = 
usd
->stab_end;

148 
°ab°r
 = 
usd
->stabstr;

149 
°ab°r_íd
 = 
usd
->stabstr_end;

153 
	`u£r_mem_check
(
cuªnv
,(*)
°abs
,
°ab_íd
-stabs,0);

154 
	`u£r_mem_check
(
cuªnv
,(*)
°ab°r
,
°ab°r_íd
-stabstr,0);

158 i‡(
°ab°r_íd
 <
°ab°r
 || stabstr_end[-1] != 0)

167 
lfûe
 = 0;

168 
rfûe
 = (
°ab_íd
 - 
°abs
) - 1;

169 
	`°ab_bö£¨ch
(
°abs
, &
lfûe
, &
rfûe
, 
N_SO
, 
addr
);

170 i‡(
lfûe
 == 0)

175 
lfun
 = 
lfûe
;

176 
rfun
 = 
rfûe
;

177 
	`°ab_bö£¨ch
(
°abs
, &
lfun
, &
rfun
, 
N_FUN
, 
addr
);

179 i‡(
lfun
 <
rfun
) {

182 i‡(
°abs
[
lfun
].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

183 
öfo
->
eù_‚_«me
 = 
°ab°r
 + 
°abs
[
lfun
].
n_°rx
;

184 
öfo
->
eù_‚_addr
 = 
°abs
[
lfun
].
n_vÆue
;

185 
addr
 -
öfo
->
eù_‚_addr
;

187 
Œöe
 = 
lfun
;

188 
æöe
 = 
rfun
;

192 
öfo
->
eù_‚_addr
 = 
addr
;

193 
Œöe
 = 
lfûe
;

194 
æöe
 = 
rfûe
;

197 
öfo
->
eù_‚_«mñí
 = 
	`°rföd
(öfo->
eù_‚_«me
, ':') - info->eip_fn_name;

209 
	`°ab_bö£¨ch
(
°abs
,&
Œöe
,&
æöe
,
N_SLINE
,
addr
);

210 if(
Œöe
==0)

212 
öfo
->
eù_löe
=
°abs
[
Œöe
].
n_desc
;

219 
Œöe
 >
lfûe


220 && 
°abs
[
Œöe
].
n_ty≥
 !
N_SOL


221 && (
°abs
[
Œöe
].
n_ty≥
 !
N_SO
 || !°abs[Œöe].
n_vÆue
))

222 
Œöe
--;

223 i‡(
Œöe
 >
lfûe
 && 
°abs
[Œöe].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

224 
öfo
->
eù_fûe
 = 
°ab°r
 + 
°abs
[
Œöe
].
n_°rx
;

229 i‡(
lfun
 < 
rfun
)

230 
Œöe
 = 
lfun
 + 1;

231 
Œöe
 < 
rfun
 && 
°abs
[Œöe].
n_ty≥
 =
N_PSYM
;

232 
Œöe
++)

233 
öfo
->
eù_‚_«rg
++;

236 
	}
}

	@kern/kdebug.h

1 #i‚de‡
JOS_KERN_KDEBUG_H


2 
	#JOS_KERN_KDEBUG_H


	)

4 
	~<öc/ty≥s.h
>

7 
	sEùdebugöfo
 {

8 c⁄° *
	meù_fûe
;

9 
	meù_löe
;

11 c⁄° *
	meù_‚_«me
;

13 
	meù_‚_«mñí
;

14 
uöçå_t
 
	meù_‚_addr
;

15 
	meù_‚_«rg
;

18 
debugöfo_eù
(
uöçå_t
 
eù
, 
Eùdebugöfo
 *
öfo
);

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/mmu.h
>

11 
	~<kîn/c⁄sﬁe.h
>

12 
	~<kîn/m⁄ô‹.h
>

13 
	~<kîn/kdebug.h
>

14 
	~<kîn/å≠.h
>

15 
	~<kîn/pm≠.h
>

16 
	~<kîn/dißs.h
>

17 
	#CMDBUF_SIZE
 80

18 

	)

20 
	sComm™d
 {

21 c⁄° *
	m«me
;

22 c⁄° *
	mdesc
;

24 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

27 
Comm™d
 
	gcomm™ds
[] = {

28 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

29 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

30 { "backåa˚","Ru¿®°ack backåa˚",
m⁄_backåa˚
},

31 { "c⁄töue","C⁄töuêtÿexecuã fromÅhêcuºíàbªakpoöt",
m⁄_c⁄töue
},

32 { "°ïi","SigÀ-°ï o√ in°ru˘i⁄áà®time",
m⁄_°ïi
},

33 { "showm≠pögs","Di•œyÅhêphysiˇ»∑gêm≠pög†© vútuÆáddªs£†xxxx",
m⁄_showm≠pögs
},

34 { "≥rmissi⁄","Ch™gêthê≥rmissi⁄ o‡thêphysiˇ»∑gêm≠pög†© vútuÆáddªs£†xxxx,D A PCD PWT U W P",
m⁄_≥rmissi⁄
},

35 { "dumpx", "Dum∞thêc⁄ã¡†o‡®øngêo‡mem‹y giví vútuÆáddªs†ønge", 
m⁄_dumpx
 },

36 { "dumpxp", "Dum∞thêc⁄ã¡†o‡®øngêo‡mem‹y givíÖhysiˇ»addªs†ønge", 
m⁄_dumpxp
 },

38 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

40 
ªad_eù
();

45 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

47 
i
;

49 
i
 = 0; i < 
NCOMMANDS
; i++)

50 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

52 
	}
}

55 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

57 
_°¨t
[], 
ëext
[], 
ed©a
[], 
íd
[];

59 
	`˝rötf
("Special kernel symbols:\n");

60 
	`˝rötf
(" _°¨à%08x (vútË %08x (phys)\n", 
_°¨t
, _°¨à- 
KERNBASE
);

61 
	`˝rötf
("Éãxà %08x (vútË %08x (phys)\n", 
ëext
,Éãxà- 
KERNBASE
);

62 
	`˝rötf
("Éd©® %08x (vútË %08x (phys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

63 
	`˝rötf
("Énd %08x (vútË %08x (phys)\n", 
íd
,Énd - 
KERNBASE
);

64 
	`˝rötf
("KernelÉxecutable memory footprint: %dKB\n",

65 (
íd
-
_°¨t
+1023)/1024);

67 
	}
}

70 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

73 
i
;

74 
Eùdebugöfo
 
eùöfo
;

75 
uöt32_t
 
ebp
,
eù
,
¨g
[5];

76 
ebp
=
	`ªad_ebp
();

78 
	`˝rötf
("Stack backtrace :\n");

81 
eù
=*((
uöt32_t
 *)
ebp
+1);

82 
i
=0;i<5;i++)

83 
¨g
[
i
]=*((
uöt32_t
 *)
ebp
+i+2);

84 
	`˝rötf
("eb∞%08xÉù %08x ",
ebp
,
eù
);

85 
	`˝rötf
("¨g†%08x %08x %08x %08x %08x\n",
¨g
[0],arg[1],arg[2],arg[3],arg[4]);

86 if(!
	`debugöfo_eù
((
uöçå_t
)
eù
,&
eùöfo
))

88 
	`˝rötf
(" %s:%d: %.*s+%d\n",
eùöfo
.
eù_fûe
,eùöfo.
eù_löe
,eùöfo.
eù_‚_«mñí
,eùöfo.
eù_‚_«me
,
eù
-eùöfo.
eù_‚_addr
);

90 
ebp
=*(
uöt32_t
 *)ebp;

91 }
ebp
!=0);

93 
	}
}

94 
uöt32_t


95 
	$gëva
(*
va°rög
,
ba£
)

97 
uöt32_t
 
va
=0;

98 
i
,
Àngth
=0;

99 if(
va°rög
){

100 
Àngth
=0;
va°rög
[length]!='\0';length++);

102 if(
ba£
==16){

103 if(
va°rög
[0]!='0'||va°rög[1]!='x'||(
Àngth
>10)){

104 
	`˝rötf
("Virtual Address isÇot hex!\n");

108 
i
=2;i<
Àngth
;i++){

109 if(
va°rög
[
i
]>='0'&&vastring[i]<='9')

110 
va
=
va°rög
[
i
]-'0'+va*
ba£
;

111 if(
va°rög
[
i
]>='a'&&vastring[i]<='f')

112 
va
=
va°rög
[
i
]-'a'+10+va*
ba£
;

114 
	`˝rötf
("Virtual Address is bad!\n");

115 
va
=0;

120 if(
ba£
==10){

121 
i
=0;i<
Àngth
;i++){

122 if(
va°rög
[
i
]>='0'&&vastring[i]<='9')

123 
va
=
va°rög
[
i
]-'0'+va*
ba£
;

125 
	`˝rötf
("TheÇumber string is bad!\n");

126 
va
=0;

131 
	`˝rötf
("CanÇot handdle\n");

134 
	`˝rötf
("Virtual Address is NULL!\n");

136  
va
;

137 
	}
}

139 
	$m⁄_showm≠pögs
(
¨gc
,**
¨gv
,
Tøp‰ame
 *
tf
)

141 
i
;

142 
uöt32_t
 
a
,
œ
;

143 
±e_t
 *
±e
;

144 
Page
 *
⁄ïage
;

145 
phyßddr_t
 
phyßddr
;

146 if(
¨gc
!=3)

148 
	`˝rötf
("Commandárgument is illegle!\n");

154 
a
=
	`gëva
(
¨gv
[1],16);

155 
œ
=
	`gëva
(
¨gv
[2],16);

158 if((
⁄ïage
=
	`∑ge_lookup
(
boŸ_pgdú
,(*)
a
,&
±e
))){

159 
phyßddr
=
	`∑ge2∑
(
⁄ïage
);

160 
	`˝rötf
("vútuÆáddr=%xÖagêphyßddr=%xÖîmissi⁄: ",
a
,
phyßddr
);

161 if((*
±e
)&
PTE_D
Ë
	`˝rötf
("D ");

162 
	`˝rötf
("- ");

163 if(*
±e
&
PTE_A
Ë
	`˝rötf
("A ");

164 
	`˝rötf
("- ");

165 if(*
±e
&
PTE_PCD
Ë
	`˝rötf
("PCD ");

166 
	`˝rötf
("- ");

167 if(*
±e
&
PTE_PWT
Ë
	`˝rötf
("PWT ");

168 
	`˝rötf
("- ");

169 if(*
±e
&
PTE_U
Ë
	`˝rötf
("U ");

170 
	`˝rötf
("- ");

171 if(*
±e
&
PTE_W
Ë
	`˝rötf
("W ");

172 
	`˝rötf
("- ");

173 
	`˝rötf
("P \n");

175 
	`˝rötf
("thi†physiˇ»∑gêc‹ª•⁄dögÅÿ%x i†nŸÉxôög\n",
a
);

176 if(
a
==
œ
) ;

177 
a
+=
PGSIZE
;

180 
	}
}

182 
	$m⁄_≥rmissi⁄
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

184 
uöt32_t
 
a
=0;

185 
i
;

186 
±e_t
 *
±e
;

187 
Page
 *
⁄ïage
;

188 
›î©‹
,
±e_ch
=0,
±e_≥rm
;

189 if(
¨gc
<4)

191 
	`˝rötf
("Commandárgument is illegle!\n");

194 
a
=
	`gëva
(
¨gv
[2],16);

195 
›î©‹
=
¨gv
[1][0];

196 if((
⁄ïage
=
	`∑ge_lookup
(
boŸ_pgdú
,(*)
a
,&
±e
))){

197 
i
=3;i<
¨gc
;i++)

199 
±e_≥rm
=
¨gv
[
i
][0];

200 
±e_≥rm
){

202 if((
¨gv
[
i
][1]!='\0')&&(argv[i][3]=='\0')){

203 if((
¨gv
[
i
][0]=='P')&&(argv[i][1]=='W')&&(argv[i][2]=='T'))

204 
±e_ch
|=
PTE_PWT
;

205 if((
¨gv
[
i
][0]=='P')&&(argv[i][1]=='C')&&(argv[i][2]=='D'))

206 
±e_ch
|=
PTE_PCD
;

207 {
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]); 0;}

209 if(
¨gv
[
i
][1]=='\0'Ë
±e_ch
|=
PTE_P
;

210 {
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]); 0;}

212 'W':
±e_ch
|=
PTE_W
;;

213 'U':
±e_ch
|=
PTE_U
;;

214 'D':
±e_ch
|=
PTE_D
;;

215 'A':
±e_ch
|=
PTE_A
;;

217 
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]);

221 
›î©‹
){

223 *
±e
|=
±e_ch
;;

225 if(
±e_ch
&
PTE_P
)

226 {
	`˝rötf
("clearing PTE_P is denied\n"); 0;}

228 {*
±e
&=(~
±e_ch
);;}

230 
	`˝rötf
("›øt‹ %¯i†nŸ sëtög o∏˛órögÖîmissi⁄\n",
›î©‹
);

233 
	`˝rötf
("permission is changed successfully!\n");

235 
	`˝rötf
("thi†physiˇ»∑gêc‹ª•⁄dögÅÿ%x i†nŸÉxôög\n",
a
);

237 
	}
}

240 
	$m⁄_dumpx
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

242 
uöt32_t
 
a
,*
c⁄ã¡
;

243 
i
,
n
;

244 if(
¨gc
<3)

246 
	`˝rötf
("Commandárgument is illegle!\n");

249 
n
=()
	`gëva
(
¨gv
[1],10);

250 
a
=
	`gëva
(
¨gv
[2],16);

251 
c⁄ã¡
=(
uöt32_t
 *)
a
;

252 
i
=0;i<
n
;i++)

253 
	`˝rötf
("%x ",*(
c⁄ã¡
+
i
));

254 
	`˝rötf
("\n");

256 
	}
}

258 
	$m⁄_dumpxp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

260 
uöt32_t
 
va
,
∑
,*
c⁄ã¡
;

261 
i
,
n
;

262 if(
¨gc
<3)

264 
	`˝rötf
("Commandárgument is illegle!\n");

267 
n
=()
	`gëva
(
¨gv
[1],10);

268 
∑
 = 
	`gëva
(
¨gv
[2],16);

269 
va
 = (
uöt32_t
)
	`KADDR
(
∑
);

270 
c⁄ã¡
=(
uöt32_t
 *)
va
;

271 
i
=0;i<
n
;i++)

272 
	`˝rötf
("%x ",*(
c⁄ã¡
+
i
));

273 
	`˝rötf
("\n");

275 
	}
}

277 
	$m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

279 
uöt32_t
 
ªã•
;

280 
Tøp‰ame
 *
tf1
;

281 if(
tf
->
tf_å≠no
==3||tf->tf_trapno==1)

283 
ªã•
=
tf
->
tf_ªgs
.
ªg_€•
-0x20;

286 
tf1
=(
Tøp‰ame
*)
ªã•
;

287 
tf1
->
tf_eÊags
|=0x10000;

288 
tf1
->
tf_eÊags
&=~0x100;

291 
	`wrôe_e•
(
ªã•
);

292 
	`å≠ªt
();

295 
	}
}

297 
	$m⁄_°ïi
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

299 
uöt32_t
 
ªã•
;

300 
Tøp‰ame
 *
tf1
;

301 
ªã•
=
tf
->
tf_ªgs
.
ªg_€•
-0x20;

304 
tf1
=(
Tøp‰ame
*)
ªã•
;

305 
	`m⁄ô‹_dißs
(
tf1
->
tf_eù
,1);

308 
tf1
->
tf_eÊags
|=0x100;

311 
	`wrôe_e•
(
ªã•
);

312 
	`å≠ªt
();

314 
	}
}

319 
	#WHITESPACE
 "\t\r\¿"

	)

320 
	#MAXARGS
 16

	)

323 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

325 
¨gc
;

326 *
¨gv
[
MAXARGS
];

327 
i
;

330 
¨gc
 = 0;

331 
¨gv
[
¨gc
] = 0;

334 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

335 *
buf
++ = 0;

336 i‡(*
buf
 == 0)

340 i‡(
¨gc
 =
MAXARGS
-1) {

341 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

344 
¨gv
[
¨gc
++] = 
buf
;

345 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

346 
buf
++;

348 
¨gv
[
¨gc
] = 0;

351 i‡(
¨gc
 == 0)

353 
i
 = 0; i < 
NCOMMANDS
; i++) {

354 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

355  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

357 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

359 
	}
}

362 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

364 *
buf
;

366 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

367 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

369 i‡(
tf
 !
NULL
)

370 
	`¥öt_å≠‰ame
(
tf
);

373 
buf
 = 
	`ªadlöe
("K> ");

374 i‡(
buf
 !
NULL
)

375 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

378 
	}
}

384 
	$ªad_eù
()

386 
uöt32_t
 
ˇŒîpc
;

387 
__asm
 
	`__vﬁ©ûe
("mov»4(%%ebp), %0" : "Ù" (
ˇŒîpc
));

388  
ˇŒîpc
;

389 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

18 
m⁄_showm≠pögs
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

19 
m⁄_≥rmissi⁄
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

20 
m⁄_dumpx
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

21 
m⁄_dumpxp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

22 
m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

23 
m⁄_°ïi
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/pci.c

1 
	~<öc/x86.h
>

2 
	~<öc/as£π.h
>

3 
	~<öc/°rög.h
>

4 
	~<kîn/pci.h
>

5 
	~<kîn/pcúeg.h
>

6 
	~<kîn/e100.h
>

9 
	gpci_show_devs
 = 1;

10 
	gpci_show_addrs
 = 1;

14 
uöt32_t
 
	gpci_c⁄f1_addr_i›‹t
 = 0x0cf8;

15 
uöt32_t
 
	gpci_c⁄f1_d©a_i›‹t
 = 0x0cfc;

18 
pci_bridge_©èch
(
pci_func
 *
pcif
);

21 
	spci_drivî
 {

22 
uöt32_t
 
	mkey1
, 
	mkey2
;

23 (*
	m©èch‚
Ë(
pci_func
 *
	mpcif
);

27 
pci_drivî
 
	gpci_©èch_˛ass
[] = {

28 { 
PCI_CLASS_BRIDGE
, 
PCI_SUBCLASS_BRIDGE_PCI
, &
pci_bridge_©èch
 },

33 
pci_drivî
 
	gpci_©èch_víd‹
[] = {

34 {
PCI_VENDOR_ID_INTEL
,
INTEL_82559_ETHERNET_DEVICE_ID
,&
pci_e100_©èch
},

39 
	$pci_c⁄f1_£t_addr
(
uöt32_t
 
bus
,

40 
uöt32_t
 
dev
,

41 
uöt32_t
 
func
,

42 
uöt32_t
 
off£t
)

44 
	`as£π
(
bus
 < 256);

45 
	`as£π
(
dev
 < 32);

46 
	`as£π
(
func
 < 8);

47 
	`as£π
(
off£t
 < 256);

48 
	`as£π
((
off£t
 & 0x3) == 0);

50 
uöt32_t
 
v
 = (1 << 31) |

51 (
bus
 << 16Ë| (
dev
 << 11Ë| (
func
 << 8Ë| (
off£t
);

52 
	`oué
(
pci_c⁄f1_addr_i›‹t
, 
v
);

53 
	}
}

55 
uöt32_t


56 
	$pci_c⁄f_ªad
(
pci_func
 *
f
, 
uöt32_t
 
off
)

58 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
, f->
func
, 
off
);

59  
	`öl
(
pci_c⁄f1_d©a_i›‹t
);

60 
	}
}

63 
	$pci_c⁄f_wrôe
(
pci_func
 *
f
, 
uöt32_t
 
off
, uöt32_à
v
)

65 
	`pci_c⁄f1_£t_addr
(
f
->
bus
->
bu¢o
, f->
dev
, f->
func
, 
off
);

66 
	`oué
(
pci_c⁄f1_d©a_i›‹t
, 
v
);

67 
	}
}

69 
__©åibuã__
((
w¨n_unu£d_ªsu…
))

70 
	$pci_©èch_m©ch
(
uöt32_t
 
key1
, uöt32_à
key2
,

71 
pci_drivî
 *
li°
, 
pci_func
 *
pcif
)

73 
uöt32_t
 
i
;

75 
i
 = 0; 
li°
[i].
©èch‚
; i++) {

76 i‡(
li°
[
i
].
key1
 =key1 &&Üi°[i].
key2
 == key2) {

77 
r
 = 
li°
[
i
].
	`©èch‚
(
pcif
);

78 i‡(
r
 > 0)

79  
r
;

80 i‡(
r
 < 0)

81 
	`˝rötf
("pci_attach_match:áttaching "

83 
key1
, 
key2
, 
li°
[
i
].
©èch‚
, 
r
);

87 
	}
}

90 
	$pci_©èch
(
pci_func
 *
f
)

95 
	`pci_©èch_m©ch
(
	`PCI_CLASS
(
f
->
dev_˛ass
),

96 
	`PCI_SUBCLASS
(
f
->
dev_˛ass
),

97 &
pci_©èch_˛ass
[0], 
f
) ||

98 
	`pci_©èch_m©ch
(
	`PCI_VENDOR
(
f
->
dev_id
),

99 
	`PCI_PRODUCT
(
f
->
dev_id
),

100 &
pci_©èch_víd‹
[0], 
f
);

101 
	}
}

103 c⁄° *
	gpci_˛ass
[] =

115 
	$pci_¥öt_func
(
pci_func
 *
f
)

117 c⁄° *
˛ass
 = 
pci_˛ass
[0];

118 i‡(
	`PCI_CLASS
(
f
->
dev_˛ass
Ë< (
pci_˛ass
) / (pci_class[0]))

119 
˛ass
 = 
pci_˛ass
[
	`PCI_CLASS
(
f
->
dev_˛ass
)];

121 
	`˝rötf
("PCI: %02x:%02x.%d: %04x:%04x: class: %x.%x (%s) irq: %d\n",

122 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

123 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id),

124 
	`PCI_CLASS
(
f
->
dev_˛ass
), 
	`PCI_SUBCLASS
(f->dev_˛ass), 
˛ass
,

125 
f
->
úq_löe
);

126 
	}
}

129 
	$pci_sˇn_bus
(
pci_bus
 *
bus
)

131 
tŸÆdev
 = 0;

132 
pci_func
 
df
;

133 
	`mem£t
(&
df
, 0, (df));

134 
df
.
bus
 = bus;

136 
df
.
dev
 = 0; df.dev < 32; df.dev++) {

137 
uöt32_t
 
bhlc
 = 
	`pci_c⁄f_ªad
(&
df
, 
PCI_BHLC_REG
);

142 i‡(
	`PCI_HDRTYPE_TYPE
(
bhlc
) > 1)

145 
tŸÆdev
++;

147 
pci_func
 
f
 = 
df
;

150 
f
.
func
 = 0; f.fun¯< (
	`PCI_HDRTYPE_MULTIFN
(
bhlc
) ? 8 : 1);

151 
f
.
func
++) {

152 
pci_func
 
af
 = 
f
;

154 
af
.
dev_id
 = 
	`pci_c⁄f_ªad
(&
f
, 
PCI_ID_REG
);

156 i‡(
	`PCI_VENDOR
(
af
.
dev_id
) == 0xffff)

159 
uöt32_t
 
öå
 = 
	`pci_c⁄f_ªad
(&
af
, 
PCI_INTERRUPT_REG
);

160 
af
.
úq_löe
 = 
	`PCI_INTERRUPT_LINE
(
öå
);

164 
af
.
dev_˛ass
 = 
	`pci_c⁄f_ªad
(&af, 
PCI_CLASS_REG
);

165 i‡(
pci_show_devs
)

166 
	`pci_¥öt_func
(&
af
);

167 
	`pci_©èch
(&
af
);

171  
tŸÆdev
;

172 
	}
}

175 
	$pci_bridge_©èch
(
pci_func
 *
pcif
)

177 
uöt32_t
 
i‹eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_STATIO_REG
);

178 
uöt32_t
 
bu§eg
 = 
	`pci_c⁄f_ªad
(
pcif
, 
PCI_BRIDGE_BUS_REG
);

182 i‡(
	`PCI_BRIDGE_IO_32BITS
(
i‹eg
)) {

183 
	`˝rötf
("PCI: %02x:%02x.%d: 32-bit bridge IOÇot supported.\n",

184 
pcif
->
bus
->
bu¢o
,Öcif->
dev
,Öcif->
func
);

188 
pci_bus
 
nbus
;

189 
	`mem£t
(&
nbus
, 0, (nbus));

190 
nbus
.
∑ª¡_bridge
 = 
pcif
;

193 
nbus
.
bu¢o
 = (
bu§eg
 >> 
PCI_BRIDGE_BUS_SECONDARY_SHIFT
) & 0xff;

195 i‡(
pci_show_devs
)

196 
	`˝rötf
("PCI: %02x:%02x.%d: bridgeÅo PCI bus %d--%d\n",

197 
pcif
->
bus
->
bu¢o
,Öcif->
dev
,Öcif->
func
,

198 
nbus
.
bu¢o
,

199 (
bu§eg
 >> 
PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
) & 0xff);

201 
	`pci_sˇn_bus
(&
nbus
);

203 
	}
}

210 
	$pci_func_íabÀ
(
pci_func
 *
f
)

216 
	`pci_c⁄f_wrôe
(
f
, 
PCI_COMMAND_STATUS_REG
,

217 
PCI_COMMAND_IO_ENABLE
 |

218 
PCI_COMMAND_MEM_ENABLE
 |

219 
PCI_COMMAND_MASTER_ENABLE
);

221 
uöt32_t
 
b¨_width
;

222 
uöt32_t
 
b¨
;

223 
b¨
 = 
PCI_MAPREG_START
; b¨ < 
PCI_MAPREG_END
;

224 
b¨
 +
b¨_width
)

226 
uöt32_t
 
ﬁdv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

228 
b¨_width
 = 4;

229 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 0xffffffff);

230 
uöt32_t
 
rv
 = 
	`pci_c⁄f_ªad
(
f
, 
b¨
);

232 i‡(
rv
 == 0)

235 
ªgnum
 = 
	`PCI_MAPREG_NUM
(
b¨
);

236 
uöt32_t
 
ba£
, 
size
;

239 i‡(
	`PCI_MAPREG_TYPE
(
rv
Ë=
PCI_MAPREG_TYPE_MEM
) {

240 i‡(
	`PCI_MAPREG_MEM_TYPE
(
rv
Ë=
PCI_MAPREG_MEM_TYPE_64BIT
)

241 
b¨_width
 = 8;

243 
size
 = 
	`PCI_MAPREG_MEM_SIZE
(
rv
);

244 
ba£
 = 
	`PCI_MAPREG_MEM_ADDR
(
ﬁdv
);

245 i‡(
pci_show_addrs
)

246 
	`˝rötf
(" memÑegion %d: %d bytesát 0x%x\n",

247 
ªgnum
, 
size
, 
ba£
);

249 
size
 = 
	`PCI_MAPREG_IO_SIZE
(
rv
);

250 
ba£
 = 
	`PCI_MAPREG_IO_ADDR
(
ﬁdv
);

251 i‡(
pci_show_addrs
)

252 
	`˝rötf
(" ioÑegion %d: %d bytesát 0x%x\n",

253 
ªgnum
, 
size
, 
ba£
);

256 
	`pci_c⁄f_wrôe
(
f
, 
b¨
, 
ﬁdv
);

257 
f
->
ªg_ba£
[
ªgnum
] = 
ba£
;

258 
f
->
ªg_size
[
ªgnum
] = 
size
;

260 i‡(
size
 && !
ba£
)

261 
	`˝rötf
("PCI device %02x:%02x.%d (%04x:%04x) "

264 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

265 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id),

266 
ªgnum
, 
ba£
, 
size
);

269 
	`˝rötf
("PCI function %02x:%02x.%d (%04x:%04x)Énabled\n",

270 
f
->
bus
->
bu¢o
, f->
dev
, f->
func
,

271 
	`PCI_VENDOR
(
f
->
dev_id
), 
	`PCI_PRODUCT
(f->dev_id));

272 
	}
}

275 
	$pci_öô
()

277 
pci_bus
 
roŸ_bus
;

278 
	`mem£t
(&
roŸ_bus
, 0, (root_bus));

281  
	`pci_sˇn_bus
(&
roŸ_bus
);

282 
	}
}

	@kern/pci.h

1 #i‚de‡
JOS_KERN_PCI_H


2 
	#JOS_KERN_PCI_H


	)

4 
	~<öc/ty≥s.h
>

7 íum { 
	mpci_ªs_bus
, 
	mpci_ªs_mem
, 
	mpci_ªs_io
, 
	mpci_ªs_max
 };

9 
	gpci_bus
;

11 
	spci_func
 {

12 
pci_bus
 *
	mbus
;

14 
uöt32_t
 
	mdev
;

15 
uöt32_t
 
	mfunc
;

17 
uöt32_t
 
	mdev_id
;

18 
uöt32_t
 
	mdev_˛ass
;

20 
uöt32_t
 
	mªg_ba£
[6];

21 
uöt32_t
 
	mªg_size
[6];

22 
uöt8_t
 
	múq_löe
;

25 
	spci_bus
 {

26 
pci_func
 *
	m∑ª¡_bridge
;

27 
uöt32_t
 
	mbu¢o
;

30 
pci_öô
();

31 
pci_func_íabÀ
(
pci_func
 *
f
);

	@kern/pcireg.h

34 #i‚de‡
_DEV_PCI_PCIREG_H_


35 
	#_DEV_PCI_PCIREG_H_


	)

43 
	~<öc/ty≥s.h
>

48 
	#PCI_ID_REG
 0x00

	)

50 
uöt16_t
 
	tpci_víd‹_id_t
;

51 
uöt16_t
 
	tpci_¥odu˘_id_t
;

53 
	#PCI_VENDOR_SHIFT
 0

	)

54 
	#PCI_VENDOR_MASK
 0xffff

	)

55 
	#PCI_VENDOR
(
id
) \

56 (((
id
Ë>> 
PCI_VENDOR_SHIFT
Ë& 
PCI_VENDOR_MASK
)

	)

58 
	#PCI_PRODUCT_SHIFT
 16

	)

59 
	#PCI_PRODUCT_MASK
 0xffff

	)

60 
	#PCI_PRODUCT
(
id
) \

61 (((
id
Ë>> 
PCI_PRODUCT_SHIFT
Ë& 
PCI_PRODUCT_MASK
)

	)

63 
	#PCI_ID_CODE
(
vid
,
pid
) \

64 ((((
vid
Ë& 
PCI_VENDOR_MASK
Ë<< 
PCI_VENDOR_SHIFT
) | \

65 (((
pid
Ë& 
PCI_PRODUCT_MASK
Ë<< 
PCI_PRODUCT_SHIFT
)) \

66 

	)

70 
	#PCI_COMMAND_STATUS_REG
 0x04

	)

71 
	#PCI_COMMAND_SHIFT
 0

	)

72 
	#PCI_COMMAND_MASK
 0xffff

	)

73 
	#PCI_STATUS_SHIFT
 16

	)

74 
	#PCI_STATUS_MASK
 0xffff

	)

76 
	#PCI_COMMAND_STATUS_CODE
(
cmd
,
°©
) \

77 ((((
cmd
Ë& 
PCI_COMMAND_MASK
Ë>> 
PCI_COMMAND_SHIFT
) | \

78 (((
°©
Ë& 
PCI_STATUS_MASK
Ë>> 
PCI_STATUS_SHIFT
)) \

79 

	)

80 
	#PCI_COMMAND_IO_ENABLE
 0x00000001

	)

81 
	#PCI_COMMAND_MEM_ENABLE
 0x00000002

	)

82 
	#PCI_COMMAND_MASTER_ENABLE
 0x00000004

	)

83 
	#PCI_COMMAND_SPECIAL_ENABLE
 0x00000008

	)

84 
	#PCI_COMMAND_INVALIDATE_ENABLE
 0x00000010

	)

85 
	#PCI_COMMAND_PALETTE_ENABLE
 0x00000020

	)

86 
	#PCI_COMMAND_PARITY_ENABLE
 0x00000040

	)

87 
	#PCI_COMMAND_STEPPING_ENABLE
 0x00000080

	)

88 
	#PCI_COMMAND_SERR_ENABLE
 0x00000100

	)

89 
	#PCI_COMMAND_BACKTOBACK_ENABLE
 0x00000200

	)

91 
	#PCI_STATUS_CAPLIST_SUPPORT
 0x00100000

	)

92 
	#PCI_STATUS_66MHZ_SUPPORT
 0x00200000

	)

93 
	#PCI_STATUS_UDF_SUPPORT
 0x00400000

	)

94 
	#PCI_STATUS_BACKTOBACK_SUPPORT
 0x00800000

	)

95 
	#PCI_STATUS_PARITY_ERROR
 0x01000000

	)

96 
	#PCI_STATUS_DEVSEL_FAST
 0x00000000

	)

97 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x02000000

	)

98 
	#PCI_STATUS_DEVSEL_SLOW
 0x04000000

	)

99 
	#PCI_STATUS_DEVSEL_MASK
 0x06000000

	)

100 
	#PCI_STATUS_TARGET_TARGET_ABORT
 0x08000000

	)

101 
	#PCI_STATUS_MASTER_TARGET_ABORT
 0x10000000

	)

102 
	#PCI_STATUS_MASTER_ABORT
 0x20000000

	)

103 
	#PCI_STATUS_SPECIAL_ERROR
 0x40000000

	)

104 
	#PCI_STATUS_PARITY_DETECT
 0x80000000

	)

109 
	#PCI_CLASS_REG
 0x08

	)

111 
uöt8_t
 
	tpci_˛ass_t
;

112 
uöt8_t
 
	tpci_sub˛ass_t
;

113 
uöt8_t
 
	tpci_öãrÁ˚_t
;

114 
uöt8_t
 
	tpci_ªvisi⁄_t
;

116 
	#PCI_CLASS_SHIFT
 24

	)

117 
	#PCI_CLASS_MASK
 0xff

	)

118 
	#PCI_CLASS
(
¸
) \

119 (((
¸
Ë>> 
PCI_CLASS_SHIFT
Ë& 
PCI_CLASS_MASK
)

	)

121 
	#PCI_SUBCLASS_SHIFT
 16

	)

122 
	#PCI_SUBCLASS_MASK
 0xff

	)

123 
	#PCI_SUBCLASS
(
¸
) \

124 (((
¸
Ë>> 
PCI_SUBCLASS_SHIFT
Ë& 
PCI_SUBCLASS_MASK
)

	)

126 
	#PCI_INTERFACE_SHIFT
 8

	)

127 
	#PCI_INTERFACE_MASK
 0xff

	)

128 
	#PCI_INTERFACE
(
¸
) \

129 (((
¸
Ë>> 
PCI_INTERFACE_SHIFT
Ë& 
PCI_INTERFACE_MASK
)

	)

131 
	#PCI_REVISION_SHIFT
 0

	)

132 
	#PCI_REVISION_MASK
 0xff

	)

133 
	#PCI_REVISION
(
¸
) \

134 (((
¸
Ë>> 
PCI_REVISION_SHIFT
Ë& 
PCI_REVISION_MASK
)

	)

136 
	#PCI_CLASS_CODE
(
maö˛ass
, 
sub˛ass
, 
öãrÁ˚
) \

137 ((((
maö˛ass
Ë& 
PCI_CLASS_MASK
Ë<< 
PCI_CLASS_SHIFT
) | \

138 (((
sub˛ass
Ë& 
PCI_SUBCLASS_MASK
Ë<< 
PCI_SUBCLASS_SHIFT
) | \

139 (((
öãrÁ˚
Ë& 
PCI_INTERFACE_MASK
Ë<< 
PCI_INTERFACE_SHIFT
))

	)

142 
	#PCI_CLASS_PREHISTORIC
 0x00

	)

143 
	#PCI_CLASS_MASS_STORAGE
 0x01

	)

144 
	#PCI_CLASS_NETWORK
 0x02

	)

145 
	#PCI_CLASS_DISPLAY
 0x03

	)

146 
	#PCI_CLASS_MULTIMEDIA
 0x04

	)

147 
	#PCI_CLASS_MEMORY
 0x05

	)

148 
	#PCI_CLASS_BRIDGE
 0x06

	)

149 
	#PCI_CLASS_COMMUNICATIONS
 0x07

	)

150 
	#PCI_CLASS_SYSTEM
 0x08

	)

151 
	#PCI_CLASS_INPUT
 0x09

	)

152 
	#PCI_CLASS_DOCK
 0x0a

	)

153 
	#PCI_CLASS_PROCESSOR
 0x0b

	)

154 
	#PCI_CLASS_SERIALBUS
 0x0c

	)

155 
	#PCI_CLASS_WIRELESS
 0x0d

	)

156 
	#PCI_CLASS_I2O
 0x0e

	)

157 
	#PCI_CLASS_SATCOM
 0x0f

	)

158 
	#PCI_CLASS_CRYPTO
 0x10

	)

159 
	#PCI_CLASS_DASP
 0x11

	)

160 
	#PCI_CLASS_UNDEFINED
 0xff

	)

163 
	#PCI_SUBCLASS_PREHISTORIC_MISC
 0x00

	)

164 
	#PCI_SUBCLASS_PREHISTORIC_VGA
 0x01

	)

167 
	#PCI_SUBCLASS_MASS_STORAGE_SCSI
 0x00

	)

168 
	#PCI_SUBCLASS_MASS_STORAGE_IDE
 0x01

	)

169 
	#PCI_SUBCLASS_MASS_STORAGE_FLOPPY
 0x02

	)

170 
	#PCI_SUBCLASS_MASS_STORAGE_IPI
 0x03

	)

171 
	#PCI_SUBCLASS_MASS_STORAGE_RAID
 0x04

	)

172 
	#PCI_SUBCLASS_MASS_STORAGE_ATA
 0x05

	)

173 
	#PCI_SUBCLASS_MASS_STORAGE_SATA
 0x06

	)

174 
	#PCI_SUBCLASS_MASS_STORAGE_MISC
 0x80

	)

177 
	#PCI_SUBCLASS_NETWORK_ETHERNET
 0x00

	)

178 
	#PCI_SUBCLASS_NETWORK_TOKENRING
 0x01

	)

179 
	#PCI_SUBCLASS_NETWORK_FDDI
 0x02

	)

180 
	#PCI_SUBCLASS_NETWORK_ATM
 0x03

	)

181 
	#PCI_SUBCLASS_NETWORK_ISDN
 0x04

	)

182 
	#PCI_SUBCLASS_NETWORK_WORLDFIP
 0x05

	)

183 
	#PCI_SUBCLASS_NETWORK_PCIMGMULTICOMP
 0x06

	)

184 
	#PCI_SUBCLASS_NETWORK_MISC
 0x80

	)

187 
	#PCI_SUBCLASS_DISPLAY_VGA
 0x00

	)

188 
	#PCI_SUBCLASS_DISPLAY_XGA
 0x01

	)

189 
	#PCI_SUBCLASS_DISPLAY_3D
 0x02

	)

190 
	#PCI_SUBCLASS_DISPLAY_MISC
 0x80

	)

193 
	#PCI_SUBCLASS_MULTIMEDIA_VIDEO
 0x00

	)

194 
	#PCI_SUBCLASS_MULTIMEDIA_AUDIO
 0x01

	)

195 
	#PCI_SUBCLASS_MULTIMEDIA_TELEPHONY
 0x02

	)

196 
	#PCI_SUBCLASS_MULTIMEDIA_MISC
 0x80

	)

199 
	#PCI_SUBCLASS_MEMORY_RAM
 0x00

	)

200 
	#PCI_SUBCLASS_MEMORY_FLASH
 0x01

	)

201 
	#PCI_SUBCLASS_MEMORY_MISC
 0x80

	)

204 
	#PCI_SUBCLASS_BRIDGE_HOST
 0x00

	)

205 
	#PCI_SUBCLASS_BRIDGE_ISA
 0x01

	)

206 
	#PCI_SUBCLASS_BRIDGE_EISA
 0x02

	)

207 
	#PCI_SUBCLASS_BRIDGE_MC
 0x03

	)

208 
	#PCI_SUBCLASS_BRIDGE_PCI
 0x04

	)

209 
	#PCI_SUBCLASS_BRIDGE_PCMCIA
 0x05

	)

210 
	#PCI_SUBCLASS_BRIDGE_NUBUS
 0x06

	)

211 
	#PCI_SUBCLASS_BRIDGE_CARDBUS
 0x07

	)

212 
	#PCI_SUBCLASS_BRIDGE_RACEWAY
 0x08

	)

213 
	#PCI_SUBCLASS_BRIDGE_STPCI
 0x09

	)

214 
	#PCI_SUBCLASS_BRIDGE_INFINIBAND
 0x0a

	)

215 
	#PCI_SUBCLASS_BRIDGE_MISC
 0x80

	)

218 
	#PCI_SUBCLASS_COMMUNICATIONS_SERIAL
 0x00

	)

219 
	#PCI_SUBCLASS_COMMUNICATIONS_PARALLEL
 0x01

	)

220 
	#PCI_SUBCLASS_COMMUNICATIONS_MPSERIAL
 0x02

	)

221 
	#PCI_SUBCLASS_COMMUNICATIONS_MODEM
 0x03

	)

222 
	#PCI_SUBCLASS_COMMUNICATIONS_GPIB
 0x04

	)

223 
	#PCI_SUBCLASS_COMMUNICATIONS_SMARTCARD
 0x05

	)

224 
	#PCI_SUBCLASS_COMMUNICATIONS_MISC
 0x80

	)

227 
	#PCI_SUBCLASS_SYSTEM_PIC
 0x00

	)

228 
	#PCI_SUBCLASS_SYSTEM_DMA
 0x01

	)

229 
	#PCI_SUBCLASS_SYSTEM_TIMER
 0x02

	)

230 
	#PCI_SUBCLASS_SYSTEM_RTC
 0x03

	)

231 
	#PCI_SUBCLASS_SYSTEM_PCIHOTPLUG
 0x04

	)

232 
	#PCI_SUBCLASS_SYSTEM_MISC
 0x80

	)

235 
	#PCI_SUBCLASS_INPUT_KEYBOARD
 0x00

	)

236 
	#PCI_SUBCLASS_INPUT_DIGITIZER
 0x01

	)

237 
	#PCI_SUBCLASS_INPUT_MOUSE
 0x02

	)

238 
	#PCI_SUBCLASS_INPUT_SCANNER
 0x03

	)

239 
	#PCI_SUBCLASS_INPUT_GAMEPORT
 0x04

	)

240 
	#PCI_SUBCLASS_INPUT_MISC
 0x80

	)

243 
	#PCI_SUBCLASS_DOCK_GENERIC
 0x00

	)

244 
	#PCI_SUBCLASS_DOCK_MISC
 0x80

	)

247 
	#PCI_SUBCLASS_PROCESSOR_386
 0x00

	)

248 
	#PCI_SUBCLASS_PROCESSOR_486
 0x01

	)

249 
	#PCI_SUBCLASS_PROCESSOR_PENTIUM
 0x02

	)

250 
	#PCI_SUBCLASS_PROCESSOR_ALPHA
 0x10

	)

251 
	#PCI_SUBCLASS_PROCESSOR_POWERPC
 0x20

	)

252 
	#PCI_SUBCLASS_PROCESSOR_MIPS
 0x30

	)

253 
	#PCI_SUBCLASS_PROCESSOR_COPROC
 0x40

	)

256 
	#PCI_SUBCLASS_SERIALBUS_FIREWIRE
 0x00

	)

257 
	#PCI_SUBCLASS_SERIALBUS_ACCESS
 0x01

	)

258 
	#PCI_SUBCLASS_SERIALBUS_SSA
 0x02

	)

259 
	#PCI_SUBCLASS_SERIALBUS_USB
 0x03

	)

260 
	#PCI_SUBCLASS_SERIALBUS_FIBER
 0x04

	)

261 
	#PCI_SUBCLASS_SERIALBUS_SMBUS
 0x05

	)

262 
	#PCI_SUBCLASS_SERIALBUS_INFINIBAND
 0x06

	)

263 
	#PCI_SUBCLASS_SERIALBUS_IPMI
 0x07

	)

264 
	#PCI_SUBCLASS_SERIALBUS_SERCOS
 0x08

	)

265 
	#PCI_SUBCLASS_SERIALBUS_CANBUS
 0x09

	)

268 
	#PCI_SUBCLASS_WIRELESS_IRDA
 0x00

	)

269 
	#PCI_SUBCLASS_WIRELESS_CONSUMERIR
 0x01

	)

270 
	#PCI_SUBCLASS_WIRELESS_RF
 0x10

	)

271 
	#PCI_SUBCLASS_WIRELESS_BLUETOOTH
 0x11

	)

272 
	#PCI_SUBCLASS_WIRELESS_BROADBAND
 0x12

	)

273 
	#PCI_SUBCLASS_WIRELESS_802_11A
 0x20

	)

274 
	#PCI_SUBCLASS_WIRELESS_802_11B
 0x21

	)

275 
	#PCI_SUBCLASS_WIRELESS_MISC
 0x80

	)

278 
	#PCI_SUBCLASS_I2O_STANDARD
 0x00

	)

282 
	#PCI_SUBCLASS_SATCOM_TV
 0x01

	)

283 
	#PCI_SUBCLASS_SATCOM_AUDIO
 0x02

	)

284 
	#PCI_SUBCLASS_SATCOM_VOICE
 0x03

	)

285 
	#PCI_SUBCLASS_SATCOM_DATA
 0x04

	)

288 
	#PCI_SUBCLASS_CRYPTO_NETCOMP
 0x00

	)

289 
	#PCI_SUBCLASS_CRYPTO_ENTERTAINMENT
 0x10

	)

290 
	#PCI_SUBCLASS_CRYPTO_MISC
 0x80

	)

293 
	#PCI_SUBCLASS_DASP_DPIO
 0x00

	)

294 
	#PCI_SUBCLASS_DASP_TIMEFREQ
 0x01

	)

295 
	#PCI_SUBCLASS_DASP_SYNC
 0x10

	)

296 
	#PCI_SUBCLASS_DASP_MGMT
 0x20

	)

297 
	#PCI_SUBCLASS_DASP_MISC
 0x80

	)

302 
	#PCI_BHLC_REG
 0x0c

	)

304 
	#PCI_BIST_SHIFT
 24

	)

305 
	#PCI_BIST_MASK
 0xff

	)

306 
	#PCI_BIST
(
bhl¸
) \

307 (((
bhl¸
Ë>> 
PCI_BIST_SHIFT
Ë& 
PCI_BIST_MASK
)

	)

309 
	#PCI_HDRTYPE_SHIFT
 16

	)

310 
	#PCI_HDRTYPE_MASK
 0xff

	)

311 
	#PCI_HDRTYPE
(
bhl¸
) \

312 (((
bhl¸
Ë>> 
PCI_HDRTYPE_SHIFT
Ë& 
PCI_HDRTYPE_MASK
)

	)

314 
	#PCI_HDRTYPE_TYPE
(
bhl¸
) \

315 (
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x7f)

	)

316 
	#PCI_HDRTYPE_MULTIFN
(
bhl¸
) \

317 ((
	`PCI_HDRTYPE
(
bhl¸
Ë& 0x80Ë!0)

	)

319 
	#PCI_LATTIMER_SHIFT
 8

	)

320 
	#PCI_LATTIMER_MASK
 0xff

	)

321 
	#PCI_LATTIMER
(
bhl¸
) \

322 (((
bhl¸
Ë>> 
PCI_LATTIMER_SHIFT
Ë& 
PCI_LATTIMER_MASK
)

	)

324 
	#PCI_CACHELINE_SHIFT
 0

	)

325 
	#PCI_CACHELINE_MASK
 0xff

	)

326 
	#PCI_CACHELINE
(
bhl¸
) \

327 (((
bhl¸
Ë>> 
PCI_CACHELINE_SHIFT
Ë& 
PCI_CACHELINE_MASK
)

	)

329 
	#PCI_BHLC_CODE
(
bi°
,
ty≥
,
mu…i
,
œãncy
,
ˇchñöe
) \

330 ((((
bi°
Ë& 
PCI_BIST_MASK
Ë<< 
PCI_BIST_SHIFT
) | \

331 (((
ty≥
Ë& 
PCI_HDRTYPE_MASK
Ë<< 
PCI_HDRTYPE_SHIFT
) | \

332 (((
mu…i
)?0x80:0Ë<< 
PCI_HDRTYPE_SHIFT
) | \

333 (((
œãncy
Ë& 
PCI_LATTIMER_MASK
Ë<< 
PCI_LATTIMER_SHIFT
) | \

334 (((
ˇchñöe
Ë& 
PCI_CACHELINE_MASK
Ë<< 
PCI_CACHELINE_SHIFT
))

	)

339 
	#PCI_HDRTYPE_DEVICE
 0

	)

340 
	#PCI_HDRTYPE_PPB
 1

	)

341 
	#PCI_HDRTYPE_PCB
 2

	)

346 
	#PCI_MAPREG_START
 0x10

	)

347 
	#PCI_MAPREG_END
 0x28

	)

348 
	#PCI_MAPREG_ROM
 0x30

	)

349 
	#PCI_MAPREG_PPB_END
 0x18

	)

350 
	#PCI_MAPREG_PCB_END
 0x14

	)

352 
	#PCI_MAPREG_TYPE
(
mr
) \

353 ((
mr
Ë& 
PCI_MAPREG_TYPE_MASK
)

	)

354 
	#PCI_MAPREG_TYPE_MASK
 0x00000001

	)

356 
	#PCI_MAPREG_TYPE_MEM
 0x00000000

	)

357 
	#PCI_MAPREG_TYPE_IO
 0x00000001

	)

358 
	#PCI_MAPREG_ROM_ENABLE
 0x00000001

	)

360 
	#PCI_MAPREG_MEM_TYPE
(
mr
) \

361 ((
mr
Ë& 
PCI_MAPREG_MEM_TYPE_MASK
)

	)

362 
	#PCI_MAPREG_MEM_TYPE_MASK
 0x00000006

	)

364 
	#PCI_MAPREG_MEM_TYPE_32BIT
 0x00000000

	)

365 
	#PCI_MAPREG_MEM_TYPE_32BIT_1M
 0x00000002

	)

366 
	#PCI_MAPREG_MEM_TYPE_64BIT
 0x00000004

	)

368 
	#PCI_MAPREG_MEM_PREFETCHABLE
(
mr
) \

369 (((
mr
Ë& 
PCI_MAPREG_MEM_PREFETCHABLE_MASK
Ë!0)

	)

370 
	#PCI_MAPREG_MEM_PREFETCHABLE_MASK
 0x00000008

	)

372 
	#PCI_MAPREG_MEM_ADDR
(
mr
) \

373 ((
mr
Ë& 
PCI_MAPREG_MEM_ADDR_MASK
)

	)

374 
	#PCI_MAPREG_MEM_SIZE
(
mr
) \

375 (
	`PCI_MAPREG_MEM_ADDR
(
mr
Ë& -PCI_MAPREG_MEM_ADDR(mr))

	)

376 
	#PCI_MAPREG_MEM_ADDR_MASK
 0xfffffff0

	)

378 
	#PCI_MAPREG_MEM64_ADDR
(
mr
) \

379 ((
mr
Ë& 
PCI_MAPREG_MEM64_ADDR_MASK
)

	)

380 
	#PCI_MAPREG_MEM64_SIZE
(
mr
) \

381 (
	`PCI_MAPREG_MEM64_ADDR
(
mr
Ë& -PCI_MAPREG_MEM64_ADDR(mr))

	)

382 
	#PCI_MAPREG_MEM64_ADDR_MASK
 0xfffffffffffffff0ULL

	)

384 
	#PCI_MAPREG_IO_ADDR
(
mr
) \

385 ((
mr
Ë& 
PCI_MAPREG_IO_ADDR_MASK
)

	)

386 
	#PCI_MAPREG_IO_SIZE
(
mr
) \

387 (
	`PCI_MAPREG_IO_ADDR
(
mr
Ë& -PCI_MAPREG_IO_ADDR(mr))

	)

388 
	#PCI_MAPREG_IO_ADDR_MASK
 0xfffffffc

	)

390 
	#PCI_MAPREG_SIZE_TO_MASK
(
size
) \

391 (-(
size
))

	)

393 
	#PCI_MAPREG_NUM
(
off£t
) \

394 ((()(
off£t
)-
PCI_MAPREG_START
)/4)

	)

400 
	#PCI_CARDBUS_CIS_REG
 0x28

	)

407 
	#PCI_SUBSYS_ID_REG
 0x2c

	)

412 
	#PCI_CAPLISTPTR_REG
 0x34

	)

413 
	#PCI_CARDBUS_CAPLISTPTR_REG
 0x14

	)

414 
	#PCI_CAPLIST_PTR
(
˝r
Ë((˝rË& 0xff)

	)

415 
	#PCI_CAPLIST_NEXT
(
¸
Ë(((¸Ë>> 8Ë& 0xff)

	)

416 
	#PCI_CAPLIST_CAP
(
¸
Ë((¸Ë& 0xff)

	)

418 
	#PCI_CAP_RESERVED0
 0x00

	)

419 
	#PCI_CAP_PWRMGMT
 0x01

	)

420 
	#PCI_CAP_AGP
 0x02

	)

421 
	#PCI_CAP_AGP_MAJOR
(
¸
Ë(((¸Ë>> 20Ë& 0xf)

	)

422 
	#PCI_CAP_AGP_MINOR
(
¸
Ë(((¸Ë>> 16Ë& 0xf)

	)

423 
	#PCI_CAP_VPD
 0x03

	)

424 
	#PCI_CAP_SLOTID
 0x04

	)

425 
	#PCI_CAP_MSI
 0x05

	)

426 
	#PCI_CAP_CPCI_HOTSWAP
 0x06

	)

427 
	#PCI_CAP_PCIX
 0x07

	)

428 
	#PCI_CAP_LDT
 0x08

	)

429 
	#PCI_CAP_VENDSPEC
 0x09

	)

430 
	#PCI_CAP_DEBUGPORT
 0x0a

	)

431 
	#PCI_CAP_CPCI_RSRCCTL
 0x0b

	)

432 
	#PCI_CAP_HOTPLUG
 0x0c

	)

433 
	#PCI_CAP_AGP8
 0x0e

	)

434 
	#PCI_CAP_SECURE
 0x0f

	)

435 
	#PCI_CAP_PCIEXPRESS
 0x10

	)

436 
	#PCI_CAP_MSIX
 0x11

	)

441 
	#PCI_VPD_ADDRESS_MASK
 0x7fff

	)

442 
	#PCI_VPD_ADDRESS_SHIFT
 16

	)

443 
	#PCI_VPD_ADDRESS
(
ofs
) \

444 (((
ofs
Ë& 
PCI_VPD_ADDRESS_MASK
Ë<< 
PCI_VPD_ADDRESS_SHIFT
)

	)

445 
	#PCI_VPD_DATAREG
(
ofs
Ë((ofsË+ 4)

	)

446 
	#PCI_VPD_OPFLAG
 0x80000000

	)

453 
	#PCI_PMCR
 0x02

	)

454 
	#PCI_PMCR_D1SUPP
 0x0200

	)

455 
	#PCI_PMCR_D2SUPP
 0x0400

	)

457 
	#PCI_PMCSR
 0x04

	)

458 
	#PCI_PMCSR_STATE_MASK
 0x03

	)

459 
	#PCI_PMCSR_STATE_D0
 0x00

	)

460 
	#PCI_PMCSR_STATE_D1
 0x01

	)

461 
	#PCI_PMCSR_STATE_D2
 0x02

	)

462 
	#PCI_PMCSR_STATE_D3
 0x03

	)

477 
	#PCI_PCIX_CMD
 0x00

	)

478 
	#PCI_PCIX_CMD_PERR_RECOVER
 0x00010000

	)

479 
	#PCI_PCIX_CMD_RELAXED_ORDER
 0x00020000

	)

480 
	#PCI_PCIX_CMD_BYTECNT_MASK
 0x000c0000

	)

481 
	#PCI_PCIX_CMD_BYTECNT_SHIFT
 18

	)

482 
	#PCI_PCIX_CMD_BCNT_512
 0x00000000

	)

483 
	#PCI_PCIX_CMD_BCNT_1024
 0x00040000

	)

484 
	#PCI_PCIX_CMD_BCNT_2048
 0x00080000

	)

485 
	#PCI_PCIX_CMD_BCNT_4096
 0x000c0000

	)

486 
	#PCI_PCIX_CMD_SPLTRANS_MASK
 0x00700000

	)

487 
	#PCI_PCIX_CMD_SPLTRANS_1
 0x00000000

	)

488 
	#PCI_PCIX_CMD_SPLTRANS_2
 0x00100000

	)

489 
	#PCI_PCIX_CMD_SPLTRANS_3
 0x00200000

	)

490 
	#PCI_PCIX_CMD_SPLTRANS_4
 0x00300000

	)

491 
	#PCI_PCIX_CMD_SPLTRANS_8
 0x00400000

	)

492 
	#PCI_PCIX_CMD_SPLTRANS_12
 0x00500000

	)

493 
	#PCI_PCIX_CMD_SPLTRANS_16
 0x00600000

	)

494 
	#PCI_PCIX_CMD_SPLTRANS_32
 0x00700000

	)

499 
	#PCI_PCIX_STATUS
 0x04

	)

500 
	#PCI_PCIX_STATUS_FN_MASK
 0x00000007

	)

501 
	#PCI_PCIX_STATUS_DEV_MASK
 0x000000f8

	)

502 
	#PCI_PCIX_STATUS_BUS_MASK
 0x0000ff00

	)

503 
	#PCI_PCIX_STATUS_64BIT
 0x00010000

	)

504 
	#PCI_PCIX_STATUS_133
 0x00020000

	)

505 
	#PCI_PCIX_STATUS_SPLDISC
 0x00040000

	)

506 
	#PCI_PCIX_STATUS_SPLUNEX
 0x00080000

	)

507 
	#PCI_PCIX_STATUS_DEVCPLX
 0x00100000

	)

508 
	#PCI_PCIX_STATUS_MAXB_MASK
 0x00600000

	)

509 
	#PCI_PCIX_STATUS_MAXB_SHIFT
 21

	)

510 
	#PCI_PCIX_STATUS_MAXB_512
 0x00000000

	)

511 
	#PCI_PCIX_STATUS_MAXB_1024
 0x00200000

	)

512 
	#PCI_PCIX_STATUS_MAXB_2048
 0x00400000

	)

513 
	#PCI_PCIX_STATUS_MAXB_4096
 0x00600000

	)

514 
	#PCI_PCIX_STATUS_MAXST_MASK
 0x03800000

	)

515 
	#PCI_PCIX_STATUS_MAXST_1
 0x00000000

	)

516 
	#PCI_PCIX_STATUS_MAXST_2
 0x00800000

	)

517 
	#PCI_PCIX_STATUS_MAXST_3
 0x01000000

	)

518 
	#PCI_PCIX_STATUS_MAXST_4
 0x01800000

	)

519 
	#PCI_PCIX_STATUS_MAXST_8
 0x02000000

	)

520 
	#PCI_PCIX_STATUS_MAXST_12
 0x02800000

	)

521 
	#PCI_PCIX_STATUS_MAXST_16
 0x03000000

	)

522 
	#PCI_PCIX_STATUS_MAXST_32
 0x03800000

	)

523 
	#PCI_PCIX_STATUS_MAXRS_MASK
 0x1c000000

	)

524 
	#PCI_PCIX_STATUS_MAXRS_1K
 0x00000000

	)

525 
	#PCI_PCIX_STATUS_MAXRS_2K
 0x04000000

	)

526 
	#PCI_PCIX_STATUS_MAXRS_4K
 0x08000000

	)

527 
	#PCI_PCIX_STATUS_MAXRS_8K
 0x0c000000

	)

528 
	#PCI_PCIX_STATUS_MAXRS_16K
 0x10000000

	)

529 
	#PCI_PCIX_STATUS_MAXRS_32K
 0x14000000

	)

530 
	#PCI_PCIX_STATUS_MAXRS_64K
 0x18000000

	)

531 
	#PCI_PCIX_STATUS_MAXRS_128K
 0x1c000000

	)

532 
	#PCI_PCIX_STATUS_SCERR
 0x20000000

	)

538 
	#PCI_INTERRUPT_REG
 0x3c

	)

540 
uöt8_t
 
	tpci_öå_œãncy_t
;

541 
uöt8_t
 
	tpci_öå_gø¡_t
;

542 
uöt8_t
 
	tpci_öå_pö_t
;

543 
uöt8_t
 
	tpci_öå_löe_t
;

545 
	#PCI_MAX_LAT_SHIFT
 24

	)

546 
	#PCI_MAX_LAT_MASK
 0xff

	)

547 
	#PCI_MAX_LAT
(
i¸
) \

548 (((
i¸
Ë>> 
PCI_MAX_LAT_SHIFT
Ë& 
PCI_MAX_LAT_MASK
)

	)

550 
	#PCI_MIN_GNT_SHIFT
 16

	)

551 
	#PCI_MIN_GNT_MASK
 0xff

	)

552 
	#PCI_MIN_GNT
(
i¸
) \

553 (((
i¸
Ë>> 
PCI_MIN_GNT_SHIFT
Ë& 
PCI_MIN_GNT_MASK
)

	)

555 
	#PCI_INTERRUPT_GRANT_SHIFT
 24

	)

556 
	#PCI_INTERRUPT_GRANT_MASK
 0xff

	)

557 
	#PCI_INTERRUPT_GRANT
(
i¸
) \

558 (((
i¸
Ë>> 
PCI_INTERRUPT_GRANT_SHIFT
Ë& 
PCI_INTERRUPT_GRANT_MASK
)

	)

560 
	#PCI_INTERRUPT_LATENCY_SHIFT
 16

	)

561 
	#PCI_INTERRUPT_LATENCY_MASK
 0xff

	)

562 
	#PCI_INTERRUPT_LATENCY
(
i¸
) \

563 (((
i¸
Ë>> 
PCI_INTERRUPT_LATENCY_SHIFT
Ë& 
PCI_INTERRUPT_LATENCY_MASK
)

	)

565 
	#PCI_INTERRUPT_PIN_SHIFT
 8

	)

566 
	#PCI_INTERRUPT_PIN_MASK
 0xff

	)

567 
	#PCI_INTERRUPT_PIN
(
i¸
) \

568 (((
i¸
Ë>> 
PCI_INTERRUPT_PIN_SHIFT
Ë& 
PCI_INTERRUPT_PIN_MASK
)

	)

570 
	#PCI_INTERRUPT_LINE_SHIFT
 0

	)

571 
	#PCI_INTERRUPT_LINE_MASK
 0xff

	)

572 
	#PCI_INTERRUPT_LINE
(
i¸
) \

573 (((
i¸
Ë>> 
PCI_INTERRUPT_LINE_SHIFT
Ë& 
PCI_INTERRUPT_LINE_MASK
)

	)

575 
	#PCI_INTERRUPT_CODE
(
œt
,
g¡
,
pö
,
löe
) \

576 ((((
œt
)&
PCI_INTERRUPT_LATENCY_MASK
)<<
PCI_INTERRUPT_LATENCY_SHIFT
)| \

577 (((
g¡
)&
PCI_INTERRUPT_GRANT_MASK
Ë<<
PCI_INTERRUPT_GRANT_SHIFT
) | \

578 (((
pö
)&
PCI_INTERRUPT_PIN_MASK
Ë<<
PCI_INTERRUPT_PIN_SHIFT
) | \

579 (((
löe
)&
PCI_INTERRUPT_LINE_MASK
Ë<<
PCI_INTERRUPT_LINE_SHIFT
))

	)

581 
	#PCI_INTERRUPT_PIN_NONE
 0x00

	)

582 
	#PCI_INTERRUPT_PIN_A
 0x01

	)

583 
	#PCI_INTERRUPT_PIN_B
 0x02

	)

584 
	#PCI_INTERRUPT_PIN_C
 0x03

	)

585 
	#PCI_INTERRUPT_PIN_D
 0x04

	)

586 
	#PCI_INTERRUPT_PIN_MAX
 0x04

	)

589 
	#PCI_BRIDGE_BUS_REG
 0x18

	)

590 
	#PCI_BRIDGE_BUS_PRIMARY_SHIFT
 0

	)

591 
	#PCI_BRIDGE_BUS_SECONDARY_SHIFT
 8

	)

592 
	#PCI_BRIDGE_BUS_SUBORDINATE_SHIFT
 16

	)

594 
	#PCI_BRIDGE_STATIO_REG
 0x1C

	)

595 
	#PCI_BRIDGE_STATIO_IOBASE_SHIFT
 0

	)

596 
	#PCI_BRIDGE_STATIO_IOLIMIT_SHIFT
 8

	)

597 
	#PCI_BRIDGE_STATIO_STATUS_SHIFT
 16

	)

598 
	#PCI_BRIDGE_STATIO_IOBASE_MASK
 0xf0

	)

599 
	#PCI_BRIDGE_STATIO_IOLIMIT_MASK
 0xf0

	)

600 
	#PCI_BRIDGE_STATIO_STATUS_MASK
 0xffff

	)

601 
	#PCI_BRIDGE_IO_32BITS
(
ªg
Ë((‘egË& 0xfË=1)

	)

603 
	#PCI_BRIDGE_MEMORY_REG
 0x20

	)

604 
	#PCI_BRIDGE_MEMORY_BASE_SHIFT
 4

	)

605 
	#PCI_BRIDGE_MEMORY_LIMIT_SHIFT
 20

	)

606 
	#PCI_BRIDGE_MEMORY_BASE_MASK
 0xffff

	)

607 
	#PCI_BRIDGE_MEMORY_LIMIT_MASK
 0xffff

	)

609 
	#PCI_BRIDGE_PREFETCHMEM_REG
 0x24

	)

610 
	#PCI_BRIDGE_PREFETCHMEM_BASE_SHIFT
 4

	)

611 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_SHIFT
 20

	)

612 
	#PCI_BRIDGE_PREFETCHMEM_BASE_MASK
 0xffff

	)

613 
	#PCI_BRIDGE_PREFETCHMEM_LIMIT_MASK
 0xffff

	)

614 
	#PCI_BRIDGE_PREFETCHMEM_64BITS
(
ªg
Ë(‘egË& 0xf)

	)

616 
	#PCI_BRIDGE_PREFETCHBASE32_REG
 0x28

	)

617 
	#PCI_BRIDGE_PREFETCHLIMIT32_REG
 0x2C

	)

619 
	#PCI_BRIDGE_IOHIGH_REG
 0x30

	)

620 
	#PCI_BRIDGE_IOHIGH_BASE_SHIFT
 0

	)

621 
	#PCI_BRIDGE_IOHIGH_LIMIT_SHIFT
 16

	)

622 
	#PCI_BRIDGE_IOHIGH_BASE_MASK
 0xffff

	)

623 
	#PCI_BRIDGE_IOHIGH_LIMIT_MASK
 0xffff

	)

625 
	#PCI_BRIDGE_CONTROL_REG
 0x3C

	)

626 
	#PCI_BRIDGE_CONTROL_SHIFT
 16

	)

627 
	#PCI_BRIDGE_CONTROL_MASK
 0xffff

	)

628 
	#PCI_BRIDGE_CONTROL_PERE
 (1 << 0)

	)

629 
	#PCI_BRIDGE_CONTROL_SERR
 (1 << 1)

	)

630 
	#PCI_BRIDGE_CONTROL_ISA
 (1 << 2)

	)

631 
	#PCI_BRIDGE_CONTROL_VGA
 (1 << 3)

	)

633 
	#PCI_BRIDGE_CONTROL_MABRT
 (1 << 5)

	)

634 
	#PCI_BRIDGE_CONTROL_SECBR
 (1 << 6)

	)

635 
	#PCI_BRIDGE_CONTROL_SECFASTB2B
 (1 << 7)

	)

636 
	#PCI_BRIDGE_CONTROL_PRI_DISC_TIMER
 (1 << 8)

	)

637 
	#PCI_BRIDGE_CONTROL_SEC_DISC_TIMER
 (1 << 9)

	)

638 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_STAT
 (1 << 10)

	)

639 
	#PCI_BRIDGE_CONTROL_DISC_TIMER_SERR
 (1 << 11)

	)

645 
	spci_vpd_smÆÃes
 {

646 
uöt8_t
 
	mvpdªs_byã0
;

648 } 
__©åibuã__
((
__∑cked__
));

650 
	spci_vpd_œrgîes
 {

651 
uöt8_t
 
	mvpdªs_byã0
;

652 
uöt8_t
 
	mvpdªs_Àn_lsb
;

653 
uöt8_t
 
	mvpdªs_Àn_msb
;

655 } 
__©åibuã__
((
__∑cked__
));

657 
	#PCI_VPDRES_ISLARGE
(
x
Ë((xË& 0x80)

	)

659 
	#PCI_VPDRES_SMALL_LENGTH
(
x
Ë((xË& 0x7)

	)

660 
	#PCI_VPDRES_SMALL_NAME
(
x
Ë(((xË>> 3Ë& 0xf)

	)

662 
	#PCI_VPDRES_LARGE_NAME
(
x
Ë((xË& 0x7f)

	)

664 
	#PCI_VPDRES_TYPE_COMPATIBLE_DEVICE_ID
 0x3

	)

665 
	#PCI_VPDRES_TYPE_VENDOR_DEFINED
 0xê

	)

666 
	#PCI_VPDRES_TYPE_END_TAG
 0x‡

	)

668 
	#PCI_VPDRES_TYPE_IDENTIFIER_STRING
 0x02

	)

669 
	#PCI_VPDRES_TYPE_VPD
 0x10

	)

671 
	spci_vpd
 {

672 
uöt8_t
 
	mvpd_key0
;

673 
uöt8_t
 
	mvpd_key1
;

674 
uöt8_t
 
	mvpd_Àn
;

676 } 
__©åibuã__
((
__∑cked__
));

708 
	#PCI32_DMA_BOUNCE_THRESHOLD
 0x100000000ULL

	)

	@kern/picirq.c

3 
	~<öc/as£π.h
>

5 
	~<kîn/picúq.h
>

10 
uöt16_t
 
	gúq_mask_8259A
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

11 
boﬁ
 
	gdidöô
;

15 
	$pic_öô
()

17 
didöô
 = 1;

20 
	`outb
(
IO_PIC1
+1, 0xFF);

21 
	`outb
(
IO_PIC2
+1, 0xFF);

29 
	`outb
(
IO_PIC1
, 0x11);

32 
	`outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

36 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

46 
	`outb
(
IO_PIC1
+1, 0x3);

49 
	`outb
(
IO_PIC2
, 0x11);

50 
	`outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

51 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

54 
	`outb
(
IO_PIC2
+1, 0x01);

60 
	`outb
(
IO_PIC1
, 0x68);

61 
	`outb
(
IO_PIC1
, 0x0a);

63 
	`outb
(
IO_PIC2
, 0x68);

64 
	`outb
(
IO_PIC2
, 0x0a);

66 i‡(
úq_mask_8259A
 != 0xFFFF)

67 
	`úq_£tmask_8259A
(
úq_mask_8259A
);

68 
	}
}

71 
	$úq_£tmask_8259A
(
uöt16_t
 
mask
)

73 
i
;

74 
úq_mask_8259A
 = 
mask
;

75 i‡(!
didöô
)

77 
	`outb
(
IO_PIC1
+1, ()
mask
);

78 
	`outb
(
IO_PIC2
+1, ()(
mask
 >> 8));

79 
	`˝rötf
("enabled interrupts:");

80 
i
 = 0; i < 16; i++)

81 i‡(~
mask
 & (1<<
i
))

82 
	`˝rötf
(" %d", 
i
);

83 
	`˝rötf
("\n");

84 
	}
}

	@kern/picirq.h

3 #i‚de‡
JOS_KERN_PICIRQ_H


4 
	#JOS_KERN_PICIRQ_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	#MAX_IRQS
 16

10 

	)

12 
	#IO_PIC1
 0x20

13 
	#IO_PIC2
 0xA0

14 

	)

15 
	#IRQ_SLAVE
 2

16 
	#IRQ_OFFSET
 32

17 

	)

19 #i‚de‡
__ASSEMBLER__


21 
	~<öc/ty≥s.h
>

22 
	~<öc/x86.h
>

24 
uöt16_t
 
úq_mask_8259A
;

25 
pic_öô
();

26 
úq_£tmask_8259A
(
uöt16_t
 
mask
);

	@kern/pmap.c

3 
	~<öc/x86.h
>

4 
	~<öc/mmu.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/k˛ock.h
>

11 
	~<kîn/ív.h
>

14 
phyßddr_t
 
	gmax∑
;

15 
size_t
 
	g≈age
;

16 
size_t
 
	gba£mem
;

17 
size_t
 
	gextmem
;

20 
pde_t
* 
	gboŸ_pgdú
;

21 
phyßddr_t
 
	gboŸ_¸3
;

22 * 
	gboŸ_‰ìmem
;

24 
Page
* 
	g∑ges
;

25 
Page_li°
 
	g∑ge_‰ì_li°
;

33 
Segdesc
 
	ggdt
[] =

36 
SEG_NULL
,

39 [
GD_KT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 0),

42 [
GD_KD
 >> 3] = 
SEG
(
STA_W
, 0x0, 0xffffffff, 0),

45 [
GD_UT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 3),

48 [
GD_UD
 >> 3] = 
SEG
(
STA_W
, 0x0, 0xffffffff, 3),

51 [
GD_TSS
 >> 3] = 
SEG_NULL


54 
P£udodesc
 
	ggdt_pd
 = {

55 (
gdt
) - 1, () gdt

59 
	$nvøm_ªad
(
r
)

61  
	`mc146818_ªad
(
r
) | (mc146818_read(r + 1) << 8);

62 
	}
}

65 
	$i386_dëe˘_mem‹y
()

68 
ba£mem
 = 
	`ROUNDDOWN
(
	`nvøm_ªad
(
NVRAM_BASELO
)*1024, 
PGSIZE
);

69 
extmem
 = 
	`ROUNDDOWN
(
	`nvøm_ªad
(
NVRAM_EXTLO
)*1024, 
PGSIZE
);

73 i‡(
extmem
)

74 
max∑
 = 
EXTPHYSMEM
 + 
extmem
;

76 
max∑
 = 
ba£mem
;

78 
≈age
 = 
max∑
 / 
PGSIZE
;

80 
	`˝rötf
("Physiˇ»mem‹y: %dKávaûabÀ, ", ()(
max∑
/1024));

81 
	`˝rötf
("ba£ = %dK,Éxãnded = %dK\n", ()(
ba£mem
/1024), ()(
extmem
/1024));

82 
	}
}

88 
check_boŸ_pgdú
();

89 
check_∑ge_Æloc
();

90 
∑ge_check
();

91 
boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
);

107 
	$boŸ_Æloc
(
uöt32_t
 
n
, uöt32_à
Æign
)

109 
íd
[];

110 *
v
;

117 i‡(
boŸ_‰ìmem
 == 0)

118 
boŸ_‰ìmem
 = 
íd
;

126 
boŸ_‰ìmem
=
	`ROUNDUP
(boŸ_‰ìmem,
Æign
);

127 
v
=(*)
boŸ_‰ìmem
;

128 
boŸ_‰ìmem
=boŸ_‰ìmem+
n
;

129  
v
;

131 
	}
}

146 
	$i386_vm_öô
()

148 
pde_t
* 
pgdú
;

149 
uöt32_t
 
¸0
;

150 
size_t
 
n
;

157 
pgdú
 = 
	`boŸ_Æloc
(
PGSIZE
, PGSIZE);

158 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

159 
boŸ_pgdú
 = 
pgdú
;

160 
boŸ_¸3
 = 
	`PADDR
(
pgdú
);

169 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdú)|
PTE_W
|
PTE_P
;

173 
pgdú
[
	`PDX
(
UVPT
)] = 
	`PADDR
’gdú)|
PTE_U
|
PTE_P
;

182 
∑ges
=(
Page
*)
	`boŸ_Æloc
(
≈age
*(Page),
PGSIZE
);

187 
ívs
=(
Env
*)
	`boŸ_Æloc
(
NENV
*(Env),
PGSIZE
);

193 
	`∑ge_öô
();

195 
	`check_∑ge_Æloc
();

197 
	`∑ge_check
();

209 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
UPAGES
,
≈age
*(
Page
),
	`PADDR
(
∑ges
),
PTE_U
|
PTE_P
);

217 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
UENVS
,
NENV
*(
Env
),
	`PADDR
(
ívs
),
PTE_U
|
PTE_P
);

229 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
KSTACKTOP
-
KSTKSIZE
,KSTKSIZE,
	`PADDR
(
boŸ°ack
),
PTE_W
 |
PTE_P
);

238 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
KERNBASE
,0xffffffff-KERNBASE,0x0,
PTE_W
 | 
PTE_P
);

240 
	`check_boŸ_pgdú
();

258 
pgdú
[0] =Ögdú[
	`PDX
(
KERNBASE
)];

261 
	`l¸3
(
boŸ_¸3
);

264 
¸0
 = 
	`r¸0
();

265 
¸0
 |
CR0_PE
|
CR0_PG
|
CR0_AM
|
CR0_WP
|
CR0_NE
|
CR0_TS
|
CR0_EM
|
CR0_MP
;

266 
¸0
 &~(
CR0_TS
|
CR0_EM
);

267 
	`l¸0
(
¸0
);

273 
asm
 volatile("lgdt gdt_pd");

274 
asm
 vﬁ©ûe("movw %%ax,%%gs" :: "a" (
GD_UD
|3));

275 
asm
 vﬁ©ûe("movw %%ax,%%fs" :: "a" (
GD_UD
|3));

276 
asm
 vﬁ©ûe("movw %%ax,%%es" :: "a" (
GD_KD
));

277 
asm
 vﬁ©ûe("movw %%ax,%%ds" :: "a" (
GD_KD
));

278 
asm
 vﬁ©ûe("movw %%ax,%%ss" :: "a" (
GD_KD
));

279 
asm
 vﬁ©ûe("ljm∞%0,$1f\¿1:\n" :: "i" (
GD_KT
));

280 
asm
 volatile("lldt %%ax" :: "a" (0));

286 
pgdú
[0] = 0;

289 
	`l¸3
(
boŸ_¸3
);

290 
	}
}

297 
	$check_∑ge_Æloc
()

299 
Page
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

300 
Page_li°
 
Ê
;

305 
	`LIST_FOREACH
(
µ0
, &
∑ge_‰ì_li°
, 
µ_lök
)

306 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0x97, 128);

308 
	`LIST_FOREACH
(
µ0
, &
∑ge_‰ì_li°
, 
µ_lök
) {

310 
	`as£π
(
µ0
 >
∑ges
);

311 
	`as£π
(
µ0
 < 
∑ges
 + 
≈age
);

314 
	`as£π
(
	`∑ge2∑
(
µ0
) != 0);

315 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
IOPHYSMEM
);

316 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
 - 
PGSIZE
);

317 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
);

318 
	`as£π
(
	`∑ge2kva
(
µ0
Ë!
	`ROUNDDOWN
(
boŸ_‰ìmem
 - 1, 
PGSIZE
));

322 
µ0
 = 
µ1
 = 
µ2
 = 0;

323 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

324 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

325 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

327 
	`as£π
(
µ0
);

328 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

329 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

330 
	`as£π
(
	`∑ge2∑
(
µ0
Ë< 
≈age
*
PGSIZE
);

331 
	`as£π
(
	`∑ge2∑
(
µ1
Ë< 
≈age
*
PGSIZE
);

332 
	`as£π
(
	`∑ge2∑
(
µ2
Ë< 
≈age
*
PGSIZE
);

335 
Ê
 = 
∑ge_‰ì_li°
;

336 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

339 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

342 
	`∑ge_‰ì
(
µ0
);

343 
	`∑ge_‰ì
(
µ1
);

344 
	`∑ge_‰ì
(
µ2
);

345 
µ0
 = 
µ1
 = 
µ2
 = 0;

346 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

347 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

348 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

349 
	`as£π
(
µ0
);

350 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

351 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

352 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

355 
∑ge_‰ì_li°
 = 
Ê
;

358 
	`∑ge_‰ì
(
µ0
);

359 
	`∑ge_‰ì
(
µ1
);

360 
	`∑ge_‰ì
(
µ2
);

362 
	`˝rötf
("check_page_alloc() succeeded!\n");

363 
	}
}

373 
phyßddr_t
 
check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
);

376 
	$check_boŸ_pgdú
()

378 
uöt32_t
 
i
, 
n
;

379 
pde_t
 *
pgdú
;

381 
pgdú
 = 
boŸ_pgdú
;

384 
n
 = 
	`ROUNDUP
(
≈age
*(
Page
), 
PGSIZE
);

385 
i
 = 0; i < 
n
; i +
PGSIZE
)

386 
	`as£π
(
	`check_va2∑
(
pgdú
, 
UPAGES
 + 
i
Ë=
	`PADDR
(
∑ges
) + i);

389 
n
 = 
	`ROUNDUP
(
NENV
*(
Env
), 
PGSIZE
);

390 
i
 = 0; i < 
n
; i +
PGSIZE
)

391 
	`as£π
(
	`check_va2∑
(
pgdú
, 
UENVS
 + 
i
Ë=
	`PADDR
(
ívs
) + i);

394 
i
 = 0; i < 
≈age
 * 
PGSIZE
; i += PGSIZE)

395 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KERNBASE
 + 
i
) == i);

398 
i
 = 0; i < 
KSTKSIZE
; i +
PGSIZE
)

399 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
KSTKSIZE
 + 
i
Ë=
	`PADDR
(
boŸ°ack
) + i);

400 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
PTSIZE
) == ~0);

403 
i
 = 0; i < 
NPDENTRIES
; i++) {

404 
i
) {

405 
	`PDX
(
VPT
):

406 
	`PDX
(
UVPT
):

407 
	`PDX
(
KSTACKTOP
-1):

408 
	`PDX
(
UPAGES
):

409 
	`PDX
(
UENVS
):

410 
	`as£π
(
pgdú
[
i
]);

413 i‡(
i
 >
	`PDX
(
KERNBASE
))

414 
	`as£π
(
pgdú
[
i
]);

416 
	`as£π
(
pgdú
[
i
] == 0);

420 
	`˝rötf
("check_boot_pgdir() succeeded!\n");

421 
	}
}

428 
phyßddr_t


429 
	$check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
)

431 
±e_t
 *
p
;

433 
pgdú
 = &pgdú[
	`PDX
(
va
)];

434 i‡(!(*
pgdú
 & 
PTE_P
))

436 
p
 = (
±e_t
*Ë
	`KADDR
(
	`PTE_ADDR
(*
pgdú
));

437 i‡(!(
p
[
	`PTX
(
va
)] & 
PTE_P
))

439  
	`PTE_ADDR
(
p
[
	`PTX
(
va
)]);

440 
	}
}

455 
	$∑ge_öô
()

471 
i
;

472 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

473 
i
 = 0; i < 
≈age
; i++) {

474 
∑ges
[
i
].
µ_ªf
 = 0;

475 
	`LIST_INSERT_HEAD
(&
∑ge_‰ì_li°
, &
∑ges
[
i
], 
µ_lök
);

477 
∑ges
[0].
µ_ªf
=1;

478 
	`LIST_REMOVE
(&
∑ges
[0],
µ_lök
);

479 
i
=
	`PPN
(
IOPHYSMEM
);i<=PPN(
	`ROUNDUP
(
	`PADDR
(
boŸ_‰ìmem
),
PGSIZE
));i++){

481 
∑ges
[
i
].
µ_ªf
=1;

482 
	`LIST_REMOVE
(&
∑ges
[
i
],
µ_lök
);

484 
	}
}

492 
	$∑ge_öôµ
(
Page
 *
µ
)

494 
	`mem£t
(
µ
, 0, (*pp));

495 
	}
}

512 
	$∑ge_Æloc
(
Page
 **
µ_°‹e
)

515 if(!
	`LIST_EMPTY
(&
∑ge_‰ì_li°
)){

516 *
µ_°‹e
=(
Page
*)
	`LIST_FIRST
(&
∑ge_‰ì_li°
);

517 
	`LIST_REMOVE
(*
µ_°‹e
,
µ_lök
);

518 
	`∑ge_öôµ
(*
µ_°‹e
);

524  -
E_NO_MEM
;

525  -
E_NO_MEM
;

526 
	}
}

533 
	$∑ge_‰ì
(
Page
 *
µ
)

536 if(
∑ges
[
	`∑ge2µn
(
µ
)].
µ_ªf
==0){

537 
	`LIST_INSERT_HEAD
(&
∑ge_‰ì_li°
,
µ
,
µ_lök
);

539 
	}
}

546 
	$∑ge_de¸ef
(
Page
* 
µ
)

548 i‡(--
µ
->
µ_ªf
 == 0)

549 
	`∑ge_‰ì
(
µ
);

550 
	}
}

570 
±e_t
 *

571 
	$pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
)

574 
pde_t
 *
pde
;

575 
±e_t
 *
pgèb
;

576 
±e_t
 *
µ_°‹e
;

577 
Page
 *
pgf‹èb
;

578 
pde
 = &
pgdú
[
	`PDX
(
va
)];

581 if(*
pde
 & 
PTE_P
){

582 
pgèb
 = (
±e_t
*)
	`KADDR
(
	`PTE_ADDR
(*
pde
));

584 if(!
¸óã
)

585  
NULL
;

586 if(
	`∑ge_Æloc
(&
pgf‹èb
)<0)

587  
NULL
;

588 
pgf‹èb
->
µ_ªf
=1;

590 
pgèb
 = (
±e_t
*)
	`KADDR
(
	`∑ge2∑
(
pgf‹èb
));

592 
	`mem£t
(
pgèb
,0,
PGSIZE
);

593 *
pde
 = 
	`PADDR
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

596 
µ_°‹e
=&
pgèb
[
	`PTX
(
va
)];

597  
µ_°‹e
;

599 
	}
}

624 
	$∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
µ
, *
va
, 
≥rm
)

627 
±e_t
 *
±e
;

628 if(!(
±e
=
	`pgdú_wÆk
(
pgdú
, 
va
, 1)))

629  -
E_NO_MEM
;

631 if(*
±e
&
PTE_P
){

632 if(
	`PTE_ADDR
(*
±e
)!=
	`∑ge2∑
(
µ
))

633 
	`∑ge_ªmove
(
pgdú
,
va
);

635 
µ
->
µ_ªf
--;

637 *
±e
 = 
	`∑ge2∑
(
µ
Ë| 
≥rm
 | 
PTE_P
;

639 
µ
->
µ_ªf
++;

640 
	`éb_övÆid©e
(
pgdú
,
va
);

644 
	}
}

657 
	$boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
)

660 
uöçå_t
 
a
,
œ°
;

661 
±e_t
 *
±e
;

663 
a
=
	`ROUNDDOWN
(
œ
,
PGSIZE
);

664 
œ°
=
	`ROUNDDOWN
(
œ
+
size
-1,
PGSIZE
);

667 
±e
 = 
	`pgdú_wÆk
(
pgdú
,(*)
a
,1);

668 if(
±e
==
NULL
)

670 if(*
±e
&
PTE_P
)

671 
	`∑nic
("remap");

672 *
±e
=
∑
 | 
≥rm
 | 
PTE_P
;

677 if(
a
==
œ°
)

679 
a
+=
PGSIZE
;

680 
∑
+=
PGSIZE
;

683 
	}
}

696 
Page
 *

697 
	$∑ge_lookup
(
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
)

700 
Page
 *
∑gef‹va
;

701 
±e_t
 *
±e
;

702 if(!(
±e
=
	`pgdú_wÆk
(
pgdú
,
va
,0)))

703  
NULL
;

705 
∑gef‹va
=
	`∑2∑ge
(
	`PTE_ADDR
(*
±e
));

707 if(
±e_°‹e
)

708 *
±e_°‹e
=
±e
;

710  
∑gef‹va
;

712 
	}
}

730 
	$∑ge_ªmove
(
pde_t
 *
pgdú
, *
va
)

733 
Page
 *
∑gef‹va
;

734 
±e_t
 *
±e
=
NULL
;

735 if((
∑gef‹va
=
	`∑ge_lookup
(
pgdú
,
va
,&
±e
))){

736 
	`∑ge_de¸ef
(
∑gef‹va
);

738 if(
±e
)

739 *
±e
=0;

740 
	`éb_övÆid©e
(
pgdú
,
va
);

742 
	}
}

749 
	$éb_övÆid©e
(
pde_t
 *
pgdú
, *
va
)

752 i‡(!
cuªnv
 || cuªnv->
ív_pgdú
 =
pgdú
)

753 
	`övÕg
(
va
);

754 
	}
}

756 
uöçå_t
 
	gu£r_mem_check_addr
;

777 
	$u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

780 
uöçå_t
 
a
,
œ°
;

781 
±e_t
 *
±e
;

782 
Page
 *
⁄ïage
;

783 
a
=(
uöçå_t
)
va
;

784 
u£r_mem_check_addr
=
a
;

785 
a
=
	`ROUNDDOWN
◊,
PGSIZE
);

786 
œ°
=
	`ROUNDDOWN
(
a
+
Àn
,
PGSIZE
);

788 if(
a
>=
ULIM
) {

789 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

790 
u£r_mem_check_addr
=
a
;

791  -
E_FAULT
;

794 if(!(
⁄ïage
=
	`∑ge_lookup
(
ív
->
ív_pgdú
,(*)
a
,&
±e
)))

796 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

797 
u£r_mem_check_addr
=
a
;

798  -
E_FAULT
;

800 if(!(*
±e
&
≥rm
))

802 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

803 
u£r_mem_check_addr
=
a
;

804  -
E_FAULT
;

809 if(
a
==
œ°
)

811 
a
+=
PGSIZE
;

814 
	}
}

824 
	$u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

826 i‡(
	`u£r_mem_check
(
ív
, 
va
, 
Àn
, 
≥rm
 | 
PTE_U
) < 0) {

827 
	`˝rötf
("[%08x] user_mem_checkássertion failure for "

828 "v®%08x\n", 
ív
->
ív_id
, 
u£r_mem_check_addr
);

829 
	`ív_de°roy
(
ív
);

831 
	}
}

835 
	$∑ge_check
()

837 
Page
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

838 
Page_li°
 
Ê
;

839 
±e_t
 *
±ï
, *
±ï1
;

840 *
va
;

841 
i
;

844 
µ0
 = 
µ1
 = 
µ2
 = 0;

845 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

846 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

847 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

849 
	`as£π
(
µ0
);

850 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

851 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

854 
Ê
 = 
∑ge_‰ì_li°
;

855 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

858 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

861 
	`as£π
(
	`∑ge_lookup
(
boŸ_pgdú
, (*Ë0x0, &
±ï
Ë=
NULL
);

864 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0) < 0);

867 
	`∑ge_‰ì
(
µ0
);

868 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0) == 0);

869 
	`as£π
(
	`PTE_ADDR
(
boŸ_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

870 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0Ë=
	`∑ge2∑
(
µ1
));

871 
	`as£π
(
µ1
->
µ_ªf
 == 1);

872 
	`as£π
(
µ0
->
µ_ªf
 == 1);

875 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 0) == 0);

876 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

877 
	`as£π
(
µ2
->
µ_ªf
 == 1);

880 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

883 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 0) == 0);

884 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

885 
	`as£π
(
µ2
->
µ_ªf
 == 1);

889 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

892 
±ï
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
PGSIZE
)]));

893 
	`as£π
(
	`pgdú_wÆk
(
boŸ_pgdú
, (*)
PGSIZE
, 0Ë=
±ï
+
	`PTX
(PGSIZE));

896 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_U
) == 0);

897 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

898 
	`as£π
(
µ2
->
µ_ªf
 == 1);

899 
	`as£π
(*
	`pgdú_wÆk
(
boŸ_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
);

900 
	`as£π
(
boŸ_pgdú
[0] & 
PTE_U
);

903 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ0
, (*Ë
PTSIZE
, 0) < 0);

906 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, (*Ë
PGSIZE
, 0) == 0);

907 
	`as£π
(!(*
	`pgdú_wÆk
(
boŸ_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
));

910 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0Ë=
	`∑ge2∑
(
µ1
));

911 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

913 
	`as£π
(
µ1
->
µ_ªf
 == 2);

914 
	`as£π
(
µ2
->
µ_ªf
 == 0);

917 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=0 &&Ö∞=
µ2
);

920 
	`∑ge_ªmove
(
boŸ_pgdú
, 0x0);

921 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0) == ~0);

922 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

923 
	`as£π
(
µ1
->
µ_ªf
 == 1);

924 
	`as£π
(
µ2
->
µ_ªf
 == 0);

927 
	`∑ge_ªmove
(
boŸ_pgdú
, (*Ë
PGSIZE
);

928 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0) == ~0);

929 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
) == ~0);

930 
	`as£π
(
µ1
->
µ_ªf
 == 0);

931 
	`as£π
(
µ2
->
µ_ªf
 == 0);

934 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=0 &&Ö∞=
µ1
);

937 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

942 
	`mem£t
(
	`∑ge2kva
(
µ1
), 1, 
PGSIZE
);

943 
	`mem£t
(
	`∑ge2kva
(
µ2
), 2, 
PGSIZE
);

944 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0);

945 
	`as£π
(
µ1
->
µ_ªf
 == 1);

946 
	`as£π
(*(*)0 == 0x01010101);

947 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, 0x0, 0);

948 
	`as£π
(*(*)0 == 0x02020202);

949 
	`as£π
(
µ2
->
µ_ªf
 == 1);

950 
	`as£π
(
µ1
->
µ_ªf
 == 0);

951 
	`∑ge_ªmove
(
boŸ_pgdú
, 0x0);

952 
	`as£π
(
µ2
->
µ_ªf
 == 0);

956 
	`as£π
(
	`PTE_ADDR
(
boŸ_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

957 
boŸ_pgdú
[0] = 0;

958 
	`as£π
(
µ0
->
µ_ªf
 == 1);

959 
µ0
->
µ_ªf
 = 0;

962 
	`∑ge_‰ì
(
µ0
);

963 
va
 = (*)(
PGSIZE
 * 
NPDENTRIES
 + PGSIZE);

964 
±ï
 = 
	`pgdú_wÆk
(
boŸ_pgdú
, 
va
, 1);

965 
±ï1
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
va
)]));

966 
	`as£π
(
±ï
 =
±ï1
 + 
	`PTX
(
va
));

967 
boŸ_pgdú
[
	`PDX
(
va
)] = 0;

968 
µ0
->
µ_ªf
 = 0;

971 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0xFF, 
PGSIZE
);

972 
	`∑ge_‰ì
(
µ0
);

973 
	`pgdú_wÆk
(
boŸ_pgdú
, 0x0, 1);

974 
±ï
 = 
	`∑ge2kva
(
µ0
);

975 
i
=0; i<
NPTENTRIES
; i++)

976 
	`as£π
((
±ï
[
i
] & 
PTE_P
) == 0);

977 
boŸ_pgdú
[0] = 0;

978 
µ0
->
µ_ªf
 = 0;

981 
∑ge_‰ì_li°
 = 
Ê
;

984 
	`∑ge_‰ì
(
µ0
);

985 
	`∑ge_‰ì
(
µ1
);

986 
	`∑ge_‰ì
(
µ2
);

988 
	`˝rötf
("page_check() succeeded!\n");

989 
	}
}

	@kern/pmap.h

3 #i‚de‡
JOS_KERN_PMAP_H


4 
	#JOS_KERN_PMAP_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/memœyout.h
>

10 
	~<öc/as£π.h
>

11 
	gEnv
;

19 
	#PADDR
(
kva
) \

21 
phyßddr_t
 
__m_kva
 = (phyßddr_tË(
kva
); \

22 i‡(
__m_kva
 < 
KERNBASE
) \

23 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
);\

24 
__m_kva
 - 
KERNBASE
; \

25 })

	)

29 
	#KADDR
(
∑
) \

31 
phyßddr_t
 
__m_∑
 = (
∑
); \

32 
uöt32_t
 
__m_µn
 = 
	`PPN
(
__m_∑
); \

33 i‡(
__m_µn
 >
≈age
) \

34 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
);\

35 (*Ë(
__m_∑
 + 
KERNBASE
); \

36 })

	)

40 
boŸ°ackt›
[], 
boŸ°ack
[];

42 
Page
 *
∑ges
;

43 
size_t
 
≈age
;

45 
phyßddr_t
 
boŸ_¸3
;

46 
pde_t
 *
boŸ_pgdú
;

48 
Segdesc
 
gdt
[];

49 
P£udodesc
 
gdt_pd
;

51 
i386_vm_öô
();

52 
i386_dëe˘_mem‹y
();

54 
∑ge_öô
();

55 
∑ge_Æloc
(
Page
 **
µ_°‹e
);

56 
∑ge_‰ì
(
Page
 *
µ
);

57 
∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
µ
, *
va
, 
≥rm
);

58 
∑ge_ªmove
(
pde_t
 *
pgdú
, *
va
);

59 
Page
 *
∑ge_lookup
(
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
);

60 
∑ge_de¸ef
(
Page
 *
µ
);

62 
éb_övÆid©e
(
pde_t
 *
pgdú
, *
va
);

64 
u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

65 
u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

67 
ölöe
 
µn_t


68 
	$∑ge2µn
(
Page
 *
µ
)

70  
µ
 - 
∑ges
;

71 
	}
}

73 
ölöe
 
phyßddr_t


74 
	$∑ge2∑
(
Page
 *
µ
)

76  
	`∑ge2µn
(
µ
Ë<< 
PGSHIFT
;

77 
	}
}

79 
ölöe
 
Page
*

80 
	$∑2∑ge
(
phyßddr_t
 
∑
)

82 i‡(
	`PPN
(
∑
Ë>
≈age
)

83 
	`∑nic
("pa2page called with invalidÖa");

84  &
∑ges
[
	`PPN
(
∑
)];

85 
	}
}

87 
ölöe
 *

88 
	$∑ge2kva
(
Page
 *
µ
)

90  
	`KADDR
(
	`∑ge2∑
(
µ
));

91 
	}
}

93 
±e_t
 *
pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
);

	@kern/printf.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°d¨g.h
>

10 
	$putch
(
ch
, *
˙t
)

12 
	`˝utch¨
(
ch
);

13 *
˙t
++;

14 
	}
}

17 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

19 
˙t
 = 0;

21 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

22  
˙t
;

23 
	}
}

26 
	$˝rötf
(c⁄° *
fmt
, ...)

28 
va_li°
 
≠
;

29 
˙t
;

31 
	`va_°¨t
(
≠
, 
fmt
);

32 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

33 
	`va_íd
(
≠
);

35  
˙t
;

36 
	}
}

	@kern/sched.c

1 
	~<öc/as£π.h
>

3 
	~<kîn/ív.h
>

4 
	~<kîn/pm≠.h
>

5 
	~<kîn/m⁄ô‹.h
>

10 
	$sched_yõld
()

22 
uöt32_t
 
ªã•
;

23 
ívid_t
 
ívid
;

24 
ödex
=0,
i
;

25 if(
cuªnv
){

27 
ödex
=
	`ENVX
(
cuªnv
->
ív_id
)-ENVX(
ívs
[0].env_id);

51 
i
=1;i<=
NENV
;i++)

53 
ívid
=(
i
+
ödex
)%
NENV
;

54 if(
ívs
[
ívid
].
ív_°©us
==
ENV_RUNNABLE
)

56 if(
ívid
==0)

59 
	`ív_run
(&
ívs
[
ívid
]);

65 i‡(
ívs
[0].
ív_°©us
 =
ENV_RUNNABLE
)

66 
	`ív_run
(&
ívs
[0]);

68 
	`˝rötf
("DestroyedállÉnvironments -Çothing moreÅo do!\n");

70 
	`m⁄ô‹
(
NULL
);

72 
	}
}

	@kern/sched.h

3 #i‚de‡
JOS_KERN_SCHED_H


4 
	#JOS_KERN_SCHED_H


	)

5 #i‚de‡
JOS_KERNEL


10 
	$sched_yõld
(Ë
	`__©åibuã__
((
n‹ëu∫
));

	@kern/syscall.c

3 
	~<öc/x86.h
>

4 
	~<öc/îr‹.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/as£π.h
>

8 
	~<kîn/ív.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/å≠.h
>

11 
	~<kîn/sysˇŒ.h
>

12 
	~<kîn/c⁄sﬁe.h
>

13 
	~<kîn/sched.h
>

14 
	~<kîn/time.h
>

20 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

26 
	`u£r_mem_as£π
(
cuªnv
,(*)
s
,
Àn
,0);

28 
	`˝rötf
("%.*s", 
Àn
, 
s
);

29 
	}
}

34 
	$sys_cgëc
()

36  
	`c⁄s_gëc
();

37 
	}
}

40 
ívid_t


41 
	$sys_gëívid
()

43  
cuªnv
->
ív_id
;

44 
	}
}

52 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

54 
r
;

55 
Env
 *
e
;

57 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

58  
r
;

59 
	`ív_de°roy
(
e
);

61 
	}
}

65 
	$sys_yõld
()

67 
	`sched_yõld
();

68 
	}
}

74 
ívid_t


75 
	$sys_exof‹k
()

84 
r
;

85 
Env
 *
chûdív
;

86 if((
r
=
	`ív_Æloc
(&
chûdív
,
cuªnv
->
ív_id
))<0)

88 
	`˝rötf
("env_alloc failed\n");

89  
r
;

91 
chûdív
->
ív_°©us
=
ENV_NOT_RUNNABLE
;

93 
	`memmove
(&
chûdív
->
ív_tf
,&
cuªnv
->ív_tf,(
Tøp‰ame
));

94 
chûdív
->
ív_tf
.
tf_ªgs
.
ªg_óx
=0;

96  
chûdív
->
ív_id
;

98 
	}
}

108 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

117 
r
;

118 
Env
 *
e
;

119 if(
°©us
>2||status<0)

120  -
E_INVAL
;

121 if(
ívid
==0)

122 
e
=
cuªnv
;

124 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

126  
r
;

128 
e
->
ív_°©us
=
°©us
;

131 
	}
}

141 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

146 
r
;

147 
Env
 *
e
;

148 if(
ívid
==0)

149 
e
=
cuªnv
;

151 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

152  
r
;

153 
	`u£r_mem_as£π
(
e
,(*)
tf
,(
Tøp‰ame
),0);

154 if(
tf
)

155 
e
->
ív_tf
=*
tf
;

156 
e
->
ív_tf
.
tf_eÊags
|=
FL_IF
;

159 
	}
}

170 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
func
)

173 
r
;

174 
Env
 *
e
;

175 if(
ívid
==0)

176 
e
=
cuªnv
;

178 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

179  
r
;

180 
e
->
ív_pgÁu…_upˇŒ
=
func
;

183 
	}
}

202 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

212 
r
;

213 
Env
 *
e
;

214 
Page
 *
pg
;

215 
phyßddr_t
 
ﬁd_¸3
;

216 
uöt32_t
 *
∑ge
;

217 if(
ívid
==0)

218 
e
=
cuªnv
;

220 if((
r
=
	`ívid2ív
(
ívid
,&
e
,0))<0)

222  
r
;

224 if((
uöt32_t
)
va
>=
UTOP
||((uint32_t)va&0xfff))

225  -
E_INVAL
;

226 if(
≥rm
&(~
PTE_USER
))

227  -
E_INVAL
;

228 if((
r
=
	`∑ge_Æloc
(&
pg
))<0)

229  
r
;

230 
∑ge
 = (
uöt32_t
*)
	`KADDR
(
	`∑ge2∑
(
pg
));

232 
	`mem£t
(
∑ge
,0,
PGSIZE
);

233 
ﬁd_¸3
=
	`r¸3
();

234 
	`l¸3
(
e
->
ív_¸3
);

235 if((
r
=
	`∑ge_ö£π
(
e
->
ív_pgdú
,
pg
,
va
,
≥rm
))<0)

237 
	`∑ge_‰ì
(
pg
);

238 
	`l¸3
(
ﬁd_¸3
);

239  
r
;

241 
	`l¸3
(
ﬁd_¸3
);

244 
	}
}

263 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

264 
ívid_t
 
d°ívid
, *
d°va
, 
≥rm
)

274 
r
;

275 
Env
 *
§˚nv
,*
d°ív
;

276 
Page
 *
pg
;

277 
±e_t
 *
±e
;

278 
phyßddr_t
 
ﬁd_¸3
;

280 if(
§˚nvid
==0)

281 
§˚nv
=
cuªnv
;

283 if((
r
=
	`ívid2ív
(
§˚nvid
,&
§˚nv
,0))<0)

285  
r
;

287 if(
d°ívid
==0)

288 
d°ív
=
cuªnv
;

290 if((
r
=
	`ívid2ív
(
d°ívid
,&
d°ív
,0))<0)

292  
r
;

294 if(((
uöt32_t
)
§cva
>=
UTOP
)||((uöt32_t)§cva&0xfff)||((uöt32_t)
d°va
>=UTOP)||((uint32_t)srcva&0xfff))

295  -
E_INVAL
;

296 if(
≥rm
&(~
PTE_USER
))

297  -
E_INVAL
;

298 
ﬁd_¸3
=
	`r¸3
();

299 
	`l¸3
(
§˚nv
->
ív_¸3
);

300 if(!(
pg
=
	`∑ge_lookup
(
§˚nv
->
ív_pgdú
,
§cva
,&
±e
)))

301  -
E_INVAL
;

302 if(!(*
±e
&
PTE_W
)&&(
≥rm
&PTE_W))

303  -
E_INVAL
;

304 
	`l¸3
(
d°ív
->
ív_¸3
);

305 if((
r
=
	`∑ge_ö£π
(
d°ív
->
ív_pgdú
,
pg
,
d°va
,
≥rm
))<0)

306  
r
;

307 
	`l¸3
(
ﬁd_¸3
);

310 
	}
}

320 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

325 
r
;

326 
Env
 *
e
;

327 
phyßddr_t
 
ﬁd_¸3
;

328 if(
ívid
==0)

329 
e
=
cuªnv
;

331 if((
r
=
	`ívid2ív
(
ívid
,&
e
,0))<0)

333  
r
;

335 if((
uöt32_t
)
va
>=
UTOP
||((uint32_t)va&0xfff))

336  -
E_INVAL
;

337 
ﬁd_¸3
=
	`r¸3
();

338 
	`l¸3
(
e
->
ív_¸3
);

339 
	`∑ge_ªmove
(
e
->
ív_pgdú
,
va
);

340 
	`l¸3
(
ﬁd_¸3
);

343 
	}
}

384 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt32_t
 
vÆue
, *
§cva
, 
≥rm
)

387 
r
;

388 
Env
 *
e
;

389 
Page
 *
pg
;

390 
±e_t
 *
±e
;

391 
uöt32_t
 
§ˇddr
=0;

397 if((
ívid
==0)||”nvid==
cuªnv
->
ív_id
))

399 
	`˝rötf
("thêßmê£nd:ívid=%x\n",
cuªnv
->
ív_id
);

400 
e
=
cuªnv
;

403 if((
r
=
	`ívid2ív
(
ívid
,&
e
,0))<0)

405 
	`˝rötf
("ívid2ív:id=%x\n",
ívid
);

406  
r
;

408 if(!
e
->
ív_ùc_ªcvög
)

409  -
E_IPC_NOT_RECV
;

410 if(
§cva
){

413 
§ˇddr
=(
uöt32_t
)
§cva
;

414 if(
§ˇddr
<(
uöt32_t
)
UTOP
){

415 if(
§ˇddr
&0xfff)

416  -
E_INVAL
;

420 if((
r
=
	`sys_∑ge_m≠
(
cuªnv
->
ív_id
,
§cva
,
ívid
,
e
->
ív_ùc_d°va
,
≥rm
))<0)

421  
r
;

425 
≥rm
=0;

426 
e
->
ív_ùc_‰om
=
cuªnv
->
ív_id
;

427 
e
->
ív_ùc_≥rm
=
≥rm
;

428 
e
->
ív_ùc_vÆue
=
vÆue
;

429 
e
->
ív_ùc_ªcvög
=0;

430 
e
->
ív_°©us
=
ENV_RUNNABLE
;

434 
	}
}

448 
	$sys_ùc_ªcv
(*
d°va
)

451 
uöt32_t
 
d°addr
;

452 
d°addr
=(
uöt32_t
)
d°va
;

453 if((
d°addr
<(
uöt32_t
)
UTOP
)&&(dstaddr&0xfff))

454  -
E_INVAL
;

455 
cuªnv
->
ív_ùc_d°va
=
d°va
;

456 
cuªnv
->
ív_ùc_ªcvög
=1;

457 
cuªnv
->
ív_tf
.
tf_ªgs
.
ªg_óx
=0;

458 
cuªnv
->
ív_°©us
=
ENV_NOT_RUNNABLE
;

459 
	`sched_yõld
();

462 
	}
}

465 
	$sys_time_m£c
()

468  
	`time_m£c
();

470 
	}
}

472 
öt32_t


473 
	$sysˇŒ
(
uöt32_t
 
sysˇŒno
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

478 
r
;

479 
sysˇŒno
){

480 
SYS_˝uts
:

481 
	`sys_˝uts
((*)
a1
,(
size_t
)
a2
);

483 
SYS_cgëc
:

484  
	`sys_cgëc
();

486 
SYS_gëívid
:

487  
	`sys_gëívid
();

489 
SYS_ív_de°roy
:

490  
	`sys_ív_de°roy
((
ívid_t
)
a1
);

492 
SYS_yõld
:

493 
	`sys_yõld
();

495 
SYS_exof‹k
:

496  
	`sys_exof‹k
();

498 
SYS_ív_£t_°©us
:

499  
	`sys_ív_£t_°©us
((
ívid_t
)
a1
,()
a2
);

501 
SYS_ív_£t_å≠‰ame
:

502  
	`sys_ív_£t_å≠‰ame
((
ívid_t
)
a1
,(
Tøp‰ame
*)
a2
);

504 
SYS_∑ge_Æloc
:

505  
	`sys_∑ge_Æloc
((
ívid_t
)
a1
,(*)
a2
,()
a3
);

507 
SYS_∑ge_m≠
:

508  
	`sys_∑ge_m≠
((
ívid_t
)
a1
,(*)
a2
,”nvid_t)
a3
,(*)
a4
,()
a5
);

510 
SYS_∑ge_unm≠
:

511  
	`sys_∑ge_unm≠
((
ívid_t
)
a1
,(*)
a2
);

513 
SYS_ív_£t_pgÁu…_upˇŒ
:

514  
	`sys_ív_£t_pgÁu…_upˇŒ
((
ívid_t
)
a1
,(*)
a2
);

516 
SYS_ùc_åy_£nd
:

517  
	`sys_ùc_åy_£nd
((
ívid_t
)
a1
,(
uöt32_t
)
a2
,(*)
a3
,()
a4
);

519 
SYS_ùc_ªcv
:

520  
	`sys_ùc_ªcv
((*)
a1
);

522 
SYS_time_m£c
:

523  
	`sys_time_m£c
();

525 
	`∑nic
("syscall isÇot implemented");

529 
	}
}

	@kern/syscall.h

1 #i‚de‡
JOS_KERN_SYSCALL_H


2 
	#JOS_KERN_SYSCALL_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	~<öc/sysˇŒ.h
>

9 
öt32_t
 
sysˇŒ
(
uöt32_t
 
num
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
);

	@kern/time.c

1 
	~<kîn/time.h
>

2 
	~<öc/as£π.h
>

4 
	gticks
;

7 
	$time_öô
()

9 
ticks
 = 0;

10 
	}
}

15 
	$time_tick
()

17 
ticks
++;

18 i‡(
ticks
 * 10 <Åicks)

19 
	`∑nic
("time_tick:Åime overflowed");

20 
	}
}

23 
	$time_m£c
()

25  
ticks
 * 10;

26 
	}
}

	@kern/time.h

1 #i‚de‡
JOS_KERN_TIME_H


2 
	#JOS_KERN_TIME_H


	)

3 #i‚de‡
JOS_KERNEL


7 
time_öô
();

8 
time_tick
();

9 
time_m£c
();

	@kern/trap.c

1 
	~<öc/mmu.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/as£π.h
>

5 
	~<kîn/pm≠.h
>

6 
	~<kîn/å≠.h
>

7 
	~<kîn/c⁄sﬁe.h
>

8 
	~<kîn/m⁄ô‹.h
>

9 
	~<kîn/ív.h
>

10 
	~<kîn/sysˇŒ.h
>

11 
	~<kîn/sched.h
>

12 
	~<kîn/k˛ock.h
>

13 
	~<kîn/picúq.h
>

14 
	~<kîn/time.h
>

16 
Task°©e
 
	gts
;

21 
G©edesc
 
	gidt
[256] = { { 0 } };

22 
P£udodesc
 
	gidt_pd
 = {

23 (
idt
Ë- 1, (
uöt32_t
) idt

26 
uöt32_t
 
ve˘‹s
[];

27 c⁄° *
	$å≠«me
(
å≠no
)

29 c⁄° * c⁄° 
ex˙ames
[] = {

52 i‡(
å≠no
 < (
ex˙ames
)/(excnames[0]))

53  
ex˙ames
[
å≠no
];

54 i‡(
å≠no
 =
T_SYSCALL
)

56 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16)

59 
	}
}

63 
	$idt_öô
()

65 
Segdesc
 
gdt
[];

68 
i
;

69 
i
=0;i<32;i++)

70 
	`SETGATE
(
idt
[
i
],0,
GD_KT
,
ve˘‹s
[i],0);

71 
	`SETGATE
(
idt
[3],0,
GD_KT
,
ve˘‹s
[3],3);

72 
	`SETGATE
(
idt
[4],0,
GD_KT
,
ve˘‹s
[4],3);

73 
	`SETGATE
(
idt
[5],0,
GD_KT
,
ve˘‹s
[5],3);

74 
i
=32;i<48;i++)

75 
	`SETGATE
(
idt
[
i
],0,
GD_KT
,
ve˘‹s
[i],0);

76 
	`SETGATE
(
idt
[48],0,
GD_KT
,
ve˘‹s
[48],3);

79 
ts
.
ts_e•0
 = 
KSTACKTOP
;

80 
ts
.
ts_ss0
 = 
GD_KD
;

83 
gdt
[
GD_TSS
 >> 3] = 
	`SEG16
(
STS_T32A
, (
uöt32_t
Ë(&
ts
),

84 (
Task°©e
), 0);

85 
gdt
[
GD_TSS
 >> 3].
sd_s
 = 0;

88 
	`…r
(
GD_TSS
);

91 
asm
 volatile("lidt idt_pd");

92 
	}
}

95 
	$¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
)

97 
	`˝rötf
("TRAP fømê© %p\n", 
tf
);

98 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

99 
	`˝rötf
("É† 0x----%04x\n", 
tf
->
tf_es
);

100 
	`˝rötf
(" d† 0x----%04x\n", 
tf
->
tf_ds
);

101 
	`˝rötf
("Åø∞0x%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

102 
	`˝rötf
("Éº 0x%08x\n", 
tf
->
tf_îr
);

103 
	`˝rötf
("Éù 0x%08x\n", 
tf
->
tf_eù
);

104 
	`˝rötf
(" c† 0x----%04x\n", 
tf
->
tf_cs
);

105 
	`˝rötf
(" fœg 0x%08x\n", 
tf
->
tf_eÊags
);

106 
	`˝rötf
("É• 0x%08x\n", 
tf
->
tf_e•
);

107 
	`˝rötf
(" s† 0x----%04x\n", 
tf
->
tf_ss
);

108 
	}
}

111 
	$¥öt_ªgs
(
PushRegs
 *
ªgs
)

113 
	`˝rötf
("Édò 0x%08x\n", 
ªgs
->
ªg_edi
);

114 
	`˝rötf
("Ésò 0x%08x\n", 
ªgs
->
ªg_esi
);

115 
	`˝rötf
("Éb∞ 0x%08x\n", 
ªgs
->
ªg_ebp
);

116 
	`˝rötf
(" oe• 0x%08x\n", 
ªgs
->
ªg_€•
);

117 
	`˝rötf
("Ébx 0x%08x\n", 
ªgs
->
ªg_ebx
);

118 
	`˝rötf
("Édx 0x%08x\n", 
ªgs
->
ªg_edx
);

119 
	`˝rötf
("Écx 0x%08x\n", 
ªgs
->
ªg_ecx
);

120 
	`˝rötf
("Éax 0x%08x\n", 
ªgs
->
ªg_óx
);

121 
	}
}

124 
	$å≠_di•©ch
(
Tøp‰ame
 *
tf
)

128 
tf
->
tf_å≠no
){

129 
T_PGFLT
:

130 
	`∑ge_Áu…_h™dÀr
(
tf
);

132 
T_BRKPT
:

133 
	`m⁄ô‹
(
tf
);

135 
T_DEBUG
:

136 
	`m⁄ô‹
(
tf
);

138 
T_SYSCALL
:

139 
cuªnv
->
ív_tf
.
tf_ªgs
.
ªg_óx
=
	`sysˇŒ
(
tf
->tf_ªgs.ªg_óx,tf->tf_ªgs.
ªg_edx
,tf->tf_ªgs.
ªg_ecx
,tf->tf_ªgs.
ªg_ebx
,tf->tf_ªgs.
ªg_edi
,tf->tf_ªgs.
ªg_esi
);

146 if(
tf
->
tf_å≠no
==
IRQ_OFFSET
 + 
IRQ_TIMER
){

147 
	`time_tick
();

148 
	`sched_yõld
();

155 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_SPURIOUS
) {

156 
	`˝rötf
("Spurious interrupt on irq 7\n");

157 
	`¥öt_å≠‰ame
(
tf
);

164 
	`¥öt_å≠‰ame
(
tf
);

165 i‡(
tf
->
tf_cs
 =
GD_KT
)

166 
	`∑nic
("unhandledÅrap in kernel");

168 
	`ív_de°roy
(
cuªnv
);

172 
	}
}

175 
	$å≠
(
Tøp‰ame
 *
tf
)

179 
asm
 volatile("cld" ::: "cc");

184 
	`as£π
(!(
	`ªad_eÊags
(Ë& 
FL_IF
));

186 i‡((
tf
->
tf_cs
 & 3) == 3) {

191 
	`as£π
(
cuªnv
);

192 
cuªnv
->
ív_tf
 = *
tf
;

194 
tf
 = &
cuªnv
->
ív_tf
;

198 
	`å≠_di•©ch
(
tf
);

203 i‡(
cuªnv
 && cuªnv->
ív_°©us
 =
ENV_RUNNABLE
)

204 
	`ív_run
(
cuªnv
);

206 
	`sched_yõld
();

207 
	}
}

211 
	$∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *
tf
)

213 
uöt32_t
 
Áu…_va
;

216 
Áu…_va
 = 
	`r¸2
();

221 if((
tf
->
tf_cs
&3)==0)

222 
	`∑nic
("Page Fault in Kernel Mode");

255 
UTøp‰ame
 *
utf
;

256 if((
tf
->
tf_îr
&
FEC_U
)&&
cuªnv
->
ív_pgÁu…_upˇŒ
)

258 
	`u£r_mem_as£π
(
cuªnv
,(*)(
UXSTACKTOP
-0x34),0x34,0);

259 if(
tf
->
tf_e•
>(
UXSTACKTOP
-
PGSIZE
)&&tf->tf_esp<UXSTACKTOP)

261 
utf
=(
UTøp‰ame
*)(
tf
->
tf_e•
-0x38);

266 
utf
 = (
UTøp‰ame
*)(
UXSTACKTOP
-0x34);

269 
utf
->
utf_Áu…_va
=
Áu…_va
;

270 
utf
->
utf_îr
=
tf
->
tf_îr
;

271 
utf
->
utf_ªgs
=
tf
->
tf_ªgs
;

272 
utf
->
utf_eù
=
tf
->
tf_eù
;

273 
utf
->
utf_eÊags
=
tf
->
tf_eÊags
;

274 
utf
->
utf_e•
=
tf
->
tf_e•
;

275 
cuªnv
->
ív_tf
.
tf_e•
=(
uöçå_t
)
utf
;

280 if(
cuªnv
->
ív_pgÁu…_upˇŒ
)

282 
	`u£r_mem_as£π
(
cuªnv
,(*)cuªnv->
ív_pgÁu…_upˇŒ
,
PGSIZE
,0);

283 
cuªnv
->
ív_tf
.
tf_eù
=(
uöçå_t
)cuªnv->
ív_pgÁu…_upˇŒ
;

284 
	`ív_run
(
cuªnv
);

288 
	`˝rötf
("[%08x] user fault va %08x ip %08x\n",

289 
cuªnv
->
ív_id
, 
Áu…_va
, 
tf
->
tf_eù
);

290 
	`¥öt_å≠‰ame
(
tf
);

291 
	`ív_de°roy
(
cuªnv
);

292 
	}
}

	@kern/trap.h

3 #i‚de‡
JOS_KERN_TRAP_H


4 
	#JOS_KERN_TRAP_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/å≠.h
>

10 
	~<öc/mmu.h
>

13 
G©edesc
 
idt
[];

15 
idt_öô
();

16 
¥öt_ªgs
(
PushRegs
 *
ªgs
);

17 
¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
);

18 
∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *);

19 
backåa˚
(
Tøp‰ame
 *);

21 
å≠ªt
();

	@lib/console.c

2 
	~<öc/°rög.h
>

3 
	~<öc/lib.h
>

6 
	$˝utch¨
(
ch
)

8 
c
 = 
ch
;

12 
	`sys_˝uts
(&
c
, 1);

13 
	}
}

16 
	$gëch¨
()

18 
r
;

20 (
r
 = 
	`sys_cgëc
()) == 0)

21 
	`sys_yõld
();

22  
r
;

23 
	}
}

	@lib/exit.c

2 
	~<öc/lib.h
>

5 
	$exô
()

7 
	`˛o£_Æl
();

8 
	`sys_ív_de°roy
(0);

9 
	}
}

	@lib/fd.c

1 
	~<öc/lib.h
>

3 
	#debug
 0

	)

6 
	#MAXFD
 32

	)

8 
	#FDTABLE
 0xD0000000

	)

11 
	#FILEDATA
 (
FDTABLE
 + 
MAXFD
*
PGSIZE
)

	)

14 
	#INDEX2FD
(
i
Ë((
Fd
*Ë(
FDTABLE
 + (i)*
PGSIZE
))

	)

16 
	#INDEX2DATA
(
i
Ë((*Ë(
FILEDATA
 + (i)*
PGSIZE
))

	)

24 
	$fd2num
(
Fd
 *
fd
)

26  ((
uöçå_t
Ë
fd
 - 
FDTABLE
Ë/ 
PGSIZE
;

27 
	}
}

30 
	$fd2d©a
(
Fd
 *
fd
)

32  
	`INDEX2DATA
(
	`fd2num
(
fd
));

33 
	}
}

51 
	$fd_Æloc
(
Fd
 **
fd_°‹e
)

53 
i
;

54 
Fd
 *
fd
;

56 
i
 = 0; i < 
MAXFD
; i++) {

57 
fd
 = 
	`INDEX2FD
(
i
);

58 i‡((
vpd
[
	`PDX
(
fd
)] & 
PTE_P
Ë=0 || (
v±
[
	`VPN
(fd)] & PTE_P) == 0) {

59 *
fd_°‹e
 = 
fd
;

63 *
fd_°‹e
 = 0;

64  -
E_MAX_OPEN
;

65 
	}
}

74 
	$fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
)

76 
Fd
 *
fd
;

78 i‡(
fdnum
 < 0 || fdnum >
MAXFD
) {

79 i‡(
debug
)

80 
	`˝rötf
("[%08x] bad fd %d\n", 
ív
->
ív_id
, 
fd
);

81  -
E_INVAL
;

83 
fd
 = 
	`INDEX2FD
(
fdnum
);

84 i‡(!(
vpd
[
	`PDX
(
fd
)] & 
PTE_P
Ë|| !(
v±
[
	`VPN
(fd)] & PTE_P)) {

85 i‡(
debug
)

86 
	`˝rötf
("[%08x] clo£d fd %d\n", 
ív
->
ív_id
, 
fd
);

87  -
E_INVAL
;

89 *
fd_°‹e
 = 
fd
;

91 
	}
}

101 
	$fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
)

103 
Fd
 *
fd2
;

104 
Dev
 *
dev
;

105 
r
;

106 i‡((
r
 = 
	`fd_lookup
(
	`fd2num
(
fd
), &
fd2
)) < 0

107 || 
fd
 !
fd2
)

108  (
mu°_exi°
 ? 
r
 : 0);

109 i‡((
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) >= 0) {

110 i‡(
dev
->
dev_˛o£
)

111 
r
 = (*
dev
->
dev_˛o£
)(
fd
);

113 
r
 = 0;

117 (Ë
	`sys_∑ge_unm≠
(0, 
fd
);

118  
r
;

119 
	}
}

126 
Dev
 *
	gdevèb
[] =

128 &
devfûe
,

129 &
devsock
,

134 
	$dev_lookup
(
dev_id
, 
Dev
 **
dev
)

136 
i
;

137 
i
 = 0; 
devèb
[i]; i++)

138 i‡(
devèb
[
i
]->
dev_id
 == dev_id) {

139 *
dev
 = 
devèb
[
i
];

142 
	`˝rötf
("[%08x] unknow¿devi˚Åy≥ %d\n", 
ív
->
ív_id
, 
dev_id
);

143 *
dev
 = 0;

144  -
E_INVAL
;

145 
	}
}

148 
	$˛o£
(
fdnum
)

150 
Fd
 *
fd
;

151 
r
;

153 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

154  
r
;

156  
	`fd_˛o£
(
fd
, 1);

157 
	}
}

160 
	$˛o£_Æl
()

162 
i
;

163 
i
 = 0; i < 
MAXFD
; i++)

164 
	`˛o£
(
i
);

165 
	}
}

173 
	$dup
(
ﬁdfdnum
, 
√wfdnum
)

175 
r
;

176 *
ova
, *
nva
;

177 
±e_t
 
±e
;

178 
Fd
 *
ﬁdfd
, *
√wfd
;

180 i‡((
r
 = 
	`fd_lookup
(
ﬁdfdnum
, &
ﬁdfd
)) < 0)

181  
r
;

182 
	`˛o£
(
√wfdnum
);

184 
√wfd
 = 
	`INDEX2FD
(
√wfdnum
);

185 
ova
 = 
	`fd2d©a
(
ﬁdfd
);

186 
nva
 = 
	`fd2d©a
(
√wfd
);

188 i‡((
vpd
[
	`PDX
(
ova
)] & 
PTE_P
Ë&& (
v±
[
	`VPN
(ova)] & PTE_P))

189 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ova
, 0, 
nva
, 
v±
[
	`VPN
(ova)] & 
PTE_USER
)) < 0)

190 
îr
;

191 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ﬁdfd
, 0, 
√wfd
, 
v±
[
	`VPN
(ﬁdfd)] & 
PTE_USER
)) < 0)

192 
îr
;

194  
√wfdnum
;

196 
îr
:

197 
	`sys_∑ge_unm≠
(0, 
√wfd
);

198 
	`sys_∑ge_unm≠
(0, 
nva
);

199  
r
;

200 
	}
}

202 
ssize_t


203 
	$ªad
(
fdnum
, *
buf
, 
size_t
 
n
)

205 
r
;

206 
Dev
 *
dev
;

207 
Fd
 *
fd
;

209 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

210 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

211  
r
;

212 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

213 
	`˝rötf
("[%08x]Ñód %d -- bad mode\n", 
ív
->
ív_id
, 
fdnum
);

214  -
E_INVAL
;

216 i‡(!
dev
->
dev_ªad
)

217  -
E_NOT_SUPP
;

218  (*
dev
->
dev_ªad
)(
fd
, 
buf
, 
n
);

219 
	}
}

221 
ssize_t


222 
	$ªadn
(
fdnum
, *
buf
, 
size_t
 
n
)

224 
m
, 
tŸ
;

226 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
) {

227 
m
 = 
	`ªad
(
fdnum
, (*)
buf
 + 
tŸ
, 
n
 -Åot);

228 i‡(
m
 < 0)

229  
m
;

230 i‡(
m
 == 0)

233  
tŸ
;

234 
	}
}

236 
ssize_t


237 
	$wrôe
(
fdnum
, c⁄° *
buf
, 
size_t
 
n
)

239 
r
;

240 
Dev
 *
dev
;

241 
Fd
 *
fd
;

243 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

244 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

245  
r
;

246 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

247 
	`˝rötf
("[%08x] wrôê%d -- bad mode\n", 
ív
->
ív_id
, 
fdnum
);

248  -
E_INVAL
;

250 i‡(
debug
)

251 
	`˝rötf
("write %d %p %d via dev %s\n",

252 
fdnum
, 
buf
, 
n
, 
dev
->
dev_«me
);

253 i‡(!
dev
->
dev_wrôe
)

254  -
E_NOT_SUPP
;

255  (*
dev
->
dev_wrôe
)(
fd
, 
buf
, 
n
);

256 
	}
}

259 
	$£ek
(
fdnum
, 
off_t
 
off£t
)

261 
r
;

262 
Fd
 *
fd
;

264 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

265  
r
;

266 
fd
->
fd_off£t
 = 
off£t
;

268 
	}
}

271 
	$·runˇã
(
fdnum
, 
off_t
 
√wsize
)

273 
r
;

274 
Dev
 *
dev
;

275 
Fd
 *
fd
;

276 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

277 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

278  
r
;

279 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

280 
	`˝rötf
("[%08x] ftruncate %d -- bad mode\n",

281 
ív
->
ív_id
, 
fdnum
);

282  -
E_INVAL
;

284 i‡(!
dev
->
dev_åunc
)

285  -
E_NOT_SUPP
;

286  (*
dev
->
dev_åunc
)(
fd
, 
√wsize
);

287 
	}
}

290 
	$f°©
(
fdnum
, 
Sèt
 *
°©
)

292 
r
;

293 
Dev
 *
dev
;

294 
Fd
 *
fd
;

296 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

297 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

298  
r
;

299 i‡(!
dev
->
dev_°©
)

300  -
E_NOT_SUPP
;

301 
°©
->
°_«me
[0] = 0;

302 
°©
->
°_size
 = 0;

303 
°©
->
°_isdú
 = 0;

304 
°©
->
°_dev
 = 
dev
;

305  (*
dev
->
dev_°©
)(
fd
, 
°©
);

306 
	}
}

309 
	$°©
(c⁄° *
∑th
, 
Sèt
 *
°©
)

311 
fd
, 
r
;

313 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)

314  
fd
;

315 
r
 = 
	`f°©
(
fd
, 
°©
);

316 
	`˛o£
(
fd
);

317  
r
;

318 
	}
}

	@lib/file.c

1 
	~<öc/fs.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/lib.h
>

5 
	#debug
 0

	)

7 
Fsùc
 
fsùcbuf
;

16 
	$fsùc
(
ty≥
, *
d°va
)

18 i‡(
debug
)

19 
	`˝rötf
("[%08x] fsù¯%d %08x\n", 
ív
->
ív_id
, 
ty≥
, *(
uöt32_t
 *)&
fsùcbuf
);

21 
	`ùc_£nd
(
ívs
[1].
ív_id
, 
ty≥
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

22  
	`ùc_ªcv
(
NULL
, 
d°va
, NULL);

23 
	}
}

25 
devfûe_Êush
(
Fd
 *
fd
);

26 
ssize_t
 
devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

27 
ssize_t
 
devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

28 
devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

29 
devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
);

31 
Dev
 
	gdevfûe
 =

33 .
dev_id
 = 'f',

34 .
	gdev_«me
 = "file",

35 .
	gdev_ªad
 = 
devfûe_ªad
,

36 .
	gdev_wrôe
 = 
devfûe_wrôe
,

37 .
	gdev_˛o£
 = 
devfûe_Êush
,

38 .
	gdev_°©
 = 
devfûe_°©
,

39 .
	gdev_åunc
 = 
devfûe_åunc


49 
	$›í
(c⁄° *
∑th
, 
mode
)

66 
Fd
 *
fd
;

67 
r
;

68 *
∑ge
;

69 if((
r
=
	`fd_Æloc
(&
fd
))<0){

70 
	`fd_˛o£
(
fd
,0);

71  
r
;

74 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
,
∑th
);

75 
fsùcbuf
.
›í
.
ªq_omode
=
mode
;

76 
∑ge
=(*)
	`fd2d©a
(
fd
);

77 if((
r
=
	`fsùc
(
FSREQ_OPEN
,(*)
fd
))<0)

79 
	`fd_˛o£
(
fd
,1);

80  
r
;

83 if((
r
=
	`sys_∑ge_m≠
(0,(*)
fd
,0,(*)
∑ge
,
PTE_P
 | 
PTE_W
 | 
PTE_U
))<0)

85 
	`fd_˛o£
(
fd
,1);

86  
r
;

89  
	`fd2num
(
fd
);

91 
	}
}

102 
	$devfûe_Êush
(
Fd
 *
fd
)

104 
fsùcbuf
.
Êush
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

105  
	`fsùc
(
FSREQ_FLUSH
, 
NULL
);

106 
	}
}

113 
ssize_t


114 
	$devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
)

121 
ssize_t
 
ªadsize
;

122 if(
debug
)

123 
	`˝rötf
("devfûe_ªad:fûeid=%xÑódsize=%x\n",
fd
->
fd_fûe
.
id
,
n
);

124 
fsùcbuf
.
ªad
.
ªq_fûeid
=
fd
->
fd_fûe
.
id
;

125 
fsùcbuf
.
ªad
.
ªq_n
=
n
;

126 
ªadsize
=(
ssize_t
)
	`fsùc
(
FSREQ_READ
,&
fsùcbuf
);

128 if(
debug
)

129 
	`˝rötf
("devfûe_ªad:buf1=%s\nbuf2=%s\n",(*)&
fsùcbuf
,fsùcbuf.
ªadRë
.
ªt_buf
);

130 if(
ªadsize
>0)

131 
	`memmove
(
buf
,(*)&
fsùcbuf
,(
size_t
)
ªadsize
);

133  
ªadsize
;

135 
	}
}

142 
ssize_t


143 
	$devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
)

150 
ssize_t
 
wrôesize
;

151 
size_t
 
bufsize
;

152 
fsùcbuf
.
wrôe
.
ªq_fûeid
=
fd
->
fd_fûe
.
id
;

153 
bufsize
=(
fsùcbuf
.
wrôe
.
ªq_buf
);

154 if(
n
<
bufsize
)

155 
bufsize
=
n
;

156 
fsùcbuf
.
wrôe
.
ªq_n
=
n
;

157 
	`memmove
((*)
fsùcbuf
.
wrôe
.
ªq_buf
,
buf
,
bufsize
);

158 
wrôesize
=(
ssize_t
)
	`fsùc
(
FSREQ_WRITE
,
NULL
);

159  
wrôesize
;

161 
	}
}

164 
	$devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°
)

166 
r
;

168 
fsùcbuf
.
°©
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

169 i‡((
r
 = 
	`fsùc
(
FSREQ_STAT
, 
NULL
)) < 0)

170  
r
;

171 
	`°r˝y
(
°
->
°_«me
, 
fsùcbuf
.
°©Rë
.
ªt_«me
);

172 
°
->
°_size
 = 
fsùcbuf
.
°©Rë
.
ªt_size
;

173 
°
->
°_isdú
 = 
fsùcbuf
.
°©Rë
.
ªt_isdú
;

175 
	}
}

179 
	$devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
)

181 
fsùcbuf
.
£t_size
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

182 
fsùcbuf
.
£t_size
.
ªq_size
 = 
√wsize
;

183  
	`fsùc
(
FSREQ_SET_SIZE
, 
NULL
);

184 
	}
}

188 
	$ªmove
(c⁄° *
∑th
)

190 i‡(
	`°æí
(
∑th
Ë>
MAXPATHLEN
)

191  -
E_BAD_PATH
;

192 
	`°r˝y
(
fsùcbuf
.
ªmove
.
ªq_∑th
, 
∑th
);

193  
	`fsùc
(
FSREQ_REMOVE
, 
NULL
);

194 
	}
}

198 
	$sync
()

203  
	`fsùc
(
FSREQ_SYNC
, 
NULL
);

204 
	}
}

	@lib/fork.c

3 
	~<öc/°rög.h
>

4 
	~<öc/lib.h
>

8 
	#PTE_COW
 0x800

	)

10 
_pgÁu…_upˇŒ
();

16 
	$pgÁu…
(
UTøp‰ame
 *
utf
)

18 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

19 
uöt32_t
 
îr
 = 
utf
->
utf_îr
;

20 
r
;

29 
pde_t
 *
pde
;

30 
±e_t
 *
±e
;

31 
uöt32_t
 *
va
,*
§cva
,*
d°va
;

32 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

33 if(*
pde
&
PTE_P
)

35 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

38 
	`˝rötf
("addr=%xÉº=%x *pde=%x utf_eù=%x\n",(
uöt32_t
)
addr
,
îr
,*
pde
,
utf
->
utf_eù
);

39 
	`∑nic
("pageÅable for fault va isÇotÉxist");

42 if(!(
îr
&
FEC_WR
)||!(*
±e
&
PTE_COW
))

44 
	`˝rötf
("ívid=%xáddr=%xÉº=%x *±e=%x utf_eù=%x\n",
ív
->
ív_id
,(
uöt32_t
)
addr
,
îr
,*
±e
,
utf
->
utf_eù
);

45 
	`∑nic
("faultingáccess is illegle");

56 if((
r
=
	`sys_∑ge_Æloc
(0,
PFTEMP
,
PTE_W
|
PTE_U
|
PTE_P
))<0)

58 
	`∑nic
("Ælo¯®∑gêf‹ PFTEMP faûed:%e",
r
);

60 
§cva
 = (
uöt32_t
*)((uöt32_t)
addr
&0xfffff000);

61 
d°va
 = (
uöt32_t
*)
PFTEMP
;

63 ;
§cva
<(
uöt32_t
*)(
	`ROUNDUP
(
addr
,
PGSIZE
));srcva++)

65 *
d°va
=*
§cva
;

66 
d°va
++;

68 if((
r
=
	`sys_∑ge_m≠
(0,(*)
PFTEMP
,0,(*)((
uöt32_t
)
addr
&0xfffff000),
PTE_W
|
PTE_U
|
PTE_P
))<0)

70 
	`∑nic
("page mapping failed");

72 
	}
}

86 
	$duµage
(
ívid_t
 
ívid
, 
≤
)

88 
r
;

91 
pde_t
 *
pde
;

92 
±e_t
 *
±e
;

93 *
addr
=(*)(
≤
*
PGSIZE
);

94 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

95 if(*
pde
&
PTE_P
)

97 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

99 
	`∑nic
("pageÅable forÖnÖage isÇotÉxist");

100 if((*
±e
&
PTE_W
)||(*±e&
PTE_COW
))

102 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_COW
|
PTE_U
))<0)

103  
r
;

104 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,0,addr,
PTE_COW
|
PTE_U
))<0)

105  
r
;

108 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_U
|
PTE_P
))<0)

109  
r
;

113 
	}
}

131 
ívid_t


132 
	$f‹k
()

135 
r
;

136 
pde_t
 *
pde
;

137 
±e_t
 *
±e
;

138 
i
;

139 
uöt32_t
 
addr
;

140 
ívid_t
 
ívid
;

141 
ívid
 = 
	`sys_exof‹k
();

142 if(
ívid
 < 0)

143 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

144 if(
ívid
==0)

146 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

150 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

151 
i
=0;i<()
	`VPN
(
UTOP
);i++)

153 if(
i
==()
	`VPN
(
UXSTACKTOP
-
PGSIZE
))

155 
addr
=
i
*
PGSIZE
;

156 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

157 if(*
pde
&
PTE_P
)

159 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

162 if((*
±e
&
PTE_W
)||(*±e&
PTE_COW
))

164 if((
r
=
	`duµage
(
ívid
,
i
))<0)

165  
r
;

168 if((
r
=
	`sys_∑ge_Æloc
(
ívid
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

169  
r
;

170 if((
r
=
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid
,(*)
_pgÁu…_upˇŒ
))<0)

171  
r
;

172 if((
r
=
	`sys_ív_£t_°©us
(
ívid
,
ENV_RUNNABLE
))<0)

173  
r
;

174  
ívid
;

177 
	}
}

179 
	$sduµage
(
ívid_t
 
ívid
, 
≤
)

181 
r
;

184 
pde_t
 *
pde
;

185 
±e_t
 *
±e
;

186 *
addr
=(*)(
≤
*
PGSIZE
);

187 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

188 if(*
pde
&
PTE_P
)

190 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

192 
	`∑nic
("pageÅable forÖnÖage isÇotÉxist");

193 if(*
±e
&
PTE_W
)

196 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_W
|
PTE_U
))<0)

197  
r
;

198 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,0,addr,
PTE_W
|
PTE_U
))<0)

199  
r
;

202 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_U
|
PTE_P
))<0)

203  
r
;

207 
	}
}

210 
	$sf‹k
()

212 
r
;

213 
pde_t
 *
pde
;

214 
±e_t
 *
±e
;

215 
i
;

216 
uöt32_t
 
addr
;

217 
ívid_t
 
ívid
;

218 
ívid
 = 
	`sys_exof‹k
();

219 if(
ívid
 < 0)

220 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

221 if(
ívid
==0)

223 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

228 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

229 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

230 
i
=0;i<()
	`VPN
(
UTOP
);i++)

232 
addr
=
i
*
PGSIZE
;

233 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

234 if(*
pde
&
PTE_P
)

236 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

239 if((
i
==()
	`VPN
(
USTACKTOP
-
PGSIZE
))||(i==()VPN(
PFTEMP
)))

242 if((
r
=
	`duµage
(
ívid
,
i
))<0)

243  
r
;

246 if((
r
=
	`sduµage
(
ívid
,
i
))<0)

247  
r
;

249 if((
r
=
	`sys_∑ge_Æloc
(
ívid
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

250  
r
;

251 if((
r
=
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid
,(*)
_pgÁu…_upˇŒ
))<0)

252  
r
;

253 if((
r
=
	`sys_ív_£t_°©us
(
ívid
,
ENV_RUNNABLE
))<0)

254  
r
;

255  
ívid
;

259 
	}
}

	@lib/fprintf.c

1 
	~<öc/lib.h
>

8 
	s¥ötbuf
 {

9 
	mfd
;

10 
	midx
;

11 
ssize_t
 
	mªsu…
;

12 
	mîr‹
;

13 
	mbuf
[256];

18 
	$wrôebuf
(
¥ötbuf
 *
b
)

20 i‡(
b
->
îr‹
 > 0) {

21 
ssize_t
 
ªsu…
 = 
	`wrôe
(
b
->
fd
, b->
buf
, b->
idx
);

22 i‡(
ªsu…
 > 0)

23 
b
->
ªsu…
 +=Ñesult;

24 i‡(
ªsu…
 !
b
->
idx
)

25 
b
->
îr‹
 = (
ªsu…
 < 0 ?Ñesult : 0);

27 
	}
}

30 
	$putch
(
ch
, *
thunk
)

32 
¥ötbuf
 *
b
 = (¥ötbu‡*Ë
thunk
;

33 
b
->
buf
[b->
idx
++] = 
ch
;

34 i‡(
b
->
idx
 == 256) {

35 
	`wrôebuf
(
b
);

36 
b
->
idx
 = 0;

38 
	}
}

41 
	$vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
 
≠
)

43 
¥ötbuf
 
b
;

45 
b
.
fd
 = fd;

46 
b
.
idx
 = 0;

47 
b
.
ªsu…
 = 0;

48 
b
.
îr‹
 = 1;

49 
	`v¥ötfmt
(
putch
, &
b
, 
fmt
, 
≠
);

50 i‡(
b
.
idx
 > 0)

51 
	`wrôebuf
(&
b
);

53  (
b
.
ªsu…
 ? b.ªsu… : b.
îr‹
);

54 
	}
}

57 
	$Ârötf
(
fd
, c⁄° *
fmt
, ...)

59 
va_li°
 
≠
;

60 
˙t
;

62 
	`va_°¨t
(
≠
, 
fmt
);

63 
˙t
 = 
	`vÂrötf
(
fd
, 
fmt
, 
≠
);

64 
	`va_íd
(
≠
);

66  
˙t
;

67 
	}
}

70 
	$¥ötf
(c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

73 
˙t
;

75 
	`va_°¨t
(
≠
, 
fmt
);

76 
˙t
 = 
	`vÂrötf
(1, 
fmt
, 
≠
);

77 
	`va_íd
(
≠
);

79  
˙t
;

80 
	}
}

	@lib/ipc.c

3 
	~<öc/lib.h
>

22 
öt32_t


23 
	$ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
)

26 
r
;

27 *
d°va
=
NULL
;

28 if(
pg
)

29 
d°va
=
pg
;

30 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

31 if(
‰om_ív_°‹e
&&(
ív
->
ív_id
==*from_env_store))

33 *
‰om_ív_°‹e
=0;

34 *
≥rm_°‹e
=0;

35 
	`˝rötf
("send:theÑeciver is sender\n");

38 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

39 if((
r
=
	`sys_ùc_ªcv
(
d°va
))<0)

41 *
‰om_ív_°‹e
=0;

42 *
≥rm_°‹e
=0;

43 
	`˝rötf
("reciver failed\n");

44  
r
;

47 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

48 if(
‰om_ív_°‹e
)

49 *
‰om_ív_°‹e
=
ív
->
ív_ùc_‰om
;

50 if(
≥rm_°‹e
)

51 *
≥rm_°‹e
=
ív
->
ív_ùc_≥rm
;

52 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

53  
ív
->
ív_ùc_vÆue
;

57 
	}
}

68 
	$ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆ
, *
pg
, 
≥rm
)

71 
r
,
i
=0;

72 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

75 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

76 if(
ív
->
ív_id
==
to_ív
){

77 
	`˝rötf
("send:theÑeciver is sender\n");

80 if((
r
=
	`sys_ùc_åy_£nd
(
to_ív
,
vÆ
,
pg
,
≥rm
))<0)

82 if(
r
!=-
E_IPC_NOT_RECV
)

83 
	`∑nic
("£ndÉº‹:%e",
r
);

85 
	`sys_yõld
();

87 }
r
!=0);

90 
	}
}

	@lib/libmain.c

4 
	~<öc/lib.h
>

6 
umaö
(
¨gc
, **
¨gv
);

8 vﬁ©ûê
Env
 *
	gív
;

9 *
	gbö¨y«me
 = "(PROGRAM NAME UNKNOWN)";

12 
	$libmaö
(
¨gc
, **
¨gv
)

16 
ív
 = 0;

17 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

19 i‡(
¨gc
 > 0)

20 
bö¨y«me
 = 
¨gv
[0];

23 
	`umaö
(
¨gc
, 
¨gv
);

26 
	`exô
();

27 
	}
}

	@lib/malloc.c

2 
	~<öc/lib.h
>

20 
	mMAXMALLOC
 = 1024*1024

23 
	#PTE_CONTINUED
 0x400

	)

25 
uöt8_t
 *
	gmbegö
 = (uint8_t*) 0x08000000;

26 
uöt8_t
 *
	gmíd
 = (uint8_t*) 0x10000000;

27 
uöt8_t
 *
	gm±r
;

30 
	$is‰ì
(*
v
, 
size_t
 
n
)

32 
uöçå_t
 
va
, 
íd_va
 = (uöçå_tË
v
 + 
n
;

34 
va
 = (
uöçå_t
Ë
v
; v®< 
íd_va
; v®+
PGSIZE
)

35 i‡(
va
 >(
uöçå_t
Ë
míd


36 || ((
vpd
[
	`PDX
(
va
)] & 
PTE_P
Ë&& (
v±
[
	`VPN
(va)] & PTE_P)))

39 
	}
}

42 
	$mÆloc
(
size_t
 
n
)

44 
i
, 
c⁄t
;

45 
nwøp
;

46 
uöt32_t
 *
ªf
;

47 *
v
;

49 i‡(
m±r
 == 0)

50 
m±r
 = 
mbegö
;

52 
n
 = 
	`ROUNDUP
(n, 4);

54 i‡(
n
 >
MAXMALLOC
)

57 i‡((
uöçå_t
Ë
m±r
 % 
PGSIZE
){

63 
ªf
 = (
uöt32_t
*Ë(
	`ROUNDUP
(
m±r
, 
PGSIZE
) - 4);

64 i‡((
uöçå_t
Ë
m±r
 / 
PGSIZE
 =(uöçå_tË(m±∏+ 
n
 - 1 + 4) / PGSIZE) {

65 (*
ªf
)++;

66 
v
 = 
m±r
;

67 
m±r
 +
n
;

68  
v
;

73 
	`‰ì
(
m±r
);

74 
m±r
 = 
	`ROUNDDOWN
(m±∏+ 
PGSIZE
, PGSIZE);

83 
nwøp
 = 0;

85 i‡(
	`is‰ì
(
m±r
, 
n
 + 4))

87 
m±r
 +
PGSIZE
;

88 i‡(
m±r
 =
míd
) {

89 
m±r
 = 
mbegö
;

90 i‡(++
nwøp
 == 2)

98 
i
 = 0; i < 
n
 + 4; i +
PGSIZE
){

99 
c⁄t
 = (
i
 + 
PGSIZE
 < 
n
 + 4Ë? 
PTE_CONTINUED
 : 0;

100 i‡(
	`sys_∑ge_Æloc
(0, 
m±r
 + 
i
, 
PTE_P
|
PTE_U
|
PTE_W
|
c⁄t
) < 0){

101 ; 
i
 >0; i -
PGSIZE
)

102 
	`sys_∑ge_unm≠
(0, 
m±r
 + 
i
);

107 
ªf
 = (
uöt32_t
*Ë(
m±r
 + 
i
 - 4);

108 *
ªf
 = 2;

109 
v
 = 
m±r
;

110 
m±r
 +
n
;

111  
v
;

112 
	}
}

115 
	$‰ì
(*
v
)

117 
uöt8_t
 *
c
;

118 
uöt32_t
 *
ªf
;

120 i‡(
v
 == 0)

122 
	`as£π
(
mbegö
 <(
uöt8_t
*Ë
v
 && (uöt8_t*Ëv < 
míd
);

124 
c
 = 
	`ROUNDDOWN
(
v
, 
PGSIZE
);

126 
v±
[
	`VPN
(
c
)] & 
PTE_CONTINUED
) {

127 
	`sys_∑ge_unm≠
(0, 
c
);

128 
c
 +
PGSIZE
;

129 
	`as£π
(
mbegö
 <
c
 && c < 
míd
);

136 
ªf
 = (
uöt32_t
*Ë(
c
 + 
PGSIZE
 - 4);

137 i‡(--(*
ªf
) == 0)

138 
	`sys_∑ge_unm≠
(0, 
c
);

139 
	}
}

	@lib/nsipc.c

1 
	~<öc/ns.h
>

2 
	~<öc/lib.h
>

3 
	~<lwù/sockës.h
>

5 
	#debug
 0

	)

8 
	#REQVA
 0x0ffff000

	)

9 
Nsùc
 
nsùcbuf
;

17 
	$nsùc
(
ty≥
)

19 i‡(
debug
)

20 
	`˝rötf
("[%08x]Çsù¯%d\n", 
ív
->
ív_id
, 
ty≥
);

22 
	`ùc_£nd
(
ívs
[2].
ív_id
, 
ty≥
, &
nsùcbuf
, 
PTE_P
|
PTE_W
|
PTE_U
);

23  
	`ùc_ªcv
(
NULL
, NULL, NULL);

24 
	}
}

27 
	$nsùc_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

29 
r
;

31 
nsùcbuf
.
ac˚±
.
ªq_s
 = 
s
;

32 i‡((
r
 = 
	`nsùc
(
NSREQ_ACCEPT
)) >= 0) {

33 
N§ë_ac˚±
 *
ªt
 = &
nsùcbuf
.
ac˚±Rë
;

34 
	`memmove
(
addr
, &
ªt
->
ªt_addr
,Ñë->
ªt_addæí
);

35 *
addæí
 = 
ªt
->
ªt_addæí
;

37  
r
;

38 
	}
}

41 
	$nsùc_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

43 
nsùcbuf
.
böd
.
ªq_s
 = 
s
;

44 
	`memmove
(&
nsùcbuf
.
böd
.
ªq_«me
, 
«me
, 
«mñí
);

45 
nsùcbuf
.
böd
.
ªq_«mñí
 = 
«mñí
;

46  
	`nsùc
(
NSREQ_BIND
);

47 
	}
}

50 
	$nsùc_shutdown
(
s
, 
how
)

52 
nsùcbuf
.
shutdown
.
ªq_s
 = 
s
;

53 
nsùcbuf
.
shutdown
.
ªq_how
 = 
how
;

54  
	`nsùc
(
NSREQ_SHUTDOWN
);

55 
	}
}

58 
	$nsùc_˛o£
(
s
)

60 
nsùcbuf
.
˛o£
.
ªq_s
 = 
s
;

61  
	`nsùc
(
NSREQ_CLOSE
);

62 
	}
}

65 
	$nsùc_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

67 
nsùcbuf
.
c⁄√˘
.
ªq_s
 = 
s
;

68 
	`memmove
(&
nsùcbuf
.
c⁄√˘
.
ªq_«me
, 
«me
, 
«mñí
);

69 
nsùcbuf
.
c⁄√˘
.
ªq_«mñí
 = 
«mñí
;

70  
	`nsùc
(
NSREQ_CONNECT
);

71 
	}
}

74 
	$nsùc_li°í
(
s
, 
backlog
)

76 
nsùcbuf
.
li°í
.
ªq_s
 = 
s
;

77 
nsùcbuf
.
li°í
.
ªq_backlog
 = 
backlog
;

78  
	`nsùc
(
NSREQ_LISTEN
);

79 
	}
}

82 
	$nsùc_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

84 
r
;

86 
nsùcbuf
.
ªcv
.
ªq_s
 = 
s
;

87 
nsùcbuf
.
ªcv
.
ªq_Àn
 = 
Àn
;

88 
nsùcbuf
.
ªcv
.
ªq_Êags
 = 
Êags
;

90 i‡((
r
 = 
	`nsùc
(
NSREQ_RECV
)) >= 0) {

91 
	`as£π
(
r
 < 1600 &&Ñ <
Àn
);

92 
	`memmove
(
mem
, 
nsùcbuf
.
ªcvRë
.
ªt_buf
, 
r
);

95  
r
;

96 
	}
}

99 
	$nsùc_£nd
(
s
, c⁄° *
buf
, 
size
, 
Êags
)

101 
nsùcbuf
.
£nd
.
ªq_s
 = 
s
;

102 
	`as£π
(
size
 < 1600);

103 
	`memmove
(&
nsùcbuf
.
£nd
.
ªq_buf
, 
buf
, 
size
);

104 
nsùcbuf
.
£nd
.
ªq_size
 = 
size
;

105 
nsùcbuf
.
£nd
.
ªq_Êags
 = 
Êags
;

106  
	`nsùc
(
NSREQ_SEND
);

107 
	}
}

110 
	$nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

112 
nsùcbuf
.
sockë
.
ªq_domaö
 = 
domaö
;

113 
nsùcbuf
.
sockë
.
ªq_ty≥
 = 
ty≥
;

114 
nsùcbuf
.
sockë
.
ªq_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

115  
	`nsùc
(
NSREQ_SOCKET
);

116 
	}
}

	@lib/pageref.c

1 
	~<öc/lib.h
>

4 
	$∑gîef
(*
v
)

6 
±e_t
 
±e
;

8 i‡(!(
vpd
[
	`PDX
(
v
)] & 
PTE_P
))

10 
±e
 = 
v±
[
	`VPN
(
v
)];

11 i‡(!(
±e
 & 
PTE_P
))

13  
∑ges
[
	`PPN
(
±e
)].
µ_ªf
;

14 
	}
}

	@lib/panic.c

2 
	~<öc/lib.h
>

4 *
	g¨gv0
;

12 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

14 
va_li°
 
≠
;

16 
	`va_°¨t
(
≠
, 
fmt
);

19 i‡(
¨gv0
)

20 
	`˝rötf
("%s: ", 
¨gv0
);

21 
	`˝rötf
("u£∏∑ni¯ö %†© %s:%d: ", 
bö¨y«me
, 
fûe
, 
löe
);

22 
	`v˝rötf
(
fmt
, 
≠
);

23 
	`˝rötf
("\n");

27 
asm
 volatile("int3");

28 
	}
}

	@lib/pgfault.c

7 
	~<öc/lib.h
>

11 
_pgÁu…_upˇŒ
();

14 (*
_pgÁu…_h™dÀr
)(
UTøp‰ame
 *
utf
);

25 
	`£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
))

27 
r
;

29 i‡(
_pgÁu…_h™dÀr
 == 0) {

32 
ív
=(
Env
*)&
ívs
[
	`ENVX
(
	`sys_gëívid
())];

33 if((
r
=
	`sys_∑ge_Æloc
(
ív
->
ív_id
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

35 
	`∑nic
("AllocáÖage foránÉxception stack failed");

37 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ív
->
ív_id
,(*)
_pgÁu…_upˇŒ
);

42 
_pgÁu…_h™dÀr
 = 
h™dÀr
;

43 
	}
}

	@lib/printf.c

8 
	~<öc/ty≥s.h
>

9 
	~<öc/°dio.h
>

10 
	~<öc/°d¨g.h
>

11 
	~<öc/lib.h
>

19 
	s¥ötbuf
 {

20 
	midx
;

21 
	m˙t
;

22 
	mbuf
[256];

27 
	$putch
(
ch
, 
¥ötbuf
 *
b
)

29 
b
->
buf
[b->
idx
++] = 
ch
;

30 i‡(
b
->
idx
 == 256-1) {

31 
	`sys_˝uts
(
b
->
buf
, b->
idx
);

32 
b
->
idx
 = 0;

34 
b
->
˙t
++;

35 
	}
}

38 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

40 
¥ötbuf
 
b
;

42 
b
.
idx
 = 0;

43 
b
.
˙t
 = 0;

44 
	`v¥ötfmt
((*)
putch
, &
b
, 
fmt
, 
≠
);

45 
	`sys_˝uts
(
b
.
buf
, b.
idx
);

47  
b
.
˙t
;

48 
	}
}

51 
	$˝rötf
(c⁄° *
fmt
, ...)

53 
va_li°
 
≠
;

54 
˙t
;

56 
	`va_°¨t
(
≠
, 
fmt
);

57 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

58 
	`va_íd
(
≠
);

60  
˙t
;

61 
	}
}

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/°d¨g.h
>

9 
	~<öc/îr‹.h
>

21 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] =

23 
NULL
,

46 
¥öäum
((*
putch
)(, *), *
putd©
,

47 
num
, 
ba£
, 
width
, 
∑dc
)

50 i‡(
num
 >
ba£
) {

51 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

54 --
width
 > 0)

55 
	`putch
(
∑dc
, 
putd©
);

59 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

60 
	}
}

65 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

67 i‡(
lÊag
 >= 2)

68  
	`va_¨g
(*
≠
, );

69 i‡(
lÊag
)

70  
	`va_¨g
(*
≠
, );

72  
	`va_¨g
(*
≠
, );

73 
	}
}

78 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

80 i‡(
lÊag
 >= 2)

81  
	`va_¨g
(*
≠
, );

82 i‡(
lÊag
)

83  
	`va_¨g
(*
≠
, );

85  
	`va_¨g
(*
≠
, );

86 
	}
}

90 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

93 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

95 c⁄° *
p
;

96 
ch
, 
îr
;

97 
num
;

98 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

99 
∑dc
;

102 (
ch
 = *(*Ë
fmt
++) != '%') {

103 i‡(
ch
 == '\0')

105 
	`putch
(
ch
, 
putd©
);

109 
∑dc
 = ' ';

110 
width
 = -1;

111 
¥ecisi⁄
 = -1;

112 
lÊag
 = 0;

113 
ÆtÊag
 = 0;

114 
ªswôch
:

115 
ch
 = *(*Ë
fmt
++) {

119 
∑dc
 = '-';

120 
ªswôch
;

124 
∑dc
 = '0';

125 
ªswôch
;

137 
¥ecisi⁄
 = 0; ; ++
fmt
) {

138 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

139 
ch
 = *
fmt
;

140 i‡(
ch
 < '0' || ch > '9')

143 
¥o˚ss_¥ecisi⁄
;

146 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

147 
¥o˚ss_¥ecisi⁄
;

150 i‡(
width
 < 0)

151 
width
 = 0;

152 
ªswôch
;

155 
ÆtÊag
 = 1;

156 
ªswôch
;

158 
¥o˚ss_¥ecisi⁄
:

159 i‡(
width
 < 0)

160 
width
 = 
¥ecisi⁄
,Örecision = -1;

161 
ªswôch
;

165 
lÊag
++;

166 
ªswôch
;

170 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

175 
îr
 = 
	`va_¨g
(
≠
, );

176 i‡(
îr
 < 0)

177 
îr
 = -err;

178 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

179 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

181 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

186 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
)

187 
p
 = "(null)";

188 i‡(
width
 > 0 && 
∑dc
 != '-')

189 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

190 
	`putch
(
∑dc
, 
putd©
);

191 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

192 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

193 
	`putch
('?', 
putd©
);

195 
	`putch
(
ch
, 
putd©
);

196 ; 
width
 > 0; width--)

197 
	`putch
(' ', 
putd©
);

202 
num
 = 
	`gëöt
(&
≠
, 
lÊag
);

203 i‡((Ë
num
 < 0) {

204 
	`putch
('-', 
putd©
);

205 
num
 = -()Çum;

207 
ba£
 = 10;

208 
numbî
;

212 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

213 
ba£
 = 10;

214 
numbî
;

222 
num
 = 
	`gëuöt
(&
≠
,
lÊag
);

223 
ba£
=8;

228 
	`putch
('0', 
putd©
);

229 
	`putch
('x', 
putd©
);

230 
num
 = ()

231 (
uöçå_t
Ë
	`va_¨g
(
≠
, *);

232 
ba£
 = 16;

233 
numbî
;

237 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

238 
ba£
 = 16;

239 
numbî
:

240 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

245 
	`putch
(
ch
, 
putd©
);

250 
	`putch
('%', 
putd©
);

251 
fmt
--; fmt[-1] != '%'; fmt--)

256 
	}
}

259 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

261 
va_li°
 
≠
;

263 
	`va_°¨t
(
≠
, 
fmt
);

264 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

265 
	`va_íd
(
≠
);

266 
	}
}

268 
	s•rötbuf
 {

269 *
	mbuf
;

270 *
	mebuf
;

271 
	m˙t
;

275 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

277 
b
->
˙t
++;

278 i‡(
b
->
buf
 < b->
ebuf
)

279 *
b
->
buf
++ = 
ch
;

280 
	}
}

283 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

285 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

287 i‡(
buf
 =
NULL
 || 
n
 < 1)

288  -
E_INVAL
;

291 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

294 *
b
.
buf
 = '\0';

296  
b
.
˙t
;

297 
	}
}

300 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

302 
va_li°
 
≠
;

303 
rc
;

305 
	`va_°¨t
(
≠
, 
fmt
);

306 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
≠
);

307 
	`va_íd
(
≠
);

309  
rc
;

310 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/îr‹.h
>

4 
	#BUFLEN
 1024

	)

5 
	gbuf
[
BUFLEN
];

8 
	$ªadlöe
(c⁄° *
¥om±
)

10 
i
, 
c
, 
echoög
;

12 i‡(
¥om±
 !
NULL
)

13 
	`˝rötf
("%s", 
¥om±
);

15 
i
 = 0;

16 
echoög
 = 
	`isc⁄s
(0);

18 
c
 = 
	`gëch¨
();

19 i‡(
c
 < 0) {

20 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

21  
NULL
;

22 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

23 i‡(
echoög
)

24 
	`˝utch¨
('\b');

25 
i
--;

26 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

27 i‡(
echoög
)

28 
	`˝utch¨
(
c
);

29 
buf
[
i
++] = 
c
;

30 } i‡(
c
 == '\n' || c == '\r') {

31 i‡(
echoög
)

32 
	`˝utch¨
('\n');

33 
buf
[
i
] = 0;

34  
buf
;

37 
	}
}

	@lib/sockets.c

1 
	~<öc/lib.h
>

2 
	~<lwù/sockës.h
>

4 
ssize_t
 
devsock_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

5 
ssize_t
 
devsock_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

6 
devsock_˛o£
(
Fd
 *
fd
);

7 
devsock_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

9 
Dev
 
	gdevsock
 =

11 .
dev_id
 = 's',

12 .
	gdev_«me
 = "sock",

13 .
	gdev_ªad
 = 
devsock_ªad
,

14 .
	gdev_wrôe
 = 
devsock_wrôe
,

15 .
	gdev_˛o£
 = 
devsock_˛o£
,

16 .
	gdev_°©
 = 
devsock_°©
,

20 
	$fd2sockid
(
fd
)

22 
Fd
 *
sfd
;

23 
r
;

25 i‡((
r
 = 
	`fd_lookup
(
fd
, &
sfd
)) < 0)

26  
r
;

27 i‡(
sfd
->
fd_dev_id
 !
devsock
.
dev_id
)

28  -
E_NOT_SUPP
;

29  
sfd
->
fd_sock
.
sockid
;

30 
	}
}

33 
	$Æloc_sockfd
(
sockid
)

35 
Fd
 *
sfd
;

36 
r
;

38 i‡((
r
 = 
	`fd_Æloc
(&
sfd
)) < 0

39 || (
r
 = 
	`sys_∑ge_Æloc
(0, 
sfd
, 
PTE_P
|
PTE_W
|
PTE_U
)) < 0) {

40 
	`nsùc_˛o£
(
sockid
);

41  
r
;

44 
sfd
->
fd_dev_id
 = 
devsock
.
dev_id
;

45 
sfd
->
fd_omode
 = 
O_RDWR
;

46 
sfd
->
fd_sock
.
sockid
 = sockid;

47  
	`fd2num
(
sfd
);

48 
	}
}

51 
	$ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

53 
r
;

54 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

55  
r
;

56 i‡((
r
 = 
	`nsùc_ac˚±
‘, 
addr
, 
addæí
)) < 0)

57  
r
;

58  
	`Æloc_sockfd
(
r
);

59 
	}
}

62 
	$böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

64 
r
;

65 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

66  
r
;

67  
	`nsùc_böd
(
r
, 
«me
, 
«mñí
);

68 
	}
}

71 
	$shutdown
(
s
, 
how
)

73 
r
;

74 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

75  
r
;

76  
	`nsùc_shutdown
(
r
, 
how
);

77 
	}
}

80 
	$devsock_˛o£
(
Fd
 *
fd
)

82  
	`nsùc_˛o£
(
fd
->
fd_sock
.
sockid
);

83 
	}
}

86 
	$c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

88 
r
;

89 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

90  
r
;

91  
	`nsùc_c⁄√˘
(
r
, 
«me
, 
«mñí
);

92 
	}
}

95 
	$li°í
(
s
, 
backlog
)

97 
r
;

98 i‡((
r
 = 
	`fd2sockid
(
s
)) < 0)

99  
r
;

100  
	`nsùc_li°í
(
r
, 
backlog
);

101 
	}
}

103 
ssize_t


104 
	$devsock_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
)

106  
	`nsùc_ªcv
(
fd
->
fd_sock
.
sockid
, 
buf
, 
n
, 0);

107 
	}
}

109 
ssize_t


110 
	$devsock_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
)

112  
	`nsùc_£nd
(
fd
->
fd_sock
.
sockid
, 
buf
, 
n
, 0);

113 
	}
}

116 
	$devsock_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
)

118 
	`°r˝y
(
°©
->
°_«me
, "<sock>");

120 
	}
}

123 
	$sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

125 
r
;

126 i‡((
r
 = 
	`nsùc_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)) < 0)

127  
r
;

128  
	`Æloc_sockfd
(
r
);

129 
	}
}

	@lib/spawn.c

1 
	~<öc/lib.h
>

2 
	~<öc/ñf.h
>

4 
	#UTEMP2USTACK
(
addr
Ë((*Ë◊ddrË+ (
USTACKTOP
 - 
PGSIZE
Ë- 
UTEMP
)

	)

5 
	#UTEMP2
 (
UTEMP
 + 
PGSIZE
)

	)

6 
	#UTEMP3
 (
UTEMP2
 + 
PGSIZE
)

	)

9 
öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
);

10 
m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

11 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
);

19 
	$•awn
(c⁄° *
¥og
, c⁄° **
¨gv
)

21 
ñf_buf
[512];

22 
Tøp‰ame
 
chûd_tf
;

23 
ívid_t
 
chûd
;

25 
fd
, 
i
, 
r
;

26 
Elf
 *
ñf
;

27 
Proghdr
 *
ph
;

28 
≥rm
;

87 i‡((
r
 = 
	`›í
(
¥og
, 
O_RDONLY
)) < 0)

88  
r
;

89 
fd
 = 
r
;

92 
ñf
 = (
Elf
*Ë
ñf_buf
;

93 i‡(
	`ªad
(
fd
, 
ñf_buf
, (elf_buf)) != (elf_buf)

94 || 
ñf
->
e_magic
 !
ELF_MAGIC
) {

95 
	`˛o£
(
fd
);

96 
	`˝rötf
("ñ‡magi¯%08x w™à%08x\n", 
ñf
->
e_magic
, 
ELF_MAGIC
);

97  -
E_NOT_EXEC
;

101 i‡((
r
 = 
	`sys_exof‹k
()) < 0)

102  
r
;

103 
chûd
 = 
r
;

106 
chûd_tf
 = 
ívs
[
	`ENVX
(
chûd
)].
ív_tf
;

107 
chûd_tf
.
tf_eù
 = 
ñf
->
e_íåy
;

109 i‡((
r
 = 
	`öô_°ack
(
chûd
, 
¨gv
, &
chûd_tf
.
tf_e•
)) < 0)

110  
r
;

113 
ph
 = (
Proghdr
*Ë(
ñf_buf
 + 
ñf
->
e_phoff
);

114 
i
 = 0; i < 
ñf
->
e_phnum
; i++, 
ph
++) {

115 i‡(
ph
->
p_ty≥
 !
ELF_PROG_LOAD
)

117 
≥rm
 = 
PTE_P
 | 
PTE_U
;

118 i‡(
ph
->
p_Êags
 & 
ELF_PROG_FLAG_WRITE
)

119 
≥rm
 |
PTE_W
;

120 i‡((
r
 = 
	`m≠_£gmít
(
chûd
, 
ph
->
p_va
,Öh->
p_memsz
,

121 
fd
, 
ph
->
p_fûesz
,Öh->
p_off£t
, 
≥rm
)) < 0)

122 
îr‹
;

124 
	`˛o£
(
fd
);

125 
fd
 = -1;

127 i‡((
r
 = 
	`sys_ív_£t_å≠‰ame
(
chûd
, &
chûd_tf
)) < 0)

128 
	`∑nic
("sys_ív_£t_å≠‰ame: %e", 
r
);

130 i‡((
r
 = 
	`sys_ív_£t_°©us
(
chûd
, 
ENV_RUNNABLE
)) < 0)

131 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

133  
chûd
;

135 
îr‹
:

136 
	`sys_ív_de°roy
(
chûd
);

137 
	`˛o£
(
fd
);

138  
r
;

139 
	}
}

143 
	$•aw∆
(c⁄° *
¥og
, c⁄° *
¨g0
, ...)

145  
	`•awn
(
¥og
, &
¨g0
);

146 
	}
}

157 
	$öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
)

159 
size_t
 
°rög_size
;

160 
¨gc
, 
i
, 
r
;

161 *
°rög_°‹e
;

162 
uöçå_t
 *
¨gv_°‹e
;

166 
°rög_size
 = 0;

167 
¨gc
 = 0; 
¨gv
[argc] != 0;árgc++)

168 
°rög_size
 +
	`°æí
(
¨gv
[
¨gc
]) + 1;

175 
°rög_°‹e
 = (*Ë
UTEMP
 + 
PGSIZE
 - 
°rög_size
;

178 
¨gv_°‹e
 = (
uöçå_t
*Ë(
	`ROUNDDOWN
(
°rög_°‹e
, 4Ë- 4 * (
¨gc
 + 1));

182 i‡((*Ë(
¨gv_°‹e
 - 2Ë< (*Ë
UTEMP
)

183  -
E_NO_MEM
;

186 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

187  
r
;

206 
i
 = 0; i < 
¨gc
; i++) {

207 
¨gv_°‹e
[
i
] = 
	`UTEMP2USTACK
(
°rög_°‹e
);

208 
	`°r˝y
(
°rög_°‹e
, 
¨gv
[
i
]);

209 
°rög_°‹e
 +
	`°æí
(
¨gv
[
i
]) + 1;

211 
¨gv_°‹e
[
¨gc
] = 0;

212 
	`as£π
(
°rög_°‹e
 =(*)
UTEMP
 + 
PGSIZE
);

214 
¨gv_°‹e
[-1] = 
	`UTEMP2USTACK
(argv_store);

215 
¨gv_°‹e
[-2] = 
¨gc
;

217 *
öô_e•
 = 
	`UTEMP2USTACK
(&
¨gv_°‹e
[-2]);

221 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
USTACKTOP
 - 
PGSIZE
), 
PTE_P
 | 
PTE_U
 | 
PTE_W
)) < 0)

222 
îr‹
;

223 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, 
UTEMP
)) < 0)

224 
îr‹
;

228 
îr‹
:

229 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

230  
r
;

231 
	}
}

234 
	$m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

235 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
)

237 
i
, 
r
;

238 *
blk
;

242 i‡((
i
 = 
	`PGOFF
(
va
))) {

243 
va
 -
i
;

244 
memsz
 +
i
;

245 
fûesz
 +
i
;

246 
fûeoff£t
 -
i
;

249 
i
 = 0; i < 
memsz
; i +
PGSIZE
) {

250 i‡(
i
 >
fûesz
) {

252 i‡((
r
 = 
	`sys_∑ge_Æloc
(
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

253  
r
;

256 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

257  
r
;

258 i‡((
r
 = 
	`£ek
(
fd
, 
fûeoff£t
 + 
i
)) < 0)

259  
r
;

260 i‡((
r
 = 
	`ªad
(
fd
, 
UTEMP
, 
	`MIN
(
PGSIZE
, 
fûesz
-
i
))) < 0)

261  
r
;

262 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

263 
	`∑nic
("•awn: sys_∑ge_m≠ d©a: %e", 
r
);

264 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

268 
	}
}

	@lib/string.c

3 
	~<öc/°rög.h
>

9 
	#ASM
 1

	)

12 
	$°æí
(c⁄° *
s
)

14 
n
;

16 
n
 = 0; *
s
 != '\0'; s++)

17 
n
++;

18  
n
;

19 
	}
}

22 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

24 
n
;

26 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

27 
n
++;

28  
n
;

29 
	}
}

32 
	$°r˝y
(*
d°
, c⁄° *
§c
)

34 *
ªt
;

36 
ªt
 = 
d°
;

37 (*
d°
++ = *
§c
++) != '\0')

39  
ªt
;

40 
	}
}

43 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

44 
size_t
 
i
;

45 *
ªt
;

47 
ªt
 = 
d°
;

48 
i
 = 0; i < 
size
; i++) {

49 *
d°
++ = *
§c
;

51 i‡(*
§c
 != '\0')

52 
§c
++;

54  
ªt
;

55 
	}
}

57 
size_t


58 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

60 *
d°_ö
;

62 
d°_ö
 = 
d°
;

63 i‡(
size
 > 0) {

64 --
size
 > 0 && *
§c
 != '\0')

65 *
d°
++ = *
§c
++;

66 *
d°
 = '\0';

68  
d°
 - 
d°_ö
;

69 
	}
}

71 
	$p°r˝y
(*
buf
, 
buf_size
, c⁄° *
°r
)

73 
c
;

74 *
q
 = 
buf
;

76 i‡(
buf_size
 <= 0)

80 
c
 = *
°r
++;

81 i‡(
c
 =0 || 
q
 >
buf
 + 
buf_size
 - 1)

83 *
q
++ = 
c
;

85 *
q
 = '\0';

86 
	}
}

88 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

90 *
p
 && *∞=*
q
)

91 
p
++, 
q
++;

92  (Ë((Ë*
p
 - (Ë*
q
);

93 
	}
}

96 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

98 
n
 > 0 && *
p
 && *∞=*
q
)

99 
n
--, 
p
++, 
q
++;

100 i‡(
n
 == 0)

103  (Ë((Ë*
p
 - (Ë*
q
);

104 
	}
}

109 
	$°rchr
(c⁄° *
s
, 
c
)

111 ; *
s
; s++)

112 i‡(*
s
 =
c
)

113  (*Ë
s
;

115 
	}
}

120 
	$°rföd
(c⁄° *
s
, 
c
)

122 ; *
s
; s++)

123 i‡(*
s
 =
c
)

125  (*Ë
s
;

126 
	}
}

128 #i‡
ASM


130 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

132 *
p
;

134 i‡(
n
 == 0)

135  
v
;

136 i‡(()
v
%4 =0 && 
n
%4 == 0) {

137 
c
 &= 0xFF;

138 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

139 
asm
 volatile("cld;Ñep stosl\n"

140 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

143 
asm
 volatile("cld;Ñep stosb\n"

144 :: "D" (
v
), "a" (
c
), "c" (
n
)

146  
v
;

147 
	}
}

150 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

152 c⁄° *
s
;

153 *
d
;

155 
s
 = 
§c
;

156 
d
 = 
d°
;

157 i‡(
s
 < 
d
 && s + 
n
 > d) {

158 
s
 +
n
;

159 
d
 +
n
;

160 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

161 
asm
 volatile("std;Ñep movsl\n"

162 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

164 
asm
 volatile("std;Ñep movsb\n"

165 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

167 
asm
 volatile("cld" ::: "cc");

169 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

170 
asm
 volatile("cld;Ñep movsl\n"

171 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

173 
asm
 volatile("cld;Ñep movsb\n"

174 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

176  
d°
;

177 
	}
}

182 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

184 *
p
;

185 
m
;

187 
p
 = 
v
;

188 
m
 = 
n
;

189 --
m
 >= 0)

190 *
p
++ = 
c
;

192  
v
;

193 
	}
}

198 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

200 c⁄° *
s
;

201 *
d
;

203 
s
 = 
§c
;

204 
d
 = 
d°
;

205 i‡(
s
 < 
d
 && s + 
n
 > d) {

206 
s
 +
n
;

207 
d
 +
n
;

208 
n
-- > 0)

209 *--
d
 = *--
s
;

211 
n
-- > 0)

212 *
d
++ = *
s
++;

214  
d°
;

215 
	}
}

221 
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

223  
	`memmove
(
d°
, 
§c
, 
n
);

224 
	}
}

227 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

229 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

230 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

232 
n
-- > 0) {

233 i‡(*
s1
 !*
s2
)

234  (Ë*
s1
 - (Ë*
s2
;

235 
s1
++, 
s2
++;

239 
	}
}

242 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

244 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

245 ; 
s
 < 
íds
; s++)

246 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

248  (*Ë
s
;

249 
	}
}

252 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

254 
√g
 = 0;

255 
vÆ
 = 0;

258 *
s
 == ' ' || *s == '\t')

259 
s
++;

262 i‡(*
s
 == '+')

263 
s
++;

264 i‡(*
s
 == '-')

265 
s
++, 
√g
 = 1;

268 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

269 
s
 +2, 
ba£
 = 16;

270 i‡(
ba£
 =0 && 
s
[0] == '0')

271 
s
++, 
ba£
 = 8;

272 i‡(
ba£
 == 0)

273 
ba£
 = 10;

277 
dig
;

279 i‡(*
s
 >= '0' && *s <= '9')

280 
dig
 = *
s
 - '0';

281 i‡(*
s
 >= 'a' && *s <= 'z')

282 
dig
 = *
s
 - 'a' + 10;

283 i‡(*
s
 >= 'A' && *s <= 'Z')

284 
dig
 = *
s
 - 'A' + 10;

287 i‡(
dig
 >
ba£
)

289 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

293 i‡(
íd±r
)

294 *
íd±r
 = (*Ë
s
;

295  (
√g
 ? -
vÆ
 : val);

296 
	}
}

	@lib/syscall.c

3 
	~<öc/sysˇŒ.h
>

4 
	~<öc/lib.h
>

6 
ölöe
 
öt32_t


7 
	$sysˇŒ
(
num
, 
check
, 
uöt32_t
 
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

9 
öt32_t
 
ªt
;

23 
asm
 volatile("int %1\n"

24 : "˜" (
ªt
)

25 : "i" (
T_SYSCALL
),

26 "a" (
num
),

27 "d" (
a1
),

28 "c" (
a2
),

29 "b" (
a3
),

30 "D" (
a4
),

31 "S" (
a5
)

34 if(
check
 && 
ªt
 > 0)

35 
	`∑nic
("sysˇŒ %dÑëu∫ed %d (> 0)", 
num
, 
ªt
);

37  
ªt
;

38 
	}
}

41 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

43 
	`sysˇŒ
(
SYS_˝uts
, 0, (
uöt32_t
)
s
, 
Àn
, 0, 0, 0);

44 
	}
}

47 
	$sys_cgëc
()

49  
	`sysˇŒ
(
SYS_cgëc
, 0, 0, 0, 0, 0, 0);

50 
	}
}

53 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

55  
	`sysˇŒ
(
SYS_ív_de°roy
, 1, 
ívid
, 0, 0, 0, 0);

56 
	}
}

58 
ívid_t


59 
	$sys_gëívid
()

61  
	`sysˇŒ
(
SYS_gëívid
, 0, 0, 0, 0, 0, 0);

62 
	}
}

65 
	$sys_yõld
()

67 
	`sysˇŒ
(
SYS_yõld
, 0, 0, 0, 0, 0, 0);

68 
	}
}

71 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

73  
	`sysˇŒ
(
SYS_∑ge_Æloc
, 1, 
ívid
, (
uöt32_t
Ë
va
, 
≥rm
, 0, 0);

74 
	}
}

77 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nv
, *
§cva
,Énvid_à
d°ív
, *
d°va
, 
≥rm
)

79  
	`sysˇŒ
(
SYS_∑ge_m≠
, 1, 
§˚nv
, (
uöt32_t
Ë
§cva
, 
d°ív
, (uöt32_tË
d°va
, 
≥rm
);

80 
	}
}

83 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

85  
	`sysˇŒ
(
SYS_∑ge_unm≠
, 1, 
ívid
, (
uöt32_t
Ë
va
, 0, 0, 0);

86 
	}
}

91 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

93  
	`sysˇŒ
(
SYS_ív_£t_°©us
, 1, 
ívid
, 
°©us
, 0, 0, 0);

94 
	}
}

97 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

99  
	`sysˇŒ
(
SYS_ív_£t_å≠‰ame
, 1, 
ívid
, (
uöt32_t
Ë
tf
, 0, 0, 0);

100 
	}
}

103 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
upˇŒ
)

105  
	`sysˇŒ
(
SYS_ív_£t_pgÁu…_upˇŒ
, 1, 
ívid
, (
uöt32_t
Ë
upˇŒ
, 0, 0, 0);

106 
	}
}

109 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt32_t
 
vÆue
, *
§cva
, 
≥rm
)

111  
	`sysˇŒ
(
SYS_ùc_åy_£nd
, 0, 
ívid
, 
vÆue
, (
uöt32_t
Ë
§cva
, 
≥rm
, 0);

112 
	}
}

115 
	$sys_ùc_ªcv
(*
d°va
)

117  
	`sysˇŒ
(
SYS_ùc_ªcv
, 1, (
uöt32_t
)
d°va
, 0, 0, 0, 0);

118 
	}
}

121 
	$sys_time_m£c
()

123  (Ë
	`sysˇŒ
(
SYS_time_m£c
, 0, 0, 0, 0, 0, 0);

124 
	}
}

	@net/input.c

1 
	~"ns.h
"

3 
Nsùc
 
nsùcbuf
;

6 
	$öput
(
ívid_t
 
ns_ívid
)

8 
bö¨y«me
 = "ns_input";

16 
	}
}

	@net/lwip/api/api_lib.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_NETCONN


46 
	~"lwù/≠i.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/memp.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

55 
	~<°rög.h
>

67 
√tc⁄n
*

68 
	$√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

70 
√tc⁄n
 *
c⁄n
;

71 
≠i_msg
 
msg
;

73 
c⁄n
 = 
	`√tc⁄n_Æloc
(
t
, 
ˇŒback
);

75 i‡(
c⁄n
 !
NULL
 ) {

76 
msg
.
fun˘i⁄
 = 
do_√wc⁄n
;

77 
msg
.msg.msg.
n
.
¥Ÿo
 =Öroto;

78 
msg
.msg.
c⁄n
 = conn;

79 
	`TCPIP_APIMSG
(&
msg
);

81 i‡(
c⁄n
->
îr
 !
ERR_OK
) {

82 
	`LWIP_ASSERT
("‰ìög c⁄¿wôhouà‰ìögÖcb", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

83 
	`LWIP_ASSERT
("c⁄¿ha†nÿ›_com∂ëed", 
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
);

84 
	`LWIP_ASSERT
("c⁄¿ha†nÿªcvmbox", 
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
);

85 
	`LWIP_ASSERT
("c⁄n->ac˚±mbox shouldn'àexi°", 
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
);

86 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

87 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

88 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

89  
NULL
;

92  
c⁄n
;

93 
	}
}

103 
îr_t


104 
	$√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
)

106 
≠i_msg
 
msg
;

109 i‡(
c⁄n
 =
NULL
) {

110  
ERR_OK
;

113 
msg
.
fun˘i⁄
 = 
do_dñc⁄n
;

114 
msg
.msg.
c⁄n
 = conn;

115 
	`t˝ù_≠imsg
(&
msg
);

117 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

118 
	`√tc⁄n_‰ì
(
c⁄n
);

120  
ERR_OK
;

121 
	}
}

129 
√tc⁄n_ty≥


130 
	$√tc⁄n_ty≥
(
√tc⁄n
 *
c⁄n
)

132 
	`LWIP_ERROR
("√tc⁄n_ty≥: invÆid c⁄n", (
c⁄n
 !
NULL
),  
NETCONN_INVALID
;);

133  
c⁄n
->
ty≥
;

134 
	}
}

147 
îr_t


148 
	$√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
)

150 
≠i_msg
 
msg
;

152 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

153 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

154 
	`LWIP_ERROR
("√tc⁄n_gëaddr: invÆidÖ‹t", (
p‹t
 !
NULL
),  
ERR_ARG
;);

156 
msg
.
fun˘i⁄
 = 
do_gëaddr
;

157 
msg
.msg.
c⁄n
 = conn;

158 
msg
.msg.msg.
ad
.
ùaddr
 = 
addr
;

159 
msg
.msg.msg.
ad
.
p‹t
 =Öort;

160 
msg
.msg.msg.
ad
.
loˇl
 =Üocal;

161 
	`TCPIP_APIMSG
(&
msg
);

163  
c⁄n
->
îr
;

164 
	}
}

176 
îr_t


177 
	$√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

179 
≠i_msg
 
msg
;

181 
	`LWIP_ERROR
("√tc⁄n_böd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

183 
msg
.
fun˘i⁄
 = 
do_böd
;

184 
msg
.msg.
c⁄n
 = conn;

185 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

186 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

187 
	`TCPIP_APIMSG
(&
msg
);

188  
c⁄n
->
îr
;

189 
	}
}

199 
îr_t


200 
	$√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

202 
≠i_msg
 
msg
;

204 
	`LWIP_ERROR
("√tc⁄n_c⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

206 
msg
.
fun˘i⁄
 = 
do_c⁄√˘
;

207 
msg
.msg.
c⁄n
 = conn;

208 
msg
.msg.msg.
bc
.
ùaddr
 = 
addr
;

209 
msg
.msg.msg.
bc
.
p‹t
 =Öort;

211 
	`t˝ù_≠imsg
(&
msg
);

212  
c⁄n
->
îr
;

213 
	}
}

221 
îr_t


222 
	$√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
)

224 
≠i_msg
 
msg
;

226 
	`LWIP_ERROR
("√tc⁄n_disc⁄√˘: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

228 
msg
.
fun˘i⁄
 = 
do_disc⁄√˘
;

229 
msg
.msg.
c⁄n
 = conn;

230 
	`TCPIP_APIMSG
(&
msg
);

231  
c⁄n
->
îr
;

232 
	}
}

242 
îr_t


243 
	$√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
)

245 
≠i_msg
 
msg
;

248 
	`LWIP_UNUSED_ARG
(
backlog
);

250 
	`LWIP_ERROR
("√tc⁄n_li°í: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

252 
msg
.
fun˘i⁄
 = 
do_li°í
;

253 
msg
.msg.
c⁄n
 = conn;

254 #i‡
TCP_LISTEN_BACKLOG


255 
msg
.msg.msg.
lb
.
backlog
 = backlog;

257 
	`TCPIP_APIMSG
(&
msg
);

258  
c⁄n
->
îr
;

259 
	}
}

267 
√tc⁄n
 *

268 
	$√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
)

270 
√tc⁄n
 *
√wc⁄n
;

272 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

273 
	`LWIP_ERROR
("√tc⁄n_ac˚±: invÆidác˚±mbox", (
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
),  
NULL
;);

275 #i‡
LWIP_SO_RCVTIMEO


276 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, c⁄n->
ªcv_timeout
Ë=
SYS_ARCH_TIMEOUT
) {

277 
√wc⁄n
 = 
NULL
;

280 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ac˚±mbox
, (*)&
√wc⁄n
, 0);

284 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 0);

286 #i‡
TCP_LISTEN_BACKLOG


287 i‡(
√wc⁄n
 !
NULL
) {

289 
≠i_msg
 
msg
;

290 
msg
.
fun˘i⁄
 = 
do_ªcv
;

291 
msg
.msg.
c⁄n
 = conn;

292 
	`TCPIP_APIMSG
(&
msg
);

297  
√wc⁄n
;

298 
	}
}

306 
√tbuf
 *

307 
	$√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
)

309 
≠i_msg
 
msg
;

310 
√tbuf
 *
buf
 = 
NULL
;

311 
pbuf
 *
p
;

312 
u16_t
 
Àn
;

314 
	`LWIP_ERROR
("√tc⁄n_ªcv: invÆid c⁄n", (
c⁄n
 !
NULL
),  NULL;);

316 i‡(
c⁄n
->
ªcvmbox
 =
SYS_MBOX_NULL
) {

319 
c⁄n
->
îr
 = 
ERR_CONN
;

320  
NULL
;

323 i‡(
	`ERR_IS_FATAL
(
c⁄n
->
îr
)) {

324  
NULL
;

327 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

328 #i‡
LWIP_TCP


329 i‡(
c⁄n
->
°©e
 =
NETCONN_LISTEN
) {

331 
c⁄n
->
îr
 = 
ERR_CONN
;

332  
NULL
;

335 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

337 i‡(
buf
 =
NULL
) {

338 
c⁄n
->
îr
 = 
ERR_MEM
;

339  
NULL
;

342 #i‡
LWIP_SO_RCVTIMEO


343 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

344 
c⁄n
->
îr
 = 
ERR_TIMEOUT
;

345 
p
 = 
NULL
;

348 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
p
, 0);

351 i‡(
p
 !
NULL
) {

352 
Àn
 = 
p
->
tŸ_Àn
;

353 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

355 
Àn
 = 0;

359 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
Àn
);

362 i‡(
p
 =
NULL
) {

363 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

365 i‡(
c⁄n
->
îr
 =
ERR_OK
) {

366 
c⁄n
->
îr
 = 
ERR_CLSD
;

368  
NULL
;

371 
buf
->
p
 =Ö;

372 
buf
->
±r
 = 
p
;

373 
buf
->
p‹t
 = 0;

374 
buf
->
addr
 = 
NULL
;

377 
msg
.
fun˘i⁄
 = 
do_ªcv
;

378 
msg
.msg.
c⁄n
 = conn;

379 i‡(
buf
 !
NULL
) {

380 
msg
.msg.msg.
r
.
Àn
 = 
buf
->
p
->
tŸ_Àn
;

382 
msg
.msg.msg.
r
.
Àn
 = 1;

384 
	`TCPIP_APIMSG
(&
msg
);

387 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

388 #i‡
LWIP_SO_RCVTIMEO


389 i‡(
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, c⁄n->
ªcv_timeout
)==
SYS_ARCH_TIMEOUT
) {

390 
buf
 = 
NULL
;

393 
	`sys_¨ch_mbox_„tch
(
c⁄n
->
ªcvmbox
, (*)&
buf
, 0);

395 i‡(
buf
!=
NULL
) {

396 
	`SYS_ARCH_DEC
(
c⁄n
->
ªcv_avaû
, 
buf
->
p
->
tŸ_Àn
);

398 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVMINUS
, 
buf
->
p
->
tŸ_Àn
);

403 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_ªcv:Ñe˚ived %∞”º %d)\n", (*)
buf
, 
c⁄n
->
îr
));

405  
buf
;

406 
	}
}

418 
îr_t


419 
	$√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

421 i‡(
buf
 !
NULL
) {

422 
buf
->
addr
 =áddr;

423 
buf
->
p‹t
 =Öort;

424  
	`√tc⁄n_£nd
(
c⁄n
, 
buf
);

426  
ERR_VAL
;

427 
	}
}

436 
îr_t


437 
	$√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
)

439 
≠i_msg
 
msg
;

441 
	`LWIP_ERROR
("√tc⁄n_£nd: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

443 
	`LWIP_DEBUGF
(
API_LIB_DEBUG
, ("√tc⁄n_£nd: sídög %d byãs\n", 
buf
->
p
->
tŸ_Àn
));

444 
msg
.
fun˘i⁄
 = 
do_£nd
;

445 
msg
.msg.
c⁄n
 = conn;

446 
msg
.msg.msg.
b
 = 
buf
;

447 
	`TCPIP_APIMSG
(&
msg
);

448  
c⁄n
->
îr
;

449 
	}
}

462 
îr_t


463 
	$√tc⁄n_wrôe
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size
, 
u8_t
 
≠iÊags
)

465 
≠i_msg
 
msg
;

467 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

468 
	`LWIP_ERROR
("√tc⁄n_wrôe: invÆid c⁄n->ty≥", (
c⁄n
->
ty≥
 =
NETCONN_TCP
),  
ERR_VAL
;);

470 
msg
.
fun˘i⁄
 = 
do_wrôe
;

471 
msg
.msg.
c⁄n
 = conn;

472 
msg
.msg.msg.
w
.
d©≠å
 = dataptr;

473 
msg
.msg.msg.
w
.
≠iÊags
 =ápiflags;

474 
msg
.msg.msg.
w
.
Àn
 = 
size
;

478 
	`TCPIP_APIMSG
(&
msg
);

479  
c⁄n
->
îr
;

480 
	}
}

488 
îr_t


489 
	$√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
)

491 
≠i_msg
 
msg
;

493 
	`LWIP_ERROR
("√tc⁄n_˛o£: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

495 
msg
.
fun˘i⁄
 = 
do_˛o£
;

496 
msg
.msg.
c⁄n
 = conn;

497 
	`t˝ù_≠imsg
(&
msg
);

498  
c⁄n
->
îr
;

499 
	}
}

501 #i‡
LWIP_IGMP


512 
îr_t


513 
	$√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
,

514 
ù_addr
 *
mu…üddr
,

515 
ù_addr
 *
öãrÁ˚
,

516 
√tc⁄n_igmp
 
joö_‹_Àave
)

518 
≠i_msg
 
msg
;

520 
	`LWIP_ERROR
("√tc⁄n_joö_Àave_group: invÆid c⁄n", (
c⁄n
 !
NULL
),  
ERR_ARG
;);

522 
msg
.
fun˘i⁄
 = 
do_joö_Àave_group
;

523 
msg
.msg.
c⁄n
 = conn;

524 
msg
.msg.msg.
jl
.
mu…üddr
 = multiaddr;

525 
msg
.msg.msg.
jl
.
öãrÁ˚
 = interface;

526 
msg
.msg.msg.
jl
.
joö_‹_Àave
 = join_or_leave;

527 
	`TCPIP_APIMSG
(&
msg
);

528  
c⁄n
->
îr
;

529 
	}
}

532 #i‡
LWIP_DNS


543 
îr_t


544 
	$√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
)

546 
dns_≠i_msg
 
msg
;

547 
îr_t
 
îr
;

548 
sys_£m_t
 
£m
;

550 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidÇame", (
«me
 !
NULL
),  
ERR_ARG
;);

551 
	`LWIP_ERROR
("√tc⁄n_gëho°by«me: invÆidáddr", (
addr
 !
NULL
),  
ERR_ARG
;);

553 
£m
 = 
	`sys_£m_√w
(0);

554 i‡(
£m
 =
SYS_SEM_NULL
) {

555  
ERR_MEM
;

558 
msg
.
«me
 =Çame;

559 
msg
.
addr
 =áddr;

560 
msg
.
îr
 = &err;

561 
msg
.
£m
 = sem;

563 
	`t˝ù_ˇŒback
(
do_gëho°by«me
, &
msg
);

564 
	`sys_£m_waô
(
£m
);

565 
	`sys_£m_‰ì
(
£m
);

567  
îr
;

568 
	}
}

	@net/lwip/api/api_msg.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/≠i_msg.h
"

45 
	~"lwù/ù.h
"

46 
	~"lwù/udp.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/øw.h
"

50 
	~"lwù/memp.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/igmp.h
"

53 
	~"lwù/dns.h
"

56 #i‡
LWIP_TCP


57 
îr_t
 
do_wrôem‹e
(
√tc⁄n
 *
c⁄n
);

58 
do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
);

61 #i‡
LWIP_RAW


69 
u8_t


70 
	$ªcv_øw
(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

71 
ù_addr
 *
addr
)

73 
pbuf
 *
q
;

74 
√tbuf
 *
buf
;

75 
√tc⁄n
 *
c⁄n
;

76 #i‡
LWIP_SO_RCVBUF


77 
ªcv_avaû
;

80 
	`LWIP_UNUSED_ARG
(
addr
);

81 
c⁄n
 = 
¨g
;

83 #i‡
LWIP_SO_RCVBUF


84 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

85 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
) &&

86 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë<
c⁄n
->
ªcv_bufsize
)) {

88 i‡((
c⁄n
 !
NULL
Ë&& (c⁄n->
ªcvmbox
 !
SYS_MBOX_NULL
)) {

91 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

92 if(
q
 !
NULL
) {

93 i‡(
	`pbuf_c›y
(
q
, 
p
Ë!
ERR_OK
) {

94 
	`pbuf_‰ì
(
q
);

95 
q
 = 
NULL
;

99 if(
q
 !
NULL
) {

100 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

101 i‡(
buf
 =
NULL
) {

102 
	`pbuf_‰ì
(
q
);

106 
buf
->
p
 = 
q
;

107 
buf
->
±r
 = 
q
;

108 
buf
->
addr
 = &(((
ù_hdr
*)(
q
->
∑ylﬂd
))->
§c
);

109 
buf
->
p‹t
 = 
pcb
->
¥Ÿocﬁ
;

111 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
q
->
tŸ_Àn
);

113 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
q
->
tŸ_Àn
);

114 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

115 
	`√tbuf_dñëe
(
buf
);

121 
	}
}

124 #i‡
LWIP_UDP


132 
	$ªcv_udp
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

133 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

135 
√tbuf
 *
buf
;

136 
√tc⁄n
 *
c⁄n
;

137 #i‡
LWIP_SO_RCVBUF


138 
ªcv_avaû
;

141 
	`LWIP_UNUSED_ARG
(
pcb
);

142 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê®pcbárgumít", 
pcb
 !
NULL
);

143 
	`LWIP_ASSERT
("ªcv_ud∞mu° havê™árgumít", 
¨g
 !
NULL
);

144 
c⁄n
 = 
¨g
;

145 
	`LWIP_ASSERT
("ªcv_udp:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
udp
 ==Öcb);

147 #i‡
LWIP_SO_RCVBUF


148 
	`SYS_ARCH_GET
(
c⁄n
->
ªcv_avaû
,Ñecv_avail);

149 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
) ||

150 ((
ªcv_avaû
 + ()(
p
->
tŸ_Àn
)Ë> 
c⁄n
->
ªcv_bufsize
)) {

152 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

154 
	`pbuf_‰ì
(
p
);

158 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

159 i‡(
buf
 =
NULL
) {

160 
	`pbuf_‰ì
(
p
);

163 
buf
->
p
 =Ö;

164 
buf
->
±r
 = 
p
;

165 
buf
->
addr
 =áddr;

166 
buf
->
p‹t
 =Öort;

169 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
p
->
tŸ_Àn
);

171 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
p
->
tŸ_Àn
);

172 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
buf
Ë!
ERR_OK
) {

173 
	`√tbuf_dñëe
(
buf
);

176 
	}
}

179 #i‡
LWIP_TCP


186 
îr_t


187 
	$ªcv_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

189 
√tc⁄n
 *
c⁄n
;

190 
u16_t
 
Àn
;

192 
	`LWIP_UNUSED_ARG
(
pcb
);

193 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê®pcbárgumít", 
pcb
 !
NULL
);

194 
	`LWIP_ASSERT
("ªcv_t˝ mu° havê™árgumít", 
¨g
 !
NULL
);

195 
c⁄n
 = 
¨g
;

196 
	`LWIP_ASSERT
("ªcv_t˝:Ñecv f‹ wr⁄gÖcb!", 
c⁄n
->
pcb
.
t˝
 ==Öcb);

198 i‡((
c⁄n
 =
NULL
Ë|| (c⁄n->
ªcvmbox
 =
SYS_MBOX_NULL
)) {

199  
ERR_VAL
;

202 
c⁄n
->
îr
 =Érr;

203 i‡(
p
 !
NULL
) {

204 
Àn
 = 
p
->
tŸ_Àn
;

205 
	`SYS_ARCH_INC
(
c⁄n
->
ªcv_avaû
, 
Àn
);

207 
Àn
 = 0;

210 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 
Àn
);

211 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ªcvmbox
, 
p
Ë!
ERR_OK
) {

212  
ERR_MEM
;

215  
ERR_OK
;

216 
	}
}

229 
îr_t


230 
	$pﬁl_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
)

232 
√tc⁄n
 *
c⁄n
 = 
¨g
;

234 
	`LWIP_UNUSED_ARG
(
pcb
);

235 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

237 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

238 
	`do_wrôem‹e
(
c⁄n
);

239 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

240 
	`do_˛o£_öã∫Æ
(
c⁄n
);

243  
ERR_OK
;

244 
	}
}

253 
îr_t


254 
	$£¡_t˝
(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

256 
√tc⁄n
 *
c⁄n
 = 
¨g
;

258 
	`LWIP_UNUSED_ARG
(
pcb
);

259 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

261 i‡(
c⁄n
->
°©e
 =
NETCONN_WRITE
) {

262 
	`LWIP_ASSERT
("c⁄n->pcb.t˝ !NULL", 
c⁄n
->
pcb
.
t˝
 !
NULL
);

263 
	`do_wrôem‹e
(
c⁄n
);

264 } i‡(
c⁄n
->
°©e
 =
NETCONN_CLOSE
) {

265 
	`do_˛o£_öã∫Æ
(
c⁄n
);

268 i‡(
c⁄n
) {

269 i‡((
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (
	`t˝_¢dbuf
(c⁄n->pcb.t˝Ë> 
TCP_SNDLOWAT
)) {

270 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 
Àn
);

274  
ERR_OK
;

275 
	}
}

285 
	$îr_t˝
(*
¨g
, 
îr_t
 
îr
)

287 
√tc⁄n
 *
c⁄n
;

289 
c⁄n
 = 
¨g
;

290 
	`LWIP_ASSERT
("c⁄¿!NULL", (
c⁄n
 !
NULL
));

292 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

294 
c⁄n
->
îr
 =Érr;

295 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

297 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

298 
	`sys_mbox_po°
(
c⁄n
->
ªcvmbox
, 
NULL
);

300 i‡(
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
 && c⁄n->
°©e
 =
NETCONN_CONNECT
) {

301 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

302 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

304 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

306 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

307 
	`sys_mbox_po°
(
c⁄n
->
ac˚±mbox
, 
NULL
);

309 i‡((
c⁄n
->
°©e
 =
NETCONN_WRITE
Ë|| (c⁄n->°©ê=
NETCONN_CLOSE
)) {

312 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

314 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

316 
	}
}

325 
	$£tup_t˝
(
√tc⁄n
 *
c⁄n
)

327 
t˝_pcb
 *
pcb
;

329 
pcb
 = 
c⁄n
->pcb.
t˝
;

330 
	`t˝_¨g
(
pcb
, 
c⁄n
);

331 
	`t˝_ªcv
(
pcb
, 
ªcv_t˝
);

332 
	`t˝_£¡
(
pcb
, 
£¡_t˝
);

333 
	`t˝_pﬁl
(
pcb
, 
pﬁl_t˝
, 4);

334 
	`t˝_îr
(
pcb
, 
îr_t˝
);

335 
	}
}

343 
îr_t


344 
	$ac˚±_fun˘i⁄
(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
)

346 
√tc⁄n
 *
√wc⁄n
;

347 
√tc⁄n
 *
c⁄n
;

349 #i‡
API_MSG_DEBUG


350 #i‡
TCP_DEBUG


351 
	`t˝_debug_¥öt_°©e
(
√wpcb
->
°©e
);

354 
c⁄n
 = (
√tc⁄n
 *)
¨g
;

356 
	`LWIP_ERROR
("accept_function: invalid conn->acceptmbox",

357 
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
,  
ERR_VAL
;);

361 
√wc⁄n
 = 
	`√tc⁄n_Æloc
(
c⁄n
->
ty≥
, c⁄n->
ˇŒback
);

362 i‡(
√wc⁄n
 =
NULL
) {

363  
ERR_MEM
;

365 
√wc⁄n
->
pcb
.
t˝
 = 
√wpcb
;

366 
	`£tup_t˝
(
√wc⁄n
);

367 
√wc⁄n
->
îr
 =Érr;

369 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

371 i‡(
	`sys_mbox_åypo°
(
c⁄n
->
ac˚±mbox
, 
√wc⁄n
Ë!
ERR_OK
) {

374 
√wc⁄n
->
pcb
.
t˝
 = 
NULL
;

375 
	`√tc⁄n_‰ì
(
√wc⁄n
);

376  
ERR_MEM
;

378  
ERR_OK
;

379 
	}
}

389 
îr_t


390 
	$pcb_√w
(
≠i_msg_msg
 *
msg
)

392 
msg
->
c⁄n
->
îr
 = 
ERR_OK
;

394 
	`LWIP_ASSERT
("pcb_√w:ÖcbáÃódyáŒoˇãd", 
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
);

397 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

398 #i‡
LWIP_RAW


399 
NETCONN_RAW
:

400 
msg
->
c⁄n
->
pcb
.
øw
 = 
	`øw_√w
(msg->msg.
n
.
¥Ÿo
);

401 if(
msg
->
c⁄n
->
pcb
.
øw
 =
NULL
) {

402 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

405 
	`øw_ªcv
(
msg
->
c⁄n
->
pcb
.
øw
, 
ªcv_øw
, msg->conn);

408 #i‡
LWIP_UDP


409 
NETCONN_UDP
:

410 
msg
->
c⁄n
->
pcb
.
udp
 = 
	`udp_√w
();

411 if(
msg
->
c⁄n
->
pcb
.
udp
 =
NULL
) {

412 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

415 #i‡
LWIP_UDPLITE


416 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPLITE
) {

417 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_UDPLITE
);

420 i‡(
msg
->
c⁄n
->
ty≥
==
NETCONN_UDPNOCHKSUM
) {

421 
	`udp_£tÊags
(
msg
->
c⁄n
->
pcb
.
udp
, 
UDP_FLAGS_NOCHKSUM
);

423 
	`udp_ªcv
(
msg
->
c⁄n
->
pcb
.
udp
, 
ªcv_udp
, msg->conn);

426 #i‡
LWIP_TCP


427 
NETCONN_TCP
:

428 
msg
->
c⁄n
->
pcb
.
t˝
 = 
	`t˝_√w
();

429 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

430 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

433 
	`£tup_t˝
(
msg
->
c⁄n
);

438 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

442  
msg
->
c⁄n
->
îr
;

443 
	}
}

452 
	$do_√wc⁄n
(
≠i_msg_msg
 *
msg
)

454 if(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

455 
	`pcb_√w
(
msg
);

461 
	`TCPIP_APIMSG_ACK
(
msg
);

462 
	}
}

474 
√tc⁄n
*

475 
	$√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
)

477 
√tc⁄n
 *
c⁄n
;

478 
size
;

480 
c⁄n
 = 
	`memp_mÆloc
(
MEMP_NETCONN
);

481 i‡(
c⁄n
 =
NULL
) {

482  
NULL
;

485 
c⁄n
->
îr
 = 
ERR_OK
;

486 
c⁄n
->
ty≥
 = 
t
;

487 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

489 #i‡(
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_UDP_RECVMBOX_SIZE
) && \

490 (
DEFAULT_RAW_RECVMBOX_SIZE
 =
DEFAULT_TCP_RECVMBOX_SIZE
)

491 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

493 
	`NETCONNTYPE_GROUP
(
t
)) {

494 #i‡
LWIP_RAW


495 
NETCONN_RAW
:

496 
size
 = 
DEFAULT_RAW_RECVMBOX_SIZE
;

499 #i‡
LWIP_UDP


500 
NETCONN_UDP
:

501 
size
 = 
DEFAULT_UDP_RECVMBOX_SIZE
;

504 #i‡
LWIP_TCP


505 
NETCONN_TCP
:

506 
size
 = 
DEFAULT_TCP_RECVMBOX_SIZE
;

510 
	`LWIP_ASSERT
("netconn_alloc: undefinedÇetconn_type", 0);

515 i‡((
c⁄n
->
›_com∂ëed
 = 
	`sys_£m_√w
(0)Ë=
SYS_SEM_NULL
) {

516 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

517  
NULL
;

519 i‡((
c⁄n
->
ªcvmbox
 = 
	`sys_mbox_√w
(
size
)Ë=
SYS_MBOX_NULL
) {

520 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

521 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

522  
NULL
;

525 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

526 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

528 
c⁄n
->
sockë
 = -1;

529 
c⁄n
->
ˇŒback
 = callback;

530 
c⁄n
->
ªcv_avaû
 = 0;

531 #i‡
LWIP_SO_RCVTIMEO


532 
c⁄n
->
ªcv_timeout
 = 0;

534 #i‡
LWIP_SO_RCVBUF


535 
c⁄n
->
ªcv_bufsize
 = 
INT_MAX
;

537  
c⁄n
;

538 
	}
}

547 
	$√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
)

549 *
mem
;

550 
	`LWIP_ASSERT
("PCB mu° bêdóŒoˇãd outsidêthi†fun˘i⁄", 
c⁄n
->
pcb
.
t˝
 =
NULL
);

553 i‡(
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

554 
	`sys_mbox_åy„tch
(
c⁄n
->
ªcvmbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

555 i‡(
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

556 if(
mem
 !
NULL
) {

557 
	`pbuf_‰ì
((
pbuf
 *)
mem
);

560 
	`√tbuf_dñëe
((
√tbuf
 *)
mem
);

563 
	`sys_mbox_‰ì
(
c⁄n
->
ªcvmbox
);

564 
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

568 i‡(
c⁄n
->
ac˚±mbox
 !
SYS_MBOX_NULL
) {

569 
	`sys_mbox_åy„tch
(
c⁄n
->
ac˚±mbox
, &
mem
Ë!
SYS_MBOX_EMPTY
) {

570 
	`√tc⁄n_dñëe
((
√tc⁄n
 *)
mem
);

572 
	`sys_mbox_‰ì
(
c⁄n
->
ac˚±mbox
);

573 
c⁄n
->
ac˚±mbox
 = 
SYS_MBOX_NULL
;

576 
	`sys_£m_‰ì
(
c⁄n
->
›_com∂ëed
);

577 
c⁄n
->
›_com∂ëed
 = 
SYS_SEM_NULL
;

579 
	`memp_‰ì
(
MEMP_NETCONN
, 
c⁄n
);

580 
	}
}

582 #i‡
LWIP_TCP


591 
	$do_˛o£_öã∫Æ
(
√tc⁄n
 *
c⁄n
)

593 
îr_t
 
îr
;

595 
	`LWIP_ASSERT
("övÆid c⁄n", (
c⁄n
 !
NULL
));

596 
	`LWIP_ASSERT
("thi†i†f‹Å˝Çëc⁄n†⁄ly", (
c⁄n
->
ty≥
 =
NETCONN_TCP
));

597 
	`LWIP_ASSERT
("c⁄¿mu° bêö sèã NETCONN_CLOSE", (
c⁄n
->
°©e
 =
NETCONN_CLOSE
));

598 
	`LWIP_ASSERT
("pcbáÃódy clo£d", (
c⁄n
->
pcb
.
t˝
 !
NULL
));

601 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

602 i‡(
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

603 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

605 
	`t˝_ªcv
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

606 
	`t˝_ac˚±
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

608 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

609 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
NULL
, 4);

610 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
NULL
);

613 
îr
 = 
	`t˝_˛o£
(
c⁄n
->
pcb
.
t˝
);

614 i‡(
îr
 =
ERR_OK
) {

616 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

618 
c⁄n
->
pcb
.
t˝
 = 
NULL
;

619 
c⁄n
->
îr
 = 
ERR_OK
;

622 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

623 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

625 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

629 
	`LWIP_ASSERT
("ClosögáÜi°íÖcb mayÇŸ faû!", (
c⁄n
->
pcb
.
t˝
->
°©e
 !
LISTEN
));

630 
	`t˝_£¡
(
c⁄n
->
pcb
.
t˝
, 
£¡_t˝
);

631 
	`t˝_pﬁl
(
c⁄n
->
pcb
.
t˝
, 
pﬁl_t˝
, 4);

632 
	`t˝_îr
(
c⁄n
->
pcb
.
t˝
, 
îr_t˝
);

633 
	`t˝_¨g
(
c⁄n
->
pcb
.
t˝
, conn);

637 
	}
}

647 
	$do_dñc⁄n
(
≠i_msg_msg
 *
msg
)

649 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

650 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

651 #i‡
LWIP_RAW


652 
NETCONN_RAW
:

653 
	`øw_ªmove
(
msg
->
c⁄n
->
pcb
.
øw
);

656 #i‡
LWIP_UDP


657 
NETCONN_UDP
:

658 
msg
->
c⁄n
->
pcb
.
udp
->
ªcv_¨g
 = 
NULL
;

659 
	`udp_ªmove
(
msg
->
c⁄n
->
pcb
.
udp
);

662 #i‡
LWIP_TCP


663 
NETCONN_TCP
:

664 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

665 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

678 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_RCVPLUS
, 0);

679 
	`API_EVENT
(
msg
->
c⁄n
, 
NETCONN_EVT_SENDPLUS
, 0);

681 i‡(
msg
->
c⁄n
->
›_com∂ëed
 !
SYS_SEM_NULL
) {

682 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

684 
	}
}

694 
	$do_böd
(
≠i_msg_msg
 *
msg
)

696 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

697 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

698 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

699 #i‡
LWIP_RAW


700 
NETCONN_RAW
:

701 
msg
->
c⁄n
->
îr
 = 
	`øw_böd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

704 #i‡
LWIP_UDP


705 
NETCONN_UDP
:

706 
msg
->
c⁄n
->
îr
 = 
	`udp_böd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

709 #i‡
LWIP_TCP


710 
NETCONN_TCP
:

711 
msg
->
c⁄n
->
îr
 = 
	`t˝_böd
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

719 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

722 
	`TCPIP_APIMSG_ACK
(
msg
);

723 
	}
}

725 #i‡
LWIP_TCP


732 
îr_t


733 
	$do_c⁄√˘ed
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

735 
√tc⁄n
 *
c⁄n
;

737 
	`LWIP_UNUSED_ARG
(
pcb
);

739 
c⁄n
 = 
¨g
;

741 i‡(
c⁄n
 =
NULL
) {

742  
ERR_VAL
;

745 
c⁄n
->
îr
 =Érr;

746 i‡((
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
îr
 =
ERR_OK
)) {

747 
	`£tup_t˝
(
c⁄n
);

749 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

750 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

751  
ERR_OK
;

752 
	}
}

763 
	$do_c⁄√˘
(
≠i_msg_msg
 *
msg
)

765 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 =
NULL
) {

766 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

770 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

771 #i‡
LWIP_RAW


772 
NETCONN_RAW
:

773 
msg
->
c⁄n
->
îr
 = 
	`øw_c⁄√˘
(msg->c⁄n->
pcb
.
øw
, msg->msg.
bc
.
ùaddr
);

774 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

777 #i‡
LWIP_UDP


778 
NETCONN_UDP
:

779 
msg
->
c⁄n
->
îr
 = 
	`udp_c⁄√˘
(msg->c⁄n->
pcb
.
udp
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
);

780 
	`sys_£m_sig«l
(
msg
->
c⁄n
->
›_com∂ëed
);

783 #i‡
LWIP_TCP


784 
NETCONN_TCP
:

785 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CONNECT
;

786 
	`£tup_t˝
(
msg
->
c⁄n
);

787 
msg
->
c⁄n
->
îr
 = 
	`t˝_c⁄√˘
(msg->c⁄n->
pcb
.
t˝
, msg->msg.
bc
.
ùaddr
, msg->msg.bc.
p‹t
,

788 
do_c⁄√˘ed
);

796 
	}
}

806 
	$do_disc⁄√˘
(
≠i_msg_msg
 *
msg
)

808 #i‡
LWIP_UDP


809 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

810 
	`udp_disc⁄√˘
(
msg
->
c⁄n
->
pcb
.
udp
);

813 
	`TCPIP_APIMSG_ACK
(
msg
);

814 
	}
}

823 
	$do_li°í
(
≠i_msg_msg
 *
msg
)

825 #i‡
LWIP_TCP


826 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

827 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

828 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

829 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
CLOSED
) {

830 #i‡
TCP_LISTEN_BACKLOG


831 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í_wôh_backlog
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
lb
.
backlog
);

833 
t˝_pcb
* 
Õcb
 = 
	`t˝_li°í
(
msg
->
c⁄n
->
pcb
.
t˝
);

835 i‡(
Õcb
 =
NULL
) {

836 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

839 i‡(
msg
->
c⁄n
->
ªcvmbox
 !
SYS_MBOX_NULL
) {

841 
	`sys_mbox_‰ì
(
msg
->
c⁄n
->
ªcvmbox
);

842 
msg
->
c⁄n
->
ªcvmbox
 = 
SYS_MBOX_NULL
;

844 i‡(
msg
->
c⁄n
->
ac˚±mbox
 =
SYS_MBOX_NULL
) {

845 i‡((
msg
->
c⁄n
->
ac˚±mbox
 = 
	`sys_mbox_√w
(
DEFAULT_ACCEPTMBOX_SIZE
)Ë=
SYS_MBOX_NULL
) {

846 
msg
->
c⁄n
->
îr
 = 
ERR_MEM
;

849 i‡(
msg
->
c⁄n
->
îr
 =
ERR_OK
) {

850 
msg
->
c⁄n
->
°©e
 = 
NETCONN_LISTEN
;

851 
msg
->
c⁄n
->
pcb
.
t˝
 = 
Õcb
;

852 
	`t˝_¨g
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->conn);

853 
	`t˝_ac˚±
(
msg
->
c⁄n
->
pcb
.
t˝
, 
ac˚±_fun˘i⁄
);

857 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

863 
	`TCPIP_APIMSG_ACK
(
msg
);

864 
	}
}

873 
	$do_£nd
(
≠i_msg_msg
 *
msg
)

875 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

876 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

877 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

878 #i‡
LWIP_RAW


879 
NETCONN_RAW
:

880 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

881 
msg
->
c⁄n
->
îr
 = 
	`øw_£nd
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
);

883 
msg
->
c⁄n
->
îr
 = 
	`øw_£ndto
(msg->c⁄n->
pcb
.
øw
, msg->msg.
b
->
p
, msg->msg.b->
addr
);

887 #i‡
LWIP_UDP


888 
NETCONN_UDP
:

889 i‡(
msg
->msg.
b
->
addr
 =
NULL
) {

890 
msg
->
c⁄n
->
îr
 = 
	`udp_£nd
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
);

892 
msg
->
c⁄n
->
îr
 = 
	`udp_£ndto
(msg->c⁄n->
pcb
.
udp
, msg->msg.
b
->
p
, msg->msg.b->
addr
, msg->msg.b->
p‹t
);

901 
	`TCPIP_APIMSG_ACK
(
msg
);

902 
	}
}

911 
	$do_ªcv
(
≠i_msg_msg
 *
msg
)

913 #i‡
LWIP_TCP


914 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

915 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

916 i‡(
msg
->
c⁄n
->
ty≥
 =
NETCONN_TCP
) {

917 #i‡
TCP_LISTEN_BACKLOG


918 i‡(
msg
->
c⁄n
->
pcb
.
t˝
->
°©e
 =
LISTEN
) {

919 
	`t˝_ac˚±ed
(
msg
->
c⁄n
->
pcb
.
t˝
);

923 
	`t˝_ªcved
(
msg
->
c⁄n
->
pcb
.
t˝
, msg->msg.
r
.
Àn
);

929 
	`TCPIP_APIMSG_ACK
(
msg
);

930 
	}
}

932 #i‡
LWIP_TCP


944 
îr_t


945 
	$do_wrôem‹e
(
√tc⁄n
 *
c⁄n
)

947 
îr_t
 
îr
;

948 *
d©≠å
;

949 
u16_t
 
Àn
, 
avaûabÀ
;

950 
u8_t
 
wrôe_föished
 = 0;

952 
	`LWIP_ASSERT
("c⁄n->°©ê=NETCONN_WRITE", (
c⁄n
->
°©e
 =
NETCONN_WRITE
));

954 
d©≠å
 = (
u8_t
*)
c⁄n
->
wrôe_msg
->
msg
.
w
.d©≠å + c⁄n->
wrôe_off£t
;

955 i‡((
c⁄n
->
wrôe_msg
->
msg
.
w
.
Àn
 - c⁄n->
wrôe_off£t
 > 0xffff)) {

956 
Àn
 = 0xffff;

957 #i‡
LWIP_TCPIP_CORE_LOCKING


958 
c⁄n
->
wrôe_dñayed
 = 1;

961 
Àn
 = 
c⁄n
->
wrôe_msg
->
msg
.
w
.À¿- c⁄n->
wrôe_off£t
;

963 
avaûabÀ
 = 
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
);

964 i‡(
avaûabÀ
 < 
Àn
) {

966 
Àn
 = 
avaûabÀ
;

967 #i‡
LWIP_TCPIP_CORE_LOCKING


968 
c⁄n
->
wrôe_dñayed
 = 1;

972 
îr
 = 
	`t˝_wrôe
(
c⁄n
->
pcb
.
t˝
, 
d©≠å
, 
Àn
, c⁄n->
wrôe_msg
->
msg
.
w
.
≠iÊags
);

973 
	`LWIP_ASSERT
("do_wrôem‹e: invÆidÜígth!", ((
c⁄n
->
wrôe_off£t
 + 
Àn
Ë<c⁄n->
wrôe_msg
->
msg
.
w
.len));

974 i‡(
îr
 =
ERR_OK
) {

975 
c⁄n
->
wrôe_off£t
 +
Àn
;

976 i‡(
c⁄n
->
wrôe_off£t
 =c⁄n->
wrôe_msg
->
msg
.
w
.
Àn
) {

978 
wrôe_föished
 = 1;

979 
c⁄n
->
wrôe_msg
 = 
NULL
;

980 
c⁄n
->
wrôe_off£t
 = 0;

982 
îr
 = 
	`t˝_ouçut_«gÀ
(
c⁄n
->
pcb
.
t˝
);

983 
c⁄n
->
îr
 =Érr;

984 i‡((
îr
 =
ERR_OK
Ë&& (
	`t˝_¢dbuf
(
c⁄n
->
pcb
.
t˝
Ë<
TCP_SNDLOWAT
)) {

985 
	`API_EVENT
(
c⁄n
, 
NETCONN_EVT_SENDMINUS
, 
Àn
);

987 } i‡(
îr
 =
ERR_MEM
) {

993 
îr
 = 
	`t˝_ouçut
(
c⁄n
->
pcb
.
t˝
);

995 #i‡
LWIP_TCPIP_CORE_LOCKING


996 
c⁄n
->
wrôe_dñayed
 = 1;

1001 
c⁄n
->
îr
 =Érr;

1002 
wrôe_föished
 = 1;

1005 i‡(
wrôe_föished
) {

1008 
c⁄n
->
°©e
 = 
NETCONN_NONE
;

1009 #i‡
LWIP_TCPIP_CORE_LOCKING


1010 i‡(
c⁄n
->
wrôe_dñayed
 != 0)

1013 
	`sys_£m_sig«l
(
c⁄n
->
›_com∂ëed
);

1016 #i‡
LWIP_TCPIP_CORE_LOCKING


1018  
ERR_MEM
;

1020  
ERR_OK
;

1021 
	}
}

1031 
	$do_wrôe
(
≠i_msg_msg
 *
msg
)

1033 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1034 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1035 #i‡
LWIP_TCP


1036 
msg
->
c⁄n
->
°©e
 = 
NETCONN_WRITE
;

1038 
msg
->
c⁄n
->
wrôe_msg
 = msg;

1039 
msg
->
c⁄n
->
wrôe_off£t
 = 0;

1040 #i‡
LWIP_TCPIP_CORE_LOCKING


1041 
msg
->
c⁄n
->
wrôe_dñayed
 = 0;

1042 i‡(
	`do_wrôem‹e
(
msg
->
c⁄n
Ë!
ERR_OK
) {

1043 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_WRITE
);

1044 
	`UNLOCK_TCPIP_CORE
();

1045 
	`sys_¨ch_£m_waô
(
msg
->
c⁄n
->
›_com∂ëed
, 0);

1046 
	`LOCK_TCPIP_CORE
();

1047 
	`LWIP_ASSERT
("°©e!", 
msg
->
c⁄n
->
°©e
 =
NETCONN_NONE
);

1050 
	`do_wrôem‹e
(
msg
->
c⁄n
);

1055 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

1057 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1061 
	`TCPIP_APIMSG_ACK
(
msg
);

1062 
	}
}

1071 
	$do_gëaddr
(
≠i_msg_msg
 *
msg
)

1073 i‡(
msg
->
c⁄n
->
pcb
.
ù
 !
NULL
) {

1074 *(
msg
->msg.
ad
.
ùaddr
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
ù
->
loˇl_ù
:msg->c⁄n->pcb.ù->
ªmŸe_ù
);

1076 
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
)) {

1077 #i‡
LWIP_RAW


1078 
NETCONN_RAW
:

1079 i‡(
msg
->msg.
ad
.
loˇl
) {

1080 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
øw
->
¥Ÿocﬁ
;

1083 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1087 #i‡
LWIP_UDP


1088 
NETCONN_UDP
:

1089 i‡(
msg
->msg.
ad
.
loˇl
) {

1090 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
loˇl_p‹t
;

1092 i‡((
msg
->
c⁄n
->
pcb
.
udp
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0) {

1093 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1095 *(
msg
->msg.
ad
.
p‹t
Ëmsg->
c⁄n
->
pcb
.
udp
->
ªmŸe_p‹t
;

1100 #i‡
LWIP_TCP


1101 
NETCONN_TCP
:

1102 *(
msg
->msg.
ad
.
p‹t
Ë(msg->msg.ad.
loˇl
?msg->
c⁄n
->
pcb
.
t˝
->
loˇl_p‹t
:msg->c⁄n->pcb.t˝->
ªmŸe_p‹t
);

1107 
msg
->
c⁄n
->
îr
 = 
ERR_CONN
;

1109 
	`TCPIP_APIMSG_ACK
(
msg
);

1110 
	}
}

1119 
	$do_˛o£
(
≠i_msg_msg
 *
msg
)

1121 #i‡
LWIP_TCP


1122 i‡((
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
Ë&& (msg->c⁄n->
ty≥
 =
NETCONN_TCP
)) {

1123 
msg
->
c⁄n
->
°©e
 = 
NETCONN_CLOSE
;

1124 
	`do_˛o£_öã∫Æ
(
msg
->
c⁄n
);

1129 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1130 
	`TCPIP_APIMSG_ACK
(
msg
);

1132 
	}
}

1134 #i‡
LWIP_IGMP


1142 
	$do_joö_Àave_group
(
≠i_msg_msg
 *
msg
)

1144 i‡(!
	`ERR_IS_FATAL
(
msg
->
c⁄n
->
îr
)) {

1145 i‡(
msg
->
c⁄n
->
pcb
.
t˝
 !
NULL
) {

1146 i‡(
	`NETCONNTYPE_GROUP
(
msg
->
c⁄n
->
ty≥
Ë=
NETCONN_UDP
) {

1147 #i‡
LWIP_UDP


1148 i‡(
msg
->msg.
jl
.
joö_‹_Àave
 =
NETCONN_JOIN
) {

1149 
msg
->
c⁄n
->
îr
 = 
	`igmp_joögroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1151 
msg
->
c⁄n
->
îr
 = 
	`igmp_Àavegroup
(msg->msg.
jl
.
öãrÁ˚
, msg->msg.jl.
mu…üddr
);

1154 #i‡(
LWIP_TCP
 || 
LWIP_RAW
)

1156 
msg
->
c⁄n
->
îr
 = 
ERR_VAL
;

1161 
	`TCPIP_APIMSG_ACK
(
msg
);

1162 
	}
}

1165 #i‡
LWIP_DNS


1172 
	$do_dns_found
(c⁄° *
«me
, 
ù_addr
 *
ùaddr
, *
¨g
)

1174 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1176 
	`LWIP_ASSERT
("DNSÑe•⁄£ f‹ wr⁄g ho°Çame", 
	`°rcmp
(
msg
->
«me
,Çame) == 0);

1178 i‡(
ùaddr
 =
NULL
) {

1180 *
msg
->
îr
 = 
ERR_VAL
;

1183 *
msg
->
îr
 = 
ERR_OK
;

1184 *
msg
->
addr
 = *
ùaddr
;

1187 
	`sys_£m_sig«l
(
msg
->
£m
);

1188 
	}
}

1197 
	$do_gëho°by«me
(*
¨g
)

1199 
dns_≠i_msg
 *
msg
 = (dns_≠i_msg*)
¨g
;

1201 *
msg
->
îr
 = 
	`dns_gëho°by«me
(msg->
«me
, msg->
addr
, 
do_dns_found
, msg);

1202 i‡(*
msg
->
îr
 !
ERR_INPROGRESS
) {

1205 
	`sys_£m_sig«l
(
msg
->
£m
);

1207 
	}
}

	@net/lwip/api/err.c

39 
	~"lwù/îr.h
"

41 #ifde‡
LWIP_DEBUG


43 c⁄° *
	gîr_°ªº
[] = {

68 
	$lwù_°ªº
(
îr_t
 
îr
)

70  
îr_°ªº
[-
îr
];

72 
	}
}

	@net/lwip/api/netbuf.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_NETCONN


43 
	~"lwù/√tbuf.h
"

44 
	~"lwù/memp.h
"

46 
	~<°rög.h
>

56 
√tbuf
 *
	$√tbuf_√w
()

58 
√tbuf
 *
buf
;

60 
buf
 = 
	`memp_mÆloc
(
MEMP_NETBUF
);

61 i‡(
buf
 !
NULL
) {

62 
buf
->
p
 = 
NULL
;

63 
buf
->
±r
 = 
NULL
;

64 
buf
->
addr
 = 
NULL
;

65  
buf
;

67  
NULL
;

69 
	}
}

77 
	$√tbuf_dñëe
(
√tbuf
 *
buf
)

79 i‡(
buf
 !
NULL
) {

80 i‡(
buf
->
p
 !
NULL
) {

81 
	`pbuf_‰ì
(
buf
->
p
);

82 
buf
->
p
 = buf->
±r
 = 
NULL
;

84 
	`memp_‰ì
(
MEMP_NETBUF
, 
buf
);

86 
	}
}

97 
	$√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
)

99 
	`LWIP_ERROR
("√tbuf_Æloc: invÆid buf", (
buf
 !
NULL
),  NULL;);

102 i‡(
buf
->
p
 !
NULL
) {

103 
	`pbuf_‰ì
(
buf
->
p
);

105 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
size
, 
PBUF_RAM
);

106 i‡(
buf
->
p
 =
NULL
) {

107  
NULL
;

109 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold size",

110 (
buf
->
p
->
Àn
 >
size
));

111 
buf
->
±r
 = buf->
p
;

112  
buf
->
p
->
∑ylﬂd
;

113 
	}
}

121 
	$√tbuf_‰ì
(
√tbuf
 *
buf
)

123 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

124 i‡(
buf
->
p
 !
NULL
) {

125 
	`pbuf_‰ì
(
buf
->
p
);

127 
buf
->
p
 = buf->
±r
 = 
NULL
;

128 
	}
}

139 
îr_t


140 
	$√tbuf_ªf
(
√tbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
size
)

142 
	`LWIP_ERROR
("√tbuf_ªf: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

143 i‡(
buf
->
p
 !
NULL
) {

144 
	`pbuf_‰ì
(
buf
->
p
);

146 
buf
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

147 i‡(
buf
->
p
 =
NULL
) {

148 
buf
->
±r
 = 
NULL
;

149  
ERR_MEM
;

151 
buf
->
p
->
∑ylﬂd
 = (*)
d©≠å
;

152 
buf
->
p
->
Àn
 = buf->p->
tŸ_Àn
 = 
size
;

153 
buf
->
±r
 = buf->
p
;

154  
ERR_OK
;

155 
	}
}

164 
	$√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
)

166 
	`LWIP_ERROR
("√tbuf_ªf: invÆid hód", (
hód
 !
NULL
), ;);

167 
	`LWIP_ERROR
("√tbuf_chaö: invÆidÅaû", (
èû
 !
NULL
), ;);

168 
	`pbuf_chaö
(
hód
->
p
, 
èû
->p);

169 
hód
->
±r
 = hód->
p
;

170 
	`memp_‰ì
(
MEMP_NETBUF
, 
èû
);

171 
	}
}

182 
îr_t


183 
	$√tbuf_d©a
(
√tbuf
 *
buf
, **
d©≠å
, 
u16_t
 *
Àn
)

185 
	`LWIP_ERROR
("√tbuf_d©a: invÆid buf", (
buf
 !
NULL
),  
ERR_ARG
;);

186 
	`LWIP_ERROR
("√tbuf_d©a: invÆid d©≠å", (
d©≠å
 !
NULL
),  
ERR_ARG
;);

187 
	`LWIP_ERROR
("√tbuf_d©a: invÆidÜí", (
Àn
 !
NULL
),  
ERR_ARG
;);

189 i‡(
buf
->
±r
 =
NULL
) {

190  
ERR_BUF
;

192 *
d©≠å
 = 
buf
->
±r
->
∑ylﬂd
;

193 *
Àn
 = 
buf
->
±r
->len;

194  
ERR_OK
;

195 
	}
}

207 
s8_t


208 
	$√tbuf_√xt
(
√tbuf
 *
buf
)

210 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
),  -1;);

211 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

214 
buf
->
±r
 = buf->±r->
√xt
;

215 i‡(
buf
->
±r
->
√xt
 =
NULL
) {

219 
	}
}

229 
	$√tbuf_fú°
(
√tbuf
 *
buf
)

231 
	`LWIP_ERROR
("√tbuf_‰ì: invÆid buf", (
buf
 !
NULL
), ;);

232 
buf
->
±r
 = buf->
p
;

233 
	}
}

	@net/lwip/api/netdb.c

36 
	~"lwù/√tdb.h
"

38 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


40 
	~"lwù/îr.h
"

41 
	~"lwù/mem.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/≠i.h
"

46 
	sgëho°by«me_r_hñ≥r
 {

47 
ù_addr
 *
	maddrs
;

48 
ù_addr
 
	maddr
;

49 *
	mÆü£s
;

53 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


54 
	gh_î∫o
;

59 #i‚de‡
LWIP_DNS_API_HOSTENT_STORAGE


60 
	#LWIP_DNS_API_HOSTENT_STORAGE
 0

	)

64 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


65 
	#HOSTENT_STORAGE


	)

67 
	#HOSTENT_STORAGE
 

	)

79 
ho°ít
*

80 
	$lwù_gëho°by«me
(c⁄° *
«me
)

82 
îr_t
 
îr
;

83 
ù_addr
 
addr
;

86 
HOSTENT_STORAGE
 
ho°ít
 
s_ho°ít
;

87 
HOSTENT_STORAGE
 *
s_Æü£s
;

88 
HOSTENT_STORAGE
 
ù_addr
 
s_ho°ít_addr
;

89 
HOSTENT_STORAGE
 
ù_addr
 *
s_pho°ít_addr
;

92 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &
addr
);

93 i‡(
îr
 !
ERR_OK
) {

94 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

95 
h_î∫o
 = 
HOST_NOT_FOUND
;

96  
NULL
;

100 
s_ho°ít_addr
 = 
addr
;

101 
s_pho°ít_addr
 = &
s_ho°ít_addr
;

102 
s_ho°ít
.
h_«me
 = (*)
«me
;

103 
s_ho°ít
.
h_Æü£s
 = &
s_Æü£s
;

104 
s_ho°ít
.
h_addπy≥
 = 
AF_INET
;

105 
s_ho°ít
.
h_Àngth
 = (
ù_addr
);

106 
s_ho°ít
.
h_addr_li°
 = (**)&
s_pho°ít_addr
;

108 #i‡
DNS_DEBUG


110 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_«mê =%s\n", 
s_ho°ít
.
h_«me
));

111 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£† =0x%08lX\n",(
u32_t
)(
s_ho°ít
.
h_Æü£s
)));

112 i‡(
s_ho°ít
.
h_Æü£s
 !
NULL
) {

113 
u8_t
 
idx
;

114  
idx
=0; 
s_ho°ít
.
h_Æü£s
[idx]; idx++) {

115 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =0x%08lX\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

116 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Æü£s[%i]-> =%s\n", 
idx
, 
s_ho°ít
.
h_Æü£s
[idx]));

119 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addπy≥ =%lu\n", (
u32_t
)(
s_ho°ít
.
h_addπy≥
)));

120 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_Àngth =%lu\n", (
u32_t
)(
s_ho°ít
.
h_Àngth
)));

121 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li° =0x%08lX\n", 
s_ho°ít
.
h_addr_li°
));

122 i‡(
s_ho°ít
.
h_addr_li°
 !
NULL
) {

123 
u8_t
 
idx
;

124  
idx
=0; 
s_ho°ít
.
h_addr_li°
[idx]; idx++) {

125 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i] =0x%08lX\n", 
idx
, 
s_ho°ít
.
h_addr_li°
[idx]));

126 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("ho°ít.h_addr_li°[%i]-> =%s\n", 
idx
, 
	`öë_¡ﬂ
(*((
ö_addr
*)(
s_ho°ít
.
h_addr_li°
[idx])))));

131 #i‡
LWIP_DNS_API_HOSTENT_STORAGE


133  
	`sys_thªad_ho°ít
(&
s_ho°ít
);

135  &
s_ho°ít
;

137 
	}
}

156 
	$lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

157 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
)

159 
îr_t
 
îr
;

160 
gëho°by«me_r_hñ≥r
 *
h
;

161 *
ho°«me
;

162 
size_t
 
«mñí
;

163 
lh_î∫o
;

165 i‡(
h_î∫›
 =
NULL
) {

167 
h_î∫›
 = &
lh_î∫o
;

170 i‡(
ªsu…
 =
NULL
) {

172 *
h_î∫›
 = 
EINVAL
;

176 *
ªsu…
 = 
NULL
;

177 i‡((
«me
 =
NULL
Ë|| (
ªt
 =NULLË|| (
buf
 == 0)) {

179 *
h_î∫›
 = 
EINVAL
;

183 
«mñí
 = 
	`°æí
(
«me
);

184 i‡(
buÊí
 < ((
gëho°by«me_r_hñ≥r
Ë+ 
«mñí
 + 1 + (
MEM_ALIGNMENT
 - 1))) {

186 *
h_î∫›
 = 
ERANGE
;

190 
h
 = (
gëho°by«me_r_hñ≥r
*)
	`LWIP_MEM_ALIGN
(
buf
);

191 
ho°«me
 = ((*)
h
Ë+ (
gëho°by«me_r_hñ≥r
);

194 
îr
 = 
	`√tc⁄n_gëho°by«me
(
«me
, &(
h
->
addr
));

195 i‡(
îr
 !
ERR_OK
) {

196 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("lwù_gëho°by«me(%sËÁûed,Éº=%d\n", 
«me
, 
îr
));

197 *
h_î∫›
 = 
ENSRNOTFOUND
;

202 
	`MEMCPY
(
ho°«me
, 
«me
, 
«mñí
);

203 
ho°«me
[
«mñí
] = 0;

206 
h
->
addrs
 = &(h->
addr
);

207 
h
->
Æü£s
 = 
NULL
;

208 
ªt
->
h_«me
 = (*)
ho°«me
;

209 
ªt
->
h_Æü£s
 = &(
h
->
Æü£s
);

210 
ªt
->
h_addπy≥
 = 
AF_INET
;

211 
ªt
->
h_Àngth
 = (
ù_addr
);

212 
ªt
->
h_addr_li°
 = (**)&(
h
->
addrs
);

215 *
ªsu…
 = 
ªt
;

219 
	}
}

229 
	$lwù_‰ìaddröfo
(
addröfo
 *
ai
)

231 
addröfo
 *
√xt
;

233 
ai
 !
NULL
) {

234 i‡(
ai
->
ai_addr
 !
NULL
) {

235 
	`mem_‰ì
(
ai
->
ai_addr
);

237 i‡(
ai
->
ai_ˇn⁄«me
 !
NULL
) {

238 
	`mem_‰ì
(
ai
->
ai_ˇn⁄«me
);

240 
√xt
 = 
ai
->
ai_√xt
;

241 
	`mem_‰ì
(
ai
);

242 
ai
 = 
√xt
;

244 
	}
}

266 
	$lwù_gëaddröfo
(c⁄° *
nodíame
, c⁄° *
£rv«me
,

267 c⁄° 
addröfo
 *
höts
, addröfÿ**
ªs
)

269 
îr_t
 
îr
;

270 
ù_addr
 
addr
;

271 
addröfo
 *
ai
;

272 
sockaddr_ö
 *
ß
 = 
NULL
;

273 
p‹t_ƒ
 = 0;

275 i‡(
ªs
 =
NULL
) {

276  
EAI_FAIL
;

278 *
ªs
 = 
NULL
;

279 i‡((
nodíame
 =
NULL
Ë&& (
£rv«me
 == NULL)) {

280  
EAI_NONAME
;

283 i‡(
£rv«me
 !
NULL
) {

286 
p‹t_ƒ
 = 
	`©oi
(
£rv«me
);

287 i‡((
p‹t_ƒ
 <= 0) || (port_nr > 0xffff)) {

288  
EAI_SERVICE
;

292 i‡(
nodíame
 !
NULL
) {

294 
îr
 = 
	`√tc⁄n_gëho°by«me
(
nodíame
, &
addr
);

295 i‡(
îr
 !
ERR_OK
) {

296  
EAI_FAIL
;

300 
addr
.add∏
INADDR_LOOPBACK
;

303 
ai
 = 
	`mem_mÆloc
((
addröfo
));

304 i‡(
ai
 =
NULL
) {

305 
memîr
;

307 
	`mem£t
(
ai
, 0, (
addröfo
));

308 
ß
 = 
	`mem_mÆloc
((
sockaddr_ö
));

309 i‡(
ß
 =
NULL
) {

310 
memîr
;

312 
	`mem£t
(
ß
, 0, (
sockaddr_ö
));

314 
ß
->
sö_addr
.
s_addr
 = 
addr
.addr;

315 
ß
->
sö_Ámûy
 = 
AF_INET
;

316 
ß
->
sö_Àn
 = (
sockaddr_ö
);

317 
ß
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t_ƒ
);

320 
ai
->
ai_Ámûy
 = 
AF_INET
;

321 i‡(
höts
 !
NULL
) {

323 
ai
->
ai_sockty≥
 = 
höts
->ai_socktype;

324 
ai
->
ai_¥Ÿocﬁ
 = 
höts
->ai_protocol;

326 i‡(
nodíame
 !
NULL
) {

328 
size_t
 
«mñí
 = 
	`°æí
(
nodíame
);

329 
	`LWIP_ASSERT
("«mñí i†toÿl⁄g", (
«mñí
 + 1Ë<(
mem_size_t
)-1);

330 
ai
->
ai_ˇn⁄«me
 = 
	`mem_mÆloc
((
mem_size_t
)(
«mñí
 + 1));

331 i‡(
ai
->
ai_ˇn⁄«me
 =
NULL
) {

332 
memîr
;

334 
	`MEMCPY
(
ai
->
ai_ˇn⁄«me
, 
nodíame
, 
«mñí
);

335 
ai
->
ai_ˇn⁄«me
[
«mñí
] = 0;

337 
ai
->
ai_addæí
 = (
sockaddr_ö
);

338 
ai
->
ai_addr
 = (
sockaddr
*)
ß
;

340 *
ªs
 = 
ai
;

343 
memîr
:

344 i‡(
ai
 !
NULL
) {

345 
	`mem_‰ì
(
ai
);

347 i‡(
ß
 !
NULL
) {

348 
	`mem_‰ì
(
ß
);

350  
EAI_MEMORY
;

351 
	}
}

	@net/lwip/api/netifapi.c

34 
	~"lwù/›t.h
"

36 #i‡
LWIP_NETIF_API


38 
	~"lwù/√tiÁpi.h
"

39 
	~"lwù/t˝ù.h
"

45 
	$do_√tiÁpi_√tif_add
–
√tiÁpi_msg_msg
 *
msg
)

47 i‡(!
	`√tif_add
–
msg
->
√tif
,

48 
msg
->msg.
add
.
ùaddr
,

49 
msg
->msg.
add
.
√tmask
,

50 
msg
->msg.
add
.
gw
,

51 
msg
->msg.
add
.
°©e
,

52 
msg
->msg.
add
.
öô
,

53 
msg
->msg.
add
.
öput
)) {

54 
msg
->
îr
 = 
ERR_IF
;

56 
msg
->
îr
 = 
ERR_OK
;

58 
	`TCPIP_NETIFAPI_ACK
(
msg
);

59 
	}
}

66 
	$do_√tiÁpi_√tif_comm⁄
–
√tiÁpi_msg_msg
 *
msg
)

68 i‡(
msg
->msg.
comm⁄
.
îπfunc
!=
NULL
) {

69 
msg
->
îr
 =

70 
msg
->msg.
comm⁄
.
	`îπfunc
(msg->
√tif
);

72 
msg
->
îr
 = 
ERR_OK
;

73 
msg
->msg.
comm⁄
.
	`voidfunc
(msg->
√tif
);

75 
	`TCPIP_NETIFAPI_ACK
(
msg
);

76 
	}
}

84 
îr_t


85 
√tiÁpi_√tif_add
(
√tif
 *netif,

86 
ù_addr
 *
ùaddr
,

87 
ù_addr
 *
√tmask
,

88 
ù_addr
 *
gw
,

89 *
°©e
,

90 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

91 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

93 
√tiÁpi_msg
 
msg
;

94 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_add
;

95 
msg
.msg.
√tif
 =Çetif;

96 
msg
.msg.msg.
add
.
ùaddr
 = ipaddr;

97 
msg
.msg.msg.
add
.
√tmask
 =Çetmask;

98 
msg
.msg.msg.
add
.
gw
 = gw;

99 
msg
.msg.msg.
add
.
°©e
 = state;

100 
msg
.msg.msg.
add
.
öô
 = init;

101 
msg
.msg.msg.
add
.
öput
 = input;

102 
	`TCPIP_NETIFAPI
(&
msg
);

103  
msg
.msg.
îr
;

104 
	}
}

112 
îr_t


113 
√tiÁpi_√tif_comm⁄
–
√tif
 *netif,

114 (* 
voidfunc
)(
√tif
 *netif),

115 
	$îr_t
 (* 
îπfunc
)(
√tif
 *netif) )

117 
√tiÁpi_msg
 
msg
;

118 
msg
.
fun˘i⁄
 = 
do_√tiÁpi_√tif_comm⁄
;

119 
msg
.msg.
√tif
 =Çetif;

120 
msg
.msg.msg.
comm⁄
.
voidfunc
 = voidfunc;

121 
msg
.msg.msg.
comm⁄
.
îπfunc
 =Érrtfunc;

122 
	`TCPIP_NETIFAPI
(&
msg
);

123  
msg
.msg.
îr
;

124 
	}
}

	@net/lwip/api/sockets.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_SOCKET


45 
	~"lwù/sockës.h
"

46 
	~"lwù/≠i.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/öë.h
"

50 
	~"lwù/t˝.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝ù.h
"

55 
	~<°rög.h
>

57 
	#NUM_SOCKETS
 
MEMP_NUM_NETCONN


	)

60 
	slwù_sockë
 {

62 
√tc⁄n
 *
	mc⁄n
;

64 
√tbuf
 *
	mœ°d©a
;

66 
u16_t
 
	mœ°off£t
;

69 
u16_t
 
	mrcvevít
;

72 
u16_t
 
	m£ndevít
;

74 
u16_t
 
	mÊags
;

76 
	mîr
;

80 
	slwù_£À˘_cb
 {

82 
lwù_£À˘_cb
 *
	m√xt
;

84 
fd_£t
 *
	mªad£t
;

86 
fd_£t
 *
	mwrôe£t
;

88 
fd_£t
 *
	mex˚±£t
;

90 
	m£m_sig«Œed
;

92 
sys_£m_t
 
	m£m
;

97 
	slwù_£tgësock›t_d©a
 {

99 
lwù_sockë
 *
	msock
;

101 
	ms
;

103 
	mÀvñ
;

105 
	m›äame
;

108 *
	m›tvÆ
;

110 
sockÀn_t
 *
	m›éí
;

112 
îr_t
 
	mîr
;

116 
lwù_sockë
 
	gsockës
[
NUM_SOCKETS
];

118 
lwù_£À˘_cb
 *
	g£À˘_cb_li°
;

121 
sys_£m_t
 
	gsock£m
;

123 
sys_£m_t
 
	g£À˘£m
;

127 c⁄° 
	gîr_to_î∫o_èbÀ
[] = {

129 
ENOMEM
,

130 
ENOBUFS
,

131 
ETIMEDOUT
,

132 
EHOSTUNREACH
,

133 
ECONNABORTED
,

134 
ECONNRESET
,

135 
ESHUTDOWN
,

136 
ENOTCONN
,

137 
EINVAL
,

138 
EIO
,

139 
EADDRINUSE
,

142 
EINPROGRESS


145 
	#ERR_TO_ERRNO_TABLE_SIZE
 \

146 ((
îr_to_î∫o_èbÀ
)/”º_to_î∫o_èbÀ[0]))

	)

148 
	#îr_to_î∫o
(
îr
) \

149 (()(-(
îr
)Ë< 
ERR_TO_ERRNO_TABLE_SIZE
 ? \

150 
îr_to_î∫o_èbÀ
[-(
îr
)] : 
EIO
)

	)

152 #ifde‡
ERRNO


153 
	#£t_î∫o
(
îr
Ë
î∫o
 = (îr)

	)

155 
	#£t_î∫o
(
îr
)

	)

158 
	#sock_£t_î∫o
(
sk
, 
e
) do { \

159 
sk
->
îr
 = (
e
); \

160 
	`£t_î∫o
(
sk
->
îr
); \

161 } 0)

	)

164 
evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
);

165 
lwù_gësock›t_öã∫Æ
(*
¨g
);

166 
lwù_£tsock›t_öã∫Æ
(*
¨g
);

173 
	$lwù_sockë_öô
()

175 
sock£m
 = 
	`sys_£m_√w
(1);

176 
£À˘£m
 = 
	`sys_£m_√w
(1);

177 
	}
}

185 
lwù_sockë
 *

186 
	$gë_sockë
(
s
)

188 
lwù_sockë
 *
sock
;

190 i‡((
s
 < 0Ë|| (†>
NUM_SOCKETS
)) {

191 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d): invÆid\n", 
s
));

192 
	`£t_î∫o
(
EBADF
);

193  
NULL
;

196 
sock
 = &
sockës
[
s
];

198 i‡(!
sock
->
c⁄n
) {

199 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("gë_sockë(%d):ÇŸá˘ive\n", 
s
));

200 
	`£t_î∫o
(
EBADF
);

201  
NULL
;

204  
sock
;

205 
	}
}

214 
	$Æloc_sockë
(
√tc⁄n
 *
√wc⁄n
)

216 
i
;

219 
	`sys_£m_waô
(
sock£m
);

222 
i
 = 0; i < 
NUM_SOCKETS
; ++i) {

223 i‡(!
sockës
[
i
].
c⁄n
) {

224 
sockës
[
i
].
c⁄n
 = 
√wc⁄n
;

225 
sockës
[
i
].
œ°d©a
 = 
NULL
;

226 
sockës
[
i
].
œ°off£t
 = 0;

227 
sockës
[
i
].
rcvevít
 = 0;

228 
sockës
[
i
].
£ndevít
 = 1;

229 
sockës
[
i
].
Êags
 = 0;

230 
sockës
[
i
].
îr
 = 0;

231 
	`sys_£m_sig«l
(
sock£m
);

232  
i
;

235 
	`sys_£m_sig«l
(
sock£m
);

237 
	}
}

246 
	$lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
)

248 
lwù_sockë
 *
sock
, *
nsock
;

249 
√tc⁄n
 *
√wc⁄n
;

250 
ù_addr
 
«ddr
;

251 
u16_t
 
p‹t
;

252 
√wsock
;

253 
sockaddr_ö
 
sö
;

254 
îr_t
 
îr
;

256 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%d)...\n", 
s
));

257 
sock
 = 
	`gë_sockë
(
s
);

258 i‡(!
sock
)

261 
√wc⁄n
 = 
	`√tc⁄n_ac˚±
(
sock
->
c⁄n
);

262 i‡(!
√wc⁄n
) {

263 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËÁûed,Éº=%d\n", 
s
, 
sock
->
c⁄n
->
îr
));

264 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

269 
îr
 = 
	`√tc⁄n_≥î
(
√wc⁄n
, &
«ddr
, &
p‹t
);

270 i‡(
îr
 !
ERR_OK
) {

271 
	`√tc⁄n_dñëe
(
√wc⁄n
);

272 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

276 
	`mem£t
(&
sö
, 0, (sin));

277 
sö
.
sö_Àn
 = (sin);

278 
sö
.
sö_Ámûy
 = 
AF_INET
;

279 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

280 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

282 i‡(*
addæí
 > (
sö
))

283 *
addæí
 = (
sö
);

285 
	`SMEMCPY
(
addr
, &
sö
, *
addæí
);

287 
√wsock
 = 
	`Æloc_sockë
(
√wc⁄n
);

288 i‡(
√wsock
 == -1) {

289 
	`√tc⁄n_dñëe
(
√wc⁄n
);

290 
	`sock_£t_î∫o
(
sock
, 
ENFILE
);

293 
	`LWIP_ASSERT
("övÆid sockë index", (
√wsock
 >0Ë&& (√wsock < 
NUM_SOCKETS
));

294 
√wc⁄n
->
ˇŒback
 = 
evít_ˇŒback
;

295 
nsock
 = &
sockës
[
√wsock
];

296 
	`LWIP_ASSERT
("övÆid sockëÖoöãr", 
nsock
 !
NULL
);

298 
	`sys_£m_waô
(
sock£m
);

304 
nsock
->
rcvevít
 +-1 - 
√wc⁄n
->
sockë
;

305 
√wc⁄n
->
sockë
 = 
√wsock
;

306 
	`sys_£m_sig«l
(
sock£m
);

308 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ac˚±(%dËªtu∫ögÇew sock=%dáddr=", 
s
, 
√wsock
));

310 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u\n", 
p‹t
));

312 
	`sock_£t_î∫o
(
sock
, 0);

313  
√wsock
;

314 
	}
}

317 
	$lwù_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

319 
lwù_sockë
 *
sock
;

320 
ù_addr
 
loˇl_addr
;

321 
u16_t
 
loˇl_p‹t
;

322 
îr_t
 
îr
;

324 
sock
 = 
	`gë_sockë
(
s
);

325 i‡(!
sock
)

328 
	`LWIP_ERROR
("lwù_böd: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

329 ((((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

330 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

332 
loˇl_addr
.
addr
 = ((
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

333 
loˇl_p‹t
 = ((
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

335 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%d,áddr=", 
s
));

337 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u)\n", 
	`¡ohs
(
loˇl_p‹t
)));

339 
îr
 = 
	`√tc⁄n_böd
(
sock
->
c⁄n
, &
loˇl_addr
, 
	`¡ohs
(
loˇl_p‹t
));

341 i‡(
îr
 !
ERR_OK
) {

342 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

343 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

347 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_böd(%dËsuc˚eded\n", 
s
));

348 
	`sock_£t_î∫o
(
sock
, 0);

350 
	}
}

353 
	$lwù_˛o£
(
s
)

355 
lwù_sockë
 *
sock
;

357 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_˛o£(%d)\n", 
s
));

359 
sock
 = 
	`gë_sockë
(
s
);

360 i‡(!
sock
) {

364 
	`√tc⁄n_dñëe
(
sock
->
c⁄n
);

366 
	`sys_£m_waô
(
sock£m
);

367 i‡(
sock
->
œ°d©a
) {

368 
	`√tbuf_dñëe
(
sock
->
œ°d©a
);

370 
sock
->
œ°d©a
 = 
NULL
;

371 
sock
->
œ°off£t
 = 0;

372 
sock
->
c⁄n
 = 
NULL
;

373 
	`sock_£t_î∫o
(
sock
, 0);

374 
	`sys_£m_sig«l
(
sock£m
);

376 
	}
}

379 
	$lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
)

381 
lwù_sockë
 *
sock
;

382 
îr_t
 
îr
;

384 
sock
 = 
	`gë_sockë
(
s
);

385 i‡(!
sock
)

388 
	`LWIP_ERROR
("lwù_c⁄√˘: invÆidáddªss", ((
«mñí
 =(
sockaddr_ö
)) &&

389 ((((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
Ë=
AF_INET
)),

390 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

392 i‡(((
sockaddr_ö
 *)
«me
)->
sö_Ámûy
 =
AF_UNSPEC
) {

393 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d, AF_UNSPEC)\n", 
s
));

394 
îr
 = 
	`√tc⁄n_disc⁄√˘
(
sock
->
c⁄n
);

396 
ù_addr
 
ªmŸe_addr
;

397 
u16_t
 
ªmŸe_p‹t
;

399 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
«me
)->
sö_addr
.
s_addr
;

400 
ªmŸe_p‹t
 = ((
sockaddr_ö
 *)
«me
)->
sö_p‹t
;

402 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%d,áddr=", 
s
));

404 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u)\n", 
	`¡ohs
(
ªmŸe_p‹t
)));

406 
îr
 = 
	`√tc⁄n_c⁄√˘
(
sock
->
c⁄n
, &
ªmŸe_addr
, 
	`¡ohs
(
ªmŸe_p‹t
));

409 i‡(
îr
 !
ERR_OK
) {

410 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

411 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

415 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_c⁄√˘(%dËsuc˚eded\n", 
s
));

416 
	`sock_£t_î∫o
(
sock
, 0);

418 
	}
}

429 
	$lwù_li°í
(
s
, 
backlog
)

431 
lwù_sockë
 *
sock
;

432 
îr_t
 
îr
;

434 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%d, backlog=%d)\n", 
s
, 
backlog
));

436 
sock
 = 
	`gë_sockë
(
s
);

437 i‡(!
sock
)

441 i‡(
backlog
 < 0) {

442 
backlog
 = 0;

444 i‡(
backlog
 > 0xff) {

445 
backlog
 = 0xff;

448 
îr
 = 
	`√tc⁄n_li°í_wôh_backlog
(
sock
->
c⁄n
, 
backlog
);

450 i‡(
îr
 !
ERR_OK
) {

451 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_li°í(%dËÁûed,Éº=%d\n", 
s
, 
îr
));

452 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

456 
	`sock_£t_î∫o
(
sock
, 0);

458 
	}
}

461 
	$lwù_ªcv‰om
(
s
, *
mem
, 
Àn
, 
Êags
,

462 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
)

464 
lwù_sockë
 *
sock
;

465 
√tbuf
 *
buf
;

466 
u16_t
 
buÊí
, 
c›yÀn
, 
off
 = 0;

467 
ù_addr
 *
addr
;

468 
u16_t
 
p‹t
;

469 
u8_t
 
d⁄e
 = 0;

471 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d, %p, %d, 0x%x, ..)\n", 
s
, 
mem
, 
Àn
, 
Êags
));

472 
sock
 = 
	`gë_sockë
(
s
);

473 i‡(!
sock
)

477 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Å› whûêsock->œ°d©a=%p\n", (*)
sock
->
œ°d©a
));

479 i‡(
sock
->
œ°d©a
) {

480 
buf
 = 
sock
->
œ°d©a
;

483 i‡(((
Êags
 & 
MSG_DONTWAIT
Ë|| (
sock
->Êag†& 
O_NONBLOCK
)Ë&& !sock->
rcvevít
) {

484 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):Ñëu∫ög EWOULDBLOCK\n", 
s
));

485 
	`sock_£t_î∫o
(
sock
, 
EWOULDBLOCK
);

491 
sock
->
œ°d©a
 = 
buf
 = 
	`√tc⁄n_ªcv
(sock->
c⁄n
);

492 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Çëc⁄n_ªcvÇëbuf=%p\n", (*)
buf
));

494 i‡(!
buf
) {

496 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d): bu‡=NULL!\n", 
s
));

497 
	`sock_£t_î∫o
(
sock
, (((sock->
c⁄n
->
pcb
.
ù
!=
NULL
Ë&& (sock->c⁄n->
îr
==
ERR_OK
))?
ETIMEDOUT
:
	`îr_to_î∫o
(sock->conn->err)));

502 
buÊí
 = 
	`√tbuf_Àn
(
buf
);

503 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: buÊí=%dÜí=%d off=%d sock->œ°off£t=%d\n", 
buÊí
, 
Àn
, 
off
, 
sock
->
œ°off£t
));

505 
buÊí
 -
sock
->
œ°off£t
;

507 i‡(
Àn
 > 
buÊí
) {

508 
c›yÀn
 = 
buÊí
;

510 
c›yÀn
 = 
Àn
;

515 
	`√tbuf_c›y_∑πül
(
buf
, (
u8_t
*)
mem
 + 
off
, 
c›yÀn
, 
sock
->
œ°off£t
);

517 
off
 +
c›yÀn
;

519 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

520 
Àn
 -
c›yÀn
;

521 i‡–(
Àn
 <0Ë|| (
buf
->
p
->
Êags
 & 
PBUF_FLAG_PUSH
Ë|| !
sock
->
rcvevít
) {

522 
d⁄e
 = 1;

525 
d⁄e
 = 1;

529 i‡((
Êags
 & 
MSG_PEEK
)==0) {

533 i‡((
sock
->
c⁄n
->
ty≥
 =
NETCONN_TCP
Ë&& (
buÊí
 - 
c›yÀn
 > 0)) {

534 
sock
->
œ°d©a
 = 
buf
;

535 
sock
->
œ°off£t
 +
c›yÀn
;

536 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om:Üa°d©®nowÇëbuf=%p\n", (*)
buf
));

538 
sock
->
œ°d©a
 = 
NULL
;

539 
sock
->
œ°off£t
 = 0;

540 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om: dñëögÇëbuf=%p\n", (*)
buf
));

541 
	`√tbuf_dñëe
(
buf
);

544 
d⁄e
 = 1;

546 } !
d⁄e
);

549 i‡(
‰om
 && 
‰omÀn
) {

550 
sockaddr_ö
 
sö
;

552 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

553 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

554 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

556 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

557 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

560 
	`mem£t
(&
sö
, 0, (sin));

561 
sö
.
sö_Àn
 = (sin);

562 
sö
.
sö_Ámûy
 = 
AF_INET
;

563 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

564 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

566 i‡(*
‰omÀn
 > (
sö
))

567 *
‰omÀn
 = (
sö
);

569 
	`SMEMCPY
(
‰om
, &
sö
, *
‰omÀn
);

571 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

573 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%uÜí=%u\n", 
p‹t
, 
off
));

575 #i‡
SOCKETS_DEBUG


576 
sockaddr_ö
 
sö
;

578 i‡(
	`√tc⁄n_ty≥
(
sock
->
c⁄n
Ë=
NETCONN_TCP
) {

579 
addr
 = (
ù_addr
*)&(
sö
.
sö_addr
.
s_addr
);

580 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, 
addr
, &
p‹t
, 0);

582 
addr
 = 
	`√tbuf_‰omaddr
(
buf
);

583 
p‹t
 = 
	`√tbuf_‰omp‹t
(
buf
);

586 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_ªcv‰om(%d):áddr=", 
s
));

588 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%uÜí=%u\n", 
p‹t
, 
off
));

592 
	`sock_£t_î∫o
(
sock
, 0);

593  
off
;

594 
	}
}

597 
	$lwù_ªad
(
s
, *
mem
, 
Àn
)

599  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 0, 
NULL
, NULL);

600 
	}
}

603 
	$lwù_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
)

605  
	`lwù_ªcv‰om
(
s
, 
mem
, 
Àn
, 
Êags
, 
NULL
, NULL);

606 
	}
}

609 
	$lwù_£nd
(
s
, c⁄° *
d©a
, 
size
, 
Êags
)

611 
lwù_sockë
 *
sock
;

612 
îr_t
 
îr
;

614 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_send(%d, data=%p, size=%d, flags=0x%x)\n",

615 
s
, 
d©a
, 
size
, 
Êags
));

617 
sock
 = 
	`gë_sockë
(
s
);

618 i‡(!
sock
)

621 i‡(
sock
->
c⁄n
->
ty≥
!=
NETCONN_TCP
) {

622 #i‡(
LWIP_UDP
 || 
LWIP_RAW
)

623  
	`lwù_£ndto
(
s
, 
d©a
, 
size
, 
Êags
, 
NULL
, 0);

625 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

630 
îr
 = 
	`√tc⁄n_wrôe
(
sock
->
c⁄n
, 
d©a
, 
size
, 
NETCONN_COPY
 | ((
Êags
 & 
MSG_MORE
)?
NETCONN_MORE
:0));

632 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£nd(%dËîr=%d size=%d\n", 
s
, 
îr
, 
size
));

633 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

634  (
îr
==
ERR_OK
?
size
:-1);

635 
	}
}

638 
	$lwù_£ndto
(
s
, c⁄° *
d©a
, 
size
, 
Êags
,

639 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

641 
lwù_sockë
 *
sock
;

642 
ù_addr
 
ªmŸe_addr
;

643 
îr
;

644 #i‡!
LWIP_TCPIP_CORE_LOCKING


645 
√tbuf
 
buf
;

646 
u16_t
 
ªmŸe_p‹t
;

649 
sock
 = 
	`gë_sockë
(
s
);

650 i‡(!
sock
)

653 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_TCP
) {

654 #i‡
LWIP_TCP


655  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 
Êags
);

657 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));

662 
	`LWIP_ASSERT
("lwip_sendto: size must fit in u16_t",

663 ((
size
 >= 0) && (size <= 0xffff)));

664 
	`LWIP_ERROR
("lwù_£ndto: invÆidáddªss", (((
to
 =
NULL
Ë&& (
tﬁí
 == 0)) ||

665 ((
tﬁí
 =(
sockaddr_ö
)) &&

666 ((((
sockaddr_ö
 *)
to
)->
sö_Ámûy
Ë=
AF_INET
))),

667 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
ERR_ARG
));  -1;);

669 #i‡
LWIP_TCPIP_CORE_LOCKING


671 { 
pbuf
* 
p
;

673 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_REF
);

674 i‡(
p
 =
NULL
) {

675 
îr
 = 
ERR_MEM
;

677 
p
->
∑ylﬂd
 = (*)
d©a
;

678 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
size
;

680 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

682 
	`LOCK_TCPIP_CORE
();

683 i‡(
sock
->
c⁄n
->
ty≥
==
NETCONN_RAW
) {

684 
îr
 = 
sock
->
c⁄n
->î∏
	`øw_£ndto
(sock->c⁄n->
pcb
.
øw
, 
p
, &
ªmŸe_addr
);

686 
îr
 = 
sock
->
c⁄n
->î∏
	`udp_£ndto
(sock->c⁄n->
pcb
.
udp
, 
p
, &
ªmŸe_addr
, 
	`¡ohs
(((
sockaddr_ö
 *)
to
)->
sö_p‹t
));

688 
	`UNLOCK_TCPIP_CORE
();

690 
	`pbuf_‰ì
(
p
);

695 
buf
.
p
 = buf.
±r
 = 
NULL
;

696 i‡(
to
) {

697 
ªmŸe_addr
.
addr
 = ((
sockaddr_ö
 *)
to
)->
sö_addr
.
s_addr
;

698 
ªmŸe_p‹t
 = 
	`¡ohs
(((
sockaddr_ö
 *)
to
)->
sö_p‹t
);

699 
buf
.
addr
 = &
ªmŸe_addr
;

700 
buf
.
p‹t
 = 
ªmŸe_p‹t
;

702 
ªmŸe_addr
.
addr
 = 0;

703 
ªmŸe_p‹t
 = 0;

704 
buf
.
addr
 = 
NULL
;

705 
buf
.
p‹t
 = 0;

708 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_sendto(%d, data=%p, size=%d, flags=0x%xÅo=",

709 
s
, 
d©a
, 
size
, 
Êags
));

711 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%u\n", 
ªmŸe_p‹t
));

714 i‡((
îr
 = 
	`√tbuf_ªf
(&
buf
, 
d©a
, 
size
)Ë=
ERR_OK
) {

716 
îr
 = 
	`√tc⁄n_£nd
(
sock
->
c⁄n
, &
buf
);

720 i‡(
buf
.
p
 !
NULL
) {

721 
	`pbuf_‰ì
(
buf
.
p
);

724 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(
îr
));

725  (
îr
==
ERR_OK
?
size
:-1);

726 
	}
}

729 
	$lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
)

731 
√tc⁄n
 *
c⁄n
;

732 
i
;

734 
	`LWIP_UNUSED_ARG
(
domaö
);

737 
ty≥
) {

738 
SOCK_RAW
:

739 
c⁄n
 = 
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
NETCONN_RAW
, (
u8_t
)
¥Ÿocﬁ
, 
evít_ˇŒback
);

740 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_RAW, %d) = ",

741 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

743 
SOCK_DGRAM
:

744 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
–(
¥Ÿocﬁ
 =
IPPROTO_UDPLITE
) ?

745 
NETCONN_UDPLITE
 : 
NETCONN_UDP
, 
evít_ˇŒback
);

746 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",

747 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

749 
SOCK_STREAM
:

750 
c⁄n
 = 
	`√tc⁄n_√w_wôh_ˇŒback
(
NETCONN_TCP
, 
evít_ˇŒback
);

751 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%s, SOCK_STREAM, %d) = ",

752 
domaö
 =
PF_INET
 ? "PF_INET" : "UNKNOWN", 
¥Ÿocﬁ
));

755 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",

756 
domaö
, 
ty≥
, 
¥Ÿocﬁ
));

757 
	`£t_î∫o
(
EINVAL
);

761 i‡(!
c⁄n
) {

762 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("-1 / ENOBUFS (couldÇot createÇetconn)\n"));

763 
	`£t_î∫o
(
ENOBUFS
);

767 
i
 = 
	`Æloc_sockë
(
c⁄n
);

769 i‡(
i
 == -1) {

770 
	`√tc⁄n_dñëe
(
c⁄n
);

771 
	`£t_î∫o
(
ENFILE
);

774 
c⁄n
->
sockë
 = 
i
;

775 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("%d\n", 
i
));

776 
	`£t_î∫o
(0);

777  
i
;

778 
	}
}

781 
	$lwù_wrôe
(
s
, c⁄° *
d©a
, 
size
)

783  
	`lwù_£nd
(
s
, 
d©a
, 
size
, 0);

784 
	}
}

802 
	$lwù_£lsˇn
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
)

804 
i
, 
ƒódy
 = 0;

805 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

806 
lwù_sockë
 *
p_sock
;

808 
	`FD_ZERO
(&
Ãód£t
);

809 
	`FD_ZERO
(&
lwrôe£t
);

810 
	`FD_ZERO
(&
Àx˚±£t
);

814 
i
 = 0; i < 
maxfdp1
; i++) {

815 i‡(
	`FD_ISSET
(
i
, 
ªad£t
)) {

817 
p_sock
 = 
	`gë_sockë
(
i
);

818 i‡(
p_sock
 && (p_sock->
œ°d©a
 ||Ö_sock->
rcvevít
)) {

819 
	`FD_SET
(
i
, &
Ãód£t
);

820 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹Ñódög\n", 
i
));

821 
ƒódy
++;

824 i‡(
	`FD_ISSET
(
i
, 
wrôe£t
)) {

826 
p_sock
 = 
	`gë_sockë
(
i
);

827 i‡(
p_sock
 &&Ö_sock->
£ndevít
) {

828 
	`FD_SET
(
i
, &
lwrôe£t
);

829 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£lsˇn: fd=%dÑódy f‹ wrôög\n", 
i
));

830 
ƒódy
++;

834 *
ªad£t
 = 
Ãód£t
;

835 *
wrôe£t
 = 
lwrôe£t
;

836 
	`FD_ZERO
(
ex˚±£t
);

838  
ƒódy
;

839 
	}
}

846 
	$lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

847 
timevÆ
 *
timeout
)

849 
i
;

850 
ƒódy
;

851 
fd_£t
 
Ãód£t
, 
lwrôe£t
, 
Àx˚±£t
;

852 
u32_t
 
m£˘imeout
;

853 
lwù_£À˘_cb
 
£À˘_cb
;

854 
lwù_£À˘_cb
 *
p_£lcb
;

856 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select(%d, %p, %p, %p,Åvsec=%ldÅvusec=%ld)\n",

857 
maxfdp1
, (*)
ªad£t
, (*Ë
wrôe£t
, (*Ë
ex˚±£t
,

858 
timeout
 ?Åimeout->
tv_£c
 : -1L,Åimeouà?Åimeout->
tv_u£c
 : -1L));

860 
£À˘_cb
.
√xt
 = 0;

861 
£À˘_cb
.
ªad£t
 =Ñeadset;

862 
£À˘_cb
.
wrôe£t
 = writeset;

863 
£À˘_cb
.
ex˚±£t
 =Éxceptset;

864 
£À˘_cb
.
£m_sig«Œed
 = 0;

867 
	`sys_£m_waô
(
£À˘£m
);

869 i‡(
ªad£t
)

870 
Ãód£t
 = *
ªad£t
;

872 
	`FD_ZERO
(&
Ãód£t
);

873 i‡(
wrôe£t
)

874 
lwrôe£t
 = *
wrôe£t
;

876 
	`FD_ZERO
(&
lwrôe£t
);

877 i‡(
ex˚±£t
)

878 
Àx˚±£t
 = *
ex˚±£t
;

880 
	`FD_ZERO
(&
Àx˚±£t
);

884 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

887 i‡(!
ƒódy
) {

888 i‡(
timeout
 &&Åimeout->
tv_£c
 =0 &&Åimeout->
tv_u£c
 == 0) {

889 
	`sys_£m_sig«l
(
£À˘£m
);

890 i‡(
ªad£t
)

891 
	`FD_ZERO
(
ªad£t
);

892 i‡(
wrôe£t
)

893 
	`FD_ZERO
(
wrôe£t
);

894 i‡(
ex˚±£t
)

895 
	`FD_ZERO
(
ex˚±£t
);

897 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÇoÅimeout,Ñeturning 0\n"));

898 
	`£t_î∫o
(0);

908 
£À˘_cb
.
£m
 = 
	`sys_£m_√w
(0);

911 
£À˘_cb
.
√xt
 = 
£À˘_cb_li°
;

912 
£À˘_cb_li°
 = &
£À˘_cb
;

915 
	`sys_£m_sig«l
(
£À˘£m
);

918 i‡(
timeout
 == 0)

920 
m£˘imeout
 = 0;

922 
m£˘imeout
 = ((
timeout
->
tv_£c
 * 1000Ë+ (—imeout->
tv_u£c
 + 500)/1000));

923 if(
m£˘imeout
 == 0)

924 
m£˘imeout
 = 1;

927 
i
 = 
	`sys_£m_waô_timeout
(
£À˘_cb
.
£m
, 
m£˘imeout
);

930 
	`sys_£m_waô
(
£À˘£m
);

931 i‡(
£À˘_cb_li°
 =&
£À˘_cb
)

932 
£À˘_cb_li°
 = 
£À˘_cb
.
√xt
;

934 
p_£lcb
 = 
£À˘_cb_li°
;Ö_£lcb;Ö_£lcb =Ö_£lcb->
√xt
) {

935 i‡(
p_£lcb
->
√xt
 =&
£À˘_cb
) {

936 
p_£lcb
->
√xt
 = 
£À˘_cb
.next;

941 
	`sys_£m_sig«l
(
£À˘£m
);

943 
	`sys_£m_‰ì
(
£À˘_cb
.
£m
);

944 i‡(
i
 == 0) {

946 i‡(
ªad£t
)

947 
	`FD_ZERO
(
ªad£t
);

948 i‡(
wrôe£t
)

949 
	`FD_ZERO
(
wrôe£t
);

950 i‡(
ex˚±£t
)

951 
	`FD_ZERO
(
ex˚±£t
);

953 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_select:ÅimeoutÉxpired\n"));

954 
	`£t_î∫o
(0);

959 i‡(
ªad£t
)

960 
Ãód£t
 = *
ªad£t
;

962 
	`FD_ZERO
(&
Ãód£t
);

963 i‡(
wrôe£t
)

964 
lwrôe£t
 = *
wrôe£t
;

966 
	`FD_ZERO
(&
lwrôe£t
);

967 i‡(
ex˚±£t
)

968 
Àx˚±£t
 = *
ex˚±£t
;

970 
	`FD_ZERO
(&
Àx˚±£t
);

973 
ƒódy
 = 
	`lwù_£lsˇn
(
maxfdp1
, &
Ãód£t
, &
lwrôe£t
, &
Àx˚±£t
);

975 
	`sys_£m_sig«l
(
£À˘£m
);

977 i‡(
ªad£t
)

978 *
ªad£t
 = 
Ãód£t
;

979 i‡(
wrôe£t
)

980 *
wrôe£t
 = 
lwrôe£t
;

981 i‡(
ex˚±£t
)

982 *
ex˚±£t
 = 
Àx˚±£t
;

984 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_£À˘:Çªady=%d\n", 
ƒódy
));

985 
	`£t_î∫o
(0);

987  
ƒódy
;

988 
	}
}

995 
	$evít_ˇŒback
(
√tc⁄n
 *
c⁄n
, 
√tc⁄n_evt
 
evt
, 
u16_t
 
Àn
)

997 
s
;

998 
lwù_sockë
 *
sock
;

999 
lwù_£À˘_cb
 *
scb
;

1001 
	`LWIP_UNUSED_ARG
(
Àn
);

1004 i‡(
c⁄n
) {

1005 
s
 = 
c⁄n
->
sockë
;

1006 i‡(
s
 < 0) {

1012 
	`sys_£m_waô
(
sock£m
);

1013 i‡(
c⁄n
->
sockë
 < 0) {

1014 i‡(
evt
 =
NETCONN_EVT_RCVPLUS
) {

1015 
c⁄n
->
sockë
--;

1017 
	`sys_£m_sig«l
(
sock£m
);

1020 
	`sys_£m_sig«l
(
sock£m
);

1023 
sock
 = 
	`gë_sockë
(
s
);

1024 i‡(!
sock
) {

1031 
	`sys_£m_waô
(
£À˘£m
);

1033 
evt
) {

1034 
NETCONN_EVT_RCVPLUS
:

1035 
sock
->
rcvevít
++;

1037 
NETCONN_EVT_RCVMINUS
:

1038 
sock
->
rcvevít
--;

1040 
NETCONN_EVT_SENDPLUS
:

1041 
sock
->
£ndevít
 = 1;

1043 
NETCONN_EVT_SENDMINUS
:

1044 
sock
->
£ndevít
 = 0;

1047 
	`LWIP_ASSERT
("unknownÉvent", 0);

1050 
	`sys_£m_sig«l
(
£À˘£m
);

1060 
	`sys_£m_waô
(
£À˘£m
);

1061 
scb
 = 
£À˘_cb_li°
; scb; scb = scb->
√xt
) {

1062 i‡(
scb
->
£m_sig«Œed
 == 0) {

1064 i‡(
scb
->
ªad£t
 && 
	`FD_ISSET
(
s
, scb->readset))

1065 i‡(
sock
->
rcvevít
)

1067 i‡(
scb
->
wrôe£t
 && 
	`FD_ISSET
(
s
, scb->writeset))

1068 i‡(
sock
->
£ndevít
)

1072 i‡(
scb
) {

1073 
scb
->
£m_sig«Œed
 = 1;

1074 
	`sys_£m_sig«l
(
£À˘£m
);

1075 
	`sys_£m_sig«l
(
scb
->
£m
);

1077 
	`sys_£m_sig«l
(
£À˘£m
);

1081 
	}
}

1088 
	$lwù_shutdown
(
s
, 
how
)

1090 
	`LWIP_UNUSED_ARG
(
how
);

1091 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_shutdown(%d, how=%d)\n", 
s
, 
how
));

1092  
	`lwù_˛o£
(
s
);

1093 
	}
}

1096 
	$lwù_gëadd∫ame
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
, 
u8_t
 
loˇl
)

1098 
lwù_sockë
 *
sock
;

1099 
sockaddr_ö
 
sö
;

1100 
ù_addr
 
«ddr
;

1102 
sock
 = 
	`gë_sockë
(
s
);

1103 i‡(!
sock
)

1106 
	`mem£t
(&
sö
, 0, (sin));

1107 
sö
.
sö_Àn
 = (sin);

1108 
sö
.
sö_Ámûy
 = 
AF_INET
;

1111 
	`√tc⁄n_gëaddr
(
sock
->
c⁄n
, &
«ddr
, &
sö
.
sö_p‹t
, 
loˇl
);

1113 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_gëadd∫ame(%d,áddr=", 
s
));

1115 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("Ö‹t=%d)\n", 
sö
.
sö_p‹t
));

1117 
sö
.
sö_p‹t
 = 
	`ht⁄s
(sin.sin_port);

1118 
sö
.
sö_addr
.
s_addr
 = 
«ddr
.
addr
;

1120 i‡(*
«mñí
 > (
sö
))

1121 *
«mñí
 = (
sö
);

1123 
	`SMEMCPY
(
«me
, &
sö
, *
«mñí
);

1124 
	`sock_£t_î∫o
(
sock
, 0);

1126 
	}
}

1129 
	$lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1131  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 0);

1132 
	}
}

1135 
	$lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
)

1137  
	`lwù_gëadd∫ame
(
s
, 
«me
, 
«mñí
, 1);

1138 
	}
}

1141 
	$lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
)

1143 
îr_t
 
îr
 = 
ERR_OK
;

1144 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1145 
lwù_£tgësock›t_d©a
 
d©a
;

1147 i‡(!
sock
)

1150 i‡((
NULL
 =
›tvÆ
Ë|| (NULL =
›éí
)) {

1151 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1156 
Àvñ
) {

1159 
SOL_SOCKET
:

1160 
›äame
) {

1162 
SO_ACCEPTCONN
:

1163 
SO_BROADCAST
:

1166 
SO_ERROR
:

1167 
SO_KEEPALIVE
:

1170 #i‡
LWIP_SO_RCVTIMEO


1171 
SO_RCVTIMEO
:

1173 #i‡
LWIP_SO_RCVBUF


1174 
SO_RCVBUF
:

1180 #i‡
SO_REUSE


1181 
SO_REUSEADDR
:

1182 
SO_REUSEPORT
:

1184 
SO_TYPE
:

1186 i‡(*
›éí
 < ()) {

1187 
îr
 = 
EINVAL
;

1191 
SO_NO_CHECK
:

1192 i‡(*
›éí
 < ()) {

1193 
îr
 = 
EINVAL
;

1195 #i‡
LWIP_UDP


1196 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1197 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1199 
îr
 = 
EAFNOSUPPORT
;

1205 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1206 
s
, 
›äame
));

1207 
îr
 = 
ENOPROTOOPT
;

1212 
IPPROTO_IP
:

1213 
›äame
) {

1217 
IP_TTL
:

1218 
IP_TOS
:

1219 i‡(*
›éí
 < ()) {

1220 
îr
 = 
EINVAL
;

1223 #i‡
LWIP_IGMP


1224 
IP_MULTICAST_TTL
:

1225 i‡(*
›éí
 < (
u8_t
)) {

1226 
îr
 = 
EINVAL
;

1229 
IP_MULTICAST_IF
:

1230 i‡(*
›éí
 < (
ö_addr
)) {

1231 
îr
 = 
EINVAL
;

1237 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1238 
s
, 
›äame
));

1239 
îr
 = 
ENOPROTOOPT
;

1243 #i‡
LWIP_TCP


1245 
IPPROTO_TCP
:

1246 i‡(*
›éí
 < ()) {

1247 
îr
 = 
EINVAL
;

1252 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1255 
›äame
) {

1256 
TCP_NODELAY
:

1257 
TCP_KEEPALIVE
:

1258 #i‡
LWIP_TCP_KEEPALIVE


1259 
TCP_KEEPIDLE
:

1260 
TCP_KEEPINTVL
:

1261 
TCP_KEEPCNT
:

1266 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1267 
s
, 
›äame
));

1268 
îr
 = 
ENOPROTOOPT
;

1272 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1274 
IPPROTO_UDPLITE
:

1275 i‡(*
›éí
 < ()) {

1276 
îr
 = 
EINVAL
;

1281 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1284 
›äame
) {

1285 
UDPLITE_SEND_CSCOV
:

1286 
UDPLITE_RECV_CSCOV
:

1290 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1291 
s
, 
›äame
));

1292 
îr
 = 
ENOPROTOOPT
;

1298 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1299 
s
, 
Àvñ
, 
›äame
));

1300 
îr
 = 
ENOPROTOOPT
;

1304 i‡(
îr
 !
ERR_OK
) {

1305 
	`sock_£t_î∫o
(
sock
, 
îr
);

1310 
d©a
.
sock
 = sock;

1311 
d©a
.
Àvñ
 =Üevel;

1312 
d©a
.
›äame
 = optname;

1313 
d©a
.
›tvÆ
 = optval;

1314 
d©a
.
›éí
 = optlen;

1315 
d©a
.
îr
 =Érr;

1316 
	`t˝ù_ˇŒback
(
lwù_gësock›t_öã∫Æ
, &
d©a
);

1317 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1319 
îr
 = 
d©a
.err;

1321 
	`sock_£t_î∫o
(
sock
, 
îr
);

1322  
îr
 ? -1 : 0;

1323 
	}
}

1326 
	$lwù_gësock›t_öã∫Æ
(*
¨g
)

1328 
lwù_sockë
 *
sock
;

1329 #ifde‡
LWIP_DEBUG


1330 
s
;

1332 
Àvñ
, 
›äame
;

1333 *
›tvÆ
;

1334 
lwù_£tgësock›t_d©a
 *
d©a
;

1336 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1338 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1339 
sock
 = 
d©a
->sock;

1340 #ifde‡
LWIP_DEBUG


1341 
s
 = 
d©a
->s;

1343 
Àvñ
 = 
d©a
->level;

1344 
›äame
 = 
d©a
->optname;

1345 
›tvÆ
 = 
d©a
->optval;

1347 
Àvñ
) {

1350 
SOL_SOCKET
:

1351 
›äame
) {

1354 
SO_ACCEPTCONN
:

1355 
SO_BROADCAST
:

1358 
SO_KEEPALIVE
:

1360 #i‡
SO_REUSE


1361 
SO_REUSEADDR
:

1362 
SO_REUSEPORT
:

1365 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 & 
›äame
;

1366 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",

1367 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1370 
SO_TYPE
:

1371 
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
)) {

1372 
NETCONN_RAW
:

1373 *(*)
›tvÆ
 = 
SOCK_RAW
;

1375 
NETCONN_TCP
:

1376 *(*)
›tvÆ
 = 
SOCK_STREAM
;

1378 
NETCONN_UDP
:

1379 *(*)
›tvÆ
 = 
SOCK_DGRAM
;

1382 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ty≥
;

1383 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
,

1385 
s
, *(*)
›tvÆ
));

1387 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",

1388 
s
, *(*)
›tvÆ
));

1391 
SO_ERROR
:

1392 i‡(
sock
->
îr
 == 0) {

1393 
	`sock_£t_î∫o
(
sock
, 
	`îr_to_î∫o
(sock->
c⁄n
->
îr
));

1395 *(*)
›tvÆ
 = 
sock
->
îr
;

1396 
sock
->
îr
 = 0;

1397 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",

1398 
s
, *(*)
›tvÆ
));

1401 #i‡
LWIP_SO_RCVTIMEO


1402 
SO_RCVTIMEO
:

1403 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_timeout
;

1406 #i‡
LWIP_SO_RCVBUF


1407 
SO_RCVBUF
:

1408 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
ªcv_bufsize
;

1411 #i‡
LWIP_UDP


1412 
SO_NO_CHECK
:

1413 *(*)
›tvÆ
 = (
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_NOCHKSUM
) ? 1 : 0;

1420 
IPPROTO_IP
:

1421 
›äame
) {

1422 
IP_TTL
:

1423 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1424 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",

1425 
s
, *(*)
›tvÆ
));

1427 
IP_TOS
:

1428 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
tos
;

1429 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",

1430 
s
, *(*)
›tvÆ
));

1432 #i‡
LWIP_IGMP


1433 
IP_MULTICAST_TTL
:

1434 *(
u8_t
*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
ù
->
âl
;

1435 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",

1436 
s
, *(*)
›tvÆ
));

1438 
IP_MULTICAST_IF
:

1439 ((
ö_addr
*Ë
›tvÆ
)->
s_addr
 = 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
;

1440 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%x\n",

1441 
s
, *(
u32_t
 *)
›tvÆ
));

1447 #i‡
LWIP_TCP


1449 
IPPROTO_TCP
:

1450 
›äame
) {

1451 
TCP_NODELAY
:

1452 *(*)
›tvÆ
 = (
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 & 
TF_NODELAY
);

1453 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",

1454 
s
, (*(*)
›tvÆ
)?"on":"off") );

1456 
TCP_KEEPALIVE
:

1457 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
;

1458 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPALIVE) = %d\n",

1459 
s
, *(*)
›tvÆ
));

1462 #i‡
LWIP_TCP_KEEPALIVE


1463 
TCP_KEEPIDLE
:

1464 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
/1000);

1465 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPIDLE) = %d\n",

1466 
s
, *(*)
›tvÆ
));

1468 
TCP_KEEPINTVL
:

1469 *(*)
›tvÆ
 = ()(
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
/1000);

1470 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPINTVL) = %d\n",

1471 
s
, *(*)
›tvÆ
));

1473 
TCP_KEEPCNT
:

1474 *(*)
›tvÆ
 = ()
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
;

1475 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_IP, TCP_KEEPCNT) = %d\n",

1476 
s
, *(*)
›tvÆ
));

1483 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1485 
IPPROTO_UDPLITE
:

1486 
›äame
) {

1487 
UDPLITE_SEND_CSCOV
:

1488 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
;

1489 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) = %d\n",

1490 
s
, (*(*)
›tvÆ
)) );

1492 
UDPLITE_RECV_CSCOV
:

1493 *(*)
›tvÆ
 = 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
;

1494 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_getsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) = %d\n",

1495 
s
, (*(*)
›tvÆ
)) );

1501 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1502 
	}
}

1505 
	$lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

1507 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1508 
îr
 = 
ERR_OK
;

1509 
lwù_£tgësock›t_d©a
 
d©a
;

1511 i‡(!
sock
)

1514 i‡(
NULL
 =
›tvÆ
) {

1515 
	`sock_£t_î∫o
(
sock
, 
EFAULT
);

1520 
Àvñ
) {

1523 
SOL_SOCKET
:

1524 
›äame
) {

1526 
SO_BROADCAST
:

1529 
SO_KEEPALIVE
:

1532 #i‡
LWIP_SO_RCVTIMEO


1533 
SO_RCVTIMEO
:

1535 #i‡
LWIP_SO_RCVBUF


1536 
SO_RCVBUF
:

1542 #i‡
SO_REUSE


1543 
SO_REUSEADDR
:

1544 
SO_REUSEPORT
:

1547 i‡(
›éí
 < ()) {

1548 
îr
 = 
EINVAL
;

1551 
SO_NO_CHECK
:

1552 i‡(
›éí
 < ()) {

1553 
îr
 = 
EINVAL
;

1555 #i‡
LWIP_UDP


1556 i‡((
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDP
) ||

1557 ((
	`udp_Êags
(
sock
->
c⁄n
->
pcb
.
udp
Ë& 
UDP_FLAGS_UDPLITE
) != 0)) {

1559 
îr
 = 
EAFNOSUPPORT
;

1564 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",

1565 
s
, 
›äame
));

1566 
îr
 = 
ENOPROTOOPT
;

1571 
IPPROTO_IP
:

1572 
›äame
) {

1576 
IP_TTL
:

1577 
IP_TOS
:

1578 i‡(
›éí
 < ()) {

1579 
îr
 = 
EINVAL
;

1582 #i‡
LWIP_IGMP


1583 
IP_MULTICAST_TTL
:

1584 i‡(
›éí
 < (
u8_t
)) {

1585 
îr
 = 
EINVAL
;

1587 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1588 
îr
 = 
EAFNOSUPPORT
;

1591 
IP_MULTICAST_IF
:

1592 i‡(
›éí
 < (
ö_addr
)) {

1593 
îr
 = 
EINVAL
;

1595 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1596 
îr
 = 
EAFNOSUPPORT
;

1599 
IP_ADD_MEMBERSHIP
:

1600 
IP_DROP_MEMBERSHIP
:

1601 i‡(
›éí
 < (
ù_mªq
)) {

1602 
îr
 = 
EINVAL
;

1604 i‡(
	`NETCONNTYPE_GROUP
(
sock
->
c⁄n
->
ty≥
Ë!
NETCONN_UDP
) {

1605 
îr
 = 
EAFNOSUPPORT
;

1610 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",

1611 
s
, 
›äame
));

1612 
îr
 = 
ENOPROTOOPT
;

1616 #i‡
LWIP_TCP


1618 
IPPROTO_TCP
:

1619 i‡(
›éí
 < ()) {

1620 
îr
 = 
EINVAL
;

1625 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_TCP
)

1628 
›äame
) {

1629 
TCP_NODELAY
:

1630 
TCP_KEEPALIVE
:

1631 #i‡
LWIP_TCP_KEEPALIVE


1632 
TCP_KEEPIDLE
:

1633 
TCP_KEEPINTVL
:

1634 
TCP_KEEPCNT
:

1639 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",

1640 
s
, 
›äame
));

1641 
îr
 = 
ENOPROTOOPT
;

1645 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1647 
IPPROTO_UDPLITE
:

1648 i‡(
›éí
 < ()) {

1649 
îr
 = 
EINVAL
;

1654 i‡(
sock
->
c⁄n
->
ty≥
 !
NETCONN_UDPLITE
)

1657 
›äame
) {

1658 
UDPLITE_SEND_CSCOV
:

1659 
UDPLITE_RECV_CSCOV
:

1663 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UNIMPL: optname=0x%x, ..)\n",

1664 
s
, 
›äame
));

1665 
îr
 = 
ENOPROTOOPT
;

1671 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d,Üevel=0x%x, UNIMPL: optname=0x%x, ..)\n",

1672 
s
, 
Àvñ
, 
›äame
));

1673 
îr
 = 
ENOPROTOOPT
;

1677 i‡(
îr
 !
ERR_OK
) {

1678 
	`sock_£t_î∫o
(
sock
, 
îr
);

1684 
d©a
.
sock
 = sock;

1685 
d©a
.
Àvñ
 =Üevel;

1686 
d©a
.
›äame
 = optname;

1687 
d©a
.
›tvÆ
 = (*)optval;

1688 
d©a
.
›éí
 = &optlen;

1689 
d©a
.
îr
 =Érr;

1690 
	`t˝ù_ˇŒback
(
lwù_£tsock›t_öã∫Æ
, &
d©a
);

1691 
	`sys_¨ch_£m_waô
(
sock
->
c⁄n
->
›_com∂ëed
, 0);

1693 
îr
 = 
d©a
.err;

1695 
	`sock_£t_î∫o
(
sock
, 
îr
);

1696  
îr
 ? -1 : 0;

1697 
	}
}

1700 
	$lwù_£tsock›t_öã∫Æ
(*
¨g
)

1702 
lwù_sockë
 *
sock
;

1703 #ifde‡
LWIP_DEBUG


1704 
s
;

1706 
Àvñ
, 
›äame
;

1707 c⁄° *
›tvÆ
;

1708 
lwù_£tgësock›t_d©a
 *
d©a
;

1710 
	`LWIP_ASSERT
("¨g !NULL", 
¨g
 !
NULL
);

1712 
d©a
 = (
lwù_£tgësock›t_d©a
*)
¨g
;

1713 
sock
 = 
d©a
->sock;

1714 #ifde‡
LWIP_DEBUG


1715 
s
 = 
d©a
->s;

1717 
Àvñ
 = 
d©a
->level;

1718 
›äame
 = 
d©a
->optname;

1719 
›tvÆ
 = 
d©a
->optval;

1721 
Àvñ
) {

1724 
SOL_SOCKET
:

1725 
›äame
) {

1728 
SO_BROADCAST
:

1731 
SO_KEEPALIVE
:

1733 #i‡
SO_REUSE


1734 
SO_REUSEADDR
:

1735 
SO_REUSEPORT
:

1738 i‡(*(*)
›tvÆ
) {

1739 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 |
›äame
;

1741 
sock
->
c⁄n
->
pcb
.
ù
->
so_›ti⁄s
 &~
›äame
;

1743 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",

1744 
s
, 
›äame
, (*(*)
›tvÆ
?"on":"off")));

1746 #i‡
LWIP_SO_RCVTIMEO


1747 
SO_RCVTIMEO
:

1748 
sock
->
c⁄n
->
ªcv_timeout
 = ( *(*)
›tvÆ
 );

1751 #i‡
LWIP_SO_RCVBUF


1752 
SO_RCVBUF
:

1753 
sock
->
c⁄n
->
ªcv_bufsize
 = ( *(*)
›tvÆ
 );

1756 #i‡
LWIP_UDP


1757 
SO_NO_CHECK
:

1758 i‡(*(*)
›tvÆ
) {

1759 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË| 
UDP_FLAGS_NOCHKSUM
);

1761 
	`udp_£tÊags
(
sock
->
c⁄n
->
pcb
.
udp
, 
	`udp_Êags
(sock->c⁄n->pcb.udpË& ~
UDP_FLAGS_NOCHKSUM
);

1769 
IPPROTO_IP
:

1770 
›äame
) {

1771 
IP_TTL
:

1772 
sock
->
c⁄n
->
pcb
.
ù
->
âl
 = (
u8_t
)(*(*)
›tvÆ
);

1773 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %u\n",

1774 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
âl
));

1776 
IP_TOS
:

1777 
sock
->
c⁄n
->
pcb
.
ù
->
tos
 = (
u8_t
)(*(*)
›tvÆ
);

1778 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %u\n",

1779 
s
, 
sock
->
c⁄n
->
pcb
.
ù
->
tos
));

1781 #i‡
LWIP_IGMP


1782 
IP_MULTICAST_TTL
:

1783 
sock
->
c⁄n
->
pcb
.
udp
->
âl
 = (
u8_t
)(*(u8_t*)
›tvÆ
);

1785 
IP_MULTICAST_IF
:

1786 
sock
->
c⁄n
->
pcb
.
udp
->
mu…iˇ°_ù
.
addr
 = ((
ö_addr
*Ë
›tvÆ
)->
s_addr
;

1788 
IP_ADD_MEMBERSHIP
:

1789 
IP_DROP_MEMBERSHIP
:

1792 
ù_mªq
 *
imr
 = (ù_mªq *)
›tvÆ
;

1793 if(
›äame
 =
IP_ADD_MEMBERSHIP
){

1794 
d©a
->
îr
 = 
	`igmp_joögroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1796 
d©a
->
îr
 = 
	`igmp_Àavegroup
((
ù_addr
*)&(
imr
->
imr_öãrÁ˚
.
s_addr
), (ù_addr*)&(imr->
imr_mu…üddr
.s_addr));

1798 if(
d©a
->
îr
 !
ERR_OK
) {

1799 
d©a
->
îr
 = 
EADDRNOTAVAIL
;

1807 #i‡
LWIP_TCP


1809 
IPPROTO_TCP
:

1810 
›äame
) {

1811 
TCP_NODELAY
:

1812 i‡(*(*)
›tvÆ
) {

1813 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 |
TF_NODELAY
;

1815 
sock
->
c⁄n
->
pcb
.
t˝
->
Êags
 &~
TF_NODELAY
;

1817 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",

1818 
s
, (*(*)
›tvÆ
)?"on":"off") );

1820 
TCP_KEEPALIVE
:

1821 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = (
u32_t
)(*(*)
›tvÆ
);

1822 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %lu\n",

1823 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1826 #i‡
LWIP_TCP_KEEPALIVE


1827 
TCP_KEEPIDLE
:

1828 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1829 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %lu\n",

1830 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_idÀ
));

1832 
TCP_KEEPINTVL
:

1833 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
 = 1000*(
u32_t
)(*(*)
›tvÆ
);

1834 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %lu\n",

1835 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_ötvl
));

1837 
TCP_KEEPCNT
:

1838 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
 = (
u32_t
)(*(*)
›tvÆ
);

1839 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %lu\n",

1840 
s
, 
sock
->
c⁄n
->
pcb
.
t˝
->
kìp_˙t
));

1847 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


1849 
IPPROTO_UDPLITE
:

1850 
›äame
) {

1851 
UDPLITE_SEND_CSCOV
:

1852 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1854 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = 8;

1856 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_tx
 = *(*)
›tvÆ
;

1858 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV) -> %d\n",

1859 
s
, (*(*)
›tvÆ
)) );

1861 
UDPLITE_RECV_CSCOV
:

1862 i‡((*(*)
›tvÆ
 != 0) && (*(*)optval < 8)) {

1864 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = 8;

1866 
sock
->
c⁄n
->
pcb
.
udp
->
chksum_Àn_rx
 = *(*)
›tvÆ
;

1868 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwip_setsockopt(%d, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV) -> %d\n",

1869 
s
, (*(*)
›tvÆ
)) );

1875 
	`sys_£m_sig«l
(
sock
->
c⁄n
->
›_com∂ëed
);

1876 
	}
}

1879 
	$lwù_io˘l
(
s
, 
cmd
, *
¨gp
)

1881 
lwù_sockë
 *
sock
 = 
	`gë_sockë
(
s
);

1882 
u16_t
 
buÊí
 = 0;

1884 i‡(!
sock
)

1887 
cmd
) {

1888 
FIONREAD
:

1889 i‡(!
¨gp
) {

1890 
	`sock_£t_î∫o
(
sock
, 
EINVAL
);

1894 
	`SYS_ARCH_GET
(
sock
->
c⁄n
->
ªcv_avaû
, *((
u16_t
*)
¨gp
));

1897 i‡(
sock
->
œ°d©a
) {

1898 
buÊí
 = 
	`√tbuf_Àn
(
sock
->
œ°d©a
);

1899 
buÊí
 -
sock
->
œ°off£t
;

1901 *((
u16_t
*)
¨gp
Ë+
buÊí
;

1904 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONREAD, %pË%u\n", 
s
, 
¨gp
, *((
u16_t
*)argp)));

1905 
	`sock_£t_î∫o
(
sock
, 0);

1908 
FIONBIO
:

1909 i‡(
¨gp
 && *(
u32_t
*)argp)

1910 
sock
->
Êags
 |
O_NONBLOCK
;

1912 
sock
->
Êags
 &~
O_NONBLOCK
;

1913 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, FIONBIO, %d)\n", 
s
, !!(
sock
->
Êags
 & 
O_NONBLOCK
)));

1914 
	`sock_£t_î∫o
(
sock
, 0);

1918 
	`LWIP_DEBUGF
(
SOCKETS_DEBUG
, ("lwù_io˘l(%d, UNIMPL: 0x%lx, %p)\n", 
s
, 
cmd
, 
¨gp
));

1919 
	`sock_£t_î∫o
(
sock
, 
ENOSYS
);

1922 
	}
}

	@net/lwip/api/tcpip.c

39 
	~"lwù/›t.h
"

41 #i‡!
NO_SYS


43 
	~"lwù/sys.h
"

44 
	~"lwù/memp.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù_‰ag.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/autoù.h
"

49 
	~"lwù/dh˝.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/dns.h
"

52 
	~"lwù/t˝ù.h
"

53 
	~"lwù/öô.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"√tif/µp_€.h
"

58 (* 
t˝ù_öô_d⁄e
)(*
¨g
);

59 *
t˝ù_öô_d⁄e_¨g
;

60 
sys_mbox_t
 
mbox
 = 
SYS_MBOX_NULL
;

62 #i‡
LWIP_TCPIP_CORE_LOCKING


64 
sys_£m_t
 
lock_t˝ù_c‹e
;

67 #i‡
LWIP_TCP


69 
t˝ù_t˝_timî_a˘ive
;

77 
	$t˝ù_t˝_timî
(*
¨g
)

79 
	`LWIP_UNUSED_ARG
(
¨g
);

82 
	`t˝_tmr
();

84 i‡(
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
) {

86 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

89 
t˝ù_t˝_timî_a˘ive
 = 0;

91 
	}
}

93 #i‡!
NO_SYS


100 
	$t˝_timî_√eded
()

103 i‡(!
t˝ù_t˝_timî_a˘ive
 && (
t˝_a˘ive_pcbs
 || 
t˝_tw_pcbs
)) {

105 
t˝ù_t˝_timî_a˘ive
 = 1;

106 
	`sys_timeout
(
TCP_TMR_INTERVAL
, 
t˝ù_t˝_timî
, 
NULL
);

108 
	}
}

112 #i‡
IP_REASSEMBLY


119 
	$ù_ªass_timî
(*
¨g
)

121 
	`LWIP_UNUSED_ARG
(
¨g
);

122 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: ip_reass_tmr()\n"));

123 
	`ù_ªass_tmr
();

124 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

125 
	}
}

128 #i‡
LWIP_ARP


135 
	$¨p_timî
(*
¨g
)

137 
	`LWIP_UNUSED_ARG
(
¨g
);

138 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:Étharp_tmr()\n"));

139 
	`ëh¨p_tmr
();

140 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

141 
	}
}

144 #i‡
LWIP_DHCP


151 
	$dh˝_timî_cﬂr£
(*
¨g
)

153 
	`LWIP_UNUSED_ARG
(
¨g
);

154 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_coarse_tmr()\n"));

155 
	`dh˝_cﬂr£_tmr
();

156 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

157 
	}
}

165 
	$dh˝_timî_föe
(*
¨g
)

167 
	`LWIP_UNUSED_ARG
(
¨g
);

168 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dhcp_fine_tmr()\n"));

169 
	`dh˝_föe_tmr
();

170 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

171 
	}
}

174 #i‡
LWIP_AUTOIP


181 
	$autoù_timî
(*
¨g
)

183 
	`LWIP_UNUSED_ARG
(
¨g
);

184 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip:áutoip_tmr()\n"));

185 
	`autoù_tmr
();

186 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

187 
	}
}

190 #i‡
LWIP_IGMP


197 
	$igmp_timî
(*
¨g
)

199 
	`LWIP_UNUSED_ARG
(
¨g
);

200 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: igmp_tmr()\n"));

201 
	`igmp_tmr
();

202 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

203 
	}
}

206 #i‡
LWIP_DNS


213 
	$dns_timî
(*
¨g
)

215 
	`LWIP_UNUSED_ARG
(
¨g
);

216 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("tcpip: dns_tmr()\n"));

217 
	`dns_tmr
();

218 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

219 
	}
}

233 
	$t˝ù_thªad
(*
¨g
)

235 
t˝ù_msg
 *
msg
;

236 
	`LWIP_UNUSED_ARG
(
¨g
);

238 #i‡
IP_REASSEMBLY


239 
	`sys_timeout
(
IP_TMR_INTERVAL
, 
ù_ªass_timî
, 
NULL
);

241 #i‡
LWIP_ARP


242 
	`sys_timeout
(
ARP_TMR_INTERVAL
, 
¨p_timî
, 
NULL
);

244 #i‡
LWIP_DHCP


245 
	`sys_timeout
(
DHCP_COARSE_TIMER_MSECS
, 
dh˝_timî_cﬂr£
, 
NULL
);

246 
	`sys_timeout
(
DHCP_FINE_TIMER_MSECS
, 
dh˝_timî_föe
, 
NULL
);

248 #i‡
LWIP_AUTOIP


249 
	`sys_timeout
(
AUTOIP_TMR_INTERVAL
, 
autoù_timî
, 
NULL
);

251 #i‡
LWIP_IGMP


252 
	`sys_timeout
(
IGMP_TMR_INTERVAL
, 
igmp_timî
, 
NULL
);

254 #i‡
LWIP_DNS


255 
	`sys_timeout
(
DNS_TMR_INTERVAL
, 
dns_timî
, 
NULL
);

258 i‡(
t˝ù_öô_d⁄e
 !
NULL
) {

259 
	`t˝ù_öô_d⁄e
(
t˝ù_öô_d⁄e_¨g
);

262 
	`LOCK_TCPIP_CORE
();

264 
	`sys_mbox_„tch
(
mbox
, (*)&
msg
);

265 
msg
->
ty≥
) {

266 #i‡
LWIP_NETCONN


267 
TCPIP_MSG_API
:

268 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: API mesßgê%p\n", (*)
msg
));

269 
msg
->msg.
≠imsg
->
	`fun˘i⁄
(&(msg->msg.apimsg->msg));

273 
TCPIP_MSG_INPKT
:

274 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: PACKET %p\n", (*)
msg
));

275 #i‡
LWIP_ARP


276 i‡(
msg
->msg.
öp
.
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

277 
	`ëhî√t_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

280 { 
	`ù_öput
(
msg
->msg.
öp
.
p
, msg->msg.öp.
√tif
);

282 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

285 #i‡
LWIP_NETIF_API


286 
TCPIP_MSG_NETIFAPI
:

287 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: Nëi‡API mesßgê%p\n", (*)
msg
));

288 
msg
->msg.
√tiÁpimsg
->
	`fun˘i⁄
(&(msg->msg.netifapimsg->msg));

292 
TCPIP_MSG_CALLBACK
:

293 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: CALLBACK %p\n", (*)
msg
));

294 
msg
->msg.
cb
.
	`f
(msg->msg.cb.
˘x
);

295 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

298 
TCPIP_MSG_TIMEOUT
:

299 
	`LWIP_DEBUGF
(
TCPIP_DEBUG
, ("t˝ù_thªad: TIMEOUT %p\n", (*)
msg
));

301 if(
msg
->msg.
tmo
.
m£cs
 != 0xffffffff)

302 
	`sys_timeout
 (
msg
->msg.
tmo
.
m£cs
, msg->msg.tmo.
h
, msg->msg.tmo.
¨g
);

304 
	`sys_u¡imeout
 (
msg
->msg.
tmo
.
h
, msg->msg.tmo.
¨g
);

305 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

312 
	}
}

321 
îr_t


322 
	$t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

324 
t˝ù_msg
 *
msg
;

326 i‡(
mbox
 !
SYS_MBOX_NULL
) {

327 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_INPKT
);

328 i‡(
msg
 =
NULL
) {

329  
ERR_MEM
;

332 
msg
->
ty≥
 = 
TCPIP_MSG_INPKT
;

333 
msg
->msg.
öp
.
p
 =Ö;

334 
msg
->msg.
öp
.
√tif
 = inp;

335 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

336 
	`memp_‰ì
(
MEMP_TCPIP_MSG_INPKT
, 
msg
);

337  
ERR_MEM
;

339  
ERR_OK
;

341  
ERR_VAL
;

342 
	}
}

355 
îr_t


356 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
)

358 
t˝ù_msg
 *
msg
;

360 i‡(
mbox
 !
SYS_MBOX_NULL
) {

361 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

362 i‡(
msg
 =
NULL
) {

363  
ERR_MEM
;

366 
msg
->
ty≥
 = 
TCPIP_MSG_CALLBACK
;

367 
msg
->msg.
cb
.
f
 = f;

368 
msg
->msg.
cb
.
˘x
 = ctx;

369 i‡(
block
) {

370 
	`sys_mbox_po°
(
mbox
, 
msg
);

372 i‡(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë!
ERR_OK
) {

373 
	`memp_‰ì
(
MEMP_TCPIP_MSG_API
, 
msg
);

374  
ERR_MEM
;

377  
ERR_OK
;

379  
ERR_VAL
;

380 
	}
}

382 
îr_t


383 
	$t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

385 
t˝ù_msg
 *
msg
;

387 i‡(
mbox
 !
SYS_MBOX_NULL
) {

388 
msg
 = 
	`memp_mÆloc
(
MEMP_TCPIP_MSG_API
);

389 i‡(
msg
 =
NULL
) {

390  
ERR_MEM
;

393 
msg
->
ty≥
 = 
TCPIP_MSG_TIMEOUT
;

394 
msg
->msg.
tmo
.
m£cs
 = msecs;

395 
msg
->msg.
tmo
.
h
 = h;

396 
msg
->msg.
tmo
.
¨g
 =árg;

397 
	`sys_mbox_po°
(
mbox
, 
msg
);

398  
ERR_OK
;

400  
ERR_VAL
;

401 
	}
}

403 #i‡
LWIP_NETCONN


412 
îr_t


413 
	$t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
)

415 
t˝ù_msg
 
msg
;

417 i‡(
mbox
 !
SYS_MBOX_NULL
) {

418 
msg
.
ty≥
 = 
TCPIP_MSG_API
;

419 
msg
.msg.
≠imsg
 =ápimsg;

420 
	`sys_mbox_po°
(
mbox
, &
msg
);

421 
	`sys_¨ch_£m_waô
(
≠imsg
->
msg
.
c⁄n
->
›_com∂ëed
, 0);

422  
ERR_OK
;

424  
ERR_VAL
;

425 
	}
}

427 #i‡
LWIP_TCPIP_CORE_LOCKING


436 
îr_t


437 
	$t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
)

439 
	`LOCK_TCPIP_CORE
();

440 
≠imsg
->
	`fun˘i⁄
(&◊pimsg->
msg
));

441 
	`UNLOCK_TCPIP_CORE
();

442  
ERR_OK
;

444 
	}
}

448 #i‡
LWIP_NETIF_API


449 #i‡!
LWIP_TCPIP_CORE_LOCKING


457 
îr_t


458 
	$t˝ù_√tiÁpi
(
√tiÁpi_msg
* 
√tiÁpimsg
)

460 
t˝ù_msg
 
msg
;

462 i‡(
mbox
 !
SYS_MBOX_NULL
) {

463 
√tiÁpimsg
->
msg
.
£m
 = 
	`sys_£m_√w
(0);

464 i‡(
√tiÁpimsg
->
msg
.
£m
 =
SYS_SEM_NULL
) {

465 
√tiÁpimsg
->
msg
.
îr
 = 
ERR_MEM
;

466  
√tiÁpimsg
->
msg
.
îr
;

469 
msg
.
ty≥
 = 
TCPIP_MSG_NETIFAPI
;

470 
msg
.msg.
√tiÁpimsg
 =Çetifapimsg;

471 
	`sys_mbox_po°
(
mbox
, &
msg
);

472 
	`sys_£m_waô
(
√tiÁpimsg
->
msg
.
£m
);

473 
	`sys_£m_‰ì
(
√tiÁpimsg
->
msg
.
£m
);

474  
√tiÁpimsg
->
msg
.
îr
;

476  
ERR_VAL
;

477 
	}
}

487 
îr_t


488 
	$t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
* 
√tiÁpimsg
)

490 
	`LOCK_TCPIP_CORE
();

491 
√tiÁpimsg
->
	`fun˘i⁄
(&“ëiÁpimsg->
msg
));

492 
	`UNLOCK_TCPIP_CORE
();

493  
√tiÁpimsg
->
msg
.
îr
;

494 
	}
}

507 
t˝ù_öô
((* 
öôfunc
)(*), *
¨g
)

509 
	`lwù_öô
();

511 
t˝ù_öô_d⁄e
 = 
öôfunc
;

512 
t˝ù_öô_d⁄e_¨g
 = 
¨g
;

513 
mbox
 = 
	`sys_mbox_√w
(
TCPIP_MBOX_SIZE
);

514 #i‡
LWIP_TCPIP_CORE_LOCKING


515 
lock_t˝ù_c‹e
 = 
	`sys_£m_√w
(1);

518 
	`sys_thªad_√w
(
TCPIP_THREAD_NAME
, 
t˝ù_thªad
, 
NULL
, 
TCPIP_THREAD_STACKSIZE
, 
TCPIP_THREAD_PRIO
);

519 
	}
}

528 
	$pbuf_‰ì_öt
(*
p
)

530 
pbuf
 *
q
 = 
p
;

531 
	`pbuf_‰ì
(
q
);

532 
	}
}

540 
îr_t


541 
	$pbuf_‰ì_ˇŒback
(
pbuf
 *
p
)

543  
	`t˝ù_ˇŒback_wôh_block
(
pbuf_‰ì_öt
, 
p
, 0);

544 
	}
}

553 
îr_t


554 
	$mem_‰ì_ˇŒback
(*
m
)

556  
	`t˝ù_ˇŒback_wôh_block
(
mem_‰ì
, 
m
, 0);

557 
	}
}

	@net/lwip/core/dhcp.c

71 
	~"lwù/›t.h
"

73 #i‡
LWIP_DHCP


75 
	~"lwù/°©s.h
"

76 
	~"lwù/mem.h
"

77 
	~"lwù/udp.h
"

78 
	~"lwù/ù_addr.h
"

79 
	~"lwù/√tif.h
"

80 
	~"lwù/öë.h
"

81 
	~"lwù/sys.h
"

82 
	~"lwù/dh˝.h
"

83 
	~"lwù/autoù.h
"

84 
	~"lwù/dns.h
"

85 
	~"√tif/ëh¨p.h
"

87 
	~<°rög.h
>

92 
u32_t
 
	gxid
 = 0xABCD0000;

95 
dh˝_h™dÀ_ack
(
√tif
 *netif);

96 
dh˝_h™dÀ_«k
(
√tif
 *netif);

97 
dh˝_h™dÀ_of„r
(
√tif
 *netif);

99 
îr_t
 
dh˝_discovî
(
√tif
 *netif);

100 
îr_t
 
dh˝_£À˘
(
√tif
 *netif);

101 
dh˝_check
(
√tif
 *netif);

102 
dh˝_böd
(
√tif
 *netif);

103 #i‡
DHCP_DOES_ARP_CHECK


104 
îr_t
 
dh˝_de˛öe
(
√tif
 *netif);

106 
îr_t
 
dh˝_ªböd
(
√tif
 *netif);

107 
dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
);

110 
dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

111 
îr_t
 
dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp);

112 
u8_t
 *
dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, u8_à
›ti⁄_ty≥
);

113 
u8_t
 
dh˝_gë_›ti⁄_byã
(u8_à*
±r
);

115 
u16_t
 
dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
);

117 
u32_t
 
dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
);

118 
dh˝_‰ì_ª∂y
(
dh˝
 *dhcp);

121 
dh˝_timeout
(
√tif
 *netif);

122 
dh˝_t1_timeout
(
√tif
 *netif);

123 
dh˝_t2_timeout
(
√tif
 *netif);

127 
îr_t
 
dh˝_¸óã_ªque°
(
√tif
 *netif);

129 
dh˝_dñëe_ªque°
(
√tif
 *netif);

131 
dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
);

133 
dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
);

134 
dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
);

135 
dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
);

137 
dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp);

152 
	$dh˝_h™dÀ_«k
(
√tif
 *netif)

154 
dh˝
 *dh˝ = 
√tif
->dhcp;

155 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_«k“ëif=%pË%c%c%"
U16_F
"\n",

156 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

158 
	`√tif_£t_down
(
√tif
);

160 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

161 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

162 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

164 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

166 
	`dh˝_discovî
(
√tif
);

167 
	}
}

179 
	$dh˝_check
(
√tif
 *netif)

181 
dh˝
 *dh˝ = 
√tif
->dhcp;

182 
îr_t
 
ªsu…
;

183 
u16_t
 
m£cs
;

184 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_check“ëif=%pË%c%c\n", (*)
√tif
, (
s16_t
Íëif->
«me
[0],

185 (
s16_t
)
√tif
->
«me
[1]));

188 
ªsu…
 = 
	`ëh¨p_quîy
(
√tif
, &
dh˝
->
of„ªd_ù_addr
, 
NULL
);

189 i‡(
ªsu…
 !
ERR_OK
) {

190 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_check: couldÇotÖerform ARP query\n"));

192 
dh˝
->
åõs
++;

193 
m£cs
 = 500;

194 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

195 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_check(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

196 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_CHECKING
);

197 
	}
}

205 
	$dh˝_h™dÀ_of„r
(
√tif
 *netif)

207 
dh˝
 *dh˝ = 
√tif
->dhcp;

209 
u8_t
 *
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SERVER_ID
);

210 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_h™dÀ_of„r“ëif=%pË%c%c%"
U16_F
"\n",

211 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

212 i‡(
›ti⁄_±r
 !
NULL
) {

213 
dh˝
->
£rvî_ù_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

214 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): sîvî 0x%08"
X32_F
"\n", 
dh˝
->
£rvî_ù_addr
.
addr
));

216 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, (
ù_addr
 *)&dh˝->
msg_ö
->
yüddr
);

217 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_h™dÀ_of„r(): of„∏f‹ 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

219 
	`dh˝_£À˘
(
√tif
);

221 
	}
}

231 
îr_t


232 
	$dh˝_£À˘
(
√tif
 *netif)

234 
dh˝
 *dh˝ = 
√tif
->dhcp;

235 
îr_t
 
ªsu…
;

236 
u16_t
 
m£cs
;

237 #i‡
LWIP_NETIF_HOSTNAME


238 c⁄° *
p
;

241 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_£À˘“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

244 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

245 i‡(
ªsu…
 =
ERR_OK
) {

246 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

247 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

249 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

250 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

253 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

254 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

256 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

257 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

259 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

260 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

261 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

262 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

263 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

265 #i‡
LWIP_NETIF_HOSTNAME


266 
p
 = (c⁄° *)
√tif
->
ho°«me
;

267 i‡(
p
!=
NULL
) {

268 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_HOSTNAME
, 
	`°æí
(
p
));

269 *
p
) {

270 
	`dh˝_›ti⁄_byã
(
dh˝
, *
p
++);

275 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

277 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

282 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

284 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

285 
	`dh˝_dñëe_ªque°
(
√tif
);

286 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_select: REQUESTING\n"));

287 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REQUESTING
);

289 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_select: couldÇotállocate DHCPÑequest\n"));

291 
dh˝
->
åõs
++;

292 
m£cs
 = 
dh˝
->
åõs
 < 4 ? dhcp->tries * 1000 : 4 * 1000;

293 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

294 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_£À˘(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

295  
ªsu…
;

296 
	}
}

303 
	$dh˝_cﬂr£_tmr
()

305 
√tif
 *√ti‡
√tif_li°
;

306 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_coarse_tmr()\n"));

308 
√tif
 !
NULL
) {

310 i‡(
√tif
->
dh˝
 !
NULL
) {

312 i‡(
√tif
->
dh˝
->
t2_timeout
-- == 1) {

313 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å2Åimeout\n"));

315 
	`dh˝_t2_timeout
(
√tif
);

317 } i‡(
√tif
->
dh˝
->
t1_timeout
-- == 1) {

318 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_coarse_tmr():Å1Åimeout\n"));

320 
	`dh˝_t1_timeout
(
√tif
);

324 
√tif
 =Çëif->
√xt
;

326 
	}
}

336 
	$dh˝_föe_tmr
()

338 
√tif
 *√ti‡
√tif_li°
;

340 
√tif
 !
NULL
) {

342 i‡(
√tif
->
dh˝
 !
NULL
) {

344 i‡(
√tif
->
dh˝
->
ªque°_timeout
 > 1) {

345 
√tif
->
dh˝
->
ªque°_timeout
--;

347 i‡(
√tif
->
dh˝
->
ªque°_timeout
 == 1) {

348 
√tif
->
dh˝
->
ªque°_timeout
--;

350 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_fine_tmr():ÑequestÅimeout\n"));

352 
	`dh˝_timeout
(
√tif
);

356 
√tif
 =Çëif->
√xt
;

358 
	}
}

369 
	$dh˝_timeout
(
√tif
 *netif)

371 
dh˝
 *dh˝ = 
√tif
->dhcp;

372 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_timeout()\n"));

374 i‡((
dh˝
->
°©e
 =
DHCP_BACKING_OFF
Ë|| (dh˝->°©ê=
DHCP_SELECTING
)) {

375 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_timeout():Ñestarting discovery\n"));

376 
	`dh˝_discovî
(
√tif
);

378 } i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

379 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING, DHCPÑequestÅimed out\n"));

380 i‡(
dh˝
->
åõs
 <= 5) {

381 
	`dh˝_£À˘
(
√tif
);

383 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REQUESTING,Ñeleasing,Ñestarting\n"));

384 
	`dh˝_ªÀa£
(
√tif
);

385 
	`dh˝_discovî
(
√tif
);

388 } i‡(
dh˝
->
°©e
 =
DHCP_CHECKING
) {

389 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): CHECKING, ARPÑequestÅimed out\n"));

390 i‡(
dh˝
->
åõs
 <= 1) {

391 
	`dh˝_check
(
√tif
);

396 
	`dh˝_böd
(
√tif
);

400 i‡(
dh˝
->
°©e
 =
DHCP_RENEWING
) {

401 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RENEWING, DHCPÑequestÅimed out\n"));

404 
	`dh˝_ª√w
(
√tif
);

406 } i‡(
dh˝
->
°©e
 =
DHCP_REBINDING
) {

407 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): REBINDING, DHCPÑequestÅimed out\n"));

408 i‡(
dh˝
->
åõs
 <= 8) {

409 
	`dh˝_ªböd
(
√tif
);

411 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));

412 
	`dh˝_ªÀa£
(
√tif
);

413 
	`dh˝_discovî
(
√tif
);

416 
	}
}

424 
	$dh˝_t1_timeout
(
√tif
 *netif)

426 
dh˝
 *dh˝ = 
√tif
->dhcp;

427 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout()\n"));

428 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

431 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t1_timeout(): mustÑenew\n"));

432 
	`dh˝_ª√w
(
√tif
);

434 
	}
}

442 
	$dh˝_t2_timeout
(
√tif
 *netif)

444 
dh˝
 *dh˝ = 
√tif
->dhcp;

445 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout()\n"));

446 i‡((
dh˝
->
°©e
 =
DHCP_REQUESTING
Ë|| (dh˝->°©ê=
DHCP_BOUND
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

448 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_t2_timeout(): mustÑebind\n"));

449 
	`dh˝_ªböd
(
√tif
);

451 
	}
}

459 
	$dh˝_h™dÀ_ack
(
√tif
 *netif)

461 
dh˝
 *dh˝ = 
√tif
->dhcp;

462 
u8_t
 *
›ti⁄_±r
;

464 
dh˝
->
of„ªd_¢_mask
.
addr
 = 0;

465 
dh˝
->
of„ªd_gw_addr
.
addr
 = 0;

466 
dh˝
->
of„ªd_bc_addr
.
addr
 = 0;

469 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_LEASE_TIME
);

470 i‡(
›ti⁄_±r
 !
NULL
) {

472 
dh˝
->
of„ªd_t0_Àa£
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

475 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T1
);

476 i‡(
›ti⁄_±r
 !
NULL
) {

478 
dh˝
->
of„ªd_t1_ª√w
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

481 
dh˝
->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t0_Àa£
 / 2;

485 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_T2
);

486 i‡(
›ti⁄_±r
 !
NULL
) {

488 
dh˝
->
of„ªd_t2_ªböd
 = 
	`dh˝_gë_›ti⁄_l⁄g
(
›ti⁄_±r
 + 2);

491 
dh˝
->
of„ªd_t2_ªböd
 = dh˝->
of„ªd_t0_Àa£
;

495 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, &dh˝->
msg_ö
->
yüddr
);

503 
	`ù_addr_£t
(&
dh˝
->
of„ªd_si_addr
, &dh˝->
msg_ö
->
süddr
);

505 i‡(
dh˝
->
msg_ö
->
fûe
[0]) {

506 
dh˝
->
boŸ_fûe_«me
 = 
	`mem_mÆloc
(
	`°æí
(dh˝->
msg_ö
->
fûe
) + 1);

507 
	`°r˝y
(
dh˝
->
boŸ_fûe_«me
, dh˝->
msg_ö
->
fûe
);

512 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

514 i‡(
›ti⁄_±r
 !
NULL
) {

515 
dh˝
->
of„ªd_¢_mask
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

519 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_ROUTER
);

520 i‡(
›ti⁄_±r
 !
NULL
) {

521 
dh˝
->
of„ªd_gw_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

525 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

526 i‡(
›ti⁄_±r
 !
NULL
) {

527 
dh˝
->
of„ªd_bc_addr
.
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2]));

531 
›ti⁄_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

532 i‡(
›ti⁄_±r
 !
NULL
) {

533 
u8_t
 
n
;

534 
dh˝
->
dns_cou¡
 = 
	`dh˝_gë_›ti⁄_byã
(&
›ti⁄_±r
[1]Ë/ (
u32_t
)(
ù_addr
);

536 i‡(
dh˝
->
dns_cou¡
 > 
DHCP_MAX_DNS
)

537 
dh˝
->
dns_cou¡
 = 
DHCP_MAX_DNS
;

538 
n
 = 0;Ç < 
dh˝
->
dns_cou¡
;Ç++) {

539 
dh˝
->
of„ªd_dns_addr
[
n
].
addr
 = 
	`ht⁄l
(
	`dh˝_gë_›ti⁄_l⁄g
(&
›ti⁄_±r
[2 +Ç * 4]));

540 #i‡
LWIP_DNS


541 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&(
dh˝
->
of„ªd_dns_addr
[n].
addr
)));

544 #i‡
LWIP_DNS


545 
	`dns_£t£rvî
–
n
, (
ù_addr
 *)(&
ù_addr_™y
));

548 
	}
}

562 
îr_t


563 
	$dh˝_°¨t
(
√tif
 *netif)

565 
dh˝
 *dhcp;

566 
îr_t
 
ªsu…
 = 
ERR_OK
;

568 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

569 
dh˝
 = 
√tif
->dhcp;

570 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

573 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

576 i‡(
dh˝
 =
NULL
) {

577 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): startingÇew DHCP client\n"));

578 
dh˝
 = 
	`mem_mÆloc
((dhcp));

579 i‡(
dh˝
 =
NULL
) {

580 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇotállocate dhcp\n"));

581  
ERR_MEM
;

584 
√tif
->
dh˝
 = dhcp;

585 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start():állocated dhcp"));

588 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("dhcp_start():Ñestarting DHCP configuration\n"));

592 
	`mem£t
(
dh˝
, 0, (dhcp));

594 
dh˝
->
pcb
 = 
	`udp_√w
();

595 i‡(
dh˝
->
pcb
 =
NULL
) {

596 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): couldÇot obtainÖcb\n"));

597 
	`mem_‰ì
((*)
dh˝
);

598 
√tif
->
dh˝
 = dh˝ = 
NULL
;

599  
ERR_MEM
;

602 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

603 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

605 
	`udp_ªcv
(
dh˝
->
pcb
, 
dh˝_ªcv
, 
√tif
);

606 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_start(): starting DHCP configuration\n"));

608 
ªsu…
 = 
	`dh˝_discovî
(
√tif
);

609 i‡(
ªsu…
 !
ERR_OK
) {

611 
	`dh˝_°›
(
√tif
);

612  
ERR_MEM
;

615 
√tif
->
Êags
 |
NETIF_FLAG_DHCP
;

616  
ªsu…
;

617 
	}
}

629 
	$dh˝_öf‹m
(
√tif
 *netif)

631 
dh˝
 *dh˝, *
ﬁd_dh˝
 = 
√tif
->dhcp;

632 
îr_t
 
ªsu…
 = 
ERR_OK
;

633 
dh˝
 = 
	`mem_mÆloc
((dhcp));

634 i‡(
dh˝
 =
NULL
) {

635 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇotállocate dhcp\n"));

638 
√tif
->
dh˝
 = dhcp;

639 
	`mem£t
(
dh˝
, 0, (dhcp));

641 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform():állocated dhcp\n"));

642 
dh˝
->
pcb
 = 
	`udp_√w
();

643 i‡(
dh˝
->
pcb
 =
NULL
) {

644 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform(): couldÇot obtainÖcb"));

645 
	`mem_‰ì
((*)
dh˝
);

648 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_inform(): createdÇew udpÖcb\n"));

650 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

651 i‡(
ªsu…
 =
ERR_OK
) {

653 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

654 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_INFORM
);

656 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

658 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

660 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

662 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

664 
	`udp_böd
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_CLIENT_PORT
);

665 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
);

666 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_inform: INFORMING\n"));

667 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

668 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

669 
	`dh˝_dñëe_ªque°
(
√tif
);

671 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_inform: couldÇotállocate DHCPÑequest\n"));

674 i‡(
dh˝
 !
NULL
) {

675 i‡(
dh˝
->
pcb
 !
NULL
) {

676 
	`udp_ªmove
(
dh˝
->
pcb
);

678 
dh˝
->
pcb
 = 
NULL
;

679 
	`mem_‰ì
((*)
dh˝
);

680 
√tif
->
dh˝
 = 
ﬁd_dh˝
;

682 
	}
}

684 #i‡
DHCP_DOES_ARP_CHECK


691 
	$dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
)

693 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

694 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_arp_reply()\n"));

696 i‡((
√tif
->
dh˝
 !
NULL
Ë&& (√tif->dh˝->
°©e
 =
DHCP_CHECKING
)) {

697 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_¨p_ª∂y(): CHECKING,áΩÑïly f‹ 0x%08"
X32_F
"\n", 
addr
->addr));

700 i‡(
	`ù_addr_cmp
(
addr
, &
√tif
->
dh˝
->
of„ªd_ù_addr
)) {

702 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1, ("dhcp_arp_reply():árpÑeply matched with offeredáddress, declining\n"));

703 
	`dh˝_de˛öe
(
√tif
);

706 
	}
}

717 
îr_t


718 
	$dh˝_de˛öe
(
√tif
 *netif)

720 
dh˝
 *dh˝ = 
√tif
->dhcp;

721 
îr_t
 
ªsu…
 = 
ERR_OK
;

722 
u16_t
 
m£cs
;

723 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_decline()\n"));

724 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BACKING_OFF
);

726 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

727 i‡(
ªsu…
 =
ERR_OK
) {

728 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

729 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DECLINE
);

731 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

732 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

734 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

735 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

737 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

739 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

742 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

744 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

745 
	`dh˝_dñëe_ªque°
(
√tif
);

746 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_decline: BACKING OFF\n"));

748 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_decline: couldÇotállocate DHCPÑequest\n"));

750 
dh˝
->
åõs
++;

751 
m£cs
 = 10*1000;

752 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

753 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_de˛öe(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

754  
ªsu…
;

755 
	}
}

764 
îr_t


765 
	$dh˝_discovî
(
√tif
 *netif)

767 
dh˝
 *dh˝ = 
√tif
->dhcp;

768 
îr_t
 
ªsu…
 = 
ERR_OK
;

769 
u16_t
 
m£cs
;

770 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_discover()\n"));

771 
	`ù_addr_£t
(&
dh˝
->
of„ªd_ù_addr
, 
IP_ADDR_ANY
);

773 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

774 i‡(
ªsu…
 =
ERR_OK
) {

775 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: makingÑequest\n"));

776 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

777 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_DISCOVER
);

779 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

780 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

782 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_PARAMETER_REQUEST_LIST
, 4 );

783 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_SUBNET_MASK
);

784 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_ROUTER
);

785 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_BROADCAST
);

786 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_OPTION_DNS_SERVER
);

788 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

790 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover:Ñealloc()ing\n"));

791 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

793 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

794 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));

795 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

796 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dhcp_discover: deleting()ing\n"));

797 
	`dh˝_dñëe_ªque°
(
√tif
);

798 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_discover: SELECTING\n"));

799 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_SELECTING
);

801 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_discover: couldÇotállocate DHCPÑequest\n"));

803 
dh˝
->
åõs
++;

804 #i‡
LWIP_DHCP_AUTOIP_COOP


806 if(
dh˝
->
åõs
 >9 && dh˝->
autoù_co›_°©e
 =
DHCP_AUTOIP_COOP_STATE_OFF
) {

807 
dh˝
->
autoù_co›_°©e
 = 
DHCP_AUTOIP_COOP_STATE_ON
;

808 
	`autoù_°¨t
(
√tif
);

811 
m£cs
 = 
dh˝
->
åõs
 < 4 ? (dhcp->tries + 1) * 1000 : 10 * 1000;

812 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

813 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_discovî(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

814  
ªsu…
;

815 
	}
}

824 
	$dh˝_böd
(
√tif
 *netif)

826 
u32_t
 
timeout
;

827 
dh˝
 *dhcp;

828 
ù_addr
 
¢_mask
, 
gw_addr
;

829 
	`LWIP_ERROR
("dh˝_böd:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

830 
dh˝
 = 
√tif
->dhcp;

831 
	`LWIP_ERROR
("dh˝_böd: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

832 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_böd“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
));

835 i‡(
dh˝
->
of„ªd_t1_ª√w
 != 0xffffffffUL) {

837 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å1ÑíewÆÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t1_ª√w
));

838 
timeout
 = (
dh˝
->
of„ªd_t1_ª√w
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

839 if(
timeout
 > 0xffff) {

840 
timeout
 = 0xffff;

842 
dh˝
->
t1_timeout
 = (
u16_t
)
timeout
;

843 i‡(
dh˝
->
t1_timeout
 == 0) {

844 
dh˝
->
t1_timeout
 = 1;

846 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t1_ª√w
*1000));

849 i‡(
dh˝
->
of„ªd_t2_ªböd
 != 0xffffffffUL) {

850 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_böd():Å2ÑebödÅimî %"
U32_F
" secs\n", 
dh˝
->
of„ªd_t2_ªböd
));

851 
timeout
 = (
dh˝
->
of„ªd_t2_ªböd
 + 
DHCP_COARSE_TIMER_SECS
 / 2) / DHCP_COARSE_TIMER_SECS;

852 if(
timeout
 > 0xffff) {

853 
timeout
 = 0xffff;

855 
dh˝
->
t2_timeout
 = (
u16_t
)
timeout
;

856 i‡(
dh˝
->
t2_timeout
 == 0) {

857 
dh˝
->
t2_timeout
 = 1;

859 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): sëÑeque°Åimeouà%"
U32_F
" m£cs\n", 
dh˝
->
of„ªd_t2_ªböd
*1000));

862 
	`ù_addr_£t
(&
¢_mask
, &
dh˝
->
of„ªd_¢_mask
);

866 i‡(
¢_mask
.
addr
 == 0) {

868 
u8_t
 
fú°_o˘ë
 = 
	`ù4_addr1
(&
¢_mask
);

869 i‡(
fú°_o˘ë
 <= 127) {

870 
¢_mask
.
addr
 = 
	`ht⁄l
(0xff000000);

871 } i‡(
fú°_o˘ë
 >= 192) {

872 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffffff00);

874 
¢_mask
.
addr
 = 
	`ht⁄l
(0xffff0000);

878 
	`ù_addr_£t
(&
gw_addr
, &
dh˝
->
of„ªd_gw_addr
);

880 i‡(
gw_addr
.
addr
 == 0) {

882 
gw_addr
.
addr
 = (
dh˝
->
of„ªd_ù_addr
.add∏& 
¢_mask
.addr);

884 
gw_addr
.
addr
 |
	`ht⁄l
(0x00000001);

887 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): IP: 0x%08"
X32_F
"\n", 
dh˝
->
of„ªd_ù_addr
.
addr
));

888 
	`√tif_£t_ùaddr
(
√tif
, &
dh˝
->
of„ªd_ù_addr
);

889 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): SN: 0x%08"
X32_F
"\n", 
¢_mask
.
addr
));

890 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

891 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_STATE
, ("dh˝_böd(): GW: 0x%08"
X32_F
"\n", 
gw_addr
.
addr
));

892 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

894 
	`√tif_£t_up
(
√tif
);

896 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_BOUND
);

897 
	}
}

904 
îr_t


905 
	$dh˝_ª√w
(
√tif
 *netif)

907 
dh˝
 *dh˝ = 
√tif
->dhcp;

908 
îr_t
 
ªsu…
;

909 
u16_t
 
m£cs
;

910 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_renew()\n"));

911 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_RENEWING
);

914 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

915 i‡(
ªsu…
 =
ERR_OK
) {

917 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

918 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

920 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

922 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

925 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

926 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

930 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

931 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

934 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

936 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

938 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

939 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

940 
	`dh˝_dñëe_ªque°
(
√tif
);

942 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_renew: RENEWING\n"));

944 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_renew: couldÇotállocate DHCPÑequest\n"));

946 
dh˝
->
åõs
++;

948 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 2000 : 20 * 1000;

949 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

950 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ª√w(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

951  
ªsu…
;

952 
	}
}

959 
îr_t


960 
	$dh˝_ªböd
(
√tif
 *netif)

962 
dh˝
 *dh˝ = 
√tif
->dhcp;

963 
îr_t
 
ªsu…
;

964 
u16_t
 
m£cs
;

965 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind()\n"));

966 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_REBINDING
);

969 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

970 i‡(
ªsu…
 =
ERR_OK
) {

972 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

973 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_REQUEST
);

975 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MAX_MSG_SIZE
, 
DHCP_OPTION_MAX_MSG_SIZE_LEN
);

976 
	`dh˝_›ti⁄_sh‹t
(
dh˝
, 576);

979 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_REQUESTED_IP
, 4);

980 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
of„ªd_ù_addr
.
addr
));

982 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_SERVER_ID
, 4);

983 
	`dh˝_›ti⁄_l⁄g
(
dh˝
, 
	`¡ohl
(dh˝->
£rvî_ù_addr
.
addr
));

986 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

988 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

991 
	`udp_c⁄√˘
(
dh˝
->
pcb
, 
IP_ADDR_ANY
, 
DHCP_SERVER_PORT
);

992 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, 
IP_ADDR_BROADCAST
, 
DHCP_SERVER_PORT
, 
√tif
);

993 
	`dh˝_dñëe_ªque°
(
√tif
);

994 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_rebind: REBINDING\n"));

996 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_rebind: couldÇotállocate DHCPÑequest\n"));

998 
dh˝
->
åõs
++;

999 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1000 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1001 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªböd(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1002  
ªsu…
;

1003 
	}
}

1010 
îr_t


1011 
	$dh˝_ªÀa£
(
√tif
 *netif)

1013 
dh˝
 *dh˝ = 
√tif
->dhcp;

1014 
îr_t
 
ªsu…
;

1015 
u16_t
 
m£cs
;

1016 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_release()\n"));

1019 
	`dh˝_£t_°©e
(
dh˝
, 
DHCP_OFF
);

1021 
dh˝
->
£rvî_ù_addr
.
addr
 = 0;

1022 
dh˝
->
of„ªd_ù_addr
.
addr
 = dh˝->
of„ªd_¢_mask
.addr = 0;

1023 
dh˝
->
of„ªd_gw_addr
.
addr
 = dh˝->
of„ªd_bc_addr
.addr = 0;

1024 
dh˝
->
of„ªd_t0_Àa£
 = dh˝->
of„ªd_t1_ª√w
 = dh˝->
of„ªd_t2_ªböd
 = 0;

1025 
dh˝
->
dns_cou¡
 = 0;

1028 
ªsu…
 = 
	`dh˝_¸óã_ªque°
(
√tif
);

1029 i‡(
ªsu…
 =
ERR_OK
) {

1030 
	`dh˝_›ti⁄
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
, 
DHCP_OPTION_MESSAGE_TYPE_LEN
);

1031 
	`dh˝_›ti⁄_byã
(
dh˝
, 
DHCP_RELEASE
);

1033 
	`dh˝_›ti⁄_åaûî
(
dh˝
);

1035 
	`pbuf_ªÆloc
(
dh˝
->
p_out
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
 + dh˝->
›ti⁄s_out_Àn
);

1037 
	`udp_c⁄√˘
(
dh˝
->
pcb
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
);

1038 
	`udp_£ndto_if
(
dh˝
->
pcb
, dh˝->
p_out
, &dh˝->
£rvî_ù_addr
, 
DHCP_SERVER_PORT
, 
√tif
);

1039 
	`dh˝_dñëe_ªque°
(
√tif
);

1040 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dhcp_release: RELEASED, DHCP_OFF\n"));

1042 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_release: couldÇotállocate DHCPÑequest\n"));

1044 
dh˝
->
åõs
++;

1045 
m£cs
 = 
dh˝
->
åõs
 < 10 ? dhcp->tries * 1000 : 10 * 1000;

1046 
dh˝
->
ªque°_timeout
 = (
m£cs
 + 
DHCP_FINE_TIMER_MSECS
 - 1) / DHCP_FINE_TIMER_MSECS;

1047 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("dh˝_ªÀa£(): sëÑeque°Åimeouà%"
U16_F
" m£cs\n", 
m£cs
));

1049 
	`√tif_£t_down
(
√tif
);

1051 
	`√tif_£t_ùaddr
(
√tif
, 
IP_ADDR_ANY
);

1052 
	`√tif_£t_gw
(
√tif
, 
IP_ADDR_ANY
);

1053 
	`√tif_£t_√tmask
(
√tif
, 
IP_ADDR_ANY
);

1056  
ªsu…
;

1057 
	}
}

1065 
	$dh˝_°›
(
√tif
 *netif)

1067 
dh˝
 *dh˝ = 
√tif
->dhcp;

1068 
	`LWIP_ERROR
("dh˝_°›:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1070 
√tif
->
Êags
 &~
NETIF_FLAG_DHCP
;

1072 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dhcp_stop()\n"));

1074 i‡(
dh˝
 !
NULL
) {

1075 i‡(
dh˝
->
pcb
 !
NULL
) {

1076 
	`udp_ªmove
(
dh˝
->
pcb
);

1077 
dh˝
->
pcb
 = 
NULL
;

1079 i‡(
dh˝
->
p
 !
NULL
) {

1080 
	`pbuf_‰ì
(
dh˝
->
p
);

1081 
dh˝
->
p
 = 
NULL
;

1084 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1085 
	`mem_‰ì
((*)
dh˝
);

1086 
√tif
->
dh˝
 = 
NULL
;

1088 
	}
}

1098 
	$dh˝_£t_°©e
(
dh˝
 *dh˝, 
u8_t
 
√w_°©e
)

1100 i‡(
√w_°©e
 !
dh˝
->
°©e
) {

1101 
dh˝
->
°©e
 = 
√w_°©e
;

1102 
dh˝
->
åõs
 = 0;

1104 
	}
}

1112 
	$dh˝_›ti⁄
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
, u8_à
›ti⁄_Àn
)

1114 
	`LWIP_ASSERT
("dh˝_›ti⁄: dh˝->›ti⁄s_out_À¿+ 2 + o±i⁄_À¿<DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U + 
›ti⁄_Àn
 <
DHCP_OPTIONS_LEN
);

1115 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_ty≥
;

1116 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
›ti⁄_Àn
;

1117 
	}
}

1123 
	$dh˝_›ti⁄_byã
(
dh˝
 *dh˝, 
u8_t
 
vÆue
)

1125 
	`LWIP_ASSERT
("dh˝_›ti⁄_byã: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1126 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
vÆue
;

1127 
	}
}

1130 
	$dh˝_›ti⁄_sh‹t
(
dh˝
 *dh˝, 
u16_t
 
vÆue
)

1132 
	`LWIP_ASSERT
("dh˝_›ti⁄_sh‹t: dh˝->›ti⁄s_out_À¿+ 2 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 2U <
DHCP_OPTIONS_LEN
);

1133 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff00U) >> 8);

1134 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
Ë(
vÆue
 & 0x00ffU);

1135 
	}
}

1138 
	$dh˝_›ti⁄_l⁄g
(
dh˝
 *dh˝, 
u32_t
 
vÆue
)

1140 
	`LWIP_ASSERT
("dh˝_›ti⁄_l⁄g: dh˝->›ti⁄s_out_À¿+ 4 <DHCP_OPTIONS_LEN", 
dh˝
->
›ti⁄s_out_Àn
 + 4U <
DHCP_OPTIONS_LEN
);

1141 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0xff000000UL) >> 24);

1142 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x00ff0000UL) >> 16);

1143 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x0000ff00UL) >> 8);

1144 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = (
u8_t
)((
vÆue
 & 0x000000ffUL));

1145 
	}
}

1157 
îr_t


1158 
	$dh˝_unfﬁd_ª∂y
(
dh˝
 *dhcp)

1160 
u16_t
 
ªt
;

1161 
	`LWIP_ERROR
("dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_ARG
;);

1162 
	`LWIP_ERROR
("dh˝->∞!NULL", (
dh˝
->
p
 !
NULL
),  
ERR_VAL
;);

1164 
	`dh˝_‰ì_ª∂y
(
dh˝
);

1166 i‡(
dh˝
->
p
->
tŸ_Àn
 > ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
)) {

1167 
dh˝
->
›ti⁄s_ö_Àn
 = dh˝->
p
->
tŸ_Àn
 - ((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1168 
dh˝
->
›ti⁄s_ö
 = 
	`mem_mÆloc
(dh˝->
›ti⁄s_ö_Àn
);

1169 i‡(
dh˝
->
›ti⁄s_ö
 =
NULL
) {

1170 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->options\n"));

1171  
ERR_MEM
;

1174 
dh˝
->
msg_ö
 = 
	`mem_mÆloc
((
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1175 i‡(
dh˝
->
msg_ö
 =
NULL
) {

1176 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_unfold_reply(): couldÇotállocate dhcp->msg_in\n"));

1177 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1178 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1179  
ERR_MEM
;

1183 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
msg_ö
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
, 0);

1184 
	`LWIP_ASSERT
("ªà=sizeof(°ru˘ dh˝_msgË- DHCP_OPTIONS_LEN", 
ªt
 =(
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1185 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytes into dhcp->msg_in[]\n",

1186 (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
));

1188 i‡(
dh˝
->
›ti⁄s_ö
 !
NULL
) {

1190 
ªt
 = 
	`pbuf_c›y_∑πül
(
dh˝
->
p
, dh˝->
›ti⁄s_ö
, dh˝->
›ti⁄s_ö_Àn
, (
dh˝_msg
Ë- 
DHCP_OPTIONS_LEN
);

1191 
	`LWIP_ASSERT
("ªà=dh˝->›ti⁄s_ö_Àn", 
ªt
 =
dh˝
->
›ti⁄s_ö_Àn
);

1192 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("dh˝_unfﬁd_ª∂y(): c›õd %"
U16_F
" bytesÅo dhcp->options_in[]\n",

1193 
dh˝
->
›ti⁄s_ö_Àn
));

1195 
	`LWIP_UNUSED_ARG
(
ªt
);

1196  
ERR_OK
;

1197 
	}
}

1204 
	$dh˝_‰ì_ª∂y
(
dh˝
 *dhcp)

1206 i‡(
dh˝
->
msg_ö
 !
NULL
) {

1207 
	`mem_‰ì
((*)
dh˝
->
msg_ö
);

1208 
dh˝
->
msg_ö
 = 
NULL
;

1210 i‡(
dh˝
->
›ti⁄s_ö
) {

1211 
	`mem_‰ì
((*)
dh˝
->
›ti⁄s_ö
);

1212 
dh˝
->
›ti⁄s_ö
 = 
NULL
;

1213 
dh˝
->
›ti⁄s_ö_Àn
 = 0;

1215 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("dhcp_free_reply(): free'd\n"));

1216 
	}
}

1222 
	$dh˝_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

1224 
√tif
 *√ti‡(√ti‡*)
¨g
;

1225 
dh˝
 *dh˝ = 
√tif
->dhcp;

1226 
dh˝_msg
 *
ª∂y_msg
 = (dh˝_msg *)
p
->
∑ylﬂd
;

1227 
u8_t
 *
›ti⁄s_±r
;

1228 
u8_t
 
msg_ty≥
;

1229 
u8_t
 
i
;

1230 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("dh˝_ªcv’bu‡%pË‰om DHCP sîvî %"
U16_F
".%"U16_F".%"U16_F".%"U16_F"Ö‹à%"U16_F"\n", (*)
p
,

1231 (
u16_t
)(
	`¡ohl
(
addr
->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),

1232 (
u16_t
)(
	`¡ohl
(
addr
->addrË>> 8 & 0xff), (u16_t)“tohl◊ddr->addrË& 0xff), 
p‹t
));

1233 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->À¿%"
U16_F
"\n", 
p
->
Àn
));

1234 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("pbuf->tŸ_À¿%"
U16_F
"\n", 
p
->
tŸ_Àn
));

1236 
	`LWIP_UNUSED_ARG
(
pcb
);

1237 
	`LWIP_UNUSED_ARG
(
addr
);

1238 
	`LWIP_UNUSED_ARG
(
p‹t
);

1239 
dh˝
->
p
 =Ö;

1241 i‡(
ª∂y_msg
->
›
 !
DHCP_BOOTREPLY
) {

1242 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("nŸá DHCPÑïly mesßge, buàty≥ %"
U16_F
"\n", (
u16_t
)
ª∂y_msg
->
›
));

1243 
‰ì_pbuf_™d_ªtu∫
;

1246 
i
 = 0; i < 
√tif
->
hwaddr_Àn
; i++) {

1247 i‡(
√tif
->
hwaddr
[
i
] !
ª∂y_msg
->
chaddr
[i]) {

1248 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("√tif->hwaddr[%"
U16_F
"]==%02"
X16_F
" !=Ñeply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",

1249 (
u16_t
)
i
, (u16_t)
√tif
->
hwaddr
[i], (u16_t)i, (u16_t)
ª∂y_msg
->
chaddr
[i]));

1250 
‰ì_pbuf_™d_ªtu∫
;

1254 i‡(
	`¡ohl
(
ª∂y_msg
->
xid
Ë!
dh˝
->xid) {

1255 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id mism©chÑïly_msg->xid(%"
X32_F
")!=dh˝->xid(%"X32_F")\n",
	`¡ohl
(
ª∂y_msg
->
xid
),
dh˝
->xid));

1256 
‰ì_pbuf_™d_ªtu∫
;

1259 i‡(
	`dh˝_unfﬁd_ª∂y
(
dh˝
Ë!
ERR_OK
) {

1260 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("problem unfolding DHCP message -Åoo short on memory?\n"));

1261 
‰ì_pbuf_™d_ªtu∫
;

1264 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));

1266 
›ti⁄s_±r
 = 
	`dh˝_gë_›ti⁄_±r
(
dh˝
, 
DHCP_OPTION_MESSAGE_TYPE
);

1267 i‡(
›ti⁄s_±r
 =
NULL
) {

1268 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OPTION_MESSAGE_TYPE optionÇot found\n"));

1269 
‰ì_pbuf_™d_ªtu∫
;

1273 
msg_ty≥
 = 
	`dh˝_gë_›ti⁄_byã
(
›ti⁄s_±r
 + 2);

1275 i‡(
msg_ty≥
 =
DHCP_ACK
) {

1276 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_ACKÑeceived\n"));

1278 i‡(
dh˝
->
°©e
 =
DHCP_REQUESTING
) {

1279 
	`dh˝_h™dÀ_ack
(
√tif
);

1280 
dh˝
->
ªque°_timeout
 = 0;

1281 #i‡
DHCP_DOES_ARP_CHECK


1283 
	`dh˝_check
(
√tif
);

1286 
	`dh˝_böd
(
√tif
);

1290 i‡((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
)) {

1291 
dh˝
->
ªque°_timeout
 = 0;

1292 
	`dh˝_böd
(
√tif
);

1296 i‡((
msg_ty≥
 =
DHCP_NAK
) &&

1297 ((
dh˝
->
°©e
 =
DHCP_REBOOTING
Ë|| (dh˝->°©ê=
DHCP_REQUESTING
) ||

1298 (
dh˝
->
°©e
 =
DHCP_REBINDING
Ë|| (dh˝->°©ê=
DHCP_RENEWING
 ))) {

1299 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_NAKÑeceived\n"));

1300 
dh˝
->
ªque°_timeout
 = 0;

1301 
	`dh˝_h™dÀ_«k
(
√tif
);

1304 i‡((
msg_ty≥
 =
DHCP_OFFER
Ë&& (
dh˝
->
°©e
 =
DHCP_SELECTING
)) {

1305 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("DHCP_OFFERÑeceived in DHCP_SELECTING state\n"));

1306 
dh˝
->
ªque°_timeout
 = 0;

1308 
	`dh˝_h™dÀ_of„r
(
√tif
);

1310 
‰ì_pbuf_™d_ªtu∫
:

1311 
	`pbuf_‰ì
(
p
);

1312 
dh˝
->
p
 = 
NULL
;

1313 
	}
}

1320 
îr_t


1321 
	$dh˝_¸óã_ªque°
(
√tif
 *netif)

1323 
dh˝
 *dhcp;

1324 
u16_t
 
i
;

1325 
	`LWIP_ERROR
("dh˝_¸óã_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
),  
ERR_ARG
;);

1326 
dh˝
 = 
√tif
->dhcp;

1327 
	`LWIP_ERROR
("dh˝_¸óã_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
),  
ERR_VAL
;);

1328 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->p_ouà=NULL", 
dh˝
->
p_out
 =
NULL
);

1329 
	`LWIP_ASSERT
("dh˝_¸óã_ªque°: dh˝->msg_ouà=NULL", 
dh˝
->
msg_out
 =
NULL
);

1330 
dh˝
->
p_out
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dh˝_msg
), 
PBUF_RAM
);

1331 i‡(
dh˝
->
p_out
 =
NULL
) {

1332 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("dhcp_create_request(): couldÇotállocateÖbuf\n"));

1333  
ERR_MEM
;

1335 
	`LWIP_ASSERT
("dhcp_create_request: checkÅhat firstÖbuf can hold struct dhcp_msg",

1336 (
dh˝
->
p_out
->
Àn
 >(
dh˝_msg
)));

1339 
dh˝
->
xid
 = xid++;

1340 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("å™ß˘i⁄ id xid++(%"
X32_F
"Ëdh˝->xid(%"
U32_F
")\n",
xid
,
dh˝
->xid));

1342 
dh˝
->
msg_out
 = (
dh˝_msg
 *)dh˝->
p_out
->
∑ylﬂd
;

1344 
dh˝
->
msg_out
->
›
 = 
DHCP_BOOTREQUEST
;

1346 
dh˝
->
msg_out
->
hty≥
 = 
DHCP_HTYPE_ETH
;

1348 
dh˝
->
msg_out
->
hÀn
 = 
DHCP_HLEN_ETH
;

1349 
dh˝
->
msg_out
->
h›s
 = 0;

1350 
dh˝
->
msg_out
->
xid
 = 
	`ht⁄l
(dhcp->xid);

1351 
dh˝
->
msg_out
->
£cs
 = 0;

1352 
dh˝
->
msg_out
->
Êags
 = 0;

1353 
dh˝
->
msg_out
->
cüddr
.
addr
 = 
√tif
->
ù_addr
.addr;

1354 
dh˝
->
msg_out
->
yüddr
.
addr
 = 0;

1355 
dh˝
->
msg_out
->
süddr
.
addr
 = 0;

1356 
dh˝
->
msg_out
->
güddr
.
addr
 = 0;

1357 
i
 = 0; i < 
DHCP_CHADDR_LEN
; i++) {

1359 
dh˝
->
msg_out
->
chaddr
[
i
] = (ò< 
√tif
->
hwaddr_Àn
Ë?Çëif->
hwaddr
[i] : 0 ;

1361 
i
 = 0; i < 
DHCP_SNAME_LEN
; i++) {

1362 
dh˝
->
msg_out
->
¢ame
[
i
] = 0;

1364 
i
 = 0; i < 
DHCP_FILE_LEN
; i++) {

1365 
dh˝
->
msg_out
->
fûe
[
i
] = 0;

1367 
dh˝
->
msg_out
->
cookõ
 = 
	`ht⁄l
(0x63825363UL);

1368 
dh˝
->
›ti⁄s_out_Àn
 = 0;

1370 
i
 = 0; i < 
DHCP_OPTIONS_LEN
; i++) {

1371 
dh˝
->
msg_out
->
›ti⁄s
[
i
] = (
u8_t
)i;

1373  
ERR_OK
;

1374 
	}
}

1382 
	$dh˝_dñëe_ªque°
(
√tif
 *netif)

1384 
dh˝
 *dhcp;

1385 
	`LWIP_ERROR
("dh˝_dñëe_ªque°:Çëi‡!NULL", (
√tif
 !
NULL
), ;);

1386 
dh˝
 = 
√tif
->dhcp;

1387 
	`LWIP_ERROR
("dh˝_dñëe_ªque°: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1388 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->p_ouà!NULL", 
dh˝
->
p_out
 !
NULL
);

1389 
	`LWIP_ASSERT
("dh˝_dñëe_ªque°: dh˝->msg_ouà!NULL", 
dh˝
->
msg_out
 !
NULL
);

1390 i‡(
dh˝
->
p_out
 !
NULL
) {

1391 
	`pbuf_‰ì
(
dh˝
->
p_out
);

1393 
dh˝
->
p_out
 = 
NULL
;

1394 
dh˝
->
msg_out
 = 
NULL
;

1395 
	}
}

1406 
	$dh˝_›ti⁄_åaûî
(
dh˝
 *dhcp)

1408 
	`LWIP_ERROR
("dh˝_›ti⁄_åaûî: dh˝ !NULL", (
dh˝
 !
NULL
), ;);

1409 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->msg_ouà!NULL\n", 
dh˝
->
msg_out
 !
NULL
);

1410 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1411 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 
DHCP_OPTION_END
;

1413 (
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_MIN_OPTIONS_LEN
) || (dhcp->options_out_len & 3)) {

1415 
	`LWIP_ASSERT
("dh˝_›ti⁄_åaûî: dh˝->›ti⁄s_out_À¿< DHCP_OPTIONS_LEN\n", 
dh˝
->
›ti⁄s_out_Àn
 < 
DHCP_OPTIONS_LEN
);

1417 
dh˝
->
msg_out
->
›ti⁄s
[dh˝->
›ti⁄s_out_Àn
++] = 0;

1419 
	}
}

1430 
u8_t
 *
	$dh˝_gë_›ti⁄_±r
(
dh˝
 *dh˝, 
u8_t
 
›ti⁄_ty≥
)

1432 
u8_t
 
ovîlﬂd
 = 
DHCP_OVERLOAD_NONE
;

1435 i‡((
dh˝
->
›ti⁄s_ö
 !
NULL
Ë&& (dh˝->
›ti⁄s_ö_Àn
 > 0)) {

1437 
u8_t
 *
›ti⁄s
 = (u8_à*)
dh˝
->
›ti⁄s_ö
;

1438 
u16_t
 
off£t
 = 0;

1440 (
off£t
 < 
dh˝
->
›ti⁄s_ö_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1443 i‡(
›ti⁄s
[
off£t
] =
DHCP_OPTION_OVERLOAD
) {

1444 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("overloaded message detected\n"));

1446 
off£t
 += 2;

1447 
ovîlﬂd
 = 
›ti⁄s
[
off£t
++];

1450 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1451 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£à%"
U16_F
" i¿›ti⁄s\n", 
off£t
));

1452  &
›ti⁄s
[
off£t
];

1455 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("skùpög o±i⁄ %"
U16_F
" i¿›ti⁄s\n", 
›ti⁄s
[
off£t
]));

1457 
off£t
++;

1459 
off£t
 +1 + 
›ti⁄s
[offset];

1463 i‡(
ovîlﬂd
 !
DHCP_OVERLOAD_NONE
) {

1464 
u16_t
 
fõld_Àn
;

1465 i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_FILE
) {

1466 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded file field\n"));

1467 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
fûe
;

1468 
fõld_Àn
 = 
DHCP_FILE_LEN
;

1469 } i‡(
ovîlﬂd
 =
DHCP_OVERLOAD_SNAME
) {

1470 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded sname field\n"));

1471 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1472 
fõld_Àn
 = 
DHCP_SNAME_LEN
;

1475 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("overloaded snameánd file field\n"));

1476 
›ti⁄s
 = (
u8_t
 *)&
dh˝
->
msg_ö
->
¢ame
;

1477 
fõld_Àn
 = 
DHCP_FILE_LEN
 + 
DHCP_SNAME_LEN
;

1479 
off£t
 = 0;

1482 (
off£t
 < 
fõld_Àn
Ë&& (
›ti⁄s
[off£t] !
DHCP_OPTION_END
)) {

1483 i‡(
›ti⁄s
[
off£t
] =
›ti⁄_ty≥
) {

1484 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("›ti⁄ foundáàoff£t=%"
U16_F
"\n", 
off£t
));

1485  &
›ti⁄s
[
off£t
];

1488 
	`LWIP_DEBUGF
(
DHCP_DEBUG
 | 
LWIP_DBG_TRACE
, ("skùpög o±i⁄ %"
U16_F
"\n", 
›ti⁄s
[
off£t
]));

1490 
off£t
++;

1491 
off£t
 +1 + 
›ti⁄s
[offset];

1496  
NULL
;

1497 
	}
}

1507 
u8_t


1508 
	$dh˝_gë_›ti⁄_byã
(
u8_t
 *
±r
)

1510 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ byã vÆue=%"
U16_F
"\n", (
u16_t
)(*
±r
)));

1511  *
±r
;

1512 
	}
}

1523 
u16_t


1524 
	$dh˝_gë_›ti⁄_sh‹t
(
u8_t
 *
±r
)

1526 
u16_t
 
vÆue
;

1527 
vÆue
 = *
±r
++ << 8;

1528 
vÆue
 |*
±r
;

1529 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄ sh‹àvÆue=%"
U16_F
"\n", 
vÆue
));

1530  
vÆue
;

1531 
	}
}

1542 
u32_t
 
	$dh˝_gë_›ti⁄_l⁄g
(
u8_t
 *
±r
)

1544 
u32_t
 
vÆue
;

1545 
vÆue
 = (
u32_t
)(*
±r
++) << 24;

1546 
vÆue
 |(
u32_t
)(*
±r
++) << 16;

1547 
vÆue
 |(
u32_t
)(*
±r
++) << 8;

1548 
vÆue
 |(
u32_t
)(*
±r
++);

1549 
	`LWIP_DEBUGF
(
DHCP_DEBUG
, ("›ti⁄Ü⁄g vÆue=%"
U32_F
"\n", 
vÆue
));

1550  
vÆue
;

1551 
	}
}

	@net/lwip/core/dns.c

75 
	~"lwù/›t.h
"

77 #i‡
LWIP_DNS


79 
	~"lwù/udp.h
"

80 
	~"lwù/mem.h
"

81 
	~"lwù/dns.h
"

83 
	~<°rög.h
>

86 #i‚de‡
DNS_SERVER_ADDRESS


87 
	#DNS_SERVER_ADDRESS
 
	`öë_addr
("208.67.222.222"Ë

	)

91 #i‚de‡
DNS_SERVER_PORT


92 
	#DNS_SERVER_PORT
 53

	)

96 #i‚de‡
DNS_MAX_RETRIES


97 
	#DNS_MAX_RETRIES
 4

	)

101 #i‚de‡
DNS_MAX_TTL


102 
	#DNS_MAX_TTL
 604800

	)

106 
	#DNS_FLAG1_RESPONSE
 0x80

	)

107 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

108 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

109 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

110 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

111 
	#DNS_FLAG1_TRUNC
 0x02

	)

112 
	#DNS_FLAG1_RD
 0x01

	)

113 
	#DNS_FLAG2_RA
 0x80

	)

114 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

115 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

116 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

119 
	#DNS_STATE_UNUSED
 0

	)

120 
	#DNS_STATE_NEW
 1

	)

121 
	#DNS_STATE_ASKING
 2

	)

122 
	#DNS_STATE_DONE
 3

	)

124 #ifde‡
PACK_STRUCT_USE_INCLUDES


125 
	~"¨ch/bp°ru˘.h
"

127 
PACK_STRUCT_BEGIN


129 
	sdns_hdr
 {

130 
u16_t
 
	mid
;

131 
u8_t
 
	mÊags1
;

132 
u8_t
 
	mÊags2
;

133 
u16_t
 
	mnumque°i⁄s
;

134 
u16_t
 
	mnum™swîs
;

135 
u16_t
 
	mnumauthº
;

136 
u16_t
 
	mnumexå¨r
;

137 } 
	gPACK_STRUCT_STRUCT
;

138 
	gPACK_STRUCT_END


139 #ifde‡
PACK_STRUCT_USE_INCLUDES


140 
	~"¨ch/ï°ru˘.h
"

143 #ifde‡
PACK_STRUCT_USE_INCLUDES


144 
	~"¨ch/bp°ru˘.h
"

146 
PACK_STRUCT_BEGIN


148 
	sdns_quîy
 {

151 
u16_t
 
	mty≥
;

152 
u16_t
 
	m˛ass
;

153 } 
	gPACK_STRUCT_STRUCT
;

154 
	gPACK_STRUCT_END


155 #ifde‡
PACK_STRUCT_USE_INCLUDES


156 
	~"¨ch/ï°ru˘.h
"

159 #ifde‡
PACK_STRUCT_USE_INCLUDES


160 
	~"¨ch/bp°ru˘.h
"

162 
PACK_STRUCT_BEGIN


164 
	sdns_™swî
 {

167 
u16_t
 
	mty≥
;

168 
u16_t
 
	m˛ass
;

169 
u32_t
 
	mâl
;

170 
u16_t
 
	mÀn
;

171 } 
	gPACK_STRUCT_STRUCT
;

172 
	gPACK_STRUCT_END


173 #ifde‡
PACK_STRUCT_USE_INCLUDES


174 
	~"¨ch/ï°ru˘.h
"

178 
	sdns_èbÀ_íåy
 {

179 
u8_t
 
	m°©e
;

180 
u8_t
 
	mnumdns
;

181 
u8_t
 
	mtmr
;

182 
u8_t
 
	mªåõs
;

183 
u8_t
 
	m£qno
;

184 
u8_t
 
	mîr
;

185 
u32_t
 
	mâl
;

186 
	m«me
[
DNS_MAX_NAME_LENGTH
];

187 
ù_addr
 
	mùaddr
;

189 
dns_found_ˇŒback
 
	mfound
;

190 *
	m¨g
;

195 
dns_ªcv
(*
s
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

196 
dns_check_íåõs
();

203 
udp_pcb
 *
	gdns_pcb
;

204 
u8_t
 
	gdns_£qno
;

205 
dns_èbÀ_íåy
 
	gdns_èbÀ
[
DNS_TABLE_SIZE
];

206 
ù_addr
 
	gdns_£rvîs
[
DNS_MAX_SERVERS
];

208 #i‡(
DNS_USES_STATIC_BUF
 == 1)

209 
u8_t
 
	gdns_∑ylﬂd
[
DNS_MSG_SIZE
];

217 
	$dns_öô
()

219 
ù_addr
 
dns£rvî
;

222 
dns£rvî
.
addr
 = 
DNS_SERVER_ADDRESS
;

224 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_init: initializing\n"));

227 i‡(
dns_pcb
 =
NULL
) {

228 
dns_pcb
 = 
	`udp_√w
();

230 i‡(
dns_pcb
 !
NULL
) {

233 
	`LWIP_ASSERT
("For implicit initializationÅo work, DNS_STATE_UNUSEDÇeedsÅo be 0",

234 
DNS_STATE_UNUSED
 == 0);

237 
	`udp_böd
(
dns_pcb
, 
IP_ADDR_ANY
, 0);

238 
	`udp_ªcv
(
dns_pcb
, 
dns_ªcv
, 
NULL
);

241 
	`dns_£t£rvî
(0, &
dns£rvî
);

244 
	}
}

253 
	$dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
)

255 i‡((
numdns
 < 
DNS_MAX_SERVERS
Ë&& (
dns_pcb
 !
NULL
) &&

256 (
dns£rvî
 !
NULL
Ë&& (dns£rvî->
addr
 !=0 )) {

257 
dns_£rvîs
[
numdns
] = (*
dns£rvî
);

259 
	}
}

268 
ù_addr


269 
	$dns_gë£rvî
(
u8_t
 
numdns
)

271 i‡(
numdns
 < 
DNS_MAX_SERVERS
) {

272  
dns_£rvîs
[
numdns
];

274  *
IP_ADDR_ANY
;

276 
	}
}

283 
	$dns_tmr
()

285 i‡(
dns_pcb
 !
NULL
) {

286 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_tmr: dns_check_entries\n"));

287 
	`dns_check_íåõs
();

289 
	}
}

304 
u32_t


305 
	$dns_lookup
(c⁄° *
«me
)

307 
u8_t
 
i
;

310 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

311 i‡((
dns_èbÀ
[
i
].
°©e
 =
DNS_STATE_DONE
) &&

312 (
	`°rcmp
(
«me
, 
dns_èbÀ
[
i
].name) == 0)) {

313 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_lookup: \"%s\": found = ", 
«me
));

314 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, &(
dns_èbÀ
[
i
].
ùaddr
));

315 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

316  
dns_èbÀ
[
i
].
ùaddr
.
addr
;

321 
	}
}

323 #i‡
DNS_DOES_NAME_CHECK


334 
u8_t


335 
	$dns_com∑ª_«me
(*
quîy
, *
ª•⁄£
)

337 
n
;

340 
n
 = *
ª•⁄£
++;

342 i‡((
n
 & 0xc0) == 0xc0) {

347 
n
 > 0) {

348 i‡((*
quîy
Ë!(*
ª•⁄£
)) {

351 ++
ª•⁄£
;

352 ++
quîy
;

353 --
n
;

355 ++
quîy
;

357 } *
ª•⁄£
 != 0);

360 
	}
}

370 
	$dns_∑r£_«me
(*
quîy
)

372 
n
;

375 
n
 = *
quîy
++;

377 i‡((
n
 & 0xc0) == 0xc0) {

382 
n
 > 0) {

383 ++
quîy
;

384 --
n
;

387 } *
quîy
 != 0);

389  
quîy
 + 1;

390 
	}
}

401 
îr_t


402 
	$dns_£nd
(
u8_t
 
numdns
, c⁄° * 
«me
, u8_à
id
)

404 
îr_t
 
îr
;

405 
dns_hdr
 *
hdr
;

406 
dns_quîy
 
qry
;

407 
pbuf
 *
p
;

408 *
quîy
, *
≈å
;

409 c⁄° *
pHo°«me
;

410 
u8_t
 
n
;

412 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_£nd: dns_£rvîs[%"
U16_F
"] \"%s\":Ñequest\n",

413 (
u16_t
)(
numdns
), 
«me
));

414 
	`LWIP_ASSERT
("dn†£rvî ouào‡¨øy", 
numdns
 < 
DNS_MAX_SERVERS
);

415 
	`LWIP_ASSERT
("dn†£rvî ha†nÿIPáddªs†£t", 
dns_£rvîs
[
numdns
].
addr
 != 0);

418 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, (
dns_hdr
Ë+ 
DNS_MAX_NAME_LENGTH
 +

419 (
dns_quîy
), 
PBUF_RAM
);

420 i‡(
p
 !
NULL
) {

421 
	`LWIP_ASSERT
("pbu‡mu° bêö o√Öõ˚", 
p
->
√xt
 =
NULL
);

423 
hdr
 = (
dns_hdr
*)
p
->
∑ylﬂd
;

424 
	`mem£t
(
hdr
, 0, (
dns_hdr
));

425 
hdr
->
id
 = 
	`ht⁄s
(id);

426 
hdr
->
Êags1
 = 
DNS_FLAG1_RD
;

427 
hdr
->
numque°i⁄s
 = 
	`ht⁄s
(1);

428 
quîy
 = (*)
hdr
 + (
dns_hdr
);

429 
pHo°«me
 = 
«me
;

430 --
pHo°«me
;

434 ++
pHo°«me
;

435 
≈å
 = 
quîy
;

436 ++
quîy
;

437 
n
 = 0; *
pHo°«me
 != '.' && *pHostname != 0; ++pHostname) {

438 *
quîy
 = *
pHo°«me
;

439 ++
quîy
;

440 ++
n
;

442 *
≈å
 = 
n
;

443 } *
pHo°«me
 != 0);

444 *
quîy
++='\0';

447 
qry
.
ty≥
 = 
	`ht⁄s
(
DNS_RRTYPE_A
);

448 
qry
.
˛ass
 = 
	`ht⁄s
(
DNS_RRCLASS_IN
);

449 
	`MEMCPY
–
quîy
, &
qry
, (
dns_quîy
));

452 
	`pbuf_ªÆloc
(
p
, (
quîy
 + (
dns_quîy
)Ë- ((*)’->
∑ylﬂd
)));

455 
	`udp_c⁄√˘
(
dns_pcb
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

457 
îr
 = 
	`udp_£ndto
(
dns_pcb
, 
p
, &
dns_£rvîs
[
numdns
], 
DNS_SERVER_PORT
);

460 
	`pbuf_‰ì
(
p
);

462 
îr
 = 
ERR_MEM
;

465  
îr
;

466 
	}
}

478 
	$dns_check_íåy
(
u8_t
 
i
)

480 
dns_èbÀ_íåy
 *
pE¡ry
 = &
dns_èbÀ
[
i
];

482 
	`LWIP_ASSERT
("¨øy index ouào‡bounds", 
i
 < 
DNS_TABLE_SIZE
);

484 
pE¡ry
->
°©e
) {

486 
DNS_STATE_NEW
: {

488 
pE¡ry
->
°©e
 = 
DNS_STATE_ASKING
;

489 
pE¡ry
->
numdns
 = 0;

490 
pE¡ry
->
tmr
 = 1;

491 
pE¡ry
->
ªåõs
 = 0;

494 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

498 
DNS_STATE_ASKING
: {

499 i‡(--
pE¡ry
->
tmr
 == 0) {

500 i‡(++
pE¡ry
->
ªåõs
 =
DNS_MAX_RETRIES
) {

501 i‡((
pE¡ry
->
numdns
+1<
DNS_MAX_SERVERS
Ë&& (
dns_£rvîs
[pE¡ry->numdns+1].
addr
!=0)) {

503 
pE¡ry
->
numdns
++;

504 
pE¡ry
->
tmr
 = 1;

505 
pE¡ry
->
ªåõs
 = 0;

508 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\":Åimeout\n", 
pE¡ry
->
«me
));

510 i‡(
pE¡ry
->
found
)

511 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

513 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

514 
pE¡ry
->
found
 = 
NULL
;

520 
pE¡ry
->
tmr
 =ÖE¡ry->
ªåõs
;

523 
	`dns_£nd
(
pE¡ry
->
numdns
,ÖE¡ry->
«me
, 
i
);

528 
DNS_STATE_DONE
: {

530 i‡(--
pE¡ry
->
âl
 == 0) {

531 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_check_íåy: \"%s\": flush\n", 
pE¡ry
->
«me
));

533 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

534 
pE¡ry
->
found
 = 
NULL
;

538 
DNS_STATE_UNUSED
:

542 
	`LWIP_ASSERT
("unknown dns_tableÉntry state:", 0);

545 
	}
}

551 
	$dns_check_íåõs
()

553 
u8_t
 
i
;

555 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

556 
	`dns_check_íåy
(
i
);

558 
	}
}

566 
	$dns_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

568 
u8_t
 
i
;

569 *
pHo°«me
;

570 
dns_hdr
 *
hdr
;

571 
dns_™swî
 
™s
;

572 
dns_èbÀ_íåy
 *
pE¡ry
;

573 
u8_t
 
nque°i⁄s
, 
«nswîs
;

574 #i‡(
DNS_USES_STATIC_BUF
 == 0)

575 
u8_t
 
dns_∑ylﬂd
[
DNS_MSG_SIZE
];

577 #i‡(
DNS_USES_STATIC_BUF
 == 2)

578 
u8_t
* 
dns_∑ylﬂd
;

581 
	`LWIP_UNUSED_ARG
(
¨g
);

582 
	`LWIP_UNUSED_ARG
(
pcb
);

583 
	`LWIP_UNUSED_ARG
(
addr
);

584 
	`LWIP_UNUSED_ARG
(
p‹t
);

587 i‡(
p
->
tŸ_Àn
 > 
DNS_MSG_SIZE
) {

588 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo big\n"));

590 
memîr1
;

594 i‡(
p
->
tŸ_Àn
 < ((
dns_hdr
Ë+ (
dns_quîy
Ë+ (
dns_™swî
))) {

595 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv:ÖbufÅoo small\n"));

597 
memîr1
;

600 #i‡(
DNS_USES_STATIC_BUF
 == 2)

601 
dns_∑ylﬂd
 = 
	`mem_mÆloc
(
p
->
tŸ_Àn
);

602 i‡(
dns_∑ylﬂd
 =
NULL
) {

603 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_recv: mem_mallocÉrror\n"));

605 
memîr1
;

610 i‡(
	`pbuf_c›y_∑πül
(
p
, 
dns_∑ylﬂd
,Ö->
tŸ_Àn
, 0) ==Ö->tot_len) {

612 
hdr
 = (
dns_hdr
*)
dns_∑ylﬂd
;

613 
i
 = 
	`ht⁄s
(
hdr
->
id
);

614 i‡(
i
 < 
DNS_TABLE_SIZE
) {

615 
pE¡ry
 = &
dns_èbÀ
[
i
];

616 if(
pE¡ry
->
°©e
 =
DNS_STATE_ASKING
) {

618 
pE¡ry
->
°©e
 = 
DNS_STATE_DONE
;

619 
pE¡ry
->
îr
 = 
hdr
->
Êags2
 & 
DNS_FLAG2_ERR_MASK
;

623 
nque°i⁄s
 = 
	`ht⁄s
(
hdr
->
numque°i⁄s
);

624 
«nswîs
 = 
	`ht⁄s
(
hdr
->
num™swîs
);

627 i‡(((
hdr
->
Êags1
 & 
DNS_FLAG1_RESPONSE
Ë=0Ë|| (
pE¡ry
->
îr
 !0Ë|| (
nque°i⁄s
 != 1)) {

628 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿Êags\n", 
pE¡ry
->
«me
));

630 
ª•⁄£îr
;

633 #i‡
DNS_DOES_NAME_CHECK


635 i‡(
	`dns_com∑ª_«me
((*)(
pE¡ry
->
«me
), (*)
dns_∑ylﬂd
 + (
dns_hdr
)) != 0) {

636 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ÇŸ m©chÅÿquîy\n", 
pE¡ry
->
«me
));

638 
ª•⁄£îr
;

643 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)
dns_∑ylﬂd
 + (
dns_hdr
)Ë+ (
dns_quîy
);

645 
«nswîs
 > 0) {

647 
pHo°«me
 = (*Ë
	`dns_∑r£_«me
((*)pHostname);

650 
	`MEMCPY
(&
™s
, 
pHo°«me
, (
dns_™swî
));

651 if((
	`¡ohs
(
™s
.
ty≥
Ë=
DNS_RRTYPE_A
Ë&& (¡ohs◊ns.
˛ass
Ë=
DNS_RRCLASS_IN
Ë&& (¡ohs◊ns.
Àn
Ë=(
ù_addr
)) ) {

653 
pE¡ry
->
âl
 = 
	`¡ohl
(
™s
.ttl);

654 i‡(
pE¡ry
->
âl
 > 
DNS_MAX_TTL
) {

655 
pE¡ry
->
âl
 = 
DNS_MAX_TTL
;

658 
	`MEMCPY
–&(
pE¡ry
->
ùaddr
), (
pHo°«me
+(
dns_™swî
)), (
ù_addr
));

659 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Ñe•⁄£ = ", 
pE¡ry
->
«me
));

660 
	`ù_addr_debug_¥öt
(
DNS_DEBUG
, (&(
pE¡ry
->
ùaddr
)));

661 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("\n"));

663 i‡(
pE¡ry
->
found
) {

664 (*
pE¡ry
->
found
)’E¡ry->
«me
, &pE¡ry->
ùaddr
,ÖE¡ry->
¨g
);

667 
memîr2
;

669 
pHo°«me
 =ÖHo°«mê+ (
dns_™swî
Ë+ 
	`ht⁄s
(
™s
.
Àn
);

671 --
«nswîs
;

673 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_ªcv: \"%s\":Éº‹ i¿ª•⁄£\n", 
pE¡ry
->
«me
));

675 
ª•⁄£îr
;

681 
memîr2
;

683 
ª•⁄£îr
:

685 i‡(
pE¡ry
->
found
) {

686 (*
pE¡ry
->
found
)’E¡ry->
«me
, 
NULL
,ÖE¡ry->
¨g
);

689 
pE¡ry
->
°©e
 = 
DNS_STATE_UNUSED
;

690 
pE¡ry
->
found
 = 
NULL
;

692 
memîr2
:

693 #i‡(
DNS_USES_STATIC_BUF
 == 2)

695 
	`mem_‰ì
(
dns_∑ylﬂd
);

698 
memîr1
:

700 
	`pbuf_‰ì
(
p
);

702 
	}
}

712 
îr_t


713 
	$dns_íqueue
(c⁄° *
«me
, 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
)

715 
u8_t
 
i
;

716 
u8_t
 
l£q
, 
l£qi
;

717 
dns_èbÀ_íåy
 *
pE¡ry
 = 
NULL
;

720 
l£q
 = 
l£qi
 = 0;

721 
i
 = 0; i < 
DNS_TABLE_SIZE
; ++i) {

722 
pE¡ry
 = &
dns_èbÀ
[
i
];

724 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_UNUSED
)

728 i‡(
pE¡ry
->
°©e
 =
DNS_STATE_DONE
) {

729 i‡((
dns_£qno
 - 
pE¡ry
->
£qno
Ë> 
l£q
) {

730 
l£q
 = 
dns_£qno
 - 
pE¡ry
->
£qno
;

731 
l£qi
 = 
i
;

737 i‡(
i
 =
DNS_TABLE_SIZE
) {

738 i‡((
l£qi
 >
DNS_TABLE_SIZE
Ë|| (
dns_èbÀ
[l£qi].
°©e
 !
DNS_STATE_DONE
)) {

740 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": DNSÉ¡rõ†èbÀ i†fuŒ\n", 
«me
));

741  
ERR_MEM
;

744 
i
 = 
l£qi
;

745 
pE¡ry
 = &
dns_èbÀ
[
i
];

750 
	`LWIP_DEBUGF
(
DNS_DEBUG
, ("dns_íqueue: \"%s\": u£ DNSÉ¡ry %"
U16_F
"\n", 
«me
, (
u16_t
)(
i
)));

753 
pE¡ry
->
°©e
 = 
DNS_STATE_NEW
;

754 
pE¡ry
->
£qno
 = 
dns_£qno
++;

755 
pE¡ry
->
found
 = found;

756 
pE¡ry
->
¨g
 = 
ˇŒback_¨g
;

757 
	`°r˝y
(
pE¡ry
->
«me
,Çame);

760 
	`dns_check_íåy
(
i
);

763  
ERR_INPROGRESS
;

764 
	}
}

784 
îr_t


785 
	$dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
, 
dns_found_ˇŒback
 
found
,

786 *
ˇŒback_¨g
)

790 i‡((
dns_pcb
 =
NULL
Ë|| (
addr
 == NULL) ||

791 (!
ho°«me
) || (!hostname[0]) ||

792 (
	`°æí
(
ho°«me
Ë>
DNS_MAX_NAME_LENGTH
)) {

793  
ERR_VAL
;

796 #i‡
LWIP_HAVE_LOOPIF


797 i‡(
	`°rcmp
(
ho°«me
,"localhost")==0) {

798 
addr
->add∏
INADDR_LOOPBACK
;

799  
ERR_OK
;

805 i‡(((
addr
->add∏
	`öë_addr
(
ho°«me
)Ë!
INADDR_NONE
) ||

806 ((
addr
->add∏
	`dns_lookup
(
ho°«me
)) != 0)) {

807  
ERR_OK
;

811  
	`dns_íqueue
(
ho°«me
, 
found
, 
ˇŒback_¨g
);

812 
	}
}

	@net/lwip/core/init.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öô.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/sockës.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/udp.h
"

52 
	~"lwù/t˝.h
"

53 
	~"lwù/autoù.h
"

54 
	~"lwù/igmp.h
"

55 
	~"lwù/dns.h
"

56 
	~"√tif/ëh¨p.h
"

61 #i‚de‡
BYTE_ORDER


64 #i‡(!
LWIP_ARP
 && 
ARP_QUEUEING
)

67 #i‡(!
LWIP_UDP
 && 
LWIP_UDPLITE
)

70 #i‡(!
LWIP_UDP
 && 
LWIP_SNMP
)

73 #i‡(!
LWIP_UDP
 && 
LWIP_DHCP
)

76 #i‡(!
LWIP_UDP
 && 
LWIP_IGMP
)

79 #i‡(!
LWIP_UDP
 && 
LWIP_DNS
)

82 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

85 #i‡(
LWIP_ARP
 && 
ARP_QUEUEING
 && (
MEMP_NUM_ARP_QUEUE
<=0))

88 #i‡(
LWIP_RAW
 && (
MEMP_NUM_RAW_PCB
<=0))

91 #i‡(
LWIP_UDP
 && (
MEMP_NUM_UDP_PCB
<=0))

94 #i‡(
LWIP_TCP
 && (
MEMP_NUM_TCP_PCB
<=0))

97 #i‡(
LWIP_TCP
 && (
TCP_WND
 > 0xffff))

100 #i‡(
LWIP_TCP
 && (
TCP_SND_QUEUELEN
 > 0xffff))

103 #i‡(
LWIP_TCP
 && ((
TCP_MAXRTX
 > 12Ë|| (
TCP_SYNMAXRTX
 > 12)))

106 #i‡(
LWIP_TCP
 && 
TCP_LISTEN_BACKLOG
 && (
TCP_DEFAULT_LISTEN_BACKLOG
 < 0) || (TCP_DEFAULT_LISTEN_BACKLOG > 0xff))

109 #i‡(
LWIP_IGMP
 && (
MEMP_NUM_IGMP_GROUP
<=1))

112 #i‡(
PPP_SUPPORT
 && (
NO_SYS
==1))

115 #i‡(
LWIP_NETIF_API
 && (
NO_SYS
==1))

118 #i‡((
LWIP_SOCKET
 || 
LWIP_NETCONN
Ë&& (
NO_SYS
==1))

121 #i‡((
LWIP_NETCONN
 || 
LWIP_SOCKET
Ë&& (
MEMP_NUM_TCPIP_MSG_API
<=0))

124 #i‡(!
LWIP_NETCONN
 && 
LWIP_SOCKET
)

127 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_AUTOIP
)Ë&& 
LWIP_DHCP_AUTOIP_COOP
)

130 #i‡(((!
LWIP_DHCP
Ë|| (!
LWIP_ARP
)Ë&& 
DHCP_DOES_ARP_CHECK
)

133 #i‡(!
LWIP_ARP
 && 
LWIP_AUTOIP
)

136 #i‡(
LWIP_SNMP
 && (
SNMP_CONCURRENT_REQUESTS
<=0))

139 #i‡(
LWIP_SNMP
 && (
SNMP_TRAP_DESTINATIONS
<=0))

142 #i‡(
LWIP_TCP
 && ((
LWIP_EVENT_API
 && 
LWIP_CALLBACK_API
) || (!LWIP_EVENT_API && !LWIP_CALLBACK_API)))

146 #i‡((
NO_SYS
==0Ë&& (
MEMP_NUM_SYS_TIMEOUT
 < (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)))

149 #i‡(
IP_REASSEMBLY
 && (
MEMP_NUM_REASSDATA
 > 
IP_REASS_MAX_PBUFS
))

152 #i‡(
MEM_LIBC_MALLOC
 && 
MEM_USE_POOLS
)

155 #i‡(
MEM_USE_POOLS
 && !
MEMP_USE_CUSTOM_POOLS
)

162 #ifde‡
MEMP_NUM_TCPIP_MSG


165 #ifde‡
MEMP_NUM_API_MSG


168 #ifde‡
TCP_REXMIT_DEBUG


171 #ifde‡
RAW_STATS


174 #ifde‡
ETHARP_QUEUE_FIRST


177 #ifde‡
ETHARP_ALWAYS_INSERT


180 #i‡
SO_REUSE


186 #ifde‡
LWIP_DEBUG


188 
	$lwù_ßnôy_check
()

191 #i‡
LWIP_NETCONN


192 i‡(
MEMP_NUM_NETCONN
 > (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
))

193 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should beÜessÅhanÅhe sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));

195 #i‡
LWIP_TCP


196 i‡(
MEMP_NUM_TCP_SEG
 < 
TCP_SND_QUEUELEN
)

197 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should beátÜeastás bigás TCP_SND_QUEUELEN\n"));

198 i‡(
TCP_SND_QUEUELEN
 < (2 * (
TCP_SND_BUF
/
TCP_MSS
)))

199 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must beátÜeastás muchás (2 * TCP_SND_BUF/TCP_MSS) forÅhingsÅo work\n"));

200 i‡(
TCP_SNDLOWAT
 > 
TCP_SND_BUF
)

201 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must beÜessÅhan orÉqualÅo TCP_SND_BUF.\n"));

202 i‡(
TCP_WND
 > (
PBUF_POOL_SIZE
*
PBUF_POOL_BUFSIZE
))

203 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND isÜargerÅhan spaceÖrovided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));

204 i‡(
TCP_WND
 < 
TCP_MSS
)

205 
	`LWIP_PLATFORM_DIAG
(("lwip_sanity_check: WARNING: TCP_WND is smallerÅhan MSS\n"));

207 
	}
}

209 
	#lwù_ßnôy_check
()

	)

216 
	$lwù_öô
()

219 
	`lwù_ßnôy_check
();

222 
	`°©s_öô
();

223 
	`sys_öô
();

224 
	`mem_öô
();

225 
	`memp_öô
();

226 
	`pbuf_öô
();

227 
	`√tif_öô
();

228 #i‡
LWIP_SOCKET


229 
	`lwù_sockë_öô
();

231 
	`ù_öô
();

232 #i‡
LWIP_ARP


233 
	`ëh¨p_öô
();

235 #i‡
LWIP_RAW


236 
	`øw_öô
();

238 #i‡
LWIP_UDP


239 
	`udp_öô
();

241 #i‡
LWIP_TCP


242 
	`t˝_öô
();

244 #i‡
LWIP_AUTOIP


245 
	`autoù_öô
();

247 #i‡
LWIP_IGMP


248 
	`igmp_öô
();

250 #i‡
LWIP_DNS


251 
	`dns_öô
();

253 
	}
}

	@net/lwip/core/ipv4/autoip.c

65 
	~"lwù/›t.h
"

67 #i‡
LWIP_AUTOIP


69 
	~"lwù/mem.h
"

70 
	~"lwù/udp.h
"

71 
	~"lwù/ù_addr.h
"

72 
	~"lwù/√tif.h
"

73 
	~"lwù/autoù.h
"

74 
	~"√tif/ëh¨p.h
"

76 
	~<°dlib.h
>

77 
	~<°rög.h
>

81 #i‚de‡
LWIP_AUTOIP_RAND


82 
	#LWIP_AUTOIP_RAND
(
√tif
Ë–(((
u32_t
)(“ëif->
hwaddr
[5]) & 0xff) << 24) | \

83 ((
u32_t
)((
√tif
->
hwaddr
[3]) & 0xff) << 16) | \

84 ((
u32_t
)((
√tif
->
hwaddr
[2]) & 0xff) << 8) | \

85 ((
u32_t
)((
√tif
->
hwaddr
[4]) & 0xff))) + \

86 (
√tif
->
autoù
?√tif->autoù->
åõd_Œùaddr
:0))

	)

90 
autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif);

93 
autoù_¸óã_ønd_addr
(
√tif
 *√tif, 
ù_addr
 *
R™domIPAddr
);

96 
îr_t
 
autoù_¨p_™noun˚
(
√tif
 *netif);

99 
îr_t
 
autoù_böd
(
√tif
 *netif);

105 
	$autoù_öô
()

107 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_init()\n"));

108 
	}
}

114 
	$autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
 *netif)

117 
de„nd
 = 1;

119 if(
de„nd
) {

120 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

124 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

128 
	`autoù_°¨t
(
√tif
);

130 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

132 
	`autoù_¨p_™noun˚
(
√tif
);

133 
√tif
->
autoù
->
œ°c⁄Êi˘
 = 
DEFEND_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

136 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

139 
	`autoù_°¨t
(
√tif
);

141 
	}
}

150 
	$autoù_¸óã_ønd_addr
(
√tif
 *√tif, 
ù_addr
 *
R™domIPAddr
)

157 
R™domIPAddr
->
addr
 = (0xA9FE0100 + ((
u32_t
)(((
u8_t
)(
√tif
->
hwaddr
[4])) |

158 ((
u32_t
)((
u8_t
)(
√tif
->
hwaddr
[5]))Ë<< 8)Ë+Çëif->
autoù
->
åõd_Œùaddr
);

160 i‡(
R™domIPAddr
->
addr
>0xA9FEFEFF) {

161 
R™domIPAddr
->
addr
 = (0xA9FE0100 + (RandomIPAddr->addr-0xA9FEFEFF));

163 i‡(
R™domIPAddr
->
addr
<0xA9FE0100) {

164 
R™domIPAddr
->
addr
 = (0xA9FEFEFF - (0xA9FE0100-RandomIPAddr->addr));

166 
R™domIPAddr
->
addr
 = 
	`ht⁄l
(RandomIPAddr->addr);

168 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

169 ("autoù_¸óã_ønd_addr():Årõd_Œùaddr=%"
U16_F
", 0x%08"
X32_F
"\n",

170 (
u16_t
)(
√tif
->
autoù
->
åõd_Œùaddr
), (
u32_t
)(
R™domIPAddr
->
addr
)));

171 
	}
}

178 
îr_t


179 
	$autoù_¨p_™noun˚
(
√tif
 *netif)

181  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

182 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
autoù
->
Œùaddr
, &
ëhzîo
,

183 &
√tif
->
autoù
->
Œùaddr
, 
ARP_REQUEST
);

184 
	}
}

191 
îr_t


192 
	$autoù_böd
(
√tif
 *netif)

194 
autoù
 *autoù = 
√tif
->autoip;

195 
ù_addr
 
¢_mask
, 
gw_addr
;

197 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

198 ("autoù_böd“ëif=%pË%c%c%"
U16_F
" 0x%08"
X32_F
"\n",

199 (*)
√tif
,Çëif->
«me
[0],Çëif->«me[1], (
u16_t
Íëif->
num
, 
autoù
->
Œùaddr
.
addr
));

201 
	`IP4_ADDR
(&
¢_mask
, 255, 255, 0, 0);

202 
	`IP4_ADDR
(&
gw_addr
, 0, 0, 0, 0);

204 
	`√tif_£t_ùaddr
(
√tif
, &
autoù
->
Œùaddr
);

205 
	`√tif_£t_√tmask
(
√tif
, &
¢_mask
);

206 
	`√tif_£t_gw
(
√tif
, &
gw_addr
);

209 
	`√tif_£t_up
(
√tif
);

211  
ERR_OK
;

212 
	}
}

219 
îr_t


220 
	$autoù_°¨t
(
√tif
 *netif)

222 
autoù
 *autoù = 
√tif
->autoip;

223 
îr_t
 
ªsu…
 = 
ERR_OK
;

225 if(
	`√tif_is_up
(
√tif
)) {

226 
	`√tif_£t_down
(
√tif
);

232 
√tif
->
ù_addr
.
addr
 = 0;

233 
√tif
->
√tmask
.
addr
 = 0;

234 
√tif
->
gw
.
addr
 = 0;

236 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

237 ("autoù_°¨t“ëif=%pË%c%c%"
U16_F
"\n", (*)
√tif
,Çëif->
«me
[0],

238 
√tif
->
«me
[1], (
u16_t
Íëif->
num
));

239 if(
autoù
 =
NULL
) {

241 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

243 
autoù
 = 
	`mem_mÆloc
((autoip));

244 if(
autoù
 =
NULL
) {

245 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

247  
ERR_MEM
;

249 
	`mem£t
–
autoù
, 0, (autoip));

251 
√tif
->
autoù
 =áutoip;

252 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
, ("autoip_start():állocatedáutoip"));

254 
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

255 
autoù
->
âw
 = 0;

256 
autoù
->
£¡_num
 = 0;

257 
	`mem£t
(&
autoù
->
Œùaddr
, 0, (
ù_addr
));

258 
autoù
->
œ°c⁄Êi˘
 = 0;

261 
	`autoù_¸óã_ønd_addr
(
√tif
, &(
autoù
->
Œùaddr
));

262 
autoù
->
åõd_Œùaddr
++;

263 
autoù
->
°©e
 = 
AUTOIP_STATE_PROBING
;

264 
autoù
->
£¡_num
 = 0;

270 
autoù
->
âw
 = (
u16_t
)(
	`LWIP_AUTOIP_RAND
(
√tif
Ë% (
PROBE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
));

278 if(
autoù
->
åõd_Œùaddr
 > 
MAX_CONFLICTS
) {

279 
autoù
->
âw
 = 
RATE_LIMIT_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

282  
ªsu…
;

283 
	}
}

290 
îr_t


291 
	$autoù_°›
(
√tif
 *netif)

293 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_OFF
;

294 
	`√tif_£t_down
(
√tif
);

295  
ERR_OK
;

296 
	}
}

302 
	$autoù_tmr
()

304 
√tif
 *√ti‡
√tif_li°
;

306 
√tif
 !
NULL
) {

308 i‡(
√tif
->
autoù
 !
NULL
) {

309 if(
√tif
->
autoù
->
œ°c⁄Êi˘
 > 0) {

310 
√tif
->
autoù
->
œ°c⁄Êi˘
--;

313 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
,

314 ("autoù_tmr(ËAutoIP-Sèã: %"
U16_F
",Åtw=%"U16_F"\n",

315 (
u16_t
)(
√tif
->
autoù
->
°©e
),Çëif->autoù->
âw
));

317 
√tif
->
autoù
->
°©e
) {

318 
AUTOIP_STATE_PROBING
:

319 if(
√tif
->
autoù
->
âw
 > 0) {

320 
√tif
->
autoù
->
âw
--;

322 if(
√tif
->
autoù
->
£¡_num
 =
PROBE_NUM
) {

323 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_ANNOUNCING
;

324 
√tif
->
autoù
->
£¡_num
 = 0;

325 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_WAIT
 * 
AUTOIP_TICKS_PER_SECOND
;

327 
	`ëh¨p_ªque°
(
√tif
, &“ëif->
autoù
->
Œùaddr
));

328 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

330 
√tif
->
autoù
->
£¡_num
++;

332 
√tif
->
autoù
->
âw
 = (
u16_t
)((
	`LWIP_AUTOIP_RAND
(netif) %

333 ((
PROBE_MAX
 - 
PROBE_MIN
Ë* 
AUTOIP_TICKS_PER_SECOND
) ) +

334 
PROBE_MIN
 * 
AUTOIP_TICKS_PER_SECOND
);

339 
AUTOIP_STATE_ANNOUNCING
:

340 if(
√tif
->
autoù
->
âw
 > 0) {

341 
√tif
->
autoù
->
âw
--;

343 if(
√tif
->
autoù
->
£¡_num
 == 0) {

347 
	`autoù_böd
(
√tif
);

350 if(
√tif
->
autoù
->
£¡_num
 =
ANNOUNCE_NUM
) {

351 
√tif
->
autoù
->
°©e
 = 
AUTOIP_STATE_BOUND
;

352 
√tif
->
autoù
->
£¡_num
 = 0;

353 
√tif
->
autoù
->
âw
 = 0;

355 
	`autoù_¨p_™noun˚
(
√tif
);

356 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3,

358 
√tif
->
autoù
->
£¡_num
++;

359 
√tif
->
autoù
->
âw
 = 
ANNOUNCE_INTERVAL
 * 
AUTOIP_TICKS_PER_SECOND
;

366 
√tif
 =Çëif->
√xt
;

368 
	}
}

377 
	$autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
)

379 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("autoip_arp_reply()\n"));

380 i‡((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)) {

386 
ù_addr
 
sùaddr
, 
dùaddr
;

387 
ëh_addr
 
√tiÁddr
;

388 
√tiÁddr
.
addr
[0] = 
√tif
->
hwaddr
[0];

389 
√tiÁddr
.
addr
[1] = 
√tif
->
hwaddr
[1];

390 
√tiÁddr
.
addr
[2] = 
√tif
->
hwaddr
[2];

391 
√tiÁddr
.
addr
[3] = 
√tif
->
hwaddr
[3];

392 
√tiÁddr
.
addr
[4] = 
√tif
->
hwaddr
[4];

393 
√tiÁddr
.
addr
[5] = 
√tif
->
hwaddr
[5];

398 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

399 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

401 i‡((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_PROBING
) ||

402 ((
√tif
->
autoù
->
°©e
 =
AUTOIP_STATE_ANNOUNCING
) &&

403 (
√tif
->
autoù
->
£¡_num
 == 0))) {

410 i‡((
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
)) ||

411 (
	`ù_addr_cmp
(&
dùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

412 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
))) {

413 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

415 
	`autoù_°¨t
(
√tif
);

422 i‡(
	`ù_addr_cmp
(&
sùaddr
, &
√tif
->
autoù
->
Œùaddr
) &&

423 !
	`ëh_addr_cmp
(&
√tiÁddr
, &
hdr
->
shwaddr
)) {

424 
	`LWIP_DEBUGF
(
AUTOIP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 1,

426 
	`autoù_h™dÀ_¨p_c⁄Êi˘
(
√tif
);

430 
	}
}

	@net/lwip/core/ipv4/icmp.c

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_ICMP


46 
	~"lwù/icmp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/öë_chksum.h
"

49 
	~"lwù/ù.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

54 
	~<°rög.h
>

57 
	#ICMP_DEST_UNREACH_DATASIZE
 8

	)

69 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

71 
u8_t
 
ty≥
;

72 #ifde‡
LWIP_DEBUG


73 
u8_t
 
code
;

75 
icmp_echo_hdr
 *
õcho
;

76 
ù_hdr
 *
ùhdr
;

77 
ù_addr
 
tm∑ddr
;

78 
s16_t
 
hÀn
;

80 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

81 
	`¢mp_öc_icmpömsgs
();

84 
ùhdr
 = 
p
->
∑ylﬂd
;

85 
hÀn
 = 
	`IPH_HL
(
ùhdr
) * 4;

86 i‡(
	`pbuf_hódî
(
p
, -
hÀn
Ë|| (p->
tŸ_Àn
 < (
u16_t
)*2)) {

87 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: sh‹àICMP (%"
U16_F
" byãsËª˚ived\n", 
p
->
tŸ_Àn
));

88 
À√º
;

91 
ty≥
 = *((
u8_t
 *)
p
->
∑ylﬂd
);

92 #ifde‡
LWIP_DEBUG


93 
code
 = *(((
u8_t
 *)
p
->
∑ylﬂd
)+1);

95 
ty≥
) {

96 
ICMP_ECHO
:

98 i‡(
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
Ë|| 
	`ù_addr_ismu…iˇ°
(&iphdr->dest)) {

99 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: NotÉchoingÅo multicast or broadcastÖings\n"));

100 
	`ICMP_STATS_INC
(
icmp
.
îr
);

101 
	`pbuf_‰ì
(
p
);

104 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

105 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

106 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

107 
À√º
;

109 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

110 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: checksum failed forÑeceived ICMPÉcho\n"));

111 
	`pbuf_‰ì
(
p
);

112 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

113 
	`¢mp_öc_icmpöîr‹s
();

116 i‡(
	`pbuf_hódî
(
p
, (
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

120 
pbuf
 *
r
;

122 i‡(
	`pbuf_hódî
(
p
, 
hÀn
)) {

123 
	`LWIP_ASSERT
("icmp_input: movingÖ->payloadÅo ip header failed\n", 0);

124 
memîr
;

127 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

128 i‡(
r
 =
NULL
) {

129 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:állocatingÇewÖbuf failed\n"));

130 
memîr
;

132 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅhe ICMP header",

133 (
r
->
Àn
 >
hÀn
 + (
icmp_echo_hdr
)));

135 i‡(
	`pbuf_c›y
(
r
, 
p
Ë!
ERR_OK
) {

136 
	`LWIP_ASSERT
("icmp_input: copyingÅoÇewÖbuf failed\n", 0);

137 
memîr
;

139 
ùhdr
 = 
r
->
∑ylﬂd
;

141 i‡(
	`pbuf_hódî
(
r
, -
hÀn
)) {

142 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

143 
memîr
;

146 
	`pbuf_‰ì
(
p
);

148 
p
 = 
r
;

151 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
PBUF_IP_HLEN
 + 
PBUF_LINK_HLEN
))) {

152 
	`LWIP_ASSERT
("icmp_input:Ñestoring originalÖ->payload failed\n", 0);

153 
memîr
;

159 
õcho
 = 
p
->
∑ylﬂd
;

160 
tm∑ddr
.
addr
 = 
ùhdr
->
§c
.addr;

161 
ùhdr
->
§c
.
addr
 = iphdr->
de°
.addr;

162 
ùhdr
->
de°
.
addr
 = 
tm∑ddr
.addr;

163 
	`ICMPH_TYPE_SET
(
õcho
, 
ICMP_ER
);

165 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP_ECHO
 << 8))) {

166 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8) + 1;

168 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP_ECHO
 << 8);

172 
	`IPH_TTL_SET
(
ùhdr
, 
ICMP_TTL
);

173 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

174 #i‡
CHECKSUM_GEN_IP


175 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

178 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

180 
	`¢mp_öc_icmpoutmsgs
();

182 
	`¢mp_öc_icmpouãch‹ïs
();

184 if(
	`pbuf_hódî
(
p
, 
hÀn
)) {

185 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

187 
îr_t
 
ªt
;

188 
ªt
 = 
	`ù_ouçut_if
(
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

189 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
, 
öp
);

190 i‡(
ªt
 !
ERR_OK
) {

191 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ip_ouçut_i‡ªtu∫edá¿îr‹: %c.\n", 
ªt
));

196 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
" code %"S16_F"Çot supported.\n",

197 (
s16_t
)
ty≥
, (s16_t)
code
));

198 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

199 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

201 
	`pbuf_‰ì
(
p
);

203 
À√º
:

204 
	`pbuf_‰ì
(
p
);

205 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

206 
	`¢mp_öc_icmpöîr‹s
();

208 
memîr
:

209 
	`pbuf_‰ì
(
p
);

210 
	`ICMP_STATS_INC
(
icmp
.
îr
);

211 
	`¢mp_öc_icmpöîr‹s
();

213 
	}
}

225 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

227 
pbuf
 *
q
;

228 
ù_hdr
 *
ùhdr
;

229 
icmp_dur_hdr
 *
idur
;

232 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

233 
PBUF_RAM
);

234 i‡(
q
 =
NULL
) {

235 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

238 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

239 (
q
->
Àn
 >((
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

241 
ùhdr
 = 
p
->
∑ylﬂd
;

243 
idur
 = 
q
->
∑ylﬂd
;

244 
	`ICMPH_TYPE_SET
(
idur
, 
ICMP_DUR
);

245 
	`ICMPH_CODE_SET
(
idur
, 
t
);

247 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_dur_hdr
), 
p
->payload,

248 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

251 
idur
->
chksum
 = 0;

252 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

253 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

255 
	`¢mp_öc_icmpoutmsgs
();

257 
	`¢mp_öc_icmpoutde°uƒóchs
();

259 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

260 
	`pbuf_‰ì
(
q
);

261 
	}
}

263 #i‡
IP_FORWARD
 || 
IP_REASSEMBLY


272 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

274 
pbuf
 *
q
;

275 
ù_hdr
 *
ùhdr
;

276 
icmp_ã_hdr
 *
ãhdr
;

279 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, (
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
,

280 
PBUF_RAM
);

281 i‡(
q
 =
NULL
) {

282 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded: failedÅoállocateÖbuf for ICMPÖacket.\n"));

285 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

286 (
q
->
Àn
 >((
icmp_dur_hdr
Ë+ 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
)));

288 
ùhdr
 = 
p
->
∑ylﬂd
;

289 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded from "));

290 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
§c
));

291 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("Åo "));

292 
	`ù_addr_debug_¥öt
(
ICMP_DEBUG
, &(
ùhdr
->
de°
));

293 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("\n"));

295 
ãhdr
 = 
q
->
∑ylﬂd
;

296 
	`ICMPH_TYPE_SET
(
ãhdr
, 
ICMP_TE
);

297 
	`ICMPH_CODE_SET
(
ãhdr
, 
t
);

300 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + (
icmp_dur_hdr
), (u8_à*)
p
->payload,

301 
IP_HLEN
 + 
ICMP_DEST_UNREACH_DATASIZE
);

304 
ãhdr
->
chksum
 = 0;

305 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

306 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

308 
	`¢mp_öc_icmpoutmsgs
();

310 
	`¢mp_öc_icmpouâimìxcds
();

311 
	`ù_ouçut
(
q
, 
NULL
, &(
ùhdr
->
§c
), 
ICMP_TTL
, 0, 
IP_PROTO_ICMP
);

312 
	`pbuf_‰ì
(
q
);

313 
	}
}

	@net/lwip/core/ipv4/igmp.c

80 
	~"lwù/›t.h
"

82 #i‡
LWIP_IGMP


84 
	~"lwù/igmp.h
"

85 
	~"lwù/debug.h
"

86 
	~"lwù/def.h
"

87 
	~"lwù/mem.h
"

88 
	~"lwù/ù.h
"

89 
	~"lwù/öë.h
"

90 
	~"lwù/öë_chksum.h
"

91 
	~"lwù/√tif.h
"

92 
	~"lwù/icmp.h
"

93 
	~"lwù/udp.h
"

94 
	~"lwù/t˝.h
"

95 
	~"lwù/°©s.h
"

97 
	~"°rög.h
"

103 
igmp_group
* 
	gigmp_group_li°
;

104 
ù_addr
 
	gÆlsy°ems
;

105 
ù_addr
 
	gÆÃouãrs
;

111 
	$igmp_öô
()

113 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_init: initializing\n"));

115 
	`IP4_ADDR
(&
Ælsy°ems
, 224, 0, 0, 1);

116 
	`IP4_ADDR
(&
ÆÃouãrs
, 224, 0, 0, 2);

117 
	}
}

119 #ifde‡
LWIP_DEBUG


124 
	$igmp_dump_group_li°
()

126 
igmp_group
 *
group
 = 
igmp_group_li°
;

128 
group
 !
NULL
) {

129 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_dump_group_li°: [%"
U32_F
"] ", (
u32_t
)(
group
->
group_°©e
)));

130 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

131 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
group
->
öãrÁ˚
));

132 
group
 = group->
√xt
;

134 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

135 
	}
}

137 
	#igmp_dump_group_li°
()

	)

145 
îr_t


146 
	$igmp_°¨t
(
√tif
 *netif)

148 
igmp_group
* 
group
;

150 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_°¨t: sèπög IGMPÖro˚ssög o¿i‡%x\n", (Ë
√tif
));

152 
group
 = 
	`igmp_lookup_group
(
√tif
, &
Ælsy°ems
);

154 i‡(
group
 !
NULL
) {

155 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

156 
group
->
u£
++;

159 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

160 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_start: igmp_mac_filter(ADD "));

161 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
Ælsy°ems
);

162 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

163 
√tif
->
	`igmp_mac_fûãr
–√tif, &
Ælsy°ems
, 
IGMP_ADD_MAC_FILTER
);

166  
ERR_OK
;

169  
ERR_MEM
;

170 
	}
}

177 
îr_t


178 
	$igmp_°›
(
√tif
 *netif)

180 
igmp_group
 *
group
 = 
igmp_group_li°
;

181 
igmp_group
 *
¥ev
 = 
NULL
;

182 
igmp_group
 *
√xt
;

185 
group
 !
NULL
) {

186 
√xt
 = 
group
->next;

188 i‡(
group
->
öãrÁ˚
 =
√tif
) {

190 i‡(
group
 =
igmp_group_li°
) {

191 
igmp_group_li°
 = 
√xt
;

194 i‡(
¥ev
 !
NULL
) {

195 
¥ev
->
√xt
 =Çext;

198 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

199 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_stop: igmp_mac_filter(DEL "));

200 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

201 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

202 
√tif
->
	`igmp_mac_fûãr
“ëif, &(
group
->
group_addªss
), 
IGMP_DEL_MAC_FILTER
);

205 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

208 
¥ev
 = 
group
;

211 
group
 = 
√xt
;

213  
ERR_OK
;

214 
	}
}

222 
	$igmp_ªp‹t_groups
–
√tif
 *netif)

224 
igmp_group
 *
group
 = 
igmp_group_li°
;

226 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ªp‹t_groups: sídög IGMPÑï‹t†⁄ i‡%x\n", (Ë
√tif
));

228 
group
 !
NULL
) {

229 i‡(
group
->
öãrÁ˚
 =
√tif
) {

230 
	`igmp_dñayög_membî
–
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

232 
group
 = group->
√xt
;

234 
	}
}

244 
igmp_group
 *

245 
	$igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

247 
igmp_group
 *
group
 = 
igmp_group_li°
;

249 
group
 !
NULL
) {

250 i‡((
group
->
öãrÁ˚
 =
iÂ
Ë&& (
	`ù_addr_cmp
(&(group->
group_addªss
), 
addr
))) {

251  
group
;

253 
group
 = group->
√xt
;

259  
NULL
;

260 
	}
}

270 
igmp_group
 *

271 
	$igmp_lookup_group
(
√tif
 *
iÂ
, 
ù_addr
 *
addr
)

273 
igmp_group
 *
group
 = 
igmp_group_li°
;

276 
group
 = 
	`igmp_lookf‹_group
(
iÂ
, 
addr
);

277 i‡(
group
 !
NULL
) {

279  
group
;

283 
group
 = 
	`memp_mÆloc
(
MEMP_IGMP_GROUP
);

284 i‡(
group
 !
NULL
) {

285 
group
->
öãrÁ˚
 = 
iÂ
;

286 
	`ù_addr_£t
(&(
group
->
group_addªss
), 
addr
);

287 
group
->
timî
 = 0;

288 
group
->
group_°©e
 = 
IGMP_GROUP_NON_MEMBER
;

289 
group
->
œ°_ªp‹ãr_Êag
 = 0;

290 
group
->
u£
 = 0;

291 
group
->
√xt
 = 
igmp_group_li°
;

293 
igmp_group_li°
 = 
group
;

296 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_lookup_group: %ßŒoˇãdáÇew grou∞wôháddªs†", (
group
?"":"impossibleÅo ")));

297 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
addr
);

298 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
iÂ
));

300  
group
;

301 
	}
}

309 
îr_t


310 
	$igmp_ªmove_group
(
igmp_group
 *
group
)

312 
îr_t
 
îr
 = 
ERR_OK
;

315 i‡(
igmp_group_li°
 =
group
) {

316 
igmp_group_li°
 = 
group
->
√xt
;

319 
igmp_group
 *
tmpGroup
;

320 
tmpGroup
 = 
igmp_group_li°
;ÅmpGrou∞!
NULL
;ÅmpGrou∞tmpGroup->
√xt
) {

321 i‡(
tmpGroup
->
√xt
 =
group
) {

322 
tmpGroup
->
√xt
 = 
group
->next;

327 i‡(
tmpGroup
 =
NULL
)

328 
îr
 = 
ERR_ARG
;

331 
	`memp_‰ì
(
MEMP_IGMP_GROUP
, 
group
);

333  
îr
;

334 
	}
}

344 
	$igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
)

346 
ù_hdr
 * 
ùhdr
;

347 
igmp_msg
* 
igmp
;

348 
igmp_group
* 
group
;

349 
igmp_group
* 
grou¥ef
;

352 
ùhdr
 = 
p
->
∑ylﬂd
;

353 i‡(
	`pbuf_hódî
(
p
, -(
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4)Ë|| (p->
Àn
 < 
IGMP_MINLEN
)) {

354 
	`pbuf_‰ì
(
p
);

355 
	`IGMP_STATS_INC
(
igmp
.
À√º
);

356 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input:ÜengthÉrror\n"));

360 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: message from "));

361 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
§c
));

362 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Åoáddress "));

363 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
ùhdr
->
de°
));

364 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
öp
));

367 
igmp
 = (
igmp_msg
 *)
p
->
∑ylﬂd
;

368 i‡(
	`öë_chksum
(
igmp
, 
p
->
Àn
)) {

369 
	`pbuf_‰ì
(
p
);

370 
	`IGMP_STATS_INC
(
igmp
.
chkîr
);

371 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: checksumÉrror\n"));

376 
group
 = 
	`igmp_lookf‹_group
(
öp
, 
de°
);

379 i‡(!
group
) {

380 
	`pbuf_‰ì
(
p
);

381 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP frameÇot for us\n"));

386 
igmp
->
igmp_msgty≥
) {

387 
IGMP_MEMB_QUERY
: {

389 i‡((
	`ù_addr_cmp
(
de°
, &
Ælsy°ems
)Ë&& (
igmp
->
igmp_group_addªss
.
addr
 == 0)) {

391 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: GíîÆ IGMP_MEMB_QUERY o¿\"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

393 i‡(
igmp
->
igmp_maxª•
 == 0) {

394 
	`IGMP_STATS_INC
(
igmp
.
v1_rxed
);

395 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: gotánáll hosts query withÅime== 0 -Åhis is V1ándÇot implemented -Åreatás v2\n"));

396 
igmp
->
igmp_maxª•
 = 
IGMP_V1_DELAYING_MEMBER_TMR
;

399 
	`IGMP_STATS_INC
(
igmp
.
group_quîy_rxed
);

400 
grou¥ef
 = 
igmp_group_li°
;

401 
grou¥ef
) {

403 i‡((
grou¥ef
->
öãrÁ˚
 =
öp
Ë&& (!(
	`ù_addr_cmp
(&(grou¥ef->
group_addªss
), &
Ælsy°ems
)))) {

404 
	`igmp_dñayög_membî
–
grou¥ef
, 
igmp
->
igmp_maxª•
);

406 
grou¥ef
 = grou¥ef->
√xt
;

410 i‡(
group
->
group_addªss
.
addr
 != 0) {

411 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_MEMB_QUERYÅoá specific group "));

412 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &
group
->
group_addªss
);

413 i‡(
	`ù_addr_cmp
 (
de°
, &
Ælsy°ems
)) {

414 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" usög \"ALL SYSTEMS\"áddªs†(224.0.0.1Ë[igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

416 
group
 = 
	`igmp_lookf‹_group
(
öp
, &
igmp
->
igmp_group_addªss
);

418 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" wôhÅhêgrou∞addªs†a†de°ö©i⁄ [igmp_maxª•=%i]\n", ()(
igmp
->
igmp_maxª•
)));

421 i‡(
group
 !
NULL
) {

422 
	`IGMP_STATS_INC
(
igmp
.
uniˇ°_quîy
);

423 
	`igmp_dñayög_membî
–
group
, 
igmp
->
igmp_maxª•
);

429 
IGMP_V2_MEMB_REPORT
: {

430 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));

432 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_rxed
);

433 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

435 
group
->
timî
 = 0;

436 
group
->
group_°©e
 = 
IGMP_GROUP_IDLE_MEMBER
;

437 
group
->
œ°_ªp‹ãr_Êag
 = 0;

442 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_öput: u√x≥˘ed msg %x i¿°©ê%x o¿grou∞%x o¿i‡%x\n", (Ë
igmp
->
igmp_msgty≥
, (Ë
group
->
group_°©e
, (Ë&group, (Ëgroup->
öãrÁ˚
));

447 
	`pbuf_‰ì
(
p
);

449 
	}
}

458 
îr_t


459 
	$igmp_joögroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

461 
îr_t
 
îr
 = 
ERR_VAL
;

462 
igmp_group
 *
group
;

463 
√tif
 *netif;

466 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöÇ⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

467 
	`LWIP_ERROR
("igmp_joögroup:áâem±ÅÿjoöáŒsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

470 
√tif
 = 
√tif_li°
;

471 
√tif
 !
NULL
) {

473 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

475 
group
 = 
	`igmp_lookup_group
(
√tif
, 
grou∑ddr
);

477 i‡(
group
 !
NULL
) {

479 i‡(
group
->
group_°©e
 !
IGMP_GROUP_NON_MEMBER
) {

480 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅo groupÇot in state IGMP_GROUP_NON_MEMBER\n"));

483 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: joinÅoÇew group: "));

484 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

485 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

488 i‡((
group
->
u£
==0Ë&& (
√tif
->
igmp_mac_fûãr
 !
NULL
)) {

489 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: igmp_mac_filter(ADD "));

490 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

491 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

492 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_ADD_MAC_FILTER
);

495 
	`IGMP_STATS_INC
(
igmp
.
joö_£¡
);

496 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

498 
	`igmp_°¨t_timî
(
group
, 
IGMP_JOIN_DELAYING_MEMBER_TMR
);

501 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

504 
group
->
u£
++;

506 
îr
 = 
ERR_OK
;

510 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_joingroup: NotÉnought memoryÅo joinÅo group\n"));

511  
ERR_MEM
;

515 
√tif
 =Çëif->
√xt
;

518  
îr
;

519 
	}
}

528 
îr_t


529 
	$igmp_Àavegroup
(
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
)

531 
îr_t
 
îr
 = 
ERR_VAL
;

532 
igmp_group
 *
group
;

533 
√tif
 *netif;

536 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavên⁄-mu…iˇ°áddªss", 
	`ù_addr_ismu…iˇ°
(
grou∑ddr
),  
ERR_VAL
;);

537 
	`LWIP_ERROR
("igmp_Àavegroup:áâem±ÅÿÀavêÆlsy°em†addªss", (!
	`ù_addr_cmp
(
grou∑ddr
, &
Ælsy°ems
)),  
ERR_VAL
;);

540 
√tif
 = 
√tif_li°
;

541 
√tif
 !
NULL
) {

543 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& ((
	`ù_addr_ißny
(
iÁddr
Ë|| 
	`ù_addr_cmp
(&“ëif->
ù_addr
), ifaddr)))) {

545 
group
 = 
	`igmp_lookf‹_group
(
√tif
, 
grou∑ddr
);

547 i‡(
group
 !
NULL
) {

549 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: Leaving group: "));

550 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

551 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

554 i‡(
group
->
u£
 <= 1) {

556 i‡(
group
->
œ°_ªp‹ãr_Êag
) {

557 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: sendingÜeaving group\n"));

558 
	`IGMP_STATS_INC
(
igmp
.
Àave_£¡
);

559 
	`igmp_£nd
(
group
, 
IGMP_LEAVE_GROUP
);

563 i‡(
√tif
->
igmp_mac_fûãr
 !
NULL
) {

564 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup: igmp_mac_filter(DEL "));

565 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

566 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("Ë⁄ i‡%x\n", (Ë
√tif
));

567 
√tif
->
	`igmp_mac_fûãr
“ëif, 
grou∑ddr
, 
IGMP_DEL_MAC_FILTER
);

570 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Ñemove group: "));

571 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, 
grou∑ddr
);

572 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("\n"));

575 
	`igmp_ªmove_group
(
group
);

578 
group
->
u£
--;

581 
îr
 = 
ERR_OK
;

584 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_leavegroup:Çot member of group\n"));

588 
√tif
 =Çëif->
√xt
;

591  
îr
;

592 
	}
}

599 
	$igmp_tmr
()

601 
igmp_group
 *
group
 = 
igmp_group_li°
;

603 
group
 !
NULL
) {

604 i‡(
group
->
timî
 != 0) {

605 
group
->
timî
 -= 1;

606 i‡(
group
->
timî
 == 0) {

607 
	`igmp_timeout
(
group
);

610 
group
 = group->
√xt
;

612 
	}
}

621 
	$igmp_timeout
(
igmp_group
 *
group
)

624 i‡(
group
->
group_°©e
 =
IGMP_GROUP_DELAYING_MEMBER
) {

625 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_timeout:Ñeport membership for group witháddress "));

626 
	`ù_addr_debug_¥öt
(
IGMP_DEBUG
, &(
group
->
group_addªss
));

627 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, (" o¿i‡%x\n", (Ë
group
->
öãrÁ˚
));

629 
	`igmp_£nd
(
group
, 
IGMP_V2_MEMB_REPORT
);

631 
	}
}

641 
	$igmp_°¨t_timî
(
igmp_group
 *
group
, 
u8_t
 
max_time
)

646 
group
->
timî
 = 
max_time
;

647 
	}
}

655 
	$igmp_°›_timî
(
igmp_group
 *
group
)

657 
group
->
timî
 = 0;

658 
	}
}

667 
	$igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
)

669 i‡((
group
->
group_°©e
 =
IGMP_GROUP_IDLE_MEMBER
Ë|| ((group->group_°©ê=
IGMP_GROUP_DELAYING_MEMBER
Ë&& (
maxª•
 > group->
timî
))) {

670 
	`igmp_°¨t_timî
(
group
, (
maxª•
)/2);

671 
group
->
group_°©e
 = 
IGMP_GROUP_DELAYING_MEMBER
;

673 
	}
}

694 
îr_t


695 
	$igmp_ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

696 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif)

698 
u16_t
 
ù_id
 = 0;

699 
ù_hdr
 * 
ùhdr
 = 
NULL
;

700 
u16_t
 * 
ø
 = 
NULL
;

703 i‡(
	`pbuf_hódî
(
p
, 
ROUTER_ALERTLEN
)) {

704 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ip_output_if:ÇotÉnoughÑoom for IP header inÖbuf\n"));

705  
ERR_BUF
;

709 
ø
 = 
p
->
∑ylﬂd
;

710 
ø
[0] = 
	`ht⁄s
 (
ROUTER_ALERT
);

711 
ø
[1] = 0x0000;

714 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

715 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ip_output_if:ÇotÉnoughÑoom for IP header inÖbuf\n"));

716  
ERR_BUF
;

719 
ùhdr
 = 
p
->
∑ylﬂd
;

722 i‡(
de°
 !
IP_HDRINCL
) {

724 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

725 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

727 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

729 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, ((
IP_HLEN
 + 
ROUTER_ALERTLEN
) / 4), 0 );

730 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

731 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

732 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

733 ++
ù_id
;

735 i‡(
	`ù_addr_ißny
(
§c
)) {

736 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

738 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

741 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

742 #i‡
CHECKSUM_GEN_IP


743 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, (
IP_HLEN
 + 
ROUTER_ALERTLEN
)));

746 
de°
 = &(
ùhdr
->dest);

749 #i‡
IP_DEBUG


750 
	`ù_debug_¥öt
(
p
);

753 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_ù_ouçut_if: sídögÅÿi‡%x\n", (Ë
√tif
));

755  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

756 
	}
}

765 
	$igmp_£nd
(
igmp_group
 *
group
, 
u8_t
 
ty≥
)

767 
pbuf
* 
p
 = 
NULL
;

768 
igmp_msg
* 
igmp
 = 
NULL
;

769 
ù_addr
 
§c
 = {0};

770 
ù_addr
* 
de°
 = 
NULL
;

773 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
IGMP_MINLEN
, 
PBUF_RAM
);

775 i‡(
p
) {

776 
igmp
 = 
p
->
∑ylﬂd
;

777 
	`LWIP_ASSERT
("igmp_send: checkÅhat firstÖbuf can hold struct igmp_msg",

778 (
p
->
Àn
 >(
igmp_msg
)));

779 
	`ù_addr_£t
(&
§c
, &((
group
->
öãrÁ˚
)->
ù_addr
));

781 i‡(
ty≥
 =
IGMP_V2_MEMB_REPORT
) {

782 
de°
 = &(
group
->
group_addªss
);

783 
	`IGMP_STATS_INC
(
igmp
.
ªp‹t_£¡
);

784 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

785 
group
->
œ°_ªp‹ãr_Êag
 = 1;

787 i‡(
ty≥
 =
IGMP_LEAVE_GROUP
) {

788 
de°
 = &
ÆÃouãrs
;

789 
	`ù_addr_£t
(&(
igmp
->
igmp_group_addªss
), &(
group
->
group_addªss
));

793 i‡((
ty≥
 =
IGMP_V2_MEMB_REPORT
Ë|| (ty≥ =
IGMP_LEAVE_GROUP
)) {

794 
igmp
->
igmp_msgty≥
 = 
ty≥
;

795 
igmp
->
igmp_maxª•
 = 0;

796 
igmp
->
igmp_checksum
 = 0;

797 
igmp
->
igmp_checksum
 = 
	`öë_chksum
–igmp, 
IGMP_MINLEN
);

799 
	`igmp_ù_ouçut_if
–
p
, &
§c
, 
de°
, 
IGMP_TTL
, 
IP_PROTO_IGMP
, 
group
->
öãrÁ˚
);

802 
	`pbuf_‰ì
 (
p
);

804 
	`LWIP_DEBUGF
(
IGMP_DEBUG
, ("igmp_send:ÇotÉnough memory for igmp_send\n"));

806 
	}
}

	@net/lwip/core/ipv4/inet.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë.h
"

44 #i‚de‡
i•röt


45 
	#ö_ønge
(
c
, 
lo
, 
up
Ë((
u8_t
)¯>lÿ&& (u8_t)¯<up)

	)

46 
	#i•röt
(
c
Ë
	`ö_ønge
(c, 0x20, 0x7f)

	)

47 
	#isdigô
(
c
Ë
	`ö_ønge
(c, '0', '9')

	)

48 
	#isxdigô
(
c
Ë(
	`isdigô
(cË|| 
	`ö_ønge
(c, 'a', 'f'Ë|| in_ønge(c, 'A', 'F'))

	)

49 
	#i¶owî
(
c
Ë
	`ö_ønge
(c, 'a', 'z')

	)

50 
	#is•a˚
(
c
Ë(¯=' ' || c ='\f' || c ='\n' || c ='\r' || c ='\t' || c ='\v')

	)

60 
u32_t


61 
	$öë_addr
(c⁄° *
˝
)

63 
ö_addr
 
vÆ
;

65 i‡(
	`öë_©⁄
(
˝
, &
vÆ
)) {

66  (
vÆ
.
s_addr
);

68  (
INADDR_NONE
);

69 
	}
}

83 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
)

85 
u32_t
 
vÆ
;

86 
ba£
, 
n
, 
c
;

87 
u32_t
 
∑πs
[4];

88 
u32_t
 *
µ
 = 
∑πs
;

90 
c
 = *
˝
;

97 i‡(!
	`isdigô
(
c
))

99 
vÆ
 = 0;

100 
ba£
 = 10;

101 i‡(
c
 == '0') {

102 
c
 = *++
˝
;

103 i‡(
c
 == 'x' || c == 'X') {

104 
ba£
 = 16;

105 
c
 = *++
˝
;

107 
ba£
 = 8;

110 i‡(
	`isdigô
(
c
)) {

111 
vÆ
 = (vÆ * 
ba£
Ë+ ()(
c
 - '0');

112 
c
 = *++
˝
;

113 } i‡(
ba£
 =16 && 
	`isxdigô
(
c
)) {

114 
vÆ
 = (vÆ << 4Ë| ()(
c
 + 10 - (
	`i¶owî
(c) ? 'a' : 'A'));

115 
c
 = *++
˝
;

119 i‡(
c
 == '.') {

126 i‡(
µ
 >
∑πs
 + 3)

128 *
µ
++ = 
vÆ
;

129 
c
 = *++
˝
;

136 i‡(
c
 !'\0' && (!
	`i•röt
(cË|| !
	`is•a˚
(c)))

142 
n
 = 
µ
 - 
∑πs
 + 1;

143 
n
) {

152 i‡(
vÆ
 > 0xffffffUL)

154 
vÆ
 |
∑πs
[0] << 24;

158 i‡(
vÆ
 > 0xffff)

160 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16);

164 i‡(
vÆ
 > 0xff)

166 
vÆ
 |(
∑πs
[0] << 24) | (parts[1] << 16) | (parts[2] << 8);

169 i‡(
addr
)

170 
addr
->
s_addr
 = 
	`ht⁄l
(
vÆ
);

172 
	}
}

183 
	$öë_¡ﬂ
(
ö_addr
 
addr
)

185 
°r
[16];

186 
u32_t
 
s_addr
 = 
addr
.s_addr;

187 
öv
[3];

188 *
Ω
;

189 
u8_t
 *
≠
;

190 
u8_t
 
ªm
;

191 
u8_t
 
n
;

192 
u8_t
 
i
;

194 
Ω
 = 
°r
;

195 
≠
 = (
u8_t
 *)&
s_addr
;

196 
n
 = 0;Ç < 4;Ç++) {

197 
i
 = 0;

199 
ªm
 = *
≠
 % (
u8_t
)10;

200 *
≠
 /(
u8_t
)10;

201 
öv
[
i
++] = '0' + 
ªm
;

202 } *
≠
);

203 
i
--)

204 *
Ω
++ = 
öv
[
i
];

205 *
Ω
++ = '.';

206 
≠
++;

208 *--
Ω
 = 0;

209  
°r
;

210 
	}
}

225 #i‡(
LWIP_PLATFORM_BYTESWAP
 =0Ë&& (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

233 
u16_t


234 
	$ht⁄s
(
u16_t
 
n
)

236  ((
n
 & 0xff) << 8) | ((n & 0xff00) >> 8);

237 
	}
}

245 
u16_t


246 
	$¡ohs
(
u16_t
 
n
)

248  
	`ht⁄s
(
n
);

249 
	}
}

257 
u32_t


258 
	$ht⁄l
(
u32_t
 
n
)

260  ((
n
 & 0xff) << 24) |

261 ((
n
 & 0xff00) << 8) |

262 ((
n
 & 0xff0000UL) >> 8) |

263 ((
n
 & 0xff000000UL) >> 24);

264 
	}
}

272 
u32_t


273 
	$¡ohl
(
u32_t
 
n
)

275  
	`ht⁄l
(
n
);

276 
	}
}

	@net/lwip/core/ipv4/inet_chksum.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/öë_chksum.h
"

42 
	~"lwù/öë.h
"

55 #i‚de‡
LWIP_CHKSUM


56 
	#LWIP_CHKSUM
 
lwù_°™d¨d_chksum


	)

57 #i‚de‡
LWIP_CHKSUM_ALGORITHM


58 
	#LWIP_CHKSUM_ALGORITHM
 1

	)

62 #i‚de‡
LWIP_CHKSUM_ALGORITHM


63 
	#LWIP_CHKSUM_ALGORITHM
 0

	)

67 
	#SWAP_BYTES_IN_WORD
(
w
Ë((w & 0xffË<< 8Ë| ((w & 0xff00Ë>> 8)

	)

69 
	#FOLD_U32T
(
u
Ë((u >> 16Ë+ (u & 0x0000ffffUL))

	)

71 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 1)

82 
u16_t


83 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

85 
u32_t
 
acc
;

86 
u16_t
 
§c
;

87 
u8_t
 *
o˘ë±r
;

89 
acc
 = 0;

91 
o˘ë±r
 = (
u8_t
*)
d©≠å
;

92 
Àn
 > 1) {

95 
§c
 = (*
o˘ë±r
) << 8;

96 
o˘ë±r
++;

98 
§c
 |(*
o˘ë±r
);

99 
o˘ë±r
++;

100 
acc
 +
§c
;

101 
Àn
 -= 2;

103 i‡(
Àn
 > 0) {

105 
§c
 = (*
o˘ë±r
) << 8;

106 
acc
 +
§c
;

109 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

110 i‡((
acc
 & 0xffff0000) != 0) {

111 
acc
 = (acc >> 16) + (acc & 0x0000ffffUL);

116  
	`ht⁄s
((
u16_t
)
acc
);

117 
	}
}

120 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 2)

136 
u16_t


137 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

139 
u8_t
 *
pb
 = 
d©≠å
;

140 
u16_t
 *
ps
, 
t
 = 0;

141 
u32_t
 
sum
 = 0;

142 
odd
 = ((
u32_t
)
pb
 & 1);

145 i‡(
odd
 && 
Àn
 > 0) {

146 ((
u8_t
 *)&
t
)[1] = *
pb
++;

147 
Àn
--;

151 
ps
 = (
u16_t
 *)
pb
;

152 
Àn
 > 1) {

153 
sum
 +*
ps
++;

154 
Àn
 -= 2;

158 i‡(
Àn
 > 0) {

159 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;;

163 
sum
 +
t
;

167 
sum
 = 
	`FOLD_U32T
(sum);

168 
sum
 = 
	`FOLD_U32T
(sum);

171 i‡(
odd
) {

172 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

175  
sum
;

176 
	}
}

179 #i‡(
LWIP_CHKSUM_ALGORITHM
 == 3)

192 
u16_t


193 
	$lwù_°™d¨d_chksum
(*
d©≠å
, 
Àn
)

195 
u8_t
 *
pb
 = 
d©≠å
;

196 
u16_t
 *
ps
, 
t
 = 0;

197 
u32_t
 *
∂
;

198 
u32_t
 
sum
 = 0, 
tmp
;

200 
odd
 = ((
u32_t
)
pb
 & 1);

202 i‡(
odd
 && 
Àn
 > 0) {

203 ((
u8_t
 *)&
t
)[1] = *
pb
++;

204 
Àn
--;

207 
ps
 = (
u16_t
 *)
pb
;

209 i‡(((
u32_t
)
ps
 & 3Ë&& 
Àn
 > 1) {

210 
sum
 +*
ps
++;

211 
Àn
 -= 2;

214 
∂
 = (
u32_t
 *)
ps
;

216 
Àn
 > 7) {

217 
tmp
 = 
sum
 + *
∂
++;

218 i‡(
tmp
 < 
sum
) {

219 
tmp
++;

222 
sum
 = 
tmp
 + *
∂
++;

223 i‡(
sum
 < 
tmp
) {

224 
sum
++;

227 
Àn
 -= 8;

231 
sum
 = 
	`FOLD_U32T
(sum);

233 
ps
 = (
u16_t
 *)
∂
;

236 
Àn
 > 1) {

237 
sum
 +*
ps
++;

238 
Àn
 -= 2;

242 i‡(
Àn
 > 0) {

243 ((
u8_t
 *)&
t
)[0] = *(u8_à*)
ps
;

246 
sum
 +
t
;

250 
sum
 = 
	`FOLD_U32T
(sum);

251 
sum
 = 
	`FOLD_U32T
(sum);

253 i‡(
odd
) {

254 
sum
 = 
	`SWAP_BYTES_IN_WORD
(sum);

257  
sum
;

258 
	}
}

273 
u16_t


274 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

275 
ù_addr
 *
§c
, ù_add∏*
de°
,

276 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
)

278 
u32_t
 
acc
;

279 
pbuf
 *
q
;

280 
u8_t
 
sw≠≥d
;

282 
acc
 = 0;

283 
sw≠≥d
 = 0;

285 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

286 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

287 (*)
q
, (*)q->
√xt
));

288 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

292 
acc
 = 
	`FOLD_U32T
(acc);

293 i‡(
q
->
Àn
 % 2 != 0) {

294 
sw≠≥d
 = 1 - swapped;

295 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

300 i‡(
sw≠≥d
) {

301 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

303 
acc
 +(
§c
->
addr
 & 0xffffUL);

304 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

305 
acc
 +(
de°
->
addr
 & 0xffffUL);

306 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

307 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

308 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

312 
acc
 = 
	`FOLD_U32T
(acc);

313 
acc
 = 
	`FOLD_U32T
(acc);

314 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

315  (
u16_t
)~(
acc
 & 0xffffUL);

316 
	}
}

330 
u16_t


331 
	$öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

332 
ù_addr
 *
§c
, ù_add∏*
de°
,

333 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
)

335 
u32_t
 
acc
;

336 
pbuf
 *
q
;

337 
u8_t
 
sw≠≥d
;

338 
u16_t
 
chkÀn
;

340 
acc
 = 0;

341 
sw≠≥d
 = 0;

343 
q
 = 
p
; (q !
NULL
Ë&& (
chksum_Àn
 > 0); q = q->
√xt
) {

344 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("inet_chksum_pseudo(): checksummingÖbuf %p (hasÇext %p) \n",

345 (*)
q
, (*)q->
√xt
));

346 
chkÀn
 = 
q
->
Àn
;

347 i‡(
chkÀn
 > 
chksum_Àn
) {

348 
chkÀn
 = 
chksum_Àn
;

350 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, 
chkÀn
);

351 
chksum_Àn
 -
chkÀn
;

352 
	`LWIP_ASSERT
("dñëême", 
chksum_Àn
 < 0x7fff);

355 
acc
 = 
	`FOLD_U32T
(acc);

356 i‡(
q
->
Àn
 % 2 != 0) {

357 
sw≠≥d
 = 1 - swapped;

358 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

363 i‡(
sw≠≥d
) {

364 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

366 
acc
 +(
§c
->
addr
 & 0xffffUL);

367 
acc
 +((
§c
->
addr
 >> 16) & 0xffffUL);

368 
acc
 +(
de°
->
addr
 & 0xffffUL);

369 
acc
 +((
de°
->
addr
 >> 16) & 0xffffUL);

370 
acc
 +(
u32_t
)
	`ht⁄s
((
u16_t
)
¥Ÿo
);

371 
acc
 +(
u32_t
)
	`ht⁄s
(
¥Ÿo_Àn
);

375 
acc
 = 
	`FOLD_U32T
(acc);

376 
acc
 = 
	`FOLD_U32T
(acc);

377 
	`LWIP_DEBUGF
(
INET_DEBUG
, ("öë_chksum_p£udo():Öbu‡chaöÜwù_chksum()=%"
X32_F
"\n", 
acc
));

378  (
u16_t
)~(
acc
 & 0xffffUL);

379 
	}
}

391 
u16_t


392 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

394  ~
	`LWIP_CHKSUM
(
d©≠å
, 
Àn
);

395 
	}
}

404 
u16_t


405 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

407 
u32_t
 
acc
;

408 
pbuf
 *
q
;

409 
u8_t
 
sw≠≥d
;

411 
acc
 = 0;

412 
sw≠≥d
 = 0;

413 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

414 
acc
 +
	`LWIP_CHKSUM
(
q
->
∑ylﬂd
, q->
Àn
);

415 
acc
 = 
	`FOLD_U32T
(acc);

416 i‡(
q
->
Àn
 % 2 != 0) {

417 
sw≠≥d
 = 1 - swapped;

418 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

422 i‡(
sw≠≥d
) {

423 
acc
 = 
	`SWAP_BYTES_IN_WORD
(acc);

425  (
u16_t
)~(
acc
 & 0xffffUL);

426 
	}
}

	@net/lwip/core/ipv4/ip.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/öë.h
"

47 
	~"lwù/öë_chksum.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/øw.h
"

52 
	~"lwù/udp.h
"

53 
	~"lwù/t˝.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/°©s.h
"

57 
	~"¨ch/≥rf.h
"

68 
√tif
 *

69 
	$ù_rouã
(
ù_addr
 *
de°
)

71 
√tif
 *netif;

74 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

76 i‡(
	`√tif_is_up
(
√tif
)) {

77 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

79  
√tif
;

83 i‡((
√tif_deÁu…
 =
NULL
Ë|| (!
	`√tif_is_up
(netif_default))) {

84 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ù_rouã: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

85 
	`IP_STATS_INC
(
ù
.
πîr
);

86 
	`¢mp_öc_ùouä‹ouãs
();

87  
NULL
;

90  
√tif_deÁu…
;

91 
	}
}

93 #i‡
IP_FORWARD


104 
√tif
 *

105 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
, 
√tif
 *
öp
)

107 
√tif
 *netif;

109 
PERF_START
;

111 
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
));

112 i‡(
√tif
 =
NULL
) {

113 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d:Çÿf‹w¨dögÑouã f‹ 0x%"
X32_F
" found\n",

114 
ùhdr
->
de°
.
addr
));

115 
	`¢mp_öc_ùouä‹ouãs
();

116  (
√tif
 *)
NULL
;

120 i‡(
√tif
 =
öp
) {

121 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward:Çot bouncingÖackets back on incoming interface.\n"));

122 
	`¢mp_öc_ùouä‹ouãs
();

123  (
√tif
 *)
NULL
;

127 
	`IPH_TTL_SET
(
ùhdr
, 
	`IPH_TTL
(iphdr) - 1);

129 i‡(
	`IPH_TTL
(
ùhdr
) == 0) {

130 
	`¢mp_öc_ùöhdªº‹s
();

131 #i‡
LWIP_ICMP


133 i‡(
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_ICMP
) {

134 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

137  (
√tif
 *)
NULL
;

141 i‡(
	`IPH_CHKSUM
(
ùhdr
Ë>
	`ht⁄s
(0xffff - 0x100)) {

142 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100) + 1);

144 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`IPH_CHKSUM
(ùhdrË+ 
	`ht⁄s
(0x100));

147 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_f‹w¨d: f‹w¨dögÖackëÅÿ0x%"
X32_F
"\n",

148 
ùhdr
->
de°
.
addr
));

150 
	`IP_STATS_INC
(
ù
.
fw
);

151 
	`IP_STATS_INC
(
ù
.
xmô
);

152 
	`¢mp_öc_ùf‹wd©agøms
();

154 
	`PERF_STOP
("ip_forward");

156 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

157  
√tif
;

158 
	}
}

175 
îr_t


176 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

178 
ù_hdr
 *
ùhdr
;

179 
√tif
 *netif;

180 
u16_t
 
ùhdr_hÀn
;

181 
u16_t
 
ùhdr_Àn
;

182 #i‡
LWIP_DHCP


183 
check_ù_§c
=1;

186 
	`IP_STATS_INC
(
ù
.
ªcv
);

187 
	`¢mp_öc_ùöª˚ives
();

190 
ùhdr
 = 
p
->
∑ylﬂd
;

191 i‡(
	`IPH_V
(
ùhdr
) != 4) {

192 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 1, ("IPÖackë dr›≥d duêtÿbad vîsi⁄Çumbî %"
U16_F
"\n", 
	`IPH_V
(
ùhdr
)));

193 
	`ù_debug_¥öt
(
p
);

194 
	`pbuf_‰ì
(
p
);

195 
	`IP_STATS_INC
(
ù
.
îr
);

196 
	`IP_STATS_INC
(
ù
.
dr›
);

197 
	`¢mp_öc_ùöhdªº‹s
();

198  
ERR_OK
;

202 
ùhdr_hÀn
 = 
	`IPH_HL
(
ùhdr
);

204 
ùhdr_hÀn
 *= 4;

206 
ùhdr_Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
));

209 i‡((
ùhdr_hÀn
 > 
p
->
Àn
Ë|| (
ùhdr_Àn
 >Ö->
tŸ_Àn
)) {

210 i‡(
ùhdr_hÀn
 > 
p
->
Àn
)

211 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP hódî (À¿%"
U16_F
") doesÇot fit in firstÖbuf (len %"U16_F"), IPÖacket dropped.\n",

212 
ùhdr_hÀn
, 
p
->
Àn
));

213 i‡(
ùhdr_Àn
 > 
p
->
tŸ_Àn
)

214 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IP (À¿%"
U16_F
") isÜongerÅhanÖbuf (len %"U16_F"), "

216 
ùhdr_Àn
, 
p
->
tŸ_Àn
));

218 
	`pbuf_‰ì
(
p
);

219 
	`IP_STATS_INC
(
ù
.
À√º
);

220 
	`IP_STATS_INC
(
ù
.
dr›
);

221 
	`¢mp_öc_ùödisˇrds
();

222  
ERR_OK
;

226 #i‡
CHECKSUM_CHECK_IP


227 i‡(
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
) != 0) {

229 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Checksum (0x%"
X16_F
"ËÁûed, IPÖackë dr›≥d.\n", 
	`öë_chksum
(
ùhdr
, 
ùhdr_hÀn
)));

230 
	`ù_debug_¥öt
(
p
);

231 
	`pbuf_‰ì
(
p
);

232 
	`IP_STATS_INC
(
ù
.
chkîr
);

233 
	`IP_STATS_INC
(
ù
.
dr›
);

234 
	`¢mp_öc_ùöhdªº‹s
();

235  
ERR_OK
;

241 
	`pbuf_ªÆloc
(
p
, 
ùhdr_Àn
);

244 #i‡
LWIP_IGMP


245 i‡(
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

246 i‡((
öp
->
Êags
 & 
NETIF_FLAG_IGMP
Ë&& (
	`igmp_lookf‹_group
(öp, &(
ùhdr
->
de°
)))) {

247 
√tif
 = 
öp
;

249 
√tif
 = 
NULL
;

257 
fú°
 = 1;

258 
√tif
 = 
öp
;

260 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput: iphdr->de° 0x%"
X32_F
"Çetif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",

261 
ùhdr
->
de°
.
addr
, 
√tif
->
ù_addr
.addr,

262 
ùhdr
->
de°
.
addr
 & 
√tif
->
√tmask
.addr,

263 
√tif
->
ù_addr
.
addr
 &Çëif->
√tmask
.addr,

264 
ùhdr
->
de°
.
addr
 & ~(
√tif
->
√tmask
.addr)));

267 i‡((
	`√tif_is_up
(
√tif
)Ë&& (!
	`ù_addr_ißny
(&“ëif->
ù_addr
)))) {

269 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
)) ||

271 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
√tif
)) {

272 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Öacketáccepted on interface %c%c\n",

273 
√tif
->
«me
[0],Çetif->name[1]));

278 i‡(
fú°
) {

279 
fú°
 = 0;

280 
√tif
 = 
√tif_li°
;

282 
√tif
 =Çëif->
√xt
;

284 i‡(
√tif
 =
öp
) {

285 
√tif
 =Çëif->
√xt
;

287 } 
√tif
 !
NULL
);

290 #i‡
LWIP_DHCP


295 i‡(
√tif
 =
NULL
) {

297 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDP
) {

298 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ù_öput: UDPÖackëÅÿDHCP clõ¡Ö‹à%"
U16_F
"\n",

299 
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
)));

300 i‡(
	`¡ohs
(((
udp_hdr
 *)((
u8_t
 *)
ùhdr
 + 
ùhdr_hÀn
))->
de°
Ë=
DHCP_CLIENT_PORT
) {

301 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input: DHCPÖacketáccepted.\n"));

302 
√tif
 = 
öp
;

303 
check_ù_§c
 = 0;

310 #i‡
LWIP_DHCP


311 i‡(
check_ù_§c
)

313 { i‡((
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
§c
), 
öp
)) ||

314 (
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
§c
)))) {

316 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:Öacket source isÇot valid.\n"));

318 
	`pbuf_‰ì
(
p
);

319 
	`IP_STATS_INC
(
ù
.
dr›
);

320 
	`¢mp_öc_ùöaddªº‹s
();

321 
	`¢mp_öc_ùödisˇrds
();

322  
ERR_OK
;

327 i‡(
√tif
 =
NULL
) {

329 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ip_input:ÖacketÇot for us.\n"));

330 #i‡
IP_FORWARD


332 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
)) {

334 
	`ù_f‹w¨d
(
p
, 
ùhdr
, 
öp
);

338 
	`¢mp_öc_ùöaddªº‹s
();

339 
	`¢mp_öc_ùödisˇrds
();

341 
	`pbuf_‰ì
(
p
);

342  
ERR_OK
;

345 i‡((
	`IPH_OFFSET
(
ùhdr
Ë& 
	`ht⁄s
(
IP_OFFMASK
 | 
IP_MF
)) != 0) {

346 #i‡
IP_REASSEMBLY


347 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖackë i†®‰agmíà(id=0x%04"
X16_F
"ÅŸ_Àn=%"
U16_F
"Üen=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",

348 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)), 
p
->
tŸ_Àn
,Çtohs(
	`IPH_LEN
(ùhdr)), !!(
	`IPH_OFFSET
(ùhdrË& 
	`ht⁄s
(
IP_MF
)), (¡ohs(IPH_OFFSET(ùhdr)Ë& 
IP_OFFMASK
)*8));

350 
p
 = 
	`ù_ªass
(p);

352 i‡(
p
 =
NULL
) {

353  
ERR_OK
;

355 
ùhdr
 = 
p
->
∑ylﬂd
;

357 
	`pbuf_‰ì
(
p
);

358 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖackë dr›≥d sö˚ iàwa†‰agmíãd (0x%"
X16_F
") (while IP_REASSEMBLY == 0).\n",

359 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
))));

360 
	`IP_STATS_INC
(
ù
.
›ãº
);

361 
	`IP_STATS_INC
(
ù
.
dr›
);

363 
	`¢mp_öc_ùöunknow≈rŸos
();

364  
ERR_OK
;

368 #i‡
IP_OPTIONS_ALLOWED
 == 0

370 #i‡
LWIP_IGMP


372 if((
ùhdr_hÀn
 > 
IP_HLEN
 && (
	`IPH_PROTO
(
ùhdr
Ë!
IP_PROTO_IGMP
)) {

374 i‡(
ùhdr_hÀn
 > 
IP_HLEN
) {

376 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("IPÖacket dropped sinceÅhere were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));

377 
	`pbuf_‰ì
(
p
);

378 
	`IP_STATS_INC
(
ù
.
›ãº
);

379 
	`IP_STATS_INC
(
ù
.
dr›
);

381 
	`¢mp_öc_ùöunknow≈rŸos
();

382  
ERR_OK
;

387 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: \n"));

388 
	`ù_debug_¥öt
(
p
);

389 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_öput:Ö->À¿%"
U16_F
"Ö->tŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

391 #i‡
LWIP_RAW


393 i‡(
	`øw_öput
(
p
, 
öp
) == 0)

397 
	`IPH_PROTO
(
ùhdr
)) {

398 #i‡
LWIP_UDP


399 
IP_PROTO_UDP
:

400 #i‡
LWIP_UDPLITE


401 
IP_PROTO_UDPLITE
:

403 
	`¢mp_öc_ùödñivîs
();

404 
	`udp_öput
(
p
, 
öp
);

407 #i‡
LWIP_TCP


408 
IP_PROTO_TCP
:

409 
	`¢mp_öc_ùödñivîs
();

410 
	`t˝_öput
(
p
, 
öp
);

413 #i‡
LWIP_ICMP


414 
IP_PROTO_ICMP
:

415 
	`¢mp_öc_ùödñivîs
();

416 
	`icmp_öput
(
p
, 
öp
);

419 #i‡
LWIP_IGMP


420 
IP_PROTO_IGMP
:

421 
	`igmp_öput
(
p
,
öp
,&(
ùhdr
->
de°
));

425 #i‡
LWIP_ICMP


427 i‡(!
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) &&

428 !
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

429 
p
->
∑ylﬂd
 = 
ùhdr
;

430 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

433 
	`pbuf_‰ì
(
p
);

435 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n", 
	`IPH_PROTO
(
ùhdr
)));

437 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

438 
	`IP_STATS_INC
(
ù
.
dr›
);

439 
	`¢mp_öc_ùöunknow≈rŸos
();

443  
ERR_OK
;

444 
	}
}

471 
îr_t


472 
	$ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

473 
u8_t
 
âl
, u8_à
tos
,

474 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

476 
ù_hdr
 *
ùhdr
;

477 
u16_t
 
ù_id
 = 0;

479 
	`¢mp_öc_ùouåeque°s
();

482 i‡(
de°
 !
IP_HDRINCL
) {

484 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

485 
	`LWIP_DEBUGF
(
IP_DEBUG
 | 2, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

487 
	`IP_STATS_INC
(
ù
.
îr
);

488 
	`¢mp_öc_ùoutdisˇrds
();

489  
ERR_BUF
;

492 
ùhdr
 = 
p
->
∑ylﬂd
;

493 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct ip_hdr",

494 (
p
->
Àn
 >(
ù_hdr
)));

496 
	`IPH_TTL_SET
(
ùhdr
, 
âl
);

497 
	`IPH_PROTO_SET
(
ùhdr
, 
¥Ÿo
);

499 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

501 
	`IPH_VHLTOS_SET
(
ùhdr
, 4, 
IP_HLEN
 / 4, 
tos
);

502 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
p
->
tŸ_Àn
));

503 
	`IPH_OFFSET_SET
(
ùhdr
, 0);

504 
	`IPH_ID_SET
(
ùhdr
, 
	`ht⁄s
(
ù_id
));

505 ++
ù_id
;

507 i‡(
	`ù_addr_ißny
(
§c
)) {

508 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

510 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

513 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

514 #i‡
CHECKSUM_GEN_IP


515 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

519 
ùhdr
 = 
p
->
∑ylﬂd
;

520 
de°
 = &(
ùhdr
->dest);

523 #i‡
IP_FRAG


525 i‡(
√tif
->
mtu
 && (
p
->
tŸ_Àn
 >Çetif->mtu))

526  
	`ù_‰ag
(
p
,
√tif
,
de°
);

529 
	`IP_STATS_INC
(
ù
.
xmô
);

531 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%c%"
U16_F
"\n", 
√tif
->
«me
[0],Çëif->«me[1],Çëif->
num
));

532 
	`ù_debug_¥öt
(
p
);

534 #i‡(
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

535 i‡(
	`ù_addr_cmp
(
de°
, &
√tif
->
ù_addr
)) {

537 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif_loop_output()"));

539  
	`√tif_lo›_ouçut
(
√tif
, 
p
, 
de°
);

543 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->output()"));

545  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

547 
	}
}

566 
îr_t


567 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

568 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
)

570 
√tif
 *netif;

572 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

573  
ERR_RTE
;

576  
	`ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
);

577 
	}
}

579 #i‡
IP_DEBUG


584 
	$ù_debug_¥öt
(
pbuf
 *
p
)

586 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

587 
u8_t
 *
∑ylﬂd
;

589 
∑ylﬂd
 = (
u8_t
 *)
ùhdr
 + 
IP_HLEN
;

591 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

592 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

593 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" |%2"S16_F" | 0x%02"
X16_F
" | %5"
U16_F
" | (v, hl,Åos,Üen)\n",

594 
	`IPH_V
(
ùhdr
),

595 
	`IPH_HL
(
ùhdr
),

596 
	`IPH_TOS
(
ùhdr
),

597 
	`¡ohs
(
	`IPH_LEN
(
ùhdr
))));

598 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

599 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" |%"U16_F"%"U16_F"%"U16_F"| %4"U16_F" | (id, flags, offset)\n",

600 
	`¡ohs
(
	`IPH_ID
(
ùhdr
)),

601 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 15 & 1,

602 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 14 & 1,

603 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)) >> 13 & 1,

604 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
)Ë& 
IP_OFFMASK
));

605 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

606 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | 0x%04"
X16_F
" | (ttl,Öroto, chksum)\n",

607 
	`IPH_TTL
(
ùhdr
),

608 
	`IPH_PROTO
(
ùhdr
),

609 
	`¡ohs
(
	`IPH_CHKSUM
(
ùhdr
))));

610 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

611 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (src)\n",

612 
	`ù4_addr1
(&
ùhdr
->
§c
),

613 
	`ù4_addr2
(&
ùhdr
->
§c
),

614 
	`ù4_addr3
(&
ùhdr
->
§c
),

615 
	`ù4_addr4
(&
ùhdr
->
§c
)));

616 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

617 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %3"
U16_F
" | %3"U16_F" | %3"U16_F" | %3"U16_F" | (dest)\n",

618 
	`ù4_addr1
(&
ùhdr
->
de°
),

619 
	`ù4_addr2
(&
ùhdr
->
de°
),

620 
	`ù4_addr3
(&
ùhdr
->
de°
),

621 
	`ù4_addr4
(&
ùhdr
->
de°
)));

622 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

623 
	}
}

	@net/lwip/core/ipv4/ip_addr.c

39 
	~"lwù/›t.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/√tif.h
"

44 
	#IP_ADDR_ANY_VALUE
 0x00000000UL

	)

45 
	#IP_ADDR_BROADCAST_VALUE
 0xffffffffUL

	)

48 c⁄° 
ù_addr
 
	gù_addr_™y
 = { 
IP_ADDR_ANY_VALUE
 };

49 c⁄° 
ù_addr
 
	gù_addr_brﬂdˇ°
 = { 
IP_ADDR_BROADCAST_VALUE
 };

58 
u8_t
 
	$ù_addr_isbrﬂdˇ°
(
ù_addr
 *
addr
, 
√tif
 *netif)

60 
u32_t
 
addr2ã°
;

62 
addr2ã°
 = 
addr
->addr;

64 i‡((~
addr2ã°
 =
IP_ADDR_ANY_VALUE
) ||

65 (
addr2ã°
 =
IP_ADDR_ANY_VALUE
))

68 i‡((
√tif
->
Êags
 & 
NETIF_FLAG_BROADCAST
) == 0)

73 i‡(
addr2ã°
 =
√tif
->
ù_addr
.
addr
)

76 i‡(
	`ù_addr_√tcmp
(
addr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))

78 && ((
addr2ã°
 & ~
√tif
->
√tmask
.
addr
) ==

79 (
IP_ADDR_BROADCAST_VALUE
 & ~
√tif
->
√tmask
.
addr
)))

84 
	}
}

	@net/lwip/core/ipv4/ip_frag.c

41 
	~"lwù/›t.h
"

42 
	~"lwù/ù_‰ag.h
"

43 
	~"lwù/ù.h
"

44 
	~"lwù/öë.h
"

45 
	~"lwù/öë_chksum.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/¢mp.h
"

48 
	~"lwù/°©s.h
"

49 
	~"lwù/icmp.h
"

51 
	~<°rög.h
>

53 #i‡
IP_REASSEMBLY


67 #i‚de‡
IP_REASS_CHECK_OVERLAP


68 
	#IP_REASS_CHECK_OVERLAP
 1

	)

75 #i‚de‡
IP_REASS_FREE_OLDEST


76 
	#IP_REASS_FREE_OLDEST
 1

	)

79 
	#IP_REASS_FLAG_LASTFRAG
 0x01

	)

85 
	sù_ªass_hñ≥r
 {

86 
pbuf
 *
	m√xt_pbuf
;

87 
u16_t
 
	m°¨t
;

88 
u16_t
 
	míd
;

91 
	#IP_ADDRESSES_AND_ID_MATCH
(
ùhdrA
, 
ùhdrB
) \

92 (
	`ù_addr_cmp
(&(
ùhdrA
)->
§c
, &(
ùhdrB
)->src) && \

93 
	`ù_addr_cmp
(&(
ùhdrA
)->
de°
, &(
ùhdrB
)->dest) && \

94 
	`IPH_ID
(
ùhdrA
Ë=IPH_ID(
ùhdrB
)Ë? 1 : 0

	)

97 
ù_ªassd©a
 *
	gªassd©agøms
;

98 
u16_t
 
	gù_ªass_pbufcou¡
;

101 
ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

102 
ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
);

111 
	$ù_ªass_tmr
()

113 
ù_ªassd©a
 *
r
, *
¥ev
 = 
NULL
;

115 
r
 = 
ªassd©agøms
;

116 
r
 !
NULL
) {

119 i‡(
r
->
timî
 > 0) {

120 
r
->
timî
--;

121 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass_tmr:Åimî de¯%"
U16_F
"\n",(
u16_t
)
r
->
timî
));

122 
¥ev
 = 
r
;

123 
r
 =Ñ->
√xt
;

126 
ù_ªassd©a
 *
tmp
;

127 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_reass_tmr:ÅimerÅimed out\n"));

128 
tmp
 = 
r
;

130 
r
 =Ñ->
√xt
;

132 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
tmp
, 
¥ev
);

135 
	}
}

147 
	$ù_ªass_‰ì_com∂ëe_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

149 
pbufs_‰ìd
 = 0;

150 
pbuf
 *
p
;

151 
ù_ªass_hñ≥r
 *
ùrh
;

153 
	`LWIP_ASSERT
("¥ev !ùr", 
¥ev
 !
ùr
);

154 i‡(
¥ev
 !
NULL
) {

155 
	`LWIP_ASSERT
("¥ev->√xà=ùr", 
¥ev
->
√xt
 =
ùr
);

158 
	`¢mp_öc_ùªasmÁûs
();

159 #i‡
LWIP_ICMP


160 
ùrh
 = (
ù_ªass_hñ≥r
 *)
ùr
->
p
->
∑ylﬂd
;

161 i‡(
ùrh
->
°¨t
 == 0) {

164 
p
 = 
ùr
->p;

165 
ùr
->
p
 = 
ùrh
->
√xt_pbuf
;

167 
	`SMEMCPY
(
p
->
∑ylﬂd
, &
ùr
->
ùhdr
, 
IP_HLEN
);

168 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_FRAG
);

169 
pbufs_‰ìd
 +
	`pbuf_˛í
(
p
);

170 
	`pbuf_‰ì
(
p
);

176 
p
 = 
ùr
->p;

177 
p
 !
NULL
) {

178 
pbuf
 *
pcur
;

179 
ùrh
 = (
ù_ªass_hñ≥r
 *)
p
->
∑ylﬂd
;

180 
pcur
 = 
p
;

182 
p
 = 
ùrh
->
√xt_pbuf
;

183 
pbufs_‰ìd
 +
	`pbuf_˛í
(
pcur
);

184 
	`pbuf_‰ì
(
pcur
);

187 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
¥ev
);

188 
	`LWIP_ASSERT
("ù_ªass_pbufcou¡ >˛í", 
ù_ªass_pbufcou¡
 >
pbufs_‰ìd
);

189 
ù_ªass_pbufcou¡
 -
pbufs_‰ìd
;

191  
pbufs_‰ìd
;

192 
	}
}

194 #i‡
IP_REASS_FREE_OLDEST


205 
	$ù_ªass_ªmove_ﬁde°_d©agøm
(
ù_hdr
 *
‰aghdr
, 
pbufs_√eded
)

210 
ù_ªassd©a
 *
r
, *
ﬁde°
, *
¥ev
;

211 
pbufs_‰ìd
 = 0, 
pbufs_‰ìd_cuºít
;

212 
Ÿhî_d©agøms
;

217 
ﬁde°
 = 
NULL
;

218 
¥ev
 = 
NULL
;

219 
Ÿhî_d©agøms
 = 0;

220 
r
 = 
ªassd©agøms
;

221 
r
 !
NULL
) {

222 i‡(!
	`IP_ADDRESSES_AND_ID_MATCH
(&
r
->
ùhdr
, 
‰aghdr
)) {

224 
Ÿhî_d©agøms
++;

225 i‡(
ﬁde°
 =
NULL
) {

226 
ﬁde°
 = 
r
;

227 } i‡(
r
->
timî
 <
ﬁde°
->timer) {

229 
ﬁde°
 = 
r
;

232 i‡(
r
->
√xt
 !
NULL
) {

233 
¥ev
 = 
r
;

235 
r
 =Ñ->
√xt
;

237 i‡(
ﬁde°
 !
NULL
) {

238 
pbufs_‰ìd_cuºít
 = 
	`ù_ªass_‰ì_com∂ëe_d©agøm
(
ﬁde°
, 
¥ev
);

239 
pbufs_‰ìd
 +
pbufs_‰ìd_cuºít
;

241 } (
pbufs_‰ìd
 < 
pbufs_√eded
Ë&& (
Ÿhî_d©agøms
 > 1));

242  
pbufs_‰ìd
;

243 
	}
}

252 
ù_ªassd©a
*

253 
	$ù_ªass_íqueue_√w_d©agøm
(
ù_hdr
 *
‰aghdr
, 
˛í
)

255 
ù_ªassd©a
* 
ùr
;

257 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

258 i‡(
ùr
 =
NULL
) {

259 #i‡
IP_REASS_FREE_OLDEST


260 i‡(
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) >= clen) {

261 
ùr
 = 
	`memp_mÆloc
(
MEMP_REASSDATA
);

263 i‡(
ùr
 =
NULL
)

266 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

267 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("FailedÅoállocÑeassdata struct\n"));

268  
NULL
;

271 
	`mem£t
(
ùr
, 0, (
ù_ªassd©a
));

272 
ùr
->
timî
 = 
IP_REASS_MAXAGE
;

275 
ùr
->
√xt
 = 
ªassd©agøms
;

276 
ªassd©agøms
 = 
ùr
;

279 
	`SMEMCPY
(&(
ùr
->
ùhdr
), 
‰aghdr
, 
IP_HLEN
);

280  
ùr
;

281 
	}
}

288 
	$ù_ªass_dequeue_d©agøm
(
ù_ªassd©a
 *
ùr
, ù_ªassd©®*
¥ev
)

292 i‡(
ªassd©agøms
 =
ùr
) {

294 
ªassd©agøms
 = 
ùr
->
√xt
;

297 
	`LWIP_ASSERT
("ßnôy checkÜökedÜi°", 
¥ev
 !
NULL
);

298 
¥ev
->
√xt
 = 
ùr
->next;

302 
	`memp_‰ì
(
MEMP_REASSDATA
, 
ùr
);

303 
	}
}

315 
	$ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ù_ªassd©a
 *
ùr
, 
pbuf
 *
√w_p
)

317 
ù_ªass_hñ≥r
 *
ùrh
, *
ùrh_tmp
, *
ùrh_¥ev
=
NULL
;

318 
pbuf
 *
q
;

319 
u16_t
 
off£t
,
Àn
;

320 
ù_hdr
 *
‰aghdr
;

321 
vÆid
 = 1;

324 
‰aghdr
 = (
ù_hdr
*)
√w_p
->
∑ylﬂd
;

325 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

326 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

331 
	`LWIP_ASSERT
("sizeof(struct ip_reass_helper) <= IP_HLEN",

332 (
ù_ªass_hñ≥r
Ë<
IP_HLEN
);

333 
ùrh
 = (
ù_ªass_hñ≥r
*)
√w_p
->
∑ylﬂd
;

334 
ùrh
->
√xt_pbuf
 = 
NULL
;

335 
ùrh
->
°¨t
 = 
off£t
;

336 
ùrh
->
íd
 = 
off£t
 + 
Àn
;

340 
q
 = 
ùr
->
p
; q !
NULL
;) {

341 
ùrh_tmp
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

342 i‡(
ùrh
->
°¨t
 < 
ùrh_tmp
->start) {

344 
ùrh
->
√xt_pbuf
 = 
q
;

345 i‡(
ùrh_¥ev
 !
NULL
) {

347 #i‡
IP_REASS_CHECK_OVERLAP


348 i‡((
ùrh
->
°¨t
 < 
ùrh_¥ev
->
íd
Ë|| (ùrh->íd > 
ùrh_tmp
->start)) {

350 
‰ìpbuf
;

353 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

356 
ùr
->
p
 = 
√w_p
;

359 } if(
ùrh
->
°¨t
 =
ùrh_tmp
->start) {

361 
‰ìpbuf
;

362 #i‡
IP_REASS_CHECK_OVERLAP


363 } if(
ùrh
->
°¨t
 < 
ùrh_tmp
->
íd
) {

365 
‰ìpbuf
;

369 i‡(
ùrh_¥ev
 !
NULL
) {

370 i‡(
ùrh_¥ev
->
íd
 !
ùrh_tmp
->
°¨t
) {

373 
vÆid
 = 0;

377 
q
 = 
ùrh_tmp
->
√xt_pbuf
;

378 
ùrh_¥ev
 = 
ùrh_tmp
;

382 i‡(
q
 =
NULL
) {

383 i‡(
ùrh_¥ev
 !
NULL
) {

386 #i‡
IP_REASS_CHECK_OVERLAP


387 
	`LWIP_ASSERT
("check føgmít†d⁄'àovîœp", 
ùrh_¥ev
->
íd
 <
ùrh
->
°¨t
);

389 
ùrh_¥ev
->
√xt_pbuf
 = 
√w_p
;

390 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

391 
vÆid
 = 0;

394 #i‡
IP_REASS_CHECK_OVERLAP


395 
	`LWIP_ASSERT
("noÖrevious fragment,Åhis must beÅhe first fragment!",

396 
ùr
->
p
 =
NULL
);

399 
ùr
->
p
 = 
√w_p
;

405 i‡((
ùr
->
Êags
 & 
IP_REASS_FLAG_LASTFRAG
) != 0) {

407 i‡(
vÆid
) {

410 i‡(((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
°¨t
 != 0) {

411 
vÆid
 = 0;

414 
ùrh_¥ev
 = 
ùrh
;

415 
q
 = 
ùrh
->
√xt_pbuf
;

416 
q
 !
NULL
) {

417 
ùrh
 = (
ù_ªass_hñ≥r
*)
q
->
∑ylﬂd
;

418 i‡(
ùrh_¥ev
->
íd
 !
ùrh
->
°¨t
) {

419 
vÆid
 = 0;

422 
ùrh_¥ev
 = 
ùrh
;

423 
q
 = 
ùrh
->
√xt_pbuf
;

427 i‡(
vÆid
) {

428 
	`LWIP_ASSERT
("ßnôy check", 
ùr
->
p
 !
NULL
);

429 
	`LWIP_ASSERT
("sanity check",

430 ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
Ë!
ùrh
);

431 
	`LWIP_ASSERT
("validate_datagram:next_pbuf!=NULL",

432 
ùrh
->
√xt_pbuf
 =
NULL
);

433 
	`LWIP_ASSERT
("validate_datagram:datagramÉnd!=datagramÜen",

434 
ùrh
->
íd
 =
ùr
->
d©agøm_Àn
);

441  
vÆid
;

445 #i‡
IP_REASS_CHECK_OVERLAP


446 
‰ìpbuf
:

447 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
√w_p
);

448 
	`pbuf_‰ì
(
√w_p
);

451 
	}
}

459 
pbuf
 *

460 
	$ù_ªass
(
pbuf
 *
p
)

462 
pbuf
 *
r
;

463 
ù_hdr
 *
‰aghdr
;

464 
ù_ªassd©a
 *
ùr
;

465 
ù_ªass_hñ≥r
 *
ùrh
;

466 
u16_t
 
off£t
, 
Àn
;

467 
u8_t
 
˛í
;

468 
ù_ªassd©a
 *
ùr_¥ev
 = 
NULL
;

470 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ªcv
);

471 
	`¢mp_öc_ùªasmªqds
();

473 
‰aghdr
 = (
ù_hdr
*)
p
->
∑ylﬂd
;

475 i‡((
	`IPH_HL
(
‰aghdr
Ë* 4Ë!
IP_HLEN
) {

476 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: IP options currentlyÇot supported!\n"));

477 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
îr
);

478 
nuŒªtu∫
;

481 
off£t
 = (
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) * 8;

482 
Àn
 = 
	`¡ohs
(
	`IPH_LEN
(
‰aghdr
)Ë- 
	`IPH_HL
(fraghdr) * 4;

485 
˛í
 = 
	`pbuf_˛í
(
p
);

486 i‡((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
) {

487 #i‡
IP_REASS_FREE_OLDEST


488 i‡(!
	`ù_ªass_ªmove_ﬁde°_d©agøm
(
‰aghdr
, 
˛í
) ||

489 ((
ù_ªass_pbufcou¡
 + 
˛í
Ë> 
IP_REASS_MAX_PBUFS
))

493 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass: Overflow condition:Öbufct=%d, clen=%d, MAX=%d\n",

494 
ù_ªass_pbufcou¡
, 
˛í
, 
IP_REASS_MAX_PBUFS
));

495 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
memîr
);

498 
nuŒªtu∫
;

504 
ùr
 = 
ªassd©agøms
; i¥ !
NULL
; i¥ = i¥->
√xt
) {

508 i‡(
	`IP_ADDRESSES_AND_ID_MATCH
(&
ùr
->
ùhdr
, 
‰aghdr
)) {

509 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ù_ªass: m©chögÖªviou†‰agmíàID=%"
X16_F
"\n",

510 
	`¡ohs
(
	`IPH_ID
(
‰aghdr
))));

511 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
ˇchehô
);

514 
ùr_¥ev
 = 
ùr
;

517 i‡(
ùr
 =
NULL
) {

519 
ùr
 = 
	`ù_ªass_íqueue_√w_d©agøm
(
‰aghdr
, 
˛í
);

521 if(
ùr
 =
NULL
) {

522 
nuŒªtu∫
;

525 i‡(((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_OFFMASK
) == 0) &&

526 ((
	`¡ohs
(
	`IPH_OFFSET
(&
ùr
->
ùhdr
)Ë& 
IP_OFFMASK
) != 0)) {

531 
	`SMEMCPY
(&
ùr
->
ùhdr
, 
‰aghdr
, 
IP_HLEN
);

536 
ù_ªass_pbufcou¡
 +
˛í
;

542 i‡((
	`¡ohs
(
	`IPH_OFFSET
(
‰aghdr
)Ë& 
IP_MF
) == 0) {

543 
ùr
->
Êags
 |
IP_REASS_FLAG_LASTFRAG
;

544 
ùr
->
d©agøm_Àn
 = 
off£t
 + 
Àn
;

545 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,

546 ("ù_ªass:Üa° føgmíà£í,ÅŸÆÜí %"
S16_F
"\n",

547 
ùr
->
d©agøm_Àn
));

551 i‡(
	`ù_ªass_chaö_‰ag_öto_d©agøm_™d_vÆid©e
(
ùr
, 
p
)) {

554 
ùr
->
d©agøm_Àn
 +
IP_HLEN
;

557 
r
 = ((
ù_ªass_hñ≥r
*)
ùr
->
p
->
∑ylﬂd
)->
√xt_pbuf
;

560 
‰aghdr
 = (
ù_hdr
*)(
ùr
->
p
->
∑ylﬂd
);

561 
	`SMEMCPY
(
‰aghdr
, &
ùr
->
ùhdr
, 
IP_HLEN
);

562 
	`IPH_LEN_SET
(
‰aghdr
, 
	`ht⁄s
(
ùr
->
d©agøm_Àn
));

563 
	`IPH_OFFSET_SET
(
‰aghdr
, 0);

564 
	`IPH_CHKSUM_SET
(
‰aghdr
, 0);

566 
	`IPH_CHKSUM_SET
(
‰aghdr
, 
	`öë_chksum
(‰aghdr, 
IP_HLEN
));

568 
p
 = 
ùr
->p;

571 
r
 !
NULL
) {

572 
ùrh
 = (
ù_ªass_hñ≥r
*)
r
->
∑ylﬂd
;

575 
	`pbuf_hódî
(
r
, -
IP_HLEN
);

576 
	`pbuf_ˇt
(
p
, 
r
);

577 
r
 = 
ùrh
->
√xt_pbuf
;

580 
	`ù_ªass_dequeue_d©agøm
(
ùr
, 
ùr_¥ev
);

583 
ù_ªass_pbufcou¡
 -
	`pbuf_˛í
(
p
);

586  
p
;

589 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ù_ªass_pbufcou¡: %d out\n", 
ù_ªass_pbufcou¡
));

590  
NULL
;

592 
nuŒªtu∫
:

593 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
,("ip_reass:Çullreturn\n"));

594 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
dr›
);

595 
	`pbuf_‰ì
(
p
);

596  
NULL
;

597 
	}
}

600 #i‡
IP_FRAG


601 #i‡
IP_FRAG_USES_STATIC_BUF


602 
u8_t
 
	gbuf
[
LWIP_MEM_ALIGN_SIZE
(
IP_FRAG_MAX_MTU
)];

618 
îr_t


619 
	$ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
)

621 
pbuf
 *
ømbuf
;

622 #i‡
IP_FRAG_USES_STATIC_BUF


623 
pbuf
 *
hódî
;

625 
pbuf
 *
√wpbuf
;

626 
ù_hdr
 *
‹igöÆ_ùhdr
;

628 
ù_hdr
 *
ùhdr
;

629 
u16_t
 
nfb
;

630 
u16_t
 
À·
, 
c›
;

631 
u16_t
 
mtu
 = 
√tif
->mtu;

632 
u16_t
 
ofo
, 
omf
;

633 
u16_t
 
œ°
;

634 
u16_t
 
poff
 = 
IP_HLEN
;

635 
u16_t
 
tmp
;

636 #i‡!
IP_FRAG_USES_STATIC_BUF


637 
u16_t
 
√wpbuÊí
 = 0;

638 
u16_t
 
À·_to_c›y
;

642 #i‡
IP_FRAG_USES_STATIC_BUF


647 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_REF
);

648 i‡(
ømbuf
 =
NULL
) {

649 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));

650  
ERR_MEM
;

652 
ømbuf
->
tŸ_Àn
 =Ñambuf->
Àn
 = 
mtu
;

653 
ømbuf
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)
buf
);

656 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

657 
	`SMEMCPY
(
ùhdr
, 
p
->
∑ylﬂd
, 
IP_HLEN
);

659 
‹igöÆ_ùhdr
 = 
p
->
∑ylﬂd
;

660 
ùhdr
 = 
‹igöÆ_ùhdr
;

664 
tmp
 = 
	`¡ohs
(
	`IPH_OFFSET
(
ùhdr
));

665 
ofo
 = 
tmp
 & 
IP_OFFMASK
;

666 
omf
 = 
tmp
 & 
IP_MF
;

668 
À·
 = 
p
->
tŸ_Àn
 - 
IP_HLEN
;

670 
nfb
 = (
mtu
 - 
IP_HLEN
) / 8;

672 
À·
) {

673 
œ°
 = (
À·
 <
mtu
 - 
IP_HLEN
);

676 
tmp
 = 
omf
 | (
IP_OFFMASK
 & (
ofo
));

677 i‡(!
œ°
)

678 
tmp
 =Åm∞| 
IP_MF
;

681 
c›
 = 
œ°
 ? 
À·
 : 
nfb
 * 8;

683 #i‡
IP_FRAG_USES_STATIC_BUF


684 
poff
 +
	`pbuf_c›y_∑πül
(
p
, (
u8_t
*)
ùhdr
 + 
IP_HLEN
, 
c›
,Öoff);

691 
ømbuf
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
IP_HLEN
, 
PBUF_RAM
);

692 i‡(
ømbuf
 =
NULL
) {

693  
ERR_MEM
;

695 
	`LWIP_ASSERT
("thisÇeedsáÖbuf in oneÖiece!",

696 (
p
->
Àn
 >(
IP_HLEN
)));

697 
	`SMEMCPY
(
ømbuf
->
∑ylﬂd
, 
‹igöÆ_ùhdr
, 
IP_HLEN
);

698 
ùhdr
 = 
ømbuf
->
∑ylﬂd
;

701 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd + 
poff
;

702 
p
->
Àn
 -
poff
;

704 
À·_to_c›y
 = 
c›
;

705 
À·_to_c›y
) {

706 
√wpbuÊí
 = (
À·_to_c›y
 < 
p
->
Àn
) ?Üeft_to_copy :Ö->len;

708 i‡(!
√wpbuÊí
) {

709 
p
 =Ö->
√xt
;

712 
√wpbuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_REF
);

713 i‡(
√wpbuf
 =
NULL
) {

714 
	`pbuf_‰ì
(
ømbuf
);

715  
ERR_MEM
;

718 
√wpbuf
->
∑ylﬂd
 = 
p
->payload;

719 
√wpbuf
->
Àn
 =Çewpbuf->
tŸ_Àn
 = 
√wpbuÊí
;

723 
	`pbuf_ˇt
(
ømbuf
, 
√wpbuf
);

724 
À·_to_c›y
 -
√wpbuÊí
;

725 i‡(
À·_to_c›y
)

726 
p
 =Ö->
√xt
;

728 
poff
 = 
√wpbuÊí
;

732 
	`IPH_OFFSET_SET
(
ùhdr
, 
	`ht⁄s
(
tmp
));

733 
	`IPH_LEN_SET
(
ùhdr
, 
	`ht⁄s
(
c›
 + 
IP_HLEN
));

734 
	`IPH_CHKSUM_SET
(
ùhdr
, 0);

735 
	`IPH_CHKSUM_SET
(
ùhdr
, 
	`öë_chksum
(ùhdr, 
IP_HLEN
));

737 #i‡
IP_FRAG_USES_STATIC_BUF


738 i‡(
œ°
)

739 
	`pbuf_ªÆloc
(
ømbuf
, 
À·
 + 
IP_HLEN
);

746 
hódî
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 0, 
PBUF_RAM
);

747 i‡(
hódî
 !
NULL
) {

748 
	`pbuf_chaö
(
hódî
, 
ømbuf
);

749 
√tif
->
	`ouçut
“ëif, 
hódî
, 
de°
);

750 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

751 
	`¢mp_öc_ù‰ag¸óãs
();

752 
	`pbuf_‰ì
(
hódî
);

754 
	`LWIP_DEBUGF
(
IP_REASS_DEBUG
, ("ip_frag:Öbuf_alloc() for header failed\n"));

755 
	`pbuf_‰ì
(
ømbuf
);

756  
ERR_MEM
;

762 
√tif
->
	`ouçut
“ëif, 
ømbuf
, 
de°
);

763 
	`IPFRAG_STATS_INC
(
ù_‰ag
.
xmô
);

772 
	`pbuf_‰ì
(
ømbuf
);

774 
À·
 -
c›
;

775 
ofo
 +
nfb
;

777 #i‡
IP_FRAG_USES_STATIC_BUF


778 
	`pbuf_‰ì
(
ømbuf
);

780 
	`¢mp_öc_ù‰agoks
();

781  
ERR_OK
;

782 
	}
}

	@net/lwip/core/ipv6/icmp6.c

36 
	~"lwù/›t.h
"

38 #i‡
LWIP_ICMP


40 
	~"lwù/icmp.h
"

41 
	~"lwù/öë.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

47 
	$icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

49 
u8_t
 
ty≥
;

50 
icmp_echo_hdr
 *
õcho
;

51 
ù_hdr
 *
ùhdr
;

52 
ù_addr
 
tm∑ddr
;

54 
	`ICMP_STATS_INC
(
icmp
.
ªcv
);

58 
ty≥
 = ((
u8_t
 *)
p
->
∑ylﬂd
)[0];

60 
ty≥
) {

61 
ICMP6_ECHO
:

62 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input:Öing\n"));

64 i‡(
p
->
tŸ_Àn
 < (
icmp_echo_hdr
)) {

65 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_input: bad ICMPÉchoÑeceived\n"));

67 
	`pbuf_‰ì
(
p
);

68 
	`ICMP_STATS_INC
(
icmp
.
À√º
);

71 
õcho
 = 
p
->
∑ylﬂd
;

72 
ùhdr
 = (
ù_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 - 
IP_HLEN
);

73 i‡(
	`öë_chksum_pbuf
(
p
) != 0) {

74 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

75 
	`ICMP_STATS_INC
(
icmp
.
chkîr
);

78 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp:Ö->À¿%"
S16_F
"Ö->tŸ_À¿%"S16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

79 
	`ù_addr_£t
(&
tm∑ddr
, &(
ùhdr
->
§c
));

80 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(ùhdr->
de°
));

81 
	`ù_addr_£t
(&(
ùhdr
->
de°
), &
tm∑ddr
);

82 
õcho
->
ty≥
 = 
ICMP6_ER
;

84 i‡(
õcho
->
chksum
 >
	`ht⁄s
(0xfff‡- (
ICMP6_ECHO
 << 8))) {

85 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8) + 1;

87 
õcho
->
chksum
 +
	`ht⁄s
(
ICMP6_ECHO
 << 8);

89 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: checksum faûed f‹Ñe˚ived ICMPÉchÿ(%"
X16_F
")\n", 
	`öë_chksum_p£udo
(
p
, &(
ùhdr
->
§c
), &(ùhdr->
de°
), 
IP_PROTO_ICMP
,Ö->
tŸ_Àn
)));

90 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

93 
	`ù_ouçut_if
 (
p
, &(
ùhdr
->
§c
), 
IP_HDRINCL
,

94 
ùhdr
->
h›lim
, 
IP_PROTO_ICMP
, 
öp
);

97 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_öput: ICMPÅy≥ %"
S16_F
"ÇŸ suµ‹ãd.\n", (
s16_t
)
ty≥
));

98 
	`ICMP_STATS_INC
(
icmp
.
¥Ÿîr
);

99 
	`ICMP_STATS_INC
(
icmp
.
dr›
);

102 
	`pbuf_‰ì
(
p
);

103 
	}
}

106 
	$icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
)

108 
pbuf
 *
q
;

109 
ù_hdr
 *
ùhdr
;

110 
icmp_dur_hdr
 *
idur
;

113 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

115 i‡(
q
 =
NULL
) {

116 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

117 
	`pbuf_‰ì
(
p
);

120 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

121 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

123 
ùhdr
 = 
p
->
∑ylﬂd
;

125 
idur
 = 
q
->
∑ylﬂd
;

126 
idur
->
ty≥
 = (
u8_t
)
ICMP6_DUR
;

127 
idur
->
icode
 = (
u8_t
)
t
;

129 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, 
p
->∑ylﬂd, 
IP_HLEN
 + 8);

132 
idur
->
chksum
 = 0;

133 
idur
->
chksum
 = 
	`öë_chksum
(idur, 
q
->
Àn
);

134 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

136 
	`ù_ouçut
(
q
, 
NULL
,

137 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

138 
	`pbuf_‰ì
(
q
);

139 
	}
}

142 
	$icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
)

144 
pbuf
 *
q
;

145 
ù_hdr
 *
ùhdr
;

146 
icmp_ã_hdr
 *
ãhdr
;

148 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_time_exceeded\n"));

151 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 8 + 
IP_HLEN
 + 8, 
PBUF_RAM
);

153 i‡(
q
 =
NULL
) {

154 
	`LWIP_DEBUGF
(
ICMP_DEBUG
, ("icmp_dest_unreach: failedÅoállocateÖbuf for ICMPÖacket.\n"));

155 
	`pbuf_‰ì
(
p
);

158 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold icmp message",

159 (
q
->
Àn
 >(8 + 
IP_HLEN
 + 8)));

161 
ùhdr
 = 
p
->
∑ylﬂd
;

163 
ãhdr
 = 
q
->
∑ylﬂd
;

164 
ãhdr
->
ty≥
 = (
u8_t
)
ICMP6_TE
;

165 
ãhdr
->
icode
 = (
u8_t
)
t
;

168 
	`SMEMCPY
((
u8_t
 *)
q
->
∑ylﬂd
 + 8, (u8_à*)
p
->∑ylﬂd, 
IP_HLEN
 + 8);

171 
ãhdr
->
chksum
 = 0;

172 
ãhdr
->
chksum
 = 
	`öë_chksum
—ehdr, 
q
->
Àn
);

173 
	`ICMP_STATS_INC
(
icmp
.
xmô
);

174 
	`ù_ouçut
(
q
, 
NULL
,

175 (
ù_addr
 *)&(
ùhdr
->
§c
), 
ICMP_TTL
, 
IP_PROTO_ICMP
);

176 
	`pbuf_‰ì
(
q
);

177 
	}
}

	@net/lwip/core/ipv6/inet6.c

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/öë.h
"

54 
u32_t


55 
	$chksum
(*
d©≠å
, 
u16_t
 
Àn
)

57 
u16_t
 *
sd©≠å
 = 
d©≠å
;

58 
u32_t
 
acc
;

61 
acc
 = 0; 
Àn
 > 1;Üen -= 2) {

62 
acc
 +*
sd©≠å
++;

66 i‡(
Àn
 == 1) {

67 
acc
 +
	`ht⁄s
((
u16_t
)(*(
u8_t
 *)
d©≠å
) << 8);

70  
acc
;

72 
	}
}

79 
u16_t


80 
	$öë_chksum_p£udo
(
pbuf
 *
p
,

81 
ù_addr
 *
§c
, ù_add∏*
de°
,

82 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
)

84 
u32_t
 
acc
;

85 
pbuf
 *
q
;

86 
u8_t
 
sw≠≥d
, 
i
;

88 
acc
 = 0;

89 
sw≠≥d
 = 0;

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

92 
acc
 >> 16) {

93 
acc
 = (acc & 0xffff) + (acc >> 16);

95 i‡(
q
->
Àn
 % 2 != 0) {

96 
sw≠≥d
 = 1 - swapped;

97 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

101 i‡(
sw≠≥d
) {

102 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

105 
i
 = 0; i < 8; i++) {

106 
acc
 +((
u16_t
 *)
§c
->
addr
)[
i
] & 0xffff;

107 
acc
 +((
u16_t
 *)
de°
->
addr
)[
i
] & 0xffff;

108 
acc
 >> 16) {

109 
acc
 = (acc & 0xffff) + (acc >> 16);

112 
acc
 +(
u16_t
)
	`ht⁄s
((u16_t)
¥Ÿo
);

113 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[0] & 0xffff;

114 
acc
 +((
u16_t
 *)&
¥Ÿo_Àn
)[1] & 0xffff;

116 
acc
 >> 16) {

117 
acc
 = (acc & 0xffff) + (acc >> 16);

119  ~(
acc
 & 0xffff);

120 
	}
}

128 
u16_t


129 
	$öë_chksum
(*
d©≠å
, 
u16_t
 
Àn
)

131 
u32_t
 
acc
, 
sum
;

133 
acc
 = 
	`chksum
(
d©≠å
, 
Àn
);

134 
sum
 = (
acc
 & 0xffff) + (acc >> 16);

135 
sum
 += (sum >> 16);

136  ~(
sum
 & 0xffff);

137 
	}
}

139 
u16_t


140 
	$öë_chksum_pbuf
(
pbuf
 *
p
)

142 
u32_t
 
acc
;

143 
pbuf
 *
q
;

144 
u8_t
 
sw≠≥d
;

146 
acc
 = 0;

147 
sw≠≥d
 = 0;

148 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

149 
acc
 +
	`chksum
(
q
->
∑ylﬂd
, q->
Àn
);

150 
acc
 >> 16) {

151 
acc
 = (acc & 0xffff) + (acc >> 16);

153 i‡(
q
->
Àn
 % 2 != 0) {

154 
sw≠≥d
 = 1 - swapped;

155 
acc
 = (acc & 0xff << 8) | (acc & 0xff00 >> 8);

159 i‡(
sw≠≥d
) {

160 
acc
 = ((acc & 0xff) << 8) | ((acc & 0xff00) >> 8);

162  ~(
acc
 & 0xffff);

163 
	}
}

	@net/lwip/core/ipv6/ip6.c

42 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/ù.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/icmp.h
"

50 
	~"lwù/udp.h
"

51 
	~"lwù/t˝.h
"

53 
	~"lwù/°©s.h
"

55 
	~"¨ch/≥rf.h
"

63 
	$ù_öô
()

65 
	}
}

74 
√tif
 *

75 
	$ù_rouã
(
ù_addr
 *
de°
)

77 
√tif
 *netif;

79 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

80 i‡(
	`ù_addr_√tcmp
(
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

81  
√tif
;

85  
√tif_deÁu…
;

86 
	}
}

96 
	$ù_f‹w¨d
(
pbuf
 *
p
, 
ù_hdr
 *
ùhdr
)

98 
√tif
 *netif;

100 
PERF_START
;

102 i‡((
√tif
 = 
	`ù_rouã
((
ù_addr
 *)&(
ùhdr
->
de°
))Ë=
NULL
) {

104 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input:Ço forwardingÑoute found for "));

105 #i‡
IP_DEBUG


106 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

108 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

109 
	`pbuf_‰ì
(
p
);

113 i‡(--
ùhdr
->
h›lim
 == 0) {

114 #i‡
LWIP_ICMP


116 i‡(
ùhdr
->
√xthdr
 !
IP_PROTO_ICMP
) {

117 
	`icmp_time_ex˚eded
(
p
, 
ICMP_TE_TTL
);

120 
	`pbuf_‰ì
(
p
);

132 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_forward: forwardingÖacketÅo "));

133 #i‡
IP_DEBUG


134 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

136 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

138 
	`IP_STATS_INC
(
ù
.
fw
);

139 
	`IP_STATS_INC
(
ù
.
xmô
);

141 
	`PERF_STOP
("ip_forward");

143 
√tif
->
	`ouçut
“ëif, 
p
, (
ù_addr
 *)&(
ùhdr
->
de°
));

144 
	}
}

157 
	$ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
) {

158 
ù_hdr
 *
ùhdr
;

159 
√tif
 *netif;

162 
PERF_START
;

164 #i‡
IP_DEBUG


165 
	`ù_debug_¥öt
(
p
);

169 
	`IP_STATS_INC
(
ù
.
ªcv
);

172 
ùhdr
 = 
p
->
∑ylﬂd
;

175 i‡(
ùhdr
->
v
 != 6) {

176 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IPÖacket dropped dueÅo bad versionÇumber\n"));

177 #i‡
IP_DEBUG


178 
	`ù_debug_¥öt
(
p
);

180 
	`pbuf_‰ì
(
p
);

181 
	`IP_STATS_INC
(
ù
.
îr
);

182 
	`IP_STATS_INC
(
ù
.
dr›
);

187 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

188 #i‡
IP_DEBUG


189 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_input: iphdr->dest "));

190 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

191 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("netif->ip_addr "));

192 
	`ù_addr_debug_¥öt
(
IP_DEBUG
, ((
ù_addr
 *)&(
ùhdr
->
de°
)));

193 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("\n"));

195 i‡(
	`ù_addr_cmp
(&(
ùhdr
->
de°
), &(
√tif
->
ù_addr
))) {

201 i‡(
√tif
 =
NULL
) {

203 #i‡
IP_FORWARD


204 
	`ù_f‹w¨d
(
p
, 
ùhdr
);

206 
	`pbuf_‰ì
(
p
);

210 
	`pbuf_ªÆloc
(
p
, 
IP_HLEN
 + 
	`¡ohs
(
ùhdr
->
Àn
));

213 #i‡
IP_DEBUG


219 if(
	`pbuf_hódî
(
p
, -
IP_HLEN
)) {

220 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

224 
ùhdr
->
√xthdr
) {

225 
IP_PROTO_UDP
:

226 
	`udp_öput
(
p
, 
öp
);

228 
IP_PROTO_TCP
:

229 
	`t˝_öput
(
p
, 
öp
);

231 #i‡
LWIP_ICMP


232 
IP_PROTO_ICMP
:

233 
	`icmp_öput
(
p
, 
öp
);

237 #i‡
LWIP_ICMP


239 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PROTO
);

241 
	`pbuf_‰ì
(
p
);

242 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("Unsuµ‹ãdÅøn•‹à¥Ÿocﬁ %"
U16_F
"\n",

243 
ùhdr
->
√xthdr
));

245 
	`IP_STATS_INC
(
ù
.
¥Ÿîr
);

246 
	`IP_STATS_INC
(
ù
.
dr›
);

248 
	`PERF_STOP
("ip_input");

249 
	}
}

259 
îr_t


260 
	$ù_ouçut_if
 (
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

261 
u8_t
 
âl
,

262 
u8_t
 
¥Ÿo
, 
√tif
 *netif)

264 
ù_hdr
 *
ùhdr
;

266 
PERF_START
;

268 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

269 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

270 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ip_output:ÇotÉnoughÑoom for IP header inÖbuf\n"));

271 
	`IP_STATS_INC
(
ù
.
îr
);

273  
ERR_BUF
;

275 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("À¿%"
U16_F
"ÅŸ_À¿%"U16_F"\n", 
p
->
Àn
,Ö->
tŸ_Àn
));

277 
ùhdr
 = 
p
->
∑ylﬂd
;

280 i‡(
de°
 !
IP_HDRINCL
) {

281 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("!IP_HDRLINCL\n"));

282 
ùhdr
->
h›lim
 = 
âl
;

283 
ùhdr
->
√xthdr
 = 
¥Ÿo
;

284 
ùhdr
->
Àn
 = 
	`ht⁄s
(
p
->
tŸ_Àn
 - 
IP_HLEN
);

285 
	`ù_addr_£t
(&(
ùhdr
->
de°
), dest);

287 
ùhdr
->
v
 = 6;

289 i‡(
	`ù_addr_ißny
(
§c
)) {

290 
	`ù_addr_£t
(&(
ùhdr
->
§c
), &(
√tif
->
ù_addr
));

292 
	`ù_addr_£t
(&(
ùhdr
->
§c
), src);

296 
de°
 = &(
ùhdr
->dest);

299 
	`IP_STATS_INC
(
ù
.
xmô
);

301 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut_if: %c%¯÷í %"
U16_F
")\n", 
√tif
->
«me
[0],Çëif->«me[1], 
p
->
tŸ_Àn
));

302 #i‡
IP_DEBUG


303 
	`ù_debug_¥öt
(
p
);

306 
	`PERF_STOP
("ip_output_if");

307  
√tif
->
	`ouçut
“ëif, 
p
, 
de°
);

308 
	}
}

316 
îr_t


317 
	$ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

318 
u8_t
 
âl
, u8_à
¥Ÿo
)

320 
√tif
 *netif;

321 i‡((
√tif
 = 
	`ù_rouã
(
de°
)Ë=
NULL
) {

322 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("ù_ouçut: NÿrouãÅÿ0x%"
X32_F
"\n", 
de°
->
addr
));

323 
	`IP_STATS_INC
(
ù
.
πîr
);

324  
ERR_RTE
;

327  
	`ù_ouçut_if
 (
p
, 
§c
, 
de°
, 
âl
, 
¥Ÿo
, 
√tif
);

328 
	}
}

330 #i‡
IP_DEBUG


332 
	$ù_debug_¥öt
(
pbuf
 *
p
)

334 
ù_hdr
 *
ùhdr
 = 
p
->
∑ylﬂd
;

336 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("IP header:\n"));

337 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

338 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("|%2"
S16_F
" | %"
X16_F
"%"X16_F" | %"X16_F"%"X16_F" | (v,Åraffic class, flowÜabel)\n",

339 
ùhdr
->
v
,

340 
ùhdr
->
t˛ass1
, iphdr->
t˛ass2
,

341 
ùhdr
->
Êow1
, iphdr->
Êow2
));

342 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

343 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %5"
U16_F
" | %2"U16_F" | %2"U16_F" | (len,Çexthdr, hoplim)\n",

344 
	`¡ohs
(
ùhdr
->
Àn
),

345 
ùhdr
->
√xthdr
,

346 
ùhdr
->
h›lim
));

347 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

348 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

349 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) >> 16) & 0xffff,

350 
	`¡ohl
(
ùhdr
->
§c
.
addr
[0]) & 0xffff));

351 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

352 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) >> 16) & 0xffff,

353 
	`¡ohl
(
ùhdr
->
§c
.
addr
[1]) & 0xffff));

354 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

355 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) >> 16) & 0xffff,

356 
	`¡ohl
(
ùhdr
->
§c
.
addr
[2]) & 0xffff));

357 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (src)\n",

358 (
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) >> 16) & 0xffff,

359 
	`¡ohl
(
ùhdr
->
§c
.
addr
[3]) & 0xffff));

360 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

361 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

362 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) >> 16) & 0xffff,

363 
	`¡ohl
(
ùhdr
->
de°
.
addr
[0]) & 0xffff));

364 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

365 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) >> 16) & 0xffff,

366 
	`¡ohl
(
ùhdr
->
de°
.
addr
[1]) & 0xffff));

367 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

368 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) >> 16) & 0xffff,

369 
	`¡ohl
(
ùhdr
->
de°
.
addr
[2]) & 0xffff));

370 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("| %4"
X32_F
" | %4"X32_F" | (dest)\n",

371 (
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) >> 16) & 0xffff,

372 
	`¡ohl
(
ùhdr
->
de°
.
addr
[3]) & 0xffff));

373 
	`LWIP_DEBUGF
(
IP_DEBUG
, ("+-------------------------------+\n"));

374 
	}
}

	@net/lwip/core/ipv6/ip6_addr.c

33 
	~"lwù/›t.h
"

34 
	~"lwù/ù_addr.h
"

35 
	~"lwù/öë.h
"

37 
u8_t


38 
	$ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

39 
ù_addr
 *
mask
)

41 ((
addr1
->
addr
[0] & 
mask
->addr[0]Ë=(
addr2
->addr[0] & mask->addr[0]) &&

42 (
addr1
->
addr
[1] & 
mask
->addr[1]Ë=(
addr2
->addr[1] & mask->addr[1]) &&

43 (
addr1
->
addr
[2] & 
mask
->addr[2]Ë=(
addr2
->addr[2] & mask->addr[2]) &&

44 (
addr1
->
addr
[3] & 
mask
->addr[3]Ë=(
addr2
->addr[3] & mask->addr[3]));

46 
	}
}

48 
u8_t


49 
	$ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
)

51 (
addr1
->
addr
[0] =
addr2
->addr[0] &&

52 
addr1
->
addr
[1] =
addr2
->addr[1] &&

53 
addr1
->
addr
[2] =
addr2
->addr[2] &&

54 
addr1
->
addr
[3] =
addr2
->addr[3]);

55 
	}
}

58 
	$ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
)

60 
	`SMEMCPY
(
de°
, 
§c
, (
ù_addr
));

65 
	}
}

67 
u8_t


68 
	$ù_addr_ißny
(
ù_addr
 *
addr
)

70 i‡(
addr
 =
NULL
)  1;

71 ((
addr
->addr[0] |áddr->addr[1] |áddr->addr[2] |áddr->addr[3]) == 0);

72 
	}
}

	@net/lwip/core/mem.c

56 
	~"lwù/›t.h
"

58 #i‡!
MEM_LIBC_MALLOC


60 
	~"lwù/def.h
"

61 
	~"lwù/mem.h
"

62 
	~"lwù/sys.h
"

63 
	~"lwù/°©s.h
"

65 
	~<°rög.h
>

67 #i‡
MEM_USE_POOLS


73 
	smem_hñ≥r


75 
memp_t
 
	mpoﬁƒ
;

86 
	$mem_mÆloc
(
mem_size_t
 
size
)

88 
mem_hñ≥r
 *
ñemít
;

89 
memp_t
 
poﬁƒ
;

91 
poﬁƒ
 = 
MEMP_POOL_FIRST
;Öoﬁƒ <
MEMP_POOL_LAST
;Öoolnr++) {

94 i‡((
size
 + (
mem_hñ≥r
)Ë<
memp_sizes
[
poﬁƒ
]) {

98 i‡(
poﬁƒ
 > 
MEMP_POOL_LAST
) {

99 
	`LWIP_ASSERT
("mem_malloc():ÇoÖool isÅhat big!", 0);

100  
NULL
;

102 
ñemít
 = (
mem_hñ≥r
*)
	`memp_mÆloc
(
poﬁƒ
);

103 i‡(
ñemít
 =
NULL
) {

107  
NULL
;

111 
ñemít
->
poﬁƒ
 =Öoolnr;

113 
ñemít
++;

115  
ñemít
;

116 
	}
}

126 
	$mem_‰ì
(*
rmem
)

128 
mem_hñ≥r
 *
hmem
 = (mem_hñ≥r*)
rmem
;

130 
	`LWIP_ASSERT
("rmem !NULL", (
rmem
 !
NULL
));

131 
	`LWIP_ASSERT
("rmem =MEM_ALIGN‘mem)", (
rmem
 =
	`LWIP_MEM_ALIGN
(rmem)));

134 
hmem
--;

136 
	`LWIP_ASSERT
("hmem !NULL", (
hmem
 !
NULL
));

137 
	`LWIP_ASSERT
("hmem =MEM_ALIGN(hmem)", (
hmem
 =
	`LWIP_MEM_ALIGN
(hmem)));

138 
	`LWIP_ASSERT
("hmem->poﬁƒ < MEMP_MAX", (
hmem
->
poﬁƒ
 < 
MEMP_MAX
));

141 
	`memp_‰ì
(
hmem
->
poﬁƒ
, hmem);

142 
	}
}

152 
	smem
 {

154 
mem_size_t
 
	m√xt
;

156 
mem_size_t
 
	m¥ev
;

158 
u8_t
 
	mu£d
;

164 #i‚de‡
MIN_SIZE


165 
	#MIN_SIZE
 12

	)

168 
	#MIN_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MIN_SIZE
)

	)

169 
	#SIZEOF_STRUCT_MEM
 
	`LWIP_MEM_ALIGN_SIZE
((
mem
))

	)

170 
	#MEM_SIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEM_SIZE
)

	)

173 
u8_t
 
	gøm_hóp
[
MEM_SIZE_ALIGNED
 + (2*
SIZEOF_STRUCT_MEM
Ë+ 
MEM_ALIGNMENT
];

175 
u8_t
 *
	gøm
;

177 
mem
 *
	gøm_íd
;

179 
mem
 *
	gl‰ì
;

182 
sys_£m_t
 
	gmem_£m
;

184 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


186 vﬁ©ûê
u8_t
 
	gmem_‰ì_cou¡
;

189 
	#LWIP_MEM_FREE_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_‰ì
)

	)

190 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_‰ì
)

	)

191 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_‰ì
)

	)

192 
	#LWIP_MEM_ALLOC_DECL_PROTECT
(Ë
	`SYS_ARCH_DECL_PROTECT
(
Àv_Æloc
)

	)

193 
	#LWIP_MEM_ALLOC_PROTECT
(Ë
	`SYS_ARCH_PROTECT
(
Àv_Æloc
)

	)

194 
	#LWIP_MEM_ALLOC_UNPROTECT
(Ë
	`SYS_ARCH_UNPROTECT
(
Àv_Æloc
)

	)

199 
	#LWIP_MEM_FREE_DECL_PROTECT
()

	)

200 
	#LWIP_MEM_FREE_PROTECT
(Ë
	`sys_¨ch_£m_waô
(
mem_£m
, 0)

	)

201 
	#LWIP_MEM_FREE_UNPROTECT
(Ë
	`sys_£m_sig«l
(
mem_£m
)

	)

203 
	#LWIP_MEM_ALLOC_DECL_PROTECT
()

	)

204 
	#LWIP_MEM_ALLOC_PROTECT
()

	)

205 
	#LWIP_MEM_ALLOC_UNPROTECT
()

	)

222 
	$∂ug_hﬁes
(
mem
 *mem)

224 
mem
 *
nmem
;

225 
mem
 *
pmem
;

227 
	`LWIP_ASSERT
("∂ug_hﬁes: mem >øm", (
u8_t
 *)
mem
 >
øm
);

228 
	`LWIP_ASSERT
("∂ug_hﬁes: mem <Ñam_íd", (
u8_t
 *)
mem
 < (u8_à*)
øm_íd
);

229 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->u£d =0", 
mem
->
u£d
 == 0);

232 
	`LWIP_ASSERT
("∂ug_hﬁes: mem->√xà<MEM_SIZE_ALIGNED", 
mem
->
√xt
 <
MEM_SIZE_ALIGNED
);

234 
nmem
 = (
mem
 *)&
øm
[mem->
√xt
];

235 i‡(
mem
 !
nmem
 &&Çmem->
u£d
 =0 && (
u8_t
 *Ímem !(u8_à*)
øm_íd
) {

237 i‡(
l‰ì
 =
nmem
) {

238 
l‰ì
 = 
mem
;

240 
mem
->
√xt
 = 
nmem
->next;

241 ((
mem
 *)&
øm
[
nmem
->
√xt
])->
¥ev
 = (
u8_t
 *)mem -Ñam;

245 
pmem
 = (
mem
 *)&
øm
[mem->
¥ev
];

246 i‡(
pmem
 !
mem
 &&Ömem->
u£d
 == 0) {

248 i‡(
l‰ì
 =
mem
) {

249 
l‰ì
 = 
pmem
;

251 
pmem
->
√xt
 = 
mem
->next;

252 ((
mem
 *)&
øm
[mem->
√xt
])->
¥ev
 = (
u8_t
 *)
pmem
 -Ñam;

254 
	}
}

260 
	$mem_öô
()

262 
mem
 *mem;

264 
	`LWIP_ASSERT
("Sanity checkálignment",

265 (
SIZEOF_STRUCT_MEM
 & (
MEM_ALIGNMENT
-1)) == 0);

268 
øm
 = 
	`LWIP_MEM_ALIGN
(
øm_hóp
);

270 
mem
 = (mem *)
øm
;

271 
mem
->
√xt
 = 
MEM_SIZE_ALIGNED
;

272 
mem
->
¥ev
 = 0;

273 
mem
->
u£d
 = 0;

275 
øm_íd
 = (
mem
 *)&
øm
[
MEM_SIZE_ALIGNED
];

276 
øm_íd
->
u£d
 = 1;

277 
øm_íd
->
√xt
 = 
MEM_SIZE_ALIGNED
;

278 
øm_íd
->
¥ev
 = 
MEM_SIZE_ALIGNED
;

280 
mem_£m
 = 
	`sys_£m_√w
(1);

283 
l‰ì
 = (
mem
 *)
øm
;

285 
	`MEM_STATS_AVAIL
(
avaû
, 
MEM_SIZE_ALIGNED
);

286 
	}
}

295 
	$mem_‰ì
(*
rmem
)

297 
mem
 *mem;

298 
	`LWIP_MEM_FREE_DECL_PROTECT
();

300 i‡(
rmem
 =
NULL
) {

301 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("mem_free(p == NULL) was called.\n"));

304 
	`LWIP_ASSERT
("mem_‰ì: s™ôy checkálignmít", (((
mem_±r_t
)
rmem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

306 
	`LWIP_ASSERT
("mem_‰ì:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

307 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

309 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

310 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

311 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_free: illegal memory\n"));

313 
	`SYS_ARCH_PROTECT
(
Àv
);

314 
	`MEM_STATS_INC
(
ûÀgÆ
);

315 
	`SYS_ARCH_UNPROTECT
(
Àv
);

319 
	`LWIP_MEM_FREE_PROTECT
();

321 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

323 
	`LWIP_ASSERT
("mem_‰ì: mem->u£d", 
mem
->
u£d
);

325 
mem
->
u£d
 = 0;

327 i‡(
mem
 < 
l‰ì
) {

329 
l‰ì
 = 
mem
;

332 
	`MEM_STATS_DEC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

335 
	`∂ug_hﬁes
(
mem
);

336 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


337 
mem_‰ì_cou¡
 = 1;

339 
	`LWIP_MEM_FREE_UNPROTECT
();

340 
	}
}

355 
	$mem_ªÆloc
(*
rmem
, 
mem_size_t
 
√wsize
)

357 
mem_size_t
 
size
;

358 
mem_size_t
 
±r
, 
±r2
;

359 
mem
 *mem, *
mem2
;

361 
	`LWIP_MEM_FREE_DECL_PROTECT
();

365 
√wsize
 = 
	`LWIP_MEM_ALIGN_SIZE
(newsize);

367 if(
√wsize
 < 
MIN_SIZE_ALIGNED
) {

369 
√wsize
 = 
MIN_SIZE_ALIGNED
;

372 i‡(
√wsize
 > 
MEM_SIZE_ALIGNED
) {

373  
NULL
;

376 
	`LWIP_ASSERT
("mem_ªÆloc:ÜegÆ mem‹y", (
u8_t
 *)
rmem
 >(u8_à*)
øm
 &&

377 (
u8_t
 *)
rmem
 < (u8_à*)
øm_íd
);

379 i‡((
u8_t
 *)
rmem
 < (u8_à*)
øm
 || (u8_à*Ïmem >(u8_à*)
øm_íd
) {

380 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

381 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 3, ("mem_realloc: illegal memory\n"));

383 
	`SYS_ARCH_PROTECT
(
Àv
);

384 
	`MEM_STATS_INC
(
ûÀgÆ
);

385 
	`SYS_ARCH_UNPROTECT
(
Àv
);

386  
rmem
;

389 
mem
 = (mem *)((
u8_t
 *)
rmem
 - 
SIZEOF_STRUCT_MEM
);

391 
±r
 = (
u8_t
 *)
mem
 - 
øm
;

393 
size
 = 
mem
->
√xt
 - 
±r
 - 
SIZEOF_STRUCT_MEM
;

394 
	`LWIP_ASSERT
("mem_ªÆlo¯ˇ¿⁄ly shrök mem‹y", 
√wsize
 <
size
);

395 i‡(
√wsize
 > 
size
) {

397  
NULL
;

399 i‡(
√wsize
 =
size
) {

401  
rmem
;

405 
	`LWIP_MEM_FREE_PROTECT
();

407 
	`MEM_STATS_DEC_USED
(
u£d
, (
size
 - 
√wsize
));

409 
mem2
 = (
mem
 *)&
øm
[mem->
√xt
];

410 if(
mem2
->
u£d
 == 0) {

412 
mem_size_t
 
√xt
;

414 
√xt
 = 
mem2
->next;

416 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

417 i‡(
l‰ì
 =
mem2
) {

418 
l‰ì
 = (
mem
 *)&
øm
[
±r2
];

420 
mem2
 = (
mem
 *)&
øm
[
±r2
];

421 
mem2
->
u£d
 = 0;

423 
mem2
->
√xt
 =Çext;

425 
mem2
->
¥ev
 = 
±r
;

427 
mem
->
√xt
 = 
±r2
;

431 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

432 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

435 } i‡(
√wsize
 + 
SIZEOF_STRUCT_MEM
 + 
MIN_SIZE_ALIGNED
 <
size
) {

443 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
√wsize
;

444 
mem2
 = (
mem
 *)&
øm
[
±r2
];

445 i‡(
mem2
 < 
l‰ì
) {

446 
l‰ì
 = 
mem2
;

448 
mem2
->
u£d
 = 0;

449 
mem2
->
√xt
 = 
mem
->next;

450 
mem2
->
¥ev
 = 
±r
;

451 
mem
->
√xt
 = 
±r2
;

452 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

453 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

463 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


464 
mem_‰ì_cou¡
 = 1;

466 
	`LWIP_MEM_FREE_UNPROTECT
();

467  
rmem
;

468 
	}
}

480 
	$mem_mÆloc
(
mem_size_t
 
size
)

482 
mem_size_t
 
±r
, 
±r2
;

483 
mem
 *mem, *
mem2
;

484 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


485 
u8_t
 
loˇl_mem_‰ì_cou¡
 = 0;

487 
	`LWIP_MEM_ALLOC_DECL_PROTECT
();

489 i‡(
size
 == 0) {

490  
NULL
;

495 
size
 = 
	`LWIP_MEM_ALIGN_SIZE
(size);

497 if(
size
 < 
MIN_SIZE_ALIGNED
) {

499 
size
 = 
MIN_SIZE_ALIGNED
;

502 i‡(
size
 > 
MEM_SIZE_ALIGNED
) {

503  
NULL
;

507 
	`sys_¨ch_£m_waô
(
mem_£m
, 0);

508 
	`LWIP_MEM_ALLOC_PROTECT
();

509 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


512 
loˇl_mem_‰ì_cou¡
 = 0;

518 
±r
 = (
u8_t
 *)
l‰ì
 - 
øm
;Öå < 
MEM_SIZE_ALIGNED
 - 
size
;

519 
±r
 = ((
mem
 *)&
øm
[±r])->
√xt
) {

520 
mem
 = (mem *)&
øm
[
±r
];

521 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


522 
mem_‰ì_cou¡
 = 0;

523 
	`LWIP_MEM_ALLOC_UNPROTECT
();

525 
	`LWIP_MEM_ALLOC_PROTECT
();

526 i‡(
mem_‰ì_cou¡
 != 0) {

527 
loˇl_mem_‰ì_cou¡
 = 
mem_‰ì_cou¡
;

529 
mem_‰ì_cou¡
 = 0;

532 i‡((!
mem
->
u£d
) &&

533 (
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
)Ë>
size
) {

537 i‡(
mem
->
√xt
 - (
±r
 + 
SIZEOF_STRUCT_MEM
Ë>(
size
 + SIZEOF_STRUCT_MEM + 
MIN_SIZE_ALIGNED
)) {

548 
±r2
 = 
±r
 + 
SIZEOF_STRUCT_MEM
 + 
size
;

550 
mem2
 = (
mem
 *)&
øm
[
±r2
];

551 
mem2
->
u£d
 = 0;

552 
mem2
->
√xt
 = 
mem
->next;

553 
mem2
->
¥ev
 = 
±r
;

555 
mem
->
√xt
 = 
±r2
;

556 
mem
->
u£d
 = 1;

558 i‡(
mem2
->
√xt
 !
MEM_SIZE_ALIGNED
) {

559 ((
mem
 *)&
øm
[
mem2
->
√xt
])->
¥ev
 = 
±r2
;

561 
	`MEM_STATS_INC_USED
(
u£d
, (
size
 + 
SIZEOF_STRUCT_MEM
));

570 
mem
->
u£d
 = 1;

571 
	`MEM_STATS_INC_USED
(
u£d
, 
mem
->
√xt
 - ((
u8_t
 *)mem - 
øm
));

574 i‡(
mem
 =
l‰ì
) {

576 
l‰ì
->
u£d
 &&Ü‰ì !
øm_íd
) {

577 
	`LWIP_MEM_ALLOC_UNPROTECT
();

579 
	`LWIP_MEM_ALLOC_PROTECT
();

580 
l‰ì
 = (
mem
 *)&
øm
[l‰ì->
√xt
];

582 
	`LWIP_ASSERT
("mem_mÆloc: !l‰ì->u£d", ((
l‰ì
 =
øm_íd
Ë|| (!l‰ì->
u£d
)));

584 
	`LWIP_MEM_ALLOC_UNPROTECT
();

585 
	`sys_£m_sig«l
(
mem_£m
);

586 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÇotáboveÑam_end.",

587 (
mem_±r_t
)
mem
 + 
SIZEOF_STRUCT_MEM
 + 
size
 <(mem_±r_t)
øm_íd
);

588 
	`LWIP_ASSERT
("mem_malloc:állocated memoryÖroperlyáligned.",

589 ()((
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
Ë% 
MEM_ALIGNMENT
 == 0);

590 
	`LWIP_ASSERT
("mem_malloc: sanity checkálignment",

591 (((
mem_±r_t
)
mem
Ë& (
MEM_ALIGNMENT
-1)) == 0);

593  (
u8_t
 *)
mem
 + 
SIZEOF_STRUCT_MEM
;

596 #i‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


598 } 
loˇl_mem_‰ì_cou¡
 != 0);

600 
	`LWIP_DEBUGF
(
MEM_DEBUG
 | 2, ("mem_mÆloc: couldÇŸáŒoˇã %"
S16_F
" byãs\n", (
s16_t
)
size
));

601 
	`MEM_STATS_INC
(
îr
);

602 
	`LWIP_MEM_ALLOC_UNPROTECT
();

603 
	`sys_£m_sig«l
(
mem_£m
);

604  
NULL
;

605 
	}
}

618 *
	$mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
)

620 *
p
;

623 
p
 = 
	`mem_mÆloc
(
cou¡
 * 
size
);

624 i‡(
p
) {

626 
	`mem£t
(
p
, 0, 
cou¡
 * 
size
);

628  
p
;

629 
	}
}

	@net/lwip/core/memp.c

41 
	~"lwù/›t.h
"

43 
	~"lwù/memp.h
"

44 
	~"lwù/pbuf.h
"

45 
	~"lwù/udp.h
"

46 
	~"lwù/øw.h
"

47 
	~"lwù/t˝.h
"

48 
	~"lwù/igmp.h
"

49 
	~"lwù/≠i.h
"

50 
	~"lwù/≠i_msg.h
"

51 
	~"lwù/t˝ù.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"√tif/ëh¨p.h
"

55 
	~"lwù/ù_‰ag.h
"

57 
	~<°rög.h
>

59 
	smemp
 {

60 
memp
 *
	m√xt
;

61 #i‡
MEMP_OVERFLOW_CHECK


62 c⁄° *
	mfûe
;

63 
	mlöe
;

67 #i‡
MEMP_OVERFLOW_CHECK


76 #i‚de‡
MEMP_SANITY_REGION_BEFORE


77 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

79 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

80 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

82 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

84 #i‚de‡
MEMP_SANITY_REGION_AFTER


85 
	#MEMP_SANITY_REGION_AFTER
 16

	)

87 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

88 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

90 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

94 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

95 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

103 
	#MEMP_SIZE
 0

	)

104 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

110 
memp
 *
	gmemp_èb
[
MEMP_MAX
];

113 #i‡!
MEM_USE_POOLS


116 c⁄° 
u16_t
 
	gmemp_sizes
[
MEMP_MAX
] = {

117 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
	`MEMP_ALIGN_SIZE
(size),

	)

118 
	~"lwù/memp_°d.h
"

122 c⁄° 
u16_t
 
	gmemp_num
[
MEMP_MAX
] = {

123 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë“um),

	)

124 
	~"lwù/memp_°d.h
"

128 #ifde‡
LWIP_DEBUG


129 c⁄° *
	gmemp_desc
[
MEMP_MAX
] = {

130 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë(desc),

	)

131 
	~"lwù/memp_°d.h
"

136 
u8_t
 
	gmemp_mem‹y
[
MEM_ALIGNMENT
 - 1

137 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë+ ( (numË* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(sizeËË)

	)

138 
	~"lwù/memp_°d.h
"

141 #i‡
MEMP_SANITY_CHECK


146 
	$memp_ßnôy
()

148 
s16_t
 
i
, 
c
;

149 
memp
 *
m
, *
n
;

151 
i
 = 0; i < 
MEMP_MAX
; i++) {

152 
m
 = 
memp_èb
[
i
]; m !
NULL
; m = m->
√xt
) {

153 
c
 = 1;

154 
n
 = 
memp_èb
[
i
];Ç !
NULL
;Ç =Ç->
√xt
) {

155 i‡(
n
 =
m
 && --
c
 < 0) {

162 
	}
}

164 #i‡
MEMP_OVERFLOW_CHECK


173 
	$memp_ovîÊow_check_ñemít
(
memp
 *
p
, 
u16_t
 
memp_size
)

175 
u16_t
 
k
;

176 
u8_t
 *
m
;

177 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

178 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

179 
k
 = 0; k < 
MEMP_SANITY_REGION_BEFORE_ALIGNED
; k++) {

180 i‡(
m
[
k
] != 0xcd) {

181 
	`LWIP_ASSERT
("detected memp underflow!", 0);

185 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

186 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_size
 - 
MEMP_SANITY_REGION_AFTER_ALIGNED
;

187 
k
 = 0; k < 
MEMP_SANITY_REGION_AFTER_ALIGNED
; k++) {

188 i‡(
m
[
k
] != 0xcd) {

189 
	`LWIP_ASSERT
("detected memp overflow!", 0);

193 
	}
}

201 
	$memp_ovîÊow_check_Æl
()

203 
u16_t
 
i
, 
j
;

204 
memp
 *
p
;

206 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

207 
i
 = 0; i < 
MEMP_MAX
; ++i) {

208 
p
 =Ö;

209 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

210 
	`memp_ovîÊow_check_ñemít
(
p
, 
memp_sizes
[
i
]);

211 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

214 
	}
}

220 
	$memp_ovîÊow_öô
()

222 
u16_t
 
i
, 
j
;

223 
memp
 *
p
;

224 
u8_t
 *
m
;

226 
p
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

227 
i
 = 0; i < 
MEMP_MAX
; ++i) {

228 
p
 =Ö;

229 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

230 #i‡
MEMP_SANITY_REGION_BEFORE_ALIGNED
 > 0

231 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 - 
MEMP_SANITY_REGION_BEFORE_ALIGNED
;

232 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_BEFORE_ALIGNED
);

234 #i‡
MEMP_SANITY_REGION_AFTER_ALIGNED
 > 0

235 
m
 = (
u8_t
*)
p
 + 
MEMP_SIZE
 + 
memp_sizes
[
i
] - 
MEMP_SANITY_REGION_AFTER_ALIGNED
;

236 
	`mem£t
(
m
, 0xcd, 
MEMP_SANITY_REGION_AFTER_ALIGNED
);

238 
p
 = (
memp
*)((
u8_t
*Ì + 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

241 
	}
}

250 
	$memp_öô
()

252 
memp
 *memp;

253 
u16_t
 
i
, 
j
;

255 
i
 = 0; i < 
MEMP_MAX
; ++i) {

256 
	`MEMP_STATS_AVAIL
(
u£d
, 
i
, 0);

257 
	`MEMP_STATS_AVAIL
(
max
, 
i
, 0);

258 
	`MEMP_STATS_AVAIL
(
îr
, 
i
, 0);

259 
	`MEMP_STATS_AVAIL
(
avaû
, 
i
, 
memp_num
[i]);

262 
memp
 = 
	`LWIP_MEM_ALIGN
(
memp_mem‹y
);

264 
i
 = 0; i < 
MEMP_MAX
; ++i) {

265 
memp_èb
[
i
] = 
NULL
;

267 
j
 = 0; j < 
memp_num
[
i
]; ++j) {

268 
memp
->
√xt
 = 
memp_èb
[
i
];

269 
memp_èb
[
i
] = 
memp
;

270 
memp
 = (mem∞*)((
u8_t
 *)mem∞+ 
MEMP_SIZE
 + 
memp_sizes
[
i
]);

273 #i‡
MEMP_OVERFLOW_CHECK


274 
	`memp_ovîÊow_öô
();

276 
	`memp_ovîÊow_check_Æl
();

278 
	}
}

292 #i‡!
MEMP_OVERFLOW_CHECK


293 
	$memp_mÆloc
(
memp_t
 
ty≥
)

295 
	$memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
)

298 
memp
 *memp;

299 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

301 
	`LWIP_ERROR
("memp_mÆloc:Åy≥ < MEMP_MAX", (
ty≥
 < 
MEMP_MAX
),  
NULL
;);

303 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

304 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

305 
	`memp_ovîÊow_check_Æl
();

308 
memp
 = 
memp_èb
[
ty≥
];

310 i‡(
memp
 !
NULL
) {

311 
memp_èb
[
ty≥
] = 
memp
->
√xt
;

312 #i‡
MEMP_OVERFLOW_CHECK


313 
memp
->
√xt
 = 
NULL
;

314 
memp
->
fûe
 = file;

315 
memp
->
löe
 =Üine;

317 
	`MEMP_STATS_INC_USED
(
u£d
, 
ty≥
);

318 
	`LWIP_ASSERT
("memp_malloc: mempÖroperlyáligned",

319 ((
mem_±r_t
)
memp
 % 
MEM_ALIGNMENT
) == 0);

320 
memp
 = (memp*)((
u8_t
*)mem∞+ 
MEMP_SIZE
);

322 
	`LWIP_DEBUGF
(
MEMP_DEBUG
 | 2, ("memp_mÆloc: ouào‡mem‹y i¿poﬁ %s\n", 
memp_desc
[
ty≥
]));

323 
	`MEMP_STATS_INC
(
îr
, 
ty≥
);

326 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

328  
memp
;

329 
	}
}

338 
	$memp_‰ì
(
memp_t
 
ty≥
, *
mem
)

340 
memp
 *memp;

341 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

343 i‡(
mem
 =
NULL
) {

346 
	`LWIP_ASSERT
("memp_free: memÖroperlyáligned",

347 ((
mem_±r_t
)
mem
 % 
MEM_ALIGNMENT
) == 0);

349 
memp
 = (mem∞*)((
u8_t
*)
mem
 - 
MEMP_SIZE
);

351 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

352 #i‡
MEMP_OVERFLOW_CHECK


353 #i‡
MEMP_OVERFLOW_CHECK
 >= 2

354 
	`memp_ovîÊow_check_Æl
();

356 
	`memp_ovîÊow_check_ñemít
(
memp
, 
memp_sizes
[
ty≥
]);

360 
	`MEMP_STATS_DEC
(
u£d
, 
ty≥
);

362 
memp
->
√xt
 = 
memp_èb
[
ty≥
];

363 
memp_èb
[
ty≥
] = 
memp
;

365 #i‡
MEMP_SANITY_CHECK


366 
	`LWIP_ASSERT
("mem∞ßnôy", 
	`memp_ßnôy
());

369 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

370 
	}
}

	@net/lwip/core/netif.c

39 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/t˝.h
"

45 
	~"lwù/¢mp.h
"

46 
	~"lwù/igmp.h
"

47 
	~"√tif/ëh¨p.h
"

48 #i‡
ENABLE_LOOPBACK


49 
	~"lwù/sys.h
"

50 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


51 
	~"lwù/t˝ù.h
"

55 #i‡
LWIP_NETIF_STATUS_CALLBACK


56 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ i‡“->
°©us_ˇŒback
Ë“->°©us_ˇŒback)“); }

	)

58 
	#NETIF_STATUS_CALLBACK
(
n
Ë{ }

	)

61 #i‡
LWIP_NETIF_LINK_CALLBACK


62 
	#NETIF_LINK_CALLBACK
(
n
Ë{ i‡“->
lök_ˇŒback
Ë“->lök_ˇŒback)“); }

	)

64 
	#NETIF_LINK_CALLBACK
(
n
Ë{ }

	)

67 
√tif
 *
	g√tif_li°
;

68 
√tif
 *
	g√tif_deÁu…
;

84 
√tif
 *

85 
√tif_add
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

86 
ù_addr
 *
gw
,

87 *
°©e
,

88 
	$îr_t
 (* 
öô
)(
√tif
 *netif),

89 
	$îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif))

91 
u8_t
 
√ti‚um
 = 0;

94 
√tif
->
ù_addr
.
addr
 = 0;

95 
√tif
->
√tmask
.
addr
 = 0;

96 
√tif
->
gw
.
addr
 = 0;

97 
√tif
->
Êags
 = 0;

98 #i‡
LWIP_DHCP


100 
√tif
->
dh˝
 = 
NULL
;

102 #i‡
LWIP_AUTOIP


104 
√tif
->
autoù
 = 
NULL
;

106 #i‡
LWIP_NETIF_STATUS_CALLBACK


107 
√tif
->
°©us_ˇŒback
 = 
NULL
;

109 #i‡
LWIP_NETIF_LINK_CALLBACK


110 
√tif
->
lök_ˇŒback
 = 
NULL
;

112 #i‡
LWIP_IGMP


113 
√tif
->
igmp_mac_fûãr
 = 
NULL
;

115 #i‡
ENABLE_LOOPBACK


116 
√tif
->
lo›_fú°
 = 
NULL
;

117 
√tif
->
lo›_œ°
 = 
NULL
;

121 
√tif
->
°©e
 = state;

122 
√tif
->
num
 = 
√ti‚um
++;

123 
√tif
->
öput
 = input;

124 #i‡
LWIP_NETIF_HWADDRHINT


125 
√tif
->
addr_höt
 = 
NULL
;

127 #i‡
ENABLE_LOOPBACK
 && 
LWIP_LOOPBACK_MAX_PBUFS


128 
√tif
->
lo›_˙t_cuºít
 = 0;

131 
	`√tif_£t_addr
(
√tif
, 
ùaddr
, 
√tmask
, 
gw
);

134 i‡(
	`öô
(
√tif
Ë!
ERR_OK
) {

135  
NULL
;

139 
√tif
->
√xt
 = 
√tif_li°
;

140 
√tif_li°
 = 
√tif
;

141 
	`¢mp_öc_iÊi°
();

143 #i‡
LWIP_IGMP


145 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

146 
	`igmp_°¨t
–
√tif
);

150 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif:ádded interface %c%c IPáddr ",

151 
√tif
->
«me
[0],Çetif->name[1]));

152 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
ùaddr
);

153 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("Çetmask "));

154 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
√tmask
);

155 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, (" gw "));

156 
	`ù_addr_debug_¥öt
(
NETIF_DEBUG
, 
gw
);

157 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("\n"));

158  
√tif
;

159 
	}
}

171 
	$√tif_£t_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

172 
ù_addr
 *
gw
)

174 
	`√tif_£t_ùaddr
(
√tif
, 
ùaddr
);

175 
	`√tif_£t_√tmask
(
√tif
, 
√tmask
);

176 
	`√tif_£t_gw
(
√tif
, 
gw
);

177 
	}
}

184 
	$√tif_ªmove
(
√tif
 *Çetif)

186 i‡–
√tif
 =
NULL
 ) ;

188 #i‡
LWIP_IGMP


190 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

191 
	`igmp_°›
–
√tif
);

195 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

198 i‡(
√tif_li°
 =
√tif
) {

199 
√tif_li°
 = 
√tif
->
√xt
;

200 
	`¢mp_dec_iÊi°
();

204 
√tif
 * 
tmpNëif
;

205 
tmpNëif
 = 
√tif_li°
;ÅmpNëi‡!
NULL
;ÅmpNëi‡tmpNëif->
√xt
) {

206 i‡(
tmpNëif
->
√xt
 =
√tif
) {

207 
tmpNëif
->
√xt
 = 
√tif
->next;

208 
	`¢mp_dec_iÊi°
();

212 i‡(
tmpNëif
 =
NULL
)

216 i‡(
√tif_deÁu…
 =
√tif
)

218 
	`√tif_£t_deÁu…
(
NULL
);

219 
	`LWIP_DEBUGF
–
NETIF_DEBUG
, ("netif_remove:ÑemovedÇetif\n") );

220 
	}
}

228 
√tif
 *

229 
	$√tif_föd
(*
«me
)

231 
√tif
 *netif;

232 
u8_t
 
num
;

234 i‡(
«me
 =
NULL
) {

235  
NULL
;

238 
num
 = 
«me
[2] - '0';

240 
√tif
 = 
√tif_li°
;Çëi‡!
NULL
;Çëi‡√tif->
√xt
) {

241 i‡(
num
 =
√tif
->num &&

242 
«me
[0] =
√tif
->name[0] &&

243 
«me
[1] =
√tif
->name[1]) {

244 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: found %c%c\n", 
«me
[0],Çame[1]));

245  
√tif
;

248 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("√tif_föd: didn'àföd %c%c\n", 
«me
[0],Çame[1]));

249  
NULL
;

250 
	}
}

262 
	$√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

266 #i‡
LWIP_TCP


267 
t˝_pcb
 *
pcb
;

268 
t˝_pcb_li°í
 *
Õcb
;

271 i‡((
	`ù_addr_cmp
(
ùaddr
, &(
√tif
->
ù_addr
))) == 0)

274 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("netif_set_ipaddr:Çetifáddress being changed\n"));

275 
pcb
 = 
t˝_a˘ive_pcbs
;

276 
pcb
 !
NULL
) {

278 i‡(
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

280 
t˝_pcb
 *
√xt
 = 
pcb
->next;

281 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 1, ("√tif_£t_ùaddr:áb‹tög TCPÖcb %p\n", (*)
pcb
));

282 
	`t˝_ab‹t
(
pcb
);

283 
pcb
 = 
√xt
;

285 
pcb
 =Öcb->
√xt
;

288 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

290 i‡((!(
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)))) &&

291 (
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
√tif
->
ù_addr
)))) {

294 
	`ù_addr_£t
(&(
Õcb
->
loˇl_ù
), 
ùaddr
);

299 
	`¢mp_dñëe_ùaddridx_åì
(
√tif
);

300 
	`¢mp_dñëe_ùπeidx_åì
(0,
√tif
);

302 
	`ù_addr_£t
(&(
√tif
->
ù_addr
), 
ùaddr
);

303 
	`¢mp_ö£π_ùaddridx_åì
(
√tif
);

304 
	`¢mp_ö£π_ùπeidx_åì
(0,
√tif
);

306 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: IPáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

307 
√tif
->
«me
[0],Çetif->name[1],

308 
	`ù4_addr1
(&
√tif
->
ù_addr
),

309 
	`ù4_addr2
(&
√tif
->
ù_addr
),

310 
	`ù4_addr3
(&
√tif
->
ù_addr
),

311 
	`ù4_addr4
(&
√tif
->
ù_addr
)));

312 
	}
}

323 
	$√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
)

325 
	`ù_addr_£t
(&(
√tif
->
gw
), gw);

326 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif: GWáddªs†o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

327 
√tif
->
«me
[0],Çetif->name[1],

328 
	`ù4_addr1
(&
√tif
->
gw
),

329 
	`ù4_addr2
(&
√tif
->
gw
),

330 
	`ù4_addr3
(&
√tif
->
gw
),

331 
	`ù4_addr4
(&
√tif
->
gw
)));

332 
	}
}

344 
	$√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
)

346 
	`¢mp_dñëe_ùπeidx_åì
(0, 
√tif
);

348 
	`ù_addr_£t
(&(
√tif
->
√tmask
),Çetmask);

349 
	`¢mp_ö£π_ùπeidx_åì
(0, 
√tif
);

350 
	`LWIP_DEBUGF
(
NETIF_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
 | 3, ("√tif:Çëmask o‡öãrÁ˚ %c%¯£àtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

351 
√tif
->
«me
[0],Çetif->name[1],

352 
	`ù4_addr1
(&
√tif
->
√tmask
),

353 
	`ù4_addr2
(&
√tif
->
√tmask
),

354 
	`ù4_addr3
(&
√tif
->
√tmask
),

355 
	`ù4_addr4
(&
√tif
->
√tmask
)));

356 
	}
}

365 
	$√tif_£t_deÁu…
(
√tif
 *netif)

367 i‡(
√tif
 =
NULL
)

370 
	`¢mp_dñëe_ùπeidx_åì
(1, 
√tif
);

375 
	`¢mp_ö£π_ùπeidx_åì
(1, 
√tif
);

377 
√tif_deÁu…
 = 
√tif
;

378 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("netif: setting default interface %c%c\n",

379 
√tif
 ?Çëif->
«me
[0] : '\'',Çetif ?Çetif->name[1] : '\''));

380 
	}
}

391 
	$√tif_£t_up
(
√tif
 *netif)

393 i‡–!(
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )) {

394 
√tif
->
Êags
 |
NETIF_FLAG_UP
;

396 #i‡
LWIP_SNMP


397 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

400 
	`NETIF_LINK_CALLBACK
(
√tif
);

401 
	`NETIF_STATUS_CALLBACK
(
√tif
);

403 #i‡
LWIP_ARP


409 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

410 
	`ëh¨p_quîy
(
√tif
, &“ëif->
ù_addr
), 
NULL
);

415 
	}
}

425 
	$√tif_£t_down
(
√tif
 *netif)

427 i‡–
√tif
->
Êags
 & 
NETIF_FLAG_UP
 )

429 
√tif
->
Êags
 &~
NETIF_FLAG_UP
;

430 #i‡
LWIP_SNMP


431 
	`¢mp_gë_sysu±ime
(&
√tif
->
ts
);

434 
	`NETIF_LINK_CALLBACK
(
√tif
);

435 
	`NETIF_STATUS_CALLBACK
(
√tif
);

437 
	}
}

442 
u8_t
 
	$√tif_is_up
(
√tif
 *netif)

444  (
√tif
->
Êags
 & 
NETIF_FLAG_UP
)?1:0;

445 
	}
}

447 #i‡
LWIP_NETIF_STATUS_CALLBACK


451 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif ))

453 i‡–
√tif
 )

454 
√tif
->
°©us_ˇŒback
 = status_callback;

455 
	}
}

458 #i‡
LWIP_NETIF_LINK_CALLBACK


462 
	$√tif_£t_lök_up
(
√tif
 *netif )

464 
√tif
->
Êags
 |
NETIF_FLAG_LINK_UP
;

466 #i‡
LWIP_ARP


472 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_ETHARP
) {

473 
	`ëh¨p_quîy
(
√tif
, &“ëif->
ù_addr
), 
NULL
);

477 #i‡
LWIP_IGMP


479 i‡(
√tif
->
Êags
 & 
NETIF_FLAG_IGMP
) {

480 
	`igmp_ªp‹t_groups
–
√tif
);

484 
	`NETIF_LINK_CALLBACK
(
√tif
);

485 
	}
}

490 
	$√tif_£t_lök_down
(
√tif
 *netif )

492 
√tif
->
Êags
 &~
NETIF_FLAG_LINK_UP
;

493 
	`NETIF_LINK_CALLBACK
(
√tif
);

494 
	}
}

499 
u8_t
 
	$√tif_is_lök_up
(
√tif
 *netif)

501  (
√tif
->
Êags
 & 
NETIF_FLAG_LINK_UP
) ? 1 : 0;

502 
	}
}

507 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif ))

509 i‡(
√tif
) {

510 
√tif
->
lök_ˇŒback
 =Üink_callback;

512 
	}
}

515 #i‡
ENABLE_LOOPBACK


530 
îr_t


531 
	$√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

532 
ù_addr
 *
ùaddr
)

534 
pbuf
 *
r
;

535 
îr_t
 
îr
;

536 
pbuf
 *
œ°
;

537 #i‡
LWIP_LOOPBACK_MAX_PBUFS


538 
u8_t
 
˛í
 = 0;

540 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

541 
	`LWIP_UNUSED_ARG
(
ùaddr
);

544 
r
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

545 i‡(
r
 =
NULL
) {

546  
ERR_MEM
;

548 #i‡
LWIP_LOOPBACK_MAX_PBUFS


549 
˛í
 = 
	`pbuf_˛í
(
r
);

551 if(((
√tif
->
lo›_˙t_cuºít
 + 
˛í
) <Çetif->loop_cnt_current) ||

552 ((
√tif
->
lo›_˙t_cuºít
 + 
˛í
Ë> 
LWIP_LOOPBACK_MAX_PBUFS
)) {

553 
	`pbuf_‰ì
(
r
);

554 
r
 = 
NULL
;

555  
ERR_MEM
;

557 
√tif
->
lo›_˙t_cuºít
 +
˛í
;

561 i‡((
îr
 = 
	`pbuf_c›y
(
r
, 
p
)Ë!
ERR_OK
) {

562 
	`pbuf_‰ì
(
r
);

563 
r
 = 
NULL
;

564  
îr
;

571 
œ°
 = 
r
;Üa°->
√xt
 !
NULL
;Üast =Üast->next);

573 
	`SYS_ARCH_PROTECT
(
Àv
);

574 if(
√tif
->
lo›_fú°
 !
NULL
) {

575 
	`LWIP_ASSERT
("i‡fú° !NULL,Üa° mu°álsÿbê!NULL", 
√tif
->
lo›_œ°
 !
NULL
);

576 
√tif
->
lo›_œ°
->
√xt
 = 
r
;

577 
√tif
->
lo›_œ°
 = 
œ°
;

579 
√tif
->
lo›_fú°
 = 
r
;

580 
√tif
->
lo›_œ°
 = 
œ°
;

582 
	`SYS_ARCH_UNPROTECT
(
Àv
);

584 #i‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


586 
	`t˝ù_ˇŒback
(
√tif_pﬁl
, 
√tif
);

589  
ERR_OK
;

590 
	}
}

599 
	$√tif_pﬁl
(
√tif
 *netif)

601 
pbuf
 *
ö
;

602 
	`SYS_ARCH_DECL_PROTECT
(
Àv
);

606 
	`SYS_ARCH_PROTECT
(
Àv
);

607 
ö
 = 
√tif
->
lo›_fú°
;

608 if(
ö
 !
NULL
) {

609 
pbuf
 *
ö_íd
 = 
ö
;

610 #i‡
LWIP_LOOPBACK_MAX_PBUFS


611 
u8_t
 
˛í
 = 
	`pbuf_˛í
(
ö
);

613 
	`LWIP_ASSERT
("netif->loop_cnt_current underflow",

614 ((
√tif
->
lo›_˙t_cuºít
 - 
˛í
) <Çetif->loop_cnt_current));

615 
√tif
->
lo›_˙t_cuºít
 -
˛í
;

617 
ö_íd
->
Àn
 !ö_íd->
tŸ_Àn
) {

618 
	`LWIP_ASSERT
("bogu†pbuf:Üí !tŸ_À¿buà√xà=NULL!", 
ö_íd
->
√xt
 !
NULL
);

619 
ö_íd
 = in_íd->
√xt
;

622 if(
ö_íd
 =
√tif
->
lo›_œ°
) {

624 
√tif
->
lo›_fú°
 =Çëif->
lo›_œ°
 = 
NULL
;

627 
√tif
->
lo›_fú°
 = 
ö_íd
->
√xt
;

628 
	`LWIP_ASSERT
("shouldÇŸ bênuŒ sö˚ fú° !œ°!", 
√tif
->
lo›_fú°
 !
NULL
);

631 
ö_íd
->
√xt
 = 
NULL
;

633 
	`SYS_ARCH_UNPROTECT
(
Àv
);

635 if(
ö
 !
NULL
) {

637 if(
	`ù_öput
(
ö
, 
√tif
Ë!
ERR_OK
) {

638 
	`pbuf_‰ì
(
ö
);

641 
ö
 = 
NULL
;

644 } 
√tif
->
lo›_fú°
 !
NULL
);

645 
	}
}

647 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


652 
	$√tif_pﬁl_Æl
()

654 
√tif
 *√ti‡
√tif_li°
;

656 
√tif
 !
NULL
) {

657 
	`√tif_pﬁl
(
√tif
);

659 
√tif
 =Çëif->
√xt
;

661 
	}
}

	@net/lwip/core/pbuf.c

64 
	~"lwù/›t.h
"

66 
	~"lwù/°©s.h
"

67 
	~"lwù/def.h
"

68 
	~"lwù/mem.h
"

69 
	~"lwù/memp.h
"

70 
	~"lwù/pbuf.h
"

71 
	~"lwù/sys.h
"

72 
	~"¨ch/≥rf.h
"

74 
	~<°rög.h
>

76 
	#SIZEOF_STRUCT_PBUF
 
	`LWIP_MEM_ALIGN_SIZE
((
pbuf
))

	)

79 
	#PBUF_POOL_BUFSIZE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
PBUF_POOL_BUFSIZE
)

	)

112 
pbuf
 *

113 
	$pbuf_Æloc
(
pbuf_œyî
 
œyî
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
)

115 
pbuf
 *
p
, *
q
, *
r
;

116 
u16_t
 
off£t
;

117 
s32_t
 
ªm_Àn
;

118 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
")\n", 
Àngth
));

121 
off£t
 = 0;

122 
œyî
) {

123 
PBUF_TRANSPORT
:

125 
off£t
 +
PBUF_TRANSPORT_HLEN
;

127 
PBUF_IP
:

129 
off£t
 +
PBUF_IP_HLEN
;

131 
PBUF_LINK
:

133 
off£t
 +
PBUF_LINK_HLEN
;

135 
PBUF_RAW
:

138 
	`LWIP_ASSERT
("pbuf_alloc: badÖbufÜayer", 0);

139  
NULL
;

142 
ty≥
) {

143 
PBUF_POOL
:

145 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

146 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc:áŒoˇãdÖbu‡%p\n", (*)
p
));

147 i‡(
p
 =
NULL
) {

148  
NULL
;

150 
p
->
ty≥
 =Åype;

151 
p
->
√xt
 = 
NULL
;

154 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + (
SIZEOF_STRUCT_PBUF
 + 
off£t
)));

155 
	`LWIP_ASSERT
("pbuf_alloc:ÖbufÖ->payloadÖroperlyáligned",

156 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

158 
p
->
tŸ_Àn
 = 
Àngth
;

160 
p
->
Àn
 = 
	`LWIP_MIN
(
Àngth
, 
PBUF_POOL_BUFSIZE_ALIGNED
 - 
	`LWIP_MEM_ALIGN_SIZE
(
off£t
));

161 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

162 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

163 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

165 
p
->
ªf
 = 1;

170 
r
 = 
p
;

172 
ªm_Àn
 = 
Àngth
 - 
p
->
Àn
;

174 
ªm_Àn
 > 0) {

175 
q
 = 
	`memp_mÆloc
(
MEMP_PBUF_POOL
);

176 i‡(
q
 =
NULL
) {

178 
	`pbuf_‰ì
(
p
);

180  
NULL
;

182 
q
->
ty≥
 =Åype;

183 
q
->
Êags
 = 0;

184 
q
->
√xt
 = 
NULL
;

186 
r
->
√xt
 = 
q
;

188 
	`LWIP_ASSERT
("ªm_À¿< max_u16_t", 
ªm_Àn
 < 0xffff);

189 
q
->
tŸ_Àn
 = (
u16_t
)
ªm_Àn
;

191 
q
->
Àn
 = 
	`LWIP_MIN
((
u16_t
)
ªm_Àn
, 
PBUF_POOL_BUFSIZE_ALIGNED
);

192 
q
->
∑ylﬂd
 = (*)((
u8_t
 *)q + 
SIZEOF_STRUCT_PBUF
);

193 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf q->payloadÖroperlyáligned",

194 ((
mem_±r_t
)
q
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

195 
	`LWIP_ASSERT
("checkÖ->payload +Ö->len doesÇot overflowÖbuf",

196 ((
u8_t
*)
p
->
∑ylﬂd
 +Ö->
Àn
 <=

197 (
u8_t
*)
p
 + 
SIZEOF_STRUCT_PBUF
 + 
PBUF_POOL_BUFSIZE_ALIGNED
));

198 
q
->
ªf
 = 1;

200 
ªm_Àn
 -
q
->
Àn
;

202 
r
 = 
q
;

208 
PBUF_RAM
:

210 
p
 = (
pbuf
*)
	`mem_mÆloc
(
	`LWIP_MEM_ALIGN_SIZE
(
SIZEOF_STRUCT_PBUF
 + 
off£t
Ë+ LWIP_MEM_ALIGN_SIZE(
Àngth
));

211 i‡(
p
 =
NULL
) {

212  
NULL
;

215 
p
->
∑ylﬂd
 = 
	`LWIP_MEM_ALIGN
((*)((
u8_t
 *Ì + 
SIZEOF_STRUCT_PBUF
 + 
off£t
));

216 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

217 
p
->
√xt
 = 
NULL
;

218 
p
->
ty≥
 =Åype;

220 
	`LWIP_ASSERT
("pbuf_alloc:Öbuf->payloadÖroperlyáligned",

221 ((
mem_±r_t
)
p
->
∑ylﬂd
 % 
MEM_ALIGNMENT
) == 0);

224 
PBUF_ROM
:

226 
PBUF_REF
:

228 
p
 = 
	`memp_mÆloc
(
MEMP_PBUF
);

229 i‡(
p
 =
NULL
) {

230 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_alloc: CouldÇotállocate MEMP_PBUF for PBUF_%s.\n",

231 (
ty≥
 =
PBUF_ROM
) ? "ROM" : "REF"));

232  
NULL
;

235 
p
->
∑ylﬂd
 = 
NULL
;

236 
p
->
Àn
 =Ö->
tŸ_Àn
 = 
Àngth
;

237 
p
->
√xt
 = 
NULL
;

238 
p
->
ty≥
 =Åype;

241 
	`LWIP_ASSERT
("pbuf_alloc:ÉrroneousÅype", 0);

242  
NULL
;

245 
p
->
ªf
 = 1;

247 
p
->
Êags
 = 0;

248 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_Æloc÷ígth=%"
U16_F
"Ë=%p\n", 
Àngth
, (*)
p
));

249  
p
;

250 
	}
}

269 
	$pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
√w_Àn
)

271 
pbuf
 *
q
;

272 
u16_t
 
ªm_Àn
;

273 
s32_t
 
grow
;

275 
	`LWIP_ASSERT
("pbuf_ªÆloc:Ö !NULL", 
p
 !
NULL
);

276 
	`LWIP_ASSERT
("pbuf_ªÆloc: s™êp->ty≥", 
p
->
ty≥
 =
PBUF_POOL
 ||

277 
p
->
ty≥
 =
PBUF_ROM
 ||

278 
p
->
ty≥
 =
PBUF_RAM
 ||

279 
p
->
ty≥
 =
PBUF_REF
);

282 i‡(
√w_Àn
 >
p
->
tŸ_Àn
) {

289 
grow
 = 
√w_Àn
 - 
p
->
tŸ_Àn
;

292 
ªm_Àn
 = 
√w_Àn
;

293 
q
 = 
p
;

295 
ªm_Àn
 > 
q
->
Àn
) {

297 
ªm_Àn
 -
q
->
Àn
;

299 
	`LWIP_ASSERT
("grow < max_u16_t", 
grow
 < 0xffff);

300 
q
->
tŸ_Àn
 +(
u16_t
)
grow
;

302 
q
 = q->
√xt
;

303 
	`LWIP_ASSERT
("pbuf_ªÆloc: q !NULL", 
q
 !
NULL
);

310 i‡((
q
->
ty≥
 =
PBUF_RAM
Ë&& (
ªm_Àn
 !q->
Àn
)) {

312 
q
 = 
	`mem_ªÆloc
(q, (
u8_t
 *)q->
∑ylﬂd
 - (u8_à*)q + 
ªm_Àn
);

313 
	`LWIP_ASSERT
("mem_ªÆlo¯givêq =NULL", 
q
 !
NULL
);

316 
q
->
Àn
 = 
ªm_Àn
;

317 
q
->
tŸ_Àn
 = q->
Àn
;

320 i‡(
q
->
√xt
 !
NULL
) {

322 
	`pbuf_‰ì
(
q
->
√xt
);

325 
q
->
√xt
 = 
NULL
;

327 
	}
}

349 
u8_t


350 
	$pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size_ö¸emít
)

352 
u16_t
 
ty≥
;

353 *
∑ylﬂd
;

354 
u16_t
 
ö¸emít_magnôude
;

356 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

357 i‡((
hódî_size_ö¸emít
 =0Ë|| (
p
 =
NULL
))

360 i‡(
hódî_size_ö¸emít
 < 0){

361 
ö¸emít_magnôude
 = -
hódî_size_ö¸emít
;

363 
	`LWIP_ERROR
("ö¸emít_magnôudê<p->Àn", (
ö¸emít_magnôude
 <
p
->
Àn
),  1;);

365 
ö¸emít_magnôude
 = 
hódî_size_ö¸emít
;

370 
	`LWIP_ASSERT
("p->type == PBUF_RAM ||Ö->type == PBUF_POOL",

371 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_POOL
);

373 
	`LWIP_ASSERT
("p->payload - increment_magnitude >=Ö + SIZEOF_STRUCT_PBUF",

374 (
u8_t
 *)
p
->
∑ylﬂd
 - 
ö¸emít_magnôude
 >(u8_à*Ì + 
SIZEOF_STRUCT_PBUF
);

378 
ty≥
 = 
p
->type;

380 
∑ylﬂd
 = 
p
->payload;

383 i‡(
ty≥
 =
PBUF_RAM
 ||Åy≥ =
PBUF_POOL
) {

385 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

387 i‡((
u8_t
 *)
p
->
∑ylﬂd
 < (u8_à*Ì + 
SIZEOF_STRUCT_PBUF
) {

388 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_header: failedás %p < %p (notÉnough space forÇew header size)\n",

389 (*)
p
->
∑ylﬂd
,

390 (*)(
p
 + 1)));\

392 
p
->
∑ylﬂd
 =Öayload;

397 } i‡(
ty≥
 =
PBUF_REF
 ||Åy≥ =
PBUF_ROM
) {

399 i‡((
hódî_size_ö¸emít
 < 0Ë&& (
ö¸emít_magnôude
 <
p
->
Àn
)) {

401 
p
->
∑ylﬂd
 = (
u8_t
 *Ì->∑ylﬂd - 
hódî_size_ö¸emít
;

410 
	`LWIP_ASSERT
("badÖbufÅype", 0);

414 
p
->
Àn
 +
hódî_size_ö¸emít
;

415 
p
->
tŸ_Àn
 +
hódî_size_ö¸emít
;

417 
	`LWIP_DEBUGF
(
PBUF_DEBUG
, ("pbuf_hódî: old %∞√w %∞(%"
S16_F
")\n",

418 (*)
∑ylﬂd
, (*)
p
->∑ylﬂd, 
hódî_size_ö¸emít
));

421 
	}
}

456 
u8_t


457 
	$pbuf_‰ì
(
pbuf
 *
p
)

459 
u16_t
 
ty≥
;

460 
pbuf
 *
q
;

461 
u8_t
 
cou¡
;

463 i‡(
p
 =
NULL
) {

464 
	`LWIP_ASSERT
("∞!NULL", 
p
 !
NULL
);

466 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("pbuf_free(p == NULL) was called.\n"));

469 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_‰ì(%p)\n", (*)
p
));

471 
PERF_START
;

473 
	`LWIP_ASSERT
("pbuf_free: saneÅype",

474 
p
->
ty≥
 =
PBUF_RAM
 ||Ö->ty≥ =
PBUF_ROM
 ||

475 
p
->
ty≥
 =
PBUF_REF
 ||Ö->ty≥ =
PBUF_POOL
);

477 
cou¡
 = 0;

480 
p
 !
NULL
) {

481 
u16_t
 
ªf
;

482 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

486 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

488 
	`LWIP_ASSERT
("pbuf_‰ì:Ö->ª‡> 0", 
p
->
ªf
 > 0);

490 
ªf
 = --(
p
->ref);

491 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

493 i‡(
ªf
 == 0) {

495 
q
 = 
p
->
√xt
;

496 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: dóŒoˇtög %p\n", (*)
p
));

497 
ty≥
 = 
p
->type;

499 i‡(
ty≥
 =
PBUF_POOL
) {

500 
	`memp_‰ì
(
MEMP_PBUF_POOL
, 
p
);

502 } i‡(
ty≥
 =
PBUF_ROM
 ||Åy≥ =
PBUF_REF
) {

503 
	`memp_‰ì
(
MEMP_PBUF
, 
p
);

506 
	`mem_‰ì
(
p
);

508 
cou¡
++;

510 
p
 = 
q
;

514 
	`LWIP_DEBUGF
–
PBUF_DEBUG
 | 2, ("pbuf_‰ì: %∞ha†ª‡%"
U16_F
",Éndög hîe.\n", (*)
p
, 
ªf
));

516 
p
 = 
NULL
;

519 
	`PERF_STOP
("pbuf_free");

521  
cou¡
;

522 
	}
}

531 
u8_t


532 
	$pbuf_˛í
(
pbuf
 *
p
)

534 
u8_t
 
Àn
;

536 
Àn
 = 0;

537 
p
 !
NULL
) {

538 ++
Àn
;

539 
p
 =Ö->
√xt
;

541  
Àn
;

542 
	}
}

551 
	$pbuf_ªf
(
pbuf
 *
p
)

553 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
);

555 i‡(
p
 !
NULL
) {

556 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
);

557 ++(
p
->
ªf
);

558 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
);

560 
	}
}

573 
	$pbuf_ˇt
(
pbuf
 *
h
, pbu‡*
t
)

575 
pbuf
 *
p
;

577 
	`LWIP_ERROR
("(h != NULL) && (t != NULL) (programmer violates API)",

578 ((
h
 !
NULL
Ë&& (
t
 != NULL)), ;);

581 
p
 = 
h
;Ö->
√xt
 !
NULL
;Ö =Ö->next) {

583 
p
->
tŸ_Àn
 +
t
->tot_len;

586 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿(o‡œ°Öbu‡ö chaö)", 
p
->
tŸ_Àn
 =p->
Àn
);

587 
	`LWIP_ASSERT
("p->√xà=NULL", 
p
->
√xt
 =
NULL
);

589 
p
->
tŸ_Àn
 +
t
->tot_len;

591 
p
->
√xt
 = 
t
;

595 
	}
}

614 
	$pbuf_chaö
(
pbuf
 *
h
, pbu‡*
t
)

616 
	`pbuf_ˇt
(
h
, 
t
);

618 
	`pbuf_ªf
(
t
);

619 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_FRESH
 | 2, ("pbuf_chaö: %∞ª„ªn˚†%p\n", (*)
h
, (*)
t
));

620 
	}
}

630 
pbuf
 *

631 
	$pbuf_dechaö
(
pbuf
 *
p
)

633 
pbuf
 *
q
;

634 
u8_t
 
èû_g⁄e
 = 1;

636 
q
 = 
p
->
√xt
;

638 i‡(
q
 !
NULL
) {

640 
	`LWIP_ASSERT
("p->tŸ_À¿=p->À¿+ q->tŸ_Àn", 
q
->
tŸ_Àn
 =
p
->tŸ_À¿-Ö->
Àn
);

642 
q
->
tŸ_Àn
 = 
p
->tŸ_À¿-Ö->
Àn
;

644 
p
->
√xt
 = 
NULL
;

646 
p
->
tŸ_Àn
 =Ö->
Àn
;

648 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
, ("pbuf_dechaö: uƒe„ªncög %p\n", (*)
q
));

649 
èû_g⁄e
 = 
	`pbuf_‰ì
(
q
);

650 i‡(
èû_g⁄e
 > 0) {

651 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_STATE
,

652 ("pbuf_dechaö: dóŒoˇãd %∞◊†ô i†nÿl⁄gîÑe„ªn˚d)\n", (*)
q
));

657 
	`LWIP_ASSERT
("p->tŸ_À¿=p->Àn", 
p
->
tŸ_Àn
 =p->
Àn
);

658  ((
èû_g⁄e
 > 0Ë? 
NULL
 : 
q
);

659 
	}
}

679 
îr_t


680 
	$pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
)

682 
u16_t
 
off£t_to
=0, 
off£t_‰om
=0, 
Àn
;

684 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("pbuf_copy(%p, %p)\n",

685 (*)
p_to
, (*)
p_‰om
));

688 
	`LWIP_ERROR
("pbuf_c›y:Å¨gëÇŸ bigÉnoughÅÿhﬁd sour˚", ((
p_to
 !
NULL
) &&

689 (
p_‰om
 !
NULL
Ë&& (
p_to
->
tŸ_Àn
 >p_‰om->tŸ_Àn)),  
ERR_ARG
;);

694 
	`LWIP_ASSERT
("p_tÿ!NULL", 
p_to
 !
NULL
);

696 i‡((
p_to
->
Àn
 - 
off£t_to
Ë>(
p_‰om
->À¿- 
off£t_‰om
)) {

698 
Àn
 = 
p_‰om
->À¿- 
off£t_‰om
;

701 
Àn
 = 
p_to
->À¿- 
off£t_to
;

703 
	`MEMCPY
((
u8_t
*)
p_to
->
∑ylﬂd
 + 
off£t_to
, (u8_t*)
p_‰om
->∑ylﬂd + 
off£t_‰om
, 
Àn
);

704 
off£t_to
 +
Àn
;

705 
off£t_‰om
 +
Àn
;

706 
	`LWIP_ASSERT
("off£t_tÿ<p_to->Àn", 
off£t_to
 <
p_to
->
Àn
);

707 i‡(
off£t_to
 =
p_to
->
Àn
) {

709 
off£t_to
 = 0;

710 
p_to
 =Ö_to->
√xt
;

712 
	`LWIP_ASSERT
("off£t_‰om <p_‰om->Àn", 
off£t_‰om
 <
p_‰om
->
Àn
);

713 i‡(
off£t_‰om
 >
p_‰om
->
Àn
) {

715 
off£t_‰om
 = 0;

716 
p_‰om
 =Ö_‰om->
√xt
;

719 if((
p_‰om
 !
NULL
Ë&& (p_‰om->
Àn
 =p_‰om->
tŸ_Àn
)) {

721 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

722 (
p_‰om
->
√xt
 =
NULL
),  
ERR_VAL
;);

724 if((
p_to
 !
NULL
Ë&& (p_to->
Àn
 =p_to->
tŸ_Àn
)) {

726 
	`LWIP_ERROR
("pbuf_copy() doesÇotállowÖacket queues!\n",

727 (
p_to
->
√xt
 =
NULL
),  
ERR_VAL
;);

729 } 
p_‰om
);

730 
	`LWIP_DEBUGF
(
PBUF_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("pbuf_copy:Énd of chainÑeached.\n"));

731  
ERR_OK
;

732 
	}
}

743 
u16_t


744 
	$pbuf_c›y_∑πül
(
pbuf
 *
buf
, *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
)

746 
pbuf
 *
p
;

747 
u16_t
 
À·
;

748 
u16_t
 
buf_c›y_Àn
;

749 
u16_t
 
c›õd_tŸÆ
 = 0;

751 
	`LWIP_ERROR
("√tbuf_c›y_∑πül: invÆid buf", (
buf
 !
NULL
),  0;);

752 
	`LWIP_ERROR
("√tbuf_c›y_∑πül: invÆid d©≠å", (
d©≠å
 !
NULL
),  0;);

754 
À·
 = 0;

756 if((
buf
 =
NULL
Ë|| (
d©≠å
 == NULL)) {

761 
p
 = 
buf
; 
Àn
 !0 &&Ö !
NULL
;Ö =Ö->
√xt
) {

762 i‡((
off£t
 !0Ë&& (off£à>
p
->
Àn
)) {

764 
off£t
 -
p
->
Àn
;

767 
buf_c›y_Àn
 = 
p
->
Àn
 - 
off£t
;

768 i‡(
buf_c›y_Àn
 > 
Àn
)

769 
buf_c›y_Àn
 = 
Àn
;

771 
	`MEMCPY
(&((*)
d©≠å
)[
À·
], &((*)
p
->
∑ylﬂd
)[
off£t
], 
buf_c›y_Àn
);

772 
c›õd_tŸÆ
 +
buf_c›y_Àn
;

773 
À·
 +
buf_c›y_Àn
;

774 
Àn
 -
buf_c›y_Àn
;

775 
off£t
 = 0;

778  
c›õd_tŸÆ
;

779 
	}
}

	@net/lwip/core/raw.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/def.h
"

46 
	~"lwù/memp.h
"

47 
	~"lwù/öë.h
"

48 
	~"lwù/ù_addr.h
"

49 
	~"lwù/√tif.h
"

50 
	~"lwù/øw.h
"

51 
	~"lwù/°©s.h
"

52 
	~"lwù/¢mp.h
"

53 
	~"¨ch/≥rf.h
"

55 
	~<°rög.h
>

58 
øw_pcb
 *
	gøw_pcbs
;

77 
u8_t


78 
	$øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

80 
øw_pcb
 *
pcb
, *
¥ev
;

81 
ù_hdr
 *
ùhdr
;

82 
s16_t
 
¥Ÿo
;

83 
u8_t
 
óãn
 = 0;

85 
	`LWIP_UNUSED_ARG
(
öp
);

87 
ùhdr
 = 
p
->
∑ylﬂd
;

88 
¥Ÿo
 = 
	`IPH_PROTO
(
ùhdr
);

90 
¥ev
 = 
NULL
;

91 
pcb
 = 
øw_pcbs
;

94 (
óãn
 =0Ë&& (
pcb
 !
NULL
)) {

95 i‡(
pcb
->
¥Ÿocﬁ
 =
¥Ÿo
) {

97 i‡(
pcb
->
ªcv
 !
NULL
) {

99 i‡(
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
)) != 0)

102 
p
 = 
NULL
;

103 
óãn
 = 1;

104 i‡(
¥ev
 !
NULL
) {

107 
¥ev
->
√xt
 = 
pcb
->next;

108 
pcb
->
√xt
 = 
øw_pcbs
;

109 
øw_pcbs
 = 
pcb
;

116 
¥ev
 = 
pcb
;

117 
pcb
 =Öcb->
√xt
;

119  
óãn
;

120 
	}
}

136 
îr_t


137 
	$øw_böd
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

139 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

140  
ERR_OK
;

141 
	}
}

156 
îr_t


157 
	$øw_c⁄√˘
(
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
)

159 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

160  
ERR_OK
;

161 
	}
}

178 
øw_ªcv
(
øw_pcb
 *
pcb
,

179 
	$u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
upcb
, 
pbuf
 *
p
,

180 
ù_addr
 *
addr
),

181 *
ªcv_¨g
)

184 
pcb
->
ªcv
 =Ñecv;

185 
pcb
->
ªcv_¨g
 =Ñecv_arg;

186 
	}
}

200 
îr_t


201 
	$øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

203 
îr_t
 
îr
;

204 
√tif
 *netif;

205 
ù_addr
 *
§c_ù
;

206 
pbuf
 *
q
;

208 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_sendto\n"));

211 i‡(
	`pbuf_hódî
(
p
, 
IP_HLEN
)) {

213 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 0, 
PBUF_RAM
);

215 i‡(
q
 =
NULL
) {

216 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("raw_sendto: couldÇotállocate header\n"));

217  
ERR_MEM
;

220 
	`pbuf_chaö
(
q
, 
p
);

222 
	`LWIP_DEBUGF
(
RAW_DEBUG
, ("øw_£ndto:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

225 
q
 = 
p
;

226 if(
	`pbuf_hódî
(
q
, -
IP_HLEN
)) {

227 
	`LWIP_ASSERT
("Can'tÑestore header we justÑemoved!", 0);

228  
ERR_MEM
;

232 i‡((
√tif
 = 
	`ù_rouã
(
ùaddr
)Ë=
NULL
) {

233 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 1, ("øw_£ndto: NÿrouãÅÿ0x%"
X32_F
"\n", 
ùaddr
->
addr
));

235 i‡(
q
 !
p
) {

236 
	`pbuf_‰ì
(
q
);

238  
ERR_RTE
;

241 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

243 
§c_ù
 = &(
√tif
->
ù_addr
);

246 
§c_ù
 = &(
pcb
->
loˇl_ù
);

249 #i‡
LWIP_NETIF_HWADDRHINT


250 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

252 
îr
 = 
	`ù_ouçut_if
 (
q
, 
§c_ù
, 
ùaddr
, 
pcb
->
âl
,Öcb->
tos
,Öcb->
¥Ÿocﬁ
, 
√tif
);

253 #i‡
LWIP_NETIF_HWADDRHINT


254 
√tif
->
addr_höt
 = 
NULL
;

258 i‡(
q
 !
p
) {

260 
	`pbuf_‰ì
(
q
);

262  
îr
;

263 
	}
}

272 
îr_t


273 
	$øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
)

275  
	`øw_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
);

276 
	}
}

287 
	$øw_ªmove
(
øw_pcb
 *
pcb
)

289 
øw_pcb
 *
pcb2
;

291 i‡(
øw_pcbs
 =
pcb
) {

293 
øw_pcbs
 =Ñaw_pcbs->
√xt
;

296 
pcb2
 = 
øw_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

298 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

300 
pcb2
->
√xt
 = 
pcb
->next;

304 
	`memp_‰ì
(
MEMP_RAW_PCB
, 
pcb
);

305 
	}
}

317 
øw_pcb
 *

318 
	$øw_√w
(
u8_t
 
¥Ÿo
) {

319 
øw_pcb
 *
pcb
;

321 
	`LWIP_DEBUGF
(
RAW_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("raw_new\n"));

323 
pcb
 = 
	`memp_mÆloc
(
MEMP_RAW_PCB
);

325 i‡(
pcb
 !
NULL
) {

327 
	`mem£t
(
pcb
, 0, (
øw_pcb
));

328 
pcb
->
¥Ÿocﬁ
 = 
¥Ÿo
;

329 
pcb
->
âl
 = 
RAW_TTL
;

330 
pcb
->
√xt
 = 
øw_pcbs
;

331 
øw_pcbs
 = 
pcb
;

333  
pcb
;

334 
	}
}

	@net/lwip/core/snmp/asn1_dec.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

51 
îr_t


52 
	$¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
)

54 
u16_t
 
∂í
, 
ba£
;

55 
u8_t
 *
msg_±r
;

57 
∂í
 = 0;

58 
p
 !
NULL
)

60 
ba£
 = 
∂í
;

61 
∂í
 +
p
->
Àn
;

62 i‡(
ofs
 < 
∂í
)

64 
msg_±r
 = 
p
->
∑ylﬂd
;

65 
msg_±r
 +
ofs
 - 
ba£
;

66 *
ty≥
 = *
msg_±r
;

67  
ERR_OK
;

69 
p
 =Ö->
√xt
;

72  
ERR_ARG
;

73 
	}
}

84 
îr_t


85 
	$¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
)

87 
u16_t
 
∂í
, 
ba£
;

88 
u8_t
 *
msg_±r
;

90 
∂í
 = 0;

91 
p
 !
NULL
)

93 
ba£
 = 
∂í
;

94 
∂í
 +
p
->
Àn
;

95 i‡(
ofs
 < 
∂í
)

97 
msg_±r
 = 
p
->
∑ylﬂd
;

98 
msg_±r
 +
ofs
 - 
ba£
;

100 i‡(*
msg_±r
 < 0x80)

103 *
o˘ës_u£d
 = 1;

104 *
Àngth
 = *
msg_±r
;

105  
ERR_OK
;

107 i‡(*
msg_±r
 == 0x80)

110 
u8_t
 
zîos
;

111 
u8_t
 
i
;

113 *
Àngth
 = 0;

114 
zîos
 = 0;

115 
zîos
 != 2)

117 
i
 = 2;

118 
i
 > 0)

120 
i
--;

121 (*
Àngth
) += 1;

122 
ofs
 += 1;

123 i‡(
ofs
 >
∂í
)

126 
p
 =Ö->
√xt
;

127 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

128 
msg_±r
 = 
p
->
∑ylﬂd
;

129 
∂í
 +
p
->
Àn
;

134 
msg_±r
++;

136 i‡(*
msg_±r
 == 0)

138 
zîos
++;

139 i‡(
zîos
 == 2)

142 
i
 = 0;

147 
zîos
 = 0;

151 *
o˘ës_u£d
 = 1;

152  
ERR_OK
;

154 i‡(*
msg_±r
 == 0x81)

157 
ofs
 += 1;

158 i‡(
ofs
 >
∂í
)

161 
p
 =Ö->
√xt
;

162 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

163 
msg_±r
 = 
p
->
∑ylﬂd
;

168 
msg_±r
++;

170 *
Àngth
 = *
msg_±r
;

171 *
o˘ës_u£d
 = 2;

172  
ERR_OK
;

174 i‡(*
msg_±r
 == 0x82)

176 
u8_t
 
i
;

179 
i
 = 2;

180 
i
 > 0)

182 
i
--;

183 
ofs
 += 1;

184 i‡(
ofs
 >
∂í
)

187 
p
 =Ö->
√xt
;

188 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

189 
msg_±r
 = 
p
->
∑ylﬂd
;

190 
∂í
 +
p
->
Àn
;

195 
msg_±r
++;

197 i‡(
i
 == 0)

200 *
Àngth
 |*
msg_±r
;

205 *
Àngth
 = (*
msg_±r
) << 8;

208 *
o˘ës_u£d
 = 3;

209  
ERR_OK
;

215 *
o˘ës_u£d
 = 1 + ((*
msg_±r
) & 0x7f);

216  
ERR_ARG
;

219 
p
 =Ö->
√xt
;

223  
ERR_ARG
;

224 
	}
}

239 
îr_t


240 
	$¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
)

242 
u16_t
 
∂í
, 
ba£
;

243 
u8_t
 *
msg_±r
;

245 
∂í
 = 0;

246 
p
 !
NULL
)

248 
ba£
 = 
∂í
;

249 
∂í
 +
p
->
Àn
;

250 i‡(
ofs
 < 
∂í
)

252 
msg_±r
 = 
p
->
∑ylﬂd
;

253 
msg_±r
 +
ofs
 - 
ba£
;

254 i‡((
Àn
 > 0) && (len < 6))

257 *
vÆue
 = 0;

258 i‡(*
msg_±r
 & 0x80)

261  
ERR_ARG
;

266 i‡((
Àn
 > 1Ë&& (*
msg_±r
 == 0))

269 
Àn
--;

270 
ofs
 += 1;

271 i‡(
ofs
 >
∂í
)

274 
p
 =Ö->
√xt
;

275 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

276 
msg_±r
 = 
p
->
∑ylﬂd
;

277 
∂í
 +
p
->
Àn
;

282 
msg_±r
++;

287 
Àn
 > 1)

289 
Àn
--;

290 *
vÆue
 |*
msg_±r
;

291 *
vÆue
 <<= 8;

292 
ofs
 += 1;

293 i‡(
ofs
 >
∂í
)

296 
p
 =Ö->
√xt
;

297 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

298 
msg_±r
 = 
p
->
∑ylﬂd
;

299 
∂í
 +
p
->
Àn
;

304 
msg_±r
++;

307 *
vÆue
 |*
msg_±r
;

308  
ERR_OK
;

312  
ERR_ARG
;

315 
p
 =Ö->
√xt
;

318  
ERR_ARG
;

319 
	}
}

332 
îr_t


333 
	$¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
)

335 
u16_t
 
∂í
, 
ba£
;

336 
u8_t
 *
msg_±r
;

337 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


338 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
;

340 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


341 
u8_t
 *
lsb_±r
 = (u8_t*)
vÆue
 + (
s32_t
) - 1;

343 
u8_t
 
sign
;

345 
∂í
 = 0;

346 
p
 !
NULL
)

348 
ba£
 = 
∂í
;

349 
∂í
 +
p
->
Àn
;

350 i‡(
ofs
 < 
∂í
)

352 
msg_±r
 = 
p
->
∑ylﬂd
;

353 
msg_±r
 +
ofs
 - 
ba£
;

354 i‡((
Àn
 > 0) && (len < 5))

356 i‡(*
msg_±r
 & 0x80)

359 *
vÆue
 = -1;

360 
sign
 = 1;

365 *
vÆue
 = 0;

366 
sign
 = 0;

369 
Àn
 > 1)

371 
Àn
--;

372 i‡(
sign
)

374 *
lsb_±r
 &*
msg_±r
;

375 *
vÆue
 <<= 8;

376 *
lsb_±r
 |= 255;

380 *
lsb_±r
 |*
msg_±r
;

381 *
vÆue
 <<= 8;

383 
ofs
 += 1;

384 i‡(
ofs
 >
∂í
)

387 
p
 =Ö->
√xt
;

388 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

389 
msg_±r
 = 
p
->
∑ylﬂd
;

390 
∂í
 +
p
->
Àn
;

395 
msg_±r
++;

398 i‡(
sign
)

400 *
lsb_±r
 &*
msg_±r
;

404 *
lsb_±r
 |*
msg_±r
;

406  
ERR_OK
;

410  
ERR_ARG
;

413 
p
 =Ö->
√xt
;

416  
ERR_ARG
;

417 
	}
}

428 
îr_t


429 
	$¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
)

431 
u16_t
 
∂í
, 
ba£
;

432 
u8_t
 *
msg_±r
;

433 
s32_t
 *
oid_±r
;

435 
∂í
 = 0;

436 
p
 !
NULL
)

438 
ba£
 = 
∂í
;

439 
∂í
 +
p
->
Àn
;

440 i‡(
ofs
 < 
∂í
)

442 
msg_±r
 = 
p
->
∑ylﬂd
;

443 
msg_±r
 +
ofs
 - 
ba£
;

445 
oid
->
Àn
 = 0;

446 
oid_±r
 = &
oid
->
id
[0];

447 i‡(
Àn
 > 0)

450 i‡(*
msg_±r
 == 0x2B)

453 *
oid_±r
 = 1;

454 
oid_±r
++;

455 *
oid_±r
 = 3;

456 
oid_±r
++;

458 i‡(*
msg_±r
 < 40)

460 *
oid_±r
 = 0;

461 
oid_±r
++;

462 *
oid_±r
 = *
msg_±r
;

463 
oid_±r
++;

465 i‡(*
msg_±r
 < 80)

467 *
oid_±r
 = 1;

468 
oid_±r
++;

469 *
oid_±r
 = (*
msg_±r
) - 40;

470 
oid_±r
++;

474 *
oid_±r
 = 2;

475 
oid_±r
++;

476 *
oid_±r
 = (*
msg_±r
) - 80;

477 
oid_±r
++;

479 
oid
->
Àn
 = 2;

485  
ERR_OK
;

487 
Àn
--;

488 i‡(
Àn
 > 0)

490 
ofs
 += 1;

491 i‡(
ofs
 >
∂í
)

494 
p
 =Ö->
√xt
;

495 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

496 
msg_±r
 = 
p
->
∑ylﬂd
;

497 
∂í
 +
p
->
Àn
;

502 
msg_±r
++;

505 (
Àn
 > 0Ë&& (
oid
->À¿< 
LWIP_SNMP_OBJ_ID_LEN
))

508 i‡(*
msg_±r
 & 0x80)

510 
s32_t
 
sub_id
 = 0;

512 (*
msg_±r
 & 0x80Ë&& (
Àn
 > 1))

514 
Àn
--;

515 
sub_id
 = (sub_id << 7Ë+ (*
msg_±r
 & ~0x80);

516 
ofs
 += 1;

517 i‡(
ofs
 >
∂í
)

520 
p
 =Ö->
√xt
;

521 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

522 
msg_±r
 = 
p
->
∑ylﬂd
;

523 
∂í
 +
p
->
Àn
;

528 
msg_±r
++;

531 i‡(!(*
msg_±r
 & 0x80Ë&& (
Àn
 > 0))

534 
Àn
--;

535 
sub_id
 = (sub_id << 7Ë+ *
msg_±r
;

536 *
oid_±r
 = 
sub_id
;

542 
Àn
--;

543 *
oid_±r
 = *
msg_±r
;

545 i‡(
Àn
 > 0)

548 
ofs
 += 1;

549 i‡(
ofs
 >
∂í
)

552 
p
 =Ö->
√xt
;

553 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

554 
msg_±r
 = 
p
->
∑ylﬂd
;

555 
∂í
 +
p
->
Àn
;

560 
msg_±r
++;

563 
oid_±r
++;

564 
oid
->
Àn
++;

566 i‡(
Àn
 == 0)

569  
ERR_OK
;

574  
ERR_ARG
;

578 
p
 =Ö->
√xt
;

581  
ERR_ARG
;

582 
	}
}

595 
îr_t


596 
	$¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
)

598 
u16_t
 
∂í
, 
ba£
;

599 
u8_t
 *
msg_±r
;

601 i‡(
Àn
 > 0)

603 
∂í
 = 0;

604 
p
 !
NULL
)

606 
ba£
 = 
∂í
;

607 
∂í
 +
p
->
Àn
;

608 i‡(
ofs
 < 
∂í
)

610 
msg_±r
 = 
p
->
∑ylﬂd
;

611 
msg_±r
 +
ofs
 - 
ba£
;

612 i‡(
øw_Àn
 >
Àn
)

614 
Àn
 > 1)

617 
Àn
--;

618 *
øw
 = *
msg_±r
;

619 
øw
++;

620 
ofs
 += 1;

621 i‡(
ofs
 >
∂í
)

624 
p
 =Ö->
√xt
;

625 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

626 
msg_±r
 = 
p
->
∑ylﬂd
;

627 
∂í
 +
p
->
Àn
;

632 
msg_±r
++;

636 *
øw
 = *
msg_±r
;

637  
ERR_OK
;

642  
ERR_ARG
;

645 
p
 =Ö->
√xt
;

648  
ERR_ARG
;

653  
ERR_OK
;

655 
	}
}

	@net/lwip/core/snmp/asn1_enc.c

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SNMP


41 
	~"lwù/¢mp_a¢1.h
"

50 
	$¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
)

52 i‡(
Àngth
 < 0x80U)

54 *
o˘ës_√eded
 = 1;

56 i‡(
Àngth
 < 0x100U)

58 *
o˘ës_√eded
 = 2;

62 *
o˘ës_√eded
 = 3;

64 
	}
}

77 
	$¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

79 i‡(
vÆue
 < 0x80UL)

81 *
o˘ës_√eded
 = 1;

83 i‡(
vÆue
 < 0x8000UL)

85 *
o˘ës_√eded
 = 2;

87 i‡(
vÆue
 < 0x800000UL)

89 *
o˘ës_√eded
 = 3;

91 i‡(
vÆue
 < 0x80000000UL)

93 *
o˘ës_√eded
 = 4;

97 *
o˘ës_√eded
 = 5;

99 
	}
}

110 
	$¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
)

112 i‡(
vÆue
 < 0)

114 
vÆue
 = ~value;

116 i‡(
vÆue
 < 0x80L)

118 *
o˘ës_√eded
 = 1;

120 i‡(
vÆue
 < 0x8000L)

122 *
o˘ës_√eded
 = 2;

124 i‡(
vÆue
 < 0x800000L)

126 *
o˘ës_√eded
 = 3;

130 *
o˘ës_√eded
 = 4;

132 
	}
}

142 
	$¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
)

144 
s32_t
 
sub_id
;

145 
u8_t
 
˙t
;

147 
˙t
 = 0;

148 i‡(
idít_Àn
 > 1)

151 
˙t
++;

152 
idít_Àn
 -= 2;

153 
idít
 += 2;

155 
idít_Àn
 > 0)

157 
idít_Àn
--;

158 
sub_id
 = *
idít
;

160 
sub_id
 >>= 7;

161 
˙t
++;

162 
sub_id
 > 0)

164 
sub_id
 >>= 7;

165 
˙t
++;

167 
idít
++;

169 *
o˘ës_√eded
 = 
˙t
;

170 
	}
}

180 
îr_t


181 
	$¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
)

183 
u16_t
 
∂í
, 
ba£
;

184 
u8_t
 *
msg_±r
;

186 
∂í
 = 0;

187 
p
 !
NULL
)

189 
ba£
 = 
∂í
;

190 
∂í
 +
p
->
Àn
;

191 i‡(
ofs
 < 
∂í
)

193 
msg_±r
 = 
p
->
∑ylﬂd
;

194 
msg_±r
 +
ofs
 - 
ba£
;

195 *
msg_±r
 = 
ty≥
;

196  
ERR_OK
;

198 
p
 =Ö->
√xt
;

201  
ERR_ARG
;

202 
	}
}

212 
îr_t


213 
	$¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
)

215 
u16_t
 
∂í
, 
ba£
;

216 
u8_t
 *
msg_±r
;

218 
∂í
 = 0;

219 
p
 !
NULL
)

221 
ba£
 = 
∂í
;

222 
∂í
 +
p
->
Àn
;

223 i‡(
ofs
 < 
∂í
)

225 
msg_±r
 = 
p
->
∑ylﬂd
;

226 
msg_±r
 +
ofs
 - 
ba£
;

228 i‡(
Àngth
 < 0x80)

230 *
msg_±r
 = 
Àngth
;

231  
ERR_OK
;

233 i‡(
Àngth
 < 0x100)

235 *
msg_±r
 = 0x81;

236 
ofs
 += 1;

237 i‡(
ofs
 >
∂í
)

240 
p
 =Ö->
√xt
;

241 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

242 
msg_±r
 = 
p
->
∑ylﬂd
;

247 
msg_±r
++;

249 *
msg_±r
 = 
Àngth
;

250  
ERR_OK
;

254 
u8_t
 
i
;

257 *
msg_±r
 = 0x82;

258 
i
 = 2;

259 
i
 > 0)

261 
i
--;

262 
ofs
 += 1;

263 i‡(
ofs
 >
∂í
)

266 
p
 =Ö->
√xt
;

267 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

268 
msg_±r
 = 
p
->
∑ylﬂd
;

269 
∂í
 +
p
->
Àn
;

274 
msg_±r
++;

276 i‡(
i
 == 0)

279 *
msg_±r
 = 
Àngth
;

284 *
msg_±r
 = 
Àngth
 >> 8;

287  
ERR_OK
;

290 
p
 =Ö->
√xt
;

293  
ERR_ARG
;

294 
	}
}

307 
îr_t


308 
	$¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
)

310 
u16_t
 
∂í
, 
ba£
;

311 
u8_t
 *
msg_±r
;

313 
∂í
 = 0;

314 
p
 !
NULL
)

316 
ba£
 = 
∂í
;

317 
∂í
 +
p
->
Àn
;

318 i‡(
ofs
 < 
∂í
)

320 
msg_±r
 = 
p
->
∑ylﬂd
;

321 
msg_±r
 +
ofs
 - 
ba£
;

323 i‡(
o˘ës_√eded
 == 5)

326 
o˘ës_√eded
--;

327 *
msg_±r
 = 0x00;

328 
ofs
 += 1;

329 i‡(
ofs
 >
∂í
)

332 
p
 =Ö->
√xt
;

333 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

334 
msg_±r
 = 
p
->
∑ylﬂd
;

335 
∂í
 +
p
->
Àn
;

340 
msg_±r
++;

343 
o˘ës_√eded
 > 1)

345 
o˘ës_√eded
--;

346 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

347 
ofs
 += 1;

348 i‡(
ofs
 >
∂í
)

351 
p
 =Ö->
√xt
;

352 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

353 
msg_±r
 = 
p
->
∑ylﬂd
;

354 
∂í
 +
p
->
Àn
;

359 
msg_±r
++;

363 *
msg_±r
 = 
vÆue
;

364  
ERR_OK
;

366 
p
 =Ö->
√xt
;

369  
ERR_ARG
;

370 
	}
}

383 
îr_t


384 
	$¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
)

386 
u16_t
 
∂í
, 
ba£
;

387 
u8_t
 *
msg_±r
;

389 
∂í
 = 0;

390 
p
 !
NULL
)

392 
ba£
 = 
∂í
;

393 
∂í
 +
p
->
Àn
;

394 i‡(
ofs
 < 
∂í
)

396 
msg_±r
 = 
p
->
∑ylﬂd
;

397 
msg_±r
 +
ofs
 - 
ba£
;

399 
o˘ës_√eded
 > 1)

401 
o˘ës_√eded
--;

402 *
msg_±r
 = 
vÆue
 >> (
o˘ës_√eded
 << 3);

403 
ofs
 += 1;

404 i‡(
ofs
 >
∂í
)

407 
p
 =Ö->
√xt
;

408 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

409 
msg_±r
 = 
p
->
∑ylﬂd
;

410 
∂í
 +
p
->
Àn
;

415 
msg_±r
++;

419 *
msg_±r
 = 
vÆue
;

420  
ERR_OK
;

422 
p
 =Ö->
√xt
;

425  
ERR_ARG
;

426 
	}
}

437 
îr_t


438 
	$¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

440 
u16_t
 
∂í
, 
ba£
;

441 
u8_t
 *
msg_±r
;

443 
∂í
 = 0;

444 
p
 !
NULL
)

446 
ba£
 = 
∂í
;

447 
∂í
 +
p
->
Àn
;

448 i‡(
ofs
 < 
∂í
)

450 
msg_±r
 = 
p
->
∑ylﬂd
;

451 
msg_±r
 +
ofs
 - 
ba£
;

453 i‡(
idít_Àn
 > 1)

455 i‡((
idít
[0] == 1) && (ident[1] == 3))

458 *
msg_±r
 = 0x2b;

463 *
msg_±r
 = (
idít
[0] * 40) + ident[1];

465 
ofs
 += 1;

466 i‡(
ofs
 >
∂í
)

469 
p
 =Ö->
√xt
;

470 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

471 
msg_±r
 = 
p
->
∑ylﬂd
;

472 
∂í
 +
p
->
Àn
;

477 
msg_±r
++;

479 
idít_Àn
 -= 2;

480 
idít
 += 2;

486  
ERR_ARG
;

488 
idít_Àn
 > 0)

490 
s32_t
 
sub_id
;

491 
u8_t
 
shi·
, 
èû
;

493 
idít_Àn
--;

494 
sub_id
 = *
idít
;

495 
èû
 = 0;

496 
shi·
 = 28;

497 
shi·
 > 0)

499 
u8_t
 
code
;

501 
code
 = 
sub_id
 >> 
shi·
;

502 i‡((
code
 !0Ë|| (
èû
 != 0))

504 
èû
 = 1;

505 *
msg_±r
 = 
code
 | 0x80;

506 
ofs
 += 1;

507 i‡(
ofs
 >
∂í
)

510 
p
 =Ö->
√xt
;

511 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

512 
msg_±r
 = 
p
->
∑ylﬂd
;

513 
∂í
 +
p
->
Àn
;

518 
msg_±r
++;

521 
shi·
 -= 7;

523 *
msg_±r
 = (
u8_t
)
sub_id
 & 0x7F;

524 i‡(
idít_Àn
 > 0)

526 
ofs
 += 1;

527 i‡(
ofs
 >
∂í
)

530 
p
 =Ö->
√xt
;

531 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

532 
msg_±r
 = 
p
->
∑ylﬂd
;

533 
∂í
 +
p
->
Àn
;

538 
msg_±r
++;

542 
idít
++;

544  
ERR_OK
;

546 
p
 =Ö->
√xt
;

549  
ERR_ARG
;

550 
	}
}

561 
îr_t


562 
	$¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
)

564 
u16_t
 
∂í
, 
ba£
;

565 
u8_t
 *
msg_±r
;

567 
∂í
 = 0;

568 
p
 !
NULL
)

570 
ba£
 = 
∂í
;

571 
∂í
 +
p
->
Àn
;

572 i‡(
ofs
 < 
∂í
)

574 
msg_±r
 = 
p
->
∑ylﬂd
;

575 
msg_±r
 +
ofs
 - 
ba£
;

577 
øw_Àn
 > 1)

580 
øw_Àn
--;

581 *
msg_±r
 = *
øw
;

582 
øw
++;

583 
ofs
 += 1;

584 i‡(
ofs
 >
∂í
)

587 
p
 =Ö->
√xt
;

588 i‡(
p
 =
NULL
Ë{  
ERR_ARG
; }

589 
msg_±r
 = 
p
->
∑ylﬂd
;

590 
∂í
 +
p
->
Àn
;

595 
msg_±r
++;

598 i‡(
øw_Àn
 > 0)

601 *
msg_±r
 = *
øw
;

603  
ERR_OK
;

605 
p
 =Ö->
√xt
;

608  
ERR_ARG
;

609 
	}
}

	@net/lwip/core/snmp/mib2.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_SNMP


42 
	~"lwù/¢mp.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/ù.h
"

45 
	~"lwù/ù_‰ag.h
"

46 
	~"lwù/t˝.h
"

47 
	~"lwù/udp.h
"

48 
	~"lwù/¢mp_a¢1.h
"

49 
	~"lwù/¢mp_°ru˘s.h
"

50 
	~"√tif/ëh¨p.h
"

65 
	#SNMP_ENTERPRISE_ID
 26381

	)

66 
	#SNMP_SYSOBJID_LEN
 7

	)

67 
	#SNMP_SYSOBJID
 {1, 3, 6, 1, 4, 1, 
SNMP_ENTERPRISE_ID
}

	)

69 #i‚de‡
SNMP_SYSSERVICES


70 
	#SNMP_SYSSERVICES
 ((1 << 6Ë| (1 << 3Ë| ((
IP_FORWARD
Ë<< 2))

	)

73 #i‚de‡
SNMP_GET_SYSUPTIME


74 
	#SNMP_GET_SYSUPTIME
(
sysu±ime
)

	)

77 
sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

78 
sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

79 
u8_t
 
sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

80 
sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

81 
öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

82 
öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

83 
i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

84 
i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

85 #i‡!
SNMP_SAFE_REQUESTS


86 
u8_t
 
i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

87 
i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

89 
©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

90 
©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

91 
ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

92 
ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

93 
u8_t
 
ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

94 
ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

95 
ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

96 
ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

97 
ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

98 
ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

99 
ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

100 
icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

101 
icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

102 #i‡
LWIP_TCP


103 
t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

104 
t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

105 #ifde‡
THIS_SEEMS_UNUSED


106 
t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

107 
t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 
udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

111 
udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 
ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

113 
ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

115 
¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 
u8_t
 
¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

117 
¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

121 c⁄° 
mib_sˇœr_node
 
	g¢mp_sˇœr
 = {

122 &
¢mp_gë_obje˘_def
,

123 &
¢mp_gë_vÆue
,

124 &
¢mp_£t_ã°
,

125 &
¢mp_£t_vÆue
,

126 
MIB_NODE_SC
,

129 c⁄° 
s32_t
 
	g¢mp_ids
[28] = {

133 
mib_node
* c⁄° 
	g¢mp_nodes
[28] = {

134 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

135 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

136 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

137 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

138 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

139 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

140 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

141 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

142 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

143 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

144 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

145 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

146 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar,

147 (
mib_node
* c⁄°)&
¢mp_sˇœr
, (mib_node* const)&snmp_scalar

149 c⁄° 
mib_¨øy_node
 
	g¢mp
 = {

150 &
nﬁófs_gë_obje˘_def
,

151 &
nﬁófs_gë_vÆue
,

152 &
nﬁófs_£t_ã°
,

153 &
nﬁófs_£t_vÆue
,

154 
MIB_NODE_AR
,

156 
¢mp_ids
,

157 
¢mp_nodes


166 
mib_li°_roŸnode
 
	gudp_roŸ
 = {

167 &
nﬁófs_gë_obje˘_def
,

168 &
nﬁófs_gë_vÆue
,

169 &
nﬁófs_£t_ã°
,

170 &
nﬁófs_£t_vÆue
,

171 
MIB_NODE_LR
,

173 
NULL
,

174 
NULL
,

177 c⁄° 
s32_t
 
	gud≥¡ry_ids
[2] = { 1, 2 };

178 
mib_node
* c⁄° 
	gud≥¡ry_nodes
[2] = {

179 (
mib_node
* c⁄°)&
udp_roŸ
, (mib_node* const)&udp_root,

181 c⁄° 
mib_¨øy_node
 
	gud≥¡ry
 = {

182 &
nﬁófs_gë_obje˘_def
,

183 &
nﬁófs_gë_vÆue
,

184 &
nﬁófs_£t_ã°
,

185 &
nﬁófs_£t_vÆue
,

186 
MIB_NODE_AR
,

188 
ud≥¡ry_ids
,

189 
ud≥¡ry_nodes


192 
s32_t
 
	gud±abÀ_id
 = 1;

193 
mib_node
* 
	gud±abÀ_node
 = (mib_node* c⁄°)&
ud≥¡ry
;

194 
mib_øm_¨øy_node
 
	gud±abÀ
 = {

195 &
nﬁófs_gë_obje˘_def
,

196 &
nﬁófs_gë_vÆue
,

197 &
nﬁófs_£t_ã°
,

198 &
nﬁófs_£t_vÆue
,

199 
MIB_NODE_RA
,

201 &
ud±abÀ_id
,

202 &
ud±abÀ_node


205 c⁄° 
mib_sˇœr_node
 
	gudp_sˇœr
 = {

206 &
udp_gë_obje˘_def
,

207 &
udp_gë_vÆue
,

208 &
nﬁófs_£t_ã°
,

209 &
nﬁófs_£t_vÆue
,

210 
MIB_NODE_SC
,

213 c⁄° 
s32_t
 
	gudp_ids
[5] = { 1, 2, 3, 4, 5 };

214 
mib_node
* c⁄° 
	gudp_nodes
[5] = {

215 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

216 (
mib_node
* c⁄°)&
udp_sˇœr
, (mib_node* const)&udp_scalar,

217 (
mib_node
* c⁄°)&
ud±abÀ


219 c⁄° 
mib_¨øy_node
 
	gudp
 = {

220 &
nﬁófs_gë_obje˘_def
,

221 &
nﬁófs_gë_vÆue
,

222 &
nﬁófs_£t_ã°
,

223 &
nﬁófs_£t_vÆue
,

224 
MIB_NODE_AR
,

226 
udp_ids
,

227 
udp_nodes


231 #i‡
LWIP_TCP


234 
mib_li°_roŸnode
 
	gt˝c⁄¡ªe_roŸ
 = {

235 &
nﬁófs_gë_obje˘_def
,

236 &
nﬁófs_gë_vÆue
,

237 &
nﬁófs_£t_ã°
,

238 &
nﬁófs_£t_vÆue
,

239 
MIB_NODE_LR
,

241 
NULL
,

242 
NULL
,

245 c⁄° 
s32_t
 
	gt˝c⁄√¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

246 
mib_node
* c⁄° 
	gt˝c⁄√¡ry_nodes
[5] = {

247 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

248 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ
, (mib_node* const)&tcpconntree_root,

249 (
mib_node
* c⁄°)&
t˝c⁄¡ªe_roŸ


251 c⁄° 
mib_¨øy_node
 
	gt˝c⁄√¡ry
 = {

252 &
nﬁófs_gë_obje˘_def
,

253 &
nﬁófs_gë_vÆue
,

254 &
nﬁófs_£t_ã°
,

255 &
nﬁófs_£t_vÆue
,

256 
MIB_NODE_AR
,

258 
t˝c⁄√¡ry_ids
,

259 
t˝c⁄√¡ry_nodes


262 
s32_t
 
	gt˝c⁄¡abÀ_id
 = 1;

263 
mib_node
* 
	gt˝c⁄¡abÀ_node
 = (mib_node* c⁄°)&
t˝c⁄√¡ry
;

264 
mib_øm_¨øy_node
 
	gt˝c⁄¡abÀ
 = {

265 &
nﬁófs_gë_obje˘_def
,

266 &
nﬁófs_gë_vÆue
,

267 &
nﬁófs_£t_ã°
,

268 &
nﬁófs_£t_vÆue
,

269 
MIB_NODE_RA
,

273 &
t˝c⁄¡abÀ_id
,

274 &
t˝c⁄¡abÀ_node


277 c⁄° 
mib_sˇœr_node
 
	gt˝_sˇœr
 = {

278 &
t˝_gë_obje˘_def
,

279 &
t˝_gë_vÆue
,

280 &
nﬁófs_£t_ã°
,

281 &
nﬁófs_£t_vÆue
,

282 
MIB_NODE_SC
,

285 c⁄° 
s32_t
 
	gt˝_ids
[15] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };

286 
mib_node
* c⁄° 
	gt˝_nodes
[15] = {

287 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

288 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

289 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

290 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

291 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

292 (
mib_node
* c⁄°)&
t˝_sˇœr
, (mib_node* const)&tcp_scalar,

293 (
mib_node
* c⁄°)&
t˝c⁄¡abÀ
, (mib_node* c⁄°)&
t˝_sˇœr
,

294 (
mib_node
* c⁄°)&
t˝_sˇœr


296 c⁄° 
mib_¨øy_node
 
	gt˝
 = {

297 &
nﬁófs_gë_obje˘_def
,

298 &
nﬁófs_gë_vÆue
,

299 &
nﬁófs_£t_ã°
,

300 &
nﬁófs_£t_vÆue
,

301 
MIB_NODE_AR
,

303 
t˝_ids
,

304 
t˝_nodes


309 c⁄° 
mib_sˇœr_node
 
	gicmp_sˇœr
 = {

310 &
icmp_gë_obje˘_def
,

311 &
icmp_gë_vÆue
,

312 &
nﬁófs_£t_ã°
,

313 &
nﬁófs_£t_vÆue
,

314 
MIB_NODE_SC
,

317 c⁄° 
s32_t
 
	gicmp_ids
[26] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };

318 
mib_node
* c⁄° 
	gicmp_nodes
[26] = {

319 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

320 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

321 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

322 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

323 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

324 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

325 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

326 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

327 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

328 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

329 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

330 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar,

331 (
mib_node
* c⁄°)&
icmp_sˇœr
, (mib_node* const)&icmp_scalar

333 c⁄° 
mib_¨øy_node
 
	gicmp
 = {

334 &
nﬁófs_gë_obje˘_def
,

335 &
nﬁófs_gë_vÆue
,

336 &
nﬁófs_£t_ã°
,

337 &
nﬁófs_£t_vÆue
,

338 
MIB_NODE_AR
,

340 
icmp_ids
,

341 
icmp_nodes


345 
mib_li°_roŸnode
 
	gù¡omåì_roŸ
 = {

346 &
nﬁófs_gë_obje˘_def
,

347 &
nﬁófs_gë_vÆue
,

348 &
nﬁófs_£t_ã°
,

349 &
nﬁófs_£t_vÆue
,

350 
MIB_NODE_LR
,

352 
NULL
,

353 
NULL
,

356 c⁄° 
s32_t
 
	gù¡omíåy_ids
[4] = { 1, 2, 3, 4 };

357 
mib_node
* c⁄° 
	gù¡omíåy_nodes
[4] = {

358 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root,

359 (
mib_node
* c⁄°)&
ù¡omåì_roŸ
, (mib_node* const)&ipntomtree_root

361 c⁄° 
mib_¨øy_node
 
	gù¡omíåy
 = {

362 &
nﬁófs_gë_obje˘_def
,

363 &
nﬁófs_gë_vÆue
,

364 &
nﬁófs_£t_ã°
,

365 &
nﬁófs_£t_vÆue
,

366 
MIB_NODE_AR
,

368 
ù¡omíåy_ids
,

369 
ù¡omíåy_nodes


372 
s32_t
 
	gù¡omèbÀ_id
 = 1;

373 
mib_node
* 
	gù¡omèbÀ_node
 = (mib_node* c⁄°)&
ù¡omíåy
;

374 
mib_øm_¨øy_node
 
	gù¡omèbÀ
 = {

375 &
nﬁófs_gë_obje˘_def
,

376 &
nﬁófs_gë_vÆue
,

377 &
nﬁófs_£t_ã°
,

378 &
nﬁófs_£t_vÆue
,

379 
MIB_NODE_RA
,

381 &
ù¡omèbÀ_id
,

382 &
ù¡omèbÀ_node


386 
mib_li°_roŸnode
 
	gùπëªe_roŸ
 = {

387 &
nﬁófs_gë_obje˘_def
,

388 &
nﬁófs_gë_vÆue
,

389 &
nﬁófs_£t_ã°
,

390 &
nﬁófs_£t_vÆue
,

391 
MIB_NODE_LR
,

393 
NULL
,

394 
NULL
,

397 c⁄° 
s32_t
 
	gùπì¡ry_ids
[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };

398 
mib_node
* c⁄° 
	gùπì¡ry_nodes
[13] = {

399 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

400 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

401 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

402 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

403 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

404 (
mib_node
* c⁄°)&
ùπëªe_roŸ
, (mib_node* const)&iprtetree_root,

405 (
mib_node
* c⁄°)&
ùπëªe_roŸ


407 c⁄° 
mib_¨øy_node
 
	gùπì¡ry
 = {

408 &
nﬁófs_gë_obje˘_def
,

409 &
nﬁófs_gë_vÆue
,

410 &
nﬁófs_£t_ã°
,

411 &
nﬁófs_£t_vÆue
,

412 
MIB_NODE_AR
,

414 
ùπì¡ry_ids
,

415 
ùπì¡ry_nodes


418 
s32_t
 
	gùπëabÀ_id
 = 1;

419 
mib_node
* 
	gùπëabÀ_node
 = (mib_node* c⁄°)&
ùπì¡ry
;

420 
mib_øm_¨øy_node
 
	gùπëabÀ
 = {

421 &
nﬁófs_gë_obje˘_def
,

422 &
nﬁófs_gë_vÆue
,

423 &
nﬁófs_£t_ã°
,

424 &
nﬁófs_£t_vÆue
,

425 
MIB_NODE_RA
,

427 &
ùπëabÀ_id
,

428 &
ùπëabÀ_node


432 
mib_li°_roŸnode
 
	gùaddπªe_roŸ
 = {

433 &
nﬁófs_gë_obje˘_def
,

434 &
nﬁófs_gë_vÆue
,

435 &
nﬁófs_£t_ã°
,

436 &
nﬁófs_£t_vÆue
,

437 
MIB_NODE_LR
,

439 
NULL
,

440 
NULL
,

443 c⁄° 
s32_t
 
	gùaddª¡ry_ids
[5] = { 1, 2, 3, 4, 5 };

444 
mib_node
* c⁄° 
	gùaddª¡ry_nodes
[5] = {

445 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

446 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

447 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

448 (
mib_node
* c⁄°)&
ùaddπªe_roŸ
,

449 (
mib_node
* c⁄°)&
ùaddπªe_roŸ


451 c⁄° 
mib_¨øy_node
 
	gùaddª¡ry
 = {

452 &
nﬁófs_gë_obje˘_def
,

453 &
nﬁófs_gë_vÆue
,

454 &
nﬁófs_£t_ã°
,

455 &
nﬁófs_£t_vÆue
,

456 
MIB_NODE_AR
,

458 
ùaddª¡ry_ids
,

459 
ùaddª¡ry_nodes


462 
s32_t
 
	gùaddπabÀ_id
 = 1;

463 
mib_node
* 
	gùaddπabÀ_node
 = (mib_node* c⁄°)&
ùaddª¡ry
;

464 
mib_øm_¨øy_node
 
	gùaddπabÀ
 = {

465 &
nﬁófs_gë_obje˘_def
,

466 &
nﬁófs_gë_vÆue
,

467 &
nﬁófs_£t_ã°
,

468 &
nﬁófs_£t_vÆue
,

469 
MIB_NODE_RA
,

471 &
ùaddπabÀ_id
,

472 &
ùaddπabÀ_node


476 c⁄° 
mib_sˇœr_node
 
	gù_sˇœr
 = {

477 &
ù_gë_obje˘_def
,

478 &
ù_gë_vÆue
,

479 &
ù_£t_ã°
,

480 &
nﬁófs_£t_vÆue
,

481 
MIB_NODE_SC
,

484 c⁄° 
s32_t
 
	gù_ids
[23] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

485 
mib_node
* c⁄° 
	gù_nodes
[23] = {

486 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

487 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

488 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

489 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

490 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

491 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

492 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

493 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

494 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* const)&ip_scalar,

495 (
mib_node
* c⁄°)&
ù_sˇœr
, (mib_node* c⁄°)&
ùaddπabÀ
,

496 (
mib_node
* c⁄°)&
ùπëabÀ
, (mib_node* c⁄°)&
ù¡omèbÀ
,

497 (
mib_node
* c⁄°)&
ù_sˇœr


499 c⁄° 
mib_¨øy_node
 
	gmib2_ù
 = {

500 &
nﬁófs_gë_obje˘_def
,

501 &
nﬁófs_gë_vÆue
,

502 &
nﬁófs_£t_ã°
,

503 &
nﬁófs_£t_vÆue
,

504 
MIB_NODE_AR
,

506 
ù_ids
,

507 
ù_nodes


511 
mib_li°_roŸnode
 
	g¨±ªe_roŸ
 = {

512 &
nﬁófs_gë_obje˘_def
,

513 &
nﬁófs_gë_vÆue
,

514 &
nﬁófs_£t_ã°
,

515 &
nﬁófs_£t_vÆue
,

516 
MIB_NODE_LR
,

518 
NULL
,

519 
NULL
,

522 c⁄° 
s32_t
 
	g©íåy_ids
[3] = { 1, 2, 3 };

523 
mib_node
* c⁄° 
	g©íåy_nodes
[3] = {

524 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

525 (
mib_node
* c⁄°)&
¨±ªe_roŸ
,

526 (
mib_node
* c⁄°)&
¨±ªe_roŸ


528 c⁄° 
mib_¨øy_node
 
	g©íåy
 = {

529 &
nﬁófs_gë_obje˘_def
,

530 &
nﬁófs_gë_vÆue
,

531 &
nﬁófs_£t_ã°
,

532 &
nﬁófs_£t_vÆue
,

533 
MIB_NODE_AR
,

535 
©íåy_ids
,

536 
©íåy_nodes


539 c⁄° 
s32_t
 
	g©èbÀ_id
 = 1;

540 
mib_node
* c⁄° 
	g©èbÀ_node
 = (mib_node* c⁄°)&
©íåy
;

541 c⁄° 
mib_¨øy_node
 
	g©èbÀ
 = {

542 &
nﬁófs_gë_obje˘_def
,

543 &
nﬁófs_gë_vÆue
,

544 &
nﬁófs_£t_ã°
,

545 &
nﬁófs_£t_vÆue
,

546 
MIB_NODE_AR
,

548 &
©èbÀ_id
,

549 &
©èbÀ_node


553 
s32_t
 
	g©_id
 = 1;

554 
mib_node
* 
	gmib2_©_node
 = (mib_node* c⁄°)&
©èbÀ
;

555 
mib_øm_¨øy_node
 
	g©
 = {

556 &
nﬁófs_gë_obje˘_def
,

557 &
nﬁófs_gë_vÆue
,

558 &
nﬁófs_£t_ã°
,

559 &
nﬁófs_£t_vÆue
,

560 
MIB_NODE_RA
,

562 &
©_id
,

563 &
mib2_©_node


567 
mib_li°_roŸnode
 
	giÊi°_roŸ
 = {

568 &
i„¡ry_gë_obje˘_def
,

569 &
i„¡ry_gë_vÆue
,

570 #i‡
SNMP_SAFE_REQUESTS


571 &
nﬁófs_£t_ã°
,

572 &
nﬁófs_£t_vÆue
,

574 &
i„¡ry_£t_ã°
,

575 &
i„¡ry_£t_vÆue
,

577 
MIB_NODE_LR
,

579 
NULL
,

580 
NULL
,

583 c⁄° 
s32_t
 
	gi„¡ry_ids
[22] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 };

584 
mib_node
* c⁄° 
	gi„¡ry_nodes
[22] = {

585 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

586 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

587 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

588 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

589 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

590 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

591 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

592 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

593 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

594 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root,

595 (
mib_node
* c⁄°)&
iÊi°_roŸ
, (mib_node* const)&iflist_root

597 c⁄° 
mib_¨øy_node
 
	gi„¡ry
 = {

598 &
nﬁófs_gë_obje˘_def
,

599 &
nﬁófs_gë_vÆue
,

600 &
nﬁófs_£t_ã°
,

601 &
nﬁófs_£t_vÆue
,

602 
MIB_NODE_AR
,

604 
i„¡ry_ids
,

605 
i„¡ry_nodes


608 
s32_t
 
	gi·abÀ_id
 = 1;

609 
mib_node
* 
	gi·abÀ_node
 = (mib_node* c⁄°)&
i„¡ry
;

610 
mib_øm_¨øy_node
 
	gi·abÀ
 = {

611 &
nﬁófs_gë_obje˘_def
,

612 &
nﬁófs_gë_vÆue
,

613 &
nﬁófs_£t_ã°
,

614 &
nﬁófs_£t_vÆue
,

615 
MIB_NODE_RA
,

617 &
i·abÀ_id
,

618 &
i·abÀ_node


622 c⁄° 
mib_sˇœr_node
 
	göãrÁ˚s_sˇœr
 = {

623 &
öãrÁ˚s_gë_obje˘_def
,

624 &
öãrÁ˚s_gë_vÆue
,

625 &
nﬁófs_£t_ã°
,

626 &
nﬁófs_£t_vÆue
,

627 
MIB_NODE_SC
,

630 c⁄° 
s32_t
 
	göãrÁ˚s_ids
[2] = { 1, 2 };

631 
mib_node
* c⁄° 
	göãrÁ˚s_nodes
[2] = {

632 (
mib_node
* c⁄°)&
öãrÁ˚s_sˇœr
, (mib_node* c⁄°)&
i·abÀ


634 c⁄° 
mib_¨øy_node
 
	göãrÁ˚s
 = {

635 &
nﬁófs_gë_obje˘_def
,

636 &
nﬁófs_gë_vÆue
,

637 &
nﬁófs_£t_ã°
,

638 &
nﬁófs_£t_vÆue
,

639 
MIB_NODE_AR
,

641 
öãrÁ˚s_ids
,

642 
öãrÁ˚s_nodes


648 c⁄° 
mib_sˇœr_node
 
	gsys_ãm_sˇœr
 = {

649 &
sy°em_gë_obje˘_def
,

650 &
sy°em_gë_vÆue
,

651 &
sy°em_£t_ã°
,

652 &
sy°em_£t_vÆue
,

653 
MIB_NODE_SC
,

656 c⁄° 
s32_t
 
	gsys_ãm_ids
[7] = { 1, 2, 3, 4, 5, 6, 7 };

657 
mib_node
* c⁄° 
	gsys_ãm_nodes
[7] = {

658 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

659 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

660 (
mib_node
* c⁄°)&
sys_ãm_sˇœr
, (mib_node* const)&sys_tem_scalar,

661 (
mib_node
* c⁄°)&
sys_ãm_sˇœr


664 c⁄° 
mib_¨øy_node
 
	gsys_ãm
 = {

665 &
nﬁófs_gë_obje˘_def
,

666 &
nﬁófs_gë_vÆue
,

667 &
nﬁófs_£t_ã°
,

668 &
nﬁófs_£t_vÆue
,

669 
MIB_NODE_AR
,

671 
sys_ãm_ids
,

672 
sys_ãm_nodes


676 #i‡
LWIP_TCP


677 
	#MIB2_GROUPS
 8

	)

679 
	#MIB2_GROUPS
 7

	)

681 c⁄° 
s32_t
 
	gmib2_ids
[
MIB2_GROUPS
] =

688 #i‡
LWIP_TCP


694 
mib_node
* c⁄° 
	gmib2_nodes
[
MIB2_GROUPS
] = {

695 (
mib_node
* c⁄°)&
sys_ãm
,

696 (
mib_node
* c⁄°)&
öãrÁ˚s
,

697 (
mib_node
* c⁄°)&
©
,

698 (
mib_node
* c⁄°)&
mib2_ù
,

699 (
mib_node
* c⁄°)&
icmp
,

700 #i‡
LWIP_TCP


701 (
mib_node
* c⁄°)&
t˝
,

703 (
mib_node
* c⁄°)&
udp
,

704 (
mib_node
* c⁄°)&
¢mp


707 c⁄° 
mib_¨øy_node
 
	gmib2
 = {

708 &
nﬁófs_gë_obje˘_def
,

709 &
nﬁófs_gë_vÆue
,

710 &
nﬁófs_£t_ã°
,

711 &
nﬁófs_£t_vÆue
,

712 
MIB_NODE_AR
,

713 
MIB2_GROUPS
,

714 
mib2_ids
,

715 
mib2_nodes


719 c⁄° 
s32_t
 
	gmgmt_ids
[1] = { 1 };

720 
mib_node
* c⁄° 
	gmgmt_nodes
[1] = { (mib_node* c⁄°)&
mib2
 };

721 c⁄° 
mib_¨øy_node
 
	gmgmt
 = {

722 &
nﬁófs_gë_obje˘_def
,

723 &
nﬁófs_gë_vÆue
,

724 &
nﬁófs_£t_ã°
,

725 &
nﬁófs_£t_vÆue
,

726 
MIB_NODE_AR
,

728 
mgmt_ids
,

729 
mgmt_nodes


733 #i‡
SNMP_PRIVATE_MIB


734 
s32_t
 
	göã∫ë_ids
[2] = { 2, 4 };

735 
mib_node
* c⁄° 
	göã∫ë_nodes
[2] = { (mib_node* c⁄°)&
mgmt
, (mib_node* c⁄°)&
¥iv©e
 };

736 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

737 &
nﬁófs_gë_obje˘_def
,

738 &
nﬁófs_gë_vÆue
,

739 &
nﬁófs_£t_ã°
,

740 &
nﬁófs_£t_vÆue
,

741 
MIB_NODE_AR
,

743 
öã∫ë_ids
,

744 
öã∫ë_nodes


747 c⁄° 
s32_t
 
	göã∫ë_ids
[1] = { 2 };

748 
mib_node
* c⁄° 
	göã∫ë_nodes
[1] = { (mib_node* c⁄°)&
mgmt
 };

749 c⁄° 
mib_¨øy_node
 
	göã∫ë
 = {

750 &
nﬁófs_gë_obje˘_def
,

751 &
nﬁófs_gë_vÆue
,

752 &
nﬁófs_£t_ã°
,

753 &
nﬁófs_£t_vÆue
,

754 
MIB_NODE_AR
,

756 
öã∫ë_ids
,

757 
öã∫ë_nodes


762 
¢mp_obj_id
 
	gsysobjid
 = {
SNMP_SYSOBJID_LEN
, 
SNMP_SYSOBJID
};

764 
¢mp_obj_id
 
	g¢mpgΩ_id
 = {7,{1,3,6,1,2,1,11}};

766 c⁄° 
s32_t
 
	gsys£rvi˚s
 = 
SNMP_SYSSERVICES
;

769 c⁄° 
u8_t
 
	gsysdes¸_Àn_deÁu…
 = 4;

770 c⁄° 
u8_t
 
	gsysdes¸_deÁu…
[] = "lwIP";

771 
u8_t
* 
	gsysdes¸_Àn_±r
 = (u8_t*)&
sysdes¸_Àn_deÁu…
;

772 
u8_t
* 
	gsysdes¸_±r
 = (u8_t*)&
sysdes¸_deÁu…
[0];

774 c⁄° 
u8_t
 
	gsysc⁄è˘_Àn_deÁu…
 = 0;

775 c⁄° 
u8_t
 
	gsysc⁄è˘_deÁu…
[] = "";

776 
u8_t
* 
	gsysc⁄è˘_Àn_±r
 = (u8_t*)&
sysc⁄è˘_Àn_deÁu…
;

777 
u8_t
* 
	gsysc⁄è˘_±r
 = (u8_t*)&
sysc⁄è˘_deÁu…
[0];

779 c⁄° 
u8_t
 
	gsy¢ame_Àn_deÁu…
 = 8;

780 c⁄° 
u8_t
 
	gsy¢ame_deÁu…
[] = "FQDN-unk";

781 
u8_t
* 
	gsy¢ame_Àn_±r
 = (u8_t*)&
sy¢ame_Àn_deÁu…
;

782 
u8_t
* 
	gsy¢ame_±r
 = (u8_t*)&
sy¢ame_deÁu…
[0];

784 c⁄° 
u8_t
 
	gsy¶oˇti⁄_Àn_deÁu…
 = 0;

785 c⁄° 
u8_t
 
	gsy¶oˇti⁄_deÁu…
[] = "";

786 
u8_t
* 
	gsy¶oˇti⁄_Àn_±r
 = (u8_t*)&
sy¶oˇti⁄_Àn_deÁu…
;

787 
u8_t
* 
	gsy¶oˇti⁄_±r
 = (u8_t*)&
sy¶oˇti⁄_deÁu…
[0];

789 c⁄° 
u8_t
 
	g¢m≥«bÀauthíå≠s_deÁu…
 = 2;

790 
u8_t
* 
	g¢m≥«bÀauthíå≠s_±r
 = (u8_t*)&
¢m≥«bÀauthíå≠s_deÁu…
;

793 c⁄° 
¢mp_obj_id
 
	gif•ecific
 = {2, {0, 0}};

795 c⁄° 
¢mp_obj_id
 
	gùrouãöfo
 = {2, {0, 0}};

800 
u32_t
 
	gsysu±ime
 = 0;

803 
u32_t
 
	gùöª˚ives
 = 0,

804 
	gùöhdªº‹s
 = 0,

805 
	gùöaddªº‹s
 = 0,

806 
	gùf‹wd©agøms
 = 0,

807 
	gùöunknow≈rŸos
 = 0,

808 
	gùödisˇrds
 = 0,

809 
	gùödñivîs
 = 0,

810 
	gùouåeque°s
 = 0,

811 
	gùoutdisˇrds
 = 0,

812 
	gùouä‹ouãs
 = 0,

813 
	gùªasmªqds
 = 0,

814 
	gùªasmoks
 = 0,

815 
	gùªasmÁûs
 = 0,

816 
	gù‰agoks
 = 0,

817 
	gù‰agÁûs
 = 0,

818 
	gù‰ag¸óãs
 = 0,

819 
	gùroutögdisˇrds
 = 0;

821 
u32_t
 
	gicmpömsgs
 = 0,

822 
	gicmpöîr‹s
 = 0,

823 
	gicmpöde°uƒóchs
 = 0,

824 
	gicmpötimìxcds
 = 0,

825 
	gicmpö∑rm¥obs
 = 0,

826 
	gicmpö§cquíchs
 = 0,

827 
	gicmpöªdúe˘s
 = 0,

828 
	gicmpöechos
 = 0,

829 
	gicmpöech‹ïs
 = 0,

830 
	gicmpötime°amps
 = 0,

831 
	gicmpötime°am¥ïs
 = 0,

832 
	gicmpöaddrmasks
 = 0,

833 
	gicmpöaddrmaskªps
 = 0,

834 
	gicmpoutmsgs
 = 0,

835 
	gicmpouãº‹s
 = 0,

836 
	gicmpoutde°uƒóchs
 = 0,

837 
	gicmpouâimìxcds
 = 0,

838 
	gicmpouç¨m¥obs
 = 0,

839 
	gicmpout§cquíchs
 = 0,

840 
	gicmpouåedúe˘s
 = 0,

841 
	gicmpouãchos
 = 0,

842 
	gicmpouãch‹ïs
 = 0,

843 
	gicmpouâime°amps
 = 0,

844 
	gicmpouâime°am¥ïs
 = 0,

845 
	gicmpouèddrmasks
 = 0,

846 
	gicmpouèddrmaskªps
 = 0;

848 
u32_t
 
	gt˝a˘ive›ís
 = 0,

849 
	gt˝∑ssive›ís
 = 0,

850 
	gt˝©ãm±Áûs
 = 0,

851 
	gt˝e°abª£ts
 = 0,

852 
	gt˝ö£gs
 = 0,

853 
	gt˝out£gs
 = 0,

854 
	gt˝ªå™s£gs
 = 0,

855 
	gt˝öîrs
 = 0,

856 
	gt˝ouå°s
 = 0;

858 
u32_t
 
	gudpöd©agøms
 = 0,

859 
	gud≤›‹ts
 = 0,

860 
	gudpöîr‹s
 = 0,

861 
	gudpoutd©agøms
 = 0;

863 
u32_t
 
	g¢mpöpkts
 = 0,

864 
	g¢mpouçkts
 = 0,

865 
	g¢mpöbadvîsi⁄s
 = 0,

866 
	g¢mpöbadcommunôy«mes
 = 0,

867 
	g¢mpöbadcommunôyu£s
 = 0,

868 
	g¢mpöa¢∑r£îrs
 = 0,

869 
	g¢mpötoobigs
 = 0,

870 
	g¢mpönosuch«mes
 = 0,

871 
	g¢mpöbadvÆues
 = 0,

872 
	g¢mpöªad⁄lys
 = 0,

873 
	g¢mpögíîrs
 = 0,

874 
	g¢mpötŸÆªqv¨s
 = 0,

875 
	g¢mpötŸÆ£tv¨s
 = 0,

876 
	g¢mpögëªque°s
 = 0,

877 
	g¢mpögë√xts
 = 0,

878 
	g¢mpö£åeque°s
 = 0,

879 
	g¢mpögëª•⁄£s
 = 0,

880 
	g¢mpöå≠s
 = 0,

881 
	g¢mpouâoobigs
 = 0,

882 
	g¢mpouäosuch«mes
 = 0,

883 
	g¢mpoutbadvÆues
 = 0,

884 
	g¢mpoutgíîrs
 = 0,

885 
	g¢mpoutgëªque°s
 = 0,

886 
	g¢mpoutgë√xts
 = 0,

887 
	g¢mpout£åeque°s
 = 0,

888 
	g¢mpoutgëª•⁄£s
 = 0,

889 
	g¢mpouâøps
 = 0;

901 
	$oc°∫˝y
(
u8_t
 *
d°
, u8_à*
§c
, u8_à
n
)

903 
n
 > 0)

905 
n
--;

906 *
d°
++ = *
§c
++;

908 
	}
}

917 
	$obje˘idn˝y
(
s32_t
 *
d°
, s32_à*
§c
, 
u8_t
 
n
)

919 
n
 > 0)

921 
n
--;

922 *
d°
++ = *
§c
++;

924 
	}
}

932 
	$¢mp_£t_sysde§
(
u8_t
 *
°r
, u8_à*
Àn
)

934 i‡(
°r
 !
NULL
)

936 
sysdes¸_±r
 = 
°r
;

937 
sysdes¸_Àn_±r
 = 
Àn
;

939 
	}
}

941 
	$¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
)

943 *
oid
 = &
sysobjid
;

944 
	}
}

951 
	$¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
)

953 
sysobjid
 = *
oid
;

954 
	}
}

960 
	$¢mp_öc_sysu±ime
()

962 
sysu±ime
++;

963 
	}
}

965 
	$¢mp_add_sysu±ime
(
u32_t
 
vÆue
)

967 
sysu±ime
+=
vÆue
;

968 
	}
}

970 
	$¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
)

972 
	`SNMP_GET_SYSUPTIME
(
sysu±ime
);

973 *
vÆue
 = 
sysu±ime
;

974 
	}
}

983 
	$¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

985 i‡(
oc°r
 !
NULL
)

987 
sysc⁄è˘_±r
 = 
oc°r
;

988 
sysc⁄è˘_Àn_±r
 = 
oc°æí
;

990 
	}
}

999 
	$¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1001 i‡(
oc°r
 !
NULL
)

1003 
sy¢ame_±r
 = 
oc°r
;

1004 
sy¢ame_Àn_±r
 = 
oc°æí
;

1006 
	}
}

1015 
	$¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
)

1017 i‡(
oc°r
 !
NULL
)

1019 
sy¶oˇti⁄_±r
 = 
oc°r
;

1020 
sy¶oˇti⁄_Àn_±r
 = 
oc°æí
;

1022 
	}
}

1025 
	$¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1027 
ni
->
iföo˘ës
 +
vÆue
;

1028 
	}
}

1030 
	$¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
)

1032 (
ni
->
iföuˇ°pkts
)++;

1033 
	}
}

1035 
	$¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
)

1037 (
ni
->
ifönuˇ°pkts
)++;

1038 
	}
}

1040 
	$¢mp_öc_ifödisˇrds
(
√tif
 *
ni
)

1042 (
ni
->
ifödisˇrds
)++;

1043 
	}
}

1045 
	$¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
)

1047 
ni
->
ifouto˘ës
 +
vÆue
;

1048 
	}
}

1050 
	$¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
)

1052 (
ni
->
ifoutuˇ°pkts
)++;

1053 
	}
}

1055 
	$¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
)

1057 (
ni
->
ifouäuˇ°pkts
)++;

1058 
	}
}

1060 
	$¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
)

1062 (
ni
->
ifoutdisˇrds
)++;

1063 
	}
}

1065 
	$¢mp_öc_iÊi°
()

1067 
mib_li°_node
 *
if_node
 = 
NULL
;

1069 
	`¢mp_mib_node_ö£π
(&
iÊi°_roŸ
, iÊi°_roŸ.
cou¡
 + 1, &
if_node
);

1071 
i·abÀ
.
maxÀngth
 = 1;

1072 
	}
}

1074 
	$¢mp_dec_iÊi°
()

1076 
	`¢mp_mib_node_dñëe
(&
iÊi°_roŸ
, iÊi°_roŸ.
èû
);

1078 if(
iÊi°_roŸ
.
cou¡
 =0Ë
i·abÀ
.
maxÀngth
 = 0;

1079 
	}
}

1085 
	$¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1087 
mib_li°_roŸnode
 *
©_∫
;

1088 
mib_li°_node
 *
©_node
;

1089 
ù_addr
 
hù
;

1090 
s32_t
 
¨pidx
[5];

1091 
u8_t
 
Àvñ
, 
åì
;

1093 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1094 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1095 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1096 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1098 
åì
 = 0;Åree < 2;Åree++)

1100 i‡(
åì
 == 0)

1102 
©_∫
 = &
¨±ªe_roŸ
;

1106 
©_∫
 = &
ù¡omåì_roŸ
;

1108 
Àvñ
 = 0;Üevel < 5;Üevel++)

1110 
©_node
 = 
NULL
;

1111 
	`¢mp_mib_node_ö£π
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_node
);

1112 i‡((
Àvñ
 !4Ë&& (
©_node
 !
NULL
))

1114 i‡(
©_node
->
≈å
 =
NULL
)

1116 
©_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1117 
©_node
->
≈å
 = (
mib_node
*)
©_∫
;

1118 i‡(
©_∫
 !
NULL
)

1120 i‡(
Àvñ
 == 3)

1122 i‡(
åì
 == 0)

1124 
©_∫
->
gë_obje˘_def
 = 
©íåy_gë_obje˘_def
;

1125 
©_∫
->
gë_vÆue
 = 
©íåy_gë_vÆue
;

1129 
©_∫
->
gë_obje˘_def
 = 
ù_¡omíåy_gë_obje˘_def
;

1130 
©_∫
->
gë_vÆue
 = 
ù_¡omíåy_gë_vÆue
;

1132 
©_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1133 
©_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1139 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_arpidx_tree() insert failed, mem full"));

1145 
©_∫
 = (
mib_li°_roŸnode
*)
©_node
->
≈å
;

1151 
©
.
maxÀngth
 = 1;

1152 
ù¡omèbÀ
.
maxÀngth
 = 1;

1153 
	}
}

1159 
	$¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
)

1161 
mib_li°_roŸnode
 *
©_∫
, *
√xt
, *
dñ_∫
[5];

1162 
mib_li°_node
 *
©_n
, *
dñ_n
[5];

1163 
ù_addr
 
hù
;

1164 
s32_t
 
¨pidx
[5];

1165 
u8_t
 
fc
, 
åì
, 
Àvñ
, 
dñ_˙t
;

1167 
	`¢mp_√ti·oifödex
(
ni
, &
¨pidx
[0]);

1168 
hù
.
addr
 = 
	`¡ohl
(
ù
->addr);

1169 
	`¢mp_ùtooid
(&
hù
, &
¨pidx
[1]);

1171 
åì
 = 0;Åree < 2;Åree++)

1174 i‡(
åì
 == 0)

1176 
©_∫
 = &
¨±ªe_roŸ
;

1180 
©_∫
 = &
ù¡omåì_roŸ
;

1182 
Àvñ
 = 0;

1183 
dñ_˙t
 = 0;

1184 (
Àvñ
 < 5Ë&& (
©_∫
 !
NULL
))

1186 
fc
 = 
	`¢mp_mib_node_föd
(
©_∫
, 
¨pidx
[
Àvñ
], &
©_n
);

1187 i‡(
fc
 == 0)

1190 
dñ_˙t
 = 0;

1191 
©_∫
 = 
NULL
;

1193 i‡(
fc
 == 1)

1195 
dñ_∫
[
dñ_˙t
] = 
©_∫
;

1196 
dñ_n
[
dñ_˙t
] = 
©_n
;

1197 
dñ_˙t
++;

1198 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1200 i‡(
fc
 == 2)

1203 
dñ_˙t
 = 0;

1204 
©_∫
 = (
mib_li°_roŸnode
*)(
©_n
->
≈å
);

1206 
Àvñ
++;

1209 
dñ_˙t
 > 0)

1211 
dñ_˙t
--;

1213 
©_∫
 = 
dñ_∫
[
dñ_˙t
];

1214 
©_n
 = 
dñ_n
[
dñ_˙t
];

1216 
√xt
 = 
	`¢mp_mib_node_dñëe
(
©_∫
, 
©_n
);

1217 i‡(
√xt
 !
NULL
)

1219 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1220 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1225 if(
¨±ªe_roŸ
.
cou¡
 =0Ë
©
.
maxÀngth
 = 0;

1226 if(
ù¡omåì_roŸ
.
cou¡
 =0Ë
ù¡omèbÀ
.
maxÀngth
 = 0;

1227 
	}
}

1229 
	$¢mp_öc_ùöª˚ives
()

1231 
ùöª˚ives
++;

1232 
	}
}

1234 
	$¢mp_öc_ùöhdªº‹s
()

1236 
ùöhdªº‹s
++;

1237 
	}
}

1239 
	$¢mp_öc_ùöaddªº‹s
()

1241 
ùöaddªº‹s
++;

1242 
	}
}

1244 
	$¢mp_öc_ùf‹wd©agøms
()

1246 
ùf‹wd©agøms
++;

1247 
	}
}

1249 
	$¢mp_öc_ùöunknow≈rŸos
()

1251 
ùöunknow≈rŸos
++;

1252 
	}
}

1254 
	$¢mp_öc_ùödisˇrds
()

1256 
ùödisˇrds
++;

1257 
	}
}

1259 
	$¢mp_öc_ùödñivîs
()

1261 
ùödñivîs
++;

1262 
	}
}

1264 
	$¢mp_öc_ùouåeque°s
()

1266 
ùouåeque°s
++;

1267 
	}
}

1269 
	$¢mp_öc_ùoutdisˇrds
()

1271 
ùoutdisˇrds
++;

1272 
	}
}

1274 
	$¢mp_öc_ùouä‹ouãs
()

1276 
ùouä‹ouãs
++;

1277 
	}
}

1279 
	$¢mp_öc_ùªasmªqds
()

1281 
ùªasmªqds
++;

1282 
	}
}

1284 
	$¢mp_öc_ùªasmoks
()

1286 
ùªasmoks
++;

1287 
	}
}

1289 
	$¢mp_öc_ùªasmÁûs
()

1291 
ùªasmÁûs
++;

1292 
	}
}

1294 
	$¢mp_öc_ù‰agoks
()

1296 
ù‰agoks
++;

1297 
	}
}

1299 
	$¢mp_öc_ù‰agÁûs
()

1301 
ù‰agÁûs
++;

1302 
	}
}

1304 
	$¢mp_öc_ù‰ag¸óãs
()

1306 
ù‰ag¸óãs
++;

1307 
	}
}

1309 
	$¢mp_öc_ùroutögdisˇrds
()

1311 
ùroutögdisˇrds
++;

1312 
	}
}

1318 
	$¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
)

1320 
mib_li°_roŸnode
 *
ùa_∫
;

1321 
mib_li°_node
 *
ùa_node
;

1322 
ù_addr
 
ù
;

1323 
s32_t
 
ùaddridx
[4];

1324 
u8_t
 
Àvñ
;

1326 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1327 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1328 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1330 
Àvñ
 = 0;

1331 
ùa_∫
 = &
ùaddπªe_roŸ
;

1332 
Àvñ
 < 4)

1334 
ùa_node
 = 
NULL
;

1335 
	`¢mp_mib_node_ö£π
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_node
);

1336 i‡((
Àvñ
 !3Ë&& (
ùa_node
 !
NULL
))

1338 i‡(
ùa_node
->
≈å
 =
NULL
)

1340 
ùa_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1341 
ùa_node
->
≈å
 = (
mib_node
*)
ùa_∫
;

1342 i‡(
ùa_∫
 !
NULL
)

1344 i‡(
Àvñ
 == 2)

1346 
ùa_∫
->
gë_obje˘_def
 = 
ù_addª¡ry_gë_obje˘_def
;

1347 
ùa_∫
->
gë_vÆue
 = 
ù_addª¡ry_gë_vÆue
;

1348 
ùa_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1349 
ùa_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1355 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_ipaddridx_tree() insert failed, mem full"));

1361 
ùa_∫
 = (
mib_li°_roŸnode
*)
ùa_node
->
≈å
;

1364 
Àvñ
++;

1367 
ùaddπabÀ
.
maxÀngth
 = 1;

1368 
	}
}

1374 
	$¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
)

1376 
mib_li°_roŸnode
 *
ùa_∫
, *
√xt
, *
dñ_∫
[4];

1377 
mib_li°_node
 *
ùa_n
, *
dñ_n
[4];

1378 
ù_addr
 
ù
;

1379 
s32_t
 
ùaddridx
[4];

1380 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1382 
	`LWIP_ASSERT
("nò!NULL", 
ni
 !
NULL
);

1383 
ù
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.addr);

1384 
	`¢mp_ùtooid
(&
ù
, &
ùaddridx
[0]);

1387 
Àvñ
 = 0;

1388 
dñ_˙t
 = 0;

1389 
ùa_∫
 = &
ùaddπªe_roŸ
;

1390 (
Àvñ
 < 4Ë&& (
ùa_∫
 !
NULL
))

1392 
fc
 = 
	`¢mp_mib_node_föd
(
ùa_∫
, 
ùaddridx
[
Àvñ
], &
ùa_n
);

1393 i‡(
fc
 == 0)

1396 
dñ_˙t
 = 0;

1397 
ùa_∫
 = 
NULL
;

1399 i‡(
fc
 == 1)

1401 
dñ_∫
[
dñ_˙t
] = 
ùa_∫
;

1402 
dñ_n
[
dñ_˙t
] = 
ùa_n
;

1403 
dñ_˙t
++;

1404 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1406 i‡(
fc
 == 2)

1409 
dñ_˙t
 = 0;

1410 
ùa_∫
 = (
mib_li°_roŸnode
*)(
ùa_n
->
≈å
);

1412 
Àvñ
++;

1415 
dñ_˙t
 > 0)

1417 
dñ_˙t
--;

1419 
ùa_∫
 = 
dñ_∫
[
dñ_˙t
];

1420 
ùa_n
 = 
dñ_n
[
dñ_˙t
];

1422 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùa_∫
, 
ùa_n
);

1423 i‡(
√xt
 !
NULL
)

1425 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1426 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1430 i‡(
ùaddπªe_roŸ
.
cou¡
 =0Ë
ùaddπabÀ
.
maxÀngth
 = 0;

1431 
	}
}

1443 
	$¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1445 
u8_t
 
ö£π
 = 0;

1446 
ù_addr
 
d°
;

1448 i‡(
dÊt
 != 0)

1451 
d°
.
addr
 = 0;

1452 
ö£π
 = 1;

1457 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1459 i‡(
d°
.
addr
 !0Ë
ö£π
 = 1;

1461 i‡(
ö£π
)

1463 
mib_li°_roŸnode
 *
ùπe_∫
;

1464 
mib_li°_node
 *
ùπe_node
;

1465 
s32_t
 
ùπeidx
[4];

1466 
u8_t
 
Àvñ
;

1468 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1469 
Àvñ
 = 0;

1470 
ùπe_∫
 = &
ùπëªe_roŸ
;

1471 
Àvñ
 < 4)

1473 
ùπe_node
 = 
NULL
;

1474 
	`¢mp_mib_node_ö£π
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_node
);

1475 i‡((
Àvñ
 !3Ë&& (
ùπe_node
 !
NULL
))

1477 i‡(
ùπe_node
->
≈å
 =
NULL
)

1479 
ùπe_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1480 
ùπe_node
->
≈å
 = (
mib_node
*)
ùπe_∫
;

1481 i‡(
ùπe_∫
 !
NULL
)

1483 i‡(
Àvñ
 == 2)

1485 
ùπe_∫
->
gë_obje˘_def
 = 
ù_πì¡ry_gë_obje˘_def
;

1486 
ùπe_∫
->
gë_vÆue
 = 
ù_πì¡ry_gë_vÆue
;

1487 
ùπe_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1488 
ùπe_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1494 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_iprteidx_tree() insert failed, mem full"));

1500 
ùπe_∫
 = (
mib_li°_roŸnode
*)
ùπe_node
->
≈å
;

1503 
Àvñ
++;

1507 
ùπëabÀ
.
maxÀngth
 = 1;

1508 
	}
}

1518 
	$¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
)

1520 
u8_t
 
dñëe
 = 0;

1521 
ù_addr
 
d°
;

1523 i‡(
dÊt
 != 0)

1526 
d°
.
addr
 = 0;

1527 
dñëe
 = 1;

1532 
d°
.
addr
 = 
	`¡ohl
(
ni
->
ù_addr
.add∏&Çi->
√tmask
.addr);

1534 i‡(
d°
.
addr
 !0Ë
dñëe
 = 1;

1536 i‡(
dñëe
)

1538 
mib_li°_roŸnode
 *
ùπe_∫
, *
√xt
, *
dñ_∫
[4];

1539 
mib_li°_node
 *
ùπe_n
, *
dñ_n
[4];

1540 
s32_t
 
ùπeidx
[4];

1541 
u8_t
 
fc
, 
Àvñ
, 
dñ_˙t
;

1543 
	`¢mp_ùtooid
(&
d°
, &
ùπeidx
[0]);

1545 
Àvñ
 = 0;

1546 
dñ_˙t
 = 0;

1547 
ùπe_∫
 = &
ùπëªe_roŸ
;

1548 (
Àvñ
 < 4Ë&& (
ùπe_∫
 !
NULL
))

1550 
fc
 = 
	`¢mp_mib_node_föd
(
ùπe_∫
, 
ùπeidx
[
Àvñ
], &
ùπe_n
);

1551 i‡(
fc
 == 0)

1554 
dñ_˙t
 = 0;

1555 
ùπe_∫
 = 
NULL
;

1557 i‡(
fc
 == 1)

1559 
dñ_∫
[
dñ_˙t
] = 
ùπe_∫
;

1560 
dñ_n
[
dñ_˙t
] = 
ùπe_n
;

1561 
dñ_˙t
++;

1562 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1564 i‡(
fc
 == 2)

1567 
dñ_˙t
 = 0;

1568 
ùπe_∫
 = (
mib_li°_roŸnode
*)(
ùπe_n
->
≈å
);

1570 
Àvñ
++;

1573 
dñ_˙t
 > 0)

1575 
dñ_˙t
--;

1577 
ùπe_∫
 = 
dñ_∫
[
dñ_˙t
];

1578 
ùπe_n
 = 
dñ_n
[
dñ_˙t
];

1580 
√xt
 = 
	`¢mp_mib_node_dñëe
(
ùπe_∫
, 
ùπe_n
);

1581 i‡(
√xt
 !
NULL
)

1583 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1584 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1589 i‡(
ùπëªe_roŸ
.
cou¡
 =0Ë
ùπëabÀ
.
maxÀngth
 = 0;

1590 
	}
}

1593 
	$¢mp_öc_icmpömsgs
()

1595 
icmpömsgs
++;

1596 
	}
}

1598 
	$¢mp_öc_icmpöîr‹s
()

1600 
icmpöîr‹s
++;

1601 
	}
}

1603 
	$¢mp_öc_icmpöde°uƒóchs
()

1605 
icmpöde°uƒóchs
++;

1606 
	}
}

1608 
	$¢mp_öc_icmpötimìxcds
()

1610 
icmpötimìxcds
++;

1611 
	}
}

1613 
	$¢mp_öc_icmpö∑rm¥obs
()

1615 
icmpö∑rm¥obs
++;

1616 
	}
}

1618 
	$¢mp_öc_icmpö§cquíchs
()

1620 
icmpö§cquíchs
++;

1621 
	}
}

1623 
	$¢mp_öc_icmpöªdúe˘s
()

1625 
icmpöªdúe˘s
++;

1626 
	}
}

1628 
	$¢mp_öc_icmpöechos
()

1630 
icmpöechos
++;

1631 
	}
}

1633 
	$¢mp_öc_icmpöech‹ïs
()

1635 
icmpöech‹ïs
++;

1636 
	}
}

1638 
	$¢mp_öc_icmpötime°amps
()

1640 
icmpötime°amps
++;

1641 
	}
}

1643 
	$¢mp_öc_icmpötime°am¥ïs
()

1645 
icmpötime°am¥ïs
++;

1646 
	}
}

1648 
	$¢mp_öc_icmpöaddrmasks
()

1650 
icmpöaddrmasks
++;

1651 
	}
}

1653 
	$¢mp_öc_icmpöaddrmaskªps
()

1655 
icmpöaddrmaskªps
++;

1656 
	}
}

1658 
	$¢mp_öc_icmpoutmsgs
()

1660 
icmpoutmsgs
++;

1661 
	}
}

1663 
	$¢mp_öc_icmpouãº‹s
()

1665 
icmpouãº‹s
++;

1666 
	}
}

1668 
	$¢mp_öc_icmpoutde°uƒóchs
()

1670 
icmpoutde°uƒóchs
++;

1671 
	}
}

1673 
	$¢mp_öc_icmpouâimìxcds
()

1675 
icmpouâimìxcds
++;

1676 
	}
}

1678 
	$¢mp_öc_icmpouç¨m¥obs
()

1680 
icmpouç¨m¥obs
++;

1681 
	}
}

1683 
	$¢mp_öc_icmpout§cquíchs
()

1685 
icmpout§cquíchs
++;

1686 
	}
}

1688 
	$¢mp_öc_icmpouåedúe˘s
()

1690 
icmpouåedúe˘s
++;

1691 
	}
}

1693 
	$¢mp_öc_icmpouãchos
()

1695 
icmpouãchos
++;

1696 
	}
}

1698 
	$¢mp_öc_icmpouãch‹ïs
()

1700 
icmpouãch‹ïs
++;

1701 
	}
}

1703 
	$¢mp_öc_icmpouâime°amps
()

1705 
icmpouâime°amps
++;

1706 
	}
}

1708 
	$¢mp_öc_icmpouâime°am¥ïs
()

1710 
icmpouâime°am¥ïs
++;

1711 
	}
}

1713 
	$¢mp_öc_icmpouèddrmasks
()

1715 
icmpouèddrmasks
++;

1716 
	}
}

1718 
	$¢mp_öc_icmpouèddrmaskªps
()

1720 
icmpouèddrmaskªps
++;

1721 
	}
}

1723 
	$¢mp_öc_t˝a˘ive›ís
()

1725 
t˝a˘ive›ís
++;

1726 
	}
}

1728 
	$¢mp_öc_t˝∑ssive›ís
()

1730 
t˝∑ssive›ís
++;

1731 
	}
}

1733 
	$¢mp_öc_t˝©ãm±Áûs
()

1735 
t˝©ãm±Áûs
++;

1736 
	}
}

1738 
	$¢mp_öc_t˝e°abª£ts
()

1740 
t˝e°abª£ts
++;

1741 
	}
}

1743 
	$¢mp_öc_t˝ö£gs
()

1745 
t˝ö£gs
++;

1746 
	}
}

1748 
	$¢mp_öc_t˝out£gs
()

1750 
t˝out£gs
++;

1751 
	}
}

1753 
	$¢mp_öc_t˝ªå™s£gs
()

1755 
t˝ªå™s£gs
++;

1756 
	}
}

1758 
	$¢mp_öc_t˝öîrs
()

1760 
t˝öîrs
++;

1761 
	}
}

1763 
	$¢mp_öc_t˝ouå°s
()

1765 
t˝ouå°s
++;

1766 
	}
}

1768 
	$¢mp_öc_udpöd©agøms
()

1770 
udpöd©agøms
++;

1771 
	}
}

1773 
	$¢mp_öc_ud≤›‹ts
()

1775 
ud≤›‹ts
++;

1776 
	}
}

1778 
	$¢mp_öc_udpöîr‹s
()

1780 
udpöîr‹s
++;

1781 
	}
}

1783 
	$¢mp_öc_udpoutd©agøms
()

1785 
udpoutd©agøms
++;

1786 
	}
}

1792 
	$¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
)

1794 
mib_li°_roŸnode
 *
udp_∫
;

1795 
mib_li°_node
 *
udp_node
;

1796 
ù_addr
 
ù
;

1797 
s32_t
 
udpidx
[5];

1798 
u8_t
 
Àvñ
;

1800 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1801 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1802 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1803 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1805 
udp_∫
 = &
udp_roŸ
;

1806 
Àvñ
 = 0;Üevel < 5;Üevel++)

1808 
udp_node
 = 
NULL
;

1809 
	`¢mp_mib_node_ö£π
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_node
);

1810 i‡((
Àvñ
 !4Ë&& (
udp_node
 !
NULL
))

1812 i‡(
udp_node
->
≈å
 =
NULL
)

1814 
udp_∫
 = 
	`¢mp_mib_Ãn_Æloc
();

1815 
udp_node
->
≈å
 = (
mib_node
*)
udp_∫
;

1816 i‡(
udp_∫
 !
NULL
)

1818 i‡(
Àvñ
 == 3)

1820 
udp_∫
->
gë_obje˘_def
 = 
ud≥¡ry_gë_obje˘_def
;

1821 
udp_∫
->
gë_vÆue
 = 
ud≥¡ry_gë_vÆue
;

1822 
udp_∫
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

1823 
udp_∫
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

1829 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_insert_udpidx_tree() insert failed, mem full"));

1835 
udp_∫
 = (
mib_li°_roŸnode
*)
udp_node
->
≈å
;

1839 
ud±abÀ
.
maxÀngth
 = 1;

1840 
	}
}

1846 
	$¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
)

1848 
mib_li°_roŸnode
 *
udp_∫
, *
√xt
, *
dñ_∫
[5];

1849 
mib_li°_node
 *
udp_n
, *
dñ_n
[5];

1850 
ù_addr
 
ù
;

1851 
s32_t
 
udpidx
[5];

1852 
u8_t
 
bödögs
, 
fc
, 
Àvñ
, 
dñ_˙t
;

1854 
	`LWIP_ASSERT
("pcb !NULL", 
pcb
 !
NULL
);

1855 
ù
.
addr
 = 
	`¡ohl
(
pcb
->
loˇl_ù
.addr);

1856 
	`¢mp_ùtooid
(&
ù
, &
udpidx
[0]);

1857 
udpidx
[4] = 
pcb
->
loˇl_p‹t
;

1861 
bödögs
 = 0;

1862 
pcb
 = 
udp_pcbs
;

1863 (
pcb
 !
NULL
))

1865 i‡((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

1866 (
pcb
->
loˇl_p‹t
 =
udpidx
[4]))

1868 
bödögs
++;

1870 
pcb
 =Öcb->
√xt
;

1872 i‡(
bödögs
 == 1)

1876 
Àvñ
 = 0;

1877 
dñ_˙t
 = 0;

1878 
udp_∫
 = &
udp_roŸ
;

1879 (
Àvñ
 < 5Ë&& (
udp_∫
 !
NULL
))

1881 
fc
 = 
	`¢mp_mib_node_föd
(
udp_∫
, 
udpidx
[
Àvñ
], &
udp_n
);

1882 i‡(
fc
 == 0)

1885 
dñ_˙t
 = 0;

1886 
udp_∫
 = 
NULL
;

1888 i‡(
fc
 == 1)

1890 
dñ_∫
[
dñ_˙t
] = 
udp_∫
;

1891 
dñ_n
[
dñ_˙t
] = 
udp_n
;

1892 
dñ_˙t
++;

1893 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1895 i‡(
fc
 == 2)

1898 
dñ_˙t
 = 0;

1899 
udp_∫
 = (
mib_li°_roŸnode
*)(
udp_n
->
≈å
);

1901 
Àvñ
++;

1904 
dñ_˙t
 > 0)

1906 
dñ_˙t
--;

1908 
udp_∫
 = 
dñ_∫
[
dñ_˙t
];

1909 
udp_n
 = 
dñ_n
[
dñ_˙t
];

1911 
√xt
 = 
	`¢mp_mib_node_dñëe
(
udp_∫
, 
udp_n
);

1912 i‡(
√xt
 !
NULL
)

1914 
	`LWIP_ASSERT
("√xt_cou¡ =0",
√xt
->
cou¡
 == 0);

1915 
	`¢mp_mib_Ãn_‰ì
(
√xt
);

1920 i‡(
udp_roŸ
.
cou¡
 =0Ë
ud±abÀ
.
maxÀngth
 = 0;

1921 
	}
}

1924 
	$¢mp_öc_¢mpöpkts
()

1926 
¢mpöpkts
++;

1927 
	}
}

1929 
	$¢mp_öc_¢mpouçkts
()

1931 
¢mpouçkts
++;

1932 
	}
}

1934 
	$¢mp_öc_¢mpöbadvîsi⁄s
()

1936 
¢mpöbadvîsi⁄s
++;

1937 
	}
}

1939 
	$¢mp_öc_¢mpöbadcommunôy«mes
()

1941 
¢mpöbadcommunôy«mes
++;

1942 
	}
}

1944 
	$¢mp_öc_¢mpöbadcommunôyu£s
()

1946 
¢mpöbadcommunôyu£s
++;

1947 
	}
}

1949 
	$¢mp_öc_¢mpöa¢∑r£îrs
()

1951 
¢mpöa¢∑r£îrs
++;

1952 
	}
}

1954 
	$¢mp_öc_¢mpötoobigs
()

1956 
¢mpötoobigs
++;

1957 
	}
}

1959 
	$¢mp_öc_¢mpönosuch«mes
()

1961 
¢mpönosuch«mes
++;

1962 
	}
}

1964 
	$¢mp_öc_¢mpöbadvÆues
()

1966 
¢mpöbadvÆues
++;

1967 
	}
}

1969 
	$¢mp_öc_¢mpöªad⁄lys
()

1971 
¢mpöªad⁄lys
++;

1972 
	}
}

1974 
	$¢mp_öc_¢mpögíîrs
()

1976 
¢mpögíîrs
++;

1977 
	}
}

1979 
	$¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
)

1981 
¢mpötŸÆªqv¨s
 +
vÆue
;

1982 
	}
}

1984 
	$¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
)

1986 
¢mpötŸÆ£tv¨s
 +
vÆue
;

1987 
	}
}

1989 
	$¢mp_öc_¢mpögëªque°s
()

1991 
¢mpögëªque°s
++;

1992 
	}
}

1994 
	$¢mp_öc_¢mpögë√xts
()

1996 
¢mpögë√xts
++;

1997 
	}
}

1999 
	$¢mp_öc_¢mpö£åeque°s
()

2001 
¢mpö£åeque°s
++;

2002 
	}
}

2004 
	$¢mp_öc_¢mpögëª•⁄£s
()

2006 
¢mpögëª•⁄£s
++;

2007 
	}
}

2009 
	$¢mp_öc_¢mpöå≠s
()

2011 
¢mpöå≠s
++;

2012 
	}
}

2014 
	$¢mp_öc_¢mpouâoobigs
()

2016 
¢mpouâoobigs
++;

2017 
	}
}

2019 
	$¢mp_öc_¢mpouäosuch«mes
()

2021 
¢mpouäosuch«mes
++;

2022 
	}
}

2024 
	$¢mp_öc_¢mpoutbadvÆues
()

2026 
¢mpoutbadvÆues
++;

2027 
	}
}

2029 
	$¢mp_öc_¢mpoutgíîrs
()

2031 
¢mpoutgíîrs
++;

2032 
	}
}

2034 
	$¢mp_öc_¢mpoutgëªque°s
()

2036 
¢mpoutgëªque°s
++;

2037 
	}
}

2039 
	$¢mp_öc_¢mpoutgë√xts
()

2041 
¢mpoutgë√xts
++;

2042 
	}
}

2044 
	$¢mp_öc_¢mpout£åeque°s
()

2046 
¢mpout£åeque°s
++;

2047 
	}
}

2049 
	$¢mp_öc_¢mpoutgëª•⁄£s
()

2051 
¢mpoutgëª•⁄£s
++;

2052 
	}
}

2054 
	$¢mp_öc_¢mpouâøps
()

2056 
¢mpouâøps
++;

2057 
	}
}

2059 
	$¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
)

2061 *
oid
 = &
¢mpgΩ_id
;

2062 
	}
}

2064 
	$¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2066 i‡(
vÆue
 !
NULL
)

2068 
¢m≥«bÀauthíå≠s_±r
 = 
vÆue
;

2070 
	}
}

2072 
	$¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
)

2074 *
vÆue
 = *
¢m≥«bÀauthíå≠s_±r
;

2075 
	}
}

2078 
	$nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2080 i‡(
idít_Àn
){}

2081 i‡(
idít
){}

2082 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2083 
	}
}

2086 
	$nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2088 i‡(
od
){}

2089 i‡(
Àn
){}

2090 i‡(
vÆue
){}

2091 
	}
}

2093 
u8_t


2094 
	$nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2096 i‡(
od
){}

2097 i‡(
Àn
){}

2098 i‡(
vÆue
){}

2101 
	}
}

2104 
	$nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2106 i‡(
od
){}

2107 i‡(
Àn
){}

2108 i‡(
vÆue
){}

2109 
	}
}

2120 
	$sy°em_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2122 
u8_t
 
id
;

2125 
idít_Àn
 += 1;

2126 
idít
 -= 1;

2127 i‡(
idít_Àn
 == 2)

2129 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2130 
od
->
id_ö°_±r
 = 
idít
;

2132 
id
 = 
idít
[0];

2133 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡sy°em.%"
U16_F
".0\n",(
u16_t
)
id
));

2134 
id
)

2137 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2138 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2139 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2140 
od
->
v_Àn
 = *
sysdes¸_Àn_±r
;

2143 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2144 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2145 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2146 
od
->
v_Àn
 = 
sysobjid
.
Àn
 * (
s32_t
);

2149 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2150 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2151 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2152 
od
->
v_Àn
 = (
u32_t
);

2155 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2156 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2157 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2158 
od
->
v_Àn
 = *
sysc⁄è˘_Àn_±r
;

2161 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2162 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2163 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2164 
od
->
v_Àn
 = *
sy¢ame_Àn_±r
;

2167 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2168 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2169 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2170 
od
->
v_Àn
 = *
sy¶oˇti⁄_Àn_±r
;

2173 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2174 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2175 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2176 
od
->
v_Àn
 = (
s32_t
);

2179 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço such object\n"));

2180 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2186 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("system_get_object_def:Ço scalar\n"));

2187 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2189 
	}
}

2200 
	$sy°em_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2202 
u8_t
 
id
;

2204 
id
 = 
od
->
id_ö°_±r
[0];

2205 
id
)

2208 
	`oc°∫˝y
(
vÆue
,
sysdes¸_±r
,
Àn
);

2211 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
sysobjid
.
id
,
Àn
 / (s32_t));

2215 
	`¢mp_gë_sysu±ime
(
vÆue
);

2219 
	`oc°∫˝y
(
vÆue
,
sysc⁄è˘_±r
,
Àn
);

2222 
	`oc°∫˝y
(
vÆue
,
sy¢ame_±r
,
Àn
);

2225 
	`oc°∫˝y
(
vÆue
,
sy¶oˇti⁄_±r
,
Àn
);

2229 
s32_t
 *
söt_±r
 = 
vÆue
;

2230 *
söt_±r
 = 
sys£rvi˚s
;

2234 
	}
}

2236 
u8_t


2237 
	$sy°em_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2239 
u8_t
 
id
, 
£t_ok
;

2241 i‡(
vÆue
) {}

2242 
£t_ok
 = 0;

2243 
id
 = 
od
->
id_ö°_±r
[0];

2244 
id
)

2247 i‡((
sysc⁄è˘_±r
 !
sysc⁄è˘_deÁu…
) &&

2248 (
Àn
 <= 255))

2250 
£t_ok
 = 1;

2254 i‡((
sy¢ame_±r
 !
sy¢ame_deÁu…
) &&

2255 (
Àn
 <= 255))

2257 
£t_ok
 = 1;

2261 i‡((
sy¶oˇti⁄_±r
 !
sy¶oˇti⁄_deÁu…
) &&

2262 (
Àn
 <= 255))

2264 
£t_ok
 = 1;

2268  
£t_ok
;

2269 
	}
}

2272 
	$sy°em_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2274 
u8_t
 
id
;

2276 
id
 = 
od
->
id_ö°_±r
[0];

2277 
id
)

2280 
	`oc°∫˝y
(
sysc⁄è˘_±r
,
vÆue
,
Àn
);

2281 *
sysc⁄è˘_Àn_±r
 = 
Àn
;

2284 
	`oc°∫˝y
(
sy¢ame_±r
,
vÆue
,
Àn
);

2285 *
sy¢ame_Àn_±r
 = 
Àn
;

2288 
	`oc°∫˝y
(
sy¶oˇti⁄_±r
,
vÆue
,
Àn
);

2289 *
sy¶oˇti⁄_Àn_±r
 = 
Àn
;

2292 
	}
}

2302 
	$öãrÁ˚s_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2305 
idít_Àn
 += 1;

2306 
idít
 -= 1;

2307 i‡(
idít_Àn
 == 2)

2309 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2310 
od
->
id_ö°_±r
 = 
idít
;

2312 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2313 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2314 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2315 
od
->
v_Àn
 = (
s32_t
);

2319 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("interfaces_get_object_def:Ço scalar\n"));

2320 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2322 
	}
}

2333 
	$öãrÁ˚s_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2335 i‡(
Àn
){}

2336 i‡(
od
->
id_ö°_±r
[0] == 1)

2338 
s32_t
 *
söt_±r
 = 
vÆue
;

2339 *
söt_±r
 = 
iÊi°_roŸ
.
cou¡
;

2341 
	}
}

2351 
	$i„¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2353 
u8_t
 
id
;

2356 
idít_Àn
 += 1;

2357 
idít
 -= 1;

2358 i‡(
idít_Àn
 == 2)

2360 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2361 
od
->
id_ö°_±r
 = 
idít
;

2363 
id
 = 
idít
[0];

2364 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡i„¡ry.%"
U16_F
"\n",(
u16_t
)
id
));

2365 
id
)

2371 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2372 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2373 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2374 
od
->
v_Àn
 = (
s32_t
);

2377 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2378 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2379 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2381 
od
->
v_Àn
 = 2;

2385 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2386 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2387 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

2388 
od
->
v_Àn
 = (
u32_t
);

2392 
√tif
 *netif;

2394 
	`¢mp_ifödext⁄ëif
(
idít
[1], &
√tif
);

2395 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2396 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2397 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2398 
od
->
v_Àn
 = 
√tif
->
hwaddr_Àn
;

2402 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2403 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2404 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2405 
od
->
v_Àn
 = (
s32_t
);

2408 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2409 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2410 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
);

2411 
od
->
v_Àn
 = (
u32_t
);

2424 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2425 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2426 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2427 
od
->
v_Àn
 = (
u32_t
);

2431 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2432 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2433 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

2434 
od
->
v_Àn
 = 
if•ecific
.
Àn
 * (
s32_t
);

2437 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço such object\n"));

2438 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2444 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ifentry_get_object_def:Ço scalar\n"));

2445 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2447 
	}
}

2458 
	$i„¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2460 
√tif
 *netif;

2461 
u8_t
 
id
;

2463 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2464 
id
 = 
od
->
id_ö°_±r
[0];

2465 
id
)

2469 
s32_t
 *
söt_±r
 = 
vÆue
;

2470 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2474 
	`oc°∫˝y
(
vÆue
,(
u8_t
*)
√tif
->
«me
,
Àn
);

2478 
s32_t
 *
söt_±r
 = 
vÆue
;

2479 *
söt_±r
 = 
√tif
->
lök_ty≥
;

2484 
s32_t
 *
söt_±r
 = 
vÆue
;

2485 *
söt_±r
 = 
√tif
->
mtu
;

2490 
u32_t
 *
uöt_±r
 = 
vÆue
;

2491 *
uöt_±r
 = 
√tif
->
lök_•ìd
;

2495 
	`oc°∫˝y
(
vÆue
,
√tif
->
hwaddr
,
Àn
);

2498 #i‡
LWIP_NETIF_LINK_CALLBACK


2500 
s32_t
 *
söt_±r
 = 
vÆue
;

2501 i‡(
	`√tif_is_up
(
√tif
))

2503 i‡(
	`√tif_is_lök_up
(
√tif
))

2505 *
söt_±r
 = 1;

2509 *
söt_±r
 = 7;

2514 *
söt_±r
 = 2;

2521 
s32_t
 *
söt_±r
 = 
vÆue
;

2522 i‡(
	`√tif_is_up
(
√tif
))

2524 *
söt_±r
 = 1;

2528 *
söt_±r
 = 2;

2534 
u32_t
 *
uöt_±r
 = 
vÆue
;

2535 *
uöt_±r
 = 
√tif
->
ts
;

2540 
u32_t
 *
uöt_±r
 = 
vÆue
;

2541 *
uöt_±r
 = 
√tif
->
iföo˘ës
;

2546 
u32_t
 *
uöt_±r
 = 
vÆue
;

2547 *
uöt_±r
 = 
√tif
->
iföuˇ°pkts
;

2552 
u32_t
 *
uöt_±r
 = 
vÆue
;

2553 *
uöt_±r
 = 
√tif
->
ifönuˇ°pkts
;

2558 
u32_t
 *
uöt_±r
 = 
vÆue
;

2559 *
uöt_±r
 = 
√tif
->
ifödisˇrds
;

2566 
u32_t
 *
uöt_±r
 = 
vÆue
;

2567 *
uöt_±r
 = 0;

2572 
u32_t
 *
uöt_±r
 = 
vÆue
;

2573 *
uöt_±r
 = 
√tif
->
ifouto˘ës
;

2578 
u32_t
 *
uöt_±r
 = 
vÆue
;

2579 *
uöt_±r
 = 
√tif
->
ifoutuˇ°pkts
;

2584 
u32_t
 *
uöt_±r
 = 
vÆue
;

2585 *
uöt_±r
 = 
√tif
->
ifouäuˇ°pkts
;

2590 
u32_t
 *
uöt_±r
 = 
vÆue
;

2591 *
uöt_±r
 = 
√tif
->
ifoutdisˇrds
;

2597 
u32_t
 *
uöt_±r
 = 
vÆue
;

2598 *
uöt_±r
 = 0;

2604 
u32_t
 *
uöt_±r
 = 
vÆue
;

2605 *
uöt_±r
 = 0;

2609 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
if•ecific
.
id
,
Àn
 / (s32_t));

2612 
	}
}

2614 #i‡!
SNMP_SAFE_REQUESTS


2615 
u8_t


2616 
	$i„¡ry_£t_ã°
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2618 
√tif
 *netif;

2619 
u8_t
 
id
, 
£t_ok
;

2621 
£t_ok
 = 0;

2622 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2623 
id
 = 
od
->
id_ö°_±r
[0];

2624 
id
)

2628 
s32_t
 *
söt_±r
 = 
vÆue
;

2629 i‡(*
söt_±r
 == 1 || *sint_ptr == 2)

2630 
£t_ok
 = 1;

2634  
£t_ok
;

2635 
	}
}

2638 
	$i„¡ry_£t_vÆue
 (
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2640 
√tif
 *netif;

2641 
u8_t
 
id
;

2643 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2644 
id
 = 
od
->
id_ö°_±r
[0];

2645 
id
)

2649 
s32_t
 *
söt_±r
 = 
vÆue
;

2650 i‡(*
söt_±r
 == 1)

2652 
	`√tif_£t_up
(
√tif
);

2654 i‡(*
söt_±r
 == 2)

2656 
	`√tif_£t_down
(
√tif
);

2661 
	}
}

2672 
	$©íåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2675 
idít_Àn
 += 5;

2676 
idít
 -= 5;

2678 i‡(
idít_Àn
 == 6)

2680 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2681 
od
->
id_ö°_±r
 = 
idít
;

2683 
idít
[0])

2686 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2687 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2688 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2689 
od
->
v_Àn
 = (
s32_t
);

2692 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2693 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2694 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

2695 
od
->
v_Àn
 = 6;

2698 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

2699 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2700 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

2701 
od
->
v_Àn
 = 4;

2704 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço such object\n"));

2705 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2711 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("atentry_get_object_def:Ço scalar\n"));

2712 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2714 
	}
}

2717 
	$©íåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2719 #i‡
LWIP_ARP


2720 
u8_t
 
id
;

2721 
ëh_addr
* 
ëhaddr_ªt
;

2722 
ù_addr
* 
ùaddr_ªt
;

2724 
ù_addr
 
ù
;

2725 
√tif
 *netif;

2727 i‡(
Àn
) {}

2729 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

2730 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

2731 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

2733 #i‡
LWIP_ARP


2734 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

2736 
id
 = 
od
->
id_ö°_±r
[0];

2737 
id
)

2741 
s32_t
 *
söt_±r
 = 
vÆue
;

2742 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

2747 
ëh_addr
 *
d°
 = 
vÆue
;

2749 *
d°
 = *
ëhaddr_ªt
;

2754 
ù_addr
 *
d°
 = 
vÆue
;

2756 *
d°
 = *
ùaddr_ªt
;

2762 
	}
}

2765 
	$ù_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

2767 
u8_t
 
id
;

2770 
idít_Àn
 += 1;

2771 
idít
 -= 1;

2772 i‡(
idít_Àn
 == 2)

2774 
od
->
id_ö°_Àn
 = 
idít_Àn
;

2775 
od
->
id_ö°_±r
 = 
idít
;

2777 
id
 = 
idít
[0];

2778 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡ù.%"
U16_F
".0\n",(
u16_t
)
id
));

2779 
id
)

2783 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2784 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

2785 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2786 
od
->
v_Àn
 = (
s32_t
);

2805 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2806 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2807 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

2808 
od
->
v_Àn
 = (
u32_t
);

2811 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

2812 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

2813 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

2814 
od
->
v_Àn
 = (
s32_t
);

2817 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço such object\n"));

2818 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2824 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_get_object_def:Ço scalar\n"));

2825 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

2827 
	}
}

2830 
	$ù_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2832 
u8_t
 
id
;

2834 i‡(
Àn
) {}

2835 
id
 = 
od
->
id_ö°_±r
[0];

2836 
id
)

2840 
s32_t
 *
söt_±r
 = 
vÆue
;

2841 #i‡
IP_FORWARD


2843 *
söt_±r
 = 1;

2846 *
söt_±r
 = 2;

2852 
s32_t
 *
söt_±r
 = 
vÆue
;

2853 *
söt_±r
 = 
IP_DEFAULT_TTL
;

2858 
u32_t
 *
uöt_±r
 = 
vÆue
;

2859 *
uöt_±r
 = 
ùöª˚ives
;

2864 
u32_t
 *
uöt_±r
 = 
vÆue
;

2865 *
uöt_±r
 = 
ùöhdªº‹s
;

2870 
u32_t
 *
uöt_±r
 = 
vÆue
;

2871 *
uöt_±r
 = 
ùöaddªº‹s
;

2876 
u32_t
 *
uöt_±r
 = 
vÆue
;

2877 *
uöt_±r
 = 
ùf‹wd©agøms
;

2882 
u32_t
 *
uöt_±r
 = 
vÆue
;

2883 *
uöt_±r
 = 
ùöunknow≈rŸos
;

2888 
u32_t
 *
uöt_±r
 = 
vÆue
;

2889 *
uöt_±r
 = 
ùödisˇrds
;

2894 
u32_t
 *
uöt_±r
 = 
vÆue
;

2895 *
uöt_±r
 = 
ùödñivîs
;

2900 
u32_t
 *
uöt_±r
 = 
vÆue
;

2901 *
uöt_±r
 = 
ùouåeque°s
;

2906 
u32_t
 *
uöt_±r
 = 
vÆue
;

2907 *
uöt_±r
 = 
ùoutdisˇrds
;

2912 
u32_t
 *
uöt_±r
 = 
vÆue
;

2913 *
uöt_±r
 = 
ùouä‹ouãs
;

2918 
s32_t
 *
söt_±r
 = 
vÆue
;

2919 #i‡
IP_REASSEMBLY


2920 *
söt_±r
 = 
IP_REASS_MAXAGE
;

2922 *
söt_±r
 = 0;

2928 
u32_t
 *
uöt_±r
 = 
vÆue
;

2929 *
uöt_±r
 = 
ùªasmªqds
;

2934 
u32_t
 *
uöt_±r
 = 
vÆue
;

2935 *
uöt_±r
 = 
ùªasmoks
;

2940 
u32_t
 *
uöt_±r
 = 
vÆue
;

2941 *
uöt_±r
 = 
ùªasmÁûs
;

2946 
u32_t
 *
uöt_±r
 = 
vÆue
;

2947 *
uöt_±r
 = 
ù‰agoks
;

2952 
u32_t
 *
uöt_±r
 = 
vÆue
;

2953 *
uöt_±r
 = 
ù‰agÁûs
;

2958 
u32_t
 *
uöt_±r
 = 
vÆue
;

2959 *
uöt_±r
 = 
ù‰ag¸óãs
;

2965 
u32_t
 *
uöt_±r
 = 
vÆue
;

2966 *
uöt_±r
 = 
ùroutögdisˇrds
;

2970 
	}
}

2982 
u8_t


2983 
	$ù_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

2985 
u8_t
 
id
, 
£t_ok
;

2986 
s32_t
 *
söt_±r
 = 
vÆue
;

2988 i‡(
Àn
) {}

2989 
£t_ok
 = 0;

2990 
id
 = 
od
->
id_ö°_±r
[0];

2991 
id
)

2994 #i‡
IP_FORWARD


2996 i‡(*
söt_±r
 == 1)

2999 i‡(*
söt_±r
 == 2)

3002 
£t_ok
 = 1;

3006 i‡(*
söt_±r
 =
IP_DEFAULT_TTL
)

3008 
£t_ok
 = 1;

3012  
£t_ok
;

3013 
	}
}

3016 
	$ù_addª¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3019 
idít_Àn
 += 4;

3020 
idít
 -= 4;

3022 i‡(
idít_Àn
 == 5)

3024 
u8_t
 
id
;

3026 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3027 
od
->
id_ö°_±r
 = 
idít
;

3029 
id
 = 
idít
[0];

3030 
id
)

3034 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3035 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3036 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3037 
od
->
v_Àn
 = 4;

3042 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3043 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3044 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3045 
od
->
v_Àn
 = (
s32_t
);

3048 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço such object\n"));

3049 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3055 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_addrentry_get_object_def:Ço scalar\n"));

3056 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3058 
	}
}

3061 
	$ù_addª¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3063 
u8_t
 
id
;

3064 
u16_t
 
ifidx
;

3065 
ù_addr
 
ù
;

3066 
√tif
 *√ti‡
√tif_li°
;

3068 i‡(
Àn
) {}

3069 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3070 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3071 
ifidx
 = 0;

3072 (
√tif
 !
NULL
Ë&& !
	`ù_addr_cmp
(&
ù
, &√tif->
ù_addr
))

3074 
√tif
 =Çëif->
√xt
;

3075 
ifidx
++;

3078 i‡(
√tif
 !
NULL
)

3080 
id
 = 
od
->
id_ö°_±r
[0];

3081 
id
)

3085 
ù_addr
 *
d°
 = 
vÆue
;

3086 *
d°
 = 
√tif
->
ù_addr
;

3091 
s32_t
 *
söt_±r
 = 
vÆue
;

3092 *
söt_±r
 = 
ifidx
 + 1;

3097 
ù_addr
 *
d°
 = 
vÆue
;

3098 *
d°
 = 
√tif
->
√tmask
;

3103 
s32_t
 *
söt_±r
 = 
vÆue
;

3107 *
söt_±r
 = 
ù_addr_brﬂdˇ°
.
addr
 & 1;

3112 
s32_t
 *
söt_±r
 = 
vÆue
;

3113 #i‡
IP_REASSEMBLY


3118 *
söt_±r
 = (
IP_HLEN
 + ((
IP_REASS_MAX_PBUFS
/2) *

3119 (
PBUF_POOL_BUFSIZE
 - 
PBUF_LINK_HLEN
 - 
IP_HLEN
)));

3123 *
söt_±r
 = 0;

3129 
	}
}

3137 
	$ù_πì¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3139 
u8_t
 
id
;

3142 
idít_Àn
 += 4;

3143 
idít
 -= 4;

3145 i‡(
idít_Àn
 == 5)

3147 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3148 
od
->
id_ö°_±r
 = 
idít
;

3150 
id
 = 
idít
[0];

3151 
id
)

3156 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3157 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3158 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3159 
od
->
v_Àn
 = 4;

3169 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3170 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3171 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3172 
od
->
v_Àn
 = (
s32_t
);

3175 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3176 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3177 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3178 
od
->
v_Àn
 = (
s32_t
);

3182 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3183 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3184 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
);

3185 
od
->
v_Àn
 = 
ùrouãöfo
.
Àn
 * (
s32_t
);

3188 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço such object\n"));

3189 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3195 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_rteentry_get_object_def:Ço scalar\n"));

3196 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3198 
	}
}

3201 
	$ù_πì¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3203 
√tif
 *netif;

3204 
ù_addr
 
de°
;

3205 
s32_t
 *
idít
;

3206 
u8_t
 
id
;

3208 
idít
 = 
od
->
id_ö°_±r
;

3209 
	`¢mp_oidtoù
(&
idít
[1], &
de°
);

3210 
de°
.
addr
 = 
	`ht⁄l
(dest.addr);

3212 i‡(
de°
.
addr
 == 0)

3215 
√tif
 = 
√tif_deÁu…
;

3220 
√tif
 = 
√tif_li°
;

3221 (
√tif
 !
NULL
) &&

3222 !
	`ù_addr_√tcmp
(&
de°
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
)) )

3224 
√tif
 =Çëif->
√xt
;

3227 i‡(
√tif
 !
NULL
)

3229 
id
 = 
idít
[0];

3230 
id
)

3234 
ù_addr
 *
d°
 = 
vÆue
;

3236 i‡(
de°
.
addr
 == 0)

3239 
d°
->
addr
 = 0;

3244 
d°
->
addr
 = 
√tif
->
ù_addr
.add∏&Çëif->
√tmask
.addr;

3250 
s32_t
 *
söt_±r
 = 
vÆue
;

3252 
	`¢mp_√ti·oifödex
(
√tif
, 
söt_±r
);

3257 
s32_t
 *
söt_±r
 = 
vÆue
;

3259 i‡(
de°
.
addr
 == 0)

3262 *
söt_±r
 = 1;

3267 *
söt_±r
 = 0;

3276 
s32_t
 *
söt_±r
 = 
vÆue
;

3278 *
söt_±r
 = -1;

3283 
ù_addr
 *
d°
 = 
vÆue
;

3285 i‡(
de°
.
addr
 == 0)

3288 *
d°
 = 
√tif
->
gw
;

3293 *
d°
 = 
√tif
->
ù_addr
;

3299 
s32_t
 *
söt_±r
 = 
vÆue
;

3301 i‡(
de°
.
addr
 == 0)

3304 *
söt_±r
 = 4;

3309 *
söt_±r
 = 3;

3315 
s32_t
 *
söt_±r
 = 
vÆue
;

3317 *
söt_±r
 = 2;

3322 
s32_t
 *
söt_±r
 = 
vÆue
;

3325 *
söt_±r
 = 0;

3330 
ù_addr
 *
d°
 = 
vÆue
;

3332 i‡(
de°
.
addr
 == 0)

3335 
d°
->
addr
 = 0;

3340 *
d°
 = 
√tif
->
√tmask
;

3345 
	`obje˘idn˝y
((
s32_t
*)
vÆue
,(s32_t*)
ùrouãöfo
.
id
,
Àn
 / (s32_t));

3349 
	}
}

3352 
	$ù_¡omíåy_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3355 
idít_Àn
 += 5;

3356 
idít
 -= 5;

3358 i‡(
idít_Àn
 == 6)

3360 
u8_t
 
id
;

3362 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3363 
od
->
id_ö°_±r
 = 
idít
;

3365 
id
 = 
idít
[0];

3366 
id
)

3370 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3371 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3372 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3373 
od
->
v_Àn
 = (
s32_t
);

3376 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3377 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3378 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
);

3379 
od
->
v_Àn
 = 6;

3382 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3383 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3384 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3385 
od
->
v_Àn
 = 4;

3388 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço such object\n"));

3389 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3395 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ip_ntomentry_get_object_def:Ço scalar\n"));

3396 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3398 
	}
}

3401 
	$ù_¡omíåy_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3403 #i‡
LWIP_ARP


3404 
u8_t
 
id
;

3405 
ëh_addr
* 
ëhaddr_ªt
;

3406 
ù_addr
* 
ùaddr_ªt
;

3408 
ù_addr
 
ù
;

3409 
√tif
 *netif;

3411 i‡(
Àn
) {}

3413 
	`¢mp_ifödext⁄ëif
(
od
->
id_ö°_±r
[1], &
√tif
);

3414 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[2], &
ù
);

3415 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3417 #i‡
LWIP_ARP


3418 i‡(
	`ëh¨p_föd_addr
(
√tif
, &
ù
, &
ëhaddr_ªt
, &
ùaddr_ªt
) > -1)

3420 
id
 = 
od
->
id_ö°_±r
[0];

3421 
id
)

3425 
s32_t
 *
söt_±r
 = 
vÆue
;

3426 *
söt_±r
 = 
od
->
id_ö°_±r
[1];

3431 
ëh_addr
 *
d°
 = 
vÆue
;

3433 *
d°
 = *
ëhaddr_ªt
;

3438 
ù_addr
 *
d°
 = 
vÆue
;

3440 *
d°
 = *
ùaddr_ªt
;

3445 
s32_t
 *
söt_±r
 = 
vÆue
;

3447 *
söt_±r
 = 3;

3453 
	}
}

3456 
	$icmp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3459 
idít_Àn
 += 1;

3460 
idít
 -= 1;

3461 i‡((
idít_Àn
 == 2) &&

3462 (
idít
[0] > 0) && (ident[0] < 27))

3464 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3465 
od
->
id_ö°_±r
 = 
idít
;

3467 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3468 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3469 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3470 
od
->
v_Àn
 = (
u32_t
);

3474 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("icmp_get_object_def:Ço scalar\n"));

3475 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3477 
	}
}

3480 
	$icmp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3482 
u32_t
 *
uöt_±r
 = 
vÆue
;

3483 
u8_t
 
id
;

3485 i‡(
Àn
){}

3486 
id
 = 
od
->
id_ö°_±r
[0];

3487 
id
)

3490 *
uöt_±r
 = 
icmpömsgs
;

3493 *
uöt_±r
 = 
icmpöîr‹s
;

3496 *
uöt_±r
 = 
icmpöde°uƒóchs
;

3499 *
uöt_±r
 = 
icmpötimìxcds
;

3502 *
uöt_±r
 = 
icmpö∑rm¥obs
;

3505 *
uöt_±r
 = 
icmpö§cquíchs
;

3508 *
uöt_±r
 = 
icmpöªdúe˘s
;

3511 *
uöt_±r
 = 
icmpöechos
;

3514 *
uöt_±r
 = 
icmpöech‹ïs
;

3517 *
uöt_±r
 = 
icmpötime°amps
;

3520 *
uöt_±r
 = 
icmpötime°am¥ïs
;

3523 *
uöt_±r
 = 
icmpöaddrmasks
;

3526 *
uöt_±r
 = 
icmpöaddrmaskªps
;

3529 *
uöt_±r
 = 
icmpoutmsgs
;

3532 *
uöt_±r
 = 
icmpouãº‹s
;

3535 *
uöt_±r
 = 
icmpoutde°uƒóchs
;

3538 *
uöt_±r
 = 
icmpouâimìxcds
;

3541 *
uöt_±r
 = 
icmpouç¨m¥obs
;

3544 *
uöt_±r
 = 
icmpout§cquíchs
;

3547 *
uöt_±r
 = 
icmpouåedúe˘s
;

3550 *
uöt_±r
 = 
icmpouãchos
;

3553 *
uöt_±r
 = 
icmpouãch‹ïs
;

3556 *
uöt_±r
 = 
icmpouâime°amps
;

3559 *
uöt_±r
 = 
icmpouâime°am¥ïs
;

3562 *
uöt_±r
 = 
icmpouèddrmasks
;

3565 *
uöt_±r
 = 
icmpouèddrmaskªps
;

3568 
	}
}

3570 #i‡
LWIP_TCP


3573 
	$t˝_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3575 
u8_t
 
id
;

3578 
idít_Àn
 += 1;

3579 
idít
 -= 1;

3580 i‡(
idít_Àn
 == 2)

3582 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3583 
od
->
id_ö°_±r
 = 
idít
;

3585 
id
 = 
idít
[0];

3586 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3588 
id
)

3594 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3595 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3596 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3597 
od
->
v_Àn
 = (
s32_t
);

3608 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3609 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3610 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3611 
od
->
v_Àn
 = (
u32_t
);

3614 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3615 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3616 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
);

3617 
od
->
v_Àn
 = (
u32_t
);

3620 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço such object\n"));

3621 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3627 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcp_get_object_def:Ço scalar\n"));

3628 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3630 
	}
}

3633 
	$t˝_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3635 
u32_t
 *
uöt_±r
 = 
vÆue
;

3636 
s32_t
 *
söt_±r
 = 
vÆue
;

3637 
u8_t
 
id
;

3639 i‡(
Àn
){}

3640 
id
 = 
od
->
id_ö°_±r
[0];

3641 
id
)

3644 *
söt_±r
 = 4;

3649 *
söt_±r
 = 1000;

3654 *
söt_±r
 = 60000;

3657 *
söt_±r
 = 
MEMP_NUM_TCP_PCB
;

3660 *
uöt_±r
 = 
t˝a˘ive›ís
;

3663 *
uöt_±r
 = 
t˝∑ssive›ís
;

3666 *
uöt_±r
 = 
t˝©ãm±Áûs
;

3669 *
uöt_±r
 = 
t˝e°abª£ts
;

3673 
u16_t
 
t˝cuºe°ab
 = 0;

3674 
t˝_pcb
 *
pcb
 = 
t˝_a˘ive_pcbs
;

3675 
pcb
 !
NULL
)

3677 i‡((
pcb
->
°©e
 =
ESTABLISHED
) ||

3678 (
pcb
->
°©e
 =
CLOSE_WAIT
))

3680 
t˝cuºe°ab
++;

3682 
pcb
 =Öcb->
√xt
;

3684 *
uöt_±r
 = 
t˝cuºe°ab
;

3688 *
uöt_±r
 = 
t˝ö£gs
;

3691 *
uöt_±r
 = 
t˝out£gs
;

3694 *
uöt_±r
 = 
t˝ªå™s£gs
;

3697 *
uöt_±r
 = 
t˝öîrs
;

3700 *
uöt_±r
 = 
t˝ouå°s
;

3703 
	}
}

3704 #ifde‡
THIS_SEEMS_UNUSED


3706 
	$t˝c⁄√¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3709 
idít_Àn
 += 10;

3710 
idít
 -= 10;

3712 i‡(
idít_Àn
 == 11)

3714 
u8_t
 
id
;

3716 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3717 
od
->
id_ö°_±r
 = 
idít
;

3719 
id
 = 
idít
[0];

3720 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("gë_obje˘_de‡t˝.%"
U16_F
".0\n",(
u16_t
)
id
));

3722 
id
)

3725 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3726 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3727 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3728 
od
->
v_Àn
 = (
s32_t
);

3732 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3733 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3734 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3735 
od
->
v_Àn
 = 4;

3739 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3740 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3741 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3742 
od
->
v_Àn
 = (
s32_t
);

3745 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3746 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3752 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("tcpconnentry_get_object_def:Ço such object\n"));

3753 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3755 
	}
}

3758 
	$t˝c⁄√¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3760 
ù_addr
 
lù
, 
rù
;

3761 
u16_t
 
Õ‹t
, 
Ω‹t
;

3762 
s32_t
 *
idít
;

3764 
idít
 = 
od
->
id_ö°_±r
;

3765 
	`¢mp_oidtoù
(&
idít
[1], &
lù
);

3766 
lù
.
addr
 = 
	`ht⁄l
(lip.addr);

3767 
Õ‹t
 = 
idít
[5];

3768 
	`¢mp_oidtoù
(&
idít
[6], &
rù
);

3769 
rù
.
addr
 = 
	`ht⁄l
(rip.addr);

3770 
Ω‹t
 = 
idít
[10];

3773 
	}
}

3778 
	$udp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3781 
idít_Àn
 += 1;

3782 
idít
 -= 1;

3783 i‡((
idít_Àn
 == 2) &&

3784 (
idít
[0] > 0) && (ident[0] < 6))

3786 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3787 
od
->
id_ö°_±r
 = 
idít
;

3789 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3790 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3791 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3792 
od
->
v_Àn
 = (
u32_t
);

3796 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udp_get_object_def:Ço scalar\n"));

3797 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3799 
	}
}

3802 
	$udp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3804 
u32_t
 *
uöt_±r
 = 
vÆue
;

3805 
u8_t
 
id
;

3807 i‡(
Àn
){}

3808 
id
 = 
od
->
id_ö°_±r
[0];

3809 
id
)

3812 *
uöt_±r
 = 
udpöd©agøms
;

3815 *
uöt_±r
 = 
ud≤›‹ts
;

3818 *
uöt_±r
 = 
udpöîr‹s
;

3821 *
uöt_±r
 = 
udpoutd©agøms
;

3824 
	}
}

3827 
	$ud≥¡ry_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3830 
idít_Àn
 += 5;

3831 
idít
 -= 5;

3833 i‡(
idít_Àn
 == 6)

3835 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3836 
od
->
id_ö°_±r
 = 
idít
;

3838 
idít
[0])

3841 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3842 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3843 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
);

3844 
od
->
v_Àn
 = 4;

3847 
od
->
ö°™˚
 = 
MIB_OBJECT_TAB
;

3848 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3849 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3850 
od
->
v_Àn
 = (
s32_t
);

3853 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço such object\n"));

3854 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3860 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("udpentry_get_object_def:Ço scalar\n"));

3861 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3863 
	}
}

3866 
	$ud≥¡ry_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3868 
u8_t
 
id
;

3869 
udp_pcb
 *
pcb
;

3870 
ù_addr
 
ù
;

3871 
u16_t
 
p‹t
;

3873 i‡(
Àn
){}

3874 
	`¢mp_oidtoù
(&
od
->
id_ö°_±r
[1], &
ù
);

3875 
ù
.
addr
 = 
	`ht⁄l
(ip.addr);

3876 
p‹t
 = 
od
->
id_ö°_±r
[5];

3878 
pcb
 = 
udp_pcbs
;

3879 (
pcb
 !
NULL
) &&

3880 !((
pcb
->
loˇl_ù
.
addr
 =
ù
.addr) &&

3881 (
pcb
->
loˇl_p‹t
 =
p‹t
)))

3883 
pcb
 =Öcb->
√xt
;

3886 i‡(
pcb
 !
NULL
)

3888 
id
 = 
od
->
id_ö°_±r
[0];

3889 
id
)

3893 
ù_addr
 *
d°
 = 
vÆue
;

3894 *
d°
 = 
pcb
->
loˇl_ù
;

3899 
s32_t
 *
söt_±r
 = 
vÆue
;

3900 *
söt_±r
 = 
pcb
->
loˇl_p‹t
;

3905 
	}
}

3908 
	$¢mp_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
)

3911 
idít_Àn
 += 1;

3912 
idít
 -= 1;

3913 i‡(
idít_Àn
 == 2)

3915 
u8_t
 
id
;

3917 
od
->
id_ö°_Àn
 = 
idít_Àn
;

3918 
od
->
id_ö°_±r
 = 
idít
;

3920 
id
 = 
idít
[0];

3921 
id
)

3950 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3951 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_ONLY
;

3952 
od
->
a¢_ty≥
 = (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
);

3953 
od
->
v_Àn
 = (
u32_t
);

3956 
od
->
ö°™˚
 = 
MIB_OBJECT_SCALAR
;

3957 
od
->
ac˚ss
 = 
MIB_OBJECT_READ_WRITE
;

3958 
od
->
a¢_ty≥
 = (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
);

3959 
od
->
v_Àn
 = (
s32_t
);

3962 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço such object\n"));

3963 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("snmp_get_object_def:Ço scalar\n"));

3970 
od
->
ö°™˚
 = 
MIB_OBJECT_NONE
;

3972 
	}
}

3975 
	$¢mp_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

3977 
u32_t
 *
uöt_±r
 = 
vÆue
;

3978 
u8_t
 
id
;

3980 i‡(
Àn
){}

3981 
id
 = 
od
->
id_ö°_±r
[0];

3982 
id
)

3985 *
uöt_±r
 = 
¢mpöpkts
;

3988 *
uöt_±r
 = 
¢mpouçkts
;

3991 *
uöt_±r
 = 
¢mpöbadvîsi⁄s
;

3994 *
uöt_±r
 = 
¢mpöbadcommunôy«mes
;

3997 *
uöt_±r
 = 
¢mpöbadcommunôyu£s
;

4000 *
uöt_±r
 = 
¢mpöa¢∑r£îrs
;

4003 *
uöt_±r
 = 
¢mpötoobigs
;

4006 *
uöt_±r
 = 
¢mpönosuch«mes
;

4009 *
uöt_±r
 = 
¢mpöbadvÆues
;

4012 *
uöt_±r
 = 
¢mpöªad⁄lys
;

4015 *
uöt_±r
 = 
¢mpögíîrs
;

4018 *
uöt_±r
 = 
¢mpötŸÆªqv¨s
;

4021 *
uöt_±r
 = 
¢mpötŸÆ£tv¨s
;

4024 *
uöt_±r
 = 
¢mpögëªque°s
;

4027 *
uöt_±r
 = 
¢mpögë√xts
;

4030 *
uöt_±r
 = 
¢mpö£åeque°s
;

4033 *
uöt_±r
 = 
¢mpögëª•⁄£s
;

4036 *
uöt_±r
 = 
¢mpöå≠s
;

4039 *
uöt_±r
 = 
¢mpouâoobigs
;

4042 *
uöt_±r
 = 
¢mpouäosuch«mes
;

4045 *
uöt_±r
 = 
¢mpoutbadvÆues
;

4048 *
uöt_±r
 = 
¢mpoutgíîrs
;

4051 *
uöt_±r
 = 
¢mpoutgëªque°s
;

4054 *
uöt_±r
 = 
¢mpoutgë√xts
;

4057 *
uöt_±r
 = 
¢mpout£åeque°s
;

4060 *
uöt_±r
 = 
¢mpoutgëª•⁄£s
;

4063 *
uöt_±r
 = 
¢mpouâøps
;

4066 *
uöt_±r
 = *
¢m≥«bÀauthíå≠s_±r
;

4069 
	}
}

4078 
u8_t


4079 
	$¢mp_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4081 
u8_t
 
id
, 
£t_ok
;

4083 i‡(
Àn
) {}

4084 
£t_ok
 = 0;

4085 
id
 = 
od
->
id_ö°_±r
[0];

4086 i‡(
id
 == 30)

4089 
s32_t
 *
söt_±r
 = 
vÆue
;

4091 i‡(
¢m≥«bÀauthíå≠s_±r
 !&
¢m≥«bÀauthíå≠s_deÁu…
)

4094 i‡((*
söt_±r
 == 1) || (*sint_ptr == 2))

4096 
£t_ok
 = 1;

4102 i‡(*
söt_±r
 =
¢m≥«bÀauthíå≠s_deÁu…
)

4104 
£t_ok
 = 1;

4108  
£t_ok
;

4109 
	}
}

4112 
	$¢mp_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
)

4114 
u8_t
 
id
;

4116 i‡(
Àn
) {}

4117 
id
 = 
od
->
id_ö°_±r
[0];

4118 i‡(
id
 == 30)

4121 
s32_t
 *
söt_±r
 = 
vÆue
;

4122 *
¢m≥«bÀauthíå≠s_±r
 = *
söt_±r
;

4124 
	}
}

	@net/lwip/core/snmp/mib_structs.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/¢mp_°ru˘s.h
"

40 
	~"lwù/mem.h
"

43 c⁄° 
s32_t
 
	g¥efix
[4] = {1, 3, 6, 1};

45 
	#NODE_STACK_SIZE
 (
LWIP_SNMP_OBJ_ID_LEN
)

	)

47 
	sn£


50 
mib_node
* 
	mr_±r
;

52 
s32_t
 
	mr_id
;

54 
u8_t
 
	mr_∆
;

56 
u8_t
 
	gnode_°ack_˙t
;

57 
n£
 
	gnode_°ack
[
NODE_STACK_SIZE
];

63 
	$push_node
(
n£
* 
node
)

65 
	`LWIP_ASSERT
("node_°ack_˙à< NODE_STACK_SIZE",
node_°ack_˙t
 < 
NODE_STACK_SIZE
);

66 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("push_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

67 i‡(
node_°ack_˙t
 < 
NODE_STACK_SIZE
)

69 
node_°ack
[
node_°ack_˙t
] = *
node
;

70 
node_°ack_˙t
++;

72 
	}
}

78 
	$p›_node
(
n£
* 
node
)

80 i‡(
node_°ack_˙t
 > 0)

82 
node_°ack_˙t
--;

83 *
node
 = 
node_°ack
[
node_°ack_˙t
];

85 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("p›_node(Ënode=%∞id=%"
S32_F
"\n",(*)(
node
->
r_±r
),node->
r_id
));

86 
	}
}

94 
	$¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif)

96 
√tif
 *
nif
 = 
√tif_li°
;

97 
u16_t
 
i
, 
ifidx
;

99 
ifidx
 = 
ifödex
 - 1;

100 
i
 = 0;

101 (
nif
 !
NULL
Ë&& (
i
 < 
ifidx
))

103 
nif
 =Çif->
√xt
;

104 
i
++;

106 *
√tif
 = 
nif
;

107 
	}
}

115 
	$¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
)

117 
√tif
 *
nif
 = 
√tif_li°
;

118 
u16_t
 
i
;

120 
i
 = 0;

121 
nif
 !
√tif
)

123 
nif
 =Çif->
√xt
;

124 
i
++;

126 *
ifidx
 = 
i
+1;

127 
	}
}

135 
	$¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
)

137 
u32_t
 
ùa
;

139 
ùa
 = 
idít
[0];

140 
ùa
 <<= 8;

141 
ùa
 |
idít
[1];

142 
ùa
 <<= 8;

143 
ùa
 |
idít
[2];

144 
ùa
 <<= 8;

145 
ùa
 |
idít
[3];

146 
ù
->
addr
 = 
ùa
;

147 
	}
}

155 
	$¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
)

157 
u32_t
 
ùa
;

159 
ùa
 = 
ù
->
addr
;

160 
idít
[0] = (
ùa
 >> 24) & 0xff;

161 
idít
[1] = (
ùa
 >> 16) & 0xff;

162 
idít
[2] = (
ùa
 >> 8) & 0xff;

163 
idít
[3] = 
ùa
 & 0xff;

164 
	}
}

166 
mib_li°_node
 *

167 
	$¢mp_mib_ _Æloc
(
s32_t
 
id
)

169 
mib_li°_node
 *
 
;

171 
 
 = (
mib_li°_node
 *)
	`mem_mÆloc
((mib_list_node));

172 i‡(
 
 !
NULL
)

174 
 
->
¥ev
 = 
NULL
;

175 
 
->
√xt
 = 
NULL
;

176 
 
->
objid
 = 
id
;

177 
 
->
≈å
 = 
NULL
;

179  
 
;

180 
	}
}

183 
	$¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
)

185 
	`mem_‰ì
(
 
);

186 
	}
}

188 
mib_li°_roŸnode
 *

189 
	$¢mp_mib_Ãn_Æloc
()

191 
mib_li°_roŸnode
 *
Ãn
;

193 
Ãn
 = (
mib_li°_roŸnode
*)
	`mem_mÆloc
((mib_list_rootnode));

194 i‡(
Ãn
 !
NULL
)

196 
Ãn
->
gë_obje˘_def
 = 
nﬁófs_gë_obje˘_def
;

197 
Ãn
->
gë_vÆue
 = 
nﬁófs_gë_vÆue
;

198 
Ãn
->
£t_ã°
 = 
nﬁófs_£t_ã°
;

199 
Ãn
->
£t_vÆue
 = 
nﬁófs_£t_vÆue
;

200 
Ãn
->
node_ty≥
 = 
MIB_NODE_LR
;

201 
Ãn
->
maxÀngth
 = 0;

202 
Ãn
->
hód
 = 
NULL
;

203 
Ãn
->
èû
 = 
NULL
;

204 
Ãn
->
cou¡
 = 0;

206  
Ãn
;

207 
	}
}

210 
	$¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
)

212 
	`mem_‰ì
(
Ãn
);

213 
	}
}

226 
s8_t


227 
	$¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
)

229 
mib_li°_node
 *
¬
;

230 
s8_t
 
ö£π
;

232 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

235 
ö£π
 = 0;

236 i‡(
∫
->
hód
 =
NULL
)

239 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯em±yÜi° objid==%"
S32_F
"\n",
objid
));

240 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

241 i‡(
¬
 !
NULL
)

243 
∫
->
hód
 = 
¬
;

244 
∫
->
èû
 = 
¬
;

245 *
ö¢
 = 
¬
;

246 
ö£π
 = 1;

250 
ö£π
 = -1;

255 
mib_li°_node
 *
n
;

257 
n
 = 
∫
->
hód
;

258 (
n
 !
NULL
Ë&& (
ö£π
 == 0))

260 i‡(
n
->
objid
 == objid)

263 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("nodêÆªadyÅhîêobjid==%"
S32_F
"\n",
objid
));

264 *
ö¢
 = 
n
;

265 
ö£π
 = 2;

267 i‡(
n
->
objid
 < objid)

269 i‡(
n
->
√xt
 =
NULL
)

272 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†èû objid==%"
S32_F
"\n",
objid
));

273 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

274 i‡(
¬
 !
NULL
)

276 
¬
->
√xt
 = 
NULL
;

277 
¬
->
¥ev
 = 
n
;

278 
n
->
√xt
 = 
¬
;

279 
∫
->
èû
 = 
¬
;

280 *
ö¢
 = 
¬
;

281 
ö£π
 = 1;

286 
ö£π
 = -1;

292 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("traverseÜist\n"));

293 
n
 =Ç->
√xt
;

300 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("Ælo¯ö†n->¥ev, objid==%"
S32_F
",Ç\n",
objid
));

301 
¬
 = 
	`¢mp_mib_ _Æloc
(
objid
);

302 i‡(
¬
 !
NULL
)

304 i‡(
n
->
¥ev
 =
NULL
)

307 
¬
->
√xt
 = 
n
;

308 
¬
->
¥ev
 = 
NULL
;

309 
∫
->
hód
 = 
¬
;

310 
n
->
¥ev
 = 
¬
;

315 
¬
->
√xt
 = 
n
;

316 
¬
->
¥ev
 = 
n
->prev;

317 
n
->
¥ev
->
√xt
 = 
¬
;

318 
n
->
¥ev
 = 
¬
;

320 *
ö¢
 = 
¬
;

321 
ö£π
 = 1;

326 
ö£π
 = -1;

331 i‡(
ö£π
 == 1)

333 
∫
->
cou¡
 += 1;

335 
	`LWIP_ASSERT
("ö£π !0",
ö£π
 != 0);

336  
ö£π
;

337 
	}
}

348 
s8_t


349 
	$¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
)

351 
s8_t
 
fc
;

352 
mib_li°_node
 *
n
;

354 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

355 
n
 = 
∫
->
hód
;

356 (
n
 !
NULL
Ë&& (n->
objid
 != objid))

358 
n
 =Ç->
√xt
;

360 i‡(
n
 =
NULL
)

362 
fc
 = 0;

364 i‡(
n
->
≈å
 =
NULL
)

367 
fc
 = 1;

371 
mib_li°_roŸnode
 *
r
;

373 i‡(
n
->
≈å
->
node_ty≥
 =
MIB_NODE_LR
)

375 
r
 = (
mib_li°_roŸnode
 *)
n
->
≈å
;

376 i‡(
r
->
cou¡
 > 1)

379 
fc
 = 2;

384 
fc
 = 1;

390 
fc
 = 3;

393 *
‚
 = 
n
;

394  
fc
;

395 
	}
}

405 
mib_li°_roŸnode
 *

406 
	$¢mp_mib_node_dñëe
(
mib_li°_roŸnode
 *
∫
, 
mib_li°_node
 *
n
)

408 
mib_li°_roŸnode
 *
√xt
;

410 
	`LWIP_ASSERT
("∫ !NULL",
∫
 !
NULL
);

411 
	`LWIP_ASSERT
("¿!NULL",
n
 !
NULL
);

414 
√xt
 = (
mib_li°_roŸnode
*)(
n
->
≈å
);

415 
∫
->
cou¡
 -= 1;

417 i‡(
n
 =
∫
->
hód
)

419 
∫
->
hód
 = 
n
->
√xt
;

420 i‡(
n
->
√xt
 !
NULL
)

423 
n
->
√xt
->
¥ev
 = 
NULL
;

426 i‡(
n
 =
∫
->
èû
)

428 
∫
->
èû
 = 
n
->
¥ev
;

429 i‡(
n
->
¥ev
 !
NULL
)

432 
n
->
¥ev
->
√xt
 = 
NULL
;

438 
n
->
¥ev
->
√xt
 =Ç->next;

439 
n
->
√xt
->
¥ev
 =Ç->prev;

441 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("‰ìÜi° objid==%"
S32_F
"\n",
n
->
objid
));

442 
	`¢mp_mib_ _‰ì
(
n
);

443 i‡(
∫
->
cou¡
 == 0)

445 
∫
->
hód
 = 
NULL
;

446 
∫
->
èû
 = 
NULL
;

448  
√xt
;

449 
	}
}

462 
mib_node
 *

463 
	$¢mp_£¨ch_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
)

465 
u8_t
 
node_ty≥
, 
ext_Àvñ
;

467 
ext_Àvñ
 = 0;

468 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("node==%∞*idít==%"
S32_F
"\n",(*)
node
,*
idít
));

469 
node
 !
NULL
)

471 
node_ty≥
 = 
node
->node_type;

472 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

474 
mib_¨øy_node
 *
™
;

475 
u16_t
 
i
;

477 i‡(
idít_Àn
 > 0)

480 
™
 = (
mib_¨øy_node
 *)
node
;

481 
i
 = 0;

482 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] !*
idít
))

484 
i
++;

486 i‡(
i
 < 
™
->
maxÀngth
)

489 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

490 i‡(
™
->
≈å
[
i
] =
NULL
)

494 
≈
->
idít_Àn
 = ident_len;

495 
≈
->
idít
 = ident;

496  (
mib_node
*)
™
;

501 
idít
++;

502 
idít_Àn
--;

503 
node
 = 
™
->
≈å
[
i
];

509 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™ sórch faûed *idít==%"
S32_F
"\n",*
idít
));

510  
NULL
;

516 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("an search failed, short object identifier\n"));

517  
NULL
;

520 if(
node_ty≥
 =
MIB_NODE_LR
)

522 
mib_li°_roŸnode
 *
Ãn
;

523 
mib_li°_node
 *
 
;

525 i‡(
idít_Àn
 > 0)

528 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

529 
 
 = 
Ãn
->
hód
;

531 (
 
 !
NULL
Ë&& ( ->
objid
 !*
idít
))

533 
 
 =Ün->
√xt
;

535 i‡(
 
 !
NULL
)

538 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

539 i‡(
 
->
≈å
 =
NULL
)

541 
≈
->
idít_Àn
 = ident_len;

542 
≈
->
idít
 = ident;

543  (
mib_node
*)
Ãn
;

548 
idít_Àn
--;

549 
idít
++;

550 
node
 = 
 
->
≈å
;

556 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("  sórch faûed *idít==%"
S32_F
"\n",*
idít
));

557  
NULL
;

563 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ln search failed, short object identifier\n"));

564  
NULL
;

567 if(
node_ty≥
 =
MIB_NODE_EX
)

569 
mib_exã∫Æ_node
 *
í
;

570 
u16_t
 
i
, 
Àn
;

572 i‡(
idít_Àn
 > 0)

575 
í
 = (
mib_exã∫Æ_node
 *)
node
;

577 
i
 = 0;

578 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

579 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) != 0))

581 
i
++;

583 i‡(
i
 < 
Àn
)

585 
s32_t
 
debug_id
;

587 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
debug_id
);

588 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid==%"
S32_F
" *idít==%"S32_F"\n",
debug_id
,*
idít
));

589 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

591 
≈
->
idít_Àn
 = ident_len;

592 
≈
->
idít
 = ident;

593  (
mib_node
*)
í
;

598 
idít_Àn
--;

599 
idít
++;

600 
ext_Àvñ
++;

606 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í sórch faûed *idít==%"
S32_F
"\n",*
idít
));

607  
NULL
;

613 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("en search failed, short object identifier\n"));

614  
NULL
;

617 i‡(
node_ty≥
 =
MIB_NODE_SC
)

619 
mib_sˇœr_node
 *
¢
;

621 
¢
 = (
mib_sˇœr_node
 *)
node
;

622 i‡((
idít_Àn
 =1Ë&& (*
idít
 == 0))

624 
≈
->
idít_Àn
 = ident_len;

625 
≈
->
idít
 = ident;

626  (
mib_node
*)
¢
;

631 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("search failed, invalid object identifierÜength\n"));

632  
NULL
;

638 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

639  
NULL
;

643 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("£¨ch faûedÇode==%p\n",(*)
node
));

644  
NULL
;

645 
	}
}

650 
u8_t


651 
	$em±y_èbÀ
(
mib_node
 *
node
)

653 
u8_t
 
node_ty≥
;

654 
u8_t
 
em±y
 = 0;

656 i‡(
node
 !
NULL
)

658 
node_ty≥
 = 
node
->node_type;

659 i‡(
node_ty≥
 =
MIB_NODE_LR
)

661 
mib_li°_roŸnode
 *
Ãn
;

662 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

663 i‡((
Ãn
->
cou¡
 =0Ë|| (Ãn->
hód
 =
NULL
))

665 
em±y
 = 1;

668 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

670 
mib_¨øy_node
 *
™
;

671 
™
 = (
mib_¨øy_node
 *)
node
;

672 i‡((
™
->
maxÀngth
 =0Ë|| (™->
≈å
 =
NULL
))

674 
em±y
 = 1;

677 i‡(
node_ty≥
 =
MIB_NODE_EX
)

679 
mib_exã∫Æ_node
 *
í
;

680 
í
 = (
mib_exã∫Æ_node
 *)
node
;

681 i‡(
í
->
åì_Àvñs
 == 0)

683 
em±y
 = 1;

687  
em±y
;

688 
	}
}

693 
mib_node
 *

694 
	$¢mp_ex∑nd_åì
(
mib_node
 *
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

696 
u8_t
 
node_ty≥
, 
ext_Àvñ
, 
˛imb_åì
;

698 
ext_Àvñ
 = 0;

700 
node_°ack_˙t
 = 0;

701 
node
 !
NULL
)

703 
˛imb_åì
 = 0;

704 
node_ty≥
 = 
node
->node_type;

705 i‡((
node_ty≥
 =
MIB_NODE_AR
Ë|| (node_ty≥ =
MIB_NODE_RA
))

707 
mib_¨øy_node
 *
™
;

708 
u16_t
 
i
;

711 
™
 = (
mib_¨øy_node
 *)
node
;

712 i‡(
idít_Àn
 > 0)

714 
i
 = 0;

715 (
i
 < 
™
->
maxÀngth
Ë&& (™->
objid
[i] < *
idít
))

717 
i
++;

719 i‡(
i
 < 
™
->
maxÀngth
)

721 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("™->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
™
->
objid
[i],*
idít
));

723 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
];

724 (
oidªt
->
Àn
)++;

726 i‡(
™
->
≈å
[
i
] =
NULL
)

728 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

730 i‡(
™
->
objid
[
i
] > *
idít
)

732  (
mib_node
*)
™
;

734 i‡((
i
 + 1Ë< 
™
->
maxÀngth
)

737 (
oidªt
->
Àn
)--;

738 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
i
 + 1];

739 (
oidªt
->
Àn
)++;

740  (
mib_node
*)
™
;

745 (
oidªt
->
Àn
)--;

746 
˛imb_åì
 = 1;

751 
u8_t
 
j
;

752 
n£
 
cur_node
;

754 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

756 
j
 = 
i
 + 1;

757 (
j
 < 
™
->
maxÀngth
Ë&& (
	`em±y_èbÀ
◊n->
≈å
[j])))

759 
j
++;

761 i‡(
j
 < 
™
->
maxÀngth
)

763 
cur_node
.
r_±r
 = 
™
->
≈å
[
j
];

764 
cur_node
.
r_id
 = 
™
->
objid
[
j
];

765 
cur_node
.
r_∆
 = 0;

769 
cur_node
.
r_±r
 = 
NULL
;

771 
	`push_node
(&
cur_node
);

772 i‡(
™
->
objid
[
i
] =*
idít
)

774 
idít_Àn
--;

775 
idít
++;

780 
idít_Àn
 = 0;

783 
node
 = 
™
->
≈å
[
i
];

789 
˛imb_åì
 = 1;

794 
u8_t
 
j
;

796 
j
 = 0;

797 (
j
 < 
™
->
maxÀngth
Ë&& 
	`em±y_èbÀ
◊n->
≈å
[j]))

799 
j
++;

801 i‡(
j
 < 
™
->
maxÀngth
)

803 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·án->objid[j]==%"
S32_F
"\n",
™
->
objid
[
j
]));

804 
oidªt
->
id
[oidªt->
Àn
] = 
™
->
objid
[
j
];

805 (
oidªt
->
Àn
)++;

806 i‡(
™
->
≈å
[
j
] =
NULL
)

809  (
mib_node
*)
™
;

814 
node
 = 
™
->
≈å
[
j
];

820 
˛imb_åì
 = 1;

824 if(
node_ty≥
 =
MIB_NODE_LR
)

826 
mib_li°_roŸnode
 *
Ãn
;

827 
mib_li°_node
 *
 
;

830 
Ãn
 = (
mib_li°_roŸnode
 *)
node
;

831 i‡(
idít_Àn
 > 0)

833 
 
 = 
Ãn
->
hód
;

835 (
 
 !
NULL
Ë&& ( ->
objid
 < *
idít
))

837 
 
 =Ün->
√xt
;

839 i‡(
 
 !
NULL
)

841 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,(" ->objid==%"
S32_F
" *idít==%"S32_F"\n",
 
->
objid
,*
idít
));

842 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
objid
;

843 (
oidªt
->
Àn
)++;

844 i‡(
 
->
≈å
 =
NULL
)

847 i‡(
 
->
objid
 > *
idít
)

849  (
mib_node
*)
Ãn
;

851 i‡(
 
->
√xt
 !
NULL
)

854 (
oidªt
->
Àn
)--;

855 
oidªt
->
id
[oidªt->
Àn
] = 
 
->
√xt
->
objid
;

856 (
oidªt
->
Àn
)++;

857  (
mib_node
*)
Ãn
;

862 (
oidªt
->
Àn
)--;

863 
˛imb_åì
 = 1;

868 
mib_li°_node
 *
jn
;

869 
n£
 
cur_node
;

872 
jn
 = 
 
->
√xt
;

873 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

875 
jn
 = jn->
√xt
;

877 i‡(
jn
 !
NULL
)

879 
cur_node
.
r_±r
 = 
jn
->
≈å
;

880 
cur_node
.
r_id
 = 
jn
->
objid
;

881 
cur_node
.
r_∆
 = 0;

885 
cur_node
.
r_±r
 = 
NULL
;

887 
	`push_node
(&
cur_node
);

888 i‡(
 
->
objid
 =*
idít
)

890 
idít_Àn
--;

891 
idít
++;

896 
idít_Àn
 = 0;

899 
node
 = 
 
->
≈å
;

906 
˛imb_åì
 = 1;

911 
mib_li°_node
 *
jn
;

913 
jn
 = 
Ãn
->
hód
;

914 (
jn
 !
NULL
Ë&& 
	`em±y_èbÀ
(jn->
≈å
))

916 
jn
 = jn->
√xt
;

918 i‡(
jn
 !
NULL
)

920 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À· jn->objid==%"
S32_F
"\n",
jn
->
objid
));

921 
oidªt
->
id
[oidªt->
Àn
] = 
jn
->
objid
;

922 (
oidªt
->
Àn
)++;

923 i‡(
jn
->
≈å
 =
NULL
)

926 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("jn->nptr == NULL\n"));

927  (
mib_node
*)
Ãn
;

932 
node
 = 
jn
->
≈å
;

938 
˛imb_åì
 = 1;

942 if(
node_ty≥
 =
MIB_NODE_EX
)

944 
mib_exã∫Æ_node
 *
í
;

945 
s32_t
 
ex_id
;

948 
í
 = (
mib_exã∫Æ_node
 *)
node
;

949 i‡(
idít_Àn
 > 0)

951 
u16_t
 
i
, 
Àn
;

953 
i
 = 0;

954 
Àn
 = 
í
->
	`Àvñ_Àngth
”n->
addr_öf
,
ext_Àvñ
);

955 (
i
 < 
Àn
Ë&& (
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,i,*
idít
) < 0))

957 
i
++;

959 i‡(
i
 < 
Àn
)

962 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
,&
ex_id
);

963 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("í->objid[%"
U16_F
"]==%"
S32_F
" *idít==%"S32_F"\n",
i
,
ex_id
,*
idít
));

964 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

965 (
oidªt
->
Àn
)++;

967 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

969 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("leafÇode\n"));

971 i‡(
ex_id
 > *
idít
)

973  (
mib_node
*)
í
;

975 i‡((
i
 + 1Ë< 
Àn
)

978 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
i
 + 1,&
ex_id
);

979 (
oidªt
->
Àn
)--;

980 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

981 (
oidªt
->
Àn
)++;

982  (
mib_node
*)
í
;

987 (
oidªt
->
Àn
)--;

988 
˛imb_åì
 = 1;

993 
u8_t
 
j
;

994 
n£
 
cur_node
;

996 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("non-leafÇode\n"));

998 
j
 = 
i
 + 1;

999 i‡(
j
 < 
Àn
)

1002 
cur_node
.
r_±r
 = 
node
;

1003 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,
j
,&
cur_node
.
r_id
);

1004 
cur_node
.
r_∆
 = 
ext_Àvñ
 + 1;

1008 
cur_node
.
r_±r
 = 
NULL
;

1010 
	`push_node
(&
cur_node
);

1011 i‡(
í
->
	`idít_cmp
”n->
addr_öf
,
ext_Àvñ
,
i
,*
idít
) == 0)

1013 
idít_Àn
--;

1014 
idít
++;

1019 
idít_Àn
 = 0;

1022 
ext_Àvñ
++;

1028 
˛imb_åì
 = 1;

1034 
í
->
	`gë_objid
”n->
addr_öf
,
ext_Àvñ
,0,&
ex_id
);

1035 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("À·Én->objid==%"
S32_F
"\n",
ex_id
));

1036 
oidªt
->
id
[oidªt->
Àn
] = 
ex_id
;

1037 (
oidªt
->
Àn
)++;

1038 i‡((
ext_Àvñ
 + 1Ë=
í
->
åì_Àvñs
)

1041 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("(ext_level + 1) ==Én->tree_levels\n"));

1042  (
mib_node
*)
í
;

1047 
ext_Àvñ
++;

1051 if(
node_ty≥
 =
MIB_NODE_SC
)

1053 
mib_sˇœr_node
 *
¢
;

1056 
¢
 = (
mib_sˇœr_node
 *)
node
;

1057 i‡(
idít_Àn
 > 0)

1060 
˛imb_åì
 = 1;

1065 
oidªt
->
id
[oidªt->
Àn
] = 0;

1066 (
oidªt
->
Àn
)++;

1068 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("completed scalarÜeaf\n"));

1069  (
mib_node
*)
¢
;

1075 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode_ty≥ %"
U16_F
" unkown\n",(
u16_t
)
node_ty≥
));

1076  
NULL
;

1079 i‡(
˛imb_åì
)

1081 
n£
 
chûd
;

1084 
chûd
.
r_±r
 = 
NULL
;

1085 
chûd
.
r_id
 = 0;

1086 
chûd
.
r_∆
 = 0;

1087 (
node_°ack_˙t
 > 0Ë&& (
chûd
.
r_±r
 =
NULL
))

1089 
	`p›_node
(&
chûd
);

1091 (
oidªt
->
Àn
)--;

1093 i‡(
chûd
.
r_±r
 !
NULL
)

1096 
idít_Àn
 = 0;

1097 
oidªt
->
id
[oidªt->
Àn
] = 
chûd
.
r_id
;

1098 
oidªt
->
Àn
++;

1099 
node
 = 
chûd
.
r_±r
;

1100 
ext_Àvñ
 = 
chûd
.
r_∆
;

1105 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("expand failed,ÅreeÉnds here\n"));

1106  
NULL
;

1111 
	`LWIP_DEBUGF
(
SNMP_MIB_DEBUG
,("ex∑nd faûedÇode==%p\n",(*)
node
));

1112  
NULL
;

1113 
	}
}

1122 
u8_t


1123 
	$¢mp_iso_¥efix_t°
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
)

1125 i‡((
idít_Àn
 > 3) &&

1126 (
idít
[0] == 1) && (ident[1] == 3) &&

1127 (
idít
[2] == 6) && (ident[3] == 1))

1135 
	}
}

1148 
u8_t


1149 
	$¢mp_iso_¥efix_ex∑nd
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
)

1151 c⁄° 
s32_t
 *
¥efix_±r
;

1152 
s32_t
 *
ªt_±r
;

1153 
u8_t
 
i
;

1155 
i
 = 0;

1156 
¥efix_±r
 = &
¥efix
[0];

1157 
ªt_±r
 = &
oidªt
->
id
[0];

1158 
idít_Àn
 = ((ident_len < 4)?ident_len:4);

1159 (
i
 < 
idít_Àn
Ë&& ((*
idít
Ë<(*
¥efix_±r
)))

1161 *
ªt_±r
++ = *
¥efix_±r
++;

1162 
idít
++;

1163 
i
++;

1165 i‡(
i
 =
idít_Àn
)

1168 
i
 < 4)

1170 *
ªt_±r
++ = *
¥efix_±r
++;

1171 
i
++;

1173 
oidªt
->
Àn
 = 
i
;

1181 
	}
}

	@net/lwip/core/snmp/msg_in.c

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_SNMP


39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/udp.h
"

42 
	~"lwù/°©s.h
"

43 
	~"lwù/¢mp.h
"

44 
	~"lwù/¢mp_a¢1.h
"

45 
	~"lwù/¢mp_msg.h
"

46 
	~"lwù/¢mp_°ru˘s.h
"

48 
	~<°rög.h
>

52 c⁄° 
s32_t
 
	g¢mp_vîsi⁄
 = 0;

54 c⁄° 
	g¢mp_publiccommunôy
[7] = "public";

57 
¢mp_msg_p°©
 
	gmsg_öput_li°
[
SNMP_CONCURRENT_REQUESTS
];

59 
udp_pcb
 *
	g¢mp1_pcb
;

61 
¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

62 
îr_t
 
¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

63 
îr_t
 
¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
);

71 
	$¢mp_öô
()

73 
¢mp_msg_p°©
 *
msg_ps
;

74 
u8_t
 
i
;

76 
¢mp1_pcb
 = 
	`udp_√w
();

77 i‡(
¢mp1_pcb
 !
NULL
)

79 
	`udp_ªcv
(
¢mp1_pcb
, 
¢mp_ªcv
, (*)
SNMP_IN_PORT
);

80 
	`udp_böd
(
¢mp1_pcb
, 
IP_ADDR_ANY
, 
SNMP_IN_PORT
);

82 
msg_ps
 = &
msg_öput_li°
[0];

83 
i
=0; i<
SNMP_CONCURRENT_REQUESTS
; i++)

85 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

86 
msg_ps
->
îr‹_ödex
 = 0;

87 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

88 
msg_ps
++;

90 
å≠_msg
.
pcb
 = 
¢mp1_pcb
;

93 
	`¢mp_cﬁd°¨t_å≠
();

94 
	}
}

97 
	$¢mp_îr‹_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
, 
u8_t
 
îr‹
)

99 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

100 
msg_ps
->
outvb
 = msg_ps->
övb
;

101 
msg_ps
->
övb
.
hód
 = 
NULL
;

102 
msg_ps
->
övb
.
èû
 = 
NULL
;

103 
msg_ps
->
övb
.
cou¡
 = 0;

104 
msg_ps
->
îr‹_°©us
 = 
îr‹
;

105 
msg_ps
->
îr‹_ödex
 = 1 + msg_ps->
vb_idx
;

106 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

107 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

108 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

109 
	}
}

112 
	$¢mp_ok_ª•⁄£
(
¢mp_msg_p°©
 *
msg_ps
)

114 
îr_t
 
îr_ªt
;

116 
îr_ªt
 = 
	`¢mp_£nd_ª•⁄£
(
msg_ps
);

117 i‡(
îr_ªt
 =
ERR_MEM
)

123 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_evíà%"
S32_F
"\n",
msg_ps
->
îr‹_°©us
));

126 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
övb
);

127 
	`¢mp_v¨böd_li°_‰ì
(&
msg_ps
->
outvb
);

128 
msg_ps
->
°©e
 = 
SNMP_MSG_EMPTY
;

129 
	}
}

138 
	$¢mp_msg_gë_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

140 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

142 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

144 
mib_exã∫Æ_node
 *
í
;

145 
¢mp_«me_±r
 
≈
;

148 
í
 = 
msg_ps
->
ext_mib_node
;

149 
≈
 = 
msg_ps
->
ext_«me_±r
;

152 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

153 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

155 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

156 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

160 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

162 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

165 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

167 
mib_exã∫Æ_node
 *
í
;

168 
¢mp_v¨böd
 *
vb
;

171 
í
 = 
msg_ps
->
ext_mib_node
;

174 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

175 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

176 i‡(
vb
 !
NULL
)

178 
vb
->
√xt
 = 
NULL
;

179 
vb
->
¥ev
 = 
NULL
;

182 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

183 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

185 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

186 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

188 
vb
->
vÆue_ty≥
 = 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
;

189 
vb
->
vÆue_Àn
 = 
msg_ps
->
ext_obje˘_def
.
v_Àn
;

190 i‡(
vb
->
vÆue_Àn
 > 0)

192 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

193 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

194 i‡(
vb
->
vÆue
 !
NULL
)

196 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

197 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

199 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

200 
msg_ps
->
vb_idx
 += 1;

204 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

205 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço variable space\n"));

206 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

207 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

208 
	`mem_‰ì
(
vb
);

209 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

215 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

216 
vb
->
vÆue
 = 
NULL
;

217 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

219 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

220 
msg_ps
->
vb_idx
 += 1;

225 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

226 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event:Ço outvb space\n"));

227 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

231 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

232 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

234 
mib_node
 *
mn
;

235 
¢mp_«me_±r
 
≈
;

237 i‡(
msg_ps
->
vb_idx
 == 0)

239 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

243 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

246 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

248 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

249 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

250 i‡(
mn
 !
NULL
)

252 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

255 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

257 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

259 
msg_ps
->
ext_mib_node
 = 
í
;

260 
msg_ps
->
ext_«me_±r
 = 
≈
;

262 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

267 
obj_def
 
obje˘_def
;

269 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

270 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

271 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

273 
mn
 = mn;

278 
mn
 = 
NULL
;

280 i‡(
mn
 !
NULL
)

282 
¢mp_v¨böd
 *
vb
;

284 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

286 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

287 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

288 i‡(
vb
 !
NULL
)

290 
vb
->
√xt
 = 
NULL
;

291 
vb
->
¥ev
 = 
NULL
;

294 
vb
->
idít
 = 
msg_ps
->
vb_±r
->ident;

295 
vb
->
idít_Àn
 = 
msg_ps
->
vb_±r
->ident_len;

297 
msg_ps
->
vb_±r
->
idít
 = 
NULL
;

298 
msg_ps
->
vb_±r
->
idít_Àn
 = 0;

300 
vb
->
vÆue_ty≥
 = 
obje˘_def
.
a¢_ty≥
;

301 
vb
->
vÆue_Àn
 = 
obje˘_def
.
v_Àn
;

302 i‡(
vb
->
vÆue_Àn
 > 0)

304 
vb
->
vÆue
 = 
	`mem_mÆloc
(vb->
vÆue_Àn
);

305 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

306 i‡(
vb
->
vÆue
 !
NULL
)

308 
mn
->
	`gë_vÆue
(&
obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

309 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

310 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

311 
msg_ps
->
vb_idx
 += 1;

315 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate variable space\n"));

316 
msg_ps
->
vb_±r
->
idít
 = 
vb
->ident;

317 
msg_ps
->
vb_±r
->
idít_Àn
 = 
vb
->ident_len;

318 
	`mem_‰ì
(
vb
);

319 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

325 
vb
->
vÆue
 = 
NULL
;

326 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

327 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

328 
msg_ps
->
vb_idx
 += 1;

333 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_event: couldn'tállocate outvb space\n"));

334 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

342 
mn
 = 
NULL
;

344 i‡(
mn
 =
NULL
)

347 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

350 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

351 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

353 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

355 
	}
}

364 
	$¢mp_msg_gë√xt_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

366 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_gë√xt_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

368 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

370 
mib_exã∫Æ_node
 *
í
;

373 
í
 = 
msg_ps
->
ext_mib_node
;

376 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1], &msg_ps->
ext_obje˘_def
);

377 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

379 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_VALUE
;

380 
í
->
	`gë_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

384 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 1, &
msg_ps
->
ext_oid
.
id
[msg_ps->ext_oid.
Àn
 - 1]);

386 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

389 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_VALUE
)

391 
mib_exã∫Æ_node
 *
í
;

392 
¢mp_v¨böd
 *
vb
;

395 
í
 = 
msg_ps
->
ext_mib_node
;

397 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
msg_ps
->
ext_oid
,

398 
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
,

399 
msg_ps
->
ext_obje˘_def
.
v_Àn
);

400 i‡(
vb
 !
NULL
)

402 
í
->
	`gë_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

403 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

404 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

405 
msg_ps
->
vb_idx
 += 1;

409 
í
->
	`gë_vÆue_pc
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

410 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_msg_getnext_event: couldn'tállocate outvb space\n"));

411 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

415 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

416 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

418 
mib_node
 *
mn
;

419 
¢mp_obj_id
 
oid
;

421 i‡(
msg_ps
->
vb_idx
 == 0)

423 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

427 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

429 i‡(
	`¢mp_iso_¥efix_ex∑nd
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
, &
oid
))

431 i‡(
msg_ps
->
vb_±r
->
idít_Àn
 > 3)

434 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
,

435 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

436 
msg_ps
->
vb_±r
->
idít
 + 4, &
oid
);

441 
mn
 = 
	`¢mp_ex∑nd_åì
((
mib_node
*)&
öã∫ë
, 0, 
NULL
, &
oid
);

446 
mn
 = 
NULL
;

448 i‡(
mn
 !
NULL
)

450 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

453 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

455 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

457 
msg_ps
->
ext_mib_node
 = 
í
;

458 
msg_ps
->
ext_oid
 = 
oid
;

460 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 1, &
oid
.
id
[oid.
Àn
 - 1]);

465 
obj_def
 
obje˘_def
;

466 
¢mp_v¨böd
 *
vb
;

468 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

469 
mn
->
	`gë_obje˘_def
(1, &
oid
.
id
[oid.
Àn
 - 1], &
obje˘_def
);

471 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
obje˘_def
.
a¢_ty≥
, obje˘_def.
v_Àn
);

472 i‡(
vb
 !
NULL
)

474 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_VALUE
;

475 
mn
->
	`gë_vÆue
(&
obje˘_def
, obje˘_def.
v_Àn
, 
vb
->
vÆue
);

476 
	`¢mp_v¨böd_èû_add
(&
msg_ps
->
outvb
, 
vb
);

477 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

478 
msg_ps
->
vb_idx
 += 1;

482 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_recv couldn'tállocate outvb space\n"));

483 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_TOOBIG
);

487 i‡(
mn
 =
NULL
)

490 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

493 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

494 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

496 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

498 
	}
}

507 
	$¢mp_msg_£t_evít
(
u8_t
 
ªque°_id
, 
¢mp_msg_p°©
 *
msg_ps
)

509 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_msg_£t_evít: msg_ps->°©e==%"
U16_F
"\n",(
u16_t
)
msg_ps
->
°©e
));

511 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF
)

513 
mib_exã∫Æ_node
 *
í
;

514 
¢mp_«me_±r
 
≈
;

517 
í
 = 
msg_ps
->
ext_mib_node
;

518 
≈
 = 
msg_ps
->
ext_«me_±r
;

521 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

522 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

524 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_TEST
;

525 
í
->
	`£t_ã°_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
);

529 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

531 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

534 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_TEST
)

536 
mib_exã∫Æ_node
 *
í
;

539 
í
 = 
msg_ps
->
ext_mib_node
;

541 i‡(
msg_ps
->
ext_obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

543 i‡((
msg_ps
->
ext_obje˘_def
.
a¢_ty≥
 =msg_ps->
vb_±r
->
vÆue_ty≥
) &&

544 (
í
->
	`£t_ã°_a
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
,

545 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

547 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

548 
msg_ps
->
vb_idx
 += 1;

552 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

554 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

559 
í
->
	`£t_ã°_pc
(
ªque°_id
,&
msg_ps
->
ext_obje˘_def
);

561 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

564 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
)

566 
mib_exã∫Æ_node
 *
í
;

567 
¢mp_«me_±r
 
≈
;

570 
í
 = 
msg_ps
->
ext_mib_node
;

571 
≈
 = 
msg_ps
->
ext_«me_±r
;

574 
í
->
	`gë_obje˘_def_a
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
, &
msg_ps
->
ext_obje˘_def
);

575 i‡(
msg_ps
->
ext_obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

577 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_SET_VALUE
;

578 
í
->
	`£t_vÆue_q
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
,

579 
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

583 
í
->
	`gë_obje˘_def_pc
(
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

585 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_GENERROR
);

588 i‡(
msg_ps
->
°©e
 =
SNMP_MSG_EXTERNAL_SET_VALUE
)

590 
mib_exã∫Æ_node
 *
í
;

593 
í
 = 
msg_ps
->
ext_mib_node
;

594 
í
->
	`£t_vÆue_a
(
ªque°_id
, &
msg_ps
->
ext_obje˘_def
, 0, 
NULL
);

597 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

598 
msg_ps
->
vb_idx
 += 1;

602 (
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

603 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

605 
mib_node
 *
mn
;

606 
¢mp_«me_±r
 
≈
;

608 i‡(
msg_ps
->
vb_idx
 == 0)

610 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

614 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

617 i‡(
	`¢mp_iso_¥efix_t°
(
msg_ps
->
vb_±r
->
idít_Àn
, msg_ps->vb_±r->
idít
))

619 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

620 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

621 i‡(
mn
 !
NULL
)

623 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

626 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

628 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF
;

630 
msg_ps
->
ext_mib_node
 = 
í
;

631 
msg_ps
->
ext_«me_±r
 = 
≈
;

633 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

638 
obj_def
 
obje˘_def
;

640 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF
;

641 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

642 i‡(
obje˘_def
.
ö°™˚
 !
MIB_OBJECT_NONE
)

644 
mn
 = mn;

649 
mn
 = 
NULL
;

651 i‡(
mn
 !
NULL
)

653 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_TEST
;

655 i‡(
obje˘_def
.
ac˚ss
 =
MIB_OBJECT_READ_WRITE
)

657 i‡((
obje˘_def
.
a¢_ty≥
 =
msg_ps
->
vb_±r
->
vÆue_ty≥
) &&

658 (
mn
->
	`£t_ã°
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
) != 0))

660 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

661 
msg_ps
->
vb_idx
 += 1;

666 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_BADVALUE
);

672 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

680 
mn
 = 
NULL
;

682 i‡(
mn
 =
NULL
)

685 
	`¢mp_îr‹_ª•⁄£
(
msg_ps
,
SNMP_ES_NOSUCHNAME
);

689 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_SEARCH_OBJ
) &&

690 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

692 
msg_ps
->
vb_idx
 = 0;

693 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

697 (
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

698 (
msg_ps
->
vb_idx
 < msg_ps->
övb
.
cou¡
))

700 
mib_node
 *
mn
;

701 
¢mp_«me_±r
 
≈
;

703 i‡(
msg_ps
->
vb_idx
 == 0)

705 
msg_ps
->
vb_±r
 = msg_ps->
övb
.
hód
;

709 
msg_ps
->
vb_±r
 = msg_ps->vb_±r->
√xt
;

712 
mn
 = 
	`¢mp_£¨ch_åì
((
mib_node
*)&
öã∫ë
, 
msg_ps
->
vb_±r
->
idít_Àn
 - 4,

713 
msg_ps
->
vb_±r
->
idít
 + 4, &
≈
);

716 i‡(
mn
 !
NULL
)

718 i‡(
mn
->
node_ty≥
 =
MIB_NODE_EX
)

721 
mib_exã∫Æ_node
 *
í
 = (mib_exã∫Æ_node*)
mn
;

723 
msg_ps
->
°©e
 = 
SNMP_MSG_EXTERNAL_GET_OBJDEF_S
;

725 
msg_ps
->
ext_mib_node
 = 
í
;

726 
msg_ps
->
ext_«me_±r
 = 
≈
;

728 
í
->
	`gë_obje˘_def_q
”n->
addr_öf
, 
ªque°_id
, 
≈
.
idít_Àn
,Çp.
idít
);

733 
obj_def
 
obje˘_def
;

735 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_GET_OBJDEF_S
;

736 
mn
->
	`gë_obje˘_def
(
≈
.
idít_Àn
,Çp.
idít
, &
obje˘_def
);

737 
msg_ps
->
°©e
 = 
SNMP_MSG_INTERNAL_SET_VALUE
;

738 
mn
->
	`£t_vÆue
(&
obje˘_def
,
msg_ps
->
vb_±r
->
vÆue_Àn
,msg_ps->vb_±r->
vÆue
);

739 
msg_ps
->
vb_idx
 += 1;

743 i‡((
msg_ps
->
°©e
 =
SNMP_MSG_INTERNAL_SET_VALUE
) &&

744 (
msg_ps
->
vb_idx
 =msg_ps->
övb
.
cou¡
))

749 
msg_ps
->
outvb
 = msg_ps->
övb
;

750 
msg_ps
->
övb
.
hód
 = 
NULL
;

751 
msg_ps
->
övb
.
èû
 = 
NULL
;

752 
msg_ps
->
övb
.
cou¡
 = 0;

753 
	`¢mp_ok_ª•⁄£
(
msg_ps
);

755 
	}
}

765 
	$¢mp_msg_evít
(
u8_t
 
ªque°_id
)

767 
¢mp_msg_p°©
 *
msg_ps
;

769 i‡(
ªque°_id
 < 
SNMP_CONCURRENT_REQUESTS
)

771 
msg_ps
 = &
msg_öput_li°
[
ªque°_id
];

772 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
)

774 
	`¢mp_msg_gë√xt_evít
(
ªque°_id
, 
msg_ps
);

776 i‡(
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
)

778 
	`¢mp_msg_gë_evít
(
ªque°_id
, 
msg_ps
);

780 if(
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

782 
	`¢mp_msg_£t_evít
(
ªque°_id
, 
msg_ps
);

785 
	}
}

790 
	$¢mp_ªcv
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
)

792 
udp_hdr
 *
udphdr
;

795 
	`LWIP_UNUSED_ARG
(
¨g
);

797 if(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)){

798 
	`LWIP_ASSERT
("Can't moveÅo UDP header", 0);

799 
	`pbuf_‰ì
(
p
);

802 
udphdr
 = 
p
->
∑ylﬂd
;

805 i‡((
pcb
 =
¢mp1_pcb
Ë&& (
	`¡ohs
(
udphdr
->
de°
Ë=
SNMP_IN_PORT
))

807 
¢mp_msg_p°©
 *
msg_ps
;

808 
u8_t
 
ªq_idx
;

811 
msg_ps
 = &
msg_öput_li°
[0];

812 
ªq_idx
 = 0;

813 (
ªq_idx
<
SNMP_CONCURRENT_REQUESTS
Ë&& (
msg_ps
->
°©e
 !
SNMP_MSG_EMPTY
))

815 
ªq_idx
++;

816 
msg_ps
++;

818 i‡(
ªq_idx
 !
SNMP_CONCURRENT_REQUESTS
)

820 
îr_t
 
îr_ªt
;

821 
u16_t
 
∑ylﬂd_Àn
;

822 
u16_t
 
∑ylﬂd_ofs
;

823 
u16_t
 
v¨böd_ofs
 = 0;

826 
	`¢mp_öc_¢mpöpkts
();

828 
msg_ps
->
pcb
 =Öcb;

830 
msg_ps
->
sù
 = *
addr
;

832 
msg_ps
->
•
 = 
p‹t
;

834 
∑ylﬂd_Àn
 = 
	`¡ohs
(
udphdr
->
Àn
Ë- 
UDP_HLEN
;

837 
∑ylﬂd_ofs
 = 
UDP_HLEN
;

840 
îr_ªt
 = 
	`¢mp_pdu_hódî_check
(
p
, 
∑ylﬂd_ofs
, 
∑ylﬂd_Àn
, &
v¨böd_ofs
, 
msg_ps
);

841 i‡(((
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_REQ
) ||

842 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_GET_NEXT_REQ
) ||

843 (
msg_ps
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)) &&

844 ((
msg_ps
->
îr‹_°©us
 =
SNMP_ES_NOERROR
) &&

845 (
msg_ps
->
îr‹_ödex
 == 0)) )

848 
îr_ªt
 =Érr_ret;

853 
îr_ªt
 = 
ERR_ARG
;

855 i‡(
îr_ªt
 =
ERR_OK
)

857 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv ok, communôy %s\n", 
msg_ps
->
communôy
));

861 
îr_ªt
 = 
	`¢mp_pdu_dec_v¨bödli°
(
p
, 
v¨böd_ofs
, &v¨böd_ofs, 
msg_ps
);

862 i‡((
îr_ªt
 =
ERR_OK
Ë&& (
msg_ps
->
övb
.
cou¡
 > 0))

865 
	`pbuf_‰ì
(
p
);

867 
msg_ps
->
îr‹_°©us
 = 
SNMP_ES_NOERROR
;

868 
msg_ps
->
îr‹_ödex
 = 0;

870 
msg_ps
->
°©e
 = 
SNMP_MSG_SEARCH_OBJ
;

872 
msg_ps
->
vb_idx
 = 0;

874 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("¢mp_ªcv v¨böd c¡=%"
U16_F
"\n",(
u16_t
)
msg_ps
->
övb
.
cou¡
));

877 
	`¢mp_msg_evít
(
ªq_idx
);

884 
	`pbuf_‰ì
(
p
);

885 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_dec_varbindlist() failed\n"));

892 
	`pbuf_‰ì
(
p
);

893 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_pdu_header_check() failed\n"));

899 
	`pbuf_‰ì
(
p
);

905 
	`pbuf_‰ì
(
p
);

907 
	}
}

921 
îr_t


922 
	$¢mp_pdu_hódî_check
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
pdu_Àn
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

924 
îr_t
 
dîr
;

925 
u16_t
 
Àn
, 
ofs_ba£
;

926 
u8_t
 
Àn_o˘ës
;

927 
u8_t
 
ty≥
;

928 
s32_t
 
vîsi⁄
;

930 
ofs_ba£
 = 
ofs
;

931 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

932 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

933 i‡((
dîr
 !
ERR_OK
) ||

934 (
pdu_Àn
 !(1 + 
Àn_o˘ës
 + 
Àn
)) ||

935 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

937 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

938  
ERR_ARG
;

940 
ofs
 +(1 + 
Àn_o˘ës
);

941 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

942 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

943 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

946 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

947  
ERR_ARG
;

949 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
vîsi⁄
);

950 i‡(
dîr
 !
ERR_OK
)

953 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

954  
ERR_ARG
;

956 i‡(
vîsi⁄
 != 0)

959 
	`¢mp_öc_¢mpöbadvîsi⁄s
();

960  
ERR_ARG
;

962 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

963 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

964 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

965 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
)))

968 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

969  
ERR_ARG
;

971 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
SNMP_COMMUNITY_STR_LEN
, 
m_°©
->
communôy
);

972 i‡(
dîr
 !
ERR_OK
)

974 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

975  
ERR_ARG
;

978 
Àn
 = (÷í < (
SNMP_COMMUNITY_STR_LEN
))?(len):(SNMP_COMMUNITY_STR_LEN));

979 
m_°©
->
communôy
[
Àn
] = 0;

980 
m_°©
->
com_°æí
 = 
Àn
;

981 i‡(
	`°∫cmp
(
¢mp_publiccommunôy
, (c⁄° *)
m_°©
->
communôy
, 
SNMP_COMMUNITY_STR_LEN
) != 0)

984 
	`¢mp_öc_¢mpöbadcommunôy«mes
();

985 
	`¢mp_authÁû_å≠
();

986  
ERR_ARG
;

988 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

989 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

990 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

991 i‡(
dîr
 !
ERR_OK
)

993 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

994  
ERR_ARG
;

996 
ty≥
)

998 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_REQ
):

1000 
	`¢mp_öc_¢mpögëªque°s
();

1001 
dîr
 = 
ERR_OK
;

1003 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_NEXT_REQ
):

1005 
	`¢mp_öc_¢mpögë√xts
();

1006 
dîr
 = 
ERR_OK
;

1008 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
):

1010 
	`¢mp_öc_¢mpögëª•⁄£s
();

1011 
dîr
 = 
ERR_ARG
;

1013 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_SET_REQ
):

1015 
	`¢mp_öc_¢mpö£åeque°s
();

1016 
dîr
 = 
ERR_OK
;

1018 (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
):

1020 
	`¢mp_öc_¢mpöå≠s
();

1021 
dîr
 = 
ERR_ARG
;

1024 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1025 
dîr
 = 
ERR_ARG
;

1028 i‡(
dîr
 !
ERR_OK
)

1031  
ERR_ARG
;

1033 
m_°©
->
π
 = 
ty≥
 & 0x1F;

1034 
ofs
 +(1 + 
Àn_o˘ës
);

1035 i‡(
Àn
 !(
pdu_Àn
 - (
ofs
 - 
ofs_ba£
)))

1038 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1039  
ERR_ARG
;

1041 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1042 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1043 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1046 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1047  
ERR_ARG
;

1049 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
rid
);

1050 i‡(
dîr
 !
ERR_OK
)

1053 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1054  
ERR_ARG
;

1056 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1057 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1058 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1059 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1062 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1063  
ERR_ARG
;

1067 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_°©us
);

1068 i‡(
dîr
 !
ERR_OK
)

1071 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1072  
ERR_ARG
;

1074 
m_°©
->
îr‹_°©us
)

1076 
SNMP_ES_TOOBIG
:

1077 
	`¢mp_öc_¢mpötoobigs
();

1079 
SNMP_ES_NOSUCHNAME
:

1080 
	`¢mp_öc_¢mpönosuch«mes
();

1082 
SNMP_ES_BADVALUE
:

1083 
	`¢mp_öc_¢mpöbadvÆues
();

1085 
SNMP_ES_READONLY
:

1086 
	`¢mp_öc_¢mpöªad⁄lys
();

1088 
SNMP_ES_GENERROR
:

1089 
	`¢mp_öc_¢mpögíîrs
();

1092 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1093 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1094 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1095 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
)))

1098 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1099  
ERR_ARG
;

1103 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
m_°©
->
îr‹_ödex
);

1104 i‡(
dîr
 !
ERR_OK
)

1107 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1108  
ERR_ARG
;

1110 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1111 *
ofs_ªt
 = 
ofs
;

1112  
ERR_OK
;

1113 
	}
}

1115 
îr_t


1116 
	$¢mp_pdu_dec_v¨bödli°
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à*
ofs_ªt
, 
¢mp_msg_p°©
 *
m_°©
)

1118 
îr_t
 
dîr
;

1119 
u16_t
 
Àn
, 
vb_Àn
;

1120 
u8_t
 
Àn_o˘ës
;

1121 
u8_t
 
ty≥
;

1124 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1125 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
vb_Àn
);

1126 i‡((
dîr
 !
ERR_OK
) ||

1127 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)))

1129 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1130  
ERR_ARG
;

1132 
ofs
 +(1 + 
Àn_o˘ës
);

1135 
m_°©
->
övb
.
cou¡
 = 0;

1136 
m_°©
->
övb
.
hód
 = 
NULL
;

1137 
m_°©
->
övb
.
èû
 = 
NULL
;

1139 
vb_Àn
 > 0)

1141 
¢mp_obj_id
 
oid
, 
oid_vÆue
;

1142 
¢mp_v¨böd
 *
vb
;

1144 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1145 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1146 i‡((
dîr
 !
ERR_OK
) ||

1147 (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
)) ||

1148 (
Àn
 =0Ë|| (À¿> 
vb_Àn
))

1150 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1152 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1153  
ERR_ARG
;

1155 
ofs
 +(1 + 
Àn_o˘ës
);

1156 
vb_Àn
 -(1 + 
Àn_o˘ës
);

1158 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1159 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1160 i‡((
dîr
 !
ERR_OK
Ë|| (
ty≥
 !(
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
)))

1163 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1165 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1166  
ERR_ARG
;

1168 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid
);

1169 i‡(
dîr
 !
ERR_OK
)

1172 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1174 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1175  
ERR_ARG
;

1177 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1178 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1180 
	`¢mp_a¢1_dec_ty≥
(
p
, 
ofs
, &
ty≥
);

1181 
dîr
 = 
	`¢mp_a¢1_dec_Àngth
(
p
, 
ofs
+1, &
Àn_o˘ës
, &
Àn
);

1182 i‡(
dîr
 !
ERR_OK
)

1185 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1187 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1188  
ERR_ARG
;

1191 
ty≥
)

1193 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

1194 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
s32_t
));

1195 i‡(
vb
 !
NULL
)

1197 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1199 
dîr
 = 
	`¢mp_a¢1_dec_s32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1200 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1204 
dîr
 = 
ERR_ARG
;

1207 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

1208 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

1209 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

1210 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, (
u32_t
));

1211 i‡(
vb
 !
NULL
)

1213 
u32_t
 *
v±r
 = 
vb
->
vÆue
;

1215 
dîr
 = 
	`¢mp_a¢1_dec_u32t
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
v±r
);

1216 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1220 
dîr
 = 
ERR_ARG
;

1223 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

1224 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

1225 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
Àn
);

1226 i‡(
vb
 !
NULL
)

1228 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1229 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1233 
dîr
 = 
ERR_ARG
;

1236 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

1237 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 0);

1238 i‡(
vb
 !
NULL
)

1240 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1241 
dîr
 = 
ERR_OK
;

1245 
dîr
 = 
ERR_ARG
;

1248 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

1249 
dîr
 = 
	`¢mp_a¢1_dec_oid
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, &
oid_vÆue
);

1250 i‡(
dîr
 =
ERR_OK
)

1252 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 
oid_vÆue
.
Àn
 * (
s32_t
));

1253 i‡(
vb
 !
NULL
)

1255 
u8_t
 
i
 = 
oid_vÆue
.
Àn
;

1256 
s32_t
 *
v±r
 = 
vb
->
vÆue
;

1258 
i
 > 0)

1260 
i
--;

1261 
v±r
[
i
] = 
oid_vÆue
.
id
[i];

1263 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1264 
dîr
 = 
ERR_OK
;

1268 
dîr
 = 
ERR_ARG
;

1272 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

1273 i‡(
Àn
 == 4)

1276 
vb
 = 
	`¢mp_v¨böd_Æloc
(&
oid
, 
ty≥
, 4);

1277 i‡(
vb
 !
NULL
)

1279 
dîr
 = 
	`¢mp_a¢1_dec_øw
(
p
, 
ofs
 + 1 + 
Àn_o˘ës
, 
Àn
, 
vb
->
vÆue_Àn
, vb->
vÆue
);

1280 
	`¢mp_v¨böd_èû_add
(&
m_°©
->
övb
, 
vb
);

1284 
dîr
 = 
ERR_ARG
;

1289 
dîr
 = 
ERR_ARG
;

1293 
dîr
 = 
ERR_ARG
;

1296 i‡(
dîr
 !
ERR_OK
)

1298 
	`¢mp_öc_¢mpöa¢∑r£îrs
();

1300 
	`¢mp_v¨böd_li°_‰ì
(&
m_°©
->
övb
);

1301  
ERR_ARG
;

1303 
ofs
 +(1 + 
Àn_o˘ës
 + 
Àn
);

1304 
vb_Àn
 -(1 + 
Àn_o˘ës
 + 
Àn
);

1307 i‡(
m_°©
->
π
 =
SNMP_ASN1_PDU_SET_REQ
)

1309 
	`¢mp_add_¢mpötŸÆ£tv¨s
(
m_°©
->
övb
.
cou¡
);

1313 
	`¢mp_add_¢mpötŸÆªqv¨s
(
m_°©
->
övb
.
cou¡
);

1316 *
ofs_ªt
 = 
ofs
;

1317  
ERR_OK
;

1318 
	}
}

1320 
¢mp_v¨böd
*

1321 
	$¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
)

1323 
¢mp_v¨böd
 *
vb
;

1325 
vb
 = (
¢mp_v¨böd
 *)
	`mem_mÆloc
((snmp_varbind));

1326 
	`LWIP_ASSERT
("vb !NULL",
vb
 !
NULL
);

1327 i‡(
vb
 !
NULL
)

1329 
u8_t
 
i
;

1331 
vb
->
√xt
 = 
NULL
;

1332 
vb
->
¥ev
 = 
NULL
;

1333 
i
 = 
oid
->
Àn
;

1334 
vb
->
idít_Àn
 = 
i
;

1335 i‡(
i
 > 0)

1338 
vb
->
idít
 = (
s32_t
*)
	`mem_mÆloc
((s32_tË* 
i
);

1339 
	`LWIP_ASSERT
("vb->idíà!NULL",
vb
->
idít
 !
NULL
);

1340 i‡(
vb
->
idít
 =
NULL
)

1342 
	`mem_‰ì
(
vb
);

1343  
NULL
;

1345 
i
 > 0)

1347 
i
--;

1348 
vb
->
idít
[
i
] = 
oid
->
id
[i];

1354 
vb
->
idít
 = 
NULL
;

1356 
vb
->
vÆue_ty≥
 = 
ty≥
;

1357 
vb
->
vÆue_Àn
 = 
Àn
;

1358 i‡(
Àn
 > 0)

1361 
vb
->
vÆue
 = 
	`mem_mÆloc
(
Àn
);

1362 
	`LWIP_ASSERT
("vb->vÆuê!NULL",
vb
->
vÆue
 !
NULL
);

1363 i‡(
vb
->
vÆue
 =
NULL
)

1365 i‡(
vb
->
idít
 !
NULL
)

1367 
	`mem_‰ì
(
vb
->
idít
);

1369 
	`mem_‰ì
(
vb
);

1370  
NULL
;

1376 
vb
->
vÆue
 = 
NULL
;

1379  
vb
;

1380 
	}
}

1383 
	$¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
)

1385 i‡(
vb
->
vÆue
 !
NULL
 )

1387 
	`mem_‰ì
(
vb
->
vÆue
);

1389 i‡(
vb
->
idít
 !
NULL
 )

1391 
	`mem_‰ì
(
vb
->
idít
);

1393 
	`mem_‰ì
(
vb
);

1394 
	}
}

1397 
	$¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1399 
¢mp_v¨böd
 *
vb
, *
¥ev
;

1401 
vb
 = 
roŸ
->
èû
;

1402  
vb
 !
NULL
 )

1404 
¥ev
 = 
vb
->prev;

1405 
	`¢mp_v¨böd_‰ì
(
vb
);

1406 
vb
 = 
¥ev
;

1408 
roŸ
->
cou¡
 = 0;

1409 
roŸ
->
hód
 = 
NULL
;

1410 
roŸ
->
èû
 = 
NULL
;

1411 
	}
}

1414 
	$¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
)

1416 i‡(
roŸ
->
cou¡
 == 0)

1419 
roŸ
->
hód
 = 
vb
;

1420 
roŸ
->
èû
 = 
vb
;

1425 
roŸ
->
èû
->
√xt
 = 
vb
;

1426 
vb
->
¥ev
 = 
roŸ
->
èû
;

1427 
roŸ
->
èû
 = 
vb
;

1429 
roŸ
->
cou¡
 += 1;

1430 
	}
}

1432 
¢mp_v¨böd
*

1433 
	$¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
)

1435 
¢mp_v¨böd
* 
vb
;

1437 i‡(
roŸ
->
cou¡
 > 0)

1440 
vb
 = 
roŸ
->
èû
;

1441 
roŸ
->
èû
 = 
vb
->
¥ev
;

1442 
vb
->
¥ev
->
√xt
 = 
NULL
;

1443 
roŸ
->
cou¡
 -= 1;

1448 
vb
 = 
NULL
;

1450  
vb
;

1451 
	}
}

	@net/lwip/core/snmp/msg_out.c

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_SNMP


49 
	~"lwù/udp.h
"

50 
	~"lwù/√tif.h
"

51 
	~"lwù/¢mp.h
"

52 
	~"lwù/¢mp_a¢1.h
"

53 
	~"lwù/¢mp_msg.h
"

55 
	s¢mp_å≠_d°


58 
ù_addr
 
	mdù
;

60 
u8_t
 
	míabÀ
;

62 
¢mp_å≠_d°
 
	gå≠_d°
[
SNMP_TRAP_DESTINATIONS
];

65 
¢mp_msg_å≠
 
	gå≠_msg
;

67 
u16_t
 
¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, u16_à
vb_Àn
);

68 
u16_t
 
¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, u16_à
vb_Àn
);

69 
u16_t
 
¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
);

71 
u16_t
 
¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
);

72 
u16_t
 
¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
);

73 
u16_t
 
¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, u16_à
ofs
);

81 
	$¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
)

83 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

85 
å≠_d°
[
d°_idx
].
íabÀ
 =Énable;

87 
	}
}

95 
	$¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
)

97 i‡(
d°_idx
 < 
SNMP_TRAP_DESTINATIONS
)

99 
å≠_d°
[
d°_idx
].
dù
.
addr
 = 
	`ht⁄l
(
d°
->addr);

101 
	}
}

112 
îr_t


113 
	$¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
)

115 
¢mp_v¨böd_roŸ
 
em±yvb
 = {
NULL
, NULL, 0, 0, 0};

116 
pbuf
 *
p
;

117 
u16_t
 
tŸ_Àn
;

118 
îr_t
 
îr
;

121 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
m_°©
->
outvb
);

122 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

125 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

126 i‡(
p
 =
NULL
)

128 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()ÅooBig\n"));

131 
m_°©
->
îr‹_°©us
 = 
SNMP_ES_TOOBIG
;

132 
m_°©
->
îr‹_ödex
 = 0;

134 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
em±yvb
);

135 
tŸ_Àn
 = 
	`¢mp_ª•_hódî_sum
(
m_°©
,Åot_len);

137 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

139 i‡(
p
 !
NULL
)

142 
u16_t
 
ofs
;

144 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response()Ö != NULL\n"));

147 
ofs
 = 
	`¢mp_ª•_hódî_íc
(
m_°©
, 
p
);

148 i‡(
m_°©
->
îr‹_°©us
 =
SNMP_ES_TOOBIG
)

150 
	`¢mp_v¨böd_li°_íc
(&
em±yvb
, 
p
, 
ofs
);

154 
	`¢mp_v¨böd_li°_íc
(&
m_°©
->
outvb
, 
p
, 
ofs
);

157 
m_°©
->
îr‹_°©us
)

159 
SNMP_ES_TOOBIG
:

160 
	`¢mp_öc_¢mpouâoobigs
();

162 
SNMP_ES_NOSUCHNAME
:

163 
	`¢mp_öc_¢mpouäosuch«mes
();

165 
SNMP_ES_BADVALUE
:

166 
	`¢mp_öc_¢mpoutbadvÆues
();

168 
SNMP_ES_GENERROR
:

169 
	`¢mp_öc_¢mpoutgíîrs
();

172 
	`¢mp_öc_¢mpoutgëª•⁄£s
();

173 
	`¢mp_öc_¢mpouçkts
();

177 
	`udp_c⁄√˘
(
m_°©
->
pcb
, &m_°©->
sù
, m_°©->
•
);

178 
îr
 = 
	`udp_£nd
(
m_°©
->
pcb
, 
p
);

179 i‡(
îr
 =
ERR_MEM
)

182 
îr
 = 
ERR_MEM
;

186 
îr
 = 
ERR_OK
;

189 
	`udp_disc⁄√˘
(
m_°©
->
pcb
);

191 
	`pbuf_‰ì
(
p
);

192 
	`LWIP_DEBUGF
(
SNMP_MSG_DEBUG
, ("snmp_snd_response() done\n"));

193  
îr
;

199  
ERR_MEM
;

201 
	}
}

219 
îr_t


220 
	$¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
)

222 
¢mp_å≠_d°
 *
td
;

223 
√tif
 *
d°_if
;

224 
ù_addr
 
d°_ù
;

225 
pbuf
 *
p
;

226 
u16_t
 
i
,
tŸ_Àn
;

228 
i
=0, 
td
 = &
å≠_d°
[0]; i<
SNMP_TRAP_DESTINATIONS
; i++,Åd++)

230 i‡((
td
->
íabÀ
 !0Ë&& (td->
dù
.
addr
 != 0))

233 
å≠_msg
.
dù
.
addr
 = 
td
->dip.addr;

235 
d°_if
 = 
	`ù_rouã
(&
td
->
dù
);

236 
d°_ù
.
addr
 = 
	`¡ohl
(
d°_if
->
ù_addr
.addr);

237 
å≠_msg
.
sù_øw
[0] = 
d°_ù
.
addr
 >> 24;

238 
å≠_msg
.
sù_øw
[1] = 
d°_ù
.
addr
 >> 16;

239 
å≠_msg
.
sù_øw
[2] = 
d°_ù
.
addr
 >> 8;

240 
å≠_msg
.
sù_øw
[3] = 
d°_ù
.
addr
;

241 
å≠_msg
.
gí_å≠
 = 
gíîic_å≠
;

242 
å≠_msg
.
•c_å≠
 = 
•ecific_å≠
;

243 i‡(
gíîic_å≠
 =
SNMP_GENTRAP_ENTERPRISESPC
)

246 
å≠_msg
.
íãΩri£
 = 
eoid
;

251 
	`¢mp_gë_¢mpgΩid_±r
(&
å≠_msg
.
íãΩri£
);

253 
	`¢mp_gë_sysu±ime
(&
å≠_msg
.
ts
);

256 
tŸ_Àn
 = 
	`¢mp_v¨böd_li°_sum
(&
å≠_msg
.
outvb
);

257 
tŸ_Àn
 = 
	`¢mp_å≠_hódî_sum
(&
å≠_msg
,Åot_len);

260 
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
tŸ_Àn
, 
PBUF_POOL
);

261 i‡(
p
 !
NULL
)

263 
u16_t
 
ofs
;

266 
ofs
 = 
	`¢mp_å≠_hódî_íc
(&
å≠_msg
, 
p
);

267 
	`¢mp_v¨böd_li°_íc
(&
å≠_msg
.
outvb
, 
p
, 
ofs
);

269 
	`¢mp_öc_¢mpouâøps
();

270 
	`¢mp_öc_¢mpouçkts
();

273 
	`udp_c⁄√˘
(
å≠_msg
.
pcb
, &å≠_msg.
dù
, 
SNMP_TRAP_PORT
);

274 
	`udp_£nd
(
å≠_msg
.
pcb
, 
p
);

276 
	`udp_disc⁄√˘
(
å≠_msg
.
pcb
);

278 
	`pbuf_‰ì
(
p
);

282  
ERR_MEM
;

286  
ERR_OK
;

287 
	}
}

290 
	$¢mp_cﬁd°¨t_å≠
()

292 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

293 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

294 
å≠_msg
.
outvb
.
cou¡
 = 0;

295 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_COLDSTART
, 
NULL
, 0);

296 
	}
}

299 
	$¢mp_authÁû_å≠
()

301 
u8_t
 
íabÀ
;

302 
	`¢mp_gë_¢m≥«bÀauthíå≠s
(&
íabÀ
);

303 i‡(
íabÀ
 == 1)

305 
å≠_msg
.
outvb
.
hód
 = 
NULL
;

306 
å≠_msg
.
outvb
.
èû
 = 
NULL
;

307 
å≠_msg
.
outvb
.
cou¡
 = 0;

308 
	`¢mp_£nd_å≠
(
SNMP_GENTRAP_AUTHFAIL
, 
NULL
, 0);

310 
	}
}

320 
u16_t


321 
	$¢mp_ª•_hódî_sum
(
¢mp_msg_p°©
 *
m_°©
, 
u16_t
 
vb_Àn
)

323 
u16_t
 
tŸ_Àn
;

324 
¢mp_ª•_hódî_Àngths
 *
rhl
;

326 
rhl
 = &
m_°©
->rhl;

327 
tŸ_Àn
 = 
vb_Àn
;

328 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_ödex
, &
rhl
->
îridxÀn
);

329 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îridxÀn
, &rhl->
îridxÀ∆í
);

330 
tŸ_Àn
 +1 + 
rhl
->
îridxÀ∆í
 +Ñhl->
îridxÀn
;

332 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
îr‹_°©us
, &
rhl
->
îr°©Àn
);

333 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
îr°©Àn
, &rhl->
îr°©À∆í
);

334 
tŸ_Àn
 +1 + 
rhl
->
îr°©À∆í
 +Ñhl->
îr°©Àn
;

336 
	`¢mp_a¢1_íc_s32t_˙t
(
m_°©
->
rid
, &
rhl
->
ridÀn
);

337 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
ridÀn
, &rhl->
ridÀ∆í
);

338 
tŸ_Àn
 +1 + 
rhl
->
ridÀ∆í
 +Ñhl->
ridÀn
;

340 
rhl
->
pduÀn
 = 
tŸ_Àn
;

341 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
pduÀn
, &rhl->
pduÀ∆í
);

342 
tŸ_Àn
 +1 + 
rhl
->
pduÀ∆í
;

344 
rhl
->
comÀn
 = 
m_°©
->
com_°æí
;

345 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
comÀn
, &rhl->
comÀ∆í
);

346 
tŸ_Àn
 +1 + 
rhl
->
comÀ∆í
 +Ñhl->
comÀn
;

348 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
rhl
->
vîÀn
);

349 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
vîÀn
, &rhl->
vîÀ∆í
);

350 
tŸ_Àn
 +1 + 
rhl
->
vîÀn
 +Ñhl->
vîÀ∆í
;

352 
rhl
->
£qÀn
 = 
tŸ_Àn
;

353 
	`¢mp_a¢1_íc_Àngth_˙t
(
rhl
->
£qÀn
, &rhl->
£qÀ∆í
);

354 
tŸ_Àn
 +1 + 
rhl
->
£qÀ∆í
;

356  
tŸ_Àn
;

357 
	}
}

367 
u16_t


368 
	$¢mp_å≠_hódî_sum
(
¢mp_msg_å≠
 *
m_å≠
, 
u16_t
 
vb_Àn
)

370 
u16_t
 
tŸ_Àn
;

371 
¢mp_å≠_hódî_Àngths
 *
thl
;

373 
thl
 = &
m_å≠
->thl;

374 
tŸ_Àn
 = 
vb_Àn
;

376 
	`¢mp_a¢1_íc_u32t_˙t
(
m_å≠
->
ts
, &
thl
->
t¶í
);

377 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
t¶í
, &thl->
t¶íÀn
);

378 
tŸ_Àn
 +1 + 
thl
->
t¶í
 +Åhl->
t¶íÀn
;

380 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
•c_å≠
, &
thl
->
°ΩÀn
);

381 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
°ΩÀn
, &thl->
°ΩÀ∆í
);

382 
tŸ_Àn
 +1 + 
thl
->
°ΩÀn
 +Åhl->
°ΩÀ∆í
;

384 
	`¢mp_a¢1_íc_s32t_˙t
(
m_å≠
->
gí_å≠
, &
thl
->
gå∂í
);

385 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
gå∂í
, &thl->
gå∂íÀn
);

386 
tŸ_Àn
 +1 + 
thl
->
gå∂í
 +Åhl->
gå∂íÀn
;

388 
thl
->
Øddæí
 = 4;

389 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
Øddæí
, &thl->
ØddæíÀn
);

390 
tŸ_Àn
 +1 + 
thl
->
Øddæí
 +Åhl->
ØddæíÀn
;

392 
	`¢mp_a¢1_íc_oid_˙t
(
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0], &
thl
->
eidÀn
);

393 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
eidÀn
, &thl->
eidÀ∆í
);

394 
tŸ_Àn
 +1 + 
thl
->
eidÀn
 +Åhl->
eidÀ∆í
;

396 
thl
->
pduÀn
 = 
tŸ_Àn
;

397 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
pduÀn
, &thl->
pduÀ∆í
);

398 
tŸ_Àn
 +1 + 
thl
->
pduÀ∆í
;

400 
thl
->
comÀn
 = (
¢mp_publiccommunôy
) - 1;

401 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
comÀn
, &thl->
comÀ∆í
);

402 
tŸ_Àn
 +1 + 
thl
->
comÀ∆í
 +Åhl->
comÀn
;

404 
	`¢mp_a¢1_íc_s32t_˙t
(
¢mp_vîsi⁄
, &
thl
->
vîÀn
);

405 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
vîÀn
, &thl->
vîÀ∆í
);

406 
tŸ_Àn
 +1 + 
thl
->
vîÀn
 +Åhl->
vîÀ∆í
;

408 
thl
->
£qÀn
 = 
tŸ_Àn
;

409 
	`¢mp_a¢1_íc_Àngth_˙t
(
thl
->
£qÀn
, &thl->
£qÀ∆í
);

410 
tŸ_Àn
 +1 + 
thl
->
£qÀ∆í
;

412  
tŸ_Àn
;

413 
	}
}

422 
u16_t


423 
	$¢mp_v¨böd_li°_sum
(
¢mp_v¨böd_roŸ
 *
roŸ
)

425 
¢mp_v¨böd
 *
vb
;

426 
u32_t
 *
uöt_±r
;

427 
s32_t
 *
söt_±r
;

428 
u16_t
 
tŸ_Àn
;

430 
tŸ_Àn
 = 0;

431 
vb
 = 
roŸ
->
èû
;

432  
vb
 !
NULL
 )

435 
vb
->
vÆue_ty≥
)

437 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

438 
söt_±r
 = 
vb
->
vÆue
;

439 
	`¢mp_a¢1_íc_s32t_˙t
(*
söt_±r
, &
vb
->
vÀn
);

441 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

442 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

443 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

444 
uöt_±r
 = 
vb
->
vÆue
;

445 
	`¢mp_a¢1_íc_u32t_˙t
(*
uöt_±r
, &
vb
->
vÀn
);

447 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

448 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

449 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

450 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

451 
vb
->
vÀn
 = vb->
vÆue_Àn
;

453 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

454 
söt_±r
 = 
vb
->
vÆue
;

455 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
, &vb->
vÀn
);

459 
vb
->
vÀn
 = 0;

463 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
vÀn
, &vb->
vÀ∆í
);

464 
	`¢mp_a¢1_íc_oid_˙t
(
vb
->
idít_Àn
, vb->
idít
, &vb->
ﬁí
);

465 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
ﬁí
, &vb->
ﬁíÀn
);

467 
vb
->
£qÀn
 = 1 + vb->
vÀ∆í
 + vb->
vÀn
;

468 
vb
->
£qÀn
 +1 + vb->
ﬁíÀn
 + vb->
ﬁí
;

469 
	`¢mp_a¢1_íc_Àngth_˙t
(
vb
->
£qÀn
, &vb->
£qÀ∆í
);

472 
tŸ_Àn
 +1 + 
vb
->
£qÀ∆í
 + vb->
£qÀn
;

474 
vb
 = vb->
¥ev
;

478 
roŸ
->
£qÀn
 = 
tŸ_Àn
;

479 
	`¢mp_a¢1_íc_Àngth_˙t
(
roŸ
->
£qÀn
, &roŸ->
£qÀ∆í
);

480 
tŸ_Àn
 +1 + 
roŸ
->
£qÀ∆í
;

482  
tŸ_Àn
;

483 
	}
}

488 
u16_t


489 
	$¢mp_ª•_hódî_íc
(
¢mp_msg_p°©
 *
m_°©
, 
pbuf
 *
p
)

491 
u16_t
 
ofs
;

493 
ofs
 = 0;

494 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

495 
ofs
 += 1;

496 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
£qÀn
);

497 
ofs
 +
m_°©
->
rhl
.
£qÀ∆í
;

499 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

500 
ofs
 += 1;

501 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
);

502 
ofs
 +
m_°©
->
rhl
.
vîÀ∆í
;

503 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
vîÀn
, 
¢mp_vîsi⁄
);

504 
ofs
 +
m_°©
->
rhl
.
vîÀn
;

506 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

507 
ofs
 += 1;

508 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
);

509 
ofs
 +
m_°©
->
rhl
.
comÀ∆í
;

510 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_°©
->
rhl
.
comÀn
, m_°©->
communôy
);

511 
ofs
 +
m_°©
->
rhl
.
comÀn
;

513 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_GET_RESP
));

514 
ofs
 += 1;

515 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
pduÀn
);

516 
ofs
 +
m_°©
->
rhl
.
pduÀ∆í
;

518 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

519 
ofs
 += 1;

520 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
);

521 
ofs
 +
m_°©
->
rhl
.
ridÀ∆í
;

522 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
ridÀn
, m_°©->
rid
);

523 
ofs
 +
m_°©
->
rhl
.
ridÀn
;

525 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

526 
ofs
 += 1;

527 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
);

528 
ofs
 +
m_°©
->
rhl
.
îr°©À∆í
;

529 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îr°©Àn
, m_°©->
îr‹_°©us
);

530 
ofs
 +
m_°©
->
rhl
.
îr°©Àn
;

532 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

533 
ofs
 += 1;

534 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
);

535 
ofs
 +
m_°©
->
rhl
.
îridxÀ∆í
;

536 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_°©
->
rhl
.
îridxÀn
, m_°©->
îr‹_ödex
);

537 
ofs
 +
m_°©
->
rhl
.
îridxÀn
;

539  
ofs
;

540 
	}
}

545 
u16_t


546 
	$¢mp_å≠_hódî_íc
(
¢mp_msg_å≠
 *
m_å≠
, 
pbuf
 *
p
)

548 
u16_t
 
ofs
;

550 
ofs
 = 0;

551 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

552 
ofs
 += 1;

553 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
£qÀn
);

554 
ofs
 +
m_å≠
->
thl
.
£qÀ∆í
;

556 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

557 
ofs
 += 1;

558 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
);

559 
ofs
 +
m_å≠
->
thl
.
vîÀ∆í
;

560 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
vîÀn
, 
¢mp_vîsi⁄
);

561 
ofs
 +
m_å≠
->
thl
.
vîÀn
;

563 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
));

564 
ofs
 += 1;

565 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
);

566 
ofs
 +
m_å≠
->
thl
.
comÀ∆í
;

567 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
comÀn
, (
u8_t
 *)&
¢mp_publiccommunôy
[0]);

568 
ofs
 +
m_å≠
->
thl
.
comÀn
;

570 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_CONTXT
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_PDU_TRAP
));

571 
ofs
 += 1;

572 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
pduÀn
);

573 
ofs
 +
m_å≠
->
thl
.
pduÀ∆í
;

575 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

576 
ofs
 += 1;

577 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
eidÀn
);

578 
ofs
 +
m_å≠
->
thl
.
eidÀ∆í
;

579 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
m_å≠
->
íãΩri£
->
Àn
, &m_å≠->íãΩri£->
id
[0]);

580 
ofs
 +
m_å≠
->
thl
.
eidÀn
;

582 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
));

583 
ofs
 += 1;

584 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
);

585 
ofs
 +
m_å≠
->
thl
.
ØddæíÀn
;

586 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
m_å≠
->
thl
.
Øddæí
, &m_å≠->
sù_øw
[0]);

587 
ofs
 +
m_å≠
->
thl
.
Øddæí
;

589 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

590 
ofs
 += 1;

591 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
);

592 
ofs
 +
m_å≠
->
thl
.
gå∂íÀn
;

593 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
gå∂í
, m_å≠->
gí_å≠
);

594 
ofs
 +
m_å≠
->
thl
.
gå∂í
;

596 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
));

597 
ofs
 += 1;

598 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
);

599 
ofs
 +
m_å≠
->
thl
.
°ΩÀ∆í
;

600 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
°ΩÀn
, m_å≠->
•c_å≠
);

601 
ofs
 +
m_å≠
->
thl
.
°ΩÀn
;

603 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
));

604 
ofs
 += 1;

605 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
);

606 
ofs
 +
m_å≠
->
thl
.
t¶íÀn
;

607 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
m_å≠
->
thl
.
t¶í
, m_å≠->
ts
);

608 
ofs
 +
m_å≠
->
thl
.
t¶í
;

610  
ofs
;

611 
	}
}

616 
u16_t


617 
	$¢mp_v¨böd_li°_íc
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
pbuf
 *
p
, 
u16_t
 
ofs
)

619 
¢mp_v¨böd
 *
vb
;

620 
s32_t
 *
söt_±r
;

621 
u32_t
 *
uöt_±r
;

622 
u8_t
 *
øw_±r
;

624 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

625 
ofs
 += 1;

626 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
roŸ
->
£qÀn
);

627 
ofs
 +
roŸ
->
£qÀ∆í
;

629 
vb
 = 
roŸ
->
hód
;

630  
vb
 !
NULL
 )

632 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_CONSTR
 | 
SNMP_ASN1_SEQ
));

633 
ofs
 += 1;

634 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
£qÀn
);

635 
ofs
 +
vb
->
£qÀ∆í
;

637 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
));

638 
ofs
 += 1;

639 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
ﬁí
);

640 
ofs
 +
vb
->
ﬁíÀn
;

641 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
idít_Àn
, &vb->
idít
[0]);

642 
ofs
 +
vb
->
ﬁí
;

644 
	`¢mp_a¢1_íc_ty≥
(
p
, 
ofs
, 
vb
->
vÆue_ty≥
);

645 
ofs
 += 1;

646 
	`¢mp_a¢1_íc_Àngth
(
p
, 
ofs
, 
vb
->
vÀn
);

647 
ofs
 +
vb
->
vÀ∆í
;

649 
vb
->
vÆue_ty≥
)

651 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_INTEG
):

652 
söt_±r
 = 
vb
->
vÆue
;

653 
	`¢mp_a¢1_íc_s32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
söt_±r
);

655 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_COUNTER
):

656 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_GAUGE
):

657 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_TIMETICKS
):

658 
uöt_±r
 = 
vb
->
vÆue
;

659 
	`¢mp_a¢1_íc_u32t
(
p
, 
ofs
, 
vb
->
vÀn
, *
uöt_±r
);

661 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OC_STR
):

662 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_IPADDR
):

663 (
SNMP_ASN1_APPLIC
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OPAQUE
):

664 
øw_±r
 = 
vb
->
vÆue
;

665 
	`¢mp_a¢1_íc_øw
(
p
, 
ofs
, 
vb
->
vÀn
, 
øw_±r
);

667 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_NUL
):

669 (
SNMP_ASN1_UNIV
 | 
SNMP_ASN1_PRIMIT
 | 
SNMP_ASN1_OBJ_ID
):

670 
söt_±r
 = 
vb
->
vÆue
;

671 
	`¢mp_a¢1_íc_oid
(
p
, 
ofs
, 
vb
->
vÆue_Àn
 / (
s32_t
), 
söt_±r
);

677 
ofs
 +
vb
->
vÀn
;

678 
vb
 = vb->
√xt
;

680  
ofs
;

681 
	}
}

	@net/lwip/core/stats.c

39 
	~"lwù/›t.h
"

41 #i‡
LWIP_STATS


43 
	~"lwù/def.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

47 
	~<°rög.h
>

49 
°©s_
 
	glwù_°©s
;

51 #i‡
LWIP_STATS_DISPLAY


53 
	$°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
)

55 
	`LWIP_PLATFORM_DIAG
(("\n%s\n\t", 
«me
));

56 
	`LWIP_PLATFORM_DIAG
(("xmô: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
xmô
));

57 
	`LWIP_PLATFORM_DIAG
(("ªcv: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
ªcv
));

58 
	`LWIP_PLATFORM_DIAG
(("fw: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
fw
));

59 
	`LWIP_PLATFORM_DIAG
(("dr›: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
dr›
));

60 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
chkîr
));

61 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
À√º
));

62 
	`LWIP_PLATFORM_DIAG
(("memîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
memîr
));

63 
	`LWIP_PLATFORM_DIAG
(("πîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
πîr
));

64 
	`LWIP_PLATFORM_DIAG
(("¥Ÿîr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
¥Ÿîr
));

65 
	`LWIP_PLATFORM_DIAG
(("›ãº: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
›ãº
));

66 
	`LWIP_PLATFORM_DIAG
(("îr: %"
STAT_COUNTER_F
"\n\t", 
¥Ÿo
->
îr
));

67 
	`LWIP_PLATFORM_DIAG
(("ˇchehô: %"
STAT_COUNTER_F
"\n", 
¥Ÿo
->
ˇchehô
));

68 
	}
}

70 #i‡
IGMP_STATS


72 
	$°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
)

74 
	`LWIP_PLATFORM_DIAG
(("\nIGMP\n\t"));

75 
	`LWIP_PLATFORM_DIAG
(("À√º: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
À√º
));

76 
	`LWIP_PLATFORM_DIAG
(("chkîr: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
chkîr
));

77 
	`LWIP_PLATFORM_DIAG
(("v1_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
v1_rxed
));

78 
	`LWIP_PLATFORM_DIAG
(("joö_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
joö_£¡
));

79 
	`LWIP_PLATFORM_DIAG
(("Àave_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
Àave_£¡
));

80 
	`LWIP_PLATFORM_DIAG
(("uniˇ°_quîy: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
uniˇ°_quîy
));

81 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_£¡: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_£¡
));

82 
	`LWIP_PLATFORM_DIAG
(("ªp‹t_rxed: %"
STAT_COUNTER_F
"\n\t", 
igmp
->
ªp‹t_rxed
));

83 
	`LWIP_PLATFORM_DIAG
(("group_quîy_rxed: %"
STAT_COUNTER_F
"\n", 
igmp
->
group_quîy_rxed
));

84 
	}
}

87 #i‡
MEM_STATS
 || 
MEMP_STATS


89 
	$°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
)

91 
	`LWIP_PLATFORM_DIAG
(("\nMEM %s\n\t", 
«me
));

92 
	`LWIP_PLATFORM_DIAG
(("avaû: %"
U32_F
"\n\t", (
u32_t
)
mem
->
avaû
));

93 
	`LWIP_PLATFORM_DIAG
(("u£d: %"
U32_F
"\n\t", (
u32_t
)
mem
->
u£d
));

94 
	`LWIP_PLATFORM_DIAG
(("max: %"
U32_F
"\n\t", (
u32_t
)
mem
->
max
));

95 
	`LWIP_PLATFORM_DIAG
(("îr: %"
U32_F
"\n", (
u32_t
)
mem
->
îr
));

96 
	}
}

98 #i‡
MEMP_STATS


100 
	$°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
)

102 * 
memp_«mes
[] = {

103 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ëdesc,

	)

104 
	~"lwù/memp_°d.h
"

106 if(
ödex
 < 
MEMP_MAX
) {

107 
	`°©s_di•œy_mem
(
mem
, 
memp_«mes
[
ödex
]);

109 
	}
}

113 #i‡
SYS_STATS


115 
	$°©s_di•œy_sys
(
°©s_sys
 *
sys
)

117 
	`LWIP_PLATFORM_DIAG
(("\nSYS\n\t"));

118 
	`LWIP_PLATFORM_DIAG
(("£m.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
u£d
));

119 
	`LWIP_PLATFORM_DIAG
(("£m.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
max
));

120 
	`LWIP_PLATFORM_DIAG
(("£m.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
£m
.
îr
));

121 
	`LWIP_PLATFORM_DIAG
(("mbox.u£d: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
u£d
));

122 
	`LWIP_PLATFORM_DIAG
(("mbox.max: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
max
));

123 
	`LWIP_PLATFORM_DIAG
(("mbox.îr: %"
U32_F
"\n\t", (
u32_t
)
sys
->
mbox
.
îr
));

124 
	}
}

128 
	$°©s_di•œy
()

130 
s16_t
 
i
;

132 
	`LINK_STATS_DISPLAY
();

133 
	`ETHARP_STATS_DISPLAY
();

134 
	`IPFRAG_STATS_DISPLAY
();

135 
	`IP_STATS_DISPLAY
();

136 
	`IGMP_STATS_DISPLAY
();

137 
	`ICMP_STATS_DISPLAY
();

138 
	`UDP_STATS_DISPLAY
();

139 
	`TCP_STATS_DISPLAY
();

140 
	`MEM_STATS_DISPLAY
();

141 
i
 = 0; i < 
MEMP_MAX
; i++) {

142 
	`MEMP_STATS_DISPLAY
(
i
);

144 
	`SYS_STATS_DISPLAY
();

145 
	}
}

	@net/lwip/core/sys.c

39 
	~"lwù/›t.h
"

41 #i‡(
NO_SYS
 == 0)

43 
	~"lwù/sys.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/memp.h
"

46 
	~"lwù/t˝ù.h
"

52 
	ssswt_cb


54 
s16_t
 
	mtimeÊag
;

55 
sys_£m_t
 *
	mp£m
;

66 
	$sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
)

68 
u32_t
 
time_√eded
;

69 
sys_timeouts
 *
timeouts
;

70 
sys_timeo
 *
tm±imeout
;

71 
sys_timeout_h™dÀr
 
h
;

72 *
¨g
;

74 
agaö
:

75 
timeouts
 = 
	`sys_¨ch_timeouts
();

77 i‡(!
timeouts
 || !timeouts->
√xt
) {

78 
	`UNLOCK_TCPIP_CORE
();

79 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 0);

80 
	`LOCK_TCPIP_CORE
();

82 i‡(
timeouts
->
√xt
->
time
 > 0) {

83 
	`UNLOCK_TCPIP_CORE
();

84 
time_√eded
 = 
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
timeouts
->
√xt
->
time
);

85 
	`LOCK_TCPIP_CORE
();

87 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

90 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

94 
tm±imeout
 = 
timeouts
->
√xt
;

95 
timeouts
->
√xt
 = 
tm±imeout
->next;

96 
h
 = 
tm±imeout
->h;

97 
¨g
 = 
tm±imeout
->arg;

98 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

99 i‡(
h
 !
NULL
) {

100 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sm‡ˇŒög h=%p(%p)\n", (*)&
h
, 
¨g
));

101 
	`h
(
¨g
);

105 
agaö
;

110 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

111 
timeouts
->
√xt
->
time
 -
time_√eded
;

113 
timeouts
->
√xt
->
time
 = 0;

117 
	}
}

126 
	$sys_£m_waô
(
sys_£m_t
 
£m
)

128 
u32_t
 
time_√eded
;

129 
sys_timeouts
 *
timeouts
;

130 
sys_timeo
 *
tm±imeout
;

131 
sys_timeout_h™dÀr
 
h
;

132 *
¨g
;

134 
agaö
:

136 
timeouts
 = 
	`sys_¨ch_timeouts
();

138 i‡(!
timeouts
 || !timeouts->
√xt
) {

139 
	`sys_¨ch_£m_waô
(
£m
, 0);

141 i‡(
timeouts
->
√xt
->
time
 > 0) {

142 
time_√eded
 = 
	`sys_¨ch_£m_waô
(
£m
, 
timeouts
->
√xt
->
time
);

144 
time_√eded
 = 
SYS_ARCH_TIMEOUT
;

147 i‡(
time_√eded
 =
SYS_ARCH_TIMEOUT
) {

151 
tm±imeout
 = 
timeouts
->
√xt
;

152 
timeouts
->
√xt
 = 
tm±imeout
->next;

153 
h
 = 
tm±imeout
->h;

154 
¨g
 = 
tm±imeout
->arg;

155 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
tm±imeout
);

156 i‡(
h
 !
NULL
) {

157 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("ssw h=%p(%p)\n", (*)&
h
, (*)
¨g
));

158 
	`h
(
¨g
);

162 
agaö
;

167 i‡(
time_√eded
 < 
timeouts
->
√xt
->
time
) {

168 
timeouts
->
√xt
->
time
 -
time_√eded
;

170 
timeouts
->
√xt
->
time
 = 0;

174 
	}
}

188 
	$sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
)

190 
sys_timeouts
 *
timeouts
;

191 
sys_timeo
 *
timeout
, *
t
;

193 
timeout
 = 
	`memp_mÆloc
(
MEMP_SYS_TIMEOUT
);

194 i‡(
timeout
 =
NULL
) {

195 
	`LWIP_ASSERT
("sys_timeout:Åimeouà!NULL", 
timeout
 !
NULL
);

198 
timeout
->
√xt
 = 
NULL
;

199 
timeout
->
h
 = h;

200 
timeout
->
¨g
 =árg;

201 
timeout
->
time
 = 
m£cs
;

203 
timeouts
 = 
	`sys_¨ch_timeouts
();

205 
	`LWIP_DEBUGF
(
SYS_DEBUG
, ("sys_timeout: %∞m£cs=%"
U32_F
" h=%párg=%p\n",

206 (*)
timeout
, 
m£cs
, (*)&
h
, (*)
¨g
));

208 i‡(
timeouts
 =
NULL
) {

209 
	`LWIP_ASSERT
("sys_timeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

213 i‡(
timeouts
->
√xt
 =
NULL
) {

214 
timeouts
->
√xt
 = 
timeout
;

218 i‡(
timeouts
->
√xt
->
time
 > 
m£cs
) {

219 
timeouts
->
√xt
->
time
 -
m£cs
;

220 
timeout
->
√xt
 = 
timeouts
->next;

221 
timeouts
->
√xt
 = 
timeout
;

223 
t
 = 
timeouts
->
√xt
;Å !
NULL
;Å =Å->next) {

224 
timeout
->
time
 -
t
->time;

225 i‡(
t
->
√xt
 =
NULL
 ||Å->√xt->
time
 > 
timeout
->time) {

226 i‡(
t
->
√xt
 !
NULL
) {

227 
t
->
√xt
->
time
 -
timeout
->time;

229 
timeout
->
√xt
 = 
t
->next;

230 
t
->
√xt
 = 
timeout
;

235 
	}
}

248 
	$sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
)

250 
sys_timeouts
 *
timeouts
;

251 
sys_timeo
 *
¥ev_t
, *
t
;

253 
timeouts
 = 
	`sys_¨ch_timeouts
();

255 i‡(
timeouts
 =
NULL
) {

256 
	`LWIP_ASSERT
("sys_u¡imeout:Åimeout†!NULL", 
timeouts
 !
NULL
);

259 i‡(
timeouts
->
√xt
 =
NULL
) {

263 
t
 = 
timeouts
->
√xt
, 
¥ev_t
 = 
NULL
;Å != NULL;Örev_t =Å,Å =Å->next) {

264 i‡((
t
->
h
 =hË&& (t->
¨g
 ==árg)) {

267 i‡(
¥ev_t
 =
NULL
)

268 
timeouts
->
√xt
 = 
t
->next;

270 
¥ev_t
->
√xt
 = 
t
->next;

272 i‡(
t
->
√xt
 !
NULL
)

273 
t
->
√xt
->
time
 +=Å->time;

274 
	`memp_‰ì
(
MEMP_SYS_TIMEOUT
, 
t
);

279 
	}
}

287 
	$sswt_h™dÀr
(*
¨g
)

289 
sswt_cb
 *sswt_cb = (sswt_cb *Ë
¨g
;

292 
sswt_cb
->
timeÊag
 = 1;

293 
	`sys_£m_sig«l
(*(
sswt_cb
->
p£m
));

294 
	}
}

304 
	$sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
)

306 
sswt_cb
 sswt_cb;

308 
sswt_cb
.
p£m
 = &
£m
;

309 
sswt_cb
.
timeÊag
 = 0;

312 i‡(
timeout
 > 0) {

314 
	`sys_timeout
(
timeout
, 
sswt_h™dÀr
, &
sswt_cb
);

316 
	`sys_£m_waô
(
£m
);

318 i‡(
sswt_cb
.
timeÊag
) {

323 
	`sys_u¡imeout
(
sswt_h™dÀr
, &
sswt_cb
);

326 
	}
}

334 
	$sys_m¶ìp
(
u32_t
 
ms
)

336 
sys_£m_t
 
dñay£m
 = 
	`sys_£m_√w
(0);

338 
	`sys_£m_waô_timeout
(
dñay£m
, 
ms
);

340 
	`sys_£m_‰ì
(
dñay£m
);

341 
	}
}

	@net/lwip/core/tcp.c

43 
	~"lwù/›t.h
"

45 #i‡
LWIP_TCP


47 
	~"lwù/def.h
"

48 
	~"lwù/mem.h
"

49 
	~"lwù/memp.h
"

50 
	~"lwù/¢mp.h
"

51 
	~"lwù/t˝.h
"

53 
	~<°rög.h
>

56 
u32_t
 
	gt˝_ticks
;

57 c⁄° 
u8_t
 
	gt˝_backoff
[13] =

60 c⁄° 
u8_t
 
	gt˝_≥rsi°_backoff
[7] = { 3, 6, 12, 24, 48, 96, 120 };

65 
t˝_pcb
 *
	gt˝_bound_pcbs
;

67 
t˝_li°í_pcbs_t
 
	gt˝_li°í_pcbs
;

70 
t˝_pcb
 *
	gt˝_a˘ive_pcbs
;

72 
t˝_pcb
 *
	gt˝_tw_pcbs
;

74 
t˝_pcb
 *
	gt˝_tmp_pcb
;

76 
u8_t
 
	gt˝_timî
;

77 
u16_t
 
t˝_√w_p‹t
();

84 
	$t˝_tmr
()

87 
	`t˝_Á°tmr
();

89 i‡(++
t˝_timî
 & 1) {

92 
	`t˝_¶owtmr
();

94 
	}
}

110 
îr_t


111 
	$t˝_˛o£
(
t˝_pcb
 *
pcb
)

113 
îr_t
 
îr
;

115 #i‡
TCP_DEBUG


116 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_close: closing in "));

117 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

120 
pcb
->
°©e
) {

121 
CLOSED
:

129 
îr
 = 
ERR_OK
;

130 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

131 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

132 
pcb
 = 
NULL
;

134 
LISTEN
:

135 
îr
 = 
ERR_OK
;

136 
	`t˝_pcb_ªmove
((
t˝_pcb
 **)&
t˝_li°í_pcbs
.
pcbs
, 
pcb
);

137 
	`memp_‰ì
(
MEMP_TCP_PCB_LISTEN
, 
pcb
);

138 
pcb
 = 
NULL
;

140 
SYN_SENT
:

141 
îr
 = 
ERR_OK
;

142 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

143 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

144 
pcb
 = 
NULL
;

145 
	`¢mp_öc_t˝©ãm±Áûs
();

147 
SYN_RCVD
:

148 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

149 i‡(
îr
 =
ERR_OK
) {

150 
	`¢mp_öc_t˝©ãm±Áûs
();

151 
pcb
->
°©e
 = 
FIN_WAIT_1
;

154 
ESTABLISHED
:

155 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

156 i‡(
îr
 =
ERR_OK
) {

157 
	`¢mp_öc_t˝e°abª£ts
();

158 
pcb
->
°©e
 = 
FIN_WAIT_1
;

161 
CLOSE_WAIT
:

162 
îr
 = 
	`t˝_£nd_˘æ
(
pcb
, 
TCP_FIN
);

163 i‡(
îr
 =
ERR_OK
) {

164 
	`¢mp_öc_t˝e°abª£ts
();

165 
pcb
->
°©e
 = 
LAST_ACK
;

170 
îr
 = 
ERR_OK
;

171 
pcb
 = 
NULL
;

175 i‡(
pcb
 !
NULL
 && 
îr
 =
ERR_OK
) {

183 
	`t˝_ouçut
(
pcb
);

185  
îr
;

186 
	}
}

196 
	$t˝_ab‹t
(
t˝_pcb
 *
pcb
)

198 
u32_t
 
£qno
, 
ackno
;

199 
u16_t
 
ªmŸe_p‹t
, 
loˇl_p‹t
;

200 
ù_addr
 
ªmŸe_ù
, 
loˇl_ù
;

201 #i‡
LWIP_CALLBACK_API


202 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

204 *
îrf_¨g
;

210 i‡(
pcb
->
°©e
 =
TIME_WAIT
) {

211 
	`t˝_pcb_ªmove
(&
t˝_tw_pcbs
, 
pcb
);

212 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

214 
£qno
 = 
pcb
->
¢d_nxt
;

215 
ackno
 = 
pcb
->
rcv_nxt
;

216 
	`ù_addr_£t
(&
loˇl_ù
, &(
pcb
->local_ip));

217 
	`ù_addr_£t
(&
ªmŸe_ù
, &(
pcb
->remote_ip));

218 
loˇl_p‹t
 = 
pcb
->local_port;

219 
ªmŸe_p‹t
 = 
pcb
->remote_port;

220 #i‡
LWIP_CALLBACK_API


221 
îrf
 = 
pcb
->errf;

223 
îrf_¨g
 = 
pcb
->
ˇŒback_¨g
;

224 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

225 i‡(
pcb
->
u«cked
 !
NULL
) {

226 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

228 i‡(
pcb
->
un£¡
 !
NULL
) {

229 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

231 #i‡
TCP_QUEUE_OOSEQ


232 i‡(
pcb
->
oo£q
 !
NULL
) {

233 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

236 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

237 
	`TCP_EVENT_ERR
(
îrf
, 
îrf_¨g
, 
ERR_ABRT
);

238 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_abort: sending RST\n"));

239 
	`t˝_r°
(
£qno
, 
ackno
, &
loˇl_ù
, &
ªmŸe_ù
, 
loˇl_p‹t
, 
ªmŸe_p‹t
);

241 
	}
}

256 
îr_t


257 
	$t˝_böd
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

259 
t˝_pcb
 *
˝cb
;

261 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y böd i¿°©êCLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

263 i‡(
p‹t
 == 0) {

264 
p‹t
 = 
	`t˝_√w_p‹t
();

268 
˝cb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;

269 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

270 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

271 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

272 
	`ù_addr_ißny
(
ùaddr
) ||

273 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

274  
ERR_USE
;

279 
˝cb
 = 
t˝_a˘ive_pcbs
;

280 
˝cb
 !
NULL
; cpcb = cpcb->
√xt
) {

281 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

282 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

283 
	`ù_addr_ißny
(
ùaddr
) ||

284 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

285  
ERR_USE
;

290 
˝cb
 = 
t˝_bound_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

291 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

292 i‡(
	`ù_addr_ißny
(&(
˝cb
->
loˇl_ù
)) ||

293 
	`ù_addr_ißny
(
ùaddr
) ||

294 
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

295  
ERR_USE
;

301 
˝cb
 = 
t˝_tw_pcbs
; cpcb !
NULL
; cpcb = cpcb->
√xt
) {

302 i‡(
˝cb
->
loˇl_p‹t
 =
p‹t
) {

303 i‡(
	`ù_addr_cmp
(&(
˝cb
->
loˇl_ù
), 
ùaddr
)) {

304  
ERR_USE
;

309 i‡(!
	`ù_addr_ißny
(
ùaddr
)) {

310 
pcb
->
loˇl_ù
 = *
ùaddr
;

312 
pcb
->
loˇl_p‹t
 = 
p‹t
;

313 
	`TCP_REG
(&
t˝_bound_pcbs
, 
pcb
);

314 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_böd: bödÅÿp‹à%"
U16_F
"\n", 
p‹t
));

315  
ERR_OK
;

316 
	}
}

317 #i‡
LWIP_CALLBACK_API


321 
îr_t


322 
	$t˝_ac˚±_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
îr_t
 
îr
)

324 
	`LWIP_UNUSED_ARG
(
¨g
);

325 
	`LWIP_UNUSED_ARG
(
pcb
);

326 
	`LWIP_UNUSED_ARG
(
îr
);

328  
ERR_ABRT
;

329 
	}
}

346 
t˝_pcb
 *

347 
	$t˝_li°í_wôh_backlog
(
t˝_pcb
 *
pcb
, 
u8_t
 
backlog
)

349 
t˝_pcb_li°í
 *
Õcb
;

351 
	`LWIP_UNUSED_ARG
(
backlog
);

352 
	`LWIP_ERROR
("t˝_li°í:ÖcbáÃódy c⁄√˘ed", 
pcb
->
°©e
 =
CLOSED
,  
NULL
);

355 i‡(
pcb
->
°©e
 =
LISTEN
) {

356  
pcb
;

358 
Õcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB_LISTEN
);

359 i‡(
Õcb
 =
NULL
) {

360  
NULL
;

362 
Õcb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

363 
Õcb
->
loˇl_p‹t
 = 
pcb
->local_port;

364 
Õcb
->
°©e
 = 
LISTEN
;

365 
Õcb
->
so_›ti⁄s
 = 
pcb
->so_options;

366 
Õcb
->
so_›ti⁄s
 |
SOF_ACCEPTCONN
;

367 
Õcb
->
âl
 = 
pcb
->ttl;

368 
Õcb
->
tos
 = 
pcb
->tos;

369 
	`ù_addr_£t
(&
Õcb
->
loˇl_ù
, &
pcb
->local_ip);

370 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

371 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

372 #i‡
LWIP_CALLBACK_API


373 
Õcb
->
ac˚±
 = 
t˝_ac˚±_nuŒ
;

375 #i‡
TCP_LISTEN_BACKLOG


376 
Õcb
->
ac˚±s_≥ndög
 = 0;

377 
Õcb
->
backlog
 = (backlog ? backlog : 1);

379 
	`TCP_REG
(&
t˝_li°í_pcbs
.
li°í_pcbs
, 
Õcb
);

380  (
t˝_pcb
 *)
Õcb
;

381 
	}
}

392 
	$t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
)

394 i‡((
u32_t
)
pcb
->
rcv_wnd
 + 
Àn
 > 
TCP_WND
) {

395 
pcb
->
rcv_wnd
 = 
TCP_WND
;

396 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

398 
pcb
->
rcv_wnd
 +
Àn
;

399 i‡(
pcb
->
rcv_wnd
 >pcb->
mss
) {

400 
pcb
->
rcv_™n_wnd
 =Öcb->
rcv_wnd
;

404 i‡(!(
pcb
->
Êags
 & 
TF_ACK_DELAY
) &&

405 !(
pcb
->
Êags
 & 
TF_ACK_NOW
)) {

416 
	`t˝_ack
(
pcb
);

418 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
 &&Öcb->
rcv_wnd
 >
TCP_WND
/2) {

426 
	`t˝_ack_now
(
pcb
);

429 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_ªcved:Ñecveived %"
U16_F
" bytes, wnd %"U16_F" (%"U16_F").\n",

430 
Àn
, 
pcb
->
rcv_wnd
, 
TCP_WND
 -Öcb->rcv_wnd));

431 
	}
}

439 
u16_t


440 
	$t˝_√w_p‹t
()

442 
t˝_pcb
 *
pcb
;

443 #i‚de‡
TCP_LOCAL_PORT_RANGE_START


444 
	#TCP_LOCAL_PORT_RANGE_START
 4096

	)

445 
	#TCP_LOCAL_PORT_RANGE_END
 0x7fff

	)

447 
u16_t
 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

449 
agaö
:

450 i‡(++
p‹t
 > 
TCP_LOCAL_PORT_RANGE_END
) {

451 
p‹t
 = 
TCP_LOCAL_PORT_RANGE_START
;

454 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

455 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

456 
agaö
;

459 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

460 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

461 
agaö
;

464 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

465 i‡(
pcb
->
loˇl_p‹t
 =
p‹t
) {

466 
agaö
;

469  
p‹t
;

470 
	}
}

484 
îr_t


485 
t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
,

486 
	$îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
))

488 
u32_t
 
›td©a
;

489 
îr_t
 
ªt
;

490 
u32_t
 
iss
;

492 
	`LWIP_ERROR
("t˝_c⁄√˘: c™ o∆y c⁄√˘ed from sèã CLOSED", 
pcb
->
°©e
 =
CLOSED
,  
ERR_ISCONN
);

494 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_c⁄√˘Åÿp‹à%"
U16_F
"\n", 
p‹t
));

495 i‡(
ùaddr
 !
NULL
) {

496 
pcb
->
ªmŸe_ù
 = *
ùaddr
;

498  
ERR_VAL
;

500 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

501 i‡(
pcb
->
loˇl_p‹t
 == 0) {

502 
pcb
->
loˇl_p‹t
 = 
	`t˝_√w_p‹t
();

504 
iss
 = 
	`t˝_√xt_iss
();

505 
pcb
->
rcv_nxt
 = 0;

506 
pcb
->
¢d_nxt
 = 
iss
;

507 
pcb
->
œ°ack
 = 
iss
 - 1;

508 
pcb
->
¢d_lbb
 = 
iss
 - 1;

509 
pcb
->
rcv_wnd
 = 
TCP_WND
;

510 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

511 
pcb
->
¢d_wnd
 = 
TCP_WND
;

514 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

515 #i‡
TCP_CALCULATE_EFF_SEND_MSS


516 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, 
ùaddr
);

518 
pcb
->
cwnd
 = 1;

519 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

520 
pcb
->
°©e
 = 
SYN_SENT
;

521 #i‡
LWIP_CALLBACK_API


522 
pcb
->
c⁄√˘ed
 = connected;

524 
	`TCP_RMV
(&
t˝_bound_pcbs
, 
pcb
);

525 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
pcb
);

527 
	`¢mp_öc_t˝a˘ive›ís
();

530 
›td©a
 = 
	`TCP_BUILD_MSS_OPTION
();

532 
ªt
 = 
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
TCP_SYN
, 0, (
u8_t
 *)&
›td©a
, 4);

533 i‡(
ªt
 =
ERR_OK
) {

534 
	`t˝_ouçut
(
pcb
);

536  
ªt
;

537 
	}
}

547 
	$t˝_¶owtmr
()

549 
t˝_pcb
 *
pcb
, *
pcb2
, *
¥ev
;

550 
u16_t
 
eff_wnd
;

551 
u8_t
 
pcb_ªmove
;

552 
îr_t
 
îr
;

554 
îr
 = 
ERR_OK
;

556 ++
t˝_ticks
;

559 
¥ev
 = 
NULL
;

560 
pcb
 = 
t˝_a˘ive_pcbs
;

561 i‡(
pcb
 =
NULL
) {

562 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÇoáctiveÖcbs\n"));

564 
pcb
 !
NULL
) {

565 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÖrocessingáctiveÖcb\n"));

566 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!CLOSED\n", 
pcb
->
°©e
 !
CLOSED
);

567 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!LISTEN\n", 
pcb
->
°©e
 !
LISTEN
);

568 
	`LWIP_ASSERT
("t˝_¶owtmr:á˘ivêpcb->°©ê!TIME-WAIT\n", 
pcb
->
°©e
 !
TIME_WAIT
);

570 
pcb_ªmove
 = 0;

572 i‡(
pcb
->
°©e
 =
SYN_SENT
 &&Öcb->
ƒtx
 =
TCP_SYNMAXRTX
) {

573 ++
pcb_ªmove
;

574 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max SYNÑetriesÑeached\n"));

576 i‡(
pcb
->
ƒtx
 =
TCP_MAXRTX
) {

577 ++
pcb_ªmove
;

578 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr: max DATAÑetriesÑeached\n"));

580 i‡(
pcb
->
≥rsi°_backoff
 > 0) {

583 
pcb
->
≥rsi°_˙t
++;

584 i‡(
pcb
->
≥rsi°_˙t
 >
t˝_≥rsi°_backoff
[pcb->
≥rsi°_backoff
-1]) {

585 
pcb
->
≥rsi°_˙t
 = 0;

586 i‡(
pcb
->
≥rsi°_backoff
 < (
t˝_≥rsi°_backoff
)) {

587 
pcb
->
≥rsi°_backoff
++;

589 
	`t˝_zîo_wödow_¥obe
(
pcb
);

593 if(
pcb
->
πime
 >= 0)

594 ++
pcb
->
πime
;

596 i‡(
pcb
->
u«cked
 !
NULL
 &&Öcb->
πime
 >pcb->
πo
) {

598 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_¶owtmr:Ñtimê%"
S16_F


599 "Öcb->πÿ%"
S16_F
"\n",

600 
pcb
->
πime
,Öcb->
πo
));

604 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

605 
pcb
->
πo
 = (’cb->
ß
 >> 3Ë+Öcb->
sv
Ë<< 
t˝_backoff
[pcb->
ƒtx
];

609 
pcb
->
πime
 = 0;

612 
eff_wnd
 = 
	`LWIP_MIN
(
pcb
->
cwnd
,Öcb->
¢d_wnd
);

613 
pcb
->
s°hªsh
 = 
eff_wnd
 >> 1;

614 i‡(
pcb
->
s°hªsh
 <Öcb->
mss
) {

615 
pcb
->
s°hªsh
 =Öcb->
mss
 * 2;

617 
pcb
->
cwnd
 =Öcb->
mss
;

618 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_¶owtmr: cwnd %"
U16_F


619 " s°hªsh %"
U16_F
"\n",

620 
pcb
->
cwnd
,Öcb->
s°hªsh
));

624 
	`t˝_ªxmô_πo
(
pcb
);

629 i‡(
pcb
->
°©e
 =
FIN_WAIT_2
) {

630 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

631 
TCP_FIN_WAIT_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

632 ++
pcb_ªmove
;

633 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in FIN-WAIT-2\n"));

638 if((
pcb
->
so_›ti⁄s
 & 
SOF_KEEPALIVE
) &&

639 ((
pcb
->
°©e
 =
ESTABLISHED
) ||

640 (
pcb
->
°©e
 =
CLOSE_WAIT
))) {

641 #i‡
LWIP_TCP_KEEPALIVE


642 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

643 (
pcb
->
kìp_idÀ
 + (pcb->
kìp_˙t
*pcb->
kìp_ötvl
))

644 / 
TCP_SLOW_INTERVAL
)

646 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

647 (
pcb
->
kìp_idÀ
 + 
TCP_MAXIDLE
Ë/ 
TCP_SLOW_INTERVAL
)

650 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¶owtmr: KEEPALIVEÅimeout. Ab‹tög c⁄√˘i⁄Åÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F".\n",

651 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

652 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

654 
	`t˝_ab‹t
(
pcb
);

656 #i‡
LWIP_TCP_KEEPALIVE


657 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

658 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 *Öcb->
kìp_ötvl
)

659 / 
TCP_SLOW_INTERVAL
)

661 if((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

662 (
pcb
->
kìp_idÀ
 +Öcb->
kìp_˙t_£¡
 * 
TCP_KEEPINTVL_DEFAULT
)

663 / 
TCP_SLOW_INTERVAL
)

666 
	`t˝_kì∑live
(
pcb
);

667 
pcb
->
kìp_˙t_£¡
++;

674 #i‡
TCP_QUEUE_OOSEQ


675 i‡(
pcb
->
oo£q
 !
NULL
 &&

676 (
u32_t
)
t˝_ticks
 - 
pcb
->
tmr
 >pcb->
πo
 * 
TCP_OOSEQ_TIMEOUT
) {

677 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

678 
pcb
->
oo£q
 = 
NULL
;

679 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("tcp_slowtmr: dropping OOSEQ queued data\n"));

684 i‡(
pcb
->
°©e
 =
SYN_RCVD
) {

685 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
) >

686 
TCP_SYN_RCVD_TIMEOUT
 / 
TCP_SLOW_INTERVAL
) {

687 ++
pcb_ªmove
;

688 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in SYN-RCVD\n"));

693 i‡(
pcb
->
°©e
 =
LAST_ACK
) {

694 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

695 ++
pcb_ªmove
;

696 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:ÑemovingÖcb stuck in LAST-ACK\n"));

701 i‡(
pcb_ªmove
) {

702 
	`t˝_pcb_purge
(
pcb
);

704 i‡(
¥ev
 !
NULL
) {

705 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_a˘ive_pcbs", 
pcb
 !
t˝_a˘ive_pcbs
);

706 
¥ev
->
√xt
 = 
pcb
->next;

709 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_a˘ive_pcbs", 
t˝_a˘ive_pcbs
 =
pcb
);

710 
t˝_a˘ive_pcbs
 = 
pcb
->
√xt
;

713 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_ABRT
);

715 
pcb2
 = 
pcb
->
√xt
;

716 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

717 
pcb
 = 
pcb2
;

721 ++
pcb
->
pﬁ…mr
;

722 i‡(
pcb
->
pﬁ…mr
 >pcb->
pﬁlöãrvÆ
) {

723 
pcb
->
pﬁ…mr
 = 0;

724 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_slowtmr:Öollingápplication\n"));

725 
	`TCP_EVENT_POLL
(
pcb
, 
îr
);

726 i‡(
îr
 =
ERR_OK
) {

727 
	`t˝_ouçut
(
pcb
);

731 
¥ev
 = 
pcb
;

732 
pcb
 =Öcb->
√xt
;

738 
¥ev
 = 
NULL
;

739 
pcb
 = 
t˝_tw_pcbs
;

740 
pcb
 !
NULL
) {

741 
	`LWIP_ASSERT
("t˝_¶owtmr: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

742 
pcb_ªmove
 = 0;

745 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë> 2 * 
TCP_MSL
 / 
TCP_SLOW_INTERVAL
) {

746 ++
pcb_ªmove
;

752 i‡(
pcb_ªmove
) {

753 
	`t˝_pcb_purge
(
pcb
);

755 i‡(
¥ev
 !
NULL
) {

756 
	`LWIP_ASSERT
("t˝_¶owtmr: middÀÅ˝ !t˝_tw_pcbs", 
pcb
 !
t˝_tw_pcbs
);

757 
¥ev
->
√xt
 = 
pcb
->next;

760 
	`LWIP_ASSERT
("t˝_¶owtmr: fú°Öcb =t˝_tw_pcbs", 
t˝_tw_pcbs
 =
pcb
);

761 
t˝_tw_pcbs
 = 
pcb
->
√xt
;

763 
pcb2
 = 
pcb
->
√xt
;

764 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

765 
pcb
 = 
pcb2
;

767 
¥ev
 = 
pcb
;

768 
pcb
 =Öcb->
√xt
;

771 
	}
}

780 
	$t˝_Á°tmr
()

782 
t˝_pcb
 *
pcb
;

784 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

786 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

788 
îr_t
 
îr
;

789 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_fasttmr:Çotify keptÖacket\n"));

790 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

791 i‡(
îr
 =
ERR_OK
) {

792 
pcb
->
ªfu£d_d©a
 = 
NULL
;

797 i‡(
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

798 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_fasttmr: delayed ACK\n"));

799 
	`t˝_ack_now
(
pcb
);

800 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

803 
	}
}

811 
u8_t


812 
	$t˝_£gs_‰ì
(
t˝_£g
 *
£g
)

814 
u8_t
 
cou¡
 = 0;

815 
t˝_£g
 *
√xt
;

816 
£g
 !
NULL
) {

817 
√xt
 = 
£g
->next;

818 
cou¡
 +
	`t˝_£g_‰ì
(
£g
);

819 
£g
 = 
√xt
;

821  
cou¡
;

822 
	}
}

830 
u8_t


831 
	$t˝_£g_‰ì
(
t˝_£g
 *
£g
)

833 
u8_t
 
cou¡
 = 0;

835 i‡(
£g
 !
NULL
) {

836 i‡(
£g
->
p
 !
NULL
) {

837 
cou¡
 = 
	`pbuf_‰ì
(
£g
->
p
);

838 #i‡
TCP_DEBUG


839 
£g
->
p
 = 
NULL
;

842 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
£g
);

844  
cou¡
;

845 
	}
}

854 
	$t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
)

856 
pcb
->
¥io
 =Örio;

857 
	}
}

858 #i‡
TCP_QUEUE_OOSEQ


867 
t˝_£g
 *

868 
	$t˝_£g_c›y
(
t˝_£g
 *
£g
)

870 
t˝_£g
 *
c£g
;

872 
c£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

873 i‡(
c£g
 =
NULL
) {

874  
NULL
;

876 
	`SMEMCPY
((
u8_t
 *)
c£g
, (c⁄° u8_à*)
£g
, (
t˝_£g
));

877 
	`pbuf_ªf
(
c£g
->
p
);

878  
c£g
;

879 
	}
}

882 #i‡
LWIP_CALLBACK_API


887 
îr_t


888 
	$t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
, 
îr_t
 
îr
)

890 
¨g
 =árg;

891 i‡(
p
 !
NULL
) {

892 
	`pbuf_‰ì
(
p
);

893 } i‡(
îr
 =
ERR_OK
) {

894  
	`t˝_˛o£
(
pcb
);

896  
ERR_OK
;

897 
	}
}

906 
	$t˝_kûl_¥io
(
u8_t
 
¥io
)

908 
t˝_pcb
 *
pcb
, *
öa˘ive
;

909 
u32_t
 
öa˘ivôy
;

910 
u8_t
 
m¥io
;

913 
m¥io
 = 
TCP_PRIO_MAX
;

916 
öa˘ivôy
 = 0;

917 
öa˘ive
 = 
NULL
;

918 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

919 i‡(
pcb
->
¥io
 <=Örio &&

920 
pcb
->
¥io
 <
m¥io
 &&

921 (
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

922 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

923 
öa˘ive
 = 
pcb
;

924 
m¥io
 = 
pcb
->
¥io
;

927 i‡(
öa˘ive
 !
NULL
) {

928 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_¥io: kûlög olde° PCB %∞(%"
S32_F
")\n",

929 (*)
öa˘ive
, 
öa˘ivôy
));

930 
	`t˝_ab‹t
(
öa˘ive
);

932 
	}
}

939 
	$t˝_kûl_timewaô
()

941 
t˝_pcb
 *
pcb
, *
öa˘ive
;

942 
u32_t
 
öa˘ivôy
;

944 
öa˘ivôy
 = 0;

945 
öa˘ive
 = 
NULL
;

947 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

948 i‡((
u32_t
)(
t˝_ticks
 - 
pcb
->
tmr
Ë>
öa˘ivôy
) {

949 
öa˘ivôy
 = 
t˝_ticks
 - 
pcb
->
tmr
;

950 
öa˘ive
 = 
pcb
;

953 i‡(
öa˘ive
 !
NULL
) {

954 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kûl_timewaô: kûlög olde° TIME-WAIT PCB %∞(%"
S32_F
")\n",

955 (*)
öa˘ive
, 
öa˘ivôy
));

956 
	`t˝_ab‹t
(
öa˘ive
);

958 
	}
}

966 
t˝_pcb
 *

967 
	$t˝_Æloc
(
u8_t
 
¥io
)

969 
t˝_pcb
 *
pcb
;

970 
u32_t
 
iss
;

972 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

973 i‡(
pcb
 =
NULL
) {

975 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));

976 
	`t˝_kûl_timewaô
();

978 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

979 i‡(
pcb
 =
NULL
) {

981 
	`t˝_kûl_¥io
(
¥io
);

983 
pcb
 = 
	`memp_mÆloc
(
MEMP_TCP_PCB
);

986 i‡(
pcb
 !
NULL
) {

987 
	`mem£t
(
pcb
, 0, (
t˝_pcb
));

988 
pcb
->
¥io
 = 
TCP_PRIO_NORMAL
;

989 
pcb
->
¢d_buf
 = 
TCP_SND_BUF
;

990 
pcb
->
¢d_queuñí
 = 0;

991 
pcb
->
rcv_wnd
 = 
TCP_WND
;

992 
pcb
->
rcv_™n_wnd
 = 
TCP_WND
;

993 
pcb
->
tos
 = 0;

994 
pcb
->
âl
 = 
TCP_TTL
;

997 
pcb
->
mss
 = (
TCP_MSS
 > 536) ? 536 : TCP_MSS;

998 
pcb
->
πo
 = 3000 / 
TCP_SLOW_INTERVAL
;

999 
pcb
->
ß
 = 0;

1000 
pcb
->
sv
 = 3000 / 
TCP_SLOW_INTERVAL
;

1001 
pcb
->
πime
 = -1;

1002 
pcb
->
cwnd
 = 1;

1003 
iss
 = 
	`t˝_√xt_iss
();

1004 
pcb
->
¢d_wl2
 = 
iss
;

1005 
pcb
->
¢d_nxt
 = 
iss
;

1006 
pcb
->
¢d_max
 = 
iss
;

1007 
pcb
->
œ°ack
 = 
iss
;

1008 
pcb
->
¢d_lbb
 = 
iss
;

1009 
pcb
->
tmr
 = 
t˝_ticks
;

1011 
pcb
->
pﬁ…mr
 = 0;

1013 #i‡
LWIP_CALLBACK_API


1014 
pcb
->
ªcv
 = 
t˝_ªcv_nuŒ
;

1018 
pcb
->
kìp_idÀ
 = 
TCP_KEEPIDLE_DEFAULT
;

1020 #i‡
LWIP_TCP_KEEPALIVE


1021 
pcb
->
kìp_ötvl
 = 
TCP_KEEPINTVL_DEFAULT
;

1022 
pcb
->
kìp_˙t
 = 
TCP_KEEPCNT_DEFAULT
;

1025 
pcb
->
kìp_˙t_£¡
 = 0;

1027  
pcb
;

1028 
	}
}

1042 
t˝_pcb
 *

1043 
	$t˝_√w
()

1045  
	`t˝_Æloc
(
TCP_PRIO_NORMAL
);

1046 
	}
}

1056 
	$t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
)

1058 
pcb
->
ˇŒback_¨g
 = 
¨g
;

1059 
	}
}

1060 #i‡
LWIP_CALLBACK_API


1070 
t˝_ªcv
(
t˝_pcb
 *
pcb
,

1071 
	$îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
pbuf
 *
p
, 
îr_t
 
îr
))

1073 
pcb
->
ªcv
 =Ñecv;

1074 
	}
}

1084 
t˝_£¡
(
t˝_pcb
 *
pcb
,

1085 
	$îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
, 
u16_t
 
Àn
))

1087 
pcb
->
£¡
 = sent;

1088 
	}
}

1099 
t˝_îr
(
t˝_pcb
 *
pcb
,

1100 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
))

1102 
pcb
->
îrf
 =Érrf;

1103 
	}
}

1114 
t˝_ac˚±
(
t˝_pcb
 *
pcb
,

1115 
	$îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
, 
îr_t
 
îr
))

1117 ((
t˝_pcb_li°í
 *)
pcb
)->
ac˚±
 =áccept;

1118 
	}
}

1129 
t˝_pﬁl
(
t˝_pcb
 *
pcb
,

1130 
	$îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
), 
u8_t
 
öãrvÆ
)

1132 #i‡
LWIP_CALLBACK_API


1133 
pcb
->
pﬁl
 =Öoll;

1135 
pcb
->
pﬁlöãrvÆ
 = 
öãrvÆ
;

1136 
	}
}

1145 
	$t˝_pcb_purge
(
t˝_pcb
 *
pcb
)

1147 i‡(
pcb
->
°©e
 !
CLOSED
 &&

1148 
pcb
->
°©e
 !
TIME_WAIT
 &&

1149 
pcb
->
°©e
 !
LISTEN
) {

1151 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge\n"));

1153 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

1154 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->refused_data\n"));

1155 
	`pbuf_‰ì
(
pcb
->
ªfu£d_d©a
);

1156 
pcb
->
ªfu£d_d©a
 = 
NULL
;

1158 i‡(
pcb
->
un£¡
 !
NULL
) {

1159 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge:Çotáll data sent\n"));

1161 i‡(
pcb
->
u«cked
 !
NULL
) {

1162 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->unacked\n"));

1164 #i‡
TCP_QUEUE_OOSEQ


1165 i‡(
pcb
->
oo£q
 !
NULL
) {

1166 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_pcb_purge: dataÜeft on ->ooseq\n"));

1171 
pcb
->
πime
 = -1;

1173 
	`t˝_£gs_‰ì
(
pcb
->
oo£q
);

1174 
pcb
->
oo£q
 = 
NULL
;

1176 
	`t˝_£gs_‰ì
(
pcb
->
un£¡
);

1177 
	`t˝_£gs_‰ì
(
pcb
->
u«cked
);

1178 
pcb
->
u«cked
 =Öcb->
un£¡
 = 
NULL
;

1180 
	}
}

1189 
	$t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
)

1191 
	`TCP_RMV
(
pcbli°
, 
pcb
);

1193 
	`t˝_pcb_purge
(
pcb
);

1196 i‡(
pcb
->
°©e
 !
TIME_WAIT
 &&

1197 
pcb
->
°©e
 !
LISTEN
 &&

1198 
pcb
->
Êags
 & 
TF_ACK_DELAY
) {

1199 
pcb
->
Êags
 |
TF_ACK_NOW
;

1200 
	`t˝_ouçut
(
pcb
);

1203 i‡(
pcb
->
°©e
 !
LISTEN
) {

1204 
	`LWIP_ASSERT
("un£¡ segmít†Àakög", 
pcb
->
un£¡
 =
NULL
);

1205 
	`LWIP_ASSERT
("u«cked segmít†Àakög", 
pcb
->
u«cked
 =
NULL
);

1206 #i‡
TCP_QUEUE_OOSEQ


1207 
	`LWIP_ASSERT
("oo£q segmít†Àakög", 
pcb
->
oo£q
 =
NULL
);

1211 
pcb
->
°©e
 = 
CLOSED
;

1213 
	`LWIP_ASSERT
("t˝_pcb_ªmove:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

1214 
	}
}

1221 
u32_t


1222 
	$t˝_√xt_iss
()

1224 
u32_t
 
iss
 = 6510;

1226 
iss
 +
t˝_ticks
;

1227  
iss
;

1228 
	}
}

1230 #i‡
TCP_CALCULATE_EFF_SEND_MSS


1236 
u16_t


1237 
	$t˝_eff_£nd_mss
(
u16_t
 
£ndmss
, 
ù_addr
 *
addr
)

1239 
u16_t
 
mss_s
;

1240 
√tif
 *
outif
;

1242 
outif
 = 
	`ù_rouã
(
addr
);

1243 i‡((
outif
 !
NULL
Ë&& (outif->
mtu
 != 0)) {

1244 
mss_s
 = 
outif
->
mtu
 - 
IP_HLEN
 - 
TCP_HLEN
;

1248 
£ndmss
 = 
	`LWIP_MIN
(£ndmss, 
mss_s
);

1250  
£ndmss
;

1251 
	}
}

1254 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


1261 
	$t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
)

1263 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP header:\n"));

1264 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1265 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

1266 
	`¡ohs
(
t˝hdr
->
§c
),Çtohs—˝hdr->
de°
)));

1267 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1268 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (seqÇo)\n",

1269 
	`¡ohl
(
t˝hdr
->
£qno
)));

1270 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1271 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %010"
U32_F
" | (ackÇo)\n",

1272 
	`¡ohl
(
t˝hdr
->
ackno
)));

1273 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1274 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| %2"
U16_F
" | |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"| %5"U16_F" | (hdrlen, flags (",

1275 
	`TCPH_HDRLEN
(
t˝hdr
),

1276 
	`TCPH_FLAGS
(
t˝hdr
) >> 5 & 1,

1277 
	`TCPH_FLAGS
(
t˝hdr
) >> 4 & 1,

1278 
	`TCPH_FLAGS
(
t˝hdr
) >> 3 & 1,

1279 
	`TCPH_FLAGS
(
t˝hdr
) >> 2 & 1,

1280 
	`TCPH_FLAGS
(
t˝hdr
) >> 1 & 1,

1281 
	`TCPH_FLAGS
(
t˝hdr
) & 1,

1282 
	`¡ohs
(
t˝hdr
->
wnd
)));

1283 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

1284 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("), win)\n"));

1285 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1286 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("| 0x%04"
X16_F
" | %5"
U16_F
" | (chksum, urgp)\n",

1287 
	`¡ohs
(
t˝hdr
->
chksum
),Çtohs—˝hdr->
urgp
)));

1288 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("+-------------------------------+\n"));

1289 
	}
}

1297 
	$t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
)

1299 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("State: "));

1300 
s
) {

1301 
CLOSED
:

1302 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSED\n"));

1304 
LISTEN
:

1305 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LISTEN\n"));

1307 
SYN_SENT
:

1308 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_SENT\n"));

1310 
SYN_RCVD
:

1311 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN_RCVD\n"));

1313 
ESTABLISHED
:

1314 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ESTABLISHED\n"));

1316 
FIN_WAIT_1
:

1317 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_1\n"));

1319 
FIN_WAIT_2
:

1320 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN_WAIT_2\n"));

1322 
CLOSE_WAIT
:

1323 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSE_WAIT\n"));

1325 
CLOSING
:

1326 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CLOSING\n"));

1328 
LAST_ACK
:

1329 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("LAST_ACK\n"));

1331 
TIME_WAIT
:

1332 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME_WAIT\n"));

1335 
	}
}

1343 
	$t˝_debug_¥öt_Êags
(
u8_t
 
Êags
)

1345 i‡(
Êags
 & 
TCP_FIN
) {

1346 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("FIN "));

1348 i‡(
Êags
 & 
TCP_SYN
) {

1349 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("SYN "));

1351 i‡(
Êags
 & 
TCP_RST
) {

1352 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("RST "));

1354 i‡(
Êags
 & 
TCP_PSH
) {

1355 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("PSH "));

1357 i‡(
Êags
 & 
TCP_ACK
) {

1358 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ACK "));

1360 i‡(
Êags
 & 
TCP_URG
) {

1361 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("URG "));

1363 i‡(
Êags
 & 
TCP_ECE
) {

1364 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("ECE "));

1366 i‡(
Êags
 & 
TCP_CWR
) {

1367 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("CWR "));

1369 
	}
}

1375 
	$t˝_debug_¥öt_pcbs
()

1377 
t˝_pcb
 *
pcb
;

1378 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Active PCB states:\n"));

1379 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1380 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1381 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1382 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1383 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1385 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Listen PCB states:\n"));

1386 
pcb
 = (
t˝_pcb
 *)
t˝_li°í_pcbs
.
pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1387 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1388 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1389 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1390 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1392 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TIME-WAIT PCB states:\n"));

1393 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1394 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("Loˇ»p‹à%"
U16_F
", f‹eig¿p‹à%"U16_F" snd_nxà%"
U32_F
"Ñcv_nxt %"U32_F" ",

1395 
pcb
->
loˇl_p‹t
,Öcb->
ªmŸe_p‹t
,

1396 
pcb
->
¢d_nxt
,Öcb->
rcv_nxt
));

1397 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

1399 
	}
}

1404 
s16_t


1405 
	$t˝_pcbs_ß√
()

1407 
t˝_pcb
 *
pcb
;

1408 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1409 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

1410 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

1411 
	`LWIP_ASSERT
("t˝_pcbs_ß√:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

1413 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

1414 
	`LWIP_ASSERT
("t˝_pcbs_ß√:ÅwÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

1417 
	}
}

	@net/lwip/core/tcp_in.c

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_TCP


48 
	~"lwù/t˝.h
"

49 
	~"lwù/def.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/mem.h
"

53 
	~"lwù/memp.h
"

54 
	~"lwù/öë.h
"

55 
	~"lwù/öë_chksum.h
"

56 
	~"lwù/°©s.h
"

57 
	~"lwù/¢mp.h
"

58 
	~"¨ch/≥rf.h
"

63 
t˝_£g
 
	gö£g
;

64 
t˝_hdr
 *
	gt˝hdr
;

65 
ù_hdr
 *
	gùhdr
;

66 
u32_t
 
	g£qno
, 
	gackno
;

67 
u8_t
 
	gÊags
;

68 
u16_t
 
	gt˝Àn
;

70 
u8_t
 
	gªcv_Êags
;

71 
pbuf
 *
	gªcv_d©a
;

73 
t˝_pcb
 *
	gt˝_öput_pcb
;

76 
îr_t
 
t˝_¥o˚ss
(
t˝_pcb
 *
pcb
);

77 
u8_t
 
t˝_ª˚ive
(
t˝_pcb
 *
pcb
);

78 
t˝_∑r£›t
(
t˝_pcb
 *
pcb
);

80 
îr_t
 
t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
);

81 
îr_t
 
t˝_timewaô_öput
(
t˝_pcb
 *
pcb
);

93 
	$t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

95 
t˝_pcb
 *
pcb
, *
¥ev
;

96 
t˝_pcb_li°í
 *
Õcb
;

97 
u8_t
 
hdæí
;

98 
îr_t
 
îr
;

100 
PERF_START
;

102 
	`TCP_STATS_INC
(
t˝
.
ªcv
);

103 
	`¢mp_öc_t˝ö£gs
();

105 
ùhdr
 = 
p
->
∑ylﬂd
;

106 
t˝hdr
 = (
t˝_hdr
 *)((
u8_t
 *)
p
->
∑ylﬂd
 + 
	`IPH_HL
(
ùhdr
) * 4);

108 #i‡
TCP_INPUT_DEBUG


109 
	`t˝_debug_¥öt
(
t˝hdr
);

113 i‡(
	`pbuf_hódî
(
p
, -((
s16_t
)(
	`IPH_HL
(
ùhdr
Ë* 4))Ë|| (p->
tŸ_Àn
 < (
t˝_hdr
))) {

115 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput: sh‹à∑ckë (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

116 
	`TCP_STATS_INC
(
t˝
.
À√º
);

117 
	`TCP_STATS_INC
(
t˝
.
dr›
);

118 
	`¢mp_öc_t˝öîrs
();

119 
	`pbuf_‰ì
(
p
);

124 i‡(
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
) ||

125 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
))) {

126 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

127 
	`TCP_STATS_INC
(
t˝
.
dr›
);

128 
	`¢mp_öc_t˝öîrs
();

129 
	`pbuf_‰ì
(
p
);

133 #i‡
CHECKSUM_CHECK_TCP


135 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

136 (
ù_addr
 *)&(
ùhdr
->
de°
),

137 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
) != 0) {

138 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_öput:Öackë disˇrded duêtÿÁûög checksum 0x%04"
X16_F
"\n",

139 
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
), (ù_add∏*)&(ùhdr->
de°
),

140 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
)));

141 #i‡
TCP_DEBUG


142 
	`t˝_debug_¥öt
(
t˝hdr
);

144 
	`TCP_STATS_INC
(
t˝
.
chkîr
);

145 
	`TCP_STATS_INC
(
t˝
.
dr›
);

146 
	`¢mp_öc_t˝öîrs
();

147 
	`pbuf_‰ì
(
p
);

154 
hdæí
 = 
	`TCPH_HDRLEN
(
t˝hdr
);

155 if(
	`pbuf_hódî
(
p
, -(
hdæí
 * 4))){

157 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: shortÖacket\n"));

158 
	`TCP_STATS_INC
(
t˝
.
À√º
);

159 
	`TCP_STATS_INC
(
t˝
.
dr›
);

160 
	`¢mp_öc_t˝öîrs
();

161 
	`pbuf_‰ì
(
p
);

166 
t˝hdr
->
§c
 = 
	`¡ohs
(tcphdr->src);

167 
t˝hdr
->
de°
 = 
	`¡ohs
(tcphdr->dest);

168 
£qno
 = 
t˝hdr
->£qnÿ
	`¡ohl
(tcphdr->seqno);

169 
ackno
 = 
t˝hdr
->acknÿ
	`¡ohl
(tcphdr->ackno);

170 
t˝hdr
->
wnd
 = 
	`¡ohs
(tcphdr->wnd);

172 
Êags
 = 
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_FLAGS
;

173 
t˝Àn
 = 
p
->
tŸ_Àn
 + ((
Êags
 & 
TCP_FIN
 || fœg†& 
TCP_SYN
)? 1: 0);

177 
¥ev
 = 
NULL
;

180 
pcb
 = 
t˝_a˘ive_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

181 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

182 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!TIME-WAIT", 
pcb
->
°©e
 !
TIME_WAIT
);

183 
	`LWIP_ASSERT
("t˝_öput:á˘ivêpcb->°©ê!LISTEN", 
pcb
->
°©e
 !
LISTEN
);

184 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

185 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

186 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

187 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

192 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (bef‹êˇche)", 
pcb
->
√xt
 !=Öcb);

193 i‡(
¥ev
 !
NULL
) {

194 
¥ev
->
√xt
 = 
pcb
->next;

195 
pcb
->
√xt
 = 
t˝_a˘ive_pcbs
;

196 
t˝_a˘ive_pcbs
 = 
pcb
;

198 
	`LWIP_ASSERT
("t˝_öput:Öcb->√xà!pcb (a·î cache)", 
pcb
->
√xt
 !=Öcb);

201 
¥ev
 = 
pcb
;

204 i‡(
pcb
 =
NULL
) {

207 
pcb
 = 
t˝_tw_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

208 
	`LWIP_ASSERT
("t˝_öput: TIME-WAITÖcb->°©ê=TIME-WAIT", 
pcb
->
°©e
 =
TIME_WAIT
);

209 i‡(
pcb
->
ªmŸe_p‹t
 =
t˝hdr
->
§c
 &&

210 
pcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
 &&

211 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)) &&

212 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) {

216 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for TIME_WAITing connection.\n"));

217 
	`t˝_timewaô_öput
(
pcb
);

218 
	`pbuf_‰ì
(
p
);

225 
¥ev
 = 
NULL
;

226 
Õcb
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;Üpcb !
NULL
;Üpcb =Üpcb->
√xt
) {

227 i‡((
	`ù_addr_ißny
(&(
Õcb
->
loˇl_ù
)) ||

228 
	`ù_addr_cmp
(&(
Õcb
->
loˇl_ù
), &(
ùhdr
->
de°
))) &&

229 
Õcb
->
loˇl_p‹t
 =
t˝hdr
->
de°
) {

233 i‡(
¥ev
 !
NULL
) {

234 ((
t˝_pcb_li°í
 *)
¥ev
)->
√xt
 = 
Õcb
->next;

236 
Õcb
->
√xt
 = 
t˝_li°í_pcbs
.
li°í_pcbs
;

238 
t˝_li°í_pcbs
.
li°í_pcbs
 = 
Õcb
;

241 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Öacked for LISTENing connection.\n"));

242 
	`t˝_li°í_öput
(
Õcb
);

243 
	`pbuf_‰ì
(
p
);

246 
¥ev
 = (
t˝_pcb
 *)
Õcb
;

250 #i‡
TCP_INPUT_DEBUG


251 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+-Åcp_input: flags "));

252 
	`t˝_debug_¥öt_Êags
(
	`TCPH_FLAGS
(
t˝hdr
));

253 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));

257 i‡(
pcb
 !
NULL
) {

259 #i‡
TCP_INPUT_DEBUG


260 #i‡
TCP_DEBUG


261 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

266 
ö£g
.
√xt
 = 
NULL
;

267 
ö£g
.
Àn
 = 
p
->
tŸ_Àn
;

268 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

269 
ö£g
.
p
 =Ö;

270 
ö£g
.
t˝hdr
 =Åcphdr;

272 
ªcv_d©a
 = 
NULL
;

273 
ªcv_Êags
 = 0;

276 i‡(
pcb
->
ªfu£d_d©a
 !
NULL
) {

278 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input:Çotify keptÖacket\n"));

279 
	`TCP_EVENT_RECV
(
pcb
,Öcb->
ªfu£d_d©a
, 
ERR_OK
, 
îr
);

280 i‡(
îr
 =
ERR_OK
) {

281 
pcb
->
ªfu£d_d©a
 = 
NULL
;

284 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: drop incomingÖackets, becauseÖcb is \"full\"\n"));

285 
	`TCP_STATS_INC
(
t˝
.
dr›
);

286 
	`¢mp_öc_t˝öîrs
();

287 
	`pbuf_‰ì
(
p
);

292 
t˝_öput_pcb
 = 
pcb
;

293 
îr
 = 
	`t˝_¥o˚ss
(
pcb
);

294 
t˝_öput_pcb
 = 
NULL
;

297 i‡(
îr
 !
ERR_ABRT
) {

298 i‡(
ªcv_Êags
 & 
TF_RESET
) {

303 
	`TCP_EVENT_ERR
(
pcb
->
îrf
,Öcb->
ˇŒback_¨g
, 
ERR_RST
);

304 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

305 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

306 } i‡(
ªcv_Êags
 & 
TF_CLOSED
) {

309 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
);

310 
	`memp_‰ì
(
MEMP_TCP_PCB
, 
pcb
);

312 
îr
 = 
ERR_OK
;

316 i‡(
pcb
->
acked
 > 0) {

317 
	`TCP_EVENT_SENT
(
pcb
,Öcb->
acked
, 
îr
);

320 i‡(
ªcv_d©a
 !
NULL
) {

321 if(
Êags
 & 
TCP_PSH
) {

322 
ªcv_d©a
->
Êags
 |
PBUF_FLAG_PUSH
;

326 
	`TCP_EVENT_RECV
(
pcb
, 
ªcv_d©a
, 
ERR_OK
, 
îr
);

329 i‡(
îr
 !
ERR_OK
) {

330 
pcb
->
ªfu£d_d©a
 = 
ªcv_d©a
;

331 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_input: keep incomingÖacket, becauseÖcb is \"full\"\n"));

337 i‡(
ªcv_Êags
 & 
TF_GOT_FIN
) {

338 
	`TCP_EVENT_RECV
(
pcb
, 
NULL
, 
ERR_OK
, 
îr
);

342 i‡(
îr
 =
ERR_OK
) {

343 
	`t˝_ouçut
(
pcb
);

350 i‡(
ö£g
.
p
 !
NULL
)

352 
	`pbuf_‰ì
(
ö£g
.
p
);

353 
ö£g
.
p
 = 
NULL
;

355 #i‡
TCP_INPUT_DEBUG


356 #i‡
TCP_DEBUG


357 
	`t˝_debug_¥öt_°©e
(
pcb
->
°©e
);

365 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_input:Ço PCB match found,Ñesetting.\n"));

366 i‡(!(
	`TCPH_FLAGS
(
t˝hdr
Ë& 
TCP_RST
)) {

367 
	`TCP_STATS_INC
(
t˝
.
¥Ÿîr
);

368 
	`TCP_STATS_INC
(
t˝
.
dr›
);

369 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
,

370 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

371 
t˝hdr
->
de°
,Å˝hdr->
§c
);

373 
	`pbuf_‰ì
(
p
);

376 
	`LWIP_ASSERT
("t˝_öput:Å˝_pcbs_ß√()", 
	`t˝_pcbs_ß√
());

377 
	`PERF_STOP
("tcp_input");

378 
	}
}

392 
îr_t


393 
	$t˝_li°í_öput
(
t˝_pcb_li°í
 *
pcb
)

395 
t˝_pcb
 *
≈cb
;

396 
u32_t
 
›td©a
;

400 i‡(
Êags
 & 
TCP_ACK
) {

403 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("tcp_listen_input: ACK in LISTEN, sendingÑeset\n"));

404 
	`t˝_r°
(
ackno
 + 1, 
£qno
 + 
t˝Àn
,

405 &(
ùhdr
->
de°
), &(ùhdr->
§c
),

406 
t˝hdr
->
de°
,Å˝hdr->
§c
);

407 } i‡(
Êags
 & 
TCP_SYN
) {

408 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄Ñeque° %"
U16_F
" -> %"U16_F".\n", 
t˝hdr
->
§c
,Å˝hdr->
de°
));

409 #i‡
TCP_LISTEN_BACKLOG


410 i‡(
pcb
->
ac˚±s_≥ndög
 >pcb->
backlog
) {

411  
ERR_ABRT
;

414 
≈cb
 = 
	`t˝_Æloc
(
pcb
->
¥io
);

418 i‡(
≈cb
 =
NULL
) {

419 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_listen_input: couldÇotállocate PCB\n"));

420 
	`TCP_STATS_INC
(
t˝
.
memîr
);

421  
ERR_MEM
;

423 #i‡
TCP_LISTEN_BACKLOG


424 
pcb
->
ac˚±s_≥ndög
++;

427 
	`ù_addr_£t
(&(
≈cb
->
loˇl_ù
), &(
ùhdr
->
de°
));

428 
≈cb
->
loˇl_p‹t
 = 
pcb
->local_port;

429 
	`ù_addr_£t
(&(
≈cb
->
ªmŸe_ù
), &(
ùhdr
->
§c
));

430 
≈cb
->
ªmŸe_p‹t
 = 
t˝hdr
->
§c
;

431 
≈cb
->
°©e
 = 
SYN_RCVD
;

432 
≈cb
->
rcv_nxt
 = 
£qno
 + 1;

433 
≈cb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

434 
≈cb
->
s°hªsh
 =Çpcb->
¢d_wnd
;

435 
≈cb
->
¢d_wl1
 = 
£qno
 - 1;

436 
≈cb
->
ˇŒback_¨g
 = 
pcb
->callback_arg;

437 #i‡
LWIP_CALLBACK_API


438 
≈cb
->
ac˚±
 = 
pcb
->accept;

441 
≈cb
->
so_›ti⁄s
 = 
pcb
->so_›ti⁄†& (
SOF_DEBUG
|
SOF_DONTROUTE
|
SOF_KEEPALIVE
|
SOF_OOBINLINE
|
SOF_LINGER
);

444 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
);

447 
	`t˝_∑r£›t
(
≈cb
);

448 #i‡
TCP_CALCULATE_EFF_SEND_MSS


449 
≈cb
->
mss
 = 
	`t˝_eff_£nd_mss
“pcb->mss, &“pcb->
ªmŸe_ù
));

452 
	`¢mp_öc_t˝∑ssive›ís
();

455 
›td©a
 = 
	`TCP_BUILD_MSS_OPTION
();

457 
	`t˝_íqueue
(
≈cb
, 
NULL
, 0, 
TCP_SYN
 | 
TCP_ACK
, 0, (
u8_t
 *)&
›td©a
, 4);

458  
	`t˝_ouçut
(
≈cb
);

460  
ERR_OK
;

461 
	}
}

472 
îr_t


473 
	$t˝_timewaô_öput
(
t˝_pcb
 *
pcb
)

475 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
t˝Àn
, 
pcb
->
rcv_nxt
)) {

476 
pcb
->
rcv_nxt
 = 
£qno
 + 
t˝Àn
;

478 i‡(
t˝Àn
 > 0) {

479 
	`t˝_ack_now
(
pcb
);

481  
	`t˝_ouçut
(
pcb
);

482 
	}
}

495 
îr_t


496 
	$t˝_¥o˚ss
(
t˝_pcb
 *
pcb
)

498 
t˝_£g
 *
r£g
;

499 
u8_t
 
ac˚±abÀ
 = 0;

500 
îr_t
 
îr
;

501 
u8_t
 
ac˚±ed_ö£q
;

503 
îr
 = 
ERR_OK
;

506 i‡(
Êags
 & 
TCP_RST
) {

508 i‡(
pcb
->
°©e
 =
SYN_SENT
) {

509 i‡(
ackno
 =
pcb
->
¢d_nxt
) {

510 
ac˚±abÀ
 = 1;

513 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

514 
pcb
->
rcv_nxt
+pcb->
rcv_wnd
)) {

515 
ac˚±abÀ
 = 1;

519 i‡(
ac˚±abÀ
) {

520 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_process: Connection RESET\n"));

521 
	`LWIP_ASSERT
("t˝_öput:Öcb->°©ê!CLOSED", 
pcb
->
°©e
 !
CLOSED
);

522 
ªcv_Êags
 = 
TF_RESET
;

523 
pcb
->
Êags
 &~
TF_ACK_DELAY
;

524  
ERR_RST
;

526 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

527 
£qno
, 
pcb
->
rcv_nxt
));

528 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_¥o˚ss: u«c˚±abÀÑe£à£qnÿ%"
U32_F
"Ñcv_nxt %"U32_F"\n",

529 
£qno
, 
pcb
->
rcv_nxt
));

530  
ERR_OK
;

535 
pcb
->
tmr
 = 
t˝_ticks
;

536 
pcb
->
kìp_˙t_£¡
 = 0;

539 
pcb
->
°©e
) {

540 
SYN_SENT
:

541 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("SYN-SENT:ácknÿ%"
U32_F
"Öcb->¢d_nxà%"U32_F" u«cked %"U32_F"\n", 
ackno
,

542 
pcb
->
¢d_nxt
, 
	`¡ohl
’cb->
u«cked
->
t˝hdr
->
£qno
)));

544 i‡((
Êags
 & 
TCP_ACK
Ë&& (Êag†& 
TCP_SYN
)

545 && 
ackno
 =
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) + 1) {

546 
pcb
->
¢d_buf
++;

547 
pcb
->
rcv_nxt
 = 
£qno
 + 1;

548 
pcb
->
œ°ack
 = 
ackno
;

549 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

550 
pcb
->
¢d_wl1
 = 
£qno
 - 1;

551 
pcb
->
°©e
 = 
ESTABLISHED
;

555 
	`t˝_∑r£›t
(
pcb
);

556 #i‡
TCP_CALCULATE_EFF_SEND_MSS


557 
pcb
->
mss
 = 
	`t˝_eff_£nd_mss
’cb->mss, &’cb->
ªmŸe_ù
));

562 
pcb
->
s°hªsh
 =Öcb->
mss
 * 10;

564 
pcb
->
cwnd
 = (’cb->cwnd =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

565 
	`LWIP_ASSERT
("pcb->¢d_queuñí > 0", (
pcb
->
¢d_queuñí
 > 0));

566 --
pcb
->
¢d_queuñí
;

567 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_¥o˚ss: SYN-SENT --queuñí %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

568 
r£g
 = 
pcb
->
u«cked
;

569 
pcb
->
u«cked
 = 
r£g
->
√xt
;

573 if(
pcb
->
u«cked
 =
NULL
)

574 
pcb
->
πime
 = -1;

576 
pcb
->
πime
 = 0;

577 
pcb
->
ƒtx
 = 0;

580 
	`t˝_£g_‰ì
(
r£g
);

584 
	`TCP_EVENT_CONNECTED
(
pcb
, 
ERR_OK
, 
îr
);

585 
	`t˝_ack_now
(
pcb
);

588 i‡(
Êags
 & 
TCP_ACK
) {

590 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

591 
t˝hdr
->
de°
,Å˝hdr->
§c
);

594 
SYN_RCVD
:

595 i‡(
Êags
 & 
TCP_ACK
 &&

596 !(
Êags
 & 
TCP_RST
)) {

598 i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_nxt
)) {

599 
u16_t
 
ﬁd_cwnd
;

600 
pcb
->
°©e
 = 
ESTABLISHED
;

601 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄É°ablished %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

602 #i‡
LWIP_CALLBACK_API


603 
	`LWIP_ASSERT
("pcb->ac˚± !NULL", 
pcb
->
ac˚±
 !
NULL
);

606 
	`TCP_EVENT_ACCEPT
(
pcb
, 
ERR_OK
, 
îr
);

607 i‡(
îr
 !
ERR_OK
) {

610 
	`t˝_ab‹t
(
pcb
);

611  
ERR_ABRT
;

613 
ﬁd_cwnd
 = 
pcb
->
cwnd
;

616 
ac˚±ed_ö£q
 = 
	`t˝_ª˚ive
(
pcb
);

618 
pcb
->
cwnd
 = ((
ﬁd_cwnd
 =1Ë? (pcb->
mss
 * 2) :Öcb->mss);

620 i‡((
Êags
 & 
TCP_FIN
Ë&& 
ac˚±ed_ö£q
) {

621 
	`t˝_ack_now
(
pcb
);

622 
pcb
->
°©e
 = 
CLOSE_WAIT
;

628 
	`t˝_r°
(
ackno
, 
£qno
 + 
t˝Àn
, &(
ùhdr
->
de°
), &(ùhdr->
§c
),

629 
t˝hdr
->
de°
,Å˝hdr->
§c
);

633 
CLOSE_WAIT
:

635 
ESTABLISHED
:

636 
ac˚±ed_ö£q
 = 
	`t˝_ª˚ive
(
pcb
);

637 i‡((
Êags
 & 
TCP_FIN
Ë&& 
ac˚±ed_ö£q
) {

638 
	`t˝_ack_now
(
pcb
);

639 
pcb
->
°©e
 = 
CLOSE_WAIT
;

642 
FIN_WAIT_1
:

643 
	`t˝_ª˚ive
(
pcb
);

644 i‡(
Êags
 & 
TCP_FIN
) {

645 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

646 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

647 ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

648 
	`t˝_ack_now
(
pcb
);

649 
	`t˝_pcb_purge
(
pcb
);

650 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

651 
pcb
->
°©e
 = 
TIME_WAIT
;

652 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

654 
	`t˝_ack_now
(
pcb
);

655 
pcb
->
°©e
 = 
CLOSING
;

657 } i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

658 
pcb
->
°©e
 = 
FIN_WAIT_2
;

661 
FIN_WAIT_2
:

662 
	`t˝_ª˚ive
(
pcb
);

663 i‡(
Êags
 & 
TCP_FIN
) {

664 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

665 
	`t˝_ack_now
(
pcb
);

666 
	`t˝_pcb_purge
(
pcb
);

667 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

668 
pcb
->
°©e
 = 
TIME_WAIT
;

669 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

672 
CLOSING
:

673 
	`t˝_ª˚ive
(
pcb
);

674 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

675 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

676 
	`t˝_ack_now
(
pcb
);

677 
	`t˝_pcb_purge
(
pcb
);

678 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
pcb
);

679 
pcb
->
°©e
 = 
TIME_WAIT
;

680 
	`TCP_REG
(&
t˝_tw_pcbs
, 
pcb
);

683 
LAST_ACK
:

684 
	`t˝_ª˚ive
(
pcb
);

685 i‡(
Êags
 & 
TCP_ACK
 && 
ackno
 =
pcb
->
¢d_nxt
) {

686 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP c⁄√˘i⁄ clo£d %"
U16_F
" -> %"U16_F".\n", 
ö£g
.
t˝hdr
->
§c
, in£g.t˝hdr->
de°
));

688 
ªcv_Êags
 = 
TF_CLOSED
;

694  
ERR_OK
;

695 
	}
}

711 
u8_t


712 
	$t˝_ª˚ive
(
t˝_pcb
 *
pcb
)

714 
t˝_£g
 *
√xt
;

715 #i‡
TCP_QUEUE_OOSEQ


716 
t˝_£g
 *
¥ev
, *
c£g
;

718 
pbuf
 *
p
;

719 
s32_t
 
off
;

720 
s16_t
 
m
;

721 
u32_t
 
right_wnd_edge
;

722 
u16_t
 
√w_tŸ_Àn
;

723 
u8_t
 
ac˚±ed_ö£q
 = 0;

725 i‡(
Êags
 & 
TCP_ACK
) {

726 
right_wnd_edge
 = 
pcb
->
¢d_wnd
 +Öcb->
¢d_wl1
;

729 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_wl1
, 
£qno
) ||

730 (
pcb
->
¢d_wl1
 =
£qno
 && 
	`TCP_SEQ_LT
’cb->
¢d_wl2
, 
ackno
)) ||

731 (
pcb
->
¢d_wl2
 =
ackno
 && 
t˝hdr
->
wnd
 >Öcb->
¢d_wnd
)) {

732 
pcb
->
¢d_wnd
 = 
t˝hdr
->
wnd
;

733 
pcb
->
¢d_wl1
 = 
£qno
;

734 
pcb
->
¢d_wl2
 = 
ackno
;

735 i‡(
pcb
->
¢d_wnd
 > 0 &&Öcb->
≥rsi°_backoff
 > 0) {

736 
pcb
->
≥rsi°_backoff
 = 0;

738 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive: wödow upd©ê%"
U16_F
"\n", 
pcb
->
¢d_wnd
));

739 #i‡
TCP_WND_DEBUG


741 i‡(
pcb
->
¢d_wnd
 !
t˝hdr
->
wnd
) {

742 
	`LWIP_DEBUGF
(
TCP_WND_DEBUG
, ("t˝_ª˚ive:Çÿwödow upd©êœ°ack %"
U32_F
" snd_max %"U32_F"áckno %"U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",

743 
pcb
->
œ°ack
,Öcb->
¢d_max
, 
ackno
,Öcb->
¢d_wl1
, 
£qno
,Öcb->
¢d_wl2
));

748 i‡(
pcb
->
œ°ack
 =
ackno
) {

749 
pcb
->
acked
 = 0;

751 i‡(
pcb
->
¢d_wl1
 +Öcb->
¢d_wnd
 =
right_wnd_edge
){

752 ++
pcb
->
du∑cks
;

753 i‡(
pcb
->
du∑cks
 >3 &&Öcb->
u«cked
 !
NULL
) {

754 i‡(!(
pcb
->
Êags
 & 
TF_INFR
)) {

756 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ck†%"
U16_F
" (%"
U32_F
"), fastÑetransmit %"U32_F"\n",

757 (
u16_t
)
pcb
->
du∑cks
,Öcb->
œ°ack
,

758 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
)));

759 
	`t˝_ªxmô
(
pcb
);

765 i‡(
pcb
->
cwnd
 >Öcb->
¢d_wnd
)

766 
pcb
->
s°hªsh
 =Öcb->
¢d_wnd
 / 2;

768 
pcb
->
s°hªsh
 =Öcb->
cwnd
 / 2;

771 i‡(
pcb
->
s°hªsh
 < 2*pcb->
mss
) {

772 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: Thêmöimum vÆuêf‹ s°hªsh %"
U16_F
" should bêmö 2 ms†%"U16_F"...\n", 
pcb
->
s°hªsh
, 2*pcb->
mss
));

773 
pcb
->
s°hªsh
 = 2*pcb->
mss
;

776 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3 *Öcb->
mss
;

777 
pcb
->
Êags
 |
TF_INFR
;

781 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

782 
pcb
->
cwnd
 +pcb->
mss
;

787 
	`LWIP_DEBUGF
(
TCP_FR_DEBUG
, ("t˝_ª˚ive: du∑ckávîãd %"
U32_F
" %"U32_F"\n",

788 
pcb
->
¢d_wl1
 +Öcb->
¢d_wnd
, 
right_wnd_edge
));

790 } i‡(
	`TCP_SEQ_BETWEEN
(
ackno
, 
pcb
->
œ°ack
+1,Öcb->
¢d_max
)){

796 i‡(
pcb
->
Êags
 & 
TF_INFR
) {

797 
pcb
->
Êags
 &~
TF_INFR
;

798 
pcb
->
cwnd
 =Öcb->
s°hªsh
;

802 
pcb
->
ƒtx
 = 0;

805 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

808 
pcb
->
acked
 = (
u16_t
)(
ackno
 -Öcb->
œ°ack
);

810 
pcb
->
¢d_buf
 +pcb->
acked
;

813 
pcb
->
du∑cks
 = 0;

814 
pcb
->
œ°ack
 = 
ackno
;

818 i‡(
pcb
->
°©e
 >
ESTABLISHED
) {

819 i‡(
pcb
->
cwnd
 <Öcb->
s°hªsh
) {

820 i‡((
u16_t
)(
pcb
->
cwnd
 +Öcb->
mss
) >Öcb->cwnd) {

821 
pcb
->
cwnd
 +pcb->
mss
;

823 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: slow sèπ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

825 
u16_t
 
√w_cwnd
 = (
pcb
->
cwnd
 +Öcb->
mss
 *Öcb->mss /Öcb->cwnd);

826 i‡(
√w_cwnd
 > 
pcb
->
cwnd
) {

827 
pcb
->
cwnd
 = 
√w_cwnd
;

829 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ª˚ive: c⁄ge°i⁄ávoid™˚ cwnd %"
U16_F
"\n", 
pcb
->
cwnd
));

832 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: ACK f‹ %"
U32_F
", unacked->seqno %"U32_F":%"U32_F"\n",

833 
ackno
,

834 
pcb
->
u«cked
 !
NULL
?

835 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
): 0,

836 
pcb
->
u«cked
 !
NULL
?

837 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(pcb->unacked): 0));

841 
pcb
->
u«cked
 !
NULL
 &&

842 
	`TCP_SEQ_LEQ
(
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

843 
	`TCP_TCPLEN
(
pcb
->
u«cked
), 
ackno
)) {

844 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unacked\n",

845 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
),

846 
	`¡ohl
(
pcb
->
u«cked
->
t˝hdr
->
£qno
) +

847 
	`TCP_TCPLEN
(
pcb
->
u«cked
)));

849 
√xt
 = 
pcb
->
u«cked
;

850 
pcb
->
u«cked
 =Öcb->u«cked->
√xt
;

852 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

853 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

854 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

855 
	`t˝_£g_‰ì
(
√xt
);

857 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög u«cked)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

858 i‡(
pcb
->
¢d_queuñí
 != 0) {

859 
	`LWIP_ASSERT
("t˝_ª˚ive: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

860 
pcb
->
un£¡
 !
NULL
);

866 if(
pcb
->
u«cked
 =
NULL
)

867 
pcb
->
πime
 = -1;

869 
pcb
->
πime
 = 0;

871 
pcb
->
pﬁ…mr
 = 0;

874 
pcb
->
acked
 = 0;

883 
pcb
->
un£¡
 !
NULL
 &&

886 
	`TCP_SEQ_BETWEEN
(
ackno
, 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
’cb->un£¡),Öcb->
¢d_max
)

888 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive:Ñemovög %"
U32_F
":%"U32_F" fromÖcb->unsent\n",

889 
	`¡ohl
(
pcb
->
un£¡
->
t˝hdr
->
£qno
),Çtohl(pcb->unsent->tcphdr->seqno) +

890 
	`TCP_TCPLEN
(
pcb
->
un£¡
)));

892 
√xt
 = 
pcb
->
un£¡
;

893 
pcb
->
un£¡
 =Öcb->un£¡->
√xt
;

894 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_ª˚ive: queuñí %"
U16_F
" ... ", (
u16_t
)
pcb
->
¢d_queuñí
));

895 
	`LWIP_ASSERT
("pcb->¢d_queuñí >pbuf_˛í“ext->p)", (
pcb
->
¢d_queuñí
 >
	`pbuf_˛í
(
√xt
->
p
)));

896 
pcb
->
¢d_queuñí
 -
	`pbuf_˛í
(
√xt
->
p
);

897 
	`t˝_£g_‰ì
(
√xt
);

898 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("%"
U16_F
" (a·î fªeög un£¡)\n", (
u16_t
)
pcb
->
¢d_queuñí
));

899 i‡(
pcb
->
¢d_queuñí
 != 0) {

900 
	`LWIP_ASSERT
("tcp_receive: valid queueÜength",

901 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

904 i‡(
pcb
->
un£¡
 !
NULL
) {

905 
pcb
->
¢d_nxt
 = 
	`ht⁄l
’cb->
un£¡
->
t˝hdr
->
£qno
);

910 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Öcb->πã° %"
U32_F
"Ñtseq %"U32_F"áckno %"U32_F"\n",

911 
pcb
->
πã°
,Öcb->
π£q
, 
ackno
));

916 i‡(
pcb
->
πã°
 && 
	`TCP_SEQ_LT
’cb->
π£q
, 
ackno
)) {

919 
m
 = (
s16_t
)(
t˝_ticks
 - 
pcb
->
πã°
);

921 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive:Éx≥rõn˚dÑâ %"
U16_F
"Åicks (%"U16_F" msec).\n",

922 
m
, m * 
TCP_SLOW_INTERVAL
));

925 
m
 = m - (
pcb
->
ß
 >> 3);

926 
pcb
->
ß
 +
m
;

927 i‡(
m
 < 0) {

928 
m
 = -m;

930 
m
 = m - (
pcb
->
sv
 >> 2);

931 
pcb
->
sv
 +
m
;

932 
pcb
->
πo
 = (pcb->
ß
 >> 3Ë+Öcb->
sv
;

934 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ª˚ive: RTO %"
U16_F
" (%"U16_F" milliseconds)\n",

935 
pcb
->
πo
,Öcb->πÿ* 
TCP_SLOW_INTERVAL
));

937 
pcb
->
πã°
 = 0;

943 i‡(
t˝Àn
 > 0) {

974 i‡(
	`TCP_SEQ_BETWEEN
(
pcb
->
rcv_nxt
, 
£qno
 + 1, seqnÿ+ 
t˝Àn
 - 1)){

995 
off
 = 
pcb
->
rcv_nxt
 - 
£qno
;

996 
p
 = 
ö£g
.p;

997 
	`LWIP_ASSERT
("ö£g.∞!NULL", 
ö£g
.
p
);

998 
	`LWIP_ASSERT
("öß√ off£t!", (
off
 < 0x7fff));

999 i‡(
ö£g
.
p
->
Àn
 < 
off
) {

1000 
	`LWIP_ASSERT
("pbu‡toÿsh‹t!", (((
s32_t
)
ö£g
.
p
->
tŸ_Àn
Ë>
off
));

1001 
√w_tŸ_Àn
 = (
u16_t
)(
ö£g
.
p
->
tŸ_Àn
 - 
off
);

1002 
p
->
Àn
 < 
off
) {

1003 
off
 -
p
->
Àn
;

1007 
p
->
tŸ_Àn
 = 
√w_tŸ_Àn
;

1008 
p
->
Àn
 = 0;

1009 
p
 =Ö->
√xt
;

1011 if(
	`pbuf_hódî
(
p
, (
s16_t
)-
off
)) {

1013 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1016 if(
	`pbuf_hódî
(
ö£g
.
p
, (
s16_t
)-
off
)) {

1018 
	`LWIP_ASSERT
("pbuf_header failed", 0);

1023 
ö£g
.
d©≠å
 = 
p
->
∑ylﬂd
;

1024 
ö£g
.
Àn
 -(
u16_t
)(
pcb
->
rcv_nxt
 - 
£qno
);

1025 
ö£g
.
t˝hdr
->
£qno
 = seqnÿ
pcb
->
rcv_nxt
;

1028 i‡(
	`TCP_SEQ_LT
(
£qno
, 
pcb
->
rcv_nxt
)){

1032 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("t˝_ª˚ive: du∂iˇã seqnÿ%"
U32_F
"\n", 
£qno
));

1033 
	`t˝_ack_now
(
pcb
);

1040 i‡(
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,

1041 
pcb
->
rcv_nxt
 +Öcb->
rcv_wnd
 - 1)){

1042 i‡(
pcb
->
rcv_nxt
 =
£qno
) {

1043 
ac˚±ed_ö£q
 = 1;

1047 #i‡
TCP_QUEUE_OOSEQ


1048 i‡(
pcb
->
oo£q
 !
NULL
 &&

1049 
	`TCP_SEQ_LEQ
(
pcb
->
oo£q
->
t˝hdr
->
£qno
, seqnÿ+ 
ö£g
.
Àn
)) {

1050 i‡(
pcb
->
oo£q
->
Àn
 > 0) {

1053 
ö£g
.
Àn
 = (
u16_t
)(
pcb
->
oo£q
->
t˝hdr
->
£qno
 - seqno);

1054 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1057 i‡((
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
)) ==

1058 (
	`TCPH_FLAGS
(
pcb
->
oo£q
->
t˝hdr
Ë& (
TCP_FIN
|
TCP_SYN
))) {

1059 
t˝_£g
 *
ﬁd_oo£q
 = 
pcb
->
oo£q
;

1060 
pcb
->
oo£q
 =Öcb->oo£q->
√xt
;

1061 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
ﬁd_oo£q
);

1067 
t˝Àn
 = 
	`TCP_TCPLEN
(&
ö£g
);

1072 i‡(
pcb
->
°©e
 !
CLOSE_WAIT
) {

1073 
pcb
->
rcv_nxt
 +
t˝Àn
;

1077 i‡(
pcb
->
rcv_wnd
 < 
t˝Àn
) {

1078 
pcb
->
rcv_wnd
 = 0;

1080 
pcb
->
rcv_wnd
 -
t˝Àn
;

1083 i‡(
pcb
->
rcv_™n_wnd
 < 
t˝Àn
) {

1084 
pcb
->
rcv_™n_wnd
 = 0;

1086 
pcb
->
rcv_™n_wnd
 -
t˝Àn
;

1098 i‡(
ö£g
.
p
->
tŸ_Àn
 > 0) {

1099 
ªcv_d©a
 = 
ö£g
.
p
;

1103 
ö£g
.
p
 = 
NULL
;

1105 i‡(
	`TCPH_FLAGS
(
ö£g
.
t˝hdr
Ë& 
TCP_FIN
) {

1106 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive:Ñeceived FIN.\n"));

1107 
ªcv_Êags
 = 
TF_GOT_FIN
;

1110 #i‡
TCP_QUEUE_OOSEQ


1113 
pcb
->
oo£q
 !
NULL
 &&

1114 
pcb
->
oo£q
->
t˝hdr
->
£qno
 =pcb->
rcv_nxt
) {

1116 
c£g
 = 
pcb
->
oo£q
;

1117 
£qno
 = 
pcb
->
oo£q
->
t˝hdr
->seqno;

1119 
pcb
->
rcv_nxt
 +
	`TCP_TCPLEN
(
c£g
);

1120 i‡(
pcb
->
rcv_wnd
 < 
	`TCP_TCPLEN
(
c£g
)) {

1121 
pcb
->
rcv_wnd
 = 0;

1123 
pcb
->
rcv_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1125 i‡(
pcb
->
rcv_™n_wnd
 < 
	`TCP_TCPLEN
(
c£g
)) {

1126 
pcb
->
rcv_™n_wnd
 = 0;

1128 
pcb
->
rcv_™n_wnd
 -
	`TCP_TCPLEN
(
c£g
);

1131 i‡(
c£g
->
p
->
tŸ_Àn
 > 0) {

1134 i‡(
ªcv_d©a
) {

1135 
	`pbuf_ˇt
(
ªcv_d©a
, 
c£g
->
p
);

1137 
ªcv_d©a
 = 
c£g
->
p
;

1139 
c£g
->
p
 = 
NULL
;

1141 i‡(
	`TCPH_FLAGS
(
c£g
->
t˝hdr
Ë& 
TCP_FIN
) {

1142 
	`LWIP_DEBUGF
(
TCP_INPUT_DEBUG
, ("tcp_receive: dequeued FIN.\n"));

1143 
ªcv_Êags
 = 
TF_GOT_FIN
;

1144 i‡(
pcb
->
°©e
 =
ESTABLISHED
) {

1145 
pcb
->
°©e
 = 
CLOSE_WAIT
;

1150 
pcb
->
oo£q
 = 
c£g
->
√xt
;

1151 
	`t˝_£g_‰ì
(
c£g
);

1157 
	`t˝_ack
(
pcb
);

1161 
	`t˝_ack_now
(
pcb
);

1162 #i‡
TCP_QUEUE_OOSEQ


1164 i‡(
pcb
->
oo£q
 =
NULL
) {

1165 
pcb
->
oo£q
 = 
	`t˝_£g_c›y
(&
ö£g
);

1179 
¥ev
 = 
NULL
;

1180 
√xt
 = 
pcb
->
oo£q
;Çexà!
NULL
;Çext =Çext->next) {

1181 i‡(
£qno
 =
√xt
->
t˝hdr
->seqno) {

1186 i‡(
ö£g
.
Àn
 > 
√xt
->len) {

1190 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1191 i‡(
c£g
 !
NULL
) {

1192 
c£g
->
√xt
 =Çext->next;

1193 i‡(
¥ev
 !
NULL
) {

1194 
¥ev
->
√xt
 = 
c£g
;

1196 
pcb
->
oo£q
 = 
c£g
;

1198 
	`t˝_£g_‰ì
(
√xt
);

1199 i‡(
c£g
->
√xt
 !
NULL
) {

1200 
√xt
 = 
c£g
->next;

1201 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
c£g
->
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1203 
c£g
->
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1204 
	`pbuf_ªÆloc
(
c£g
->
p
, c£g->
Àn
);

1216 i‡(
¥ev
 =
NULL
) {

1217 i‡(
	`TCP_SEQ_LT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1223 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1225 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1226 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1228 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1229 i‡(
c£g
 !
NULL
) {

1230 
c£g
->
√xt
 =Çext;

1231 
pcb
->
oo£q
 = 
c£g
;

1238 if(
	`TCP_SEQ_BETWEEN
(
£qno
, 
¥ev
->
t˝hdr
->£qno+1, 
√xt
->tcphdr->seqno-1)){

1244 i‡(
	`TCP_SEQ_GT
(
£qno
 + 
ö£g
.
Àn
, 
√xt
->
t˝hdr
->seqno)) {

1246 
ö£g
.
Àn
 = (
u16_t
)(
√xt
->
t˝hdr
->
£qno
 - seqno);

1247 
	`pbuf_ªÆloc
(
ö£g
.
p
, in£g.
Àn
);

1250 
c£g
 = 
	`t˝_£g_c›y
(&
ö£g
);

1251 i‡(
c£g
 !
NULL
) {

1252 
c£g
->
√xt
 =Çext;

1253 
¥ev
->
√xt
 = 
c£g
;

1254 i‡(
	`TCP_SEQ_GT
(
¥ev
->
t˝hdr
->
£qno
 +Öªv->
Àn
, seqno)) {

1256 
¥ev
->
Àn
 = (
u16_t
)(
£qno
 -Öªv->
t˝hdr
->seqno);

1257 
	`pbuf_ªÆloc
(
¥ev
->
p
,Öªv->
Àn
);

1265 i‡(
√xt
->√xà=
NULL
 &&

1266 
	`TCP_SEQ_GT
(
£qno
, 
√xt
->
t˝hdr
->seqno)) {

1267 
√xt
->√xà
	`t˝_£g_c›y
(&
ö£g
);

1268 i‡(
√xt
->√xà!
NULL
) {

1269 i‡(
	`TCP_SEQ_GT
(
√xt
->
t˝hdr
->
£qno
 +Çext->
Àn
, seqno)) {

1271 
√xt
->
Àn
 = (
u16_t
)(
£qno
 -Çext->
t˝hdr
->seqno);

1272 
	`pbuf_ªÆloc
(
√xt
->
p
,Çext->
Àn
);

1278 
¥ev
 = 
√xt
;

1285 
	`t˝_ack_now
(
pcb
);

1292 if(!
	`TCP_SEQ_BETWEEN
(
£qno
, 
pcb
->
rcv_nxt
,Öcb->rcv_nxà+Öcb->
rcv_wnd
-1)){

1293 
	`t˝_ack_now
(
pcb
);

1296  
ac˚±ed_ö£q
;

1297 
	}
}

1309 
	$t˝_∑r£›t
(
t˝_pcb
 *
pcb
)

1311 
u8_t
 
c
;

1312 
u8_t
 *
›ts
, 
›t
;

1313 
u16_t
 
mss
;

1315 
›ts
 = (
u8_t
 *)
t˝hdr
 + 
TCP_HLEN
;

1318 if(
	`TCPH_HDRLEN
(
t˝hdr
) > 0x5) {

1319 
c
 = 0; c < (
	`TCPH_HDRLEN
(
t˝hdr
) - 5) << 2 ;) {

1320 
›t
 = 
›ts
[
c
];

1321 i‡(
›t
 == 0x00) {

1324 } i‡(
›t
 == 0x01) {

1325 ++
c
;

1327 } i‡(
›t
 == 0x02 &&

1328 
›ts
[
c
 + 1] == 0x04) {

1330 
mss
 = (
›ts
[
c
 + 2] << 8) | opts[c + 3];

1332 
pcb
->
mss
 = ((ms†> 
TCP_MSS
) || (mss == 0)) ? TCP_MSS : mss;

1337 i‡(
›ts
[
c
 + 1] == 0) {

1344 
c
 +
›ts
[c + 1];

1348 
	}
}

	@net/lwip/core/tcp_out.c

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/t˝.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/mem.h
"

48 
	~"lwù/memp.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/ù_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/öë.h
"

53 
	~"lwù/öë_chksum.h
"

54 
	~"lwù/°©s.h
"

55 
	~"lwù/¢mp.h
"

57 
	~<°rög.h
>

60 
t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
);

69 
îr_t


70 
	$t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
)

73  
	`t˝_íqueue
(
pcb
, 
NULL
, 0, 
Êags
, 
TCP_WRITE_FLAG_COPY
, NULL, 0);

74 
	}
}

94 
îr_t


95 
	$t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©a
, 
u16_t
 
Àn
, 
u8_t
 
≠iÊags
)

97 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_wrôe’cb=%p, d©a=%p,Üí=%"
U16_F
",ápiÊags=%"U16_F")\n", (*)
pcb
,

98 
d©a
, 
Àn
, (
u16_t
)
≠iÊags
));

100 i‡(
pcb
->
°©e
 =
ESTABLISHED
 ||

101 
pcb
->
°©e
 =
CLOSE_WAIT
 ||

102 
pcb
->
°©e
 =
SYN_SENT
 ||

103 
pcb
->
°©e
 =
SYN_RCVD
) {

104 i‡(
Àn
 > 0) {

105  
	`t˝_íqueue
(
pcb
, (*)
d©a
, 
Àn
, 0, 
≠iÊags
, 
NULL
, 0);

107  
ERR_OK
;

109 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_STATE
 | 3, ("tcp_write() called in invalid state\n"));

110  
ERR_CONN
;

112 
	}
}

129 
îr_t


130 
	$t˝_íqueue
(
t˝_pcb
 *
pcb
, *
¨g
, 
u16_t
 
Àn
,

131 
u8_t
 
Êags
, u8_à
≠iÊags
,

132 
u8_t
 *
›td©a
, u8_à
›éí
)

134 
pbuf
 *
p
;

135 
t˝_£g
 *
£g
, *
u£g
, *
queue
;

136 
u32_t
 
£qno
;

137 
u16_t
 
À·
, 
£gÀn
;

138 *
±r
;

139 
u16_t
 
queuñí
;

141 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_íqueue’cb=%p,árg=%p,Üí=%"
U16_F
", fœgs=%"
X16_F
",ápiflags=%"U16_F")\n",

142 (*)
pcb
, 
¨g
, 
Àn
, (
u16_t
)
Êags
, (u16_t)
≠iÊags
));

143 
	`LWIP_ERROR
("tcp_enqueue:Üen == 0 || optlen == 0 (programmer violates API)",

144 ((
Àn
 =0Ë|| (
›éí
 =0)),  
ERR_ARG
;);

145 
	`LWIP_ERROR
("tcp_enqueue:árg == NULL || optdata == NULL (programmer violates API)",

146 ((
¨g
 =
NULL
Ë|| (
›td©a
 =NULL)),  
ERR_ARG
;);

148 i‡(
Àn
 > 
pcb
->
¢d_buf
) {

149 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿmuch d©®÷í=%"
U16_F
" > snd_buf=%"U16_F")\n", 
Àn
, 
pcb
->
¢d_buf
));

150 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

151  
ERR_MEM
;

153 
À·
 = 
Àn
;

154 
±r
 = 
¨g
;

158 
£qno
 = 
pcb
->
¢d_lbb
;

160 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: queuñí: %"
U16_F
"\n", (
u16_t
)
pcb
->
¢d_queuñí
));

164 
queuñí
 = 
pcb
->
¢d_queuñí
;

166 i‡((
queuñí
 >
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

167 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 3, ("t˝_íqueue:Åoÿl⁄g queuê%"
U16_F
" (max %"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

168 
	`TCP_STATS_INC
(
t˝
.
memîr
);

169 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

170  
ERR_MEM
;

172 i‡(
queuñí
 != 0) {

173 
	`LWIP_ASSERT
("tcp_enqueue:Öbufs on queue =>átÜeast one queueÇon-empty",

174 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

176 
	`LWIP_ASSERT
("tcp_enqueue:ÇoÖbufs on queue => both queuesÉmpty",

177 
pcb
->
u«cked
 =
NULL
 &&Öcb->
un£¡
 == NULL);

182 
u£g
 = 
queue
 = 
£g
 = 
NULL
;

183 
£gÀn
 = 0;

184 
queue
 =
NULL
 || 
À·
 > 0) {

188 
£gÀn
 = 
À·
 > 
pcb
->
mss
?Öcb->mss:Üeft;

191 
£g
 = 
	`memp_mÆloc
(
MEMP_TCP_SEG
);

192 i‡(
£g
 =
NULL
) {

193 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory forÅcp_seg\n"));

194 
memîr
;

196 
£g
->
√xt
 = 
NULL
;

197 
£g
->
p
 = 
NULL
;

200 i‡(
queue
 =
NULL
) {

201 
queue
 = 
£g
;

206 
	`LWIP_ASSERT
("u£g !NULL", 
u£g
 !
NULL
);

207 
u£g
->
√xt
 = 
£g
;

210 
u£g
 = 
£g
;

218 i‡(
›td©a
 !
NULL
) {

219 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
›éí
, 
PBUF_RAM
)Ë=
NULL
) {

220 
memîr
;

222 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold optlen",

223 (
£g
->
p
->
Àn
 >
›éí
));

224 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

225 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

228 i‡(
≠iÊags
 & 
TCP_WRITE_FLAG_COPY
) {

229 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_RAM
)Ë=
NULL
) {

230 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueuê: couldÇŸáŒoˇã mem‹y f‹Öbu‡c›y sizê%"
U16_F
"\n", 
£gÀn
));

231 
memîr
;

233 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can holdÅhe complete seglen",

234 (
£g
->
p
->
Àn
 >
£gÀn
));

235 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

236 i‡(
¨g
 !
NULL
) {

237 
	`MEMCPY
(
£g
->
p
->
∑ylﬂd
, 
±r
, 
£gÀn
);

239 
£g
->
d©≠å
 = seg->
p
->
∑ylﬂd
;

248 i‡((
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
£gÀn
, 
PBUF_ROM
)Ë=
NULL
) {

249 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory for zero-copyÖbuf\n"));

250 
memîr
;

252 ++
queuñí
;

254 
p
->
∑ylﬂd
 = 
±r
;

255 
£g
->
d©≠å
 = 
±r
;

258 i‡((
£g
->
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 0, 
PBUF_RAM
)Ë=
NULL
) {

261 
	`pbuf_‰ì
(
p
);

262 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue: couldÇotállocate memory for headerÖbuf\n"));

263 
memîr
;

265 
queuñí
 +
	`pbuf_˛í
(
£g
->
p
);

268 
	`pbuf_ˇt
(
£g
->
p
 ,Ö );

269 
p
 = 
NULL
;

274 i‡((
queuñí
 > 
TCP_SND_QUEUELEN
Ë|| (queuñí > 
TCP_SNDQUEUELEN_OVERFLOW
)) {

275 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("t˝_íqueue: queuêtoÿl⁄g %"
U16_F
" (%"U16_F")\n", 
queuñí
, 
TCP_SND_QUEUELEN
));

276 
memîr
;

279 
£g
->
Àn
 = 
£gÀn
;

282 i‡(
	`pbuf_hódî
(
£g
->
p
, 
TCP_HLEN
)) {

283 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 2, ("tcp_enqueue:ÇoÑoom for TCP header inÖbuf.\n"));

284 
	`TCP_STATS_INC
(
t˝
.
îr
);

285 
memîr
;

287 
£g
->
t˝hdr
 = seg->
p
->
∑ylﬂd
;

288 
£g
->
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

289 
£g
->
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

290 
£g
->
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

291 
£g
->
t˝hdr
->
urgp
 = 0;

292 
	`TCPH_FLAGS_SET
(
£g
->
t˝hdr
, 
Êags
);

296 i‡(
›td©a
 =
NULL
) {

297 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, 5);

300 
	`TCPH_HDRLEN_SET
(
£g
->
t˝hdr
, (5 + 
›éí
 / 4));

304 
	`SMEMCPY
(
£g
->
d©≠å
, 
›td©a
, 
›éí
);

306 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
, ("t˝_íqueue: queueög %"
U32_F
":%"U32_F" (0x%"
X16_F
")\n",

307 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),

308 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg),

309 (
u16_t
)
Êags
));

311 
À·
 -
£gÀn
;

312 
£qno
 +
£gÀn
;

313 
±r
 = (*)((
u8_t
 *Ìå + 
£gÀn
);

319 i‡(
pcb
->
un£¡
 =
NULL
) {

320 
u£g
 = 
NULL
;

323 
u£g
 = 
pcb
->
un£¡
; u£g->
√xt
 !
NULL
; useg = useg->next);

329 i‡(
u£g
 !
NULL
 &&

330 
	`TCP_TCPLEN
(
u£g
) != 0 &&

331 !(
	`TCPH_FLAGS
(
u£g
->
t˝hdr
Ë& (
TCP_SYN
 | 
TCP_FIN
)) &&

332 !(
Êags
 & (
TCP_SYN
 | 
TCP_FIN
)) &&

334 
u£g
->
Àn
 + 
queue
->À¿<
pcb
->
mss
) {

336 if(
	`pbuf_hódî
(
queue
->
p
, -
TCP_HLEN
)) {

338 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

339 
	`TCP_STATS_INC
(
t˝
.
îr
);

340 
memîr
;

342 
	`pbuf_ˇt
(
u£g
->
p
, 
queue
->p);

343 
u£g
->
Àn
 +
queue
->len;

344 
u£g
->
√xt
 = 
queue
->next;

346 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: chaöög segmíts,ÇewÜí %"
U16_F
"\n", 
u£g
->
Àn
));

347 i‡(
£g
 =
queue
) {

348 
£g
 = 
NULL
;

350 
	`memp_‰ì
(
MEMP_TCP_SEG
, 
queue
);

354 i‡(
u£g
 =
NULL
) {

356 
pcb
->
un£¡
 = 
queue
;

360 
u£g
->
√xt
 = 
queue
;

363 i‡((
Êags
 & 
TCP_SYN
Ë|| (Êag†& 
TCP_FIN
)) {

364 ++
Àn
;

366 i‡(
Êags
 & 
TCP_FIN
) {

367 
pcb
->
Êags
 |
TF_FIN
;

369 
pcb
->
¢d_lbb
 +
Àn
;

371 
pcb
->
¢d_buf
 -
Àn
;

374 
pcb
->
¢d_queuñí
 = 
queuñí
;

375 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
, ("t˝_íqueue: %"
S16_F
" (a·îÉnqueued)\n", 
pcb
->
¢d_queuñí
));

376 i‡(
pcb
->
¢d_queuñí
 != 0) {

377 
	`LWIP_ASSERT
("tcp_enqueue: valid queueÜength",

378 
pcb
->
u«cked
 !
NULL
 ||Öcb->
un£¡
 != NULL);

383 i‡(
£g
 !
NULL
 && 
£gÀn
 > 0 && seg->
t˝hdr
 !NULL && ((
≠iÊags
 & 
TCP_WRITE_FLAG_MORE
)==0)) {

384 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_PSH
);

387  
ERR_OK
;

388 
memîr
:

389 
pcb
->
Êags
 |
TF_NAGLEMEMERR
;

390 
	`TCP_STATS_INC
(
t˝
.
memîr
);

392 i‡(
queue
 !
NULL
) {

393 
	`t˝_£gs_‰ì
(
queue
);

395 i‡(
pcb
->
¢d_queuñí
 != 0) {

396 
	`LWIP_ASSERT
("t˝_íqueue: vÆid queuêÀngth", 
pcb
->
u«cked
 !
NULL
 ||

397 
pcb
->
un£¡
 !
NULL
);

399 
	`LWIP_DEBUGF
(
TCP_QLEN_DEBUG
 | 
LWIP_DBG_STATE
, ("t˝_íqueue: %"
S16_F
" (wôh memÉº)\n", 
pcb
->
¢d_queuñí
));

400  
ERR_MEM
;

401 
	}
}

410 
îr_t


411 
	$t˝_ouçut
(
t˝_pcb
 *
pcb
)

413 
pbuf
 *
p
;

414 
t˝_hdr
 *
t˝hdr
;

415 
t˝_£g
 *
£g
, *
u£g
;

416 
u32_t
 
wnd
;

417 #i‡
TCP_CWND_DEBUG


418 
s16_t
 
i
 = 0;

425 i‡(
t˝_öput_pcb
 =
pcb
) {

426  
ERR_OK
;

429 
wnd
 = 
	`LWIP_MIN
(
pcb
->
¢d_wnd
,Öcb->
cwnd
);

431 
£g
 = 
pcb
->
un£¡
;

434 
u£g
 = 
pcb
->
u«cked
;

435 i‡(
u£g
 !
NULL
) {

436 ; 
u£g
->
√xt
 !
NULL
; useg = useg->next);

445 i‡(
pcb
->
Êags
 & 
TF_ACK_NOW
 &&

446 (
£g
 =
NULL
 ||

447 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 > 
wnd
)) {

448 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

449 i‡(
p
 =
NULL
) {

450 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output: (ACK) couldÇotállocateÖbuf\n"));

451  
ERR_BUF
;

453 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut: sídög ACK f‹ %"
U32_F
"\n", 
pcb
->
rcv_nxt
));

455 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

457 
t˝hdr
 = 
p
->
∑ylﬂd
;

458 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

459 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

460 
t˝hdr
->
£qno
 = 
	`ht⁄l
(
pcb
->
¢d_nxt
);

461 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

462 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_ACK
);

463 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

464 
t˝hdr
->
urgp
 = 0;

465 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

467 
t˝hdr
->
chksum
 = 0;

468 #i‡
CHECKSUM_GEN_TCP


469 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),

470 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

472 #i‡
LWIP_NETIF_HWADDRHINT


474 
√tif
 *netif;

475 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

476 if(
√tif
 !
NULL
){

477 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

478 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

479 
pcb
->
tos
, 
IP_PROTO_TCP
, 
√tif
);

480 
√tif
->
addr_höt
 = 
NULL
;

484 
	`ù_ouçut
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

485 
IP_PROTO_TCP
);

487 
	`pbuf_‰ì
(
p
);

489  
ERR_OK
;

492 #i‡
TCP_OUTPUT_DEBUG


493 i‡(
£g
 =
NULL
) {

494 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("tcp_output:ÇothingÅo send (%p)\n",

495 (*)
pcb
->
un£¡
));

498 #i‡
TCP_CWND_DEBUG


499 i‡(
£g
 =
NULL
) {

500 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F


501 ", cwnd %"
U16_F
", wnd %"
U32_F


502 ", seg =NULL,áck %"
U32_F
"\n",

503 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,Öcb->
œ°ack
));

505 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
,

506 ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F


507 ",Éffwnd %"
U32_F
", seq %"U32_F",áck %"U32_F"\n",

508 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

509 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
,

510 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
));

514 
£g
 !
NULL
 &&

515 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 <
wnd
) {

516 
	`LWIP_ASSERT
("RSTÇotÉxpected here!",

517 (
	`TCPH_FLAGS
(
£g
->
t˝hdr
Ë& 
TCP_RST
) == 0);

525 if((
	`t˝_do_ouçut_«gÀ
(
pcb
) == 0) &&

526 ((
pcb
->
Êags
 & (
TF_NAGLEMEMERR
 | 
TF_FIN
)) == 0)){

529 #i‡
TCP_CWND_DEBUG


530 
	`LWIP_DEBUGF
(
TCP_CWND_DEBUG
, ("t˝_ouçut: snd_wnd %"
U16_F
", cwnd %"U16_F", wnd %"
U32_F
",Éffwnd %"U32_F", seq %"U32_F",áck %"U32_F", i %"
S16_F
"\n",

531 
pcb
->
¢d_wnd
,Öcb->
cwnd
, 
wnd
,

532 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ seg->
Àn
 -

533 
pcb
->
œ°ack
,

534 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
), 
pcb
->
œ°ack
, 
i
));

535 ++
i
;

538 
pcb
->
un£¡
 = 
£g
->
√xt
;

540 i‡(
pcb
->
°©e
 !
SYN_SENT
) {

541 
	`TCPH_SET_FLAG
(
£g
->
t˝hdr
, 
TCP_ACK
);

542 
pcb
->
Êags
 &~(
TF_ACK_DELAY
 | 
TF_ACK_NOW
);

545 
	`t˝_ouçut_£gmít
(
£g
, 
pcb
);

546 
pcb
->
¢d_nxt
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë+ 
	`TCP_TCPLEN
(seg);

547 i‡(
	`TCP_SEQ_LT
(
pcb
->
¢d_max
,Öcb->
¢d_nxt
)) {

548 
pcb
->
¢d_max
 =Öcb->
¢d_nxt
;

551 i‡(
	`TCP_TCPLEN
(
£g
) > 0) {

552 
£g
->
√xt
 = 
NULL
;

554 i‡(
pcb
->
u«cked
 =
NULL
) {

555 
pcb
->
u«cked
 = 
£g
;

556 
u£g
 = 
£g
;

562 i‡(
	`TCP_SEQ_LT
(
	`¡ohl
(
£g
->
t˝hdr
->
£qno
),Çtohl(
u£g
->tcphdr->seqno))){

564 
£g
->
√xt
 = 
pcb
->
u«cked
;

565 
pcb
->
u«cked
 = 
£g
;

568 
u£g
->
√xt
 = 
£g
;

569 
u£g
 = u£g->
√xt
;

574 
	`t˝_£g_‰ì
(
£g
);

576 
£g
 = 
pcb
->
un£¡
;

579 i‡(
£g
 !
NULL
 && 
pcb
->
≥rsi°_backoff
 == 0 &&

580 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
Ë- 
pcb
->
œ°ack
 + seg->
Àn
 >Öcb->
¢d_wnd
) {

582 
pcb
->
≥rsi°_˙t
 = 0;

583 
pcb
->
≥rsi°_backoff
 = 1;

586 
pcb
->
Êags
 &~
TF_NAGLEMEMERR
;

587  
ERR_OK
;

588 
	}
}

597 
	$t˝_ouçut_£gmít
(
t˝_£g
 *
£g
, 
t˝_pcb
 *
pcb
)

599 
u16_t
 
Àn
;

600 
√tif
 *netif;

603 
	`¢mp_öc_t˝out£gs
();

607 
£g
->
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

610 
£g
->
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

614 i‡(
	`ù_addr_ißny
(&(
pcb
->
loˇl_ù
))) {

615 
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
));

616 i‡(
√tif
 =
NULL
) {

619 
	`ù_addr_£t
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
));

623 if(
pcb
->
πime
 == -1)

624 
pcb
->
πime
 = 0;

626 i‡(
pcb
->
πã°
 == 0) {

627 
pcb
->
πã°
 = 
t˝_ticks
;

628 
pcb
->
π£q
 = 
	`¡ohl
(
£g
->
t˝hdr
->
£qno
);

630 
	`LWIP_DEBUGF
(
TCP_RTO_DEBUG
, ("t˝_ouçut_£gmít:Ñt£q %"
U32_F
"\n", 
pcb
->
π£q
));

632 
	`LWIP_DEBUGF
(
TCP_OUTPUT_DEBUG
, ("t˝_ouçut_£gmít: %"
U32_F
":%"U32_F"\n",

633 
	`ht⁄l
(
£g
->
t˝hdr
->
£qno
), htonl(seg->tcphdr->seqno) +

634 
£g
->
Àn
));

636 
Àn
 = (
u16_t
)((
u8_t
 *)
£g
->
t˝hdr
 - (u8_à*)£g->
p
->
∑ylﬂd
);

638 
£g
->
p
->
Àn
 -=Üen;

639 
£g
->
p
->
tŸ_Àn
 -
Àn
;

641 
£g
->
p
->
∑ylﬂd
 = seg->
t˝hdr
;

643 
£g
->
t˝hdr
->
chksum
 = 0;

644 #i‡
CHECKSUM_GEN_TCP


645 
£g
->
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(£g->
p
,

646 &(
pcb
->
loˇl_ù
),

647 &(
pcb
->
ªmŸe_ù
),

648 
IP_PROTO_TCP
, 
£g
->
p
->
tŸ_Àn
);

650 
	`TCP_STATS_INC
(
t˝
.
xmô
);

652 #i‡
LWIP_NETIF_HWADDRHINT


654 
√tif
 *netif;

655 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

656 if(
√tif
 !
NULL
){

657 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

658 
	`ù_ouçut_if
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

659 
pcb
->
tos
, 
IP_PROTO_TCP
, 
√tif
);

660 
√tif
->
addr_höt
 = 
NULL
;

664 
	`ù_ouçut
(
£g
->
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,Öcb->
tos
,

665 
IP_PROTO_TCP
);

667 
	}
}

690 
	$t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

691 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

692 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
)

694 
pbuf
 *
p
;

695 
t˝_hdr
 *
t˝hdr
;

696 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

697 i‡(
p
 =
NULL
) {

698 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_rst: couldÇotállocate memory forÖbuf\n"));

701 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

702 (
p
->
Àn
 >(
t˝_hdr
)));

704 
t˝hdr
 = 
p
->
∑ylﬂd
;

705 
t˝hdr
->
§c
 = 
	`ht⁄s
(
loˇl_p‹t
);

706 
t˝hdr
->
de°
 = 
	`ht⁄s
(
ªmŸe_p‹t
);

707 
t˝hdr
->
£qno
 = 
	`ht⁄l
(seqno);

708 
t˝hdr
->
ackno
 = 
	`ht⁄l
(ackno);

709 
	`TCPH_FLAGS_SET
(
t˝hdr
, 
TCP_RST
 | 
TCP_ACK
);

710 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
TCP_WND
);

711 
t˝hdr
->
urgp
 = 0;

712 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

714 
t˝hdr
->
chksum
 = 0;

715 #i‡
CHECKSUM_GEN_TCP


716 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, 
loˇl_ù
, 
ªmŸe_ù
,

717 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

719 
	`TCP_STATS_INC
(
t˝
.
xmô
);

720 
	`¢mp_öc_t˝ouå°s
();

722 
	`ù_ouçut
(
p
, 
loˇl_ù
, 
ªmŸe_ù
, 
TCP_TTL
, 0, 
IP_PROTO_TCP
);

723 
	`pbuf_‰ì
(
p
);

724 
	`LWIP_DEBUGF
(
TCP_RST_DEBUG
, ("t˝_r°: seqnÿ%"
U32_F
"ácknÿ%"U32_F".\n", 
£qno
, 
ackno
));

725 
	}
}

735 
	$t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
)

737 
t˝_£g
 *
£g
;

739 i‡(
pcb
->
u«cked
 =
NULL
) {

744 
£g
 = 
pcb
->
u«cked
; seg->
√xt
 !
NULL
; seg = seg->next);

746 
£g
->
√xt
 = 
pcb
->
un£¡
;

748 
pcb
->
un£¡
 =Öcb->
u«cked
;

750 
pcb
->
u«cked
 = 
NULL
;

752 
pcb
->
¢d_nxt
 = 
	`¡ohl
’cb->
un£¡
->
t˝hdr
->
£qno
);

754 ++
pcb
->
ƒtx
;

757 
pcb
->
πã°
 = 0;

760 
	`t˝_ouçut
(
pcb
);

761 
	}
}

771 
	$t˝_ªxmô
(
t˝_pcb
 *
pcb
)

773 
t˝_£g
 *
£g
;

775 i‡(
pcb
->
u«cked
 =
NULL
) {

780 
£g
 = 
pcb
->
u«cked
->
√xt
;

781 
pcb
->
u«cked
->
√xt
 =Öcb->
un£¡
;

782 
pcb
->
un£¡
 =Öcb->
u«cked
;

783 
pcb
->
u«cked
 = 
£g
;

785 
pcb
->
¢d_nxt
 = 
	`¡ohl
’cb->
un£¡
->
t˝hdr
->
£qno
);

787 ++
pcb
->
ƒtx
;

790 
pcb
->
πã°
 = 0;

793 
	`¢mp_öc_t˝ªå™s£gs
();

794 
	`t˝_ouçut
(
pcb
);

795 
	}
}

806 
	$t˝_kì∑live
(
t˝_pcb
 *
pcb
)

808 
pbuf
 *
p
;

809 
t˝_hdr
 *
t˝hdr
;

811 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: sídög KEEPALIVEÖrobêtÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

812 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

813 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

815 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live:Å˝_tick†%"
U32_F
"Öcb->tm∏%"U32_F"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

816 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

818 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
, 
PBUF_RAM
);

820 if(
p
 =
NULL
) {

821 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

825 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

826 (
p
->
Àn
 >(
t˝_hdr
)));

828 
t˝hdr
 = 
p
->
∑ylﬂd
;

829 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

830 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

831 
t˝hdr
->
£qno
 = 
	`ht⁄l
(
pcb
->
¢d_nxt
 - 1);

832 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

833 
	`TCPH_FLAGS_SET
(
t˝hdr
, 0);

834 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

835 
t˝hdr
->
urgp
 = 0;

836 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

838 
t˝hdr
->
chksum
 = 0;

839 #i‡
CHECKSUM_GEN_TCP


840 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

841 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

843 
	`TCP_STATS_INC
(
t˝
.
xmô
);

846 #i‡
LWIP_NETIF_HWADDRHINT


848 
√tif
 *netif;

849 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

850 if(
√tif
 !
NULL
){

851 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

852 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

853 0, 
IP_PROTO_TCP
, 
√tif
);

854 
√tif
->
addr_höt
 = 
NULL
;

858 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

861 
	`pbuf_‰ì
(
p
);

863 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_kì∑live: seqnÿ%"
U32_F
"áckno %"U32_F".\n",

864 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

865 
	}
}

877 
	$t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
)

879 
pbuf
 *
p
;

880 
t˝_hdr
 *
t˝hdr
;

881 
t˝_£g
 *
£g
;

883 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

885 
U16_F
".%"U16_F".%"U16_F".%"U16_F"\n",

886 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

887 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->remote_ip)));

889 
	`LWIP_DEBUGF
(
TCP_DEBUG
,

890 ("t˝_zîo_wödow_¥obe:Å˝_tick†%"
U32_F


891 "Öcb->tm∏%"
U32_F
"Öcb->kìp_˙t_£¡ %"
U16_F
"\n",

892 
t˝_ticks
, 
pcb
->
tmr
,Öcb->
kìp_˙t_£¡
));

894 
£g
 = 
pcb
->
u«cked
;

896 if(
£g
 =
NULL
)

897 
£g
 = 
pcb
->
un£¡
;

899 if(
£g
 =
NULL
)

902 
p
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
TCP_HLEN
 + 1, 
PBUF_RAM
);

904 if(
p
 =
NULL
) {

905 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("tcp_zero_window_probe:Ço memory forÖbuf\n"));

908 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÅcp_hdr",

909 (
p
->
Àn
 >(
t˝_hdr
)));

911 
t˝hdr
 = 
p
->
∑ylﬂd
;

912 
t˝hdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

913 
t˝hdr
->
de°
 = 
	`ht⁄s
(
pcb
->
ªmŸe_p‹t
);

914 
t˝hdr
->
£qno
 = 
£g
->tcphdr->seqno;

915 
t˝hdr
->
ackno
 = 
	`ht⁄l
(
pcb
->
rcv_nxt
);

916 
	`TCPH_FLAGS_SET
(
t˝hdr
, 0);

917 
t˝hdr
->
wnd
 = 
	`ht⁄s
(
pcb
->
rcv_™n_wnd
);

918 
t˝hdr
->
urgp
 = 0;

919 
	`TCPH_HDRLEN_SET
(
t˝hdr
, 5);

922 *((*)
p
->
∑ylﬂd
 + (
t˝_hdr
)Ë*(*)
£g
->
d©≠å
;

924 
t˝hdr
->
chksum
 = 0;

925 #i‡
CHECKSUM_GEN_TCP


926 
t˝hdr
->
chksum
 = 
	`öë_chksum_p£udo
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,

927 
IP_PROTO_TCP
, 
p
->
tŸ_Àn
);

929 
	`TCP_STATS_INC
(
t˝
.
xmô
);

932 #i‡
LWIP_NETIF_HWADDRHINT


934 
√tif
 *netif;

935 
√tif
 = 
	`ù_rouã
(&
pcb
->
ªmŸe_ù
);

936 if(
√tif
 !
NULL
){

937 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

938 
	`ù_ouçut_if
(
p
, &(
pcb
->
loˇl_ù
), &’cb->
ªmŸe_ù
),Öcb->
âl
,

939 0, 
IP_PROTO_TCP
, 
√tif
);

940 
√tif
->
addr_höt
 = 
NULL
;

944 
	`ù_ouçut
(
p
, &
pcb
->
loˇl_ù
, &pcb->
ªmŸe_ù
,Öcb->
âl
, 0, 
IP_PROTO_TCP
);

947 
	`pbuf_‰ì
(
p
);

949 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("t˝_zîo_wödow_¥obe: seqnÿ%"
U32_F


950 "ácknÿ%"
U32_F
".\n",

951 
pcb
->
¢d_nxt
 - 1,Öcb->
rcv_nxt
));

952 
	}
}

	@net/lwip/core/udp.c

49 
	~"lwù/›t.h
"

51 #i‡
LWIP_UDP


53 
	~"lwù/udp.h
"

54 
	~"lwù/def.h
"

55 
	~"lwù/memp.h
"

56 
	~"lwù/öë.h
"

57 
	~"lwù/öë_chksum.h
"

58 
	~"lwù/ù_addr.h
"

59 
	~"lwù/√tif.h
"

60 
	~"lwù/icmp.h
"

61 
	~"lwù/°©s.h
"

62 
	~"lwù/¢mp.h
"

63 
	~"¨ch/≥rf.h
"

64 
	~"lwù/dh˝.h
"

66 
	~<°rög.h
>

70 
udp_pcb
 *
	gudp_pcbs
;

85 
	$udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
)

87 
udp_hdr
 *
udphdr
;

88 
udp_pcb
 *
pcb
, *
¥ev
;

89 
udp_pcb
 *
unc⁄_pcb
;

90 
ù_hdr
 *
ùhdr
;

91 
u16_t
 
§c
, 
de°
;

92 
u8_t
 
loˇl_m©ch
;

94 
PERF_START
;

96 
	`UDP_STATS_INC
(
udp
.
ªcv
);

98 
ùhdr
 = 
p
->
∑ylﬂd
;

102 i‡(
p
->
tŸ_Àn
 < (
	`IPH_HL
(
ùhdr
Ë* 4 + 
UDP_HLEN
Ë|| 
	`pbuf_hódî
’, -(
s16_t
)(IPH_HL(iphdr) * 4))) {

104 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

105 ("udp_öput: sh‹àUDP d©agøm (%"
U16_F
" byãsËdisˇrded\n", 
p
->
tŸ_Àn
));

106 
	`UDP_STATS_INC
(
udp
.
À√º
);

107 
	`UDP_STATS_INC
(
udp
.
dr›
);

108 
	`¢mp_öc_udpöîr‹s
();

109 
	`pbuf_‰ì
(
p
);

110 
íd
;

113 
udphdr
 = (
udp_hdr
 *)
p
->
∑ylﬂd
;

115 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_öput:Ñe˚ived d©agøm o‡Àngth %"
U16_F
"\n", 
p
->
tŸ_Àn
));

118 
§c
 = 
	`¡ohs
(
udphdr
->src);

119 
de°
 = 
	`¡ohs
(
udphdr
->dest);

121 
	`udp_debug_¥öt
(
udphdr
);

124 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

125 ("ud∞(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "

126 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

127 
	`ù4_addr1
(&
ùhdr
->
de°
), 
	`ù4_addr2
(&iphdr->dest),

128 
	`ù4_addr3
(&
ùhdr
->
de°
), 
	`ù4_addr4
(&ùhdr->de°), 
	`¡ohs
(
udphdr
->dest),

129 
	`ù4_addr1
(&
ùhdr
->
§c
), 
	`ù4_addr2
(&iphdr->src),

130 
	`ù4_addr3
(&
ùhdr
->
§c
), 
	`ù4_addr4
(&ùhdr->§c), 
	`¡ohs
(
udphdr
->src)));

132 #i‡
LWIP_DHCP


133 
pcb
 = 
NULL
;

136 i‡(
de°
 =
DHCP_CLIENT_PORT
) {

138 i‡(
§c
 =
DHCP_SERVER_PORT
) {

139 i‡((
öp
->
dh˝
 !
NULL
Ë&& (öp->dh˝->
pcb
 != NULL)) {

143 i‡((
	`ù_addr_ißny
(&
öp
->
dh˝
->
pcb
->
ªmŸe_ù
) ||

144 
	`ù_addr_cmp
(&(
öp
->
dh˝
->
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

145 
pcb
 = 
öp
->
dh˝
->pcb;

152 
¥ev
 = 
NULL
;

153 
loˇl_m©ch
 = 0;

154 
unc⁄_pcb
 = 
NULL
;

159 
pcb
 = 
udp_pcbs
;Öcb !
NULL
;Öcb =Öcb->
√xt
) {

160 
loˇl_m©ch
 = 0;

162 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

163 ("pcb (%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "

164 "(%"
U16_F
".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",

165 
	`ù4_addr1
(&
pcb
->
loˇl_ù
), 
	`ù4_addr2
(&pcb->local_ip),

166 
	`ù4_addr3
(&
pcb
->
loˇl_ù
), 
	`ù4_addr4
(&pcb->loˇl_ù),Öcb->
loˇl_p‹t
,

167 
	`ù4_addr1
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr2
(&pcb->remote_ip),

168 
	`ù4_addr3
(&
pcb
->
ªmŸe_ù
), 
	`ù4_addr4
(&pcb->ªmŸe_ù),Öcb->
ªmŸe_p‹t
));

171 i‡((
pcb
->
loˇl_p‹t
 =
de°
) &&

172 (
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
) ||

173 
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
ùhdr
->
de°
)) ||

174 #i‡
LWIP_IGMP


175 
	`ù_addr_ismu…iˇ°
(&(
ùhdr
->
de°
)) ||

177 
	`ù_addr_isbrﬂdˇ°
(&(
ùhdr
->
de°
), 
öp
))) {

178 
loˇl_m©ch
 = 1;

179 i‡((
unc⁄_pcb
 =
NULL
) &&

180 ((
pcb
->
Êags
 & 
UDP_FLAGS_CONNECTED
) == 0)) {

182 
unc⁄_pcb
 = 
pcb
;

186 i‡((
loˇl_m©ch
 != 0) &&

187 (
pcb
->
ªmŸe_p‹t
 =
§c
) &&

188 (
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
) ||

189 
	`ù_addr_cmp
(&(
pcb
->
ªmŸe_ù
), &(
ùhdr
->
§c
)))) {

191 i‡(
¥ev
 !
NULL
) {

194 
¥ev
->
√xt
 = 
pcb
->next;

195 
pcb
->
√xt
 = 
udp_pcbs
;

196 
udp_pcbs
 = 
pcb
;

198 
	`UDP_STATS_INC
(
udp
.
ˇchehô
);

202 
¥ev
 = 
pcb
;

205 i‡(
pcb
 =
NULL
) {

206 
pcb
 = 
unc⁄_pcb
;

211 i‡(
pcb
 !
NULL
 || 
	`ù_addr_cmp
(&
öp
->
ù_addr
, &
ùhdr
->
de°
)) {

212 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input: calculating checksum\n"));

213 #i‡
LWIP_UDPLITE


214 i‡(
	`IPH_PROTO
(
ùhdr
Ë=
IP_PROTO_UDPLITE
) {

216 #i‡
CHECKSUM_CHECK_UDP


217 
u16_t
 
chkÀn
 = 
	`¡ohs
(
udphdr
->
Àn
);

218 i‡(
chkÀn
 < (
udp_hdr
)) {

219 i‡(
chkÀn
 == 0) {

222 
chkÀn
 = 
p
->
tŸ_Àn
;

226 
	`UDP_STATS_INC
(
udp
.
chkîr
);

227 
	`UDP_STATS_INC
(
udp
.
dr›
);

228 
	`¢mp_öc_udpöîr‹s
();

229 
	`pbuf_‰ì
(
p
);

230 
íd
;

233 i‡(
	`öë_chksum_p£udo_∑πül
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

234 (
ù_addr
 *)&(
ùhdr
->
de°
),

235 
IP_PROTO_UDPLITE
, 
p
->
tŸ_Àn
, 
chkÀn
) != 0) {

236 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

238 
	`UDP_STATS_INC
(
udp
.
chkîr
);

239 
	`UDP_STATS_INC
(
udp
.
dr›
);

240 
	`¢mp_öc_udpöîr‹s
();

241 
	`pbuf_‰ì
(
p
);

242 
íd
;

248 #i‡
CHECKSUM_CHECK_UDP


249 i‡(
udphdr
->
chksum
 != 0) {

250 i‡(
	`öë_chksum_p£udo
(
p
, (
ù_addr
 *)&(
ùhdr
->
§c
),

251 (
ù_addr
 *)&(
ùhdr
->
de°
),

252 
IP_PROTO_UDP
, 
p
->
tŸ_Àn
) != 0) {

253 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 2,

255 
	`UDP_STATS_INC
(
udp
.
chkîr
);

256 
	`UDP_STATS_INC
(
udp
.
dr›
);

257 
	`¢mp_öc_udpöîr‹s
();

258 
	`pbuf_‰ì
(
p
);

259 
íd
;

264 if(
	`pbuf_hódî
(
p
, -
UDP_HLEN
)) {

266 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

267 
	`UDP_STATS_INC
(
udp
.
dr›
);

268 
	`¢mp_öc_udpöîr‹s
();

269 
	`pbuf_‰ì
(
p
);

270 
íd
;

272 i‡(
pcb
 !
NULL
) {

273 
	`¢mp_öc_udpöd©agøms
();

275 i‡(
pcb
->
ªcv
 !
NULL
) {

277 
pcb
->
	`ªcv
’cb->
ªcv_¨g
,Öcb, 
p
, &(
ùhdr
->
§c
), src);

280 
	`pbuf_‰ì
(
p
);

281 
íd
;

284 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
, ("udp_input:Çot for us.\n"));

286 #i‡
LWIP_ICMP


289 i‡(!
	`ù_addr_isbrﬂdˇ°
(&
ùhdr
->
de°
, 
öp
) &&

290 !
	`ù_addr_ismu…iˇ°
(&
ùhdr
->
de°
)) {

292 
	`pbuf_hódî
(
p
, (
	`IPH_HL
(
ùhdr
Ë* 4Ë+ 
UDP_HLEN
);

293 
	`LWIP_ASSERT
("p->∑ylﬂd =ùhdr", (
p
->
∑ylﬂd
 =
ùhdr
));

294 
	`icmp_de°_uƒóch
(
p
, 
ICMP_DUR_PORT
);

297 
	`UDP_STATS_INC
(
udp
.
¥Ÿîr
);

298 
	`UDP_STATS_INC
(
udp
.
dr›
);

299 
	`¢mp_öc_ud≤›‹ts
();

300 
	`pbuf_‰ì
(
p
);

303 
	`pbuf_‰ì
(
p
);

305 
íd
:

306 
	`PERF_STOP
("udp_input");

307 
	}
}

327 
îr_t


328 
	$udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
)

331  
	`udp_£ndto
(
pcb
, 
p
, &pcb->
ªmŸe_ù
,Öcb->
ªmŸe_p‹t
);

332 
	}
}

351 
îr_t


352 
	$udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

353 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
)

355 
√tif
 *netif;

357 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_send\n"));

360 #i‡
LWIP_IGMP


361 
√tif
 = 
	`ù_rouã
((
	`ù_addr_ismu…iˇ°
(
d°_ù
))?(&(
pcb
->
mu…iˇ°_ù
)):(dst_ip));

363 
√tif
 = 
	`ù_rouã
(
d°_ù
);

367 i‡(
√tif
 =
NULL
) {

368 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 1, ("udp_£nd: NÿrouãÅÿ0x%"
X32_F
"\n", 
d°_ù
->
addr
));

369 
	`UDP_STATS_INC
(
udp
.
πîr
);

370  
ERR_RTE
;

372  
	`udp_£ndto_if
(
pcb
, 
p
, 
d°_ù
, 
d°_p‹t
, 
√tif
);

373 
	}
}

394 
îr_t


395 
	$udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

396 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif)

398 
udp_hdr
 *
udphdr
;

399 
ù_addr
 *
§c_ù
;

400 
îr_t
 
îr
;

401 
pbuf
 *
q
;

404 i‡(
pcb
->
loˇl_p‹t
 == 0) {

405 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send:Çot yet boundÅoáÖort, bindingÇow\n"));

406 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

407 i‡(
îr
 !
ERR_OK
) {

408 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: forcedÖort bind failed\n"));

409  
îr
;

414 i‡(
	`pbuf_hódî
(
p
, 
UDP_HLEN
)) {

416 
q
 = 
	`pbuf_Æloc
(
PBUF_IP
, 
UDP_HLEN
, 
PBUF_RAM
);

418 i‡(
q
 =
NULL
) {

419 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("udp_send: couldÇotállocate header\n"));

420  
ERR_MEM
;

423 
	`pbuf_chaö
(
q
, 
p
);

425 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

426 ("udp_£nd:ádded hódîÖbu‡%∞bef‹êgivíÖbu‡%p\n", (*)
q
, (*)
p
));

430 
q
 = 
p
;

431 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd:ádded hódî i¿givíÖbu‡%p\n", (*)
p
));

433 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold struct udp_hdr",

434 (
q
->
Àn
 >(
udp_hdr
)));

436 
udphdr
 = 
q
->
∑ylﬂd
;

437 
udphdr
->
§c
 = 
	`ht⁄s
(
pcb
->
loˇl_p‹t
);

438 
udphdr
->
de°
 = 
	`ht⁄s
(
d°_p‹t
);

440 
udphdr
->
chksum
 = 0x0000;

443 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
)) {

445 
§c_ù
 = &(
√tif
->
ù_addr
);

449 i‡(!
	`ù_addr_cmp
(&(
pcb
->
loˇl_ù
), &(
√tif
->
ù_addr
))) {

451 i‡(
q
 !
p
) {

453 
	`pbuf_‰ì
(
q
);

454 
q
 = 
NULL
;

457  
ERR_VAL
;

460 
§c_ù
 = &(
pcb
->
loˇl_ù
);

463 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: sídög d©agøm o‡Àngth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

465 #i‡
LWIP_UDPLITE


467 i‡(
pcb
->
Êags
 & 
UDP_FLAGS_UDPLITE
) {

468 
u16_t
 
chkÀn
, 
chkÀn_hdr
;

469 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

471 
chkÀn_hdr
 = 
chkÀn
 = 
pcb
->
chksum_Àn_tx
;

472 i‡((
chkÀn
 < (
udp_hdr
)Ë|| (chkÀ¿> 
q
->
tŸ_Àn
)) {

473 i‡(
chkÀn
 != 0) {

474 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP LITEÖcb->chksum_À¿i†ûÀgÆ: %"
U16_F
"\n", 
chkÀn
));

482 
chkÀn_hdr
 = 0;

483 
chkÀn
 = 
q
->
tŸ_Àn
;

485 
udphdr
->
Àn
 = 
	`ht⁄s
(
chkÀn_hdr
);

487 #i‡
CHECKSUM_GEN_UDP


488 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo_∑πül
(
q
, 
§c_ù
, 
d°_ù
,

489 
IP_PROTO_UDPLITE
, 
q
->
tŸ_Àn
, 
chkÀn
);

491 i‡(
udphdr
->
chksum
 == 0x0000)

492 
udphdr
->
chksum
 = 0xffff;

495 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));

496 #i‡
LWIP_NETIF_HWADDRHINT


497 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

499 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDPLITE
, 
√tif
);

500 #i‡
LWIP_NETIF_HWADDRHINT


501 
√tif
->
addr_höt
 = 
NULL
;

506 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDPÖackëÜígth %"
U16_F
"\n", 
q
->
tŸ_Àn
));

507 
udphdr
->
Àn
 = 
	`ht⁄s
(
q
->
tŸ_Àn
);

509 #i‡
CHECKSUM_GEN_UDP


510 i‡((
pcb
->
Êags
 & 
UDP_FLAGS_NOCHKSUM
) == 0) {

511 
udphdr
->
chksum
 = 
	`öë_chksum_p£udo
(
q
, 
§c_ù
, 
d°_ù
, 
IP_PROTO_UDP
, q->
tŸ_Àn
);

513 i‡(
udphdr
->
chksum
 == 0x0000) udphdr->chksum = 0xffff;

516 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_£nd: UDP checksum 0x%04"
X16_F
"\n", 
udphdr
->
chksum
));

517 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));

519 #i‡
LWIP_NETIF_HWADDRHINT


520 
√tif
->
addr_höt
 = &(
pcb
->addr_hint);

522 
îr
 = 
	`ù_ouçut_if
(
q
, 
§c_ù
, 
d°_ù
, 
pcb
->
âl
,Öcb->
tos
, 
IP_PROTO_UDP
, 
√tif
);

523 #i‡
LWIP_NETIF_HWADDRHINT


524 
√tif
->
addr_höt
 = 
NULL
;

528 
	`¢mp_öc_udpoutd©agøms
();

531 i‡(
q
 !
p
) {

533 
	`pbuf_‰ì
(
q
);

534 
q
 = 
NULL
;

538 
	`UDP_STATS_INC
(
udp
.
xmô
);

539  
îr
;

540 
	}
}

561 
îr_t


562 
	$udp_böd
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

564 
udp_pcb
 *
ùcb
;

565 
u8_t
 
ªböd
;

567 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("udp_bind(ipaddr = "));

568 
	`ù_addr_debug_¥öt
(
UDP_DEBUG
, 
ùaddr
);

569 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, (",Ö‹à%"
U16_F
")\n", 
p‹t
));

571 
ªböd
 = 0;

573 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

575 i‡(
pcb
 =
ùcb
) {

577 
	`LWIP_ASSERT
("ªböd =0", 
ªböd
 == 0);

579 
ªböd
 = 1;

586 #ifde‡
LWIP_UDP_TODO


589 i‡((
ùcb
->
loˇl_p‹t
 =
p‹t
) &&

591 (
	`ù_addr_ißny
(&(
ùcb
->
loˇl_ù
)) ||

592 
	`ù_addr_ißny
(
ùaddr
) ||

593 
	`ù_addr_cmp
(&(
ùcb
->
loˇl_ù
), 
ùaddr
))) {

595 
	`LWIP_DEBUGF
(
UDP_DEBUG
,

596 ("udp_böd:Üoˇ»p‹à%"
U16_F
"áÃódy bound byánŸhîÖcb\n", 
p‹t
));

597  
ERR_USE
;

602 
	`ù_addr_£t
(&
pcb
->
loˇl_ù
, 
ùaddr
);

605 i‡(
p‹t
 == 0) {

606 #i‚de‡
UDP_LOCAL_PORT_RANGE_START


607 
	#UDP_LOCAL_PORT_RANGE_START
 4096

	)

608 
	#UDP_LOCAL_PORT_RANGE_END
 0x7fff

	)

610 
p‹t
 = 
UDP_LOCAL_PORT_RANGE_START
;

611 
ùcb
 = 
udp_pcbs
;

612 (
ùcb
 !
NULL
Ë&& (
p‹t
 !
UDP_LOCAL_PORT_RANGE_END
)) {

613 i‡(
ùcb
->
loˇl_p‹t
 =
p‹t
) {

615 
p‹t
++;

617 
ùcb
 = 
udp_pcbs
;

620 
ùcb
 = ipcb->
√xt
;

622 i‡(
ùcb
 !
NULL
) {

624 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_bind: out of free UDPÖorts\n"));

625  
ERR_USE
;

628 
pcb
->
loˇl_p‹t
 = 
p‹t
;

629 
	`¢mp_ö£π_udpidx_åì
(
pcb
);

631 i‡(
ªböd
 == 0) {

633 
pcb
->
√xt
 = 
udp_pcbs
;

634 
udp_pcbs
 = 
pcb
;

636 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

637 ("udp_böd: boundÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",Öort %"U16_F"\n",

638 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 24 & 0xff),

639 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 16 & 0xff),

640 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
) >> 8 & 0xff),

641 (
u16_t
)(
	`¡ohl
(
pcb
->
loˇl_ù
.
addr
Ë& 0xff),Öcb->
loˇl_p‹t
));

642  
ERR_OK
;

643 
	}
}

661 
îr_t


662 
	$udp_c⁄√˘
(
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
, 
u16_t
 
p‹t
)

664 
udp_pcb
 *
ùcb
;

666 i‡(
pcb
->
loˇl_p‹t
 == 0) {

667 
îr_t
 
îr
 = 
	`udp_böd
(
pcb
, &pcb->
loˇl_ù
,Öcb->
loˇl_p‹t
);

668 i‡(
îr
 !
ERR_OK
)

669  
îr
;

672 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
ùaddr
);

673 
pcb
->
ªmŸe_p‹t
 = 
p‹t
;

674 
pcb
->
Êags
 |
UDP_FLAGS_CONNECTED
;

676 #ifde‡
LWIP_UDP_TODO


678 i‡(
	`ù_addr_ißny
(&
pcb
->
loˇl_ù
Ë&& !ù_addr_ißny(&pcb->
ªmŸe_ù
)) {

679 
√tif
 *netif;

681 i‡((
√tif
 = 
	`ù_rouã
(&(
pcb
->
ªmŸe_ù
))Ë=
NULL
) {

682 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("udp_c⁄√˘: NÿrouãÅÿ0x%lx\n", 
pcb
->
ªmŸe_ù
.
addr
));

683 
	`UDP_STATS_INC
(
udp
.
πîr
);

684  
ERR_RTE
;

689 
pcb
->
loˇl_ù
 = 
√tif
->
ù_addr
;

690 } i‡(
	`ù_addr_ißny
(&
pcb
->
ªmŸe_ù
)) {

691 
pcb
->
loˇl_ù
.
addr
 = 0;

694 
	`LWIP_DEBUGF
(
UDP_DEBUG
 | 
LWIP_DBG_TRACE
 | 
LWIP_DBG_STATE
,

695 ("udp_c⁄√˘: c⁄√˘edÅÿ%"
U16_F
".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",

696 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 24 & 0xff),

697 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 16 & 0xff),

698 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
) >> 8 & 0xff),

699 (
u16_t
)(
	`¡ohl
(
pcb
->
ªmŸe_ù
.
addr
Ë& 0xff),Öcb->
ªmŸe_p‹t
));

702 
ùcb
 = 
udp_pcbs
; ipcb !
NULL
; ipcb = ipcb->
√xt
) {

703 i‡(
pcb
 =
ùcb
) {

705  
ERR_OK
;

709 
pcb
->
√xt
 = 
udp_pcbs
;

710 
udp_pcbs
 = 
pcb
;

711  
ERR_OK
;

712 
	}
}

720 
	$udp_disc⁄√˘
(
udp_pcb
 *
pcb
)

723 
	`ù_addr_£t
(&
pcb
->
ªmŸe_ù
, 
IP_ADDR_ANY
);

724 
pcb
->
ªmŸe_p‹t
 = 0;

726 
pcb
->
Êags
 &~
UDP_FLAGS_CONNECTED
;

727 
	}
}

739 
udp_ªcv
(
udp_pcb
 *
pcb
,

740 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
, 
pbuf
 *
p
,

741 
ù_addr
 *
addr
, 
u16_t
 
p‹t
),

742 *
ªcv_¨g
)

745 
pcb
->
ªcv
 =Ñecv;

746 
pcb
->
ªcv_¨g
 =Ñecv_arg;

747 
	}
}

758 
	$udp_ªmove
(
udp_pcb
 *
pcb
)

760 
udp_pcb
 *
pcb2
;

762 
	`¢mp_dñëe_udpidx_åì
(
pcb
);

764 i‡(
udp_pcbs
 =
pcb
) {

766 
udp_pcbs
 = udp_pcbs->
√xt
;

769 
pcb2
 = 
udp_pcbs
;Öcb2 !
NULL
;Öcb2 =Öcb2->
√xt
) {

771 i‡(
pcb2
->
√xt
 !
NULL
 &&Öcb2->√xà=
pcb
) {

773 
pcb2
->
√xt
 = 
pcb
->next;

776 
	`memp_‰ì
(
MEMP_UDP_PCB
, 
pcb
);

777 
	}
}

787 
udp_pcb
 *

788 
	$udp_√w
()

790 
udp_pcb
 *
pcb
;

791 
pcb
 = 
	`memp_mÆloc
(
MEMP_UDP_PCB
);

793 i‡(
pcb
 !
NULL
) {

798 
	`mem£t
(
pcb
, 0, (
udp_pcb
));

799 
pcb
->
âl
 = 
UDP_TTL
;

801  
pcb
;

802 
	}
}

804 #i‡
UDP_DEBUG


811 
	$udp_debug_¥öt
(
udp_hdr
 *
udphdr
)

813 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("UDP header:\n"));

814 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

815 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | %5"U16_F" | (srcÖort, destÖort)\n",

816 
	`¡ohs
(
udphdr
->
§c
),Çtohs(udphdr->
de°
)));

817 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

818 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("| %5"
U16_F
" | 0x%04"
X16_F
" | (len, chksum)\n",

819 
	`¡ohs
(
udphdr
->
Àn
),Çtohs(udphdr->
chksum
)));

820 
	`LWIP_DEBUGF
(
UDP_DEBUG
, ("+-------------------------------+\n"));

821 
	}
}

	@net/lwip/include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

56 
	#AUTOIP_TMR_INTERVAL
 100

	)

57 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

60 
	#PROBE_WAIT
 1

	)

61 
	#PROBE_MIN
 1

	)

62 
	#PROBE_MAX
 2

	)

63 
	#PROBE_NUM
 3

	)

64 
	#ANNOUNCE_NUM
 2

	)

65 
	#ANNOUNCE_INTERVAL
 2

	)

66 
	#ANNOUNCE_WAIT
 2

	)

67 
	#MAX_CONFLICTS
 10

	)

68 
	#RATE_LIMIT_INTERVAL
 60

	)

69 
	#DEFEND_INTERVAL
 10

	)

72 
	#AUTOIP_STATE_OFF
 0

	)

73 
	#AUTOIP_STATE_PROBING
 1

	)

74 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

75 
	#AUTOIP_STATE_BOUND
 3

	)

77 
	sautoù


79 
ù_addr
 
	mŒùaddr
;

80 
u8_t
 
	m°©e
;

81 
u8_t
 
	m£¡_num
;

82 
u16_t
 
	mâw
;

83 
u8_t
 
	mœ°c⁄Êi˘
;

84 
u8_t
 
	måõd_Œùaddr
;

89 
autoù_öô
();

92 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

95 
îr_t
 
autoù_°›
(
√tif
 *netif);

98 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

101 
autoù_tmr
();

	@net/lwip/include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


47 
	#ICMP_ER
 0

	)

48 
	#ICMP_DUR
 3

	)

49 
	#ICMP_SQ
 4

	)

50 
	#ICMP_RD
 5

	)

51 
	#ICMP_ECHO
 8

	)

52 
	#ICMP_TE
 11

	)

53 
	#ICMP_PP
 12

	)

54 
	#ICMP_TS
 13

	)

55 
	#ICMP_TSR
 14

	)

56 
	#ICMP_IRQ
 15

	)

57 
	#ICMP_IR
 16

	)

59 
	eicmp_dur_ty≥
 {

60 
ICMP_DUR_NET
 = 0,

61 
ICMP_DUR_HOST
 = 1,

62 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

64 
ICMP_DUR_FRAG
 = 4,

65 
ICMP_DUR_SR
 = 5

68 
	eicmp_ã_ty≥
 {

69 
ICMP_TE_TTL
 = 0,

70 
ICMP_TE_FRAG
 = 1

73 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

75 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

76 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

78 #ifde‡
PACK_STRUCT_USE_INCLUDES


79 
	~"¨ch/bp°ru˘.h
"

81 
PACK_STRUCT_BEGIN


82 
	sicmp_echo_hdr
 {

83 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

87 } 
PACK_STRUCT_STRUCT
;

88 
PACK_STRUCT_END


90 
PACK_STRUCT_BEGIN


91 
	sicmp_dur_hdr
 {

92 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

93 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

94 
PACK_STRUCT_FIELD
(
u32_t
 
unu£d
);

95 } 
PACK_STRUCT_STRUCT
;

96 
PACK_STRUCT_END


98 
PACK_STRUCT_BEGIN


99 
	sicmp_ã_hdr
 {

100 
PACK_STRUCT_FIELD
(
u16_t
 
_ty≥_code
);

101 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

102 
PACK_STRUCT_FIELD
(
u32_t
 
unu£d
);

103 } 
PACK_STRUCT_STRUCT
;

104 
PACK_STRUCT_END


105 #ifde‡
PACK_STRUCT_USE_INCLUDES


106 
	~"¨ch/ï°ru˘.h
"

109 
	#ICMPH_TYPE
(
hdr
Ë(
	`¡ohs
((hdr)->
_ty≥_code
Ë>> 8)

	)

110 
	#ICMPH_CODE
(
hdr
Ë(
	`¡ohs
((hdr)->
_ty≥_code
Ë& 0xff)

	)

112 
	#ICMPH_TYPE_SET
(
hdr
, 
ty≥
Ë((hdr)->
_ty≥_code
 = 
	`ht⁄s
(
	`ICMPH_CODE
(hdrË| (—y≥Ë<< 8)))

	)

113 
	#ICMPH_CODE_SET
(
hdr
, 
code
Ë((hdr)->
_ty≥_code
 = 
	`ht⁄s
((codeË| (
	`ICMPH_TYPE
(hdrË<< 8)))

	)

115 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


52 
	#IP_PROTO_IGMP
 2

	)

53 
	#IGMP_TTL
 1

	)

54 
	#IGMP_MINLEN
 8

	)

55 
	#ROUTER_ALERT
 0x9404

	)

56 
	#ROUTER_ALERTLEN
 4

	)

61 
	#IGMP_MEMB_QUERY
 0x11

	)

62 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

63 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

64 
	#IGMP_LEAVE_GROUP
 0x17

	)

67 
	#IGMP_TMR_INTERVAL
 100

	)

68 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

69 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

72 
	#IGMP_DEL_MAC_FILTER
 0

	)

73 
	#IGMP_ADD_MAC_FILTER
 1

	)

76 
	#IGMP_GROUP_NON_MEMBER
 0

	)

77 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

78 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

83 #ifde‡
PACK_STRUCT_USE_INCLUDES


84 
	~"¨ch/bp°ru˘.h
"

86 
PACK_STRUCT_BEGIN


87 
	sigmp_msg
 {

88 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_msgty≥
);

89 
PACK_STRUCT_FIELD
(
u8_t
 
igmp_maxª•
);

90 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
igmp_group_addªss
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

110 
	sigmp_group
 {

111 
igmp_group
 *
√xt
;

112 
√tif
 *
öãrÁ˚
;

113 
ù_addr
 
group_addªss
;

114 
u8_t
 
œ°_ªp‹ãr_Êag
;

115 
u8_t
 
group_°©e
;

116 
u16_t
 
timî
;

117 
u8_t
 
u£
;

122 
igmp_öô
();

124 
îr_t
 
igmp_°¨t
–
√tif
 *netif);

126 
îr_t
 
igmp_°›
–
√tif
 *netif);

128 
igmp_ªp‹t_groups
–
√tif
 *netif);

130 
igmp_group
 *
igmp_lookf‹_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

132 
igmp_group
 *
igmp_lookup_group
–
√tif
 *
iÂ
, 
ù_addr
 *
addr
);

134 
îr_t
 
igmp_ªmove_group
–
igmp_group
 *
group
);

136 
igmp_öput
–
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr
 *
de°
);

138 
îr_t
 
igmp_joögroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

140 
îr_t
 
igmp_Àavegroup
–
ù_addr
 *
iÁddr
, ù_add∏*
grou∑ddr
);

142 
igmp_tmr
();

144 
igmp_timeout
–
igmp_group
 *
group
);

146 
igmp_°¨t_timî
–
igmp_group
 *
group
, 
u8_t
 
max_time
);

148 
igmp_°›_timî
–
igmp_group
 *
group
);

150 
igmp_dñayög_membî
–
igmp_group
 *
group
, 
u8_t
 
maxª•
);

152 
îr_t
 
igmp_ù_ouçut_if
–
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
, 
u8_t
 
âl
, u8_à
¥Ÿo
, 
√tif
 *netif);

154 
igmp_£nd
–
igmp_group
 *
group
, 
u8_t
 
ty≥
);

156 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	sö_addr
 {

45 
u32_t
 
s_addr
;

48 
u32_t
 
öë_addr
(c⁄° *
˝
);

49 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

50 *
öë_¡ﬂ
(
ö_addr
 
addr
);

52 #ifde‡
ht⁄s


53 #unde‡
ht⁄s


55 #ifde‡
ht⁄l


56 #unde‡
ht⁄l


58 #ifde‡
¡ohs


59 #unde‡
¡ohs


61 #ifde‡
¡ohl


62 #unde‡
¡ohl


65 #i‚de‡
LWIP_PLATFORM_BYTESWAP


66 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

69 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


70 
	#ht⁄s
(
x
Ë(x)

	)

71 
	#¡ohs
(
x
Ë(x)

	)

72 
	#ht⁄l
(
x
Ë(x)

	)

73 
	#¡ohl
(
x
Ë(x)

	)

75 #ifde‡
LWIP_PREFIX_BYTEORDER_FUNCS


77 
	#ht⁄s
 
lwù_ht⁄s


	)

78 
	#¡ohs
 
lwù_¡ohs


	)

79 
	#ht⁄l
 
lwù_ht⁄l


	)

80 
	#¡ohl
 
lwù_¡ohl


	)

82 #i‡
LWIP_PLATFORM_BYTESWAP


83 
	#ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

84 
	#¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

85 
	#ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

86 
	#¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

88 
u16_t
 
ht⁄s
(u16_à
x
);

89 
u16_t
 
¡ohs
(u16_à
x
);

90 
u32_t
 
ht⁄l
(u32_à
x
);

91 
u32_t
 
¡ohl
(u32_à
x
);

96 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 #ifde‡
__˝lu•lus


44 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

45 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

46 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

47 
ù_addr
 *
§c
, ù_add∏*
de°
,

48 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

49 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

50 
ù_addr
 *
§c
, ù_add∏*
de°
,

51 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

53 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#ù_öô
(Ë

	)

47 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

48 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

49 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

50 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

51 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

52 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

53 
√tif
 *netif);

55 
	#IP_HLEN
 20

	)

57 
	#IP_PROTO_ICMP
 1

	)

58 
	#IP_PROTO_UDP
 17

	)

59 
	#IP_PROTO_UDPLITE
 136

	)

60 
	#IP_PROTO_TCP
 6

	)

65 #ifde‡
IP_HDRINCL


66 #unde‡
IP_HDRINCL


68 
	#IP_HDRINCL
 
NULL


	)

70 #i‡
LWIP_NETIF_HWADDRHINT


71 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

73 
	#IP_PCB_ADDRHINT


	)

80 
	#IP_PCB
 \

82 
ù_addr
 
loˇl_ù
; \

83 
ù_addr
 
ªmŸe_ù
; \

85 
u16_t
 
so_›ti⁄s
; \

87 
u8_t
 
tos
; \

89 
u8_t
 
âl
 \

91 
IP_PCB_ADDRHINT


	)

93 
	sù_pcb
 {

95 
IP_PCB
;

101 
	#SOF_DEBUG
 (
u16_t
)0x0001U

	)

102 
	#SOF_ACCEPTCONN
 (
u16_t
)0x0002U

	)

103 
	#SOF_REUSEADDR
 (
u16_t
)0x0004U

	)

104 
	#SOF_KEEPALIVE
 (
u16_t
)0x0008U

	)

105 
	#SOF_DONTROUTE
 (
u16_t
)0x0010U

	)

106 
	#SOF_BROADCAST
 (
u16_t
)0x0020U

	)

107 
	#SOF_USELOOPBACK
 (
u16_t
)0x0040U

	)

108 
	#SOF_LINGER
 (
u16_t
)0x0080U

	)

109 
	#SOF_OOBINLINE
 (
u16_t
)0x0100U

	)

110 
	#SOF_REUSEPORT
 (
u16_t
)0x0200U

	)

113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/bp°ru˘.h
"

116 
PACK_STRUCT_BEGIN


117 
	sù_hdr
 {

119 
PACK_STRUCT_FIELD
(
u16_t
 
_v_hl_tos
);

121 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

123 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

125 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

126 
	#IP_RF
 0x8000

	)

127 
	#IP_DF
 0x4000

	)

128 
	#IP_MF
 0x2000

	)

129 
	#IP_OFFMASK
 0x1ff‡

	)

131 
PACK_STRUCT_FIELD
(
u16_t
 
_âl_¥Ÿo
);

133 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

135 
PACK_STRUCT_FIELD
(
ù_addr
 
§c
);

136 
PACK_STRUCT_FIELD
(
ù_addr
 
de°
);

137 } 
PACK_STRUCT_STRUCT
;

138 
PACK_STRUCT_END


139 #ifde‡
PACK_STRUCT_USE_INCLUDES


140 
	~"¨ch/ï°ru˘.h
"

143 
	#IPH_V
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 12)

	)

144 
	#IPH_HL
(
hdr
Ë((
	`¡ohs
((hdr)->
_v_hl_tos
Ë>> 8Ë& 0x0f)

	)

145 
	#IPH_TOS
(
hdr
Ë(
	`¡ohs
((hdr)->
_v_hl_tos
Ë& 0xff)

	)

146 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

147 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

148 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

149 
	#IPH_TTL
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë>> 8)

	)

150 
	#IPH_PROTO
(
hdr
Ë(
	`¡ohs
((hdr)->
_âl_¥Ÿo
Ë& 0xff)

	)

151 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

153 
	#IPH_VHLTOS_SET
(
hdr
, 
v
, 
hl
, 
tos
Ë(hdr)->
_v_hl_tos
 = (
	`ht⁄s
(((vË<< 12Ë| ((hlË<< 8Ë| (tos)))

	)

154 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

155 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

156 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

157 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(
	`IPH_PROTO
(hdrË| ((
u16_t
)—éË<< 8)))

	)

158 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_âl_¥Ÿo
 = (
	`ht⁄s
(’rŸoË| (
	`IPH_TTL
(hdrË<< 8)))

	)

159 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

161 #i‡
IP_DEBUG


162 
ù_debug_¥öt
(
pbuf
 *
p
);

164 
	#ù_debug_¥öt
(
p
)

	)

167 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #ifde‡
PACK_STRUCT_USE_INCLUDES


42 
	~"¨ch/bp°ru˘.h
"

44 
PACK_STRUCT_BEGIN


45 
	sù_addr
 {

46 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

47 } 
PACK_STRUCT_STRUCT
;

48 
PACK_STRUCT_END


49 #ifde‡
PACK_STRUCT_USE_INCLUDES


50 
	~"¨ch/ï°ru˘.h
"

57 #ifde‡
PACK_STRUCT_USE_INCLUDES


58 
	~"¨ch/bp°ru˘.h
"

60 
PACK_STRUCT_BEGIN


61 
	sù_addr2
 {

62 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

63 } 
PACK_STRUCT_STRUCT
;

64 
PACK_STRUCT_END


65 #ifde‡
PACK_STRUCT_USE_INCLUDES


66 
	~"¨ch/ï°ru˘.h
"

69 
√tif
;

71 c⁄° 
ù_addr
 
ù_addr_™y
;

72 c⁄° 
ù_addr
 
ù_addr_brﬂdˇ°
;

77 
	#IP_ADDR_ANY
 ((
ù_addr
 *)&
ù_addr_™y
)

	)

78 
	#IP_ADDR_BROADCAST
 ((
ù_addr
 *)&
ù_addr_brﬂdˇ°
)

	)

80 
	#INADDR_NONE
 ((
u32_t
)0xffffffffULË

	)

81 
	#INADDR_LOOPBACK
 ((
u32_t
)0x7f000001ULË

	)

88 
	#IN_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

89 
	#IN_CLASSA_NET
 0xff000000

	)

90 
	#IN_CLASSA_NSHIFT
 24

	)

91 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

92 
	#IN_CLASSA_MAX
 128

	)

94 
	#IN_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

95 
	#IN_CLASSB_NET
 0xffff0000

	)

96 
	#IN_CLASSB_NSHIFT
 16

	)

97 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

98 
	#IN_CLASSB_MAX
 65536

	)

100 
	#IN_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

101 
	#IN_CLASSC_NET
 0xffffff00

	)

102 
	#IN_CLASSC_NSHIFT
 8

	)

103 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

105 
	#IN_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

106 
	#IN_CLASSD_NET
 0xf0000000

	)

107 
	#IN_CLASSD_NSHIFT
 28

	)

108 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

109 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

111 
	#IN_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

112 
	#IN_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

114 
	#IN_LOOPBACKNET
 127

	)

116 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

117 (
ùaddr
)->
addr
 = 
	`ht⁄l
(((
u32_t
)((
a
) & 0xff) << 24) | \

118 ((
u32_t
)((
b
) & 0xff) << 16) | \

119 ((
u32_t
)((
c
) & 0xff) << 8) | \

120 (
u32_t
)((
d
Ë& 0xff))

	)

122 
	#ù_addr_£t
(
de°
, 
§c
Ë(de°)->
addr
 = \

123 ((
§c
Ë=
NULL
? 0:\

124 (
§c
)->
addr
)

	)

133 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

134 (
mask
)->
addr
) == \

135 ((
addr2
)->
addr
 & \

136 (
mask
)->
addr
))

	)

137 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

139 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =0)

	)

141 
u8_t
 
ù_addr_isbrﬂdˇ°
(
ù_addr
 *, 
√tif
 *);

143 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xf0000000UL)Ë=¡ohl(0xe0000000UL))

	)

145 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`¡ohl
(0xffff0000UL)Ë=¡ohl(0xa9„0000UL))

	)

147 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

148 
	`LWIP_DEBUGF
(
debug
, ("%"
U16_F
".%"U16_F".%"U16_F".%"U16_F, \

149 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 24) & 0xff : 0, \

150 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 16) & 0xff : 0, \

151 
ùaddr
 ? (
u16_t
)(
	`¡ohl
((ùaddr)->
addr
) >> 8) & 0xff : 0, \

152 
ùaddr
 ? (
u16_t
)
	`¡ohl
((ùaddr)->
addr
Ë& 0xf‡: 0))

	)

156 
	#ù4_addr1
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 24Ë& 0xff)

	)

157 
	#ù4_addr2
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 16Ë& 0xff)

	)

158 
	#ù4_addr3
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
Ë>> 8Ë& 0xff)

	)

159 
	#ù4_addr4
(
ùaddr
Ë((
u16_t
)(
	`¡ohl
((ùaddr)->
addr
)Ë& 0xff)

	)

161 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr
 *
de°
);

72 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 #i‡
IP_DEBUG


118 
ù_debug_¥öt
(
pbuf
 *
p
);

121 #ifde‡
__˝lu•lus


	@net/lwip/include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~"lwù/√tbuf.h
"

40 
	~"lwù/sys.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

44 #ifde‡
__˝lu•lus


53 
	#NETCONN_NOFLAG
 0x00

	)

54 
	#NETCONN_NOCOPY
 0x00

	)

55 
	#NETCONN_COPY
 0x01

	)

56 
	#NETCONN_MORE
 0x02

	)

59 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

60 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

62 
	e√tc⁄n_ty≥
 {

63 
NETCONN_INVALID
 = 0,

65 
NETCONN_TCP
 = 0x10,

67 
NETCONN_UDP
 = 0x20,

68 
NETCONN_UDPLITE
 = 0x21,

69 
NETCONN_UDPNOCHKSUM
= 0x22,

71 
NETCONN_RAW
 = 0x40

74 
	e√tc⁄n_°©e
 {

75 
NETCONN_NONE
,

76 
NETCONN_WRITE
,

77 
NETCONN_LISTEN
,

78 
NETCONN_CONNECT
,

79 
NETCONN_CLOSE


82 
	e√tc⁄n_evt
 {

83 
NETCONN_EVT_RCVPLUS
,

84 
NETCONN_EVT_RCVMINUS
,

85 
NETCONN_EVT_SENDPLUS
,

86 
NETCONN_EVT_SENDMINUS


89 #i‡
LWIP_IGMP


90 
	e√tc⁄n_igmp
 {

91 
NETCONN_JOIN
,

92 
NETCONN_LEAVE


97 
ù_pcb
;

98 
t˝_pcb
;

99 
udp_pcb
;

100 
øw_pcb
;

101 
√tc⁄n
;

104 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

107 
	s√tc⁄n
 {

109 
√tc⁄n_ty≥
 
ty≥
;

111 
√tc⁄n_°©e
 
°©e
;

114 
ù_pcb
 *
ù
;

115 
t˝_pcb
 *
t˝
;

116 
udp_pcb
 *
udp
;

117 
øw_pcb
 *
øw
;

118 } 
pcb
;

120 
îr_t
 
îr
;

122 
sys_£m_t
 
›_com∂ëed
;

125 
sys_mbox_t
 
ªcvmbox
;

128 
sys_mbox_t
 
ac˚±mbox
;

130 
sockë
;

131 #i‡
LWIP_SO_RCVTIMEO


134 
ªcv_timeout
;

136 #i‡
LWIP_SO_RCVBUF


138 
ªcv_bufsize
;

140 
u16_t
 
ªcv_avaû
;

143 
≠i_msg_msg
 *
wrôe_msg
;

146 
wrôe_off£t
;

147 #i‡
LWIP_TCPIP_CORE_LOCKING


151 
u8_t
 
wrôe_dñayed
;

154 
√tc⁄n_ˇŒback
 
ˇŒback
;

158 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

159 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

160 }

	)

163 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

164 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

166 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

167 
√tc⁄n_ˇŒback
 
ˇŒback
);

168 
îr_t
 
√tc⁄n_dñëe
 (
√tc⁄n
 *
c⁄n
);

169 
√tc⁄n_ty≥
Çëc⁄n_ty≥ (
√tc⁄n
 *
c⁄n
);

171 
îr_t
 
√tc⁄n_gëaddr
 (
√tc⁄n
 *
c⁄n
,

172 
ù_addr
 *
addr
,

173 
u16_t
 *
p‹t
,

174 
u8_t
 
loˇl
);

175 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

176 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

178 
îr_t
 
√tc⁄n_böd
 (
√tc⁄n
 *
c⁄n
,

179 
ù_addr
 *
addr
,

180 
u16_t
 
p‹t
);

181 
îr_t
 
√tc⁄n_c⁄√˘
 (
√tc⁄n
 *
c⁄n
,

182 
ù_addr
 *
addr
,

183 
u16_t
 
p‹t
);

184 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

185 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

186 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

187 
√tc⁄n
 * 
√tc⁄n_ac˚±
 (√tc⁄¿*
c⁄n
);

188 
√tbuf
 * 
√tc⁄n_ªcv
 (
√tc⁄n
 *
c⁄n
);

189 
îr_t
 
√tc⁄n_£ndto
 (
√tc⁄n
 *
c⁄n
,

190 
√tbuf
 *
buf
, 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

191 
îr_t
 
√tc⁄n_£nd
 (
√tc⁄n
 *
c⁄n
,

192 
√tbuf
 *
buf
);

193 
îr_t
 
√tc⁄n_wrôe
 (
√tc⁄n
 *
c⁄n
,

194 c⁄° *
d©≠å
, 
size
,

195 
u8_t
 
≠iÊags
);

196 
îr_t
 
√tc⁄n_˛o£
 (
√tc⁄n
 *
c⁄n
);

198 #i‡
LWIP_IGMP


199 
îr_t
 
√tc⁄n_joö_Àave_group
 (
√tc⁄n
 *
c⁄n
,

200 
ù_addr
 *
mu…üddr
,

201 
ù_addr
 *
öãrÁ˚
,

202 
√tc⁄n_igmp
 
joö_‹_Àave
);

204 #i‡
LWIP_DNS


205 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr
 *
addr
);

208 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
îr
)

	)

209 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

211 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/sys.h
"

42 
	~"lwù/igmp.h
"

43 
	~"lwù/≠i.h
"

45 #ifde‡
__˝lu•lus


55 
	s≠i_msg_msg
 {

58 
√tc⁄n
 *
c⁄n
;

62 
√tbuf
 *
b
;

65 
u8_t
 
¥Ÿo
;

66 } 
n
;

69 
ù_addr
 *
ùaddr
;

70 
u16_t
 
p‹t
;

71 } 
bc
;

74 
ù_addr
 *
ùaddr
;

75 
u16_t
 *
p‹t
;

76 
u8_t
 
loˇl
;

77 } 
ad
;

80 c⁄° *
d©≠å
;

81 
Àn
;

82 
u8_t
 
≠iÊags
;

83 } 
w
;

86 
u16_t
 
Àn
;

87 } 
r
;

88 #i‡
LWIP_IGMP


91 
ù_addr
 *
mu…üddr
;

92 
ù_addr
 *
öãrÁ˚
;

93 
√tc⁄n_igmp
 
joö_‹_Àave
;

94 } 
jl
;

96 #i‡
TCP_LISTEN_BACKLOG


98 
u8_t
 
backlog
;

99 } 
lb
;

101 } 
msg
;

107 
	s≠i_msg
 {

109 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

111 
≠i_msg_msg
 
msg
;

114 #i‡
LWIP_DNS


119 
	sdns_≠i_msg
 {

121 c⁄° *
«me
;

123 
ù_addr
 *
addr
;

126 
sys_£m_t
 
£m
;

128 
îr_t
 *
îr
;

132 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

133 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

134 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

135 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

136 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

137 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

138 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

139 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

140 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

141 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

142 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

143 #i‡
LWIP_IGMP


144 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

147 #i‡
LWIP_DNS


148 
do_gëho°by«me
(*
¨g
);

151 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

152 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

154 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

45 #ifde‡
__˝lu•lus


49 #i‚de‡
PACK_STRUCT_BEGIN


50 
	#PACK_STRUCT_BEGIN


	)

53 #i‚de‡
PACK_STRUCT_END


54 
	#PACK_STRUCT_END


	)

57 #i‚de‡
PACK_STRUCT_FIELD


58 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

62 #i‚de‡
LWIP_UNUSED_ARG


63 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

67 #ifde‡
LWIP_PROVIDE_ERRNO


69 
	#EPERM
 1

	)

70 
	#ENOENT
 2

	)

71 
	#ESRCH
 3

	)

72 
	#EINTR
 4

	)

73 
	#EIO
 5

	)

74 
	#ENXIO
 6

	)

75 
	#E2BIG
 7

	)

76 
	#ENOEXEC
 8

	)

77 
	#EBADF
 9

	)

78 
	#ECHILD
 10

	)

79 
	#EAGAIN
 11

	)

80 
	#ENOMEM
 12

	)

81 
	#EACCES
 13

	)

82 
	#EFAULT
 14

	)

83 
	#ENOTBLK
 15

	)

84 
	#EBUSY
 16

	)

85 
	#EEXIST
 17

	)

86 
	#EXDEV
 18

	)

87 
	#ENODEV
 19

	)

88 
	#ENOTDIR
 20

	)

89 
	#EISDIR
 21

	)

90 
	#EINVAL
 22

	)

91 
	#ENFILE
 23

	)

92 
	#EMFILE
 24

	)

93 
	#ENOTTY
 25

	)

94 
	#ETXTBSY
 26

	)

95 
	#EFBIG
 27

	)

96 
	#ENOSPC
 28

	)

97 
	#ESPIPE
 29

	)

98 
	#EROFS
 30

	)

99 
	#EMLINK
 31

	)

100 
	#EPIPE
 32

	)

101 
	#EDOM
 33

	)

102 
	#ERANGE
 34

	)

103 
	#EDEADLK
 35

	)

104 
	#ENAMETOOLONG
 36

	)

105 
	#ENOLCK
 37

	)

106 
	#ENOSYS
 38

	)

107 
	#ENOTEMPTY
 39

	)

108 
	#ELOOP
 40

	)

109 
	#EWOULDBLOCK
 
EAGAIN


	)

110 
	#ENOMSG
 42

	)

111 
	#EIDRM
 43

	)

112 
	#ECHRNG
 44

	)

113 
	#EL2NSYNC
 45

	)

114 
	#EL3HLT
 46

	)

115 
	#EL3RST
 47

	)

116 
	#ELNRNG
 48

	)

117 
	#EUNATCH
 49

	)

118 
	#ENOCSI
 50

	)

119 
	#EL2HLT
 51

	)

120 
	#EBADE
 52

	)

121 
	#EBADR
 53

	)

122 
	#EXFULL
 54

	)

123 
	#ENOANO
 55

	)

124 
	#EBADRQC
 56

	)

125 
	#EBADSLT
 57

	)

127 
	#EDEADLOCK
 
EDEADLK


	)

129 
	#EBFONT
 59

	)

130 
	#ENOSTR
 60

	)

131 
	#ENODATA
 61

	)

132 
	#ETIME
 62

	)

133 
	#ENOSR
 63

	)

134 
	#ENONET
 64

	)

135 
	#ENOPKG
 65

	)

136 
	#EREMOTE
 66

	)

137 
	#ENOLINK
 67

	)

138 
	#EADV
 68

	)

139 
	#ESRMNT
 69

	)

140 
	#ECOMM
 70

	)

141 
	#EPROTO
 71

	)

142 
	#EMULTIHOP
 72

	)

143 
	#EDOTDOT
 73

	)

144 
	#EBADMSG
 74

	)

145 
	#EOVERFLOW
 75

	)

146 
	#ENOTUNIQ
 76

	)

147 
	#EBADFD
 77

	)

148 
	#EREMCHG
 78

	)

149 
	#ELIBACC
 79

	)

150 
	#ELIBBAD
 80

	)

151 
	#ELIBSCN
 81

	)

152 
	#ELIBMAX
 82

	)

153 
	#ELIBEXEC
 83

	)

154 
	#EILSEQ
 84

	)

155 
	#ERESTART
 85

	)

156 
	#ESTRPIPE
 86

	)

157 
	#EUSERS
 87

	)

158 
	#ENOTSOCK
 88

	)

159 
	#EDESTADDRREQ
 89

	)

160 
	#EMSGSIZE
 90

	)

161 
	#EPROTOTYPE
 91

	)

162 
	#ENOPROTOOPT
 92

	)

163 
	#EPROTONOSUPPORT
 93

	)

164 
	#ESOCKTNOSUPPORT
 94

	)

165 
	#EOPNOTSUPP
 95

	)

166 
	#EPFNOSUPPORT
 96

	)

167 
	#EAFNOSUPPORT
 97

	)

168 
	#EADDRINUSE
 98

	)

169 
	#EADDRNOTAVAIL
 99

	)

170 
	#ENETDOWN
 100

	)

171 
	#ENETUNREACH
 101

	)

172 
	#ENETRESET
 102

	)

173 
	#ECONNABORTED
 103

	)

174 
	#ECONNRESET
 104

	)

175 
	#ENOBUFS
 105

	)

176 
	#EISCONN
 106

	)

177 
	#ENOTCONN
 107

	)

178 
	#ESHUTDOWN
 108

	)

179 
	#ETOOMANYREFS
 109

	)

180 
	#ETIMEDOUT
 110

	)

181 
	#ECONNREFUSED
 111

	)

182 
	#EHOSTDOWN
 112

	)

183 
	#EHOSTUNREACH
 113

	)

184 
	#EALREADY
 114

	)

185 
	#EINPROGRESS
 115

	)

186 
	#ESTALE
 116

	)

187 
	#EUCLEAN
 117

	)

188 
	#ENOTNAM
 118

	)

189 
	#ENAVAIL
 119

	)

190 
	#EISNAM
 120

	)

191 
	#EREMOTEIO
 121

	)

192 
	#EDQUOT
 122

	)

194 
	#ENOMEDIUM
 123

	)

195 
	#EMEDIUMTYPE
 124

	)

198 
	#ENSROK
 0

	)

199 
	#ENSRNODATA
 160

	)

200 
	#ENSRFORMERR
 161

	)

201 
	#ENSRSERVFAIL
 162

	)

202 
	#ENSRNOTFOUND
 163

	)

203 
	#ENSRNOTIMP
 164

	)

204 
	#ENSRREFUSED
 165

	)

205 
	#ENSRBADQUERY
 166

	)

206 
	#ENSRBADNAME
 167

	)

207 
	#ENSRBADFAMILY
 168

	)

208 
	#ENSRBADRESP
 169

	)

209 
	#ENSRCONNREFUSED
 170

	)

210 
	#ENSRTIMEOUT
 171

	)

211 
	#ENSROF
 172

	)

212 
	#ENSRFILE
 173

	)

213 
	#ENSRNOMEM
 174

	)

214 
	#ENSRDESTRUCTION
 175

	)

215 
	#ENSRQUERYDOMAINTOOLONG
 176

	)

216 
	#ENSRCNAMELOOP
 177

	)

218 #i‚de‡
î∫o


219 
î∫o
;

224 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

43 
	#LWIP_DBG_LEVEL_OFF
 0x00

	)

44 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

45 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

46 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

47 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

50 
	#LWIP_DBG_ON
 0x80U

	)

52 
	#LWIP_DBG_OFF
 0x00U

	)

55 
	#LWIP_DBG_TRACE
 0x40U

	)

57 
	#LWIP_DBG_STATE
 0x20U

	)

59 
	#LWIP_DBG_FRESH
 0x10U

	)

61 
	#LWIP_DBG_HALT
 0x08U

	)

63 #i‚de‡
LWIP_NOASSERT


64 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

65 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

67 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

71 #i‚de‡
LWIP_ERROR


72 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

73 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

76 #ifde‡
LWIP_DEBUG


80 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

82 ((
debug
Ë& 
LWIP_DBG_ON
) && \

83 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

84 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

85 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

86 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

90 } 0)

	)

93 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@net/lwip/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

38 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

39 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

41 #i‚de‡
NULL


42 
	#NULL
 ((*)0)

	)

	@net/lwip/include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
*1000)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	sdh˝


28 
u8_t
 
°©e
;

30 
u8_t
 
åõs
;

32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
pbuf
 *
p
;

38 
dh˝_msg
 *
msg_ö
;

40 
dh˝_msg
 *
›ti⁄s_ö
;

42 
u16_t
 
›ti⁄s_ö_Àn
;

44 
pbuf
 *
p_out
;

45 
dh˝_msg
 *
msg_out
;

46 
u16_t
 
›ti⁄s_out_Àn
;

47 
u16_t
 
ªque°_timeout
;

48 
u16_t
 
t1_timeout
;

49 
u16_t
 
t2_timeout
;

50 
ù_addr
 
£rvî_ù_addr
;

51 
ù_addr
 
of„ªd_ù_addr
;

52 
ù_addr
 
of„ªd_¢_mask
;

53 
ù_addr
 
of„ªd_gw_addr
;

54 
ù_addr
 
of„ªd_bc_addr
;

55 
	#DHCP_MAX_DNS
 2

	)

56 
u32_t
 
dns_cou¡
;

57 
ù_addr
 
of„ªd_dns_addr
[
DHCP_MAX_DNS
];

59 
u32_t
 
of„ªd_t0_Àa£
;

60 
u32_t
 
of„ªd_t1_ª√w
;

61 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_AUTOIP_COOP


63 
u8_t
 
autoù_co›_°©e
;

69 
ù_addr
 
of„ªd_si_addr
;

70 
u8_t
 *
boŸ_fûe_«me
;

75 #ifde‡
PACK_STRUCT_USE_INCLUDES


76 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


80 
	sdh˝_msg


82 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

84 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

86 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

88 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

89 
PACK_STRUCT_FIELD
(
ù_addr
 
cüddr
);

90 
PACK_STRUCT_FIELD
(
ù_addr
 
yüddr
);

91 
PACK_STRUCT_FIELD
(
ù_addr
 
süddr
);

92 
PACK_STRUCT_FIELD
(
ù_addr
 
güddr
);

93 
	#DHCP_CHADDR_LEN
 16U

	)

94 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

95 
	#DHCP_SNAME_LEN
 64U

	)

96 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

97 
	#DHCP_FILE_LEN
 128U

	)

98 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

99 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

100 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

102 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

103 #unde‡
DHCP_OPTIONS_LEN


106 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

108 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

110 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

118 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

120 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

122 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

124 
dh˝_°›
(
√tif
 *netif);

126 
dh˝_öf‹m
(
√tif
 *netif);

129 #i‡
DHCP_DOES_ARP_CHECK


130 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr
 *
addr
);

134 
dh˝_cﬂr£_tmr
();

136 
dh˝_föe_tmr
();

139 
	#DHCP_MSG_OFS
 (
UDP_DATA_OFS
)

	)

140 
	#DHCP_OP_OFS
 (
DHCP_MSG_OFS
 + 0)

	)

141 
	#DHCP_HTYPE_OFS
 (
DHCP_MSG_OFS
 + 1)

	)

142 
	#DHCP_HLEN_OFS
 (
DHCP_MSG_OFS
 + 2)

	)

143 
	#DHCP_HOPS_OFS
 (
DHCP_MSG_OFS
 + 3)

	)

144 
	#DHCP_XID_OFS
 (
DHCP_MSG_OFS
 + 4)

	)

145 
	#DHCP_SECS_OFS
 (
DHCP_MSG_OFS
 + 8)

	)

146 
	#DHCP_FLAGS_OFS
 (
DHCP_MSG_OFS
 + 10)

	)

147 
	#DHCP_CIADDR_OFS
 (
DHCP_MSG_OFS
 + 12)

	)

148 
	#DHCP_YIADDR_OFS
 (
DHCP_MSG_OFS
 + 16)

	)

149 
	#DHCP_SIADDR_OFS
 (
DHCP_MSG_OFS
 + 20)

	)

150 
	#DHCP_GIADDR_OFS
 (
DHCP_MSG_OFS
 + 24)

	)

151 
	#DHCP_CHADDR_OFS
 (
DHCP_MSG_OFS
 + 28)

	)

152 
	#DHCP_SNAME_OFS
 (
DHCP_MSG_OFS
 + 44)

	)

153 
	#DHCP_FILE_OFS
 (
DHCP_MSG_OFS
 + 108)

	)

154 
	#DHCP_MSG_LEN
 236

	)

156 
	#DHCP_COOKIE_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
)

	)

157 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_OFS
 + 
DHCP_MSG_LEN
 + 4)

	)

159 
	#DHCP_CLIENT_PORT
 68

	)

160 
	#DHCP_SERVER_PORT
 67

	)

163 
	#DHCP_REQUESTING
 1

	)

164 
	#DHCP_INIT
 2

	)

165 
	#DHCP_REBOOTING
 3

	)

166 
	#DHCP_REBINDING
 4

	)

167 
	#DHCP_RENEWING
 5

	)

168 
	#DHCP_SELECTING
 6

	)

169 
	#DHCP_INFORMING
 7

	)

170 
	#DHCP_CHECKING
 8

	)

171 
	#DHCP_PERMANENT
 9

	)

172 
	#DHCP_BOUND
 10

	)

174 
	#DHCP_BACKING_OFF
 12

	)

175 
	#DHCP_OFF
 13

	)

178 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

179 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

181 
	#DHCP_BOOTREQUEST
 1

	)

182 
	#DHCP_BOOTREPLY
 2

	)

184 
	#DHCP_DISCOVER
 1

	)

185 
	#DHCP_OFFER
 2

	)

186 
	#DHCP_REQUEST
 3

	)

187 
	#DHCP_DECLINE
 4

	)

188 
	#DHCP_ACK
 5

	)

189 
	#DHCP_NAK
 6

	)

190 
	#DHCP_RELEASE
 7

	)

191 
	#DHCP_INFORM
 8

	)

193 
	#DHCP_HTYPE_ETH
 1

	)

195 
	#DHCP_HLEN_ETH
 6

	)

197 
	#DHCP_BROADCAST_FLAG
 15

	)

198 
	#DHCP_BROADCAST_MASK
 (1 << 
DHCP_FLAG_BROADCAST
)

	)

201 
	#DHCP_OPTION_PAD
 0

	)

202 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

203 
	#DHCP_OPTION_ROUTER
 3

	)

204 
	#DHCP_OPTION_DNS_SERVER
 6

	)

205 
	#DHCP_OPTION_HOSTNAME
 12

	)

206 
	#DHCP_OPTION_IP_TTL
 23

	)

207 
	#DHCP_OPTION_MTU
 26

	)

208 
	#DHCP_OPTION_BROADCAST
 28

	)

209 
	#DHCP_OPTION_TCP_TTL
 37

	)

210 
	#DHCP_OPTION_END
 255

	)

213 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

214 
	#DHCP_OPTION_LEASE_TIME
 51

	)

215 
	#DHCP_OPTION_OVERLOAD
 52

	)

217 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

218 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

221 
	#DHCP_OPTION_SERVER_ID
 54

	)

222 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

224 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

225 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

227 
	#DHCP_OPTION_T1
 58

	)

228 
	#DHCP_OPTION_T2
 59

	)

229 
	#DHCP_OPTION_US
 60

	)

230 
	#DHCP_OPTION_CLIENT_ID
 61

	)

231 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

232 
	#DHCP_OPTION_BOOTFILE
 67

	)

235 
	#DHCP_OVERLOAD_NONE
 0

	)

236 
	#DHCP_OVERLOAD_FILE
 1

	)

237 
	#DHCP_OVERLOAD_SNAME
 2

	)

238 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

240 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


42 
	#DNS_TMR_INTERVAL
 1000

	)

45 
	#DNS_RRTYPE_A
 1

	)

46 
	#DNS_RRTYPE_NS
 2

	)

47 
	#DNS_RRTYPE_MD
 3

	)

48 
	#DNS_RRTYPE_MF
 4

	)

49 
	#DNS_RRTYPE_CNAME
 5

	)

50 
	#DNS_RRTYPE_SOA
 6

	)

51 
	#DNS_RRTYPE_MB
 7

	)

52 
	#DNS_RRTYPE_MG
 8

	)

53 
	#DNS_RRTYPE_MR
 9

	)

54 
	#DNS_RRTYPE_NULL
 10

	)

55 
	#DNS_RRTYPE_WKS
 11

	)

56 
	#DNS_RRTYPE_PTR
 12

	)

57 
	#DNS_RRTYPE_HINFO
 13

	)

58 
	#DNS_RRTYPE_MINFO
 14

	)

59 
	#DNS_RRTYPE_MX
 15

	)

60 
	#DNS_RRTYPE_TXT
 16

	)

63 
	#DNS_RRCLASS_IN
 1

	)

64 
	#DNS_RRCLASS_CS
 2

	)

65 
	#DNS_RRCLASS_CH
 3

	)

66 
	#DNS_RRCLASS_HS
 4

	)

67 
	#DNS_RRCLASS_FLUSH
 0x800

	)

76 (*
	tdns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr
 *
	tùaddr
, *
	tˇŒback_¨g
);

79 
	`dns_öô
();

81 
	`dns_tmr
();

83 
	`dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr
 *
dns£rvî
);

85 
ù_addr
 
	`dns_gë£rvî
(
u8_t
 
numdns
);

87 
îr_t
 
	`dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr
 *
addr
,

88 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

	@net/lwip/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

58 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_RTE
)

	)

60 
	#ERR_ABRT
 -5

	)

61 
	#ERR_RST
 -6

	)

62 
	#ERR_CLSD
 -7

	)

63 
	#ERR_CONN
 -8

	)

65 
	#ERR_VAL
 -9

	)

67 
	#ERR_ARG
 -10

	)

69 
	#ERR_USE
 -11

	)

71 
	#ERR_IF
 -12

	)

72 
	#ERR_ISCONN
 -13

	)

74 
	#ERR_INPROGRESS
 -14

	)

77 #ifde‡
LWIP_DEBUG


78 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

80 
	#lwù_°ªº
(
x
Ë""

	)

83 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
lwù_öô
();

44 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

48 
	#mem_öô
()

	)

52 #i‚de‡
mem_‰ì


53 
	#mem_‰ì
 
‰ì


	)

55 #i‚de‡
mem_mÆloc


56 
	#mem_mÆloc
 
mÆloc


	)

58 #i‚de‡
mem_ˇŒoc


59 
	#mem_ˇŒoc
 
ˇŒoc


	)

61 #i‚de‡
mem_ªÆloc


62 
	#mem_ªÆloc
 
ªÆloc


	)

69 #i‡
MEM_SIZE
 > 64000l

70 
u32_t
 
	tmem_size_t
;

72 
u16_t
 
	tmem_size_t
;

75 #i‡
MEM_USE_POOLS


77 
	#mem_öô
()

	)

80 
	#mem_ªÆloc
(
mem
, 
size
Ë(mem)

	)

83 
mem_öô
();

84 *
mem_ªÆloc
(*
mem
, 
mem_size_t
 
size
);

86 *
mem_mÆloc
(
mem_size_t
 
size
);

87 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

88 
mem_‰ì
(*
mem
);

91 #i‚de‡
LWIP_MEM_ALIGN_SIZE


92 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

95 #i‚de‡
LWIP_MEM_ALIGN


96 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

99 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

77 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

80 
memp_öô
();

82 #i‡
MEMP_OVERFLOW_CHECK


83 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

84 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

86 *
memp_mÆloc
(
memp_t
 
ty≥
);

88 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

90 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


14 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, size, "MALLOC_"#size)

	)

15 
	#LWIP_MALLOC_MEMPOOL_START


	)

16 
	#LWIP_MALLOC_MEMPOOL_END


	)

19 #i‚de‡
LWIP_PBUF_MEMPOOL


22 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

32 #i‡
LWIP_RAW


33 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

36 #i‡
LWIP_UDP


37 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

40 #i‡
LWIP_TCP


41 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

42 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

43 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

46 #i‡
IP_REASSEMBLY


47 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

50 #i‡
LWIP_NETCONN


51 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

52 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

55 #i‡
NO_SYS
==0

56 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

57 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

60 #i‡
ARP_QUEUEING


61 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

64 #i‡
LWIP_IGMP


65 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

68 #i‡
NO_SYS
==0

69 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

81 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

82 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

89 #i‡
MEMP_USE_CUSTOM_POOLS


90 
	~"lwùpoﬁs.h
"

97 #unde‡
LWIP_MEMPOOL


98 #unde‡
LWIP_MALLOC_MEMPOOL


99 #unde‡
LWIP_MALLOC_MEMPOOL_START


100 #unde‡
LWIP_MALLOC_MEMPOOL_END


101 #unde‡
LWIP_PBUF_MEMPOOL


	@net/lwip/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

38 #ifde‡
__˝lu•lus


42 
	s√tbuf
 {

43 
pbuf
 *
p
, *
±r
;

44 
ù_addr
 *
addr
;

45 
u16_t
 
p‹t
;

49 
√tbuf
 * 
√tbuf_√w
 ();

50 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

51 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

52 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

53 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

54 c⁄° *
d©≠å
, 
u16_t
 
size
);

55 
√tbuf_chaö
 (
√tbuf
 *
hód
,

56 
√tbuf
 *
èû
);

58 
u16_t
 
√tbuf_Àn
 (
√tbuf
 *
buf
);

59 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

60 **
d©≠å
, 
u16_t
 *
Àn
);

61 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

62 
√tbuf_fú°
 (
√tbuf
 *
buf
);

65 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

66 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

67 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

68 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

69 
	#√tbuf_‰omaddr
(
buf
Ë((buf)->
addr
)

	)

70 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

72 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/netdb.h

30 
	~"lwù/›t.h
"

32 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


34 
	~"lwù/sockës.h
"

37 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


38 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

41 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


42 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

45 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


46 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

49 #i‡
LWIP_DNS_API_DEFINE_ERRORS


51 
	#EAI_NONAME
 200

	)

52 
	#EAI_SERVICE
 201

	)

53 
	#EAI_FAIL
 202

	)

54 
	#EAI_MEMORY
 203

	)

56 
	#HOST_NOT_FOUND
 210

	)

57 
	#NO_DATA
 211

	)

58 
	#NO_RECOVERY
 212

	)

59 
	#TRY_AGAIN
 213

	)

62 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


63 
	sho°ít
 {

64 *
	mh_«me
;

65 **
	mh_Æü£s
;

67 
	mh_addπy≥
;

68 
	mh_Àngth
;

69 **
	mh_addr_li°
;

71 
	#h_addr
 
h_addr_li°
[0]

	)

74 
	saddröfo
 {

75 
	mai_Êags
;

76 
	mai_Ámûy
;

77 
	mai_sockty≥
;

78 
	mai_¥Ÿocﬁ
;

79 
sockÀn_t
 
	mai_addæí
;

80 
sockaddr
 *
	mai_addr
;

81 *
	mai_ˇn⁄«me
;

82 
addröfo
 *
	mai_√xt
;

86 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


88 
h_î∫o
;

91 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

92 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

93 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

94 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

95 
lwù_gëaddröfo
(c⁄° *
nodíame
,

96 c⁄° *
£rv«me
,

97 c⁄° 
addröfo
 *
höts
,

98 
addröfo
 **
ªs
);

100 #i‡
LWIP_COMPAT_SOCKETS


101 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

102 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

103 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

104 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
(
a
)

	)

105 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

106 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

	@net/lwip/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/öë.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

71 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

73 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

75 
	#NETIF_FLAG_DHCP
 0x08U

	)

78 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

80 
	#NETIF_FLAG_ETHARP
 0x20U

	)

82 
	#NETIF_FLAG_IGMP
 0x40U

	)

88 
	s√tif
 {

90 
√tif
 *
√xt
;

93 
ù_addr
 ip_addr;

94 
ù_addr
 
√tmask
;

95 
ù_addr
 
gw
;

99 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *
öp
);

103 
îr_t
 (* 
ouçut
)(
√tif
 *√tif, 
pbuf
 *
p
,

104 
ù_addr
 *
ùaddr
);

108 
îr_t
 (* 
lökouçut
)(
√tif
 *√tif, 
pbuf
 *
p
);

109 #i‡
LWIP_NETIF_STATUS_CALLBACK


112 (* 
°©us_ˇŒback
)(
√tif
 *netif);

114 #i‡
LWIP_NETIF_LINK_CALLBACK


117 (* 
lök_ˇŒback
)(
√tif
 *netif);

121 *
°©e
;

122 #i‡
LWIP_DHCP


124 
dh˝
 *dhcp;

126 #i‡
LWIP_AUTOIP


128 
autoù
 *autoip;

130 #i‡
LWIP_NETIF_HOSTNAME


132 * 
ho°«me
;

135 
u8_t
 
hwaddr_Àn
;

137 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

139 
u16_t
 
mtu
;

141 
u8_t
 
Êags
;

143 
«me
[2];

145 
u8_t
 
num
;

146 #i‡
LWIP_SNMP


148 
u8_t
 
lök_ty≥
;

150 
u32_t
 
lök_•ìd
;

152 
u32_t
 
ts
;

154 
u32_t
 
iföo˘ës
;

155 
u32_t
 
iföuˇ°pkts
;

156 
u32_t
 
ifönuˇ°pkts
;

157 
u32_t
 
ifödisˇrds
;

158 
u32_t
 
ifouto˘ës
;

159 
u32_t
 
ifoutuˇ°pkts
;

160 
u32_t
 
ifouäuˇ°pkts
;

161 
u32_t
 
ifoutdisˇrds
;

163 #i‡
LWIP_IGMP


165 
îr_t
 (*
igmp_mac_fûãr
)–
√tif
 *√tif, 
ù_addr
 *
group
, 
u8_t
 
a˘i⁄
);

167 #i‡
LWIP_NETIF_HWADDRHINT


168 
u8_t
 *
addr_höt
;

170 #i‡
ENABLE_LOOPBACK


172 
pbuf
 *
lo›_fú°
;

173 
pbuf
 *
lo›_œ°
;

174 #i‡
LWIP_LOOPBACK_MAX_PBUFS


175 
u16_t
 
lo›_˙t_cuºít
;

180 #i‡
LWIP_SNMP


181 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

183 
√tif
->
lök_ty≥
 = 
ty≥
; \

185 
√tif
->
lök_•ìd
 = 
•ìd
; \

186 
√tif
->
ts
 = 0; \

187 
√tif
->
iföo˘ës
 = 0; \

188 
√tif
->
iföuˇ°pkts
 = 0; \

189 
√tif
->
ifönuˇ°pkts
 = 0; \

190 
√tif
->
ifödisˇrds
 = 0; \

191 
√tif
->
ifouto˘ës
 = 0; \

192 
√tif
->
ifoutuˇ°pkts
 = 0; \

193 
√tif
->
ifouäuˇ°pkts
 = 0; \

194 
√tif
->
ifoutdisˇrds
 = 0

	)

196 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

201 
√tif
 *
√tif_li°
;

203 
√tif
 *
√tif_deÁu…
;

205 
	#√tif_öô
(Ë

	)

207 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

208 
ù_addr
 *
gw
,

209 *
°©e
,

210 
îr_t
 (* 
öô
)(
√tif
 *netif),

211 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif));

214 
√tif_£t_addr
(
√tif
 *√tif,
ù_addr
 *
ùaddr
, ù_add∏*
√tmask
,

215 
ù_addr
 *
gw
);

216 
√tif_ªmove
(
√tif
 *Çetif);

222 
√tif
 *
√tif_föd
(*
«me
);

224 
√tif_£t_deÁu…
(
√tif
 *netif);

226 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

227 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr
 *
√tmask
);

228 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr
 *
gw
);

230 
√tif_£t_up
(
√tif
 *netif);

231 
√tif_£t_down
(
√tif
 *netif);

232 
u8_t
 
√tif_is_up
(
√tif
 *netif);

234 #i‡
LWIP_NETIF_STATUS_CALLBACK


238 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, (* 
°©us_ˇŒback
)(netif *netif));

241 #i‡
LWIP_NETIF_LINK_CALLBACK


242 
√tif_£t_lök_up
(
√tif
 *netif);

243 
√tif_£t_lök_down
(
√tif
 *netif);

244 
u8_t
 
√tif_is_lök_up
(
√tif
 *netif);

248 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, (* 
lök_ˇŒback
)(netif *netif));

251 #ifde‡
__˝lu•lus


255 #i‡
ENABLE_LOOPBACK


256 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
de°_ù
);

257 
√tif_pﬁl
(
√tif
 *netif);

258 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


259 
√tif_pﬁl_Æl
();

	@net/lwip/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 
	s√tiÁpi_msg_msg
 {

45 #i‡!
LWIP_TCPIP_CORE_LOCKING


46 
sys_£m_t
 
£m
;

48 
îr_t
 
îr
;

49 
√tif
 *netif;

52 
ù_addr
 *
ùaddr
;

53 
ù_addr
 *
√tmask
;

54 
ù_addr
 *
gw
;

55 *
°©e
;

56 
îr_t
 (* 
öô
Ë(
√tif
 *netif);

57 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif);

58 } 
add
;

60 (* 
voidfunc
)(
√tif
 *netif);

61 
îr_t
 (* 
îπfunc
)(
√tif
 *netif);

62 } 
comm⁄
;

63 } 
msg
;

66 
	s√tiÁpi_msg
 {

67 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

68 
√tiÁpi_msg_msg
 
msg
;

73 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

74 
ù_addr
 *
ùaddr
,

75 
ù_addr
 *
√tmask
,

76 
ù_addr
 *
gw
,

77 *
°©e
,

78 
îr_t
 (* 
öô
)(
√tif
 *netif),

79 
îr_t
 (* 
öput
)(
pbuf
 *
p
, 
√tif
 *netif) );

81 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

82 (* 
voidfunc
)(
√tif
 *netif),

83 
îr_t
 (* 
îπfunc
)(
√tif
 *netif) );

85 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

86 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

87 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

88 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

89 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

90 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

91 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

92 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

94 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
MEMCPY


76 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

83 #i‚de‡
SMEMCPY


84 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

97 #i‚de‡
MEM_LIBC_MALLOC


98 
	#MEM_LIBC_MALLOC
 0

	)

106 #i‚de‡
MEM_ALIGNMENT


107 
	#MEM_ALIGNMENT
 1

	)

114 #i‚de‡
MEM_SIZE


115 
	#MEM_SIZE
 1600

	)

127 #i‚de‡
MEMP_OVERFLOW_CHECK


128 
	#MEMP_OVERFLOW_CHECK
 0

	)

135 #i‚de‡
MEMP_SANITY_CHECK


136 
	#MEMP_SANITY_CHECK
 0

	)

144 #i‚de‡
MEM_USE_POOLS


145 
	#MEM_USE_POOLS
 0

	)

154 #i‚de‡
MEMP_USE_CUSTOM_POOLS


155 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

176 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


177 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

190 #i‚de‡
MEMP_NUM_PBUF


191 
	#MEMP_NUM_PBUF
 16

	)

198 #i‚de‡
MEMP_NUM_RAW_PCB


199 
	#MEMP_NUM_RAW_PCB
 4

	)

207 #i‚de‡
MEMP_NUM_UDP_PCB


208 
	#MEMP_NUM_UDP_PCB
 4

	)

215 #i‚de‡
MEMP_NUM_TCP_PCB


216 
	#MEMP_NUM_TCP_PCB
 5

	)

223 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


224 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

231 #i‚de‡
MEMP_NUM_TCP_SEG


232 
	#MEMP_NUM_TCP_SEG
 16

	)

239 #i‚de‡
MEMP_NUM_REASSDATA


240 
	#MEMP_NUM_REASSDATA
 5

	)

249 #i‚de‡
MEMP_NUM_ARP_QUEUE


250 
	#MEMP_NUM_ARP_QUEUE
 30

	)

259 #i‚de‡
MEMP_NUM_IGMP_GROUP


260 
	#MEMP_NUM_IGMP_GROUP
 8

	)

267 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


268 
	#MEMP_NUM_SYS_TIMEOUT
 3

	)

275 #i‚de‡
MEMP_NUM_NETBUF


276 
	#MEMP_NUM_NETBUF
 2

	)

283 #i‚de‡
MEMP_NUM_NETCONN


284 
	#MEMP_NUM_NETCONN
 4

	)

292 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


293 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

301 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


302 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

308 #i‚de‡
PBUF_POOL_SIZE


309 
	#PBUF_POOL_SIZE
 16

	)

320 #i‚de‡
LWIP_ARP


321 
	#LWIP_ARP
 1

	)

327 #i‚de‡
ARP_TABLE_SIZE


328 
	#ARP_TABLE_SIZE
 10

	)

335 #i‚de‡
ARP_QUEUEING


336 
	#ARP_QUEUEING
 1

	)

347 #i‚de‡
ETHARP_TRUST_IP_MAC


348 
	#ETHARP_TRUST_IP_MAC
 1

	)

361 #i‚de‡
IP_FORWARD


362 
	#IP_FORWARD
 0

	)

370 #i‚de‡
IP_OPTIONS_ALLOWED


371 
	#IP_OPTIONS_ALLOWED
 1

	)

379 #i‚de‡
IP_REASSEMBLY


380 
	#IP_REASSEMBLY
 1

	)

388 #i‚de‡
IP_FRAG


389 
	#IP_FRAG
 1

	)

397 #i‚de‡
IP_REASS_MAXAGE


398 
	#IP_REASS_MAXAGE
 3

	)

407 #i‚de‡
IP_REASS_MAX_PBUFS


408 
	#IP_REASS_MAX_PBUFS
 10

	)

416 #i‚de‡
IP_FRAG_USES_STATIC_BUF


417 
	#IP_FRAG_USES_STATIC_BUF
 1

	)

424 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

425 
	#IP_FRAG_MAX_MTU
 1500

	)

431 #i‚de‡
IP_DEFAULT_TTL


432 
	#IP_DEFAULT_TTL
 255

	)

444 #i‚de‡
LWIP_ICMP


445 
	#LWIP_ICMP
 1

	)

451 #i‚de‡
ICMP_TTL


452 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

463 #i‚de‡
LWIP_RAW


464 
	#LWIP_RAW
 1

	)

470 #i‚de‡
RAW_TTL


471 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

482 #i‚de‡
LWIP_DHCP


483 
	#LWIP_DHCP
 0

	)

489 #i‚de‡
DHCP_DOES_ARP_CHECK


490 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

501 #i‚de‡
LWIP_AUTOIP


502 
	#LWIP_AUTOIP
 0

	)

509 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


510 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

522 #i‚de‡
LWIP_SNMP


523 
	#LWIP_SNMP
 0

	)

530 #i‚de‡
SNMP_CONCURRENT_REQUESTS


531 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

538 #i‚de‡
SNMP_TRAP_DESTINATIONS


539 
	#SNMP_TRAP_DESTINATIONS
 1

	)

545 #i‚de‡
SNMP_PRIVATE_MIB


546 
	#SNMP_PRIVATE_MIB
 0

	)

554 #i‚de‡
SNMP_SAFE_REQUESTS


555 
	#SNMP_SAFE_REQUESTS
 1

	)

566 #i‚de‡
LWIP_IGMP


567 
	#LWIP_IGMP
 0

	)

579 #i‚de‡
LWIP_DNS


580 
	#LWIP_DNS
 0

	)

584 #i‚de‡
DNS_TABLE_SIZE


585 
	#DNS_TABLE_SIZE
 4

	)

589 #i‚de‡
DNS_MAX_NAME_LENGTH


590 
	#DNS_MAX_NAME_LENGTH
 256

	)

594 #i‚de‡
DNS_MAX_SERVERS


595 
	#DNS_MAX_SERVERS
 2

	)

599 #i‚de‡
DNS_DOES_NAME_CHECK


600 
	#DNS_DOES_NAME_CHECK
 1

	)

606 #i‚de‡
DNS_USES_STATIC_BUF


607 
	#DNS_USES_STATIC_BUF
 1

	)

611 #i‚de‡
DNS_MSG_SIZE


612 
	#DNS_MSG_SIZE
 512

	)

623 #i‚de‡
LWIP_UDP


624 
	#LWIP_UDP
 1

	)

630 #i‚de‡
LWIP_UDPLITE


631 
	#LWIP_UDPLITE
 0

	)

637 #i‚de‡
UDP_TTL


638 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

649 #i‚de‡
LWIP_TCP


650 
	#LWIP_TCP
 1

	)

656 #i‚de‡
TCP_TTL


657 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

663 #i‚de‡
TCP_WND


664 
	#TCP_WND
 2048

	)

670 #i‚de‡
TCP_MAXRTX


671 
	#TCP_MAXRTX
 12

	)

677 #i‚de‡
TCP_SYNMAXRTX


678 
	#TCP_SYNMAXRTX
 6

	)

685 #i‚de‡
TCP_QUEUE_OOSEQ


686 
	#TCP_QUEUE_OOSEQ
 1

	)

696 #i‚de‡
TCP_MSS


697 
	#TCP_MSS
 128

	)

708 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


709 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

716 #i‚de‡
TCP_SND_BUF


717 
	#TCP_SND_BUF
 256

	)

724 #i‚de‡
TCP_SND_QUEUELEN


725 
	#TCP_SND_QUEUELEN
 (4 * (
TCP_SND_BUF
/
TCP_MSS
))

	)

733 #i‚de‡
TCP_SNDLOWAT


734 
	#TCP_SNDLOWAT
 (
TCP_SND_BUF
/2)

	)

740 #i‚de‡
TCP_LISTEN_BACKLOG


741 
	#TCP_LISTEN_BACKLOG
 0

	)

749 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


750 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

760 #i‚de‡
LWIP_EVENT_API


761 
	#LWIP_EVENT_API
 0

	)

762 
	#LWIP_CALLBACK_API
 1

	)

764 
	#LWIP_EVENT_API
 1

	)

765 
	#LWIP_CALLBACK_API
 0

	)

779 #i‚de‡
PBUF_LINK_HLEN


780 
	#PBUF_LINK_HLEN
 14

	)

788 #i‚de‡
PBUF_POOL_BUFSIZE


789 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

801 #i‚de‡
LWIP_NETIF_HOSTNAME


802 
	#LWIP_NETIF_HOSTNAME
 0

	)

808 #i‚de‡
LWIP_NETIF_API


809 
	#LWIP_NETIF_API
 0

	)

816 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


817 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

824 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


825 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

835 #i‚de‡
LWIP_NETIF_HWADDRHINT


836 
	#LWIP_NETIF_HWADDRHINT
 0

	)

843 #i‚de‡
LWIP_NETIF_LOOPBACK


844 
	#LWIP_NETIF_LOOPBACK
 0

	)

851 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


852 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

868 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


869 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

880 #i‚de‡
LWIP_HAVE_LOOPIF


881 
	#LWIP_HAVE_LOOPIF
 0

	)

892 #i‚de‡
LWIP_HAVE_SLIPIF


893 
	#LWIP_HAVE_SLIPIF
 0

	)

904 #i‚de‡
TCPIP_THREAD_NAME


905 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

913 #i‚de‡
TCPIP_THREAD_STACKSIZE


914 
	#TCPIP_THREAD_STACKSIZE
 0

	)

922 #i‚de‡
TCPIP_THREAD_PRIO


923 
	#TCPIP_THREAD_PRIO
 1

	)

931 #i‚de‡
TCPIP_MBOX_SIZE


932 
	#TCPIP_MBOX_SIZE
 0

	)

938 #i‚de‡
SLIPIF_THREAD_NAME


939 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

947 #i‚de‡
SLIPIF_THREAD_STACKSIZE


948 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

956 #i‚de‡
SLIPIF_THREAD_PRIO


957 
	#SLIPIF_THREAD_PRIO
 1

	)

963 #i‚de‡
PPP_THREAD_NAME


964 
	#PPP_THREAD_NAME
 "µpMaö"

	)

972 #i‚de‡
PPP_THREAD_STACKSIZE


973 
	#PPP_THREAD_STACKSIZE
 0

	)

981 #i‚de‡
PPP_THREAD_PRIO


982 
	#PPP_THREAD_PRIO
 1

	)

988 #i‚de‡
DEFAULT_THREAD_NAME


989 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

997 #i‚de‡
DEFAULT_THREAD_STACKSIZE


998 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1006 #i‚de‡
DEFAULT_THREAD_PRIO


1007 
	#DEFAULT_THREAD_PRIO
 1

	)

1015 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1016 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1024 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1025 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1033 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1034 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1042 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1043 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1055 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1056 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1062 #i‚de‡
LWIP_NETCONN


1063 
	#LWIP_NETCONN
 1

	)

1074 #i‚de‡
LWIP_SOCKET


1075 
	#LWIP_SOCKET
 1

	)

1082 #i‚de‡
LWIP_COMPAT_SOCKETS


1083 
	#LWIP_COMPAT_SOCKETS
 1

	)

1091 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1092 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1100 #i‚de‡
LWIP_TCP_KEEPALIVE


1101 
	#LWIP_TCP_KEEPALIVE
 0

	)

1107 #i‚de‡
LWIP_SO_RCVTIMEO


1108 
	#LWIP_SO_RCVTIMEO
 0

	)

1114 #i‚de‡
LWIP_SO_RCVBUF


1115 
	#LWIP_SO_RCVBUF
 0

	)

1121 #i‚de‡
SO_REUSE


1122 
	#SO_REUSE
 0

	)

1133 #i‚de‡
LWIP_STATS


1134 
	#LWIP_STATS
 1

	)

1137 #i‡
LWIP_STATS


1142 #i‚de‡
LWIP_STATS_DISPLAY


1143 
	#LWIP_STATS_DISPLAY
 0

	)

1149 #i‚de‡
LINK_STATS


1150 
	#LINK_STATS
 1

	)

1156 #i‚de‡
ETHARP_STATS


1157 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1163 #i‚de‡
IP_STATS


1164 
	#IP_STATS
 1

	)

1171 #i‚de‡
IPFRAG_STATS


1172 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1178 #i‚de‡
ICMP_STATS


1179 
	#ICMP_STATS
 1

	)

1185 #i‚de‡
IGMP_STATS


1186 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1193 #i‚de‡
UDP_STATS


1194 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1201 #i‚de‡
TCP_STATS


1202 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1208 #i‚de‡
MEM_STATS


1209 
	#MEM_STATS
 1

	)

1215 #i‚de‡
MEMP_STATS


1216 
	#MEMP_STATS
 1

	)

1222 #i‚de‡
SYS_STATS


1223 
	#SYS_STATS
 1

	)

1228 
	#LINK_STATS
 0

	)

1229 
	#IP_STATS
 0

	)

1230 
	#IPFRAG_STATS
 0

	)

1231 
	#ICMP_STATS
 0

	)

1232 
	#IGMP_STATS
 0

	)

1233 
	#UDP_STATS
 0

	)

1234 
	#TCP_STATS
 0

	)

1235 
	#MEM_STATS
 0

	)

1236 
	#MEMP_STATS
 0

	)

1237 
	#SYS_STATS
 0

	)

1238 
	#LWIP_STATS_DISPLAY
 0

	)

1250 #i‚de‡
PPP_SUPPORT


1251 
	#PPP_SUPPORT
 0

	)

1257 #i‚de‡
PPPOE_SUPPORT


1258 
	#PPPOE_SUPPORT
 0

	)

1264 #i‚de‡
PPPOS_SUPPORT


1265 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1268 #i‡
PPP_SUPPORT


1273 #i‚de‡
NUM_PPP


1274 
	#NUM_PPP
 1

	)

1280 #i‚de‡
PAP_SUPPORT


1281 
	#PAP_SUPPORT
 0

	)

1287 #i‚de‡
CHAP_SUPPORT


1288 
	#CHAP_SUPPORT
 0

	)

1294 #i‚de‡
MSCHAP_SUPPORT


1295 
	#MSCHAP_SUPPORT
 0

	)

1301 #i‚de‡
CBCP_SUPPORT


1302 
	#CBCP_SUPPORT
 0

	)

1308 #i‚de‡
CCP_SUPPORT


1309 
	#CCP_SUPPORT
 0

	)

1315 #i‚de‡
VJ_SUPPORT


1316 
	#VJ_SUPPORT
 0

	)

1322 #i‚de‡
MD5_SUPPORT


1323 
	#MD5_SUPPORT
 0

	)

1329 #i‚de‡
FSM_DEFTIMEOUT


1330 
	#FSM_DEFTIMEOUT
 6

	)

1333 #i‚de‡
FSM_DEFMAXTERMREQS


1334 
	#FSM_DEFMAXTERMREQS
 2

	)

1337 #i‚de‡
FSM_DEFMAXCONFREQS


1338 
	#FSM_DEFMAXCONFREQS
 10

	)

1341 #i‚de‡
FSM_DEFMAXNAKLOOPS


1342 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1345 #i‚de‡
UPAP_DEFTIMEOUT


1346 
	#UPAP_DEFTIMEOUT
 6

	)

1349 #i‚de‡
UPAP_DEFREQTIME


1350 
	#UPAP_DEFREQTIME
 30

	)

1353 #i‚de‡
CHAP_DEFTIMEOUT


1354 
	#CHAP_DEFTIMEOUT
 6

	)

1357 #i‚de‡
CHAP_DEFTRANSMITS


1358 
	#CHAP_DEFTRANSMITS
 10

	)

1362 #i‚de‡
LCP_ECHOINTERVAL


1363 
	#LCP_ECHOINTERVAL
 0

	)

1367 #i‚de‡
LCP_MAXECHOFAILS


1368 
	#LCP_MAXECHOFAILS
 3

	)

1372 #i‚de‡
PPP_MAXIDLEFLAG


1373 
	#PPP_MAXIDLEFLAG
 100

	)

1384 
	#PPP_MTU
 1500

	)

1385 #i‚de‡
PPP_MAXMTU


1387 
	#PPP_MAXMTU
 1500

	)

1389 
	#PPP_MINMTU
 64

	)

1390 
	#PPP_MRU
 1500

	)

1391 
	#PPP_MAXMRU
 1500

	)

1392 #i‚de‡
PPP_DEFMRU


1393 
	#PPP_DEFMRU
 296

	)

1395 
	#PPP_MINMRU
 128

	)

1398 
	#MAXNAMELEN
 256

	)

1399 
	#MAXSECRETLEN
 256

	)

1411 #i‚de‡
CHECKSUM_GEN_IP


1412 
	#CHECKSUM_GEN_IP
 1

	)

1418 #i‚de‡
CHECKSUM_GEN_UDP


1419 
	#CHECKSUM_GEN_UDP
 1

	)

1425 #i‚de‡
CHECKSUM_GEN_TCP


1426 
	#CHECKSUM_GEN_TCP
 1

	)

1432 #i‚de‡
CHECKSUM_CHECK_IP


1433 
	#CHECKSUM_CHECK_IP
 1

	)

1439 #i‚de‡
CHECKSUM_CHECK_UDP


1440 
	#CHECKSUM_CHECK_UDP
 1

	)

1446 #i‚de‡
CHECKSUM_CHECK_TCP


1447 
	#CHECKSUM_CHECK_TCP
 1

	)

1460 #i‚de‡
LWIP_DBG_MIN_LEVEL


1461 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_OFF


	)

1468 #i‚de‡
LWIP_DBG_TYPES_ON


1469 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1475 #i‚de‡
ETHARP_DEBUG


1476 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1482 #i‚de‡
NETIF_DEBUG


1483 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1489 #i‚de‡
PBUF_DEBUG


1490 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1496 #i‚de‡
API_LIB_DEBUG


1497 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1503 #i‚de‡
API_MSG_DEBUG


1504 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1510 #i‚de‡
SOCKETS_DEBUG


1511 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1517 #i‚de‡
ICMP_DEBUG


1518 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1524 #i‚de‡
IGMP_DEBUG


1525 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1531 #i‚de‡
INET_DEBUG


1532 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1538 #i‚de‡
IP_DEBUG


1539 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1545 #i‚de‡
IP_REASS_DEBUG


1546 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1552 #i‚de‡
RAW_DEBUG


1553 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1559 #i‚de‡
MEM_DEBUG


1560 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1566 #i‚de‡
MEMP_DEBUG


1567 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1573 #i‚de‡
SYS_DEBUG


1574 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

1580 #i‚de‡
TCP_DEBUG


1581 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

1587 #i‚de‡
TCP_INPUT_DEBUG


1588 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

1594 #i‚de‡
TCP_FR_DEBUG


1595 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

1602 #i‚de‡
TCP_RTO_DEBUG


1603 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

1609 #i‚de‡
TCP_CWND_DEBUG


1610 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

1616 #i‚de‡
TCP_WND_DEBUG


1617 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

1623 #i‚de‡
TCP_OUTPUT_DEBUG


1624 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

1630 #i‚de‡
TCP_RST_DEBUG


1631 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

1637 #i‚de‡
TCP_QLEN_DEBUG


1638 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

1644 #i‚de‡
UDP_DEBUG


1645 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

1651 #i‚de‡
TCPIP_DEBUG


1652 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

1658 #i‚de‡
PPP_DEBUG


1659 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

1665 #i‚de‡
SLIP_DEBUG


1666 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

1672 #i‚de‡
DHCP_DEBUG


1673 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

1679 #i‚de‡
AUTOIP_DEBUG


1680 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

1686 #i‚de‡
SNMP_MSG_DEBUG


1687 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1693 #i‚de‡
SNMP_MIB_DEBUG


1694 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

1700 #i‚de‡
DNS_DEBUG


1701 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@net/lwip/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 
	#PBUF_TRANSPORT_HLEN
 20

	)

44 
	#PBUF_IP_HLEN
 20

	)

47 
PBUF_TRANSPORT
,

48 
PBUF_IP
,

49 
PBUF_LINK
,

50 
PBUF_RAW


51 } 
	tpbuf_œyî
;

54 
PBUF_RAM
,

55 
PBUF_ROM
,

56 
PBUF_REF
,

57 
PBUF_POOL


58 } 
	tpbuf_ty≥
;

62 
	#PBUF_FLAG_PUSH
 0x01U

	)

64 
	spbuf
 {

66 
pbuf
 *
√xt
;

69 *
∑ylﬂd
;

78 
u16_t
 
tŸ_Àn
;

81 
u16_t
 
Àn
;

84 
u8_t
 
ty≥
;

87 
u8_t
 
Êags
;

94 
u16_t
 
ªf
;

99 
	#pbuf_öô
()

	)

101 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
size
, 
pbuf_ty≥
 
ty≥
);

102 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

103 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

104 
pbuf_ªf
(
pbuf
 *
p
);

105 
pbuf_ªf_chaö
(
pbuf
 *
p
);

106 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

107 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

108 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

109 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

110 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

111 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

112 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

114 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/öë.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
	søw_pcb
 {

50 
IP_PCB
;

52 
øw_pcb
 *
√xt
;

54 
u8_t
 
¥Ÿocﬁ
;

66 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
, 
pbuf
 *
p
,

67 
ù_addr
 *
addr
);

69 *
ªcv_¨g
;

74 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

75 
øw_ªmove
 (
øw_pcb
 *
pcb
);

76 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

77 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
);

79 
øw_ªcv
 (
øw_pcb
 *
pcb
,

80 
u8_t
 (* 
ªcv
)(*
¨g
, 
øw_pcb
 *
pcb
,

81 
pbuf
 *
p
,

82 
ù_addr
 *
addr
),

83 *
ªcv_¨g
);

84 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
);

85 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

88 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

89 
	#øw_öô
(Ë

	)

91 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


54 
sio_fd_t
 
sio_›í
(
u8_t
);

57 #i‚de‡
sio_£nd


58 
sio_£nd
(
u8_t
, 
sio_fd_t
);

61 #i‚de‡
sio_ªcv


62 
u8_t
 
sio_ªcv
(
sio_fd_t
);

65 #i‚de‡
sio_ªad


66 
u32_t
 
sio_ªad
(
sio_fd_t
, 
u8_t
 *, u32_t);

69 #i‚de‡
sio_wrôe


70 
u32_t
 
sio_wrôe
(
sio_fd_t
, 
u8_t
 *, u32_t);

73 #i‚de‡
sio_ªad_ab‹t


74 
sio_ªad_ab‹t
(
sio_fd_t
);

77 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/√tif.h
"

38 
	~"lwù/udp.h
"

40 #ifde‡
__˝lu•lus


47 
	e¢mp_ifTy≥
 {

48 
¢mp_ifTy≥_Ÿhî
=1,

49 
¢mp_ifTy≥_ªguœr1822
,

50 
¢mp_ifTy≥_hdh1822
,

51 
¢mp_ifTy≥_ddn_x25
,

52 
¢mp_ifTy≥_rfc877_x25
,

53 
¢mp_ifTy≥_ëhî√t_csmacd
,

54 
¢mp_ifTy≥_iso88023_csmacd
,

55 
¢mp_ifTy≥_iso88024_tokíBus
,

56 
¢mp_ifTy≥_iso88025_tokíRög
,

57 
¢mp_ifTy≥_iso88026_m™
,

58 
¢mp_ifTy≥_°¨L™
,

59 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

60 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

61 
¢mp_ifTy≥_hy≥rch™√l
,

62 
¢mp_ifTy≥_fddi
,

63 
¢mp_ifTy≥_œpb
,

64 
¢mp_ifTy≥_sdlc
,

65 
¢mp_ifTy≥_ds1
,

66 
¢mp_ifTy≥_e1
,

67 
¢mp_ifTy≥_basicISDN
,

68 
¢mp_ifTy≥_¥im¨yISDN
,

69 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

70 
¢mp_ifTy≥_µp
,

71 
¢mp_ifTy≥_so·w¨eLo›back
,

72 
¢mp_ifTy≥_e⁄
,

73 
¢mp_ifTy≥_ëhî√t_3Mbô
,

74 
¢mp_ifTy≥_nsù
,

75 
¢mp_ifTy≥_¶ù
,

76 
¢mp_ifTy≥_u…ø
,

77 
¢mp_ifTy≥_ds3
,

78 
¢mp_ifTy≥_sù
,

79 
¢mp_ifTy≥_‰ame_ªœy


82 #i‡
LWIP_SNMP


85 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

88 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

91 
	s¢mp_obj_id


93 
u8_t
 
Àn
;

94 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

98 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

99 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

100 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

101 
¢mp_öc_sysu±ime
();

102 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

103 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

104 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

105 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

106 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

110 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

111 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

112 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

113 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

114 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

116 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

117 
¢mp_öc_iÊi°
();

118 
¢mp_dec_iÊi°
();

121 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

122 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr
 *
ù
);

125 
¢mp_öc_ùöª˚ives
();

126 
¢mp_öc_ùöhdªº‹s
();

127 
¢mp_öc_ùöaddªº‹s
();

128 
¢mp_öc_ùf‹wd©agøms
();

129 
¢mp_öc_ùöunknow≈rŸos
();

130 
¢mp_öc_ùödisˇrds
();

131 
¢mp_öc_ùödñivîs
();

132 
¢mp_öc_ùouåeque°s
();

133 
¢mp_öc_ùoutdisˇrds
();

134 
¢mp_öc_ùouä‹ouãs
();

135 
¢mp_öc_ùªasmªqds
();

136 
¢mp_öc_ùªasmoks
();

137 
¢mp_öc_ùªasmÁûs
();

138 
¢mp_öc_ù‰agoks
();

139 
¢mp_öc_ù‰agÁûs
();

140 
¢mp_öc_ù‰ag¸óãs
();

141 
¢mp_öc_ùroutögdisˇrds
();

142 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

143 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

144 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

145 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_öc_icmpömsgs
();

149 
¢mp_öc_icmpöîr‹s
();

150 
¢mp_öc_icmpöde°uƒóchs
();

151 
¢mp_öc_icmpötimìxcds
();

152 
¢mp_öc_icmpö∑rm¥obs
();

153 
¢mp_öc_icmpö§cquíchs
();

154 
¢mp_öc_icmpöªdúe˘s
();

155 
¢mp_öc_icmpöechos
();

156 
¢mp_öc_icmpöech‹ïs
();

157 
¢mp_öc_icmpötime°amps
();

158 
¢mp_öc_icmpötime°am¥ïs
();

159 
¢mp_öc_icmpöaddrmasks
();

160 
¢mp_öc_icmpöaddrmaskªps
();

161 
¢mp_öc_icmpoutmsgs
();

162 
¢mp_öc_icmpouãº‹s
();

163 
¢mp_öc_icmpoutde°uƒóchs
();

164 
¢mp_öc_icmpouâimìxcds
();

165 
¢mp_öc_icmpouç¨m¥obs
();

166 
¢mp_öc_icmpout§cquíchs
();

167 
¢mp_öc_icmpouåedúe˘s
();

168 
¢mp_öc_icmpouãchos
();

169 
¢mp_öc_icmpouãch‹ïs
();

170 
¢mp_öc_icmpouâime°amps
();

171 
¢mp_öc_icmpouâime°am¥ïs
();

172 
¢mp_öc_icmpouèddrmasks
();

173 
¢mp_öc_icmpouèddrmaskªps
();

176 
¢mp_öc_t˝a˘ive›ís
();

177 
¢mp_öc_t˝∑ssive›ís
();

178 
¢mp_öc_t˝©ãm±Áûs
();

179 
¢mp_öc_t˝e°abª£ts
();

180 
¢mp_öc_t˝ö£gs
();

181 
¢mp_öc_t˝out£gs
();

182 
¢mp_öc_t˝ªå™s£gs
();

183 
¢mp_öc_t˝öîrs
();

184 
¢mp_öc_t˝ouå°s
();

187 
¢mp_öc_udpöd©agøms
();

188 
¢mp_öc_ud≤›‹ts
();

189 
¢mp_öc_udpöîr‹s
();

190 
¢mp_öc_udpoutd©agøms
();

191 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

192 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_öc_¢mpöpkts
();

196 
¢mp_öc_¢mpouçkts
();

197 
¢mp_öc_¢mpöbadvîsi⁄s
();

198 
¢mp_öc_¢mpöbadcommunôy«mes
();

199 
¢mp_öc_¢mpöbadcommunôyu£s
();

200 
¢mp_öc_¢mpöa¢∑r£îrs
();

201 
¢mp_öc_¢mpötoobigs
();

202 
¢mp_öc_¢mpönosuch«mes
();

203 
¢mp_öc_¢mpöbadvÆues
();

204 
¢mp_öc_¢mpöªad⁄lys
();

205 
¢mp_öc_¢mpögíîrs
();

206 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

207 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

208 
¢mp_öc_¢mpögëªque°s
();

209 
¢mp_öc_¢mpögë√xts
();

210 
¢mp_öc_¢mpö£åeque°s
();

211 
¢mp_öc_¢mpögëª•⁄£s
();

212 
¢mp_öc_¢mpöå≠s
();

213 
¢mp_öc_¢mpouâoobigs
();

214 
¢mp_öc_¢mpouäosuch«mes
();

215 
¢mp_öc_¢mpoutbadvÆues
();

216 
¢mp_öc_¢mpoutgíîrs
();

217 
¢mp_öc_¢mpoutgëªque°s
();

218 
¢mp_öc_¢mpoutgë√xts
();

219 
¢mp_öc_¢mpout£åeque°s
();

220 
¢mp_öc_¢mpoutgëª•⁄£s
();

221 
¢mp_öc_¢mpouâøps
();

222 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

223 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

224 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

231 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

232 
	#¢mp_£t_sysobjid
(
oid
);

	)

233 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

234 
	#¢mp_öc_sysu±ime
()

	)

235 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

236 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

237 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

238 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

239 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

243 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

244 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

245 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

246 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

247 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

249 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

250 
	#¢mp_öc_iÊi°
()

	)

251 
	#¢mp_dec_iÊi°
()

	)

254 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

255 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_öc_ùöª˚ives
()

	)

259 
	#¢mp_öc_ùöhdªº‹s
()

	)

260 
	#¢mp_öc_ùöaddªº‹s
()

	)

261 
	#¢mp_öc_ùf‹wd©agøms
()

	)

262 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

263 
	#¢mp_öc_ùödisˇrds
()

	)

264 
	#¢mp_öc_ùödñivîs
()

	)

265 
	#¢mp_öc_ùouåeque°s
()

	)

266 
	#¢mp_öc_ùoutdisˇrds
()

	)

267 
	#¢mp_öc_ùouä‹ouãs
()

	)

268 
	#¢mp_öc_ùªasmªqds
()

	)

269 
	#¢mp_öc_ùªasmoks
()

	)

270 
	#¢mp_öc_ùªasmÁûs
()

	)

271 
	#¢mp_öc_ù‰agoks
()

	)

272 
	#¢mp_öc_ù‰agÁûs
()

	)

273 
	#¢mp_öc_ù‰ag¸óãs
()

	)

274 
	#¢mp_öc_ùroutögdisˇrds
()

	)

275 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

276 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

277 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

278 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_öc_icmpömsgs
()

	)

282 
	#¢mp_öc_icmpöîr‹s
()

	)

283 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

284 
	#¢mp_öc_icmpötimìxcds
()

	)

285 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

286 
	#¢mp_öc_icmpö§cquíchs
()

	)

287 
	#¢mp_öc_icmpöªdúe˘s
()

	)

288 
	#¢mp_öc_icmpöechos
()

	)

289 
	#¢mp_öc_icmpöech‹ïs
()

	)

290 
	#¢mp_öc_icmpötime°amps
()

	)

291 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

292 
	#¢mp_öc_icmpöaddrmasks
()

	)

293 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

294 
	#¢mp_öc_icmpoutmsgs
()

	)

295 
	#¢mp_öc_icmpouãº‹s
()

	)

296 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

297 
	#¢mp_öc_icmpouâimìxcds
()

	)

298 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

299 
	#¢mp_öc_icmpout§cquíchs
()

	)

300 
	#¢mp_öc_icmpouåedúe˘s
()

	)

301 
	#¢mp_öc_icmpouãchos
()

	)

302 
	#¢mp_öc_icmpouãch‹ïs
()

	)

303 
	#¢mp_öc_icmpouâime°amps
()

	)

304 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

305 
	#¢mp_öc_icmpouèddrmasks
()

	)

306 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

308 
	#¢mp_öc_t˝a˘ive›ís
()

	)

309 
	#¢mp_öc_t˝∑ssive›ís
()

	)

310 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

311 
	#¢mp_öc_t˝e°abª£ts
()

	)

312 
	#¢mp_öc_t˝ö£gs
()

	)

313 
	#¢mp_öc_t˝out£gs
()

	)

314 
	#¢mp_öc_t˝ªå™s£gs
()

	)

315 
	#¢mp_öc_t˝öîrs
()

	)

316 
	#¢mp_öc_t˝ouå°s
()

	)

319 
	#¢mp_öc_udpöd©agøms
()

	)

320 
	#¢mp_öc_ud≤›‹ts
()

	)

321 
	#¢mp_öc_udpöîr‹s
()

	)

322 
	#¢mp_öc_udpoutd©agøms
()

	)

323 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

324 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_öc_¢mpöpkts
()

	)

328 
	#¢mp_öc_¢mpouçkts
()

	)

329 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

330 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

331 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

332 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

333 
	#¢mp_öc_¢mpötoobigs
()

	)

334 
	#¢mp_öc_¢mpönosuch«mes
()

	)

335 
	#¢mp_öc_¢mpöbadvÆues
()

	)

336 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

337 
	#¢mp_öc_¢mpögíîrs
()

	)

338 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

339 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

340 
	#¢mp_öc_¢mpögëªque°s
()

	)

341 
	#¢mp_öc_¢mpögë√xts
()

	)

342 
	#¢mp_öc_¢mpö£åeque°s
()

	)

343 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

344 
	#¢mp_öc_¢mpöå≠s
()

	)

345 
	#¢mp_öc_¢mpouâoobigs
()

	)

346 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

347 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

348 
	#¢mp_öc_¢mpoutgíîrs
()

	)

349 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

350 
	#¢mp_öc_¢mpoutgë√xts
()

	)

351 
	#¢mp_öc_¢mpout£åeque°s
()

	)

352 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

353 
	#¢mp_öc_¢mpouâøps
()

	)

354 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

355 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

356 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

360 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #ifde‡
__˝lu•lus


47 
	#SNMP_ASN1_UNIV
 (!0x80 | !0x40)

	)

48 
	#SNMP_ASN1_APPLIC
 (!0x80 | 0x40)

	)

49 
	#SNMP_ASN1_CONTXT
 ( 0x80 | !0x40)

	)

51 
	#SNMP_ASN1_CONSTR
 (0x20)

	)

52 
	#SNMP_ASN1_PRIMIT
 (!0x20)

	)

55 
	#SNMP_ASN1_INTEG
 2

	)

56 
	#SNMP_ASN1_OC_STR
 4

	)

57 
	#SNMP_ASN1_NUL
 5

	)

58 
	#SNMP_ASN1_OBJ_ID
 6

	)

59 
	#SNMP_ASN1_SEQ
 16

	)

62 
	#SNMP_ASN1_IPADDR
 0

	)

63 
	#SNMP_ASN1_COUNTER
 1

	)

64 
	#SNMP_ASN1_GAUGE
 2

	)

65 
	#SNMP_ASN1_TIMETICKS
 3

	)

66 
	#SNMP_ASN1_OPAQUE
 4

	)

69 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

70 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

71 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

72 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

73 
	#SNMP_ASN1_PDU_TRAP
 4

	)

75 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

76 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

77 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

78 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

79 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

80 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

82 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

83 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

84 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

86 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

87 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

88 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
u32_t
 
vÆue
);

89 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
o˘ës_√eded
, 
s32_t
 
vÆue
);

90 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

91 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
øw_Àn
, u8_à*
øw
);

93 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

42 #i‡
SNMP_PRIVATE_MIB


43 
	~"¥iv©e_mib.h
"

46 #ifde‡
__˝lu•lus


52 #i‚de‡
SNMP_IN_PORT


53 
	#SNMP_IN_PORT
 161

	)

57 #i‚de‡
SNMP_TRAP_PORT


58 
	#SNMP_TRAP_PORT
 162

	)

61 
	#SNMP_ES_NOERROR
 0

	)

62 
	#SNMP_ES_TOOBIG
 1

	)

63 
	#SNMP_ES_NOSUCHNAME
 2

	)

64 
	#SNMP_ES_BADVALUE
 3

	)

65 
	#SNMP_ES_READONLY
 4

	)

66 
	#SNMP_ES_GENERROR
 5

	)

68 
	#SNMP_GENTRAP_COLDSTART
 0

	)

69 
	#SNMP_GENTRAP_WARMSTART
 1

	)

70 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

71 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

73 
	s¢mp_v¨böd


76 
¢mp_v¨böd
 *
√xt
;

78 
¢mp_v¨böd
 *
¥ev
;

81 
u8_t
 
idít_Àn
;

83 
s32_t
 *
idít
;

86 
u8_t
 
vÆue_ty≥
;

88 
u8_t
 
vÆue_Àn
;

90 *
vÆue
;

93 
u8_t
 
£qÀ∆í
;

95 
u8_t
 
ﬁíÀn
;

97 
u8_t
 
vÀ∆í
;

99 
u16_t
 
£qÀn
;

101 
u16_t
 
ﬁí
;

103 
u16_t
 
vÀn
;

106 
	s¢mp_v¨böd_roŸ


108 
¢mp_v¨böd
 *
hód
;

109 
¢mp_v¨böd
 *
èû
;

111 
u8_t
 
cou¡
;

113 
u8_t
 
£qÀ∆í
;

115 
u16_t
 
£qÀn
;

119 
	s¢mp_ª•_hódî_Àngths


122 
u8_t
 
îridxÀ∆í
;

124 
u8_t
 
îr°©À∆í
;

126 
u8_t
 
ridÀ∆í
;

128 
u8_t
 
pduÀ∆í
;

130 
u8_t
 
comÀ∆í
;

132 
u8_t
 
vîÀ∆í
;

134 
u8_t
 
£qÀ∆í
;

137 
u16_t
 
îridxÀn
;

139 
u16_t
 
îr°©Àn
;

141 
u16_t
 
ridÀn
;

143 
u16_t
 
pduÀn
;

145 
u16_t
 
comÀn
;

147 
u16_t
 
vîÀn
;

149 
u16_t
 
£qÀn
;

153 
	s¢mp_å≠_hódî_Àngths


156 
u8_t
 
t¶íÀn
;

158 
u8_t
 
°ΩÀ∆í
;

160 
u8_t
 
gå∂íÀn
;

162 
u8_t
 
ØddæíÀn
;

164 
u8_t
 
eidÀ∆í
;

166 
u8_t
 
pduÀ∆í
;

168 
u8_t
 
comÀ∆í
;

170 
u8_t
 
vîÀ∆í
;

172 
u8_t
 
£qÀ∆í
;

175 
u16_t
 
t¶í
;

177 
u16_t
 
°ΩÀn
;

179 
u16_t
 
gå∂í
;

181 
u16_t
 
Øddæí
;

183 
u16_t
 
eidÀn
;

185 
u16_t
 
pduÀn
;

187 
u16_t
 
comÀn
;

189 
u16_t
 
vîÀn
;

191 
u16_t
 
£qÀn
;

195 
	#SNMP_MSG_EMPTY
 0

	)

197 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

200 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

201 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

202 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

203 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

204 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

208 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

209 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

210 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

211 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

212 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

214 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

215 
	s¢mp_msg_p°©


218 
udp_pcb
 *
pcb
;

220 
ù_addr
 
sù
;

222 
u16_t
 
•
;

224 
u8_t
 
π
;

226 
s32_t
 
rid
;

228 
s32_t
 
îr‹_°©us
;

230 
s32_t
 
îr‹_ödex
;

232 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

234 
u8_t
 
com_°æí
;

236 
u8_t
 
°©e
;

238 
mib_exã∫Æ_node
 *
ext_mib_node
;

239 
¢mp_«me_±r
 
ext_«me_±r
;

240 
obj_def
 
ext_obje˘_def
;

241 
¢mp_obj_id
 
ext_oid
;

243 
u8_t
 
vb_idx
;

245 
¢mp_v¨böd
 *
vb_±r
;

247 
¢mp_v¨böd_roŸ
 
övb
;

249 
¢mp_v¨böd_roŸ
 
outvb
;

251 
¢mp_ª•_hódî_Àngths
 
rhl
;

254 
	s¢mp_msg_å≠


257 
udp_pcb
 *
pcb
;

259 
ù_addr
 
dù
;

262 
¢mp_obj_id
 *
íãΩri£
;

264 
u8_t
 
sù_øw
[4];

266 
u32_t
 
gí_å≠
;

268 
u32_t
 
•c_å≠
;

270 
u32_t
 
ts
;

272 
¢mp_v¨böd_roŸ
 
outvb
;

274 
¢mp_å≠_hódî_Àngths
 
thl
;

278 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

280 c⁄° 
¢mp_publiccommunôy
[7];

282 
¢mp_msg_å≠
 
å≠_msg
;

285 
¢mp_öô
();

286 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

287 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr
 *
d°
);

290 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

291 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

292 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

293 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

294 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

297 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

298 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

299 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

300 
¢mp_cﬁd°¨t_å≠
();

301 
¢mp_authÁû_å≠
();

303 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


47 
	~"¥iv©e_mib.h
"

50 #ifde‡
__˝lu•lus


55 
	#MIB_OBJECT_NONE
 0

	)

56 
	#MIB_OBJECT_SCALAR
 1

	)

57 
	#MIB_OBJECT_TAB
 2

	)

60 
	#MIB_OBJECT_READ_ONLY
 0

	)

61 
	#MIB_OBJECT_READ_WRITE
 1

	)

62 
	#MIB_OBJECT_WRITE_ONLY
 2

	)

63 
	#MIB_OBJECT_NOT_ACCESSIBLE
 3

	)

66 
	sobj_def


69 
u8_t
 
ö°™˚
;

71 
u8_t
 
ac˚ss
;

73 
u8_t
 
a¢_ty≥
;

75 
u16_t
 
v_Àn
;

77 
u8_t
 
id_ö°_Àn
;

79 
s32_t
 *
id_ö°_±r
;

82 
	s¢mp_«me_±r


84 
u8_t
 
idít_Àn
;

85 
s32_t
 *
idít
;

89 
	#MIB_NODE_SC
 0x01

	)

91 
	#MIB_NODE_AR
 0x02

	)

93 
	#MIB_NODE_RA
 0x03

	)

95 
	#MIB_NODE_LR
 0x04

	)

97 
	#MIB_NODE_EX
 0x05

	)

100 
	smib_node


103 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

106 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

108 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

110 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

112 c⁄° 
u8_t
 
node_ty≥
;

114 c⁄° 
u16_t
 
maxÀngth
;

118 
mib_node
 
	tmib_sˇœr_node
;

122 
	smib_¨øy_node


125 (* c⁄° 
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

126 (* c⁄° 
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

127 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

128 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

130 c⁄° 
u8_t
 
node_ty≥
;

131 c⁄° 
u16_t
 
maxÀngth
;

134 c⁄° 
s32_t
 *
objid
;

135 
mib_node
* c⁄° *
≈å
;

140 
	smib_øm_¨øy_node


143 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

144 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

145 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

146 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

148 
u8_t
 
node_ty≥
;

149 
u16_t
 
maxÀngth
;

152 
s32_t
 *
objid
;

153 
mib_node
 **
≈å
;

156 
	smib_li°_node


158 
mib_li°_node
 *
¥ev
;

159 
mib_li°_node
 *
√xt
;

160 
s32_t
 
objid
;

161 
mib_node
 *
≈å
;

166 
	smib_li°_roŸnode


169 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

170 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

171 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

172 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

174 
u8_t
 
node_ty≥
;

175 
u16_t
 
maxÀngth
;

178 
mib_li°_node
 *
hód
;

179 
mib_li°_node
 *
èû
;

181 
u16_t
 
cou¡
;

186 
	smib_exã∫Æ_node


189 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

190 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

191 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

192 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

194 
u8_t
 
node_ty≥
;

195 
u16_t
 
maxÀngth
;

200 * 
addr_öf
;

202 
u8_t
 
åì_Àvñs
;

204 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

207 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

208 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

211 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

212 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

213 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

214 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

216 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

217 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

218 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

219 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

223 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

224 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

225 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

229 c⁄° 
mib_¨øy_node
 
öã∫ë
;

232 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

233 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

234 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

235 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

237 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr
 *
ù
);

238 
¢mp_ùtooid
(
ù_addr
 *
ù
, 
s32_t
 *
idít
);

239 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

240 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

242 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

243 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

244 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

245 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

247 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

248 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

249 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

251 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

252 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

253 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

254 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

256 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/öë.h
"

44 #ifde‡
__˝lu•lus


49 
	ssockaddr_ö
 {

50 
u8_t
 
sö_Àn
;

51 
u8_t
 
sö_Ámûy
;

52 
u16_t
 
sö_p‹t
;

53 
ö_addr
 
sö_addr
;

54 
sö_zîo
[8];

57 
	ssockaddr
 {

58 
u8_t
 
ß_Àn
;

59 
u8_t
 
ß_Ámûy
;

60 
ß_d©a
[14];

63 #i‚de‡
sockÀn_t


64 
	#sockÀn_t
 
u32_t


	)

68 
	#SOCK_STREAM
 1

	)

69 
	#SOCK_DGRAM
 2

	)

70 
	#SOCK_RAW
 3

	)

75 
	#SO_DEBUG
 0x0001

	)

76 
	#SO_ACCEPTCONN
 0x0002

	)

77 
	#SO_REUSEADDR
 0x0004

	)

78 
	#SO_KEEPALIVE
 0x0008

	)

79 
	#SO_DONTROUTE
 0x0010

	)

80 
	#SO_BROADCAST
 0x0020

	)

81 
	#SO_USELOOPBACK
 0x0040

	)

82 
	#SO_LINGER
 0x0080

	)

83 
	#SO_OOBINLINE
 0x0100

	)

84 
	#SO_REUSEPORT
 0x0200

	)

86 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

91 
	#SO_SNDBUF
 0x1001

	)

92 
	#SO_RCVBUF
 0x1002

	)

93 
	#SO_SNDLOWAT
 0x1003

	)

94 
	#SO_RCVLOWAT
 0x1004

	)

95 
	#SO_SNDTIMEO
 0x1005

	)

96 
	#SO_RCVTIMEO
 0x1006

	)

97 
	#SO_ERROR
 0x1007

	)

98 
	#SO_TYPE
 0x1008

	)

99 
	#SO_CONTIMEO
 0x1009

	)

100 
	#SO_NO_CHECK
 0x100®

	)

106 
	slögî
 {

107 
l_⁄off
;

108 
l_lögî
;

114 
	#SOL_SOCKET
 0xff‡

	)

117 
	#AF_UNSPEC
 0

	)

118 
	#AF_INET
 2

	)

119 
	#PF_INET
 
AF_INET


	)

120 
	#PF_UNSPEC
 
AF_UNSPEC


	)

122 
	#IPPROTO_IP
 0

	)

123 
	#IPPROTO_TCP
 6

	)

124 
	#IPPROTO_UDP
 17

	)

125 
	#IPPROTO_UDPLITE
 136

	)

127 
	#INADDR_ANY
 0

	)

128 
	#INADDR_BROADCAST
 0xffffffff

	)

131 
	#MSG_PEEK
 0x01

	)

132 
	#MSG_WAITALL
 0x02

	)

133 
	#MSG_OOB
 0x04

	)

134 
	#MSG_DONTWAIT
 0x08

	)

135 
	#MSG_MORE
 0x10

	)

141 
	#IP_TOS
 1

	)

142 
	#IP_TTL
 2

	)

144 #i‡
LWIP_TCP


148 
	#TCP_NODELAY
 0x01

	)

149 
	#TCP_KEEPALIVE
 0x02

	)

150 
	#TCP_KEEPIDLE
 0x03

	)

151 
	#TCP_KEEPINTVL
 0x04

	)

152 
	#TCP_KEEPCNT
 0x05

	)

155 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


159 
	#UDPLITE_SEND_CSCOV
 0x01

	)

160 
	#UDPLITE_RECV_CSCOV
 0x02

	)

164 #i‡
LWIP_IGMP


168 
	#IP_ADD_MEMBERSHIP
 3

	)

169 
	#IP_DROP_MEMBERSHIP
 4

	)

170 
	#IP_MULTICAST_TTL
 5

	)

171 
	#IP_MULTICAST_IF
 6

	)

172 
	#IP_MULTICAST_LOOP
 7

	)

174 
	sù_mªq
 {

175 
ö_addr
 
imr_mu…üddr
;

176 
ö_addr
 
imr_öãrÁ˚
;

177 } 
	tù_mªq
;

196 
	#IPTOS_TOS_MASK
 0x1E

	)

197 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

198 
	#IPTOS_LOWDELAY
 0x10

	)

199 
	#IPTOS_THROUGHPUT
 0x08

	)

200 
	#IPTOS_RELIABILITY
 0x04

	)

201 
	#IPTOS_LOWCOST
 0x02

	)

202 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

213 
	#IPTOS_PREC_MASK
 0xe0

	)

214 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

215 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

216 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

217 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

218 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

219 
	#IPTOS_PREC_FLASH
 0x60

	)

220 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

221 
	#IPTOS_PREC_PRIORITY
 0x20

	)

222 
	#IPTOS_PREC_ROUTINE
 0x00

	)

235 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

236 
	#IOCPARM_MASK
 0x7fU

	)

237 
	#IOC_VOID
 0x20000000UL

	)

238 
	#IOC_OUT
 0x40000000UL

	)

239 
	#IOC_IN
 0x80000000UL

	)

240 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

243 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

245 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

247 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

250 #i‚de‡
FIONREAD


251 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

253 #i‚de‡
FIONBIO


254 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

258 #i‚de‡
SIOCSHIWAT


259 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

260 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

261 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

262 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

263 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

267 #i‚de‡
O_NONBLOCK


268 
	#O_NONBLOCK
 04000U

	)

272 #i‚de‡
FD_SET


273 #unde‡
FD_SETSIZE


275 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

276 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

277 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

278 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

279 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

281 
	sfd_£t
 {

282 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

283 } 
	tfd_£t
;

289 #i‚de‡
LWIP_TIMEVAL_PRIVATE


290 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

293 #i‡
LWIP_TIMEVAL_PRIVATE


294 
	stimevÆ
 {

295 
tv_£c
;

296 
tv_u£c
;

300 
lwù_sockë_öô
();

302 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

303 
lwù_böd
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

304 
lwù_shutdown
(
s
, 
how
);

305 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

306 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

307 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

308 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

309 
lwù_˛o£
(
s
);

310 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

311 
lwù_li°í
(
s
, 
backlog
);

312 
lwù_ªcv
(
s
, *
mem
, 
Àn
, 
Êags
);

313 
lwù_ªad
(
s
, *
mem
, 
Àn
);

314 
lwù_ªcv‰om
(
s
, *
mem
, 
Àn
, 
Êags
,

315 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

316 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
);

317 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size
, 
Êags
,

318 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

319 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

320 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size
);

321 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

322 
timevÆ
 *
timeout
);

323 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

325 #i‡
LWIP_COMPAT_SOCKETS


326 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

327 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

328 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

329 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

330 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

331 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

332 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

333 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

334 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

335 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

336 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

337 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

338 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

339 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

340 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

341 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

342 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

344 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


345 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

346 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

347 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

352 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mÀ√º
;

75 
STAT_COUNTER
 
	mchkîr
;

76 
STAT_COUNTER
 
	mv1_rxed
;

77 
STAT_COUNTER
 
	mjoö_£¡
;

78 
STAT_COUNTER
 
	mÀave_£¡
;

79 
STAT_COUNTER
 
	muniˇ°_quîy
;

80 
STAT_COUNTER
 
	mªp‹t_£¡
;

81 
STAT_COUNTER
 
	mªp‹t_rxed
;

82 
STAT_COUNTER
 
	mgroup_quîy_rxed
;

85 
	s°©s_mem
 {

86 
mem_size_t
 
	mavaû
;

87 
mem_size_t
 
	mu£d
;

88 
mem_size_t
 
	mmax
;

89 
STAT_COUNTER
 
	mîr
;

90 
STAT_COUNTER
 
	mûÀgÆ
;

93 
	s°©s_sy£Àm
 {

94 
STAT_COUNTER
 
	mu£d
;

95 
STAT_COUNTER
 
	mmax
;

96 
STAT_COUNTER
 
	mîr
;

99 
	s°©s_sys
 {

100 
°©s_sy£Àm
 
	m£m
;

101 
°©s_sy£Àm
 
	mmbox
;

104 
	s°©s_
 {

105 #i‡
LINK_STATS


106 
°©s_¥Ÿo
 
	mlök
;

108 #i‡
ETHARP_STATS


109 
°©s_¥Ÿo
 
	mëh¨p
;

111 #i‡
IPFRAG_STATS


112 
°©s_¥Ÿo
 
	mù_‰ag
;

114 #i‡
IP_STATS


115 
°©s_¥Ÿo
 
	mù
;

117 #i‡
ICMP_STATS


118 
°©s_¥Ÿo
 
	micmp
;

120 #i‡
IGMP_STATS


121 
°©s_igmp
 
	migmp
;

123 #i‡
UDP_STATS


124 
°©s_¥Ÿo
 
	mudp
;

126 #i‡
TCP_STATS


127 
°©s_¥Ÿo
 
	mt˝
;

129 #i‡
MEM_STATS


130 
°©s_mem
 
	mmem
;

132 #i‡
MEMP_STATS


133 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

135 #i‡
SYS_STATS


136 
°©s_sys
 
	msys
;

140 
°©s_
 
lwù_°©s
;

142 
	#°©s_öô
(Ë

	)

144 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

145 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

147 
	#°©s_öô
()

	)

148 
	#STATS_INC
(
x
)

	)

149 
	#STATS_DEC
(
x
)

	)

152 #i‡
TCP_STATS


153 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

154 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

156 
	#TCP_STATS_INC
(
x
)

	)

157 
	#TCP_STATS_DISPLAY
()

	)

160 #i‡
UDP_STATS


161 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

162 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

164 
	#UDP_STATS_INC
(
x
)

	)

165 
	#UDP_STATS_DISPLAY
()

	)

168 #i‡
ICMP_STATS


169 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

170 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

172 
	#ICMP_STATS_INC
(
x
)

	)

173 
	#ICMP_STATS_DISPLAY
()

	)

176 #i‡
IGMP_STATS


177 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

178 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

180 
	#IGMP_STATS_INC
(
x
)

	)

181 
	#IGMP_STATS_DISPLAY
()

	)

184 #i‡
IP_STATS


185 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

186 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

188 
	#IP_STATS_INC
(
x
)

	)

189 
	#IP_STATS_DISPLAY
()

	)

192 #i‡
IPFRAG_STATS


193 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

194 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

196 
	#IPFRAG_STATS_INC
(
x
)

	)

197 
	#IPFRAG_STATS_DISPLAY
()

	)

200 #i‡
ETHARP_STATS


201 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

202 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

204 
	#ETHARP_STATS_INC
(
x
)

	)

205 
	#ETHARP_STATS_DISPLAY
()

	)

208 #i‡
LINK_STATS


209 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

210 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

212 
	#LINK_STATS_INC
(
x
)

	)

213 
	#LINK_STATS_DISPLAY
()

	)

216 #i‡
MEM_STATS


217 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

218 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

219 
	#MEM_STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.
mem
.
u£d
 += y; \

220 i‡(
lwù_°©s
.
mem
.
max
 <Üwù_°©s.mem.
u£d
) { \

221 
lwù_°©s
.
mem
.
max
 =Üwù_°©s.mem.
u£d
; \

223 } 0)

	)

224 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

225 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

227 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

228 
	#MEM_STATS_INC
(
x
)

	)

229 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

230 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

231 
	#MEM_STATS_DISPLAY
()

	)

234 #i‡
MEMP_STATS


235 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

236 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

237 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

238 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ëdÿ{ ++
lwù_°©s
.
memp
[i].
u£d
; \

239 i‡(
lwù_°©s
.
memp
[
i
].
max
 <Üwù_°©s.memp[i].
u£d
) { \

240 
lwù_°©s
.
memp
[
i
].
max
 =Üwù_°©s.memp[i].
u£d
; \

242 } 0)

	)

243 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

245 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

246 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

247 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

248 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

249 
	#MEMP_STATS_DISPLAY
(
i
)

	)

252 #i‡
SYS_STATS


253 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

254 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

255 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

257 
	#SYS_STATS_INC
(
x
)

	)

258 
	#SYS_STATS_DEC
(
x
)

	)

259 
	#SYS_STATS_DISPLAY
()

	)

263 #i‡
LWIP_STATS_DISPLAY


264 
°©s_di•œy
();

265 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, *
«me
);

266 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

267 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, *
«me
);

268 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

269 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

271 
	#°©s_di•œy
()

	)

272 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

273 
	#°©s_di•œy_igmp
(
igmp
)

	)

274 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

275 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

276 
	#°©s_di•œy_sys
(
sys
)

	)

279 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_mbox_t
;

47 
u8_t
 
	tsys_¥Ÿ_t
;

48 
	ssys_timeo
 {
u8_t
 
	mdummy
;};

50 
	#sys_öô
()

	)

51 
	#sys_timeout
(
m
,
h
,
a
)

	)

52 
	#sys_u¡imeout
(
m
,
a
)

	)

53 
	#sys_£m_√w
(
c
Ë
	)
c

54 
	#sys_£m_sig«l
(
s
)

	)

55 
	#sys_£m_waô
(
s
)

	)

56 
	#sys_£m_waô_timeout
(
s
,
t
)

	)

57 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

58 
	#sys_£m_‰ì
(
s
)

	)

59 
	#sys_mbox_√w
(
s
Ë0

	)

60 
	#sys_mbox_„tch
(
m
,
d
)

	)

61 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

62 
	#sys_mbox_po°
(
m
,
d
)

	)

63 
	#sys_mbox_åypo°
(
m
,
d
)

	)

64 
	#sys_mbox_‰ì
(
m
)

	)

66 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

71 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

76 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

78 
	~"lwù/îr.h
"

79 
	~"¨ch/sys_¨ch.h
"

81 (* 
	tsys_timeout_h™dÀr
)(*
	t¨g
);

83 
	ssys_timeo
 {

84 
sys_timeo
 *
√xt
;

85 
u32_t
 
time
;

86 
sys_timeout_h™dÀr
 
h
;

87 *
¨g
;

90 
	ssys_timeouts
 {

91 
sys_timeo
 *
√xt
;

95 
	`sys_öô
();

106 
	`sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

107 
	`sys_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

108 
sys_timeouts
 *
	`sys_¨ch_timeouts
();

111 
sys_£m_t
 
	`sys_£m_√w
(
u8_t
 
cou¡
);

112 
	`sys_£m_sig«l
(
sys_£m_t
 
£m
);

113 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, u32_à
timeout
);

114 
	`sys_£m_‰ì
(
sys_£m_t
 
£m
);

115 
	`sys_£m_waô
(
sys_£m_t
 
£m
);

116 
	`sys_£m_waô_timeout
(
sys_£m_t
 
£m
, 
u32_t
 
timeout
);

119 #i‚de‡
sys_m¶ìp


120 
	`sys_m¶ìp
(
u32_t
 
ms
);

122 #i‚de‡
sys_jiffõs


123 
u32_t
 
	`sys_jiffõs
();

127 
sys_mbox_t
 
	`sys_mbox_√w
(
size
);

128 
	`sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
);

129 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
);

130 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, u32_à
timeout
);

131 #i‚de‡
sys_¨ch_mbox_åy„tch


132 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
);

135 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

136 
	`sys_mbox_‰ì
(
sys_mbox_t
 
mbox
);

137 
	`sys_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
);

140 
sys_thªad_t
 
	`sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *¨g, 
°acksize
, 
¥io
);

145 
	`sys_now
();

154 #i‚de‡
SYS_ARCH_PROTECT


160 #i‡
SYS_LIGHTWEIGHT_PROT


167 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

177 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

186 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

187 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

188 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

192 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

193 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

194 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

205 #i‚de‡
SYS_ARCH_INC


206 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

207 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

208 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

209 
v¨
 +
vÆ
; \

210 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

211 } 0)

	)

214 #i‚de‡
SYS_ARCH_DEC


215 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

216 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

217 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

218 
v¨
 -
vÆ
; \

219 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

220 } 0)

	)

223 #i‚de‡
SYS_ARCH_GET


224 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

225 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

226 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

227 
ªt
 = 
v¨
; \

228 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

229 } 0)

	)

232 #i‚de‡
SYS_ARCH_SET


233 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

234 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

235 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

236 
v¨
 = 
vÆ
; \

237 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

238 } 0)

	)

242 #ifde‡
__˝lu•lus


243 
	}
}

	@net/lwip/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/sys.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


50 
t˝_pcb
;

55 
	#t˝_öô
(Ë

	)

56 
t˝_tmr
 ();

60 
t˝_pcb
 * 
t˝_√w
 ();

61 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

63 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

64 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
,

65 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,

66 
îr_t
 
îr
));

67 
t˝_ªcv
 (
t˝_pcb
 *
pcb
,

68 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
çcb
,

69 
pbuf
 *
p
, 
îr_t
 
îr
));

70 
t˝_£¡
 (
t˝_pcb
 *
pcb
,

71 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
çcb
,

72 
u16_t
 
Àn
));

73 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
,

74 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
çcb
),

75 
u8_t
 
öãrvÆ
);

76 
t˝_îr
 (
t˝_pcb
 *
pcb
,

77 (* 
îr
)(*
¨g
, 
îr_t
Érr));

79 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

80 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

82 #i‡
TCP_LISTEN_BACKLOG


83 
	#t˝_ac˚±ed
(
pcb
Ë(((
t˝_pcb_li°í
 *)’cb))->
ac˚±s_≥ndög
--)

	)

85 
	#t˝_ac˚±ed
(
pcb
)

	)

88 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

89 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

90 
u16_t
 
p‹t
);

91 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

92 
u16_t
 
p‹t
, 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
,

93 
t˝_pcb
 *
çcb
,

94 
îr_t
 
îr
));

96 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

97 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

99 
t˝_ab‹t
 (
t˝_pcb
 *
pcb
);

100 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

103 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

104 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

106 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

107 
u8_t
 
≠iÊags
);

109 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

111 
	#TCP_PRIO_MIN
 1

	)

112 
	#TCP_PRIO_NORMAL
 64

	)

113 
	#TCP_PRIO_MAX
 127

	)

117 
t˝_¶owtmr
 ();

118 
t˝_Á°tmr
 ();

122 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

124 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

125 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

126 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

134 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

135 ((
çcb
)->
Êags
 & 
TF_NODELAY
) || \

136 (((
çcb
)->
un£¡
 !
NULL
Ë&& (—pcb)->un£¡->
√xt
 != NULL))) ? \

137 1 : 0)

	)

138 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

142 
	#TCP_BUILD_MSS_OPTION
(Ë
	`ht⁄l
(((
u32_t
)2 << 24) | \

143 ((
u32_t
)4 << 16) | \

144 (((
u32_t
)
TCP_MSS
 / 256) << 8) | \

145 (
TCP_MSS
 & 255))

	)

147 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë< 0)

	)

148 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë<0)

	)

149 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë> 0)

	)

150 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)(◊)-(b)Ë>0)

	)

153 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

155 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

156 
	#TCP_FIN
 0x01U

	)

157 
	#TCP_SYN
 0x02U

	)

158 
	#TCP_RST
 0x04U

	)

159 
	#TCP_PSH
 0x08U

	)

160 
	#TCP_ACK
 0x10U

	)

161 
	#TCP_URG
 0x20U

	)

162 
	#TCP_ECE
 0x40U

	)

163 
	#TCP_CWR
 0x80U

	)

165 
	#TCP_FLAGS
 0x3fU

	)

168 
	#TCP_HLEN
 20

	)

170 #i‚de‡
TCP_TMR_INTERVAL


171 
	#TCP_TMR_INTERVAL
 250

	)

174 #i‚de‡
TCP_FAST_INTERVAL


175 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

178 #i‚de‡
TCP_SLOW_INTERVAL


179 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

182 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

183 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

185 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

187 #i‚de‡
TCP_MSL


188 
	#TCP_MSL
 60000U

	)

192 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


193 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

196 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


197 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

200 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


201 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

204 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

209 #ifde‡
PACK_STRUCT_USE_INCLUDES


210 
	~"¨ch/bp°ru˘.h
"

212 
PACK_STRUCT_BEGIN


213 
	st˝_hdr
 {

214 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

215 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

216 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

217 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

218 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

219 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

220 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

221 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

222 } 
PACK_STRUCT_STRUCT
;

223 
PACK_STRUCT_END


224 #ifde‡
PACK_STRUCT_USE_INCLUDES


225 
	~"¨ch/ï°ru˘.h
"

228 
	#TCPH_OFFSET
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 8)

	)

229 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

230 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

232 
	#TCPH_OFFSET_SET
(
phdr
, 
off£t
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(((off£tË<< 8Ë| 
	`TCPH_FLAGS
’hdr))

	)

233 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

234 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË& ~
TCP_FLAGS
Ë| (Êags))

	)

235 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (Êags))

	)

236 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

238 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& 
TCP_FIN
 || \

239 
	`TCPH_FLAGS
((
£g
)->
t˝hdr
Ë& 
TCP_SYN
)? 1: 0))

	)

241 
	et˝_°©e
 {

242 
CLOSED
 = 0,

243 
LISTEN
 = 1,

244 
SYN_SENT
 = 2,

245 
SYN_RCVD
 = 3,

246 
ESTABLISHED
 = 4,

247 
FIN_WAIT_1
 = 5,

248 
FIN_WAIT_2
 = 6,

249 
CLOSE_WAIT
 = 7,

250 
CLOSING
 = 8,

251 
LAST_ACK
 = 9,

252 
TIME_WAIT
 = 10

257 
	#TF_RESET
 (
u8_t
)0x08U

	)

258 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

259 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

264 
	#TCP_PCB_COMMON
(
ty≥
) \

265 
ty≥
 *
√xt
; \

266 
t˝_°©e
 
°©e
; \

267 
u8_t
 
¥io
; \

268 *
ˇŒback_¨g
; \

270 
u16_t
 
loˇl_p‹t


	)

273 
	st˝_pcb
 {

275 
IP_PCB
;

277 
TCP_PCB_COMMON
(
t˝_pcb
);

280 
u16_t
 
ªmŸe_p‹t
;

282 
u8_t
 
Êags
;

283 
	#TF_ACK_DELAY
 (
u8_t
)0x01U

	)

284 
	#TF_ACK_NOW
 (
u8_t
)0x02U

	)

285 
	#TF_INFR
 (
u8_t
)0x04U

	)

286 
	#TF_FIN
 (
u8_t
)0x20U

	)

287 
	#TF_NODELAY
 (
u8_t
)0x40U

	)

288 
	#TF_NAGLEMEMERR
 (
u8_t
)0x80U

	)

293 
u32_t
 
rcv_nxt
;

294 
u16_t
 
rcv_wnd
;

295 
u16_t
 
rcv_™n_wnd
;

298 
u32_t
 
tmr
;

299 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

302 
s16_t
 
πime
;

304 
u16_t
 
mss
;

307 
u32_t
 
πã°
;

308 
u32_t
 
π£q
;

309 
s16_t
 
ß
, 
sv
;

311 
s16_t
 
πo
;

312 
u8_t
 
ƒtx
;

315 
u32_t
 
œ°ack
;

316 
u8_t
 
du∑cks
;

319 
u16_t
 
cwnd
;

320 
u16_t
 
s°hªsh
;

323 
u32_t
 
¢d_nxt
,

324 
¢d_max
;

325 
u16_t
 
¢d_wnd
;

326 
u32_t
 
¢d_wl1
, 
¢d_wl2
,

328 
¢d_lbb
;

330 
u16_t
 
acked
;

332 
u16_t
 
¢d_buf
;

333 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffff-3)

	)

334 
u16_t
 
¢d_queuñí
;

338 
t˝_£g
 *
un£¡
;

339 
t˝_£g
 *
u«cked
;

340 #i‡
TCP_QUEUE_OOSEQ


341 
t˝_£g
 *
oo£q
;

344 
pbuf
 *
ªfu£d_d©a
;

346 #i‡
LWIP_CALLBACK_API


353 
îr_t
 (* 
£¡
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
u16_t
 
•a˚
);

362 
îr_t
 (* 
ªcv
)(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

370 
îr_t
 (* 
c⁄√˘ed
)(*
¨g
, 
t˝_pcb
 *
pcb
,Éº_à
îr
);

379 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,Éº_à
îr
);

388 
îr_t
 (* 
pﬁl
)(*
¨g
, 
t˝_pcb
 *
pcb
);

398 (* 
îrf
)(*
¨g
, 
îr_t
 
îr
);

402 
u32_t
 
kìp_idÀ
;

403 #i‡
LWIP_TCP_KEEPALIVE


404 
u32_t
 
kìp_ötvl
;

405 
u32_t
 
kìp_˙t
;

409 
u32_t
 
≥rsi°_˙t
;

411 
u8_t
 
≥rsi°_backoff
;

414 
u8_t
 
kìp_˙t_£¡
;

417 
	st˝_pcb_li°í
 {

419 
IP_PCB
;

421 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

423 #i‡
LWIP_CALLBACK_API


431 
îr_t
 (* 
ac˚±
)(*
¨g
, 
t˝_pcb
 *
√wpcb
,Éº_à
îr
);

433 #i‡
TCP_LISTEN_BACKLOG


434 
u8_t
 
backlog
;

435 
u8_t
 
ac˚±s_≥ndög
;

439 #i‡
LWIP_EVENT_API


441 
	elwù_evít
 {

442 
LWIP_EVENT_ACCEPT
,

443 
LWIP_EVENT_SENT
,

444 
LWIP_EVENT_RECV
,

445 
LWIP_EVENT_CONNECTED
,

446 
LWIP_EVENT_POLL
,

447 
LWIP_EVENT_ERR


450 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

451 
lwù_evít
,

452 
pbuf
 *
p
,

453 
u16_t
 
size
,

454 
îr_t
 
îr
);

456 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

457 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

458 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

459 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

460 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

461 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

462 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

463 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

464 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

465 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

466 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

467 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

469 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

470 if((
pcb
)->
ac˚±
 !
NULL
) \

471 (
ªt
 = (
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)))

	)

472 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

473 if((
pcb
)->
£¡
 !
NULL
) \

474 (
ªt
 = (
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)))

	)

475 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

476 if((
pcb
)->
ªcv
 !
NULL
) \

477 { 
ªt
 = (
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
)); } { \

478 
ªt
 = 
ERR_OK
; \

479 i‡(
p
Ë
	`pbuf_‰ì
’); }

	)

480 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

481 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

482 (
ªt
 = (
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)))

	)

483 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

484 if((
pcb
)->
pﬁl
 !
NULL
) \

485 (
ªt
 = (
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,’cb)))

	)

486 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

487 if((
îrf
Ë!
NULL
) \

488 (
îrf
)((
¨g
),(
îr
))

	)

492 
	st˝_£g
 {

493 
t˝_£g
 *
√xt
;

494 
pbuf
 *
p
;

495 *
d©≠å
;

496 
u16_t
 
Àn
;

497 
t˝_hdr
 *
t˝hdr
;

501 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

502 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

503 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

505 
u8_t
 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

506 
u8_t
 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

507 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

509 
	#t˝_ack
(
pcb
Ëif(’cb)->
Êags
 & 
TF_ACK_DELAY
) { \

510 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

511 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

512 
	`t˝_ouçut
(
pcb
); \

514 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

515 }

	)

517 
	#t˝_ack_now
(
pcb
Ë’cb)->
Êags
 |
TF_ACK_NOW
; \

518 
	`t˝_ouçut
(
pcb
)

	)

520 
îr_t
 
t˝_£nd_˘æ
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

521 
îr_t
 
t˝_íqueue
(
t˝_pcb
 *
pcb
, *
d©≠å
, 
u16_t
 
Àn
,

522 
u8_t
 
Êags
, u8_à
≠iÊags
,

523 
u8_t
 *
›td©a
, u8_à
›éí
);

525 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

527 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

528 
ù_addr
 *
loˇl_ù
, ù_add∏*
ªmŸe_ù
,

529 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

531 
u32_t
 
t˝_√xt_iss
();

533 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

534 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

536 #i‡
TCP_CALCULATE_EFF_SEND_MSS


537 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr
 *
addr
);

540 
t˝_pcb
 *
t˝_öput_pcb
;

541 
u32_t
 
t˝_ticks
;

543 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


544 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

545 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

546 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

547 
t˝_debug_¥öt_pcbs
();

548 
s16_t
 
t˝_pcbs_ß√
();

550 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

551 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

552 
	#t˝_debug_¥öt_°©e
(
s
)

	)

553 
	#t˝_debug_¥öt_pcbs
()

	)

554 
	#t˝_pcbs_ß√
(Ë1

	)

557 #i‡
NO_SYS


558 
	#t˝_timî_√eded
()

	)

560 
t˝_timî_√eded
();

564 
	ut˝_li°í_pcbs_t
 {

565 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

566 
t˝_pcb
 *
	gpcbs
;

568 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

569 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

572 
t˝_pcb
 *
t˝_tw_pcbs
;

574 
t˝_pcb
 *
t˝_tmp_pcb
;

586 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

587 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", 
≈cb
,Çpcb->
loˇl_p‹t
)); \

588 
t˝_tmp_pcb
 = *
pcbs
; \

589 
t˝_tmp_pcb
 !
NULL
; \

590 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

591 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !
≈cb
); \

593 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", 
≈cb
->
°©e
 !
CLOSED
); \

594 
≈cb
->
√xt
 = *
pcbs
; \

595 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", 
≈cb
->
√xt
 !=Çpcb); \

596 *(
pcbs
Ë
≈cb
; \

597 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

598 
	`t˝_timî_√eded
(); \

599 } 0)

	)

600 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

601 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *
pcbs
 !
NULL
); \

602 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

603 if(*
pcbs
 =
≈cb
) { \

604 *
pcbs
 = (*pcbs)->
√xt
; \

605 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

606 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

607 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

611 
≈cb
->
√xt
 = 
NULL
; \

612 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

613 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", 
≈cb
, *
pcbs
)); \

614 } 0)

	)

617 
	#TCP_REG
(
pcbs
, 
≈cb
) do { \

618 
≈cb
->
√xt
 = *
pcbs
; \

619 *(
pcbs
Ë
≈cb
; \

620 
	`t˝_timî_√eded
(); \

621 } 0)

	)

622 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

623 if(*(
pcbs
Ë=
≈cb
) { \

624 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

625 } 
t˝_tmp_pcb
 = *
pcbs
;Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

626 if(
t˝_tmp_pcb
->
√xt
 !
NULL
 &&Å˝_tmp_pcb->√xà=
≈cb
) { \

627 
t˝_tmp_pcb
->
√xt
 = 
≈cb
->next; \

631 
≈cb
->
√xt
 = 
NULL
; \

632 } 0)

	)

635 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

45 #ifde‡
__˝lu•lus


49 #i‡
LWIP_TCPIP_CORE_LOCKING


51 
sys_£m_t
 
lock_t˝ù_c‹e
;

52 
	#LOCK_TCPIP_CORE
(Ë
	`sys_£m_waô
(
lock_t˝ù_c‹e
)

	)

53 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_£m_sig«l
(
lock_t˝ù_c‹e
)

	)

54 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

55 
	#TCPIP_APIMSG_ACK
(
m
)

	)

56 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

57 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

59 
	#LOCK_TCPIP_CORE
()

	)

60 
	#UNLOCK_TCPIP_CORE
()

	)

61 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

62 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
c⁄n
->
›_com∂ëed
)

	)

63 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

64 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(m->
£m
)

	)

67 
t˝ù_öô
((* 
t˝ù_öô_d⁄e
)(*), *
¨g
);

69 #i‡
LWIP_NETCONN


70 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

71 #i‡
LWIP_TCPIP_CORE_LOCKING


72 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

76 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

78 #i‡
LWIP_NETIF_API


79 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

80 #i‡
LWIP_TCPIP_CORE_LOCKING


81 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

85 
îr_t
 
t˝ù_ˇŒback_wôh_block
((*
f
)(*
˘x
), *˘x, 
u8_t
 
block
);

86 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

89 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

90 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

92 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

93 
	#t˝ù_u¡imeout
(
h
, 
¨g
Ë
	`t˝ù_timeout
(0xffffffff, h,árg)

	)

95 
	et˝ù_msg_ty≥
 {

96 #i‡
LWIP_NETCONN


97 
	gTCPIP_MSG_API
,

99 
	gTCPIP_MSG_INPKT
,

100 #i‡
LWIP_NETIF_API


101 
	gTCPIP_MSG_NETIFAPI
,

103 
	gTCPIP_MSG_CALLBACK
,

104 
	gTCPIP_MSG_TIMEOUT


107 
	st˝ù_msg
 {

108 
t˝ù_msg_ty≥
 
	gty≥
;

109 
sys_£m_t
 *
	g£m
;

111 #i‡
LWIP_NETCONN


112 
≠i_msg
 *
	g≠imsg
;

114 #i‡
LWIP_NETIF_API


115 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

118 
pbuf
 *
	gp
;

119 
√tif
 *
	g√tif
;

120 } 
	göp
;

122 (*
	gf
)(*
	g˘x
);

123 *
	g˘x
;

124 } 
	gcb
;

126 
u32_t
 
	gm£cs
;

127 
sys_timeout_h™dÀr
 
	gh
;

128 *
	g¨g
;

129 } 
	gtmo
;

130 } 
	gmsg
;

133 #ifde‡
__˝lu•lus


	@net/lwip/include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

70 
	sudp_pcb
 {

72 
IP_PCB
;

76 
udp_pcb
 *
√xt
;

78 
u8_t
 
Êags
;

80 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

82 #i‡
LWIP_IGMP


84 
ù_addr
 
mu…iˇ°_ù
;

87 #i‡
LWIP_UDPLITE


89 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

103 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

104 
ù_addr
 *
addr
, 
u16_t
 
p‹t
);

106 *
ªcv_¨g
;

109 
udp_pcb
 *
udp_pcbs
;

113 
udp_pcb
 * 
udp_√w
 ();

114 
udp_ªmove
 (
udp_pcb
 *
pcb
);

115 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

116 
u16_t
 
p‹t
);

117 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr
 *
ùaddr
,

118 
u16_t
 
p‹t
);

119 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

120 
udp_ªcv
 (
udp_pcb
 *
pcb
,

121 (* 
ªcv
)(*
¨g
, 
udp_pcb
 *
upcb
,

122 
pbuf
 *
p
,

123 
ù_addr
 *
addr
,

124 
u16_t
 
p‹t
),

125 *
ªcv_¨g
);

126 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif);

127 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

128 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

130 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

131 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

134 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

136 
	#udp_öô
(Ë

	)

138 #i‡
UDP_DEBUG


139 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

141 
	#udp_debug_¥öt
(
udphdr
)

	)

144 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETH_PAD_SIZE


52 
	#ETH_PAD_SIZE
 0

	)

55 #i‚de‡
ETHARP_HWADDR_LEN


56 
	#ETHARP_HWADDR_LEN
 6

	)

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sëh_addr
 {

64 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sëh_hdr
 {

76 #i‡
ETH_PAD_SIZE


77 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

79 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

80 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

82 } 
PACK_STRUCT_STRUCT
;

83 
PACK_STRUCT_END


84 #ifde‡
PACK_STRUCT_USE_INCLUDES


85 
	~"¨ch/ï°ru˘.h
"

88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/bp°ru˘.h
"

91 
PACK_STRUCT_BEGIN


93 
	sëh¨p_hdr
 {

94 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëhhdr
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

97 
PACK_STRUCT_FIELD
(
u16_t
 
_hwÀn_¥Ÿﬁí
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

99 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

100 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

101 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

102 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

103 } 
PACK_STRUCT_STRUCT
;

104 
PACK_STRUCT_END


105 #ifde‡
PACK_STRUCT_USE_INCLUDES


106 
	~"¨ch/ï°ru˘.h
"

109 #ifde‡
PACK_STRUCT_USE_INCLUDES


110 
	~"¨ch/bp°ru˘.h
"

112 
PACK_STRUCT_BEGIN


113 
	sëhù_hdr
 {

114 
PACK_STRUCT_FIELD
(
ëh_hdr
 
ëh
);

115 
PACK_STRUCT_FIELD
(
ù_hdr
 
ù
);

116 } 
PACK_STRUCT_STRUCT
;

117 
PACK_STRUCT_END


118 #ifde‡
PACK_STRUCT_USE_INCLUDES


119 
	~"¨ch/ï°ru˘.h
"

123 
	#ARP_TMR_INTERVAL
 5000

	)

125 
	#ETHTYPE_ARP
 0x0806

	)

126 
	#ETHTYPE_IP
 0x0800

	)

127 
	#ETHTYPE_PPPOEDISC
 0x8863

	)

128 
	#ETHTYPE_PPPOE
 0x8864

	)

131 
	#ARP_REQUEST
 1

	)

132 
	#ARP_REPLY
 2

	)

134 #i‡
ARP_QUEUEING


138 
	sëh¨p_q_íåy
 {

139 
ëh¨p_q_íåy
 *
√xt
;

140 
pbuf
 *
p
;

144 
	#ëh¨p_öô
(Ë

	)

145 
ëh¨p_tmr
();

146 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

147 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
);

148 
ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

149 
ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
,

150 
pbuf
 *
p
);

151 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
);

152 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
);

153 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
);

155 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

157 #i‡
LWIP_AUTOIP


158 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

159 c⁄° 
ëh_addr
 *
ëhd°_addr
,

160 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

161 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

162 c⁄° 
u16_t
 
›code
);

165 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

167 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

169 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/loopif.h

32 #i‚de‡
__NETIF_LOOPIF_H__


33 
	#__NETIF_LOOPIF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


43 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


44 
	#lo›if_pﬁl
 
√tif_pﬁl


	)

47 
îr_t
 
lo›if_öô
(
√tif
 *netif);

49 #ifde‡
__˝lu•lus


	@net/lwip/include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 #ifde‡
PACK_STRUCT_USE_INCLUDES


78 
	~"¨ch/bp°ru˘.h
"

80 
PACK_STRUCT_BEGIN


81 
	sµp€hdr
 {

82 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

83 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

85 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

86 } 
	gPACK_STRUCT_STRUCT
;

87 
	gPACK_STRUCT_END


88 #ifde‡
PACK_STRUCT_USE_INCLUDES


89 
	~"¨ch/ï°ru˘.h
"

92 #ifde‡
PACK_STRUCT_USE_INCLUDES


93 
	~"¨ch/bp°ru˘.h
"

95 
PACK_STRUCT_BEGIN


96 
	sµp€èg
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

99 } 
	gPACK_STRUCT_STRUCT
;

100 
	gPACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

106 
	#PPPOE_STATE_INITIAL
 0

	)

107 
	#PPPOE_STATE_PADI_SENT
 1

	)

108 
	#PPPOE_STATE_PADR_SENT
 2

	)

109 
	#PPPOE_STATE_SESSION
 3

	)

110 
	#PPPOE_STATE_CLOSING
 4

	)

112 
	#PPPOE_STATE_PADO_SENT
 1

	)

114 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

115 
	#PPPOE_VERTYPE
 0x11

	)

117 
	#PPPOE_TAG_EOL
 0x0000

	)

118 
	#PPPOE_TAG_SNAME
 0x0101

	)

119 
	#PPPOE_TAG_ACNAME
 0x0102

	)

120 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

121 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

122 
	#PPPOE_TAG_VENDOR
 0x0105

	)

123 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

124 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

125 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

126 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

128 
	#PPPOE_CODE_PADI
 0x09

	)

129 
	#PPPOE_CODE_PADO
 0x07

	)

130 
	#PPPOE_CODE_PADR
 0x19

	)

131 
	#PPPOE_CODE_PADS
 0x65

	)

132 
	#PPPOE_CODE_PADT
 0xA7

	)

134 #i‚de‡
ETHERMTU


135 
	#ETHERMTU
 1500

	)

139 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

141 
	gµp€_so·c
;

144 
µp€_öô
();

146 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

147 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

149 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

150 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

152 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

153 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

155 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

157 
µp€_hdæí
;

	@net/lwip/include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/√tif.h
"

39 #ifde‡
__˝lu•lus


43 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

45 #ifde‡
__˝lu•lus


	@net/lwip/jos/arch/cc.h

1 #i‚de‡
LWIP_ARCH_CC_H


2 
	#LWIP_ARCH_CC_H


	)

4 
	~<öc/ty≥s.h
>

5 
	~<öc/as£π.h
>

7 
uöt32_t
 
	tu32_t
;

8 
öt32_t
 
	ts32_t
;

10 
uöt64_t
 
	tu64_t
;

11 
öt64_t
 
	ts64_t
;

13 
uöt16_t
 
	tu16_t
;

14 
öt16_t
 
	ts16_t
;

16 
uöt8_t
 
	tu8_t
;

17 
öt8_t
 
	ts8_t
;

19 
uöçå_t
 
	tmem_±r_t
;

21 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

22 
	#PACK_STRUCT_STRUCT


	)

23 
	#PACK_STRUCT_BEGIN


	)

24 
	#PACK_STRUCT_END


	)

26 
	#S16_F
 "d"

	)

27 
	#U16_F
 "u"

	)

28 
	#X16_F
 "x"

	)

30 
	#S32_F
 "d"

	)

31 
	#U32_F
 "u"

	)

32 
	#X32_F
 "x"

	)

34 
	#LWIP_PLATFORM_DIAG
(
x
Ë
˝rötf
 
	)
x

35 
	#LWIP_PLATFORM_ASSERT
(
x
Ë
	`∑nic
(x)

	)

37 #i‚de‡
BYTE_ORDER


38 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

	@net/lwip/jos/arch/i386/setjmp.h

1 #i‚de‡
JOS_MACHINE_SETJMP_H


2 
	#JOS_MACHINE_SETJMP_H


	)

4 
	~<öc/ty≥s.h
>

6 
	#JOS_LONGJMP_GCCATTR
 
	`ªg∑rm
(2)

	)

8 
	sjos_jmp_buf
 {

9 
uöt32_t
 
	mjb_eù
;

10 
uöt32_t
 
	mjb_e•
;

11 
uöt32_t
 
	mjb_ebp
;

12 
uöt32_t
 
	mjb_ebx
;

13 
uöt32_t
 
	mjb_esi
;

14 
uöt32_t
 
	mjb_edi
;

	@net/lwip/jos/arch/perf.h

1 #i‚de‡
LWIP_ARCH_PERF_H


2 
	#LWIP_ARCH_PERF_H


	)

4 
	#PERF_START


	)

5 
	#PERF_STOP
(
x
)

	)

	@net/lwip/jos/arch/perror.c

2 
	#LWIP_PROVIDE_ERRNO


	)

3 
	~<¨ch/≥º‹.h
>

4 
	~<lwù/¨ch.h
>

6 c⁄° *
	gsys_îæi°
[] = {

7 [
EPERM
] = "EPERM",

8 [
ENOENT
] = "ENOENT",

9 [
ESRCH
] = "ESRCH",

10 [
EINTR
] = "EINTR",

11 [
EIO
] = "EIO",

12 [
ENXIO
] = "ENXIO",

13 [
E2BIG
] = "E2BIG",

14 [
ENOEXEC
] = "ENOEXEC",

15 [
EBADF
] = "EBADF",

16 [
ECHILD
] = "ECHILD",

17 [
EAGAIN
] = "EAGAIN",

18 [
ENOMEM
] = "ENOMEM",

19 [
EACCES
] = "EACCES",

20 [
EFAULT
] = "EFAULT",

21 [
ENOTBLK
] = "ENOTBLK",

22 [
EBUSY
] = "EBUSY",

23 [
EEXIST
] = "EEXIST",

24 [
EXDEV
] = "EXDEV",

25 [
ENODEV
] = "ENODEV",

26 [
ENOTDIR
] = "ENOTDIR",

27 [
EISDIR
] = "EISDIR",

28 [
EINVAL
] = "EINVAL",

29 [
ENFILE
] = "ENFILE",

30 [
EMFILE
] = "EMFILE",

31 [
ENOTTY
] = "ENOTTY",

32 [
ETXTBSY
] = "ETXTBSY",

33 [
EFBIG
] = "EFBIG",

34 [
ENOSPC
] = "ENOSPC",

35 [
ESPIPE
] = "ESPIPE",

36 [
EROFS
] = "EROFS",

37 [
EMLINK
] = "EMLINK",

38 [
EPIPE
] = "EPIPE",

39 [
EDOM
] = "EDOM",

40 [
ERANGE
] = "ERANGE",

41 [
EDEADLK
] = "EDEADLK",

42 [
ENAMETOOLONG
] = "ENAMETOOLONG",

43 [
ENOLCK
] = "ENOLCK",

44 [
ENOSYS
] = "ENOSYS",

45 [
ENOTEMPTY
] = "ENOTEMPTY",

46 [
ELOOP
] = "ELOOP",

47 [
EWOULDBLOCK
] = "EWOULDBLOCK",

48 [
ENOMSG
] = "ENOMSG",

49 [
EIDRM
] = "EIDRM",

50 [
ECHRNG
] = "ECHRNG",

51 [
EL2NSYNC
] = "EL2NSYNC",

52 [
EL3HLT
] = "EL3HLT",

53 [
EL3RST
] = "EL3RST",

54 [
ELNRNG
] = "ELNRNG",

55 [
EUNATCH
] = "EUNATCH",

56 [
ENOCSI
] = "ENOCSI",

57 [
EL2HLT
] = "EL2HLT",

58 [
EBADE
] = "EBADE",

59 [
EBADR
] = "EBADR",

60 [
EXFULL
] = "EXFULL",

61 [
ENOANO
] = "ENOANO",

62 [
EBADRQC
] = "EBADRQC",

63 [
EBADSLT
] = "EBADSLT",

65 [
EDEADLOCK
] = "EDEADLOCK",

67 [
EBFONT
] = "EBFONT",

68 [
ENOSTR
] = "ENOSTR",

69 [
ENODATA
] = "ENODATA",

70 [
ETIME
] = "ETIME",

71 [
ENOSR
] = "ENOSR",

72 [
ENONET
] = "ENONET",

73 [
ENOPKG
] = "ENOPKG",

74 [
EREMOTE
] = "EREMOTE",

75 [
ENOLINK
] = "ENOLINK",

76 [
EADV
] = "EADV",

77 [
ESRMNT
] = "ESRMNT",

78 [
ECOMM
] = "ECOMM",

79 [
EPROTO
] = "EPROTO",

80 [
EMULTIHOP
] = "EMULTIHOP",

81 [
EDOTDOT
] = "EDOTDOT",

82 [
EBADMSG
] = "EBADMSG",

83 [
EOVERFLOW
] = "EOVERFLOW",

84 [
ENOTUNIQ
] = "ENOTUNIQ",

85 [
EBADFD
] = "EBADFD",

86 [
EREMCHG
] = "EREMCHG",

87 [
ELIBACC
] = "ELIBACC",

88 [
ELIBBAD
] = "ELIBBAD",

89 [
ELIBSCN
] = "ELIBSCN",

90 [
ELIBMAX
] = "ELIBMAX",

91 [
ELIBEXEC
] = "ELIBEXEC",

92 [
EILSEQ
] = "EILSEQ",

93 [
ERESTART
] = "ERESTART",

94 [
ESTRPIPE
] = "ESTRPIPE",

95 [
EUSERS
] = "EUSERS",

96 [
ENOTSOCK
] = "ENOTSOCK",

97 [
EDESTADDRREQ
] = "EDESTADDRREQ",

98 [
EMSGSIZE
] = "EMSGSIZE",

99 [
EPROTOTYPE
] = "EPROTOTYPE",

100 [
ENOPROTOOPT
] = "ENOPROTOOPT",

101 [
EPROTONOSUPPORT
] = "EPROTONOSUPPORT",

102 [
ESOCKTNOSUPPORT
] = "ESOCKTNOSUPPORT",

103 [
EOPNOTSUPP
] = "EOPNOTSUPP",

104 [
EPFNOSUPPORT
] = "EPFNOSUPPORT",

105 [
EAFNOSUPPORT
] = "EAFNOSUPPORT",

106 [
EADDRINUSE
] = "EADDRINUSE",

107 [
EADDRNOTAVAIL
] = "EADDRNOTAVAIL",

108 [
ENETDOWN
] = "ENETDOWN",

109 [
ENETUNREACH
] = "ENETUNREACH",

110 [
ENETRESET
] = "ENETRESET",

111 [
ECONNABORTED
] = "ECONNABORTED",

112 [
ECONNRESET
] = "ECONNRESET",

113 [
ENOBUFS
] = "ENOBUFS",

114 [
EISCONN
] = "EISCONN",

115 [
ENOTCONN
] = "ENOTCONN",

116 [
ESHUTDOWN
] = "ESHUTDOWN",

117 [
ETOOMANYREFS
] = "ETOOMANYREFS",

118 [
ETIMEDOUT
] = "ETIMEDOUT",

119 [
ECONNREFUSED
] = "ECONNREFUSED",

120 [
EHOSTDOWN
] = "EHOSTDOWN",

121 [
EHOSTUNREACH
] = "EHOSTUNREACH",

122 [
EALREADY
] = "EALREADY",

123 [
EINPROGRESS
] = "EINPROGRESS",

124 [
ESTALE
] = "ESTALE",

125 [
EUCLEAN
] = "EUCLEAN",

126 [
ENOTNAM
] = "ENOTNAM",

127 [
ENAVAIL
] = "ENAVAIL",

128 [
EISNAM
] = "EISNAM",

129 [
EREMOTEIO
] = "EREMOTEIO",

130 [
EDQUOT
] = "EDQUOT",

132 [
ENOMEDIUM
] = "ENOMEDIUM",

133 [
EMEDIUMTYPE
] = "EMEDIUMTYPE",

136 [
ENSROK
] = "ENSROK",

137 [
ENSRNODATA
] = "ENSRNODATA",

138 [
ENSRFORMERR
] = "ENSRFORMERR",

139 [
ENSRSERVFAIL
] = "ENSRSERVFAIL",

140 [
ENSRNOTFOUND
] = "ENSRNOTFOUND",

141 [
ENSRNOTIMP
] = "ENSRNOTIMP",

142 [
ENSRREFUSED
] = "ENSRREFUSED",

143 [
ENSRBADQUERY
] = "ENSRBADQUERY",

144 [
ENSRBADNAME
] = "ENSRBADNAME",

145 [
ENSRBADFAMILY
] = "ENSRBADFAMILY",

146 [
ENSRBADRESP
] = "ENSRBADRESP",

147 [
ENSRCONNREFUSED
] = "ENSRCONNREFUSED",

148 [
ENSRTIMEOUT
] = "ENSRTIMEOUT",

149 [
ENSROF
] = "ENSROF",

150 [
ENSRFILE
] = "ENSRFILE",

151 [
ENSRNOMEM
] = "ENSRNOMEM",

152 [
ENSRDESTRUCTION
] = "ENSRDESTRUCTION",

153 [
ENSRQUERYDOMAINTOOLONG
] = "ENSRQUERYDOMAINTOOLONG",

154 [
ENSRCNAMELOOP
] = "ENSRCNAMELOOP"

158 
	$≥º‹
(c⁄° *
s
) {

159 
îr
 = 
î∫o
;

160 
	`˝rötf
("%s: %s\n", 
s
, 
	`e2s
(
îr
));

161 
	}
}

164 
	$e2s
(
îr
) {

165  
sys_îæi°
[
îr
];

166 
	}
}

	@net/lwip/jos/arch/perror.h

1 #i‚de‡
JOS_INC_PERROR_H


2 
	#JOS_INC_PERROR_H


	)

4 
≥º‹
(c⁄° *
s
);

5 c⁄° *
e2s
(
e
);

	@net/lwip/jos/arch/setjmp.h

1 #i‚de‡
JOS_INC_SETJMP_H


2 
	#JOS_INC_SETJMP_H


	)

4 
	~<¨ch/i386/£tjmp.h
>

6 
jos_£tjmp
(vﬁ©ûê
jos_jmp_buf
 *
buf
);

7 
	$jos_l⁄gjmp
(vﬁ©ûê
jos_jmp_buf
 *
buf
, 
vÆ
)

8 
	`__©åibuã__
((
__n‹ëu∫__
, 
JOS_LONGJMP_GCCATTR
));

	@net/lwip/jos/arch/sys_arch.c

1 
	~<öc/lib.h
>

3 
	~<lwù/sys.h
>

4 
	~<¨ch/thªad.h
>

5 
	~<¨ch/cc.h
>

6 
	~<¨ch/sys_¨ch.h
>

7 
	~<¨ch/≥º‹.h
>

8 
	~<¨ch/thªad.h
>

10 
	#debug
 0

	)

12 
	#NSEM
 256

	)

13 
	#NMBOX
 128

	)

14 
	#MBOXSLOTS
 32

	)

16 
	ssys_£m_íåy
 {

17 
	m‰ìd
;

18 
	mgí
;

20 
uöt32_t
 
	mv
;

22 
uöt16_t
 
	mcou¡î
;

23 
uöt16_t
 
	mwaôîs
;

26 
LIST_ENTRY
(
sys_£m_íåy
Ë
	mlök
;

28 
sys_£m_íåy
 
	g£ms
[
NSEM
];

29 
	$LIST_HEAD
(
£m_li°
, 
sys_£m_íåy
Ë
£m_‰ì
;

31 
	ssys_mbox_íåy
 {

32 
‰ìd
;

33 
hód
, 
√xtq
;

34 *
msg
[
MBOXSLOTS
];

35 
sys_£m_t
 
queued_msg
;

36 
sys_£m_t
 
‰ì_msg
;

37 
	`LIST_ENTRY
(
sys_mbox_íåy
Ë
lök
;

39 
sys_mbox_íåy
 
mboxes
[
NMBOX
];

40 
	$LIST_HEAD
(
mbox_li°
, 
sys_mbox_íåy
Ë
mbox_‰ì
;

42 
	ssys_thªad
 {

43 
thªad_id_t
 
tid
;

44 
sys_timeouts
 
tmo
;

45 
	`LIST_ENTRY
(
sys_thªad
Ë
lök
;

48 íum { 
thªad_hash_size
 = 257 };

49 
	$LIST_HEAD
(
thªad_li°
, 
sys_thªad
Ë
thªads
[
thªad_hash_size
];

52 
	$sys_öô
()

54 
i
 = 0;

55 
i
 = 0; i < 
NSEM
; i++) {

56 
£ms
[
i
].
‰ìd
 = 1;

57 
	`LIST_INSERT_HEAD
(&
£m_‰ì
, &
£ms
[
i
], 
lök
);

60 
i
 = 0; i < 
NMBOX
; i++) {

61 
mboxes
[
i
].
‰ìd
 = 1;

62 
	`LIST_INSERT_HEAD
(&
mbox_‰ì
, &
mboxes
[
i
], 
lök
);

64 
	}
}

66 
sys_mbox_t


67 
	$sys_mbox_√w
(
size
)

69 
	`as£π
(
size
 < 
MBOXSLOTS
);

70 
sys_mbox_íåy
 *
mbe
 = 
	`LIST_FIRST
(&
mbox_‰ì
);

71 i‡(!
mbe
) {

72 
	`˝rötf
("lwip: sys_mbox_new: out of mailboxes\n");

73  
SYS_MBOX_NULL
;

75 
	`LIST_REMOVE
(
mbe
, 
lök
);

76 
	`as£π
(
mbe
->
‰ìd
);

77 
mbe
->
‰ìd
 = 0;

79 
i
 = 
mbe
 - &
mboxes
[0];

80 
mbe
->
hód
 = -1;

81 
mbe
->
√xtq
 = 0;

82 
mbe
->
queued_msg
 = 
	`sys_£m_√w
(0);

83 
mbe
->
‰ì_msg
 = 
	`sys_£m_√w
(
MBOXSLOTS
);

85 i‡(
mbe
->
queued_msg
 =
SYS_SEM_NULL
 ||

86 
mbe
->
‰ì_msg
 =
SYS_SEM_NULL
)

88 
	`sys_mbox_‰ì
(
i
);

89 
	`˝rötf
("lwip: sys_mbox_new: can't get semaphore\n");

90  
SYS_MBOX_NULL
;

92  
i
;

93 
	}
}

96 
	$sys_mbox_‰ì
(
sys_mbox_t
 
mbox
)

98 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

99 
	`sys_£m_‰ì
(
mboxes
[
mbox
].
queued_msg
);

100 
	`sys_£m_‰ì
(
mboxes
[
mbox
].
‰ì_msg
);

101 
	`LIST_INSERT_HEAD
(&
mbox_‰ì
, &
mboxes
[
mbox
], 
lök
);

102 
mboxes
[
mbox
].
‰ìd
 = 1;

103 
	}
}

106 
	$sys_mbox_po°
(
sys_mbox_t
 
mbox
, *
msg
)

108 
	`as£π
(
	`sys_mbox_åypo°
(
mbox
, 
msg
Ë=
ERR_OK
);

109 
	}
}

111 
îr_t


112 
	$sys_mbox_åypo°
(
sys_mbox_t
 
mbox
, *
msg
)

114 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

116 
	`sys_¨ch_£m_waô
(
mboxes
[
mbox
].
‰ì_msg
, 0);

117 i‡(
mboxes
[
mbox
].
√xtq
 =mboxes[mbox].
hód
)

118  
ERR_MEM
;

120 
¶Ÿ
 = 
mboxes
[
mbox
].
√xtq
;

121 
mboxes
[
mbox
].
√xtq
 = (
¶Ÿ
 + 1Ë% 
MBOXSLOTS
;

122 
mboxes
[
mbox
].
msg
[
¶Ÿ
] = msg;

124 i‡(
mboxes
[
mbox
].
hód
 == -1)

125 
mboxes
[
mbox
].
hód
 = 
¶Ÿ
;

127 
	`sys_£m_sig«l
(
mboxes
[
mbox
].
queued_msg
);

129  
ERR_OK
;

130 
	}
}

132 
sys_£m_t


133 
	$sys_£m_√w
(
u8_t
 
cou¡
)

135 
sys_£m_íåy
 *
£
 = 
	`LIST_FIRST
(&
£m_‰ì
);

136 i‡(!
£
) {

137 
	`˝rötf
("lwip: sys_sem_new: out of semaphores\n");

138  
SYS_SEM_NULL
;

140 
	`LIST_REMOVE
(
£
, 
lök
);

141 
	`as£π
(
£
->
‰ìd
);

142 
£
->
‰ìd
 = 0;

144 
£
->
cou¡î
 = 
cou¡
;

145 
£
->
gí
++;

146  
£
 - &
£ms
[0];

147 
	}
}

150 
	$sys_£m_‰ì
(
sys_£m_t
 
£m
)

152 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

153 
£ms
[
£m
].
‰ìd
 = 1;

154 
£ms
[
£m
].
gí
++;

155 
	`LIST_INSERT_HEAD
(&
£m_‰ì
, &
£ms
[
£m
], 
lök
);

156 
	}
}

159 
	$sys_£m_sig«l
(
sys_£m_t
 
£m
)

161 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

162 
£ms
[
£m
].
cou¡î
++;

163 i‡(
£ms
[
£m
].
waôîs
) {

164 
£ms
[
£m
].
waôîs
 = 0;

165 
	`thªad_wakeup
(&
£ms
[
£m
].
v
);

167 
	}
}

169 
u32_t


170 
	$sys_¨ch_£m_waô
(
sys_£m_t
 
£m
, 
u32_t
 
tm_m£c
)

172 
	`as£π
(!
£ms
[
£m
].
‰ìd
);

173 
u32_t
 
waôed
 = 0;

175 
gí
 = 
£ms
[
£m
].gen;

177 
tm_m£c
 =0 || 
waôed
 <Åm_msec) {

178 i‡(
£ms
[
£m
].
cou¡î
 > 0) {

179 
£ms
[
£m
].
cou¡î
--;

180  
waôed
;

181 } i‡(
tm_m£c
 =
SYS_ARCH_NOWAIT
) {

182  
SYS_ARCH_TIMEOUT
;

184 
uöt32_t
 
a
 = 
	`sys_time_m£c
();

185 
uöt32_t
 
¶ìp_u¡û
 = 
tm_m£c
 ? 
a
 + (tm_m£¯- 
waôed
) : ~0;

186 
£ms
[
£m
].
waôîs
 = 1;

187 
uöt32_t
 
cur_v
 = 
£ms
[
£m
].
v
;

188 
	`lwù_c‹e_u∆ock
();

189 
	`thªad_waô
(&
£ms
[
£m
].
v
, 
cur_v
, 
¶ìp_u¡û
);

190 
	`lwù_c‹e_lock
();

191 i‡(
gí
 !
£ms
[
£m
].gen) {

192 
	`˝rötf
("sys_arch_sem_wait: sem freed under waiter!\n");

193  
SYS_ARCH_TIMEOUT
;

195 
uöt32_t
 
b
 = 
	`sys_time_m£c
();

196 
waôed
 +(
b
 - 
a
);

200  
SYS_ARCH_TIMEOUT
;

201 
	}
}

203 
u32_t


204 
	$sys_¨ch_mbox_„tch
(
sys_mbox_t
 
mbox
, **
msg
, 
u32_t
 
tm_m£c
)

206 
	`as£π
(!
mboxes
[
mbox
].
‰ìd
);

208 
u32_t
 
waôed
 = 
	`sys_¨ch_£m_waô
(
mboxes
[
mbox
].
queued_msg
, 
tm_m£c
);

209 i‡(
waôed
 =
SYS_ARCH_TIMEOUT
)

210  
waôed
;

212 
¶Ÿ
 = 
mboxes
[
mbox
].
hód
;

213 i‡(
¶Ÿ
 == -1)

214 
	`∑nic
("lwip: sys_arch_mbox_fetch:Ço message");

215 i‡(
msg
)

216 *
msg
 = 
mboxes
[
mbox
].msg[
¶Ÿ
];

218 
mboxes
[
mbox
].
hód
 = (
¶Ÿ
 + 1Ë% 
MBOXSLOTS
;

219 i‡(
mboxes
[
mbox
].
hód
 =mboxes[mbox].
√xtq
)

220 
mboxes
[
mbox
].
hód
 = -1;

222 
	`sys_£m_sig«l
(
mboxes
[
mbox
].
‰ì_msg
);

223  
waôed
;

224 
	}
}

226 
u32_t


227 
	$sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 
mbox
, **
msg
)

229  
	`sys_¨ch_mbox_„tch
(
mbox
, 
msg
, 
SYS_ARCH_NOWAIT
);

230 
	}
}

232 
	slwù_thªad
 {

233 (*
	mfunc
)(*
	m¨g
);

234 *
	m¨g
;

238 
	$lwù_thªad_íåy
(
uöt32_t
 
¨g
)

240 
lwù_thªad
 *
…
 = (lwù_thªad *)
¨g
;

241 
	`lwù_c‹e_lock
();

242 
…
->
	`func
÷t->
¨g
);

243 
	`lwù_c‹e_u∆ock
();

244 
	`‰ì
(
…
);

245 
	}
}

247 
sys_thªad_t


248 
sys_thªad_√w
(*
«me
, (* 
thªad
)(*
¨g
), *arg,

249 
°acksize
, 
¥io
)

251 
lwù_thªad
 *
…
 = 
	`mÆloc
((*lt));

252 i‡(
…
 == 0)

253 
	`∑nic
("sys_thread_new: cannotállocateÅhread struct");

255 i‡(
°acksize
 > 
PGSIZE
)

256 
	`∑nic
("œrgê°ack %d", 
°acksize
);

258 
…
->
func
 = 
thªad
;

259 
…
->
¨g
 =árg;

261 
thªad_id_t
 
tid
;

262 
r
 = 
	`thªad_¸óã
(&
tid
, 
«me
, 
lwù_thªad_íåy
, (
uöt32_t
)
…
);

264 i‡(
r
 < 0)

265 
	`∑nic
("lwù: sys_thªad_√w: c™nŸ cª©e: %s\n", 
	`e2s
(
r
));

267  
tid
;

268 
	}
}

271 
	$timeout_˛ónup
(
thªad_id_t
 
tid
)

273 
	`lwù_c‹e_lock
();

275 
sys_thªad
 *
t
;

276 
	`LIST_FOREACH
(
t
, &
thªads
[
tid
 % 
thªad_hash_size
], 
lök
)

277 i‡(
t
->
tid
 ==Åid) {

278 
	`LIST_REMOVE
(
t
, 
lök
);

279 
	`‰ì
(
t
);

280 
d⁄e
;

283 i‡(
debug
Ë
	`˝rötf
("timeout_˛ónup: bogu†tid %ld\n", 
tid
);

284 
d⁄e
:

285 
	`lwù_c‹e_u∆ock
();

286 
	}
}

288 
sys_timeouts
 *

289 
	$sys_¨ch_timeouts
()

291 
thªad_id_t
 
tid
 = 
	`thªad_id
();

293 
sys_thªad
 *
t
;

294 
	`LIST_FOREACH
(
t
, &
thªads
[
tid
 % 
thªad_hash_size
], 
lök
)

295 i‡(
t
->
tid
 ==Åid)

296 
out
;

298 
t
 = 
	`mÆloc
((*t));

299 i‡(
t
 == 0)

300 
	`∑nic
("sys_arch_timeouts: cannot malloc");

302 
r
 = 
	`thªad_⁄hÆt
(
timeout_˛ónup
);

303 i‡(
r
 < 0)

304 
	`∑nic
("thªad_⁄hÆàÁûed: %s", 
	`e2s
(
r
));

306 
t
->
tid
 =Åid;

307 
	`mem£t
(&
t
->
tmo
, 0, (t->tmo));

308 
	`LIST_INSERT_HEAD
(&
thªads
[
tid
 % 
thªad_hash_size
], 
t
, 
lök
);

310 
out
:

311  &
t
->
tmo
;

312 
	}
}

315 
	$lwù_c‹e_lock
()

317 
	}
}

320 
	$lwù_c‹e_u∆ock
()

322 
	}
}

	@net/lwip/jos/arch/sys_arch.h

1 #i‚de‡
LWIP_ARCH_SYS_ARCH_H


2 
	#LWIP_ARCH_SYS_ARCH_H


	)

4 
	~<öc/ty≥s.h
>

6 
	tsys_£m_t
;

7 
	tsys_mbox_t
;

8 
	tsys_thªad_t
;

10 
	#SYS_MBOX_NULL
 (-1)

	)

11 
	#SYS_SEM_NULL
 (-1)

	)

13 
lwù_c‹e_lock
();

14 
lwù_c‹e_u∆ock
();

15 
lwù_c‹e_öô
();

17 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

18 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

19 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

21 
	#SYS_ARCH_NOWAIT
 0xffffff„

	)

	@net/lwip/jos/arch/thread.c

1 
	~<öc/lib.h
>

3 
	~<¨ch/thªad.h
>

4 
	~<¨ch/thªadq.h
>

5 
	~<¨ch/£tjmp.h
>

7 
thªad_id_t
 
	gmax_tid
;

8 
thªad_c⁄ãxt
 *
	gcur_tc
;

10 
thªad_queue
 
	gthªad_queue
;

11 
thªad_queue
 
	gkûl_queue
;

14 
	$thªad_öô
() {

15 
	`thªadq_öô
(&
thªad_queue
);

16 
max_tid
 = 0;

17 
	}
}

19 
uöt32_t


20 
	$thªad_id
() {

21  
cur_tc
->
tc_tid
;

22 
	}
}

25 
	$thªad_wakeup
(vﬁ©ûê
uöt32_t
 *
addr
) {

26 
thªad_c⁄ãxt
 *
tc
 = 
thªad_queue
.
tq_fú°
;

27 
tc
) {

28 i‡(
tc
->
tc_waô_addr
 =
addr
)

29 
tc
->
tc_wakeup
 = 1;

30 
tc
 =Åc->
tc_queue_lök
;

32 
	}
}

35 
	$thªad_waô
(vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆ
, uöt32_à
m£c
) {

36 
uöt32_t
 
s
 = 
	`sys_time_m£c
();

37 
uöt32_t
 
p
 = 
s
;

39 
cur_tc
->
tc_waô_addr
 = 
addr
;

40 
cur_tc
->
tc_wakeup
 = 0;

42 
p
 < 
m£c
) {

43 i‡(
p
 < 
s
)

45 i‡(
addr
 && *add∏!
vÆ
)

47 i‡(
cur_tc
->
tc_wakeup
)

50 
	`thªad_yõld
();

51 
p
 = 
	`sys_time_m£c
();

54 
cur_tc
->
tc_waô_addr
 = 0;

55 
cur_tc
->
tc_wakeup
 = 0;

56 
	}
}

59 
	$thªad_wakeups_≥ndög
()

61 
thªad_c⁄ãxt
 *
tc
 = 
thªad_queue
.
tq_fú°
;

62 
n
 = 0;

63 
tc
) {

64 i‡(
tc
->
tc_wakeup
)

65 ++
n
;

66 
tc
 =Åc->
tc_queue_lök
;

68  
n
;

69 
	}
}

72 
thªad_⁄hÆt
((*
fun
)(
thªad_id_t
)) {

73 i‡(
cur_tc
->
tc_n⁄hÆt
 >
THREAD_NUM_ONHALT
)

74  -
E_NO_MEM
;

76 
cur_tc
->
tc_⁄hÆt
[cur_tc->
tc_n⁄hÆt
++] = 
fun
;

78 
	}
}

80 
thªad_id_t


81 
	$Æloc_tid
() {

82 
tid
 = 
max_tid
++;

83 i‡(
max_tid
 =(
uöt32_t
)~0)

84 
	`∑nic
("alloc_tid:Ço moreÅhread ids");

85  
tid
;

86 
	}
}

89 
	$thªad_£t_«me
(
thªad_c⁄ãxt
 *
tc
, c⁄° *
«me
)

91 
	`°∫˝y
(
tc
->
tc_«me
, 
«me
, 
«me_size
 - 1);

92 
tc
->
tc_«me
[
«me_size
 - 1] = 0;

93 
	}
}

96 
	$thªad_íåy
() {

97 
cur_tc
->
	`tc_íåy
(cur_tc->
tc_¨g
);

98 
	`thªad_hÆt
();

99 
	}
}

102 
thªad_¸óã
(
thªad_id_t
 *
tid
, c⁄° *
«me
,

103 (*
íåy
)(
uöt32_t
), uöt32_à
¨g
) {

104 
thªad_c⁄ãxt
 *
tc
 = 
	`mÆloc
((thread_context));

105 i‡(!
tc
)

106  -
E_NO_MEM
;

108 
	`mem£t
(
tc
, 0, (
thªad_c⁄ãxt
));

110 
	`thªad_£t_«me
(
tc
, 
«me
);

111 
tc
->
tc_tid
 = 
	`Æloc_tid
();

113 
tc
->
tc_°ack_bŸtom
 = 
	`mÆloc
(
°ack_size
);

114 i‡(!
tc
->
tc_°ack_bŸtom
) {

115 
	`‰ì
(
tc
);

116  -
E_NO_MEM
;

119 *
°ackt›
 = 
tc
->
tc_°ack_bŸtom
 + 
°ack_size
;

121 
°ackt›
 = stacktop - 4;

122 
	`mem£t
(
°ackt›
, 0, 4);

124 
	`mem£t
(&
tc
->
tc_jb
, 0, (tc->tc_jb));

125 
tc
->
tc_jb
.
jb_e•
 = (
uöt32_t
)
°ackt›
;

126 
tc
->
tc_jb
.
jb_eù
 = (
uöt32_t
)&
thªad_íåy
;

127 
tc
->
tc_íåy
 = 
íåy
;

128 
tc
->
tc_¨g
 = 
¨g
;

130 
	`thªadq_push
(&
thªad_queue
, 
tc
);

132 i‡(
tid
)

133 *
tid
 = 
tc
->
tc_tid
;

135 
	}
}

138 
	$thªad_˛ón
(
thªad_c⁄ãxt
 *
tc
) {

139 i‡(!
tc
) ;

141 
i
;

142 
i
 = 0; i < 
tc
->
tc_n⁄hÆt
; i++)

143 
tc
->
tc_⁄hÆt
[
i
]—c->
tc_tid
);

144 
	`‰ì
(
tc
->
tc_°ack_bŸtom
);

145 
	`‰ì
(
tc
);

146 
	}
}

149 
	$thªad_hÆt
() {

152 
	`thªad_˛ón
(
	`thªadq_p›
(&
kûl_queue
));

154 
	`thªadq_push
(&
kûl_queue
, 
cur_tc
);

155 
cur_tc
 = 
NULL
;

156 
	`thªad_yõld
();

159 
	`exô
();

160 
	}
}

163 
	$thªad_yõld
() {

164 
thªad_c⁄ãxt
 *
√xt_tc
 = 
	`thªadq_p›
(&
thªad_queue
);

166 i‡(!
√xt_tc
)

169 i‡(
cur_tc
) {

170 i‡(
	`jos_£tjmp
(&
cur_tc
->
tc_jb
) != 0)

172 
	`thªadq_push
(&
thªad_queue
, 
cur_tc
);

175 
cur_tc
 = 
√xt_tc
;

176 
	`jos_l⁄gjmp
(&
cur_tc
->
tc_jb
, 1);

177 
	}
}

180 
	$¥öt_jb
(
thªad_c⁄ãxt
 *
tc
) {

181 
	`˝rötf
("jum∞buf„∏f‹Åhªad %s:\n", 
tc
->
tc_«me
);

182 
	`˝rötf
("\ãù: %x\n", 
tc
->
tc_jb
.
jb_eù
);

183 
	`˝rötf
("\ã•: %x\n", 
tc
->
tc_jb
.
jb_e•
);

184 
	`˝rötf
("\ãbp: %x\n", 
tc
->
tc_jb
.
jb_ebp
);

185 
	`˝rötf
("\ãbx: %x\n", 
tc
->
tc_jb
.
jb_ebx
);

186 
	`˝rötf
("\ãsi: %x\n", 
tc
->
tc_jb
.
jb_esi
);

187 
	`˝rötf
("\ãdi: %x\n", 
tc
->
tc_jb
.
jb_edi
);

188 
	}
}

	@net/lwip/jos/arch/thread.h

1 #i‚de‡
LWIP_ARCH_THREAD_H


2 
	#LWIP_ARCH_THREAD_H


	)

4 
	~<öc/ty≥s.h
>

6 
uöt32_t
 
	tthªad_id_t
;

8 
thªad_öô
();

9 
thªad_id_t
 
thªad_id
();

10 
thªad_wakeup
(vﬁ©ûê
uöt32_t
 *
addr
);

11 
thªad_waô
(vﬁ©ûê
uöt32_t
 *
addr
, uöt32_à
vÆ
, uöt32_à
m£c
);

12 
thªad_wakeups_≥ndög
();

13 
thªad_⁄hÆt
((*
fun
)(
thªad_id_t
));

14 
	`thªad_¸óã
(
thªad_id_t
 *
tid
, c⁄° *
«me
,

15 (*
íåy
)(
uöt32_t
), uöt32_à
¨g
);

16 
	`thªad_yõld
();

17 
	`thªad_hÆt
();

	@net/lwip/jos/arch/threadq.h

1 #i‚de‡
JOS_INC_THREADQ_H


2 
	#JOS_INC_THREADQ_H


	)

4 
	~<¨ch/thªad.h
>

5 
	~<¨ch/£tjmp.h
>

7 
	#THREAD_NUM_ONHALT
 4

	)

8 íum { 
	m«me_size
 = 32 };

9 íum { 
	m°ack_size
 = 
PGSIZE
 };

11 
	gthªad_c⁄ãxt
;

13 
	sthªad_queue


15 
thªad_c⁄ãxt
 *
	mtq_fú°
;

16 
thªad_c⁄ãxt
 *
	mtq_œ°
;

19 
	sthªad_c⁄ãxt
 {

20 
thªad_id_t
 
	mtc_tid
;

21 *
	mtc_°ack_bŸtom
;

22 
	mtc_«me
[
«me_size
];

23 (*
	mtc_íåy
)(
	muöt32_t
);

24 
uöt32_t
 
	mtc_¨g
;

25 
jos_jmp_buf
 
	mtc_jb
;

26 vﬁ©ûê
uöt32_t
 *
	mtc_waô_addr
;

27 vﬁ©ûê
	mtc_wakeup
;

28 (*
	mtc_⁄hÆt
[
THREAD_NUM_ONHALT
])(
	mthªad_id_t
);

29 
	mtc_n⁄hÆt
;

30 
thªad_c⁄ãxt
 *
	mtc_queue_lök
;

33 
ölöe
 

34 
	$thªadq_öô
(
thªad_queue
 *
tq
)

36 
tq
->
tq_fú°
 = 0;

37 
tq
->
tq_œ°
 = 0;

38 
	}
}

40 
ölöe
 

41 
	$thªadq_push
(
thªad_queue
 *
tq
, 
thªad_c⁄ãxt
 *
tc
)

43 
tc
->
tc_queue_lök
 = 0;

44 i‡(!
tq
->
tq_fú°
) {

45 
tq
->
tq_fú°
 = 
tc
;

46 
tq
->
tq_œ°
 = 
tc
;

48 
tq
->
tq_œ°
->
tc_queue_lök
 = 
tc
;

49 
tq
->
tq_œ°
 = 
tc
;

51 
	}
}

53 
ölöe
 
thªad_c⁄ãxt
 *

54 
	$thªadq_p›
(
thªad_queue
 *
tq
)

56 i‡(!
tq
->
tq_fú°
)

59 
thªad_c⁄ãxt
 *
tc
 = 
tq
->
tq_fú°
;

60 
tq
->
tq_fú°
 = 
tc
->
tc_queue_lök
;

61 
tc
->
tc_queue_lök
 = 0;

62  
tc
;

63 
	}
}

	@net/lwip/jos/jif/jif.c

33 
	~<öc/lib.h
>

34 
	~<öc/ns.h
>

36 
	~<jif/jif.h
>

38 
	~"lwù/›t.h
"

39 
	~"lwù/def.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~<lwù/°©s.h
>

45 
	~<√tif/ëh¨p.h
>

47 
	#PKTMAP
 0x10000000

	)

49 
	sjif
 {

50 
ëh_addr
 *
	mëhaddr
;

51 
ívid_t
 
	mívid
;

55 
	$low_Àvñ_öô
(
√tif
 *netif)

57 
r
;

59 
√tif
->
hwaddr_Àn
 = 6;

60 
√tif
->
mtu
 = 1500;

61 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
;

64 
√tif
->
hwaddr
[0] = 0x52;

65 
√tif
->
hwaddr
[1] = 0x54;

66 
√tif
->
hwaddr
[2] = 0x00;

67 
√tif
->
hwaddr
[3] = 0x12;

68 
√tif
->
hwaddr
[4] = 0x34;

69 
√tif
->
hwaddr
[5] = 0x56;

70 
	}
}

80 
îr_t


81 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

83 
r
 = 
	`sys_∑ge_Æloc
(0, (*)
PKTMAP
, 
PTE_U
|
PTE_W
|
PTE_P
);

84 i‡(
r
 < 0)

85 
	`∑nic
("jif: couldÇotállocateÖage of memory");

86 
jif_pkt
 *
pkt
 = (jif_pkà*)
PKTMAP
;

88 
jif
 *jif;

89 
jif
 = 
√tif
->
°©e
;

91 *
txbuf
 = 
pkt
->
jp_d©a
;

92 
txsize
 = 0;

93 
pbuf
 *
q
;

94 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

99 i‡(
txsize
 + 
q
->
Àn
 > 2000)

100 
	`∑nic
("ovîsizedÖackë, føgmíà%dÅxsizê%d\n", 
q
->
Àn
, 
txsize
);

101 
	`mem˝y
(&
txbuf
[
txsize
], 
q
->
∑ylﬂd
, q->
Àn
);

102 
txsize
 +
q
->
Àn
;

105 
pkt
->
jp_Àn
 = 
txsize
;

107 
	`ùc_£nd
(
jif
->
ívid
, 
NSREQ_OUTPUT
, (*)
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

108 
	`sys_∑ge_unm≠
(0, (*)
pkt
);

110  
ERR_OK
;

111 
	}
}

120 
pbuf
 *

121 
	$low_Àvñ_öput
(*
va
)

123 
jif_pkt
 *
pkt
 = (jif_pkà*)
va
;

124 
s16_t
 
Àn
 = 
pkt
->
jp_Àn
;

126 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

127 i‡(
p
 == 0)

132 *
rxbuf
 = (*Ë
pkt
->
jp_d©a
;

133 
c›õd
 = 0;

134 
pbuf
 *
q
;

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
byãs
 = 
q
->
Àn
;

140 i‡(
byãs
 > (
Àn
 - 
c›õd
))

141 
byãs
 = 
Àn
 - 
c›õd
;

142 
	`mem˝y
(
q
->
∑ylﬂd
, 
rxbuf
 + 
c›õd
, 
byãs
);

143 
c›õd
 +
byãs
;

146  
p
;

147 
	}
}

157 
îr_t


158 
	$jif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
,

159 
ù_addr
 *
ùaddr
)

162  
	`ëh¨p_ouçut
(
√tif
, 
p
, 
ùaddr
);

163 
	}
}

176 
	$jif_öput
(
√tif
 *√tif, *
va
)

178 
jif
 *jif;

179 
ëh_hdr
 *
ëhhdr
;

180 
pbuf
 *
p
;

182 
jif
 = 
√tif
->
°©e
;

185 
p
 = 
	`low_Àvñ_öput
(
va
);

188 i‡(
p
 =
NULL
) ;

190 
ëhhdr
 = 
p
->
∑ylﬂd
;

192 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

193 
ETHTYPE_IP
:

195 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

197 
	`pbuf_hódî
(
p
, -()(
ëh_hdr
));

199 
√tif
->
	`öput
(
p
,Çetif);

202 
ETHTYPE_ARP
:

204 
	`ëh¨p_¨p_öput
(
√tif
, 
jif
->
ëhaddr
, 
p
);

208 
	`pbuf_‰ì
(
p
);

210 
	}
}

221 
îr_t


222 
	$jif_öô
(
√tif
 *netif)

224 
jif
 *jif;

225 
ívid_t
 *
ouçut_ívid
;

227 
jif
 = 
	`mem_mÆloc
((jif));

229 i‡(
jif
 =
NULL
) {

230 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("jif_init: out of memory\n"));

231  
ERR_MEM
;

234 
ouçut_ívid
 = (
ívid_t
 *)
√tif
->
°©e
;

236 
√tif
->
°©e
 = 
jif
;

237 
√tif
->
ouçut
 = 
jif_ouçut
;

238 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

239 
	`mem˝y
(&
√tif
->
«me
[0], "en", 2);

241 
jif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

242 
jif
->
ívid
 = *
ouçut_ívid
;

244 
	`low_Àvñ_öô
(
√tif
);

246 
	`ëh¨p_öô
();

251 
uöt32_t
 
ùaddr
 = 
	`öë_addr
("10.0.2.2");

252 
	`ëh¨p_quîy
(
√tif
, (
ù_addr
 *Ë&
ùaddr
, 0);

254  
ERR_OK
;

255 
	}
}

	@net/lwip/jos/jif/jif.h

1 
	~<lwù/√tif.h
>

3 
jif_öput
(
√tif
 *√tif, *
va
);

4 
îr_t
 
jif_öô
(
√tif
 *netif);

	@net/lwip/jos/lwipopts.h

1 #i‚de‡
JOS_LWIP_LWIPOPTS_H


2 
	#JOS_LWIP_LWIPOPTS_H


	)

8 
	~<öc/ty≥s.h
>

9 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

13 
	#LWIP_STATS
 0

	)

14 
	#LWIP_STATS_DISPLAY
 0

	)

15 
	#LWIP_DHCP
 1

	)

16 
	#LWIP_COMPAT_SOCKETS
 0

	)

18 
	#LWIP_PROVIDE_ERRNO
 1

	)

23 
	#MEM_ALIGNMENT
 4

	)

25 
	#MEMP_NUM_PBUF
 64

	)

26 
	#MEMP_NUM_UDP_PCB
 8

	)

27 
	#MEMP_NUM_TCP_PCB
 32

	)

28 
	#MEMP_NUM_TCP_PCB_LISTEN
 16

	)

29 
	#MEMP_NUM_TCP_SEG
 
TCP_SND_QUEUELEN


30 
	#MEMP_NUM_NETBUF
 128

	)

31 
	#MEMP_NUM_NETCONN
 32

	)

32 
	#MEMP_NUM_SYS_TIMEOUT
 6

	)

34 
	#PER_TCP_PCB_BUFFER
 (16 * 4096)

	)

35 
	#MEM_SIZE
 (
PER_TCP_PCB_BUFFER
*
MEMP_NUM_TCP_SEG
 + 4096*MEMP_NUM_TCP_SEG)

	)

37 
	#PBUF_POOL_SIZE
 512

	)

38 
	#PBUF_POOL_BUFSIZE
 2000

	)

40 
	#TCP_MSS
 1460

	)

41 
	#TCP_WND
 24000

	)

42 
	#TCP_SND_BUF
 (16 * 
TCP_MSS
)

	)

45 
	#TCP_SND_QUEUELEN
 (2 * 
TCP_SND_BUF
/
TCP_MSS
)

	)

49 
	#LWIP_DEBUG
 1

	)

57 
	#DBG_MIN_LEVEL
 
DBG_LEVEL_SERIOUS


	)

58 
	#LWIP_DBG_MIN_LEVEL
 0

	)

59 
	#MEMP_SANITY_CHECK
 0

	)

61 
	#ERRNO


	)

	@net/lwip/netif/etharp.c

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_ARP


51 
	~"lwù/öë.h
"

52 
	~"lwù/ù.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/dh˝.h
"

56 
	~"lwù/autoù.h
"

57 
	~"√tif/ëh¨p.h
"

59 #i‡
PPPOE_SUPPORT


60 
	~"√tif/µp_€.h
"

63 
	~<°rög.h
>

69 
	#ARP_MAXAGE
 240

	)

77 
	#ARP_MAXPENDING
 2

	)

79 
	#HWTYPE_ETHERNET
 1

	)

81 
	#ARPH_HWLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë>> 8)

	)

82 
	#ARPH_PROTOLEN
(
hdr
Ë(
	`¡ohs
((hdr)->
_hwÀn_¥Ÿﬁí
Ë& 0xff)

	)

84 
	#ARPH_HWLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(
	`ARPH_PROTOLEN
(hdrË| (÷íË<< 8))

	)

85 
	#ARPH_PROTOLEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
(÷íË| (
	`ARPH_HWLEN
(hdrË<< 8))

	)

87 
	eëh¨p_°©e
 {

88 
	mETHARP_STATE_EMPTY
 = 0,

89 
	mETHARP_STATE_PENDING
,

90 
	mETHARP_STATE_STABLE


93 
	sëh¨p_íåy
 {

94 #i‡
ARP_QUEUEING


98 
ëh¨p_q_íåy
 *
	mq
;

100 
ù_addr
 
	mùaddr
;

101 
ëh_addr
 
	mëhaddr
;

102 
ëh¨p_°©e
 
	m°©e
;

103 
u8_t
 
	m˘ime
;

104 
√tif
 *
	m√tif
;

107 c⁄° 
ëh_addr
 
	gëhbrﬂdˇ°
 = {{0xff,0xff,0xff,0xff,0xff,0xff}};

108 c⁄° 
ëh_addr
 
	gëhzîo
 = {{0,0,0,0,0,0}};

109 
ëh¨p_íåy
 
	g¨p_èbÀ
[
ARP_TABLE_SIZE
];

110 #i‡!
LWIP_NETIF_HWADDRHINT


111 
u8_t
 
	gëh¨p_ˇched_íåy
;

117 
	#ETHARP_TRY_HARD
 1

	)

118 
	#ETHARP_FIND_ONLY
 2

	)

120 #i‡
LWIP_NETIF_HWADDRHINT


121 
	#NETIF_SET_HINT
(
√tif
, 
höt
Ëi‡((“ëifË!
NULL
Ë&& (“ëif)->
addr_höt
 != NULL)) \

122 *((
√tif
)->
addr_höt
Ë(
höt
);

	)

123 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif);

125 
s8_t
 
föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
);

128 
îr_t
 
upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
);

132 #i‡(
LWIP_ARP
 && (
ARP_TABLE_SIZE
 > 0x7f))

137 #i‡
ARP_QUEUEING


144 
	$‰ì_ëh¨p_q
(
ëh¨p_q_íåy
 *
q
)

146 
ëh¨p_q_íåy
 *
r
;

147 
	`LWIP_ASSERT
("q !NULL", 
q
 !
NULL
);

148 
	`LWIP_ASSERT
("q->∞!NULL", 
q
->
p
 !
NULL
);

149 
q
) {

150 
r
 = 
q
;

151 
q
 = q->
√xt
;

152 
	`LWIP_ASSERT
("r->∞!NULL", (
r
->
p
 !
NULL
));

153 
	`pbuf_‰ì
(
r
->
p
);

154 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
r
);

156 
	}
}

166 
	$ëh¨p_tmr
()

168 
u8_t
 
i
;

170 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("etharp_timer\n"));

172 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

173 
¨p_èbÀ
[
i
].
˘ime
++;

174 i‡(((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) &&

175 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXAGE
)) ||

176 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) &&

177 (
¨p_èbÀ
[
i
].
˘ime
 >
ARP_MAXPENDING
))) {

179 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî:Éxpúed %†íåy %"
U16_F
".\n",

180 
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
 ? "°abÀ" : "≥ndög", (
u16_t
)i));

183 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

184 #i‡
ARP_QUEUEING


186 i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

188 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("ëh¨p_timî: fªeögÉ¡ry %"
U16_F
",Öackë queuê%p.\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

189 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

190 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

194 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

196 #i‡
ARP_QUEUEING


198 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

203 
	}
}

227 
	gs8_t


228 #i‡
LWIP_NETIF_HWADDRHINT


229 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
, 
√tif
 *netif)

231 
	$föd_íåy
(
ù_addr
 *
ùaddr
, 
u8_t
 
Êags
)

234 
s8_t
 
ﬁd_≥ndög
 = 
ARP_TABLE_SIZE
, 
ﬁd_°abÀ
 = ARP_TABLE_SIZE;

235 
s8_t
 
em±y
 = 
ARP_TABLE_SIZE
;

236 
u8_t
 
i
 = 0, 
age_≥ndög
 = 0, 
age_°abÀ
 = 0;

237 #i‡
ARP_QUEUEING


239 
s8_t
 
ﬁd_queue
 = 
ARP_TABLE_SIZE
;

241 
u8_t
 
age_queue
 = 0;

246 i‡(
ùaddr
) {

248 #i‡
LWIP_NETIF_HWADDRHINT


249 i‡((
√tif
 !
NULL
Ë&& (√tif->
addr_höt
 != NULL)) {

251 
u8_t
 
≥r_pcb_ˇche
 = *(
√tif
->
addr_höt
);

252 i‡((
≥r_pcb_ˇche
 < 
ARP_TABLE_SIZE
Ë&& 
¨p_èbÀ
[≥r_pcb_ˇche].
°©e
 =
ETHARP_STATE_STABLE
) {

254 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
≥r_pcb_ˇche
].ipaddr)) {

256 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

257  
≥r_pcb_ˇche
;

262 i‡(
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].
°©e
 =
ETHARP_STATE_STABLE
) {

264 i‡(
	`ù_addr_cmp
(
ùaddr
, &
¨p_èbÀ
[
ëh¨p_ˇched_íåy
].ipaddr)) {

266 
	`ETHARP_STATS_INC
(
ëh¨p
.
ˇchehô
);

267  
ëh¨p_ˇched_íåy
;

288 
i
 = 0; i < 
ARP_TABLE_SIZE
; ++i) {

290 i‡((
em±y
 =
ARP_TABLE_SIZE
Ë&& (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
)) {

291 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
, ("föd_íåy: foundÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

293 
em±y
 = 
i
;

296 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

298 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

299 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chögÖídögÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

301 #i‡
LWIP_NETIF_HWADDRHINT


302 
	`NETIF_SET_HINT
(
√tif
, 
i
);

304 
ëh¨p_ˇched_íåy
 = 
i
;

306  
i
;

307 #i‡
ARP_QUEUEING


309 } i‡(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

310 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_queue
) {

311 
ﬁd_queue
 = 
i
;

312 
age_queue
 = 
¨p_èbÀ
[
i
].
˘ime
;

317 i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_≥ndög
) {

318 
ﬁd_≥ndög
 = 
i
;

319 
age_≥ndög
 = 
¨p_èbÀ
[
i
].
˘ime
;

324 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

326 i‡(
ùaddr
 && 
	`ù_addr_cmp
(ùaddr, &
¨p_èbÀ
[
i
].ipaddr)) {

327 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: found m©chög sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

329 #i‡
LWIP_NETIF_HWADDRHINT


330 
	`NETIF_SET_HINT
(
√tif
, 
i
);

332 
ëh¨p_ˇched_íåy
 = 
i
;

334  
i
;

336 } i‡(
¨p_èbÀ
[
i
].
˘ime
 >
age_°abÀ
) {

337 
ﬁd_°abÀ
 = 
i
;

338 
age_°abÀ
 = 
¨p_èbÀ
[
i
].
˘ime
;

345 i‡(((
em±y
 =
ARP_TABLE_SIZE
Ë&& ((
Êags
 & 
ETHARP_TRY_HARD
) == 0))

347 || ((
Êags
 & 
ETHARP_FIND_ONLY
) != 0)) {

348 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("find_entry:ÇoÉmptyÉntry foundándÇotállowedÅoÑecycle\n"));

349  (
s8_t
)
ERR_MEM
;

362 i‡(
em±y
 < 
ARP_TABLE_SIZE
) {

363 
i
 = 
em±y
;

364 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ögÉm±yÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

367 i‡(
ﬁd_°abÀ
 < 
ARP_TABLE_SIZE
) {

369 
i
 = 
ﬁd_°abÀ
;

370 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde° sèbÀÉ¡ry %"
U16_F
"\n", (
u16_t
)
i
));

371 #i‡
ARP_QUEUEING


373 
	`LWIP_ASSERT
("¨p_èbÀ[i].q =NULL", 
¨p_èbÀ
[
i
].
q
 =
NULL
);

376 } i‡(
ﬁd_≥ndög
 < 
ARP_TABLE_SIZE
) {

378 
i
 = 
ﬁd_≥ndög
;

379 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
" (wôhouàqueue)\n", (
u16_t
)
i
));

380 #i‡
ARP_QUEUEING


382 } i‡(
ﬁd_queue
 < 
ARP_TABLE_SIZE
) {

384 
i
 = 
ﬁd_queue
;

385 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("föd_íåy: sñe˘ög olde°ÖídögÉ¡ry %"
U16_F
", fªeögÖackë queuê%p\n", (
u16_t
)
i
, (*)(
¨p_èbÀ
[i].
q
)));

386 
	`‰ì_ëh¨p_q
(
¨p_èbÀ
[
i
].
q
);

387 
¨p_èbÀ
[
i
].
q
 = 
NULL
;

391  (
s8_t
)
ERR_MEM
;

395 
	`LWIP_ASSERT
("ò< ARP_TABLE_SIZE", 
i
 < 
ARP_TABLE_SIZE
);

397 i‡(
¨p_èbÀ
[
i
].
°©e
 !
ETHARP_STATE_EMPTY
)

399 
	`¢mp_dñëe_¨pidx_åì
(
¨p_èbÀ
[
i
].
√tif
, &¨p_èbÀ[i].
ùaddr
);

402 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_EMPTY
;

405 i‡(
ùaddr
 !
NULL
) {

407 
	`ù_addr_£t
(&
¨p_èbÀ
[
i
].
ùaddr
, ipaddr);

409 
¨p_èbÀ
[
i
].
˘ime
 = 0;

410 #i‡
LWIP_NETIF_HWADDRHINT


411 
	`NETIF_SET_HINT
(
√tif
, 
i
);

413 
ëh¨p_ˇched_íåy
 = 
i
;

415  (
îr_t
)
i
;

416 
	}
}

428 
îr_t


429 
	$ëh¨p_£nd_ù
(
√tif
 *√tif, 
pbuf
 *
p
, 
ëh_addr
 *
§c
, ëh_add∏*
d°
)

431 
ëh_hdr
 *
ëhhdr
 = 
p
->
∑ylﬂd
;

432 
u8_t
 
k
;

434 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

435 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

436 
k
 = 
ETHARP_HWADDR_LEN
;

437 
k
 > 0) {

438 
k
--;

439 
ëhhdr
->
de°
.
addr
[
k
] = 
d°
->addr[k];

440 
ëhhdr
->
§c
.
addr
[
k
] = src->addr[k];

442 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_IP
);

443 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_£nd_ù: sídögÖackë %p\n", (*)
p
));

445  
√tif
->
	`lökouçut
“ëif, 
p
);

446 
	}
}

467 
îr_t


468 
	$upd©e_¨p_íåy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
, 
u8_t
 
Êags
)

470 
s8_t
 
i
;

471 
u8_t
 
k
;

472 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 3, ("update_arp_entry()\n"));

473 
	`LWIP_ASSERT
("√tif->hwaddr_À¿=ETHARP_HWADDR_LEN", 
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
);

474 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: %"
U16_F
".%"U16_F".%"U16_F".%"U16_F" - %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",

475 
	`ù4_addr1
(
ùaddr
), 
	`ù4_addr2
(ùaddr), 
	`ù4_addr3
(ùaddr), 
	`ù4_addr4
(ipaddr),

476 
ëhaddr
->
addr
[0],Éthaddr->addr[1],Éthaddr->addr[2],

477 
ëhaddr
->
addr
[3],Éthaddr->addr[4],Éthaddr->addr[5]));

479 i‡(
	`ù_addr_ißny
(
ùaddr
) ||

480 
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

481 
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

482 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("update_arp_entry: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

483  
ERR_ARG
;

486 #i‡
LWIP_NETIF_HWADDRHINT


487 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
, 
√tif
);

489 
i
 = 
	`föd_íåy
(
ùaddr
, 
Êags
);

492 i‡(
i
 < 0)

493  (
îr_t
)
i
;

496 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_STABLE
;

498 
¨p_èbÀ
[
i
].
√tif
 =Çetif;

501 
	`¢mp_ö£π_¨pidx_åì
(
√tif
, &
¨p_èbÀ
[
i
].
ùaddr
);

503 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("upd©e_¨p_íåy: upd©ög sèbÀÉ¡ry %"
S16_F
"\n", (
s16_t
)
i
));

505 
k
 = 
ETHARP_HWADDR_LEN
;

506 
k
 > 0) {

507 
k
--;

508 
¨p_èbÀ
[
i
].
ëhaddr
.
addr
[
k
] =Éthaddr->addr[k];

511 
¨p_èbÀ
[
i
].
˘ime
 = 0;

512 #i‡
ARP_QUEUEING


514 
¨p_èbÀ
[
i
].
q
 !
NULL
) {

515 
pbuf
 *
p
;

517 
ëh¨p_q_íåy
 *
q
 = 
¨p_èbÀ
[
i
].q;

519 
¨p_èbÀ
[
i
].
q
 = q->
√xt
;

521 
p
 = 
q
->p;

523 
	`memp_‰ì
(
MEMP_ARP_QUEUE
, 
q
);

525 
	`ëh¨p_£nd_ù
(
√tif
, 
p
, (
ëh_addr
*)“ëif->
hwaddr
), 
ëhaddr
);

527 
	`pbuf_‰ì
(
p
);

530  
ERR_OK
;

531 
	}
}

544 
s8_t


545 
	$ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
,

546 
ëh_addr
 **
ëh_ªt
, 
ù_addr
 **
ù_ªt
)

548 
s8_t
 
i
;

550 
	`LWIP_UNUSED_ARG
(
√tif
);

552 #i‡
LWIP_NETIF_HWADDRHINT


553 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
, 
NULL
);

555 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_FIND_ONLY
);

557 if((
i
 >0Ë&& 
¨p_èbÀ
[i].
°©e
 =
ETHARP_STATE_STABLE
) {

558 *
ëh_ªt
 = &
¨p_èbÀ
[
i
].
ëhaddr
;

559 *
ù_ªt
 = &
¨p_èbÀ
[
i
].
ùaddr
;

560  
i
;

563 
	}
}

581 
	$ëh¨p_ù_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

583 
ëhù_hdr
 *
hdr
;

584 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

587 
hdr
 = 
p
->
∑ylﬂd
;

589 i‡(!
	`ù_addr_√tcmp
(&(
hdr
->
ù
.
§c
), &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

594 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_ip_input: updating ETHARPÅable.\n"));

598 
	`upd©e_¨p_íåy
(
√tif
, &(
hdr
->
ù
.
§c
), &(hdr->
ëh
.src), 0);

599 
	}
}

618 
	$ëh¨p_¨p_öput
(
√tif
 *√tif, 
ëh_addr
 *
ëhaddr
, 
pbuf
 *
p
)

620 
ëh¨p_hdr
 *
hdr
;

622 
ù_addr
 
sùaddr
, 
dùaddr
;

623 
u8_t
 
i
;

624 
u8_t
 
f‹_us
;

625 #i‡
LWIP_AUTOIP


626 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

629 
	`LWIP_ERROR
("√ti‡!NULL", (
√tif
 !
NULL
), ;);

633 i‡(
p
->
Àn
 < (
ëh¨p_hdr
)) {

634 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1, ("ëh¨p_¨p_öput:Öackë dr›≥d,Åoÿsh‹à(%"
S16_F
"/%"S16_F")\n", 
p
->
tŸ_Àn
, (
s16_t
)(
ëh¨p_hdr
)));

635 
	`ETHARP_STATS_INC
(
ëh¨p
.
À√º
);

636 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

637 
	`pbuf_‰ì
(
p
);

641 
hdr
 = 
p
->
∑ylﬂd
;

644 i‡((
hdr
->
hwty≥
 !
	`ht⁄s
(
HWTYPE_ETHERNET
)) ||

645 (
hdr
->
_hwÀn_¥Ÿﬁí
 !
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
))) ||

646 (
hdr
->
¥Ÿo
 !
	`ht⁄s
(
ETHTYPE_IP
)) ||

647 (
hdr
->
ëhhdr
.
ty≥
 !
	`ht⁄s
(
ETHTYPE_ARP
))) {

648 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 1,

649 ("ëh¨p_¨p_öput:Öackë dr›≥d, wr⁄g hwÅy≥, hwÀn,ÖrŸo,ÖrŸﬁí o∏ëhî√àty≥ (%"
U16_F
"/%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",

650 
hdr
->
hwty≥
, 
	`ARPH_HWLEN
(hdr), hdr->
¥Ÿo
, 
	`ARPH_PROTOLEN
(hdr), hdr->
ëhhdr
.
ty≥
));

651 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

652 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

653 
	`pbuf_‰ì
(
p
);

656 
	`ETHARP_STATS_INC
(
ëh¨p
.
ªcv
);

658 #i‡
LWIP_AUTOIP


662 
	`autoù_¨p_ª∂y
(
√tif
, 
hdr
);

667 
	`SMEMCPY
(&
sùaddr
, &
hdr
->sipaddr, (sipaddr));

668 
	`SMEMCPY
(&
dùaddr
, &
hdr
->dipaddr, (dipaddr));

671 i‡(
√tif
->
ù_addr
.
addr
 == 0) {

672 
f‹_us
 = 0;

675 
f‹_us
 = 
	`ù_addr_cmp
(&
dùaddr
, &(
√tif
->
ù_addr
));

679 i‡(
f‹_us
) {

682 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 
ETHARP_TRY_HARD
);

686 
	`upd©e_¨p_íåy
(
√tif
, &
sùaddr
, &(
hdr
->
shwaddr
), 0);

690 
	`ht⁄s
(
hdr
->
›code
)) {

692 
ARP_REQUEST
:

697 
	`LWIP_DEBUGF
 (
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑequest\n"));

699 i‡(
f‹_us
) {

701 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input:ÑeplyingÅo ARPÑequest for our IPáddress\n"));

705 
hdr
->
›code
 = 
	`ht⁄s
(
ARP_REPLY
);

707 
hdr
->
dùaddr
 = hdr->
sùaddr
;

708 
hdr
->
sùaddr
 = *(
ù_addr2
 *)&
√tif
->
ù_addr
;

710 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

711 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

712 
i
 = 
ETHARP_HWADDR_LEN
;

713 #i‡
LWIP_AUTOIP


716 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
hdr
->
shwaddr
.addr;

719 
i
 > 0) {

720 
i
--;

721 
hdr
->
dhwaddr
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

722 #i‡
LWIP_AUTOIP


723 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = 
ëhd°_hwaddr
[i];

725 
hdr
->
ëhhdr
.
de°
.
addr
[
i
] = hdr->
shwaddr
.addr[i];

727 
hdr
->
shwaddr
.
addr
[
i
] = 
ëhaddr
->addr[i];

728 
hdr
->
ëhhdr
.
§c
.
addr
[
i
] = 
ëhaddr
->addr[i];

735 
√tif
->
	`lökouçut
“ëif, 
p
);

737 } i‡(
√tif
->
ù_addr
.
addr
 == 0) {

739 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: weáre unconfigured, ARPÑequest ignored.\n"));

743 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: ARPÑequest wasÇot for us.\n"));

746 
ARP_REPLY
:

748 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_arp_input: incoming ARPÑeply\n"));

749 #i‡(
LWIP_DHCP
 && 
DHCP_DOES_ARP_CHECK
)

754 
	`dh˝_¨p_ª∂y
(
√tif
, &
sùaddr
);

758 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_¨p_öput: ARP unknow¿›codêty≥ %"
S16_F
"\n", 
	`ht⁄s
(
hdr
->
›code
)));

759 
	`ETHARP_STATS_INC
(
ëh¨p
.
îr
);

763 
	`pbuf_‰ì
(
p
);

764 
	}
}

784 
îr_t


785 
	$ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr
 *
ùaddr
)

787 
ëh_addr
 *
de°
, 
mˇ°addr
;

790 i‡(
	`pbuf_hódî
(
q
, (
ëh_hdr
)) != 0) {

792 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_output: couldÇotállocateÑoom for header.\n"));

793 
	`LINK_STATS_INC
(
lök
.
À√º
);

794  
ERR_BUF
;

798 
de°
 = 
NULL
;

803 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
)) {

805 
de°
 = (
ëh_addr
 *)&
ëhbrﬂdˇ°
;

807 } i‡(
	`ù_addr_ismu…iˇ°
(
ùaddr
)) {

809 
mˇ°addr
.
addr
[0] = 0x01;

810 
mˇ°addr
.
addr
[1] = 0x00;

811 
mˇ°addr
.
addr
[2] = 0x5e;

812 
mˇ°addr
.
addr
[3] = 
	`ù4_addr2
(
ùaddr
) & 0x7f;

813 
mˇ°addr
.
addr
[4] = 
	`ù4_addr3
(
ùaddr
);

814 
mˇ°addr
.
addr
[5] = 
	`ù4_addr4
(
ùaddr
);

816 
de°
 = &
mˇ°addr
;

820 i‡(!
	`ù_addr_√tcmp
(
ùaddr
, &(
√tif
->
ù_addr
), &“ëif->
√tmask
))) {

822 i‡(
√tif
->
gw
.
addr
 != 0) {

824 
ùaddr
 = &(
√tif
->
gw
);

828  
ERR_RTE
;

832  
	`ëh¨p_quîy
(
√tif
, 
ùaddr
, 
q
);

838  
	`ëh¨p_£nd_ù
(
√tif
, 
q
, (
ëh_addr
*)“ëif->
hwaddr
), 
de°
);

839 
	}
}

874 
îr_t


875 
	$ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
, 
pbuf
 *
q
)

877 
ëh_addr
 * 
§ˇddr
 = (ëh_add∏*)
√tif
->
hwaddr
;

878 
îr_t
 
ªsu…
 = 
ERR_MEM
;

879 
s8_t
 
i
;

882 i‡(
	`ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
) ||

883 
	`ù_addr_ismu…iˇ°
(
ùaddr
) ||

884 
	`ù_addr_ißny
(
ùaddr
)) {

885 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: willÇotáddÇon-unicast IPáddressÅo ARP cache\n"));

886  
ERR_ARG
;

890 #i‡
LWIP_NETIF_HWADDRHINT


891 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
, 
√tif
);

893 
i
 = 
	`föd_íåy
(
ùaddr
, 
ETHARP_TRY_HARD
);

897 i‡(
i
 < 0) {

898 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query: couldÇot create ARPÉntry\n"));

899 i‡(
q
) {

900 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_query:Öacket dropped\n"));

901 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

903  (
îr_t
)
i
;

907 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_EMPTY
) {

908 
¨p_èbÀ
[
i
].
°©e
 = 
ETHARP_STATE_PENDING
;

912 
	`LWIP_ASSERT
("arp_table[i].state == PENDING or STABLE",

913 ((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) ||

914 (
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
)));

917 i‡((
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
Ë|| (
q
 =
NULL
)) {

919 
ªsu…
 = 
	`ëh¨p_ªque°
(
√tif
, 
ùaddr
);

920 i‡(
ªsu…
 !
ERR_OK
) {

929 i‡(
q
 !
NULL
) {

931 i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_STABLE
) {

934 
ªsu…
 = 
	`ëh¨p_£nd_ù
(
√tif
, 
q
, 
§ˇddr
, &(
¨p_èbÀ
[
i
].
ëhaddr
));

936 } i‡(
¨p_èbÀ
[
i
].
°©e
 =
ETHARP_STATE_PENDING
) {

937 #i‡
ARP_QUEUEING


938 
pbuf
 *
p
;

939 
c›y_√eded
 = 0;

943 
p
 = 
q
;

944 
p
) {

945 
	`LWIP_ASSERT
("nÿ∑ckë queue†Ælowed!", (
p
->
Àn
 !p->
tŸ_Àn
Ë|| (p->
√xt
 == 0));

946 if(
p
->
ty≥
 !
PBUF_ROM
) {

947 
c›y_√eded
 = 1;

950 
p
 =Ö->
√xt
;

952 if(
c›y_√eded
) {

954 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
,Ö->
tŸ_Àn
, 
PBUF_RAM
);

955 if(
p
 !
NULL
) {

956 i‡(
	`pbuf_c›y
(
p
, 
q
Ë!
ERR_OK
) {

957 
	`pbuf_‰ì
(
p
);

958 
p
 = 
NULL
;

963 
p
 = 
q
;

964 
	`pbuf_ªf
(
p
);

967 i‡(
p
 !
NULL
) {

969 
ëh¨p_q_íåy
 *
√w_íåy
;

971 
√w_íåy
 = 
	`memp_mÆloc
(
MEMP_ARP_QUEUE
);

972 i‡(
√w_íåy
 !
NULL
) {

973 
√w_íåy
->
√xt
 = 0;

974 
√w_íåy
->
p
 =Ö;

975 if(
¨p_èbÀ
[
i
].
q
 !
NULL
) {

977 
ëh¨p_q_íåy
 *
r
;

978 
r
 = 
¨p_èbÀ
[
i
].
q
;

979 
r
->
√xt
 !
NULL
) {

980 
r
 =Ñ->
√xt
;

982 
r
->
√xt
 = 
√w_íåy
;

985 
¨p_èbÀ
[
i
].
q
 = 
√w_íåy
;

987 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: queuedÖackë %∞⁄ ARPÉ¡ry %"
S16_F
"\n", (*)
q
, (
s16_t
)
i
));

988 
ªsu…
 = 
ERR_OK
;

991 
	`pbuf_‰ì
(
p
);

992 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

996 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

997 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: couldÇŸ queuê®c›y o‡PBUF_REFÖackë %∞(ouào‡mem‹y)\n", (*)
q
));

1003 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("ëh¨p_quîy: Ethî√àde°ö©i⁄áddªs†unknown, queueög dißbÀd,Öackë %∞dr›≥d\n", (*)
q
));

1007  
ªsu…
;

1008 
	}
}

1025 #i‡!
LWIP_AUTOIP


1028 
îr_t


1029 
	$ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

1030 c⁄° 
ëh_addr
 *
ëhd°_addr
,

1031 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr
 *
ù§c_addr
,

1032 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr
 *
ùd°_addr
,

1033 c⁄° 
u16_t
 
›code
)

1035 
pbuf
 *
p
;

1036 
îr_t
 
ªsu…
 = 
ERR_OK
;

1037 
u8_t
 
k
;

1038 
ëh¨p_hdr
 *
hdr
;

1039 #i‡
LWIP_AUTOIP


1040 c⁄° 
u8_t
 * 
ëhd°_hwaddr
;

1044 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh¨p_hdr
), 
PBUF_RAM
);

1046 i‡(
p
 =
NULL
) {

1047 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
 | 2, ("etharp_raw: couldÇotállocateÖbuf for ARPÑequest.\n"));

1048 
	`ETHARP_STATS_INC
(
ëh¨p
.
memîr
);

1049  
ERR_MEM
;

1051 
	`LWIP_ASSERT
("checkÅhat firstÖbuf can hold structÉtharp_hdr",

1052 (
p
->
Àn
 >(
ëh¨p_hdr
)));

1054 
hdr
 = 
p
->
∑ylﬂd
;

1055 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_raw: sendingÑaw ARPÖacket.\n"));

1056 
hdr
->
›code
 = 
	`ht⁄s
(opcode);

1058 
	`LWIP_ASSERT
("netif->hwaddr_len must beÅhe sameás ETHARP_HWADDR_LEN forÉtharp!",

1059 (
√tif
->
hwaddr_Àn
 =
ETHARP_HWADDR_LEN
));

1060 
k
 = 
ETHARP_HWADDR_LEN
;

1061 #i‡
LWIP_AUTOIP


1064 
ëhd°_hwaddr
 = ((
√tif
->
autoù
 !
NULL
Ë&& (√tif->autoù->
°©e
 !
AUTOIP_STATE_OFF
)Ë? (
u8_t
*)(
ëhbrﬂdˇ°
.
addr
Ë: 
ëhd°_addr
->addr;

1067 
k
 > 0) {

1068 
k
--;

1070 
hdr
->
shwaddr
.
addr
[
k
] = 
hw§c_addr
->addr[k];

1071 
hdr
->
dhwaddr
.
addr
[
k
] = 
hwd°_addr
->addr[k];

1073 #i‡
LWIP_AUTOIP


1074 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_hwaddr
[k];

1076 
hdr
->
ëhhdr
.
de°
.
addr
[
k
] = 
ëhd°_addr
->addr[k];

1078 
hdr
->
ëhhdr
.
§c
.
addr
[
k
] = 
ëh§c_addr
->addr[k];

1080 
hdr
->
sùaddr
 = *(
ù_addr2
 *)
ù§c_addr
;

1081 
hdr
->
dùaddr
 = *(
ù_addr2
 *)
ùd°_addr
;

1083 
hdr
->
hwty≥
 = 
	`ht⁄s
(
HWTYPE_ETHERNET
);

1084 
hdr
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

1086 
hdr
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8Ë| (
ù_addr
));

1088 
hdr
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

1090 
ªsu…
 = 
√tif
->
	`lökouçut
“ëif, 
p
);

1091 
	`ETHARP_STATS_INC
(
ëh¨p
.
xmô
);

1093 
	`pbuf_‰ì
(
p
);

1094 
p
 = 
NULL
;

1097  
ªsu…
;

1098 
	}
}

1109 
îr_t


1110 
	$ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr
 *
ùaddr
)

1112 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
, ("etharp_request: sending ARPÑequest.\n"));

1113  
	`ëh¨p_øw
(
√tif
, (
ëh_addr
 *Íëif->
hwaddr
, &
ëhbrﬂdˇ°
,

1114 (
ëh_addr
 *)
√tif
->
hwaddr
, &√tif->
ù_addr
, &
ëhzîo
,

1115 
ùaddr
, 
ARP_REQUEST
);

1116 
	}
}

1126 
îr_t


1127 
	$ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif)

1129 
ëh_hdr
* 
ëhhdr
;

1132 
ëhhdr
 = 
p
->
∑ylﬂd
;

1133 
	`LWIP_DEBUGF
(
ETHARP_DEBUG
 | 
LWIP_DBG_TRACE
,

1135 ()
ëhhdr
->
de°
.
addr
[0], ()ethhdr->dest.addr[1], ()ethhdr->dest.addr[2],

1136 ()
ëhhdr
->
de°
.
addr
[3], ()ethhdr->dest.addr[4], ()ethhdr->dest.addr[5],

1137 ()
ëhhdr
->
§c
.
addr
[0], ()ethhdr->src.addr[1], ()ethhdr->src.addr[2],

1138 ()
ëhhdr
->
§c
.
addr
[3], ()ethhdr->src.addr[4], ()ethhdr->src.addr[5],

1139 ()
	`ht⁄s
(
ëhhdr
->
ty≥
)));

1141 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

1143 
ETHTYPE_IP
:

1144 #i‡
ETHARP_TRUST_IP_MAC


1146 
	`ëh¨p_ù_öput
(
√tif
, 
p
);

1149 if(
	`pbuf_hódî
(
p
, -(
s16_t
)(
ëh_hdr
))) {

1150 
	`LWIP_ASSERT
("Can't move over header inÖacket", 0);

1151 
	`pbuf_‰ì
(
p
);

1152 
p
 = 
NULL
;

1155 
	`ù_öput
(
p
, 
√tif
);

1159 
ETHTYPE_ARP
:

1161 
	`ëh¨p_¨p_öput
(
√tif
, (
ëh_addr
*)“ëif->
hwaddr
), 
p
);

1164 #i‡
PPPOE_SUPPORT


1165 
ETHTYPE_PPPOEDISC
:

1166 
	`µp€_disc_öput
(
√tif
, 
p
);

1169 
ETHTYPE_PPPOE
:

1170 
	`µp€_d©a_öput
(
√tif
, 
p
);

1175 
	`ETHARP_STATS_INC
(
ëh¨p
.
¥Ÿîr
);

1176 
	`ETHARP_STATS_INC
(
ëh¨p
.
dr›
);

1177 
	`pbuf_‰ì
(
p
);

1178 
p
 = 
NULL
;

1184  
ERR_OK
;

1185 
	}
}

	@net/lwip/netif/ethernetif.c

46 
	~"lwù/›t.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/mem.h
"

52 
	~"lwù/pbuf.h
"

53 
	~"lwù/sys.h
"

54 
	~<lwù/°©s.h
>

55 
	~<lwù/¢mp.h
>

56 
	~"√tif/ëh¨p.h
"

57 
	~"√tif/µp_€.h
"

60 
	#IFNAME0
 'e'

	)

61 
	#IFNAME1
 'n'

	)

69 
	sëhî√tif
 {

70 
ëh_addr
 *
	mëhaddr
;

75 
ëhî√tif_öput
(
√tif
 *netif);

85 
	$low_Àvñ_öô
(
√tif
 *netif)

87 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

90 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

93 
√tif
->
hwaddr
[0] = ;

95 
√tif
->
hwaddr
[5] = ;

98 
√tif
->
mtu
 = 1500;

102 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

105 
	}
}

123 
îr_t


124 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
)

126 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

127 
pbuf
 *
q
;

129 
öôüã
 
	`å™s„r
();

131 #i‡
ETH_PAD_SIZE


132 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

135 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

139 
£nd
 
d©a
 
	`‰om
(
q
->
∑ylﬂd
, q->
Àn
);

142 
sig«l
 
th©
 
∑ckë
 
should
 
be
 
	`£¡
();

144 #i‡
ETH_PAD_SIZE


145 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

148 
	`LINK_STATS_INC
(
lök
.
xmô
);

150  
ERR_OK
;

151 
	}
}

161 
pbuf
 *

162 
	$low_Àvñ_öput
(
√tif
 *netif)

164 
ëhî√tif
 *ëhî√ti‡
√tif
->
°©e
;

165 
pbuf
 *
p
, *
q
;

166 
u16_t
 
Àn
;

170 
Àn
 = ;

172 #i‡
ETH_PAD_SIZE


173 
Àn
 +
ETH_PAD_SIZE
;

177 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

179 i‡(
p
 !
NULL
) {

181 #i‡
ETH_PAD_SIZE


182 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

187 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

191 
ªad
 
d©a
 
	`öto
(
q
->
∑ylﬂd
, q->
Àn
);

193 
acknowÀdge
 
th©
 
∑ckë
 
has
 
bìn
 
	`ªad
();

195 #i‡
ETH_PAD_SIZE


196 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

199 
	`LINK_STATS_INC
(
lök
.
ªcv
);

201 
dr›
 
	`∑ckë
();

202 
	`LINK_STATS_INC
(
lök
.
memîr
);

203 
	`LINK_STATS_INC
(
lök
.
dr›
);

206  
p
;

207 
	}
}

219 
	$ëhî√tif_öput
(
√tif
 *netif)

221 
ëhî√tif
 *ethernetif;

222 
ëh_hdr
 *
ëhhdr
;

223 
pbuf
 *
p
;

225 
ëhî√tif
 = 
√tif
->
°©e
;

228 
p
 = 
	`low_Àvñ_öput
(
√tif
);

230 i‡(
p
 =
NULL
) ;

232 
ëhhdr
 = 
p
->
∑ylﬂd
;

234 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

236 
ETHTYPE_IP
:

237 
ETHTYPE_ARP
:

238 #i‡
PPPOE_SUPPORT


240 
ETHTYPE_PPPOEDISC
:

241 
ETHTYPE_PPPOE
:

244 i‡(
√tif
->
	`öput
(
p
,Çëif)!=
ERR_OK
)

245 { 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_input: IP inputÉrror\n"));

246 
	`pbuf_‰ì
(
p
);

247 
p
 = 
NULL
;

252 
	`pbuf_‰ì
(
p
);

253 
p
 = 
NULL
;

256 
	}
}

270 
îr_t


271 
	$ëhî√tif_öô
(
√tif
 *netif)

273 
ëhî√tif
 *ethernetif;

275 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

277 
ëhî√tif
 = 
	`mem_mÆloc
((ethernetif));

278 i‡(
ëhî√tif
 =
NULL
) {

279 
	`LWIP_DEBUGF
(
NETIF_DEBUG
, ("ethernetif_init: out of memory\n"));

280  
ERR_MEM
;

283 #i‡
LWIP_NETIF_HOSTNAME


285 
√tif
->
ho°«me
 = "lwip";

293 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, ???);

295 
√tif
->
°©e
 = 
ëhî√tif
;

296 
√tif
->
«me
[0] = 
IFNAME0
;

297 
√tif
->
«me
[1] = 
IFNAME1
;

302 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

303 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

305 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

308 
	`low_Àvñ_öô
(
√tif
);

310  
ERR_OK
;

311 
	}
}

	@net/lwip/netif/loopif.c

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_HAVE_LOOPIF


42 
	~"√tif/lo›if.h
"

43 
	~"lwù/¢mp.h
"

52 
îr_t


53 
	$lo›if_öô
(
√tif
 *netif)

58 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_so·w¨eLo›back
, 0);

60 
√tif
->
«me
[0] = 'l';

61 
√tif
->
«me
[1] = 'o';

62 
√tif
->
ouçut
 = 
√tif_lo›_ouçut
;

63  
ERR_OK
;

64 
	}
}

	@net/lwip/netif/ppp/auth.c

67 
	~"lwù/›t.h
"

69 #i‡
PPP_SUPPORT


71 
	~"µp.h
"

72 
	~"µpdebug.h
"

74 
	~"fsm.h
"

75 
	~"l˝.h
"

76 
	~"∑p.h
"

77 
	~"ch≠.h
"

78 
	~"auth.h
"

79 
	~"ù˝.h
"

81 #i‡
CBCP_SUPPORT


82 
	~"cb˝.h
"

90 
	#PAP_WITHPEER
 1

	)

91 
	#PAP_PEER
 2

	)

92 
	#CHAP_WITHPEER
 4

	)

93 
	#CHAP_PEER
 8

	)

100 
	sw‹dli°
 {

101 
w‹dli°
 *
	m√xt
;

102 
	mw‹d
[1];

109 *
¸y±
 (const *, const *);

113 
√tw‹k_pha£
 ();

114 
check_idÀ
 (*);

115 
c⁄√˘_time_expúed
 (*);

117 
logö
 (*, *, **, *);

119 
logout
 ();

120 
nuŒ_logö
 ();

121 
gë_∑p_∑sswd
 (, *, *);

122 
have_∑p_£¸ë
 ();

123 
have_ch≠_£¸ë
 (*, *, 
u32_t
);

124 
ù_addr_check
 (
u32_t
, 
w‹dli°
 *);

126 
£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
);

127 
‰ì_w‹dli°
 (
w‹dli°
 *);

129 #i‡
CBCP_SUPPORT


130 
ˇŒback_pha£
 ();

142 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


144 
	g≥î_auth«me
[
MAXNAMELEN
];

148 
	gauth_≥ndög
[
NUM_PPP
];

151 
	glogged_ö
;

154 
	gdid_authup
;

157 
w‹dli°
 *
	gaddªs£s
[
NUM_PPP
];

160 
	gnum_≈_›í
;

163 
	gnum_≈_up
;

165 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


167 
	g∑sswd_‰om_fûe
;

179 
	$lök_ªquúed
(
unô
)

181 
	`LWIP_UNUSED_ARG
(
unô
);

183 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ªquúed: %d\n", 
unô
));

184 
	}
}

191 
	$lök_ãrmö©ed
(
unô
)

193 
	`AUTHDEBUG
((
LOG_INFO
, "lök_ãrmö©ed: %d\n", 
unô
));

194 i‡(
l˝_pha£
[
unô
] =
PHASE_DEAD
) {

197 i‡(
logged_ö
) {

198 
	`logout
();

200 
l˝_pha£
[
unô
] = 
PHASE_DEAD
;

201 
	`AUTHDEBUG
((
LOG_NOTICE
, "ConnectionÅerminated.\n"));

202 
	`µpLökTîmö©ed
(
unô
);

203 
	}
}

209 
	$lök_down
(
unô
)

211 
i
;

212 
¥Ÿít
 *
¥Ÿp
;

214 
	`AUTHDEBUG
((
LOG_INFO
, "lök_down: %d\n", 
unô
));

215 i‡(
did_authup
) {

217 
did_authup
 = 0;

219 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

220 i‡(!
¥Ÿp
->
íabÀd_Êag
) {

223 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
lowîdown
 !
NULL
) {

224 (*
¥Ÿp
->
lowîdown
)(
unô
);

226 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
˛o£
 !
NULL
) {

227 (*
¥Ÿp
->
˛o£
)(
unô
, "LCP down");

230 
num_≈_›í
 = 0;

231 
num_≈_up
 = 0;

232 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

233 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

235 
	`µpLökDown
(
unô
);

236 
	}
}

243 
	$lök_e°ablished
(
unô
)

245 
auth
;

246 
i
;

247 
¥Ÿít
 *
¥Ÿp
;

248 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

249 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

250 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


251 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
unô
];

254 
	`AUTHDEBUG
((
LOG_INFO
, "lök_e°ablished: %d\n", 
unô
));

258 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

259 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_LCP
 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
lowîup
 !
NULL
) {

260 (*
¥Ÿp
->
lowîup
)(
unô
);

263 i‡(
µp_£âögs
.
auth_ªquúed
 && !(
go
->
√g_ch≠
 || go->
√g_u∑p
)) {

269 i‡(!
wo
->
√g_u∑p
 || !
	`nuŒ_logö
(
unô
)) {

270 
	`AUTHDEBUG
((
LOG_WARNING
, "peerÑefusedÅoáuthenticate\n"));

271 
	`l˝_˛o£
(
unô
, "peerÑefusedÅoáuthenticate");

276 
l˝_pha£
[
unô
] = 
PHASE_AUTHENTICATE
;

277 
auth
 = 0;

278 #i‡
CHAP_SUPPORT


279 i‡(
go
->
√g_ch≠
) {

280 
	`Ch≠AuthPìr
(
unô
, 
µp_£âögs
.
our_«me
, 
go
->
ch≠_mdty≥
);

281 
auth
 |
CHAP_PEER
;

284 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


287 #i‡
PAP_SUPPORT


288 i‡(
go
->
√g_u∑p
) {

289 
	`u∑p_auth≥î
(
unô
);

290 
auth
 |
PAP_PEER
;

293 #i‡
CHAP_SUPPORT


294 i‡(
ho
->
√g_ch≠
) {

295 
	`Ch≠AuthWôhPìr
(
unô
, 
µp_£âögs
.
u£r
, 
ho
->
ch≠_mdty≥
);

296 
auth
 |
CHAP_WITHPEER
;

299 #i‡
PAP_SUPPORT
 && 
CHAP_SUPPORT


302 #i‡
PAP_SUPPORT


303 i‡(
ho
->
√g_u∑p
) {

304 i‡(
µp_£âögs
.
∑sswd
[0] == 0) {

305 
∑sswd_‰om_fûe
 = 1;

306 i‡(!
	`gë_∑p_∑sswd
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
)) {

307 
	`AUTHDEBUG
((
LOG_ERR
, "No secret found for PAPÜogin\n"));

310 
	`u∑p_authwôh≥î
(
unô
, 
µp_£âögs
.
u£r
,Öµ_£âögs.
∑sswd
);

311 
auth
 |
PAP_WITHPEER
;

314 
auth_≥ndög
[
unô
] = 
auth
;

316 i‡(!
auth
) {

317 
	`√tw‹k_pha£
(
unô
);

319 
	}
}

325 
	$auth_≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

327 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

329 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

333 
	`l˝_˛o£
(
unô
, "Authentication failed");

334 
	}
}

337 #i‡
PAP_SUPPORT
 || 
CHAP_SUPPORT


342 
	$auth_≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
, *
«me
, 
«mñí
)

344 
pbô
;

346 
	`AUTHDEBUG
((
LOG_INFO
, "auth_≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

347 
¥Ÿocﬁ
) {

348 
PPP_CHAP
:

349 
pbô
 = 
CHAP_PEER
;

351 
PPP_PAP
:

352 
pbô
 = 
PAP_PEER
;

355 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

362 i‡(
«mñí
 > (
≥î_auth«me
) - 1) {

363 
«mñí
 = (
≥î_auth«me
) - 1;

365 
	`BCOPY
(
«me
, 
≥î_auth«me
, 
«mñí
);

366 
≥î_auth«me
[
«mñí
] = 0;

372 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

373 
	`√tw‹k_pha£
(
unô
);

375 
	}
}

381 
	$auth_wôh≥î_Áû
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

383 
îrCode
 = 
PPPERR_AUTHFAIL
;

385 
	`LWIP_UNUSED_ARG
(
¥Ÿocﬁ
);

387 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_Áû: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

388 i‡(
∑sswd_‰om_fûe
) {

389 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

396 
	`µpIOCé
(
unô
, 
PPPCTLS_ERRCODE
, &
îrCode
);

403 
	}
}

409 
	$auth_wôh≥î_suc˚ss
(
unô
, 
u16_t
 
¥Ÿocﬁ
)

411 
pbô
;

413 
	`AUTHDEBUG
((
LOG_INFO
, "auth_wôh≥î_suc˚ss: %dÖrŸo=%X\n", 
unô
, 
¥Ÿocﬁ
));

414 
¥Ÿocﬁ
) {

415 
PPP_CHAP
:

416 
pbô
 = 
CHAP_WITHPEER
;

418 
PPP_PAP
:

419 i‡(
∑sswd_‰om_fûe
) {

420 
	`BZERO
(
µp_£âögs
.
∑sswd
, 
MAXSECRETLEN
);

422 
pbô
 = 
PAP_WITHPEER
;

425 
	`AUTHDEBUG
((
LOG_WARNING
, "auth_≥î_suc˚ss: unknow¿¥Ÿocﬁ %x\n", 
¥Ÿocﬁ
));

426 
pbô
 = 0;

433 i‡((
auth_≥ndög
[
unô
] &~
pbô
) == 0) {

434 
	`√tw‹k_pha£
(
unô
);

436 
	}
}

444 
	$≈_up
(
unô
, 
u16_t
 
¥Ÿo
)

446 
	`LWIP_UNUSED_ARG
(
unô
);

447 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

449 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

450 i‡(
num_≈_up
 == 0) {

451 
	`AUTHDEBUG
((
LOG_INFO
, "≈_up: maxc⁄√˘=%d idÀ_time_limô=%d\n",
µp_£âögs
.
maxc⁄√˘
,µp_£âögs.
idÀ_time_limô
));

455 i‡(
µp_£âögs
.
idÀ_time_limô
 > 0) {

456 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
);

463 i‡(
µp_£âögs
.
maxc⁄√˘
 > 0) {

464 
	`TIMEOUT
(
c⁄√˘_time_expúed
, 0, 
µp_£âögs
.
maxc⁄√˘
);

467 ++
num_≈_up
;

468 
	}
}

474 
	$≈_down
(
unô
, 
u16_t
 
¥Ÿo
)

476 
	`LWIP_UNUSED_ARG
(
unô
);

477 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

479 
	`AUTHDEBUG
((
LOG_INFO
, "≈_down: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

480 i‡(--
num_≈_up
 =0 && 
µp_£âögs
.
idÀ_time_limô
 > 0) {

481 
	`UNTIMEOUT
(
check_idÀ
, 
NULL
);

483 
	}
}

489 
	$≈_föished
(
unô
, 
u16_t
 
¥Ÿo
)

491 
	`LWIP_UNUSED_ARG
(
unô
);

492 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

494 
	`AUTHDEBUG
((
LOG_INFO
, "≈_föished: %dÖrŸo=%X\n", 
unô
, 
¥Ÿo
));

495 i‡(--
num_≈_›í
 <= 0) {

497 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

499 
	}
}

507 
	$auth_ª£t
(
unô
)

509 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

510 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[0];

511 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

512 
u32_t
 
ªmŸe
;

514 
	`AUTHDEBUG
((
LOG_INFO
, "auth_ª£t: %d\n", 
unô
));

515 
ao
->
√g_u∑p
 = !
µp_£âögs
.
ªfu£_∑p
 && (µp_£âögs.
∑sswd
[0] !0 || 
	`gë_∑p_∑sswd
(
unô
, 
NULL
, NULL));

516 
ao
->
√g_ch≠
 = !
µp_£âögs
.
ªfu£_ch≠
 &&Öµ_£âögs.
∑sswd
[0] != 0 ;

518 i‡(
go
->
√g_u∑p
 && !
	`have_∑p_£¸ë
()) {

519 
go
->
√g_u∑p
 = 0;

521 i‡(
go
->
√g_ch≠
) {

522 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

523 i‡(!
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
)) {

524 
go
->
√g_ch≠
 = 0;

527 
	}
}

529 #i‡
PAP_SUPPORT


541 
	$check_∑sswd
–
unô
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, **
msg
, *
msgÀn
)

544 
	`LWIP_UNUSED_ARG
(
unô
);

545 
	`LWIP_UNUSED_ARG
(
au£r
);

546 
	`LWIP_UNUSED_ARG
(
u£æí
);

547 
	`LWIP_UNUSED_ARG
(
≠asswd
);

548 
	`LWIP_UNUSED_ARG
(
∑sswdÀn
);

549 
	`LWIP_UNUSED_ARG
(
msgÀn
);

550 *
msg
 = (*) 0;

551  
UPAP_AUTHACK
;

553 
ªt
 = 0;

554 
w‹dli°
 *
addrs
 = 
NULL
;

555 
∑sswd
[256], 
u£r
[256];

556 
£¸ë
[
MAXWORDLEN
];

557 
u_sh‹t
 
©ãm±s
 = 0;

562 
	`BCOPY
(
≠asswd
, 
∑sswd
, 
∑sswdÀn
);

563 
∑sswd
[
∑sswdÀn
] = '\0';

564 
	`BCOPY
(
au£r
, 
u£r
, 
u£æí
);

565 
u£r
[
u£æí
] = '\0';

566 *
msg
 = (*) 0;

569 
ªt
 = 
UPAP_AUTHACK
;

571 i‡(
ªt
 =
UPAP_AUTHNAK
) {

572 i‡(*
msg
 == (*) 0) {

573 *
msg
 = "Login incorrect";

575 *
msgÀn
 = 
	`°æí
(*
msg
);

581 i‡(
©ãm±s
++ >= 10) {

582 
	`AUTHDEBUG
((
LOG_WARNING
, "%d LOGIN FAILURES BY %s\n", 
©ãm±s
, 
u£r
));

585 i‡(
©ãm±s
 > 3) {

586 
	`sys_m¶ìp
((
©ãm±s
 - 3) * 5);

588 i‡(
addrs
 !
NULL
) {

589 
	`‰ì_w‹dli°
(
addrs
);

592 
©ãm±s
 = 0;

593 i‡(*
msg
 == (*) 0) {

594 *
msg
 = "Login ok";

596 *
msgÀn
 = 
	`°æí
(*
msg
);

597 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

600 
	`BZERO
(
∑sswd
, (passwd));

601 
	`BZERO
(
£¸ë
, (secret));

603  
ªt
;

605 
	}
}

614 
	$auth_ù_addr
(
unô
, 
u32_t
 
addr
)

616  
	`ù_addr_check
(
addr
, 
addªs£s
[
unô
]);

617 
	}
}

625 
	$bad_ù_adrs
(
u32_t
 
addr
)

627 
addr
 = 
	`¡ohl
(addr);

628  (
addr
 >> 
IN_CLASSA_NSHIFT
Ë=
IN_LOOPBACKNET


629 || 
	`IN_MULTICAST
(
addr
Ë|| 
	`IN_BADCLASS
(addr);

630 
	}
}

633 #i‡
CHAP_SUPPORT


639 
	$gë_£¸ë
–
unô
, *
˛õ¡
, *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
ßve_addrs
)

642 
Àn
;

643 
w‹dli°
 *
addrs
;

645 
	`LWIP_UNUSED_ARG
(
unô
);

646 
	`LWIP_UNUSED_ARG
(
£rvî
);

647 
	`LWIP_UNUSED_ARG
(
ßve_addrs
);

649 
addrs
 = 
NULL
;

651 if(!
˛õ¡
 || !˛õ¡[0] || 
	`°rcmp
(˛õ¡, 
µp_£âögs
.
u£r
)) {

655 
Àn
 = 
	`°æí
(
µp_£âögs
.
∑sswd
);

656 i‡(
Àn
 > 
MAXSECRETLEN
) {

657 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

658 
Àn
 = 
MAXSECRETLEN
;

661 
	`BCOPY
(
µp_£âögs
.
∑sswd
, 
£¸ë
, 
Àn
);

662 *
£¸ë_Àn
 = 
Àn
;

666 
ªt
 = 0, 
Àn
;

667 
w‹dli°
 *
addrs
;

668 
£cbuf
[
MAXWORDLEN
];

670 
addrs
 = 
NULL
;

671 
£cbuf
[0] = 0;

674 i‡(
ªt
 < 0) {

678 i‡(
ßve_addrs
) {

679 
	`£t_Ælowed_addrs
(
unô
, 
addrs
);

682 
Àn
 = 
	`°æí
(
£cbuf
);

683 i‡(
Àn
 > 
MAXSECRETLEN
) {

684 
	`AUTHDEBUG
((
LOG_ERR
, "Se¸ë f‹ %†⁄ %†i†toÿl⁄g\n", 
˛õ¡
, 
£rvî
));

685 
Àn
 = 
MAXSECRETLEN
;

688 
	`BCOPY
(
£cbuf
, 
£¸ë
, 
Àn
);

689 
	`BZERO
(
£cbuf
, (secbuf));

690 *
£¸ë_Àn
 = 
Àn
;

694 
	}
}

703 
	$auth_check_›ti⁄s
()

705 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[0];

706 
ˇn_auth
;

707 
ù˝_›ti⁄s
 *
ùwo
 = &
ù˝_w™t›ti⁄s
[0];

708 
u32_t
 
ªmŸe
;

711 i‡(
µp_£âögs
.
our_«me
[0] =0 ||Öµ_£âögs.
u£ho°«me
) {

712 
	`°r˝y
(
µp_£âögs
.
our_«me
,Öµ_£âögs.
ho°«me
);

715 i‡(
µp_£âögs
.
u£r
[0] == 0) {

716 
	`°r˝y
(
µp_£âögs
.
u£r
,Öµ_£âögs.
our_«me
);

720 i‡(
µp_£âögs
.
auth_ªquúed
 && !
wo
->
√g_ch≠
 && !wo->
√g_u∑p
) {

721 
wo
->
√g_ch≠
 = 1;

722 
wo
->
√g_u∑p
 = 1;

729 
ˇn_auth
 = 
wo
->
√g_u∑p
 && 
	`have_∑p_£¸ë
();

730 i‡(!
ˇn_auth
 && 
wo
->
√g_ch≠
) {

731 
ªmŸe
 = 
ùwo
->
ac˚±_ªmŸe
? 0: ipwo->
hißddr
;

732 
ˇn_auth
 = 
	`have_ch≠_£¸ë
(
µp_£âögs
.
ªmŸe_«me
,Öµ_£âögs.
our_«me
, 
ªmŸe
);

735 i‡(
µp_£âögs
.
auth_ªquúed
 && !
ˇn_auth
) {

736 
	`µp_∑nic
("Noáuth secret");

738 
	}
}

749 
	$√tw‹k_pha£
(
unô
)

751 
i
;

752 
¥Ÿít
 *
¥Ÿp
;

753 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
unô
];

758 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
Ë&& !
did_authup
) {

760 
did_authup
 = 1;

763 #i‡
CBCP_SUPPORT


767 i‡(
go
->
√g_cb˝
) {

768 
l˝_pha£
[
unô
] = 
PHASE_CALLBACK
;

769 (*
cb˝_¥Ÿít
.
›í
)(
unô
);

774 
l˝_pha£
[
unô
] = 
PHASE_NETWORK
;

775 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

776 i‡(
¥Ÿp
->
¥Ÿocﬁ
 < 0xC000 &&ÖrŸp->
íabÀd_Êag
 &&ÖrŸp->
›í
 !
NULL
) {

777 (*
¥Ÿp
->
›í
)(
unô
);

778 i‡(
¥Ÿp
->
¥Ÿocﬁ
 !
PPP_CCP
) {

779 ++
num_≈_›í
;

784 i‡(
num_≈_›í
 == 0) {

786 
	`l˝_˛o£
(0, "NoÇetworkÖrotocolsÑunning");

788 
	}
}

795 
	$check_idÀ
(*
¨g
)

797 
µp_idÀ
 
idÀ
;

798 
u_sh‹t
 
ôime
;

800 
	`LWIP_UNUSED_ARG
(
¨g
);

801 i‡(!
	`gë_idÀ_time
(0, &
idÀ
)) {

804 
ôime
 = 
	`LWIP_MIN
(
idÀ
.
xmô_idÀ
, idÀ.
ªcv_idÀ
);

805 i‡(
ôime
 >
µp_£âögs
.
idÀ_time_limô
) {

807 
	`AUTHDEBUG
((
LOG_INFO
, "Terminating connection dueÅoÜack ofáctivity.\n"));

808 
	`l˝_˛o£
(0, "Link inactive");

810 
	`TIMEOUT
(
check_idÀ
, 
NULL
, 
µp_£âögs
.
idÀ_time_limô
 - 
ôime
);

812 
	}
}

818 
	$c⁄√˘_time_expúed
(*
¨g
)

820 
	`LWIP_UNUSED_ARG
(
¨g
);

822 
	`AUTHDEBUG
((
LOG_INFO
, "ConnectÅimeÉxpired\n"));

823 
	`l˝_˛o£
(0, "ConnectÅimeÉxpired");

824 
	}
}

837 
	$logö
(*
u£r
, *
∑sswd
, **
msg
, *
msgÀn
)

840  (
UPAP_AUTHNAK
);

841 
	}
}

848 
	$logout
()

850 
logged_ö
 = 0;

851 
	}
}

859 
	$nuŒ_logö
(
unô
)

861 
	`LWIP_UNUSED_ARG
(
unô
);

864 
	}
}

872 
	$gë_∑p_∑sswd
(
unô
, *
u£r
, *
∑sswd
)

874 
	`LWIP_UNUSED_ARG
(
unô
);

880 if(
u£r
) {

881 
	`°r˝y
(
u£r
, "none");

883 if(
∑sswd
) {

884 
	`°r˝y
(
∑sswd
, "none");

887 
	}
}

894 
	$have_∑p_£¸ë
()

898 
	}
}

907 
	$have_ch≠_£¸ë
(*
˛õ¡
, *
£rvî
, 
u32_t
 
ªmŸe
)

909 
	`LWIP_UNUSED_ARG
(
˛õ¡
);

910 
	`LWIP_UNUSED_ARG
(
£rvî
);

911 
	`LWIP_UNUSED_ARG
(
ªmŸe
);

914 
	}
}

921 
	$£t_Ælowed_addrs
(
unô
, 
w‹dli°
 *
addrs
)

923 i‡(
addªs£s
[
unô
] !
NULL
) {

924 
	`‰ì_w‹dli°
(
addªs£s
[
unô
]);

926 
addªs£s
[
unô
] = 
addrs
;

933 i‡(
addrs
 !
NULL
 &&áddrs->
√xt
 == NULL) {

934 *
p
 = 
addrs
->
w‹d
;

935 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

936 
u32_t
 
a
;

937 
ho°ít
 *
hp
;

939 i‡(
wo
->
hißddr
 =0 && *
p
 !'!' && *∞!'-' && 
	`°rchr
’, '/'Ë=
NULL
) {

940 
hp
 = 
	`gëho°by«me
(
p
);

941 i‡(
hp
 !
NULL
 && hp->
h_addπy≥
 =
AF_INET
) {

942 
a
 = *(
u32_t
 *)
hp
->
h_addr
;

944 
a
 = 
	`öë_addr
(
p
);

946 i‡(
a
 !(
u32_t
) -1) {

947 
wo
->
hißddr
 = 
a
;

952 
	}
}

956 
	$ù_addr_check
(
u32_t
 
addr
, 
w‹dli°
 *
addrs
)

959 i‡(
	`bad_ù_adrs
(
addr
)) {

963 i‡(
addrs
 =
NULL
) {

964  !
µp_£âögs
.
auth_ªquúed
;

969 
	}
}

976 
	$‰ì_w‹dli°
(
w‹dli°
 *
wp
)

978 
w‹dli°
 *
√xt
;

980 
wp
 !
NULL
) {

981 
√xt
 = 
wp
->next;

982 
	`‰ì
(
wp
);

983 
wp
 = 
√xt
;

985 
	}
}

	@net/lwip/netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@net/lwip/netif/ppp/chap.c

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
CHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"magic.h
"

79 
	~"øndm.h
"

80 
	~"auth.h
"

81 
	~"md5.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

102 
Ch≠Inô
 ();

103 
Ch≠LowîUp
 ();

104 
Ch≠LowîDown
 ();

105 
Ch≠I≈ut
 (, 
u_ch¨
 *, );

106 
Ch≠PrŸocﬁReje˘
 ();

108 
Ch≠PrötPkt
 (
u_ch¨
 *, , (*) (*, *, ...), *);

111 
	`Ch≠ChÆÀngeTimeout
 (*);

112 
	`Ch≠Re•⁄£Timeout
 (*);

113 
	`Ch≠Re˚iveChÆÀnge
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

114 
	`Ch≠RechÆÀnge
 (*);

115 
	`Ch≠Re˚iveRe•⁄£
 (
ch≠_°©e
 *, 
u_ch¨
 *, , );

116 
	`Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

117 
	`Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
);

118 
	`Ch≠SídSètus
 (
ch≠_°©e
 *, );

119 
	`Ch≠SídChÆÀnge
 (
ch≠_°©e
 *);

120 
	`Ch≠SídRe•⁄£
 (
ch≠_°©e
 *);

121 
	`Ch≠GíChÆÀnge
 (
ch≠_°©e
 *);

127 
ch≠_°©e
 
ch≠
[
NUM_PPP
];

129 
¥Ÿít
 
ch≠_¥Ÿít
 = {

130 
PPP_CHAP
,

131 
Ch≠Inô
,

132 
Ch≠I≈ut
,

133 
Ch≠PrŸocﬁReje˘
,

134 
Ch≠LowîUp
,

135 
Ch≠LowîDown
,

136 
NULL
,

137 
NULL
,

139 
Ch≠PrötPkt
,

140 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL


149 
	}
};

160 
	$Ch≠AuthWôhPìr
(
unô
, *
our_«me
, 
dige°
)

162 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

164 
c°©e
->
ª•_«me
 = 
our_«me
;

165 
c°©e
->
ª•_ty≥
 = 
dige°
;

167 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
 ||

168 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

170 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_PENDING
;

179 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

180 
	}
}

187 
	$Ch≠AuthPìr
(
unô
, *
our_«me
, 
dige°
)

189 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

191 
c°©e
->
chÆ_«me
 = 
our_«me
;

192 
c°©e
->
chÆ_ty≥
 = 
dige°
;

194 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
 ||

195 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

197 
c°©e
->
£rvî°©e
 = 
CHAPSS_PENDING
;

201 
	`Ch≠GíChÆÀnge
(
c°©e
);

202 
	`Ch≠SídChÆÀnge
(
c°©e
);

203 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

204 
	}
}

214 
	$Ch≠Inô
(
unô
)

216 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

218 
	`BZERO
(
c°©e
, (*cstate));

219 
c°©e
->
unô
 = unit;

220 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

221 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

222 
c°©e
->
timeouâime
 = 
CHAP_DEFTIMEOUT
;

223 
c°©e
->
max_å™smôs
 = 
CHAP_DEFTRANSMITS
;

225 
	}
}

232 
	$Ch≠ChÆÀngeTimeout
(*
¨g
)

234 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

238 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL_CHAL
 &&

239 
c°©e
->
£rvî°©e
 !
CHAPSS_RECHALLENGE
) {

243 i‡(
c°©e
->
chÆ_å™smôs
 >c°©e->
max_å™smôs
) {

245 
	`CHAPDEBUG
((
LOG_ERR
, "Peer failedÅoÑespondÅo CHAP challenge\n"));

246 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

247 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

251 
	`Ch≠SídChÆÀnge
(
c°©e
);

252 
	}
}

259 
	$Ch≠Re•⁄£Timeout
(*
¨g
)

261 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

264 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

268 
	`Ch≠SídRe•⁄£
(
c°©e
);

269 
	}
}

276 
	$Ch≠RechÆÀnge
(*
¨g
)

278 
ch≠_°©e
 *
c°©e
 = (ch≠_°©ê*Ë
¨g
;

281 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_OPEN
) {

285 
	`Ch≠GíChÆÀnge
(
c°©e
);

286 
	`Ch≠SídChÆÀnge
(
c°©e
);

287 
c°©e
->
£rvî°©e
 = 
CHAPSS_RECHALLENGE
;

288 
	}
}

297 
	$Ch≠LowîUp
(
unô
)

299 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

301 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_INITIAL
) {

302 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_CLOSED
;

303 } i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

304 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_LISTEN
;

307 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL
) {

308 
c°©e
->
£rvî°©e
 = 
CHAPSS_CLOSED
;

309 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

310 
	`Ch≠GíChÆÀnge
(
c°©e
);

311 
	`Ch≠SídChÆÀnge
(
c°©e
);

312 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL_CHAL
;

314 
	}
}

323 
	$Ch≠LowîDown
(
unô
)

325 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

328 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_INITIAL_CHAL
 ||

329 
c°©e
->
£rvî°©e
 =
CHAPSS_RECHALLENGE
) {

330 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

331 } i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN


332 && 
c°©e
->
chÆ_öãrvÆ
 != 0) {

333 
	`UNTIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
);

335 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

336 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

338 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_INITIAL
;

339 
c°©e
->
£rvî°©e
 = 
CHAPSS_INITIAL
;

340 
	}
}

347 
	$Ch≠PrŸocﬁReje˘
(
unô
)

349 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

351 i‡(
c°©e
->
£rvî°©e
 !
CHAPSS_INITIAL
 &&

352 
c°©e
->
£rvî°©e
 !
CHAPSS_CLOSED
) {

353 
	`auth_≥î_Áû
(
unô
, 
PPP_CHAP
);

355 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_INITIAL
 &&

356 
c°©e
->
˛õ¡°©e
 !
CHAPCS_CLOSED
) {

357 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_CHAP
);

359 
	`Ch≠LowîDown
(
unô
);

360 
	}
}

367 
	$Ch≠I≈ut
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
∑ckë_Àn
)

369 
ch≠_°©e
 *
c°©e
 = &
ch≠
[
unô
];

370 
u_ch¨
 *
öp
;

371 
u_ch¨
 
code
, 
id
;

372 
Àn
;

378 
öp
 = 
ö∑ckë
;

379 i‡(
∑ckë_Àn
 < 
CHAP_HEADERLEN
) {

380 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd short header.\n"));

383 
	`GETCHAR
(
code
, 
öp
);

384 
	`GETCHAR
(
id
, 
öp
);

385 
	`GETSHORT
(
Àn
, 
öp
);

386 i‡(
Àn
 < 
CHAP_HEADERLEN
) {

387 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd illegalÜength.\n"));

390 i‡(
Àn
 > 
∑ckë_Àn
) {

391 
	`CHAPDEBUG
((
LOG_INFO
, "ChapInput:Ñcvd shortÖacket.\n"));

394 
Àn
 -
CHAP_HEADERLEN
;

399 
code
) {

400 
CHAP_CHALLENGE
:

401 
	`Ch≠Re˚iveChÆÀnge
(
c°©e
, 
öp
, 
id
, 
Àn
);

404 
CHAP_RESPONSE
:

405 
	`Ch≠Re˚iveRe•⁄£
(
c°©e
, 
öp
, 
id
, 
Àn
);

408 
CHAP_FAILURE
:

409 
	`Ch≠Re˚iveFaûuª
(
c°©e
, 
öp
, 
id
, 
Àn
);

412 
CHAP_SUCCESS
:

413 
	`Ch≠Re˚iveSuc˚ss
(
c°©e
, 
öp
, 
id
, 
Àn
);

417 
	`CHAPDEBUG
((
LOG_WARNING
, "Unknow¿CHAP codê(%dËª˚ived.\n", 
code
));

420 
	}
}

427 
	$Ch≠Re˚iveChÆÀnge
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

429 
rchÆÀnge_Àn
;

430 
u_ch¨
 *
rchÆÀnge
;

431 
£¸ë_Àn
;

432 
£¸ë
[
MAXSECRETLEN
];

433 
rho°«me
[256];

434 
MD5_CTX
 
mdC⁄ãxt
;

435 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

437 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: Rcvd id %d.\n", 
id
));

438 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_CLOSED
 ||

439 
c°©e
->
˛õ¡°©e
 =
CHAPCS_PENDING
) {

440 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge: in state %d\n",

441 
c°©e
->
˛õ¡°©e
));

445 i‡(
Àn
 < 2) {

446 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

450 
	`GETCHAR
(
rchÆÀnge_Àn
, 
öp
);

451 
Àn
 - (
u_ch¨
Ë+ 
rchÆÀnge_Àn
;

452 i‡(
Àn
 < 0) {

453 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveChallenge:Ñcvd shortÖacket.\n"));

456 
rchÆÀnge
 = 
öp
;

457 
	`INCPTR
(
rchÆÀnge_Àn
, 
öp
);

459 i‡(
Àn
 >(
rho°«me
)) {

460 
Àn
 = (
rho°«me
) - 1;

462 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

463 
rho°«me
[
Àn
] = '\000';

465 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge:Ñe˚ivedÇamêfõld '%s'\n", 
rho°«me
));

468 i‡(
µp_£âögs
.
ªmŸe_«me
[0] !0 && (µp_£âögs.
ex∂icô_ªmŸe
 || 
rho°«me
[0] == 0)) {

469 
	`°∫˝y
(
rho°«me
, 
µp_£âögs
.
ªmŸe_«me
, (rhostname));

470 
rho°«me
[(rhostname) - 1] = 0;

471 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveChÆÀnge: usög '%s'á†ªmŸê«me\n", 
rho°«me
));

475 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, c°©e->
ª•_«me
, 
rho°«me
, 
£¸ë
, &
£¸ë_Àn
, 0)) {

476 
£¸ë_Àn
 = 0;

477 
	`CHAPDEBUG
((
LOG_WARNING
, "NÿCHAP se¸ë found f‹áuthítiˇtög u†tÿ%s\n", 
rho°«me
));

481 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_RESPONSE
) {

482 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

485 
c°©e
->
ª•_id
 = 
id
;

486 
c°©e
->
ª•_å™smôs
 = 0;

489 
c°©e
->
ª•_ty≥
) {

491 
CHAP_DIGEST_MD5
:

492 
	`MD5Inô
(&
mdC⁄ãxt
);

493 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
ª•_id
, 1);

494 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

495 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
rchÆÀnge
, 
rchÆÀnge_Àn
);

496 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

497 
	`BCOPY
(
hash
, 
c°©e
->
ª•⁄£
, 
MD5_SIGNATURE_SIZE
);

498 
c°©e
->
ª•_Àngth
 = 
MD5_SIGNATURE_SIZE
;

501 #ifde‡
CHAPMS


502 
CHAP_MICROSOFT
:

503 
	`Ch≠MS
(
c°©e
, 
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
);

508 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
ª•_ty≥
));

512 
	`BZERO
(
£¸ë
, (secret));

513 
	`Ch≠SídRe•⁄£
(
c°©e
);

514 
	}
}

521 
	$Ch≠Re˚iveRe•⁄£
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

523 
u_ch¨
 *
ªmmd
, 
ªmmd_Àn
;

524 
£¸ë_Àn
, 
ﬁd_°©e
;

525 
code
;

526 
rho°«me
[256];

527 
MD5_CTX
 
mdC⁄ãxt
;

528 
£¸ë
[
MAXSECRETLEN
];

529 
u_ch¨
 
hash
[
MD5_SIGNATURE_SIZE
];

531 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£: Rcvd id %d.\n", 
id
));

533 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_CLOSED
 ||

534 
c°©e
->
£rvî°©e
 =
CHAPSS_PENDING
) {

535 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse: in state %d\n",

536 
c°©e
->
£rvî°©e
));

540 i‡(
id
 !
c°©e
->
chÆ_id
) {

549 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_OPEN
) {

550 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_SUCCESS
);

553 i‡(
c°©e
->
£rvî°©e
 =
CHAPSS_BADAUTH
) {

554 
	`Ch≠SídSètus
(
c°©e
, 
CHAP_FAILURE
);

558 i‡(
Àn
 < 2) {

559 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

562 
	`GETCHAR
(
ªmmd_Àn
, 
öp
);

563 
ªmmd
 = 
öp
;

564 
	`INCPTR
(
ªmmd_Àn
, 
öp
);

566 
Àn
 - (
u_ch¨
Ë+ 
ªmmd_Àn
;

567 i‡(
Àn
 < 0) {

568 
	`CHAPDEBUG
((
LOG_INFO
, "ChapReceiveResponse:Ñcvd shortÖacket.\n"));

572 
	`UNTIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
);

574 i‡(
Àn
 >(
rho°«me
)) {

575 
Àn
 = (
rho°«me
) - 1;

577 
	`BCOPY
(
öp
, 
rho°«me
, 
Àn
);

578 
rho°«me
[
Àn
] = '\000';

580 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveRe•⁄£:Ñe˚ivedÇamêfõld: %s\n", 
rho°«me
));

586 
code
 = 
CHAP_FAILURE
;

587 i‡(!
	`gë_£¸ë
(
c°©e
->
unô
, 
rho°«me
, c°©e->
chÆ_«me
, 
£¸ë
, &
£¸ë_Àn
, 1)) {

589 
	`CHAPDEBUG
((
LOG_WARNING
, "No CHAP secret found foráuthenticating %s\n",

590 
rho°«me
));

593 
c°©e
->
chÆ_ty≥
) {

595 
CHAP_DIGEST_MD5
:

596 i‡(
ªmmd_Àn
 !
MD5_SIGNATURE_SIZE
) {

599 
	`MD5Inô
(&
mdC⁄ãxt
);

600 
	`MD5Upd©e
(&
mdC⁄ãxt
, &
c°©e
->
chÆ_id
, 1);

601 
	`MD5Upd©e
(&
mdC⁄ãxt
, (
u_ch¨
*)
£¸ë
, 
£¸ë_Àn
);

602 
	`MD5Upd©e
(&
mdC⁄ãxt
, 
c°©e
->
chÆÀnge
, c°©e->
chÆ_Àn
);

603 
	`MD5FöÆ
(
hash
, &
mdC⁄ãxt
);

606 i‡(
	`memcmp
 (
hash
, 
ªmmd
, 
MD5_SIGNATURE_SIZE
) == 0) {

607 
code
 = 
CHAP_SUCCESS
;

612 
	`CHAPDEBUG
((
LOG_INFO
, "unknow¿dige°Åy≥ %d\n", 
c°©e
->
chÆ_ty≥
));

616 
	`BZERO
(
£¸ë
, (secret));

617 
	`Ch≠SídSètus
(
c°©e
, 
code
);

619 i‡(
code
 =
CHAP_SUCCESS
) {

620 
ﬁd_°©e
 = 
c°©e
->
£rvî°©e
;

621 
c°©e
->
£rvî°©e
 = 
CHAPSS_OPEN
;

622 i‡(
ﬁd_°©e
 =
CHAPSS_INITIAL_CHAL
) {

623 
	`auth_≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
, 
rho°«me
, 
Àn
);

625 i‡(
c°©e
->
chÆ_öãrvÆ
 != 0) {

626 
	`TIMEOUT
(
Ch≠RechÆÀnge
, 
c°©e
, c°©e->
chÆ_öãrvÆ
);

629 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPÖeeráuthentication failed\n"));

630 
c°©e
->
£rvî°©e
 = 
CHAPSS_BADAUTH
;

631 
	`auth_≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

633 
	}
}

639 
	$Ch≠Re˚iveSuc˚ss
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

641 
	`LWIP_UNUSED_ARG
(
id
);

642 
	`LWIP_UNUSED_ARG
(
öp
);

644 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: Rcvd id %d.\n", 
id
));

646 i‡(
c°©e
->
˛õ¡°©e
 =
CHAPCS_OPEN
) {

651 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

653 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveSuc˚ss: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

657 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

662 i‡(
Àn
 > 0) {

663 
	`PRINTMSG
(
öp
, 
Àn
);

666 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_OPEN
;

668 
	`auth_wôh≥î_suc˚ss
(
c°©e
->
unô
, 
PPP_CHAP
);

669 
	}
}

676 
	$Ch≠Re˚iveFaûuª
(
ch≠_°©e
 *
c°©e
, 
u_ch¨
 *
öp
, u_ch¨ 
id
, 
Àn
)

678 
	`LWIP_UNUSED_ARG
(
id
);

679 
	`LWIP_UNUSED_ARG
(
öp
);

681 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: Rcvd id %d.\n", 
id
));

683 i‡(
c°©e
->
˛õ¡°©e
 !
CHAPCS_RESPONSE
) {

685 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠Re˚iveFaûuª: i¿°©ê%d\n", 
c°©e
->
˛õ¡°©e
));

689 
	`UNTIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
);

694 i‡(
Àn
 > 0) {

695 
	`PRINTMSG
(
öp
, 
Àn
);

698 
	`CHAPDEBUG
((
LOG_ERR
, "CHAPáuthentication failed\n"));

699 
	`auth_wôh≥î_Áû
(
c°©e
->
unô
, 
PPP_CHAP
);

700 
	}
}

707 
	$Ch≠SídChÆÀnge
(
ch≠_°©e
 *
c°©e
)

709 
u_ch¨
 *
ouç
;

710 
chÆ_Àn
, 
«me_Àn
;

711 
ouéí
;

713 
chÆ_Àn
 = 
c°©e
->chal_len;

714 
«me_Àn
 = 
	`°æí
(
c°©e
->
chÆ_«me
);

715 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
chÆ_Àn
 + 
«me_Àn
;

716 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

718 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

720 
	`PUTCHAR
(
CHAP_CHALLENGE
, 
ouç
);

721 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

722 
	`PUTSHORT
(
ouéí
, 
ouç
);

724 
	`PUTCHAR
(
chÆ_Àn
, 
ouç
);

725 
	`BCOPY
(
c°©e
->
chÆÀnge
, 
ouç
, 
chÆ_Àn
);

726 
	`INCPTR
(
chÆ_Àn
, 
ouç
);

728 
	`BCOPY
(
c°©e
->
chÆ_«me
, 
ouç
, 
«me_Àn
);

730 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

732 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídChÆÀnge: Síàid %d.\n", 
c°©e
->
chÆ_id
));

734 
	`TIMEOUT
(
Ch≠ChÆÀngeTimeout
, 
c°©e
, c°©e->
timeouâime
);

735 ++
c°©e
->
chÆ_å™smôs
;

736 
	}
}

743 
	$Ch≠SídSètus
(
ch≠_°©e
 *
c°©e
, 
code
)

745 
u_ch¨
 *
ouç
;

746 
ouéí
, 
msgÀn
;

747 
msg
[256];

749 i‡(
code
 =
CHAP_SUCCESS
) {

750 
	`°r˝y
(
msg
, "Welcome!");

752 
	`°r˝y
(
msg
, "I don'tÜike you. Go 'way.");

754 
msgÀn
 = 
	`°æí
(
msg
);

756 
ouéí
 = 
CHAP_HEADERLEN
 + 
msgÀn
;

757 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

759 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

761 
	`PUTCHAR
(
code
, 
ouç
);

762 
	`PUTCHAR
(
c°©e
->
chÆ_id
, 
ouç
);

763 
	`PUTSHORT
(
ouéí
, 
ouç
);

764 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

765 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

767 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠SídSètus: Síàcodê%d, id %d.\n", 
code
, 
c°©e
->
chÆ_id
));

768 
	}
}

778 
	$Ch≠GíChÆÀnge
(
ch≠_°©e
 *
c°©e
)

780 
chÆ_Àn
;

781 
u_ch¨
 *
±r
 = 
c°©e
->
chÆÀnge
;

782 
i
;

786 
chÆ_Àn
 = ()

787 ((((
	`magic
() >> 16) *

788 (
MAX_CHALLENGE_LENGTH
 - 
MIN_CHALLENGE_LENGTH
)) >> 16)

789 + 
MIN_CHALLENGE_LENGTH
);

790 
c°©e
->
chÆ_Àn
 = chal_len;

791 
c°©e
->
chÆ_id
 = ++c°©e->
id
;

792 
c°©e
->
chÆ_å™smôs
 = 0;

795 
i
 = 0; i < 
chÆ_Àn
; i++ ) {

796 *
±r
++ = (Ë(
	`magic
() & 0xff);

798 
	}
}

806 
	$Ch≠SídRe•⁄£
(
ch≠_°©e
 *
c°©e
)

808 
u_ch¨
 *
ouç
;

809 
ouéí
, 
md_Àn
, 
«me_Àn
;

811 
md_Àn
 = 
c°©e
->
ª•_Àngth
;

812 
«me_Àn
 = 
	`°æí
(
c°©e
->
ª•_«me
);

813 
ouéí
 = 
CHAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
md_Àn
 + 
«me_Àn
;

814 
ouç
 = 
ouçackë_buf
[
c°©e
->
unô
];

816 
	`MAKEHEADER
(
ouç
, 
PPP_CHAP
);

818 
	`PUTCHAR
(
CHAP_RESPONSE
, 
ouç
);

819 
	`PUTCHAR
(
c°©e
->
ª•_id
, 
ouç
);

820 
	`PUTSHORT
(
ouéí
, 
ouç
);

822 
	`PUTCHAR
(
md_Àn
, 
ouç
);

823 
	`BCOPY
(
c°©e
->
ª•⁄£
, 
ouç
, 
md_Àn
);

824 
	`INCPTR
(
md_Àn
, 
ouç
);

826 
	`BCOPY
(
c°©e
->
ª•_«me
, 
ouç
, 
«me_Àn
);

829 
	`µpWrôe
(
c°©e
->
unô
, 
ouçackë_buf
[c°©e->unô], 
ouéí
 + 
PPP_HDRLEN
);

831 
c°©e
->
˛õ¡°©e
 = 
CHAPCS_RESPONSE
;

832 
	`TIMEOUT
(
Ch≠Re•⁄£Timeout
, 
c°©e
, c°©e->
timeouâime
);

833 ++
c°©e
->
ª•_å™smôs
;

834 
	}
}

837 *
	gCh≠Codíames
[] = {

844 
Ch≠PrötPkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

846 
code
, 
id
, 
Àn
;

847 
˛í
, 
∆í
;

848 
u_ch¨
 
x
;

850 i‡(
∂í
 < 
CHAP_HEADERLEN
) {

853 
	`GETCHAR
(
code
, 
p
);

854 
	`GETCHAR
(
id
, 
p
);

855 
	`GETSHORT
(
Àn
, 
p
);

856 i‡(
Àn
 < 
CHAP_HEADERLEN
 ||Üí > 
∂í
) {

859 i‡(
code
 >1 && codê<(
Ch≠Codíames
) / (*)) {

860 
	`¥öãr
(
¨g
, " %s", 
Ch≠Codíames
[
code
-1]);

862 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

864 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

865 
Àn
 -
CHAP_HEADERLEN
;

866 
code
) {

867 
CHAP_CHALLENGE
:

868 
CHAP_RESPONSE
:

869 i‡(
Àn
 < 1) {

872 
˛í
 = 
p
[0];

873 i‡(
Àn
 < 
˛í
 + 1) {

876 ++
p
;

877 
∆í
 = 
Àn
 - 
˛í
 - 1;

878 
	`¥öãr
(
¨g
, " <");

879 ; 
˛í
 > 0; --clen) {

880 
	`GETCHAR
(
x
, 
p
);

881 
	`¥öãr
(
¨g
, "%.2x", 
x
);

883 
	`¥öãr
(
¨g
, ">,Çamê%.*Z", 
∆í
, 
p
);

885 
CHAP_FAILURE
:

886 
CHAP_SUCCESS
:

887 
	`¥öãr
(
¨g
, " %.*Z", 
Àn
, 
p
);

890 
˛í
 = 
Àn
; clen > 0; --clen) {

891 
	`GETCHAR
(
x
, 
p
);

892 
	`¥öãr
(
¨g
, " %.2x", 
x
);

896  
Àn
 + 
CHAP_HEADERLEN
;

897 
	}
}

	@net/lwip/netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

76 
	#CHAP_HEADERLEN
 4

	)

82 
	#CHAP_DIGEST_MD5
 5

	)

83 
	#MD5_SIGNATURE_SIZE
 16

	)

84 
	#CHAP_MICROSOFT
 0x80

	)

85 
	#MS_CHAP_RESPONSE_LEN
 49

	)

87 
	#CHAP_CHALLENGE
 1

	)

88 
	#CHAP_RESPONSE
 2

	)

89 
	#CHAP_SUCCESS
 3

	)

90 
	#CHAP_FAILURE
 4

	)

95 
	#MIN_CHALLENGE_LENGTH
 32

	)

96 
	#MAX_CHALLENGE_LENGTH
 64

	)

97 
	#MAX_RESPONSE_LENGTH
 64

	)

102 
	#CHAPCS_INITIAL
 0

	)

103 
	#CHAPCS_CLOSED
 1

	)

104 
	#CHAPCS_PENDING
 2

	)

105 
	#CHAPCS_LISTEN
 3

	)

106 
	#CHAPCS_RESPONSE
 4

	)

107 
	#CHAPCS_OPEN
 5

	)

112 
	#CHAPSS_INITIAL
 0

	)

113 
	#CHAPSS_CLOSED
 1

	)

114 
	#CHAPSS_PENDING
 2

	)

115 
	#CHAPSS_INITIAL_CHAL
 3

	)

116 
	#CHAPSS_OPEN
 4

	)

117 
	#CHAPSS_RECHALLENGE
 5

	)

118 
	#CHAPSS_BADAUTH
 6

	)

128 
	sch≠_°©e
 {

129 
	munô
;

130 
	m˛õ¡°©e
;

131 
	m£rvî°©e
;

132 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

133 
u_ch¨
 
	mchÆ_Àn
;

134 
u_ch¨
 
	mchÆ_id
;

135 
u_ch¨
 
	mchÆ_ty≥
;

136 
u_ch¨
 
	mid
;

137 *
	mchÆ_«me
;

138 
	mchÆ_öãrvÆ
;

139 
	mtimeouâime
;

140 
	mmax_å™smôs
;

141 
	mchÆ_å™smôs
;

142 
	mª•_å™smôs
;

143 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

144 
u_ch¨
 
	mª•_Àngth
;

145 
u_ch¨
 
	mª•_id
;

146 
u_ch¨
 
	mª•_ty≥
;

147 *
	mª•_«me
;

148 } 
	tch≠_°©e
;

154 
ch≠_°©e
 
ch≠
[];

156 
¥Ÿít
 
ch≠_¥Ÿít
;

163 
Ch≠AuthWôhPìr
 (, *, );

164 
Ch≠AuthPìr
 (, *, );

	@net/lwip/netif/ppp/chpms.c

67 
	#USE_CRYPT


	)

69 
	~"lwù/›t.h
"

71 #i‡
PPP_SUPPORT


73 #i‡
MSCHAP_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"md4.h
"

79 #i‚de‡
USE_CRYPT


80 
	~"des.h
"

82 
	~"ch≠.h
"

83 
	~"chpms.h
"

95 
u_ch¨
 
	mLANM™Re•
[24];

96 
u_ch¨
 
	mNTRe•
[24];

97 
u_ch¨
 
	mU£NT
;

98 } 
	tMS_Ch≠Re•⁄£
;

109 
£tkey
(const *);

110 
í¸y±
(*, );

112 
DesEn¸y±
 (
u_ch¨
 *, u_char *, u_char *);

113 
MakeKey
 (
u_ch¨
 *, u_char *);

115 #ifde‡
USE_CRYPT


116 
Ex∑nd
 (
u_ch¨
 *, u_char *);

117 
Cﬁœp£
 (
u_ch¨
 *, u_char *);

120 
ChÆÀngeRe•⁄£
(

121 
u_ch¨
 *
chÆÀnge
,

122 
u_ch¨
 *
pwHash
,

123 
u_ch¨
 *
ª•⁄£


125 
Ch≠MS_NT
(

126 *
rchÆÀnge
,

127 
rchÆÀnge_Àn
,

128 *
£¸ë
,

129 
£¸ë_Àn
,

130 
MS_Ch≠Re•⁄£
 *
ª•⁄£


132 
u_ch¨
 
Gë7Bôs
(

133 
u_ch¨
 *
öput
,

134 
°¨tBô


142 
	$Ch≠MS
–
ch≠_°©e
 *
c°©e
, *
rchÆÀnge
, 
rchÆÀnge_Àn
, *
£¸ë
, 
£¸ë_Àn
)

144 
MS_Ch≠Re•⁄£
 
ª•⁄£
;

145 #ifde‡
MSLANMAN


146 
ms_œnm™
;

150 
	`CHAPDEBUG
((
LOG_INFO
, "Ch≠MS: se¸ë i†'%.*s'\n", 
£¸ë_Àn
, 
£¸ë
));

152 
	`BZERO
(&
ª•⁄£
, (response));

155 
	`Ch≠MS_NT
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

157 #ifde‡
MSLANMAN


158 
	`Ch≠MS_LANM™
(
rchÆÀnge
, 
rchÆÀnge_Àn
, 
£¸ë
, 
£¸ë_Àn
, &
ª•⁄£
);

161 
ª•⁄£
.
U£NT
 = !
ms_œnm™
;

163 
ª•⁄£
.
U£NT
 = 1;

166 
	`BCOPY
(&
ª•⁄£
, 
c°©e
->ª•⁄£, 
MS_CHAP_RESPONSE_LEN
);

167 
c°©e
->
ª•_Àngth
 = 
MS_CHAP_RESPONSE_LEN
;

168 
	}
}

175 
	$ChÆÀngeRe•⁄£
–
u_ch¨
 *
chÆÀnge
,

176 
u_ch¨
 *
pwHash
,

177 
u_ch¨
 *
ª•⁄£
 )

179 
ZPassw‹dHash
[21];

181 
	`BZERO
(
ZPassw‹dHash
, (ZPasswordHash));

182 
	`BCOPY
(
pwHash
, 
ZPassw‹dHash
, 16);

185 
	`log_∑ckë
(
ZPassw‹dHash
, (ZPassw‹dHash), "ChÆÀngeRe•⁄£ - ZPassw‹dHash", 
LOG_DEBUG
);

188 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 0, 
ª•⁄£
 + 0);

189 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 7, 
ª•⁄£
 + 8);

190 
	`DesEn¸y±
(
chÆÀnge
, 
ZPassw‹dHash
 + 14, 
ª•⁄£
 + 16);

193 
	`log_∑ckë
(
ª•⁄£
, 24, "ChÆÀngeRe•⁄£ -Ñe•⁄£", 
LOG_DEBUG
);

195 
	}
}

198 #ifde‡
USE_CRYPT


200 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

201 
u_ch¨
 *
key
,

202 
u_ch¨
 *
cùhî
 )

204 
u_ch¨
 
des_key
[8];

205 
u_ch¨
 
¸y±_key
[66];

206 
u_ch¨
 
des_öput
[66];

208 
	`MakeKey
(
key
, 
des_key
);

210 
	`Ex∑nd
(
des_key
, 
¸y±_key
);

211 
	`£tkey
(
¸y±_key
);

214 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

215 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

218 
	`Ex∑nd
(
˛ór
, 
des_öput
);

219 
	`í¸y±
(
des_öput
, 0);

220 
	`Cﬁœp£
(
des_öput
, 
cùhî
);

223 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

224 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

226 
	}
}

231 
	$DesEn¸y±
–
u_ch¨
 *
˛ór
,

232 
u_ch¨
 *
key
,

233 
u_ch¨
 *
cùhî
 )

235 
des_cblock
 
des_key
;

236 
des_key_scheduÀ
 
key_scheduÀ
;

238 
	`MakeKey
(
key
, 
des_key
);

240 
	`des_£t_key
(&
des_key
, 
key_scheduÀ
);

243 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet input : %02X%02X%02X%02X%02X%02X%02X%02X\n",

244 
˛ór
[0], clear[1], clear[2], clear[3], clear[4], clear[5], clear[6], clear[7]));

247 
	`des_ecb_í¸y±
((
des_cblock
 *)
˛ór
, (des_cblock *)
cùhî
, 
key_scheduÀ
, 1);

250 
	`CHAPDEBUG
((
LOG_INFO
, "DesEncrypt: 8 octet output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

251 
cùhî
[0], cipher[1], cipher[2], cipher[3], cipher[4], cipher[5], cipher[6], cipher[7]));

253 
	}
}

258 
u_ch¨


259 
	$Gë7Bôs
–
u_ch¨
 *
öput
, 
°¨tBô
)

261 
w‹d
;

263 
w‹d
 = ()
öput
[
°¨tBô
 / 8] << 8;

264 
w‹d
 |()
öput
[
°¨tBô
 / 8 + 1];

266 
w‹d
 >>15 - (
°¨tBô
 % 8 + 7);

268  
w‹d
 & 0xFE;

269 
	}
}

271 #ifde‡
USE_CRYPT


278 
	$Ex∑nd
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

280 
j
, 
c
;

281 
i
;

283 
i
 = 0; i < 64; 
ö
++){

284 
c
 = *
ö
;

285 
j
 = 7; j >= 0; j--) {

286 *
out
++ = (
c
 >> 
j
) & 01;

288 
i
 += 8;

290 
	}
}

295 
	$Cﬁœp£
(
u_ch¨
 *
ö
, u_ch¨ *
out
)

297 
j
;

298 
i
;

299 
c
;

301 
i
 = 0; i < 64; i +8, 
out
++) {

302 
c
 = 0;

303 
j
 = 7; j >0; j--, 
ö
++) {

304 
c
 |*
ö
 << 
j
;

306 *
out
 = 
c
 & 0xff;

308 
	}
}

312 
	$MakeKey
–
u_ch¨
 *
key
,

313 
u_ch¨
 *
des_key
 )

315 
des_key
[0] = 
	`Gë7Bôs
(
key
, 0);

316 
des_key
[1] = 
	`Gë7Bôs
(
key
, 7);

317 
des_key
[2] = 
	`Gë7Bôs
(
key
, 14);

318 
des_key
[3] = 
	`Gë7Bôs
(
key
, 21);

319 
des_key
[4] = 
	`Gë7Bôs
(
key
, 28);

320 
des_key
[5] = 
	`Gë7Bôs
(
key
, 35);

321 
des_key
[6] = 
	`Gë7Bôs
(
key
, 42);

322 
des_key
[7] = 
	`Gë7Bôs
(
key
, 49);

324 #i‚de‡
USE_CRYPT


325 
	`des_£t_odd_∑rôy
((
des_cblock
 *)
des_key
);

329 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 56-bit input : %02X%02X%02X%02X%02X%02X%02X\n",

330 
key
[0], key[1], key[2], key[3], key[4], key[5], key[6]));

331 
	`CHAPDEBUG
((
LOG_INFO
, "MakeKey: 64-bit output: %02X%02X%02X%02X%02X%02X%02X%02X\n",

332 
des_key
[0], des_key[1], des_key[2], des_key[3], des_key[4], des_key[5], des_key[6], des_key[7]));

334 
	}
}

337 
	$Ch≠MS_NT
–*
rchÆÀnge
,

338 
rchÆÀnge_Àn
,

339 *
£¸ë
,

340 
£¸ë_Àn
,

341 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

343 
i
;

344 
MD°ru˘
 
md4C⁄ãxt
;

345 
u_ch¨
 
unicodePassw‹d
[
MAX_NT_PASSWORD
 * 2];

346 
low_byã_fú°
 = -1;

350 
	`BZERO
(
unicodePassw‹d
, (unicodePassword));

351 
i
 = 0; i < 
£¸ë_Àn
; i++) {

352 
unicodePassw‹d
[
i
 * 2] = (
u_ch¨
)
£¸ë
[i];

354 
	`MDbegö
(&
md4C⁄ãxt
);

355 
	`MDupd©e
(&
md4C⁄ãxt
, 
unicodePassw‹d
, 
£¸ë_Àn
 * 2 * 8);

357 i‡(
low_byã_fú°
 == -1) {

358 
low_byã_fú°
 = (
	`ht⁄s
(()1) != 1);

360 i‡(
low_byã_fú°
 == 0) {

361 
	`MDªvî£
((
u_l⁄g
 *)&
md4C⁄ãxt
);

364 
	`MDupd©e
(&
md4C⁄ãxt
, 
NULL
, 0);

366 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, (*)
md4C⁄ãxt
.
buf„r
, 
ª•⁄£
->
NTRe•
);

367 
	}
}

369 #ifde‡
MSLANMAN


370 
u_ch¨
 *
	gStdText
 = (u_char *)"KGS!@#$%";

373 
	$Ch≠MS_LANM™
–*
rchÆÀnge
,

374 
rchÆÀnge_Àn
,

375 *
£¸ë
,

376 
£¸ë_Àn
,

377 
MS_Ch≠Re•⁄£
 *
ª•⁄£
)

379 
i
;

380 
u_ch¨
 
Uˇ£Passw‹d
[
MAX_NT_PASSWORD
];

381 
u_ch¨
 
Passw‹dHash
[16];

384 
	`BZERO
(
Uˇ£Passw‹d
, (UcasePassword));

385 
i
 = 0; i < 
£¸ë_Àn
; i++) {

386 
Uˇ£Passw‹d
[
i
] = (
u_ch¨
)
	`touµî
(
£¸ë
[i]);

388 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 0, 
Passw‹dHash
 + 0 );

389 
	`DesEn¸y±
–
StdText
, 
Uˇ£Passw‹d
 + 7, 
Passw‹dHash
 + 8 );

390 
	`ChÆÀngeRe•⁄£
(
rchÆÀnge
, 
Passw‹dHash
, 
ª•⁄£
->
LANM™Re•
);

391 
	}
}

	@net/lwip/netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@net/lwip/netif/ppp/fsm.c

58 
	~"lwù/›t.h
"

60 #i‡
PPP_SUPPORT


62 
	~"µp.h
"

63 
	~"µpdebug.h
"

65 
	~"fsm.h
"

72 #i‡
PPP_DEBUG


74 c⁄° *
	gµ≥º_°ªº
[] = {

97 
fsm_timeout
 (*);

98 
fsm_rc⁄‰eq
 (
fsm
 *, 
u_ch¨
, u_char *, );

99 
fsm_rc⁄Áck
 (
fsm
 *, , 
u_ch¨
 *, );

100 
fsm_rc⁄‚akªj
 (
fsm
 *, , , 
u_ch¨
 *, );

101 
fsm_πîmªq
 (
fsm
 *, , 
u_ch¨
 *, );

102 
fsm_πîmack
 (
fsm
 *);

103 
fsm_rcodîej
 (
fsm
 *, 
u_ch¨
 *, );

104 
fsm_sc⁄‰eq
 (
fsm
 *, );

106 
	#PROTO_NAME
(
f
Ë((f)->
ˇŒbacks
->
¥Ÿo_«me
)

	)

117 
	g≥î_mru
[
NUM_PPP
];

130 
	$fsm_öô
(
fsm
 *
f
)

132 
f
->
°©e
 = 
LS_INITIAL
;

133 
f
->
Êags
 = 0;

134 
f
->
id
 = 0;

135 
f
->
timeouâime
 = 
FSM_DEFTIMEOUT
;

136 
f
->
maxc⁄‰eqå™smôs
 = 
FSM_DEFMAXCONFREQS
;

137 
f
->
maxãrmå™smôs
 = 
FSM_DEFMAXTERMREQS
;

138 
f
->
max«klo›s
 = 
FSM_DEFMAXNAKLOOPS
;

139 
f
->
ãrm_ªas⁄_Àn
 = 0;

140 
	}
}

147 
	$fsm_lowîup
(
fsm
 *
f
)

149 
ﬁdSèã
 = 
f
->
°©e
;

151 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

153  
f
->
°©e
 ) {

154 
LS_INITIAL
:

155 
f
->
°©e
 = 
LS_CLOSED
;

158 
LS_STARTING
:

159 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

160 
f
->
°©e
 = 
LS_STOPPED
;

163 
	`fsm_sc⁄‰eq
(
f
, 0);

164 
f
->
°©e
 = 
LS_REQSENT
;

169 
	`FSMDEBUG
((
LOG_INFO
, "%s: UpÉvent in state %d (%s)!\n",

170 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

173 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerup state %d (%s) -> %d (%s)\n",

174 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

175 
	}
}

184 
	$fsm_lowîdown
(
fsm
 *
f
)

186 
ﬁdSèã
 = 
f
->
°©e
;

188 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

190  
f
->
°©e
 ) {

191 
LS_CLOSED
:

192 
f
->
°©e
 = 
LS_INITIAL
;

195 
LS_STOPPED
:

196 
f
->
°©e
 = 
LS_STARTING
;

197 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

198 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

202 
LS_CLOSING
:

203 
f
->
°©e
 = 
LS_INITIAL
;

204 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

207 
LS_STOPPING
:

208 
LS_REQSENT
:

209 
LS_ACKRCVD
:

210 
LS_ACKSENT
:

211 
f
->
°©e
 = 
LS_STARTING
;

212 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

215 
LS_OPENED
:

216 if–
f
->
ˇŒbacks
->
down
 ) {

217 (*
f
->
ˇŒbacks
->
down
)(f);

219 
f
->
°©e
 = 
LS_STARTING
;

223 
	`FSMDEBUG
((
LOG_INFO
, "%s: DownÉvent in state %d (%s)!\n",

224 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

227 
	`FSMDEBUG
((
LOG_INFO
, "%s:Üowerdown state %d (%s) -> %d (%s)\n",

228 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

229 
	}
}

236 
	$fsm_›í
(
fsm
 *
f
)

238 
ﬁdSèã
 = 
f
->
°©e
;

240 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

242  
f
->
°©e
 ) {

243 
LS_INITIAL
:

244 
f
->
°©e
 = 
LS_STARTING
;

245 if–
f
->
ˇŒbacks
->
°¨tög
 ) {

246 (*
f
->
ˇŒbacks
->
°¨tög
)(f);

250 
LS_CLOSED
:

251 if–
f
->
Êags
 & 
OPT_SILENT
 ) {

252 
f
->
°©e
 = 
LS_STOPPED
;

255 
	`fsm_sc⁄‰eq
(
f
, 0);

256 
f
->
°©e
 = 
LS_REQSENT
;

260 
LS_CLOSING
:

261 
f
->
°©e
 = 
LS_STOPPING
;

263 
LS_STOPPED
:

264 
LS_OPENED
:

265 if–
f
->
Êags
 & 
OPT_RESTART
 ) {

266 
	`fsm_lowîdown
(
f
);

267 
	`fsm_lowîup
(
f
);

272 
	`FSMDEBUG
((
LOG_INFO
, "%s: open state %d (%s) -> %d (%s)\n",

273 
	`PROTO_NAME
(
f
), 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

274 
	}
}

284 
	$fsm_˛o£
(
fsm
 *
f
, *
ªas⁄
)

286 
ﬁdSèã
 = 
f
->
°©e
;

288 
	`LWIP_UNUSED_ARG
(
ﬁdSèã
);

290 
f
->
ãrm_ªas⁄
 = 
ªas⁄
;

291 
f
->
ãrm_ªas⁄_Àn
 = (
ªas⁄
 =
NULL
? 0: 
	`°æí
(reason));

292  
f
->
°©e
 ) {

293 
LS_STARTING
:

294 
f
->
°©e
 = 
LS_INITIAL
;

296 
LS_STOPPED
:

297 
f
->
°©e
 = 
LS_CLOSED
;

299 
LS_STOPPING
:

300 
f
->
°©e
 = 
LS_CLOSING
;

303 
LS_REQSENT
:

304 
LS_ACKRCVD
:

305 
LS_ACKSENT
:

306 
LS_OPENED
:

307 if–
f
->
°©e
 !
LS_OPENED
 ) {

308 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

309 } if–
f
->
ˇŒbacks
->
down
 ) {

310 (*
f
->
ˇŒbacks
->
down
)(f);

313 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

314 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

315 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

316 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

317 --
f
->
ªå™smôs
;

319 
f
->
°©e
 = 
LS_CLOSING
;

323 
	`FSMDEBUG
((
LOG_INFO
, "%s: closeÑeason=%s state %d (%s) -> %d (%s)\n",

324 
	`PROTO_NAME
(
f
), 
ªas⁄
, 
ﬁdSèã
, 
µ≥º_°ªº
[ﬁdSèã], f->
°©e
,Öpperr_strerr[f->state]));

325 
	}
}

334 
	$fsm_sd©a
–
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, u_ch¨ *
d©a
, 
d©Æí
)

336 
u_ch¨
 *
ouç
;

337 
ouéí
;

340 
ouç
 = 
ouçackë_buf
[
f
->
unô
];

341 i‡(
d©Æí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
) {

342 
d©Æí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

344 i‡(
d©Æí
 && 
d©a
 !
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
) {

345 
	`BCOPY
(
d©a
, 
ouç
 + 
PPP_HDRLEN
 + 
HEADERLEN
, 
d©Æí
);

347 
ouéí
 = 
d©Æí
 + 
HEADERLEN
;

348 
	`MAKEHEADER
(
ouç
, 
f
->
¥Ÿocﬁ
);

349 
	`PUTCHAR
(
code
, 
ouç
);

350 
	`PUTCHAR
(
id
, 
ouç
);

351 
	`PUTSHORT
(
ouéí
, 
ouç
);

352 
	`µpWrôe
(
f
->
unô
, 
ouçackë_buf
[f->unô], 
ouéí
 + 
PPP_HDRLEN
);

353 
	`FSMDEBUG
((
LOG_INFO
, "fsm_sdata(%s): Sent code %d,%d,%d.\n",

354 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
ouéí
));

355 
	}
}

362 
	$fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
)

364 
u_ch¨
 *
öp
 = 
ö∑ckë
;

365 
u_ch¨
 
code
, 
id
;

366 
Àn
;

372 i‡(
l
 < 
HEADERLEN
) {

373 
	`FSMDEBUG
((
LOG_WARNING
, "fsm_input(%x): Rcvd short header.\n",

374 
f
->
¥Ÿocﬁ
));

377 
	`GETCHAR
(
code
, 
öp
);

378 
	`GETCHAR
(
id
, 
öp
);

379 
	`GETSHORT
(
Àn
, 
öp
);

380 i‡(
Àn
 < 
HEADERLEN
) {

381 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd illegalÜength.\n",

382 
f
->
¥Ÿocﬁ
));

385 i‡(
Àn
 > 
l
) {

386 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): Rcvd shortÖacket.\n",

387 
f
->
¥Ÿocﬁ
));

390 
Àn
 -
HEADERLEN
;

392 if–
f
->
°©e
 =
LS_INITIAL
 || f->°©ê=
LS_STARTING
 ) {

393 
	`FSMDEBUG
((
LOG_INFO
, "fsm_input(%x): RcvdÖacket in state %d (%s).\n",

394 
f
->
¥Ÿocﬁ
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

397 
	`FSMDEBUG
((
LOG_INFO
, "fsm_öput(%s):%d,%d,%d\n", 
	`PROTO_NAME
(
f
), 
code
, 
id
, 
l
));

401 
code
) {

402 
CONFREQ
:

403 
	`fsm_rc⁄‰eq
(
f
, 
id
, 
öp
, 
Àn
);

406 
CONFACK
:

407 
	`fsm_rc⁄Áck
(
f
, 
id
, 
öp
, 
Àn
);

410 
CONFNAK
:

411 
CONFREJ
:

412 
	`fsm_rc⁄‚akªj
(
f
, 
code
, 
id
, 
öp
, 
Àn
);

415 
TERMREQ
:

416 
	`fsm_πîmªq
(
f
, 
id
, 
öp
, 
Àn
);

419 
TERMACK
:

420 
	`fsm_πîmack
(
f
);

423 
CODEREJ
:

424 
	`fsm_rcodîej
(
f
, 
öp
, 
Àn
);

428 if–!
f
->
ˇŒbacks
->
extcode
 ||

429 !(*
f
->
ˇŒbacks
->
extcode
)(f, 
code
, 
id
, 
öp
, 
Àn
) ) {

430 
	`fsm_sd©a
(
f
, 
CODEREJ
, ++f->
id
, 
ö∑ckë
, 
Àn
 + 
HEADERLEN
);

434 
	}
}

443 
	$fsm_¥Ÿªje˘
(
fsm
 *
f
)

445  
f
->
°©e
 ) {

446 
LS_CLOSING
:

447 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

449 
LS_CLOSED
:

450 
f
->
°©e
 = 
LS_CLOSED
;

451 if–
f
->
ˇŒbacks
->
föished
 ) {

452 (*
f
->
ˇŒbacks
->
föished
)(f);

456 
LS_STOPPING
:

457 
LS_REQSENT
:

458 
LS_ACKRCVD
:

459 
LS_ACKSENT
:

460 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

462 
LS_STOPPED
:

463 
f
->
°©e
 = 
LS_STOPPED
;

464 if–
f
->
ˇŒbacks
->
föished
 ) {

465 (*
f
->
ˇŒbacks
->
föished
)(f);

469 
LS_OPENED
:

470 if–
f
->
ˇŒbacks
->
down
 ) {

471 (*
f
->
ˇŒbacks
->
down
)(f);

474 
f
->
ªå™smôs
 = f->
maxãrmå™smôs
;

475 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

476 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

477 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

478 --
f
->
ªå™smôs
;

480 
f
->
°©e
 = 
LS_STOPPING
;

484 
	`FSMDEBUG
((
LOG_INFO
, "%s: Protocol-rejectÉvent in state %d (%s)!\n",

485 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

487 
	}
}

501 
	$fsm_timeout
(*
¨g
)

503 
fsm
 *
f
 = (fsm *Ë
¨g
;

505 
f
->
°©e
) {

506 
LS_CLOSING
:

507 
LS_STOPPING
:

508 if–
f
->
ªå™smôs
 <= 0 ) {

509 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Terminate-Request state=%d (%s)\n",

510 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

514 
f
->
°©e
 = (f->°©ê=
LS_CLOSING
)? 
LS_CLOSED
: 
LS_STOPPED
;

515 if–
f
->
ˇŒbacks
->
föished
 ) {

516 (*
f
->
ˇŒbacks
->
föished
)(f);

519 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Terminate-Requests state=%d (%s)\n",

520 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

522 
	`fsm_sd©a
(
f
, 
TERMREQ
, f->
ªqid
 = ++f->
id
,

523 (
u_ch¨
 *Ë
f
->
ãrm_ªas⁄
, f->
ãrm_ªas⁄_Àn
);

524 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

525 --
f
->
ªå™smôs
;

529 
LS_REQSENT
:

530 
LS_ACKRCVD
:

531 
LS_ACKSENT
:

532 i‡(
f
->
ªå™smôs
 <= 0) {

533 
	`FSMDEBUG
((
LOG_WARNING
, "%s:Åimeout sending Config-Requests state=%d (%s)\n",

534 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

535 
f
->
°©e
 = 
LS_STOPPED
;

536 if–(
f
->
Êags
 & 
OPT_PASSIVE
Ë=0 && f->
ˇŒbacks
->
föished
 ) {

537 (*
f
->
ˇŒbacks
->
föished
)(f);

540 
	`FSMDEBUG
((
LOG_WARNING
, "%s:ÅimeoutÑesending Config-Request state=%d (%s)\n",

541 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

543 i‡(
f
->
ˇŒbacks
->
ªå™smô
) {

544 (*
f
->
ˇŒbacks
->
ªå™smô
)(f);

546 
	`fsm_sc⁄‰eq
(
f
, 1);

547 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

548 
f
->
°©e
 = 
LS_REQSENT
;

554 
	`FSMDEBUG
((
LOG_INFO
, "%s: TimeoutÉvent in state %d (%s)!\n",

555 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

557 
	}
}

564 
	$fsm_rc⁄‰eq
(
fsm
 *
f
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

566 
code
, 
ªje˘_if_dißgªe
;

568 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfreq(%s): Rcvd id %d state=%d (%s)\n",

569 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

570  
f
->
°©e
 ) {

571 
LS_CLOSED
:

573 
	`fsm_sd©a
(
f
, 
TERMACK
, 
id
, 
NULL
, 0);

575 
LS_CLOSING
:

576 
LS_STOPPING
:

579 
LS_OPENED
:

581 if–
f
->
ˇŒbacks
->
down
 ) {

582 (*
f
->
ˇŒbacks
->
down
)(f);

584 
	`fsm_sc⁄‰eq
(
f
, 0);

587 
LS_STOPPED
:

589 
	`fsm_sc⁄‰eq
(
f
, 0);

590 
f
->
°©e
 = 
LS_REQSENT
;

598 i‡(
f
->
ˇŒbacks
->
ªqci
) {

599 
ªje˘_if_dißgªe
 = (
f
->
«klo›s
 >f->
max«klo›s
);

600 
code
 = (*
f
->
ˇŒbacks
->
ªqci
)(f, 
öp
, &
Àn
, 
ªje˘_if_dißgªe
);

601 } i‡(
Àn
) {

602 
code
 = 
CONFREJ
;

604 
code
 = 
CONFACK
;

608 
	`fsm_sd©a
(
f
, (
u_ch¨
)
code
, 
id
, 
öp
, 
Àn
);

610 i‡(
code
 =
CONFACK
) {

611 i‡(
f
->
°©e
 =
LS_ACKRCVD
) {

612 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

613 
f
->
°©e
 = 
LS_OPENED
;

614 i‡(
f
->
ˇŒbacks
->
up
) {

615 (*
f
->
ˇŒbacks
->
up
)(f);

618 
f
->
°©e
 = 
LS_ACKSENT
;

620 
f
->
«klo›s
 = 0;

623 i‡(
f
->
°©e
 !
LS_ACKRCVD
) {

624 
f
->
°©e
 = 
LS_REQSENT
;

626 if–
code
 =
CONFNAK
 ) {

627 ++
f
->
«klo›s
;

630 
	}
}

637 
	$fsm_rc⁄Áck
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

639 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfack(%s): Rcvd id %d state=%d (%s)\n",

640 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

642 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

645 if–!(
f
->
ˇŒbacks
->
ackci
? (*f->ˇŒbacks->ackci)(f, 
öp
, 
Àn
): (len == 0)) ) {

647 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad Ack (length %d)\n",

648 
	`PROTO_NAME
(
f
), 
Àn
));

651 
f
->
£í_ack
 = 1;

653 
f
->
°©e
) {

654 
LS_CLOSED
:

655 
LS_STOPPED
:

656 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

659 
LS_REQSENT
:

660 
f
->
°©e
 = 
LS_ACKRCVD
;

661 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

664 
LS_ACKRCVD
:

666 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

667 
	`fsm_sc⁄‰eq
(
f
, 0);

668 
f
->
°©e
 = 
LS_REQSENT
;

671 
LS_ACKSENT
:

672 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

673 
f
->
°©e
 = 
LS_OPENED
;

674 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

675 i‡(
f
->
ˇŒbacks
->
up
) {

676 (*
f
->
ˇŒbacks
->
up
)(f);

680 
LS_OPENED
:

682 i‡(
f
->
ˇŒbacks
->
down
) {

683 (*
f
->
ˇŒbacks
->
down
)(f);

685 
	`fsm_sc⁄‰eq
(
f
, 0);

686 
f
->
°©e
 = 
LS_REQSENT
;

689 
	}
}

696 
	$fsm_rc⁄‚akªj
(
fsm
 *
f
, 
code
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

698 (*
¥oc
Ë(
fsm
 *, 
u_ch¨
 *, );

699 
ªt
;

701 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rconfnakrej(%s): Rcvd id %d state=%d (%s)\n",

702 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

704 i‡(
id
 !
f
->
ªqid
 || f->
£í_ack
) {

707 
¥oc
 = (
code
 =
CONFNAK
)? 
f
->
ˇŒbacks
->
«kci
: f->ˇŒbacks->
ªjci
;

708 i‡(!
¥oc
 || !((
ªt
 = 
	`¥oc
(
f
, 
öp
, 
Àn
)))) {

710 
	`FSMDEBUG
((
LOG_INFO
, "%s:Ñeceived bad %s (length %d)\n",

711 
	`PROTO_NAME
(
f
), (
code
==
CONFNAK
? "Nak": "ªje˘"), 
Àn
));

714 
f
->
£í_ack
 = 1;

716 
f
->
°©e
) {

717 
LS_CLOSED
:

718 
LS_STOPPED
:

719 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

722 
LS_REQSENT
:

723 
LS_ACKSENT
:

725 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

726 i‡(
ªt
 < 0) {

727 
f
->
°©e
 = 
LS_STOPPED
;

729 
	`fsm_sc⁄‰eq
(
f
, 0);

733 
LS_ACKRCVD
:

735 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

736 
	`fsm_sc⁄‰eq
(
f
, 0);

737 
f
->
°©e
 = 
LS_REQSENT
;

740 
LS_OPENED
:

742 i‡(
f
->
ˇŒbacks
->
down
) {

743 (*
f
->
ˇŒbacks
->
down
)(f);

745 
	`fsm_sc⁄‰eq
(
f
, 0);

746 
f
->
°©e
 = 
LS_REQSENT
;

749 
	}
}

756 
	$fsm_πîmªq
(
fsm
 *
f
, 
id
, 
u_ch¨
 *
p
, 
Àn
)

758 
	`LWIP_UNUSED_ARG
(
p
);

760 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermreq(%s): Rcvd id %d state=%d (%s)\n",

761 
	`PROTO_NAME
(
f
), 
id
, f->
°©e
, 
µ≥º_°ªº
[f->state]));

763 
f
->
°©e
) {

764 
LS_ACKRCVD
:

765 
LS_ACKSENT
:

766 
f
->
°©e
 = 
LS_REQSENT
;

769 
LS_OPENED
:

770 i‡(
Àn
 > 0) {

771 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖì∏(%x)\n", 
	`PROTO_NAME
(
f
), 
p
));

773 
	`FSMDEBUG
((
LOG_INFO
, "%†ãrmö©ed byÖìr\n", 
	`PROTO_NAME
(
f
)));

775 i‡(
f
->
ˇŒbacks
->
down
) {

776 (*
f
->
ˇŒbacks
->
down
)(f);

778 
f
->
ªå™smôs
 = 0;

779 
f
->
°©e
 = 
LS_STOPPING
;

780 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

784 
	`fsm_sd©a
(
f
, 
TERMACK
, (
u_ch¨
)
id
, 
NULL
, 0);

785 
	}
}

792 
	$fsm_πîmack
(
fsm
 *
f
)

794 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rtermack(%s): state=%d (%s)\n",

795 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

797 
f
->
°©e
) {

798 
LS_CLOSING
:

799 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

800 
f
->
°©e
 = 
LS_CLOSED
;

801 if–
f
->
ˇŒbacks
->
föished
 ) {

802 (*
f
->
ˇŒbacks
->
föished
)(f);

806 
LS_STOPPING
:

807 
	`UNTIMEOUT
(
fsm_timeout
, 
f
);

808 
f
->
°©e
 = 
LS_STOPPED
;

809 if–
f
->
ˇŒbacks
->
föished
 ) {

810 (*
f
->
ˇŒbacks
->
föished
)(f);

814 
LS_ACKRCVD
:

815 
f
->
°©e
 = 
LS_REQSENT
;

818 
LS_OPENED
:

819 i‡(
f
->
ˇŒbacks
->
down
) {

820 (*
f
->
ˇŒbacks
->
down
)(f);

822 
	`fsm_sc⁄‰eq
(
f
, 0);

825 
	}
}

832 
	$fsm_rcodîej
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

834 
u_ch¨
 
code
, 
id
;

836 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej(%s): state=%d (%s)\n",

837 
	`PROTO_NAME
(
f
), f->
°©e
, 
µ≥º_°ªº
[f->state]));

839 i‡(
Àn
 < 
HEADERLEN
) {

840 
	`FSMDEBUG
((
LOG_INFO
, "fsm_rcoderej: Rcvd short Code-RejectÖacket!\n"));

843 
	`GETCHAR
(
code
, 
öp
);

844 
	`GETCHAR
(
id
, 
öp
);

845 
	`FSMDEBUG
((
LOG_WARNING
, "%s: Rcvd Code-Reject for code %d, id %d\n",

846 
	`PROTO_NAME
(
f
), 
code
, 
id
));

848 if–
f
->
°©e
 =
LS_ACKRCVD
 ) {

849 
f
->
°©e
 = 
LS_REQSENT
;

851 
	}
}

858 
	$fsm_sc⁄‰eq
(
fsm
 *
f
, 
ªå™smô
)

860 
u_ch¨
 *
ouç
;

861 
cûí
;

863 if–
f
->
°©e
 !
LS_REQSENT
 && f->°©ê!
LS_ACKRCVD
 && f->°©ê!
LS_ACKSENT
 ) {

865 if–
f
->
ˇŒbacks
->
ª£tci
 ) {

866 (*
f
->
ˇŒbacks
->
ª£tci
)(f);

868 
f
->
«klo›s
 = 0;

871 if–!
ªå™smô
 ) {

873 
f
->
ªå™smôs
 = f->
maxc⁄‰eqå™smôs
;

874 
f
->
ªqid
 = ++f->
id
;

877 
f
->
£í_ack
 = 0;

882 
ouç
 = 
ouçackë_buf
[
f
->
unô
] + 
PPP_HDRLEN
 + 
HEADERLEN
;

883 if–
f
->
ˇŒbacks
->
cûí
 && f->ˇŒbacks->
addci
 ) {

884 
cûí
 = (*
f
->
ˇŒbacks
->cilen)(f);

885 if–
cûí
 > 
≥î_mru
[
f
->
unô
] - ()
HEADERLEN
 ) {

886 
cûí
 = 
≥î_mru
[
f
->
unô
] - 
HEADERLEN
;

888 i‡(
f
->
ˇŒbacks
->
addci
) {

889 (*
f
->
ˇŒbacks
->
addci
)(f, 
ouç
, &
cûí
);

892 
cûí
 = 0;

896 
	`fsm_sd©a
(
f
, 
CONFREQ
, f->
ªqid
, 
ouç
, 
cûí
);

899 --
f
->
ªå™smôs
;

900 
	`TIMEOUT
(
fsm_timeout
, 
f
, f->
timeouâime
);

902 
	`FSMDEBUG
((
LOG_INFO
, "%s: sending Configure-Request, id %d\n",

903 
	`PROTO_NAME
(
f
), f->
ªqid
));

904 
	}
}

	@net/lwip/netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

63 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#CONFREQ
 1

	)

70 
	#CONFACK
 2

	)

71 
	#CONFNAK
 3

	)

72 
	#CONFREJ
 4

	)

73 
	#TERMREQ
 5

	)

74 
	#TERMACK
 6

	)

75 
	#CODEREJ
 7

	)

80 
	#LS_INITIAL
 0

	)

81 
	#LS_STARTING
 1

	)

82 
	#LS_CLOSED
 2

	)

83 
	#LS_STOPPED
 3

	)

84 
	#LS_CLOSING
 4

	)

85 
	#LS_STOPPING
 5

	)

86 
	#LS_REQSENT
 6

	)

87 
	#LS_ACKRCVD
 7

	)

88 
	#LS_ACKSENT
 8

	)

89 
	#LS_OPENED
 9

	)

94 
	#OPT_PASSIVE
 1

	)

95 
	#OPT_RESTART
 2

	)

96 
	#OPT_SILENT
 4

	)

105 
	sfsm
 {

106 
	munô
;

107 
u_sh‹t
 
	m¥Ÿocﬁ
;

108 
	m°©e
;

109 
	mÊags
;

110 
u_ch¨
 
	mid
;

111 
u_ch¨
 
	mªqid
;

112 
u_ch¨
 
	m£í_ack
;

113 
	mtimeouâime
;

114 
	mmaxc⁄‰eqå™smôs
;

115 
	mªå™smôs
;

116 
	mmaxãrmå™smôs
;

117 
	m«klo›s
;

118 
	mmax«klo›s
;

119 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

120 * 
	mãrm_ªas⁄
;

121 
	mãrm_ªas⁄_Àn
;

122 } 
	tfsm
;

125 
	sfsm_ˇŒbacks
 {

126 (*
	mª£tci
)(
	mfsm
*);

127 (*
	mcûí
)(
	mfsm
*);

128 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

129 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

130 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

131 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

132 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

133 (*
	mup
)(
	mfsm
*);

134 (*
	mdown
)(
	mfsm
*);

135 (*
	m°¨tög
)(
	mfsm
*);

136 (*
	mföished
)(
	mfsm
*);

137 (*
	m¥Ÿªje˘
)();

138 (*
	mªå™smô
)(
	mfsm
*);

139 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

140 *
	m¥Ÿo_«me
;

141 } 
	tfsm_ˇŒbacks
;

150 
≥î_mru
[];

160 
fsm_öô
 (
fsm
*);

161 
fsm_lowîup
 (
fsm
*);

162 
fsm_lowîdown
 (
fsm
*);

163 
fsm_›í
 (
fsm
*);

164 
fsm_˛o£
 (
fsm
*, *);

165 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

166 
fsm_¥Ÿªje˘
 (
fsm
*);

167 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

	@net/lwip/netif/ppp/ipcp.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"µpdebug.h
"

59 
	~"auth.h
"

60 
	~"fsm.h
"

61 
	~"vj.h
"

62 
	~"ù˝.h
"

64 
	~<°rög.h
>

74 
	#CILEN_VOID
 2

	)

75 
	#CILEN_COMPRESS
 4

	)

76 
	#CILEN_VJ
 6

	)

77 
	#CILEN_ADDR
 6

	)

78 
	#CILEN_ADDRS
 10

	)

88 
ù˝_ª£tci
 (
fsm
 *);

89 
ù˝_cûí
 (
fsm
 *);

90 
ù˝_addci
 (
fsm
 *, 
u_ch¨
 *, *);

91 
ù˝_ackci
 (
fsm
 *, 
u_ch¨
 *, );

92 
ù˝_«kci
 (
fsm
 *, 
u_ch¨
 *, );

93 
ù˝_ªjci
 (
fsm
 *, 
u_ch¨
 *, );

94 
ù˝_ªqci
 (
fsm
 *, 
u_ch¨
 *, *, );

95 
ù˝_up
 (
fsm
 *);

96 
ù˝_down
 (
fsm
 *);

98 
ù˝_s¸ùt
 (
fsm
 *, *);

100 
ù˝_föished
 (
fsm
 *);

105 
ù˝_öô
 ();

106 
ù˝_›í
 ();

107 
ù˝_˛o£
 (, *);

108 
ù˝_lowîup
 ();

109 
ù˝_lowîdown
 ();

110 
ù˝_öput
 (, 
u_ch¨
 *, );

111 
ù˝_¥Ÿªj
 ();

113 
ù˝_˛ór_addrs
 ();

115 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : \

116 (
x
Ë=
CONFNAK
 ? "NAK" : "REJ")

	)

124 
ù˝_›ti⁄s
 
	gù˝_w™t›ti⁄s
[
NUM_PPP
];

125 
ù˝_›ti⁄s
 
	gù˝_gŸ›ti⁄s
[
NUM_PPP
];

126 
ù˝_›ti⁄s
 
	gù˝_Ælow›ti⁄s
[
NUM_PPP
];

127 
ù˝_›ti⁄s
 
	gù˝_his›ti⁄s
[
NUM_PPP
];

129 
fsm
 
	gù˝_fsm
[
NUM_PPP
];

131 
¥Ÿít
 
	gù˝_¥Ÿít
 = {

132 
PPP_IPCP
,

133 
ù˝_öô
,

134 
ù˝_öput
,

135 
ù˝_¥Ÿªj
,

136 
ù˝_lowîup
,

137 
ù˝_lowîdown
,

138 
ù˝_›í
,

139 
ù˝_˛o£
,

141 
ù˝_¥öçkt
,

142 
NULL
,

147 
ù_check_›ti⁄s
,

148 
NULL
,

149 
ù_a˘ive_pkt


159 
	gcis_ª˚ived
[
NUM_PPP
];

160 
	gdeÁu…_rouã_£t
[
NUM_PPP
];

162 
fsm_ˇŒbacks
 
	gù˝_ˇŒbacks
 = {

163 
ù˝_ª£tci
,

164 
ù˝_cûí
,

165 
ù˝_addci
,

166 
ù˝_ackci
,

167 
ù˝_«kci
,

168 
ù˝_ªjci
,

169 
ù˝_ªqci
,

170 
ù˝_up
,

171 
ù˝_down
,

172 
NULL
,

173 
ù˝_föished
,

174 
NULL
,

175 
NULL
,

176 
NULL
,

192 
	$_öë_¡ﬂ
(
u32_t
 
n
)

194 
ö_addr
 
ü
;

195 
ü
.
s_addr
 = 
n
;

196  
	`öë_¡ﬂ
(
ü
);

197 
	}
}

199 
	#öë_¡ﬂ
 
_öë_¡ﬂ


	)

205 
	$ù˝_öô
(
unô
)

207 
fsm
 *
f
 = &
ù˝_fsm
[
unô
];

208 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
unô
];

209 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
unô
];

211 
f
->
unô
 = unit;

212 
f
->
¥Ÿocﬁ
 = 
PPP_IPCP
;

213 
f
->
ˇŒbacks
 = &
ù˝_ˇŒbacks
;

214 
	`fsm_öô
(&
ù˝_fsm
[
unô
]);

216 
	`mem£t
(
wo
, 0, (*wo));

217 
	`mem£t
(
ao
, 0, (*ao));

219 
wo
->
√g_addr
 = 1;

220 
wo
->
ouøddr
 = 0;

221 #i‡
VJ_SUPPORT


222 
wo
->
√g_vj
 = 1;

224 
wo
->
√g_vj
 = 0;

226 
wo
->
vj_¥Ÿocﬁ
 = 
IPCP_VJ_COMP
;

227 
wo
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

228 
wo
->
cÊag
 = 0;

229 
wo
->
deÁu…_rouã
 = 1;

231 
ao
->
√g_addr
 = 1;

232 #i‡
VJ_SUPPORT


233 
ao
->
√g_vj
 = 1;

235 
ao
->
√g_vj
 = 0;

237 
ao
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

238 
ao
->
cÊag
 = 1;

239 
ao
->
deÁu…_rouã
 = 1;

240 
	}
}

247 
	$ù˝_›í
(
unô
)

249 
	`fsm_›í
(&
ù˝_fsm
[
unô
]);

250 
	}
}

257 
	$ù˝_˛o£
(
unô
, *
ªas⁄
)

259 
	`fsm_˛o£
(&
ù˝_fsm
[
unô
], 
ªas⁄
);

260 
	}
}

267 
	$ù˝_lowîup
(
unô
)

269 
	`fsm_lowîup
(&
ù˝_fsm
[
unô
]);

270 
	}
}

277 
	$ù˝_lowîdown
(
unô
)

279 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

280 
	}
}

287 
	$ù˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

289 
	`fsm_öput
(&
ù˝_fsm
[
unô
], 
p
, 
Àn
);

290 
	}
}

299 
	$ù˝_¥Ÿªj
(
unô
)

301 
	`fsm_lowîdown
(&
ù˝_fsm
[
unô
]);

302 
	}
}

309 
	$ù˝_ª£tci
(
fsm
 *
f
)

311 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

313 
wo
->
ªq_addr
 = wo->
√g_addr
 && 
ù˝_Ælow›ti⁄s
[
f
->
unô
].neg_addr;

314 i‡(
wo
->
ouøddr
 == 0) {

315 
wo
->
ac˚±_loˇl
 = 1;

317 i‡(
wo
->
hißddr
 == 0) {

318 
wo
->
ac˚±_ªmŸe
 = 1;

321 
wo
->
ªq_dns1
 = 
µp_£âögs
.
u£≥îdns
;

322 
wo
->
ªq_dns2
 = 
µp_£âögs
.
u£≥îdns
;

323 
ù˝_gŸ›ti⁄s
[
f
->
unô
] = *
wo
;

324 
cis_ª˚ived
[
f
->
unô
] = 0;

325 
	}
}

332 
	$ù˝_cûí
(
fsm
 *
f
)

334 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

335 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

336 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

338 
	#LENCIVJ
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_COMPRESS
 : 
CILEN_VJ
Ë: 0)

	)

339 
	#LENCIADDR
(
√g
, 
ﬁd
Ë“eg ? (ﬁd? 
CILEN_ADDRS
 : 
CILEN_ADDR
Ë: 0)

	)

340 
	#LENCIDNS
(
√g
Ë“eg ? (
CILEN_ADDR
Ë: 0)

	)

346 i‡(
wo
->
√g_addr
 && !
go
->√g_add∏&& !go->
ﬁd_addrs
) {

348 
go
->
√g_addr
 = 1;

349 
go
->
ﬁd_addrs
 = 1;

351 i‡(
wo
->
√g_vj
 && !
go
->√g_vj && !go->
ﬁd_vj
) {

353 i‡(
cis_ª˚ived
[
f
->
unô
] == 0) {

355 
go
->
√g_vj
 = 1;

358 i‡(
ho
->
√g_vj
 && ho->
ﬁd_vj
) {

359 
go
->
√g_vj
 = 1;

360 
go
->
ﬁd_vj
 = 1;

361 
go
->
vj_¥Ÿocﬁ
 = 
ho
->vj_protocol;

366  (
	`LENCIADDR
(
go
->
√g_addr
, go->
ﬁd_addrs
) +

367 
	`LENCIVJ
(
go
->
√g_vj
, go->
ﬁd_vj
) +

368 
	`LENCIDNS
(
go
->
ªq_dns1
) +

369 
	`LENCIDNS
(
go
->
ªq_dns2
));

370 
	}
}

377 
	$ù˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

379 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

380 
Àn
 = *
À≈
;

382 
	#ADDCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

383 i‡(
√g
) { \

384 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

385 i‡(
Àn
 >
vjÀn
) { \

386 
	`PUTCHAR
(
›t
, 
u˝
); \

387 
	`PUTCHAR
(
vjÀn
, 
u˝
); \

388 
	`PUTSHORT
(
vÆ
, 
u˝
); \

389 i‡(!
ﬁd
) { \

390 
	`PUTCHAR
(
max¶Ÿödex
, 
u˝
); \

391 
	`PUTCHAR
(
cÊag
, 
u˝
); \

393 
Àn
 -
vjÀn
; \

395 
√g
 = 0; \

397 }

	)

399 
	#ADDCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

400 i‡(
√g
) { \

401 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

402 i‡(
Àn
 >
addæí
) { \

403 
u32_t
 
l
; \

404 
	`PUTCHAR
(
›t
, 
u˝
); \

405 
	`PUTCHAR
(
addæí
, 
u˝
); \

406 
l
 = 
	`¡ohl
(
vÆ1
); \

407 
	`PUTLONG
(
l
, 
u˝
); \

408 i‡(
ﬁd
) { \

409 
l
 = 
	`¡ohl
(
vÆ2
); \

410 
	`PUTLONG
(
l
, 
u˝
); \

412 
Àn
 -
addæí
; \

414 
√g
 = 0; \

416 }

	)

418 
	#ADDCIDNS
(
›t
, 
√g
, 
addr
) \

419 i‡(
√g
) { \

420 i‡(
Àn
 >
CILEN_ADDR
) { \

421 
u32_t
 
l
; \

422 
	`PUTCHAR
(
›t
, 
u˝
); \

423 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
); \

424 
l
 = 
	`¡ohl
(
addr
); \

425 
	`PUTLONG
(
l
, 
u˝
); \

426 
Àn
 -
CILEN_ADDR
; \

428 
√g
 = 0; \

430 }

	)

432 
	`ADDCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

433 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

435 
	`ADDCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

436 
go
->
max¶Ÿödex
, go->
cÊag
);

438 
	`ADDCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

440 
	`ADDCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

442 *
À≈
 -
Àn
;

443 
	}
}

454 
	$ù˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

456 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

457 
u_sh‹t
 
cûí
, 
côy≥
, 
cish‹t
;

458 
u32_t
 
cû⁄g
;

459 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

467 
	#ACKCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿödex
, 
cÊag
) \

468 i‡(
√g
) { \

469 
vjÀn
 = 
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
; \

470 i‡((
Àn
 -
vjÀn
) < 0) { \

471 
bad
; \

473 
	`GETCHAR
(
côy≥
, 
p
); \

474 
	`GETCHAR
(
cûí
, 
p
); \

475 i‡(
cûí
 !
vjÀn
 || \

476 
côy≥
 !
›t
) { \

477 
bad
; \

479 
	`GETSHORT
(
cish‹t
, 
p
); \

480 i‡(
cish‹t
 !
vÆ
) { \

481 
bad
; \

483 i‡(!
ﬁd
) { \

484 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

485 i‡(
cimax¶Ÿödex
 !
max¶Ÿödex
) { \

486 
bad
; \

488 
	`GETCHAR
(
cicÊag
, 
p
); \

489 i‡(
cicÊag
 !
cÊag
) { \

490 
bad
; \

493 }

	)

495 
	#ACKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

496 i‡(
√g
) { \

497 
addæí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
); \

498 
u32_t
 
l
; \

499 i‡((
Àn
 -
addæí
) < 0) { \

500 
bad
; \

502 
	`GETCHAR
(
côy≥
, 
p
); \

503 
	`GETCHAR
(
cûí
, 
p
); \

504 i‡(
cûí
 !
addæí
 || \

505 
côy≥
 !
›t
) { \

506 
bad
; \

508 
	`GETLONG
(
l
, 
p
); \

509 
cû⁄g
 = 
	`ht⁄l
(
l
); \

510 i‡(
vÆ1
 !
cû⁄g
) { \

511 
bad
; \

513 i‡(
ﬁd
) { \

514 
	`GETLONG
(
l
, 
p
); \

515 
cû⁄g
 = 
	`ht⁄l
(
l
); \

516 i‡(
vÆ2
 !
cû⁄g
) { \

517 
bad
; \

520 }

	)

522 
	#ACKCIDNS
(
›t
, 
√g
, 
addr
) \

523 i‡(
√g
) { \

524 
u32_t
 
l
; \

525 i‡((
Àn
 -
CILEN_ADDR
) < 0) { \

526 
bad
; \

528 
	`GETCHAR
(
côy≥
, 
p
); \

529 
	`GETCHAR
(
cûí
, 
p
); \

530 i‡(
cûí
 !
CILEN_ADDR
 || \

531 
côy≥
 !
›t
) { \

532 
bad
; \

534 
	`GETLONG
(
l
, 
p
); \

535 
cû⁄g
 = 
	`ht⁄l
(
l
); \

536 i‡(
addr
 !
cû⁄g
) { \

537 
bad
; \

539 }

	)

541 
	`ACKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), go->
√g_addr
,

542 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

544 
	`ACKCIVJ
(
CI_COMPRESSTYPE
, 
go
->
√g_vj
, go->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

545 
go
->
max¶Ÿödex
, go->
cÊag
);

547 
	`ACKCIDNS
(
CI_MS_DNS1
, 
go
->
ªq_dns1
, go->
dnßddr
[0]);

549 
	`ACKCIDNS
(
CI_MS_DNS2
, 
go
->
ªq_dns2
, go->
dnßddr
[1]);

554 i‡(
Àn
 != 0) {

555 
bad
;

559 
bad
:

560 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_ackci:Ñeceived bad Ack!\n"));

562 
	}
}

574 
	$ù˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

576 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

577 
u_ch¨
 
cimax¶Ÿödex
, 
cicÊag
;

578 
u_ch¨
 
côy≥
, 
cûí
, *
√xt
;

579 
u_sh‹t
 
cish‹t
;

580 
u32_t
 
cüddr1
, 
cüddr2
, 
l
, 
cidnßddr
;

581 
ù˝_›ti⁄s
 
no
;

582 
ù˝_›ti⁄s
 
åy
;

584 
	`BZERO
(&
no
, (no));

585 
åy
 = *
go
;

592 
	#NAKCIADDR
(
›t
, 
√g
, 
ﬁd
, 
code
) \

593 i‡(
go
->
√g
 && \

594 
Àn
 >(
cûí
 = (
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
)) && \

595 
p
[1] =
cûí
 && \

596 
p
[0] =
›t
) { \

597 
Àn
 -
cûí
; \

598 
	`INCPTR
(2, 
p
); \

599 
	`GETLONG
(
l
, 
p
); \

600 
cüddr1
 = 
	`ht⁄l
(
l
); \

601 i‡(
ﬁd
) { \

602 
	`GETLONG
(
l
, 
p
); \

603 
cüddr2
 = 
	`ht⁄l
(
l
); \

604 
no
.
ﬁd_addrs
 = 1; \

606 
cüddr2
 = 0; \

608 
no
.
√g
 = 1; \

609 
code
 \

610 }

	)

612 
	#NAKCIVJ
(
›t
, 
√g
, 
code
) \

613 i‡(
go
->
√g
 && \

614 ((
cûí
 = 
p
[1]Ë=
CILEN_COMPRESS
 || cûí =
CILEN_VJ
) && \

615 
Àn
 >
cûí
 && \

616 
p
[0] =
›t
) { \

617 
Àn
 -
cûí
; \

618 
	`INCPTR
(2, 
p
); \

619 
	`GETSHORT
(
cish‹t
, 
p
); \

620 
no
.
√g
 = 1; \

621 
code
 \

622 }

	)

624 
	#NAKCIDNS
(
›t
, 
√g
, 
code
) \

625 i‡(
go
->
√g
 && \

626 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

627 
Àn
 >
cûí
 && \

628 
p
[0] =
›t
) { \

629 
Àn
 -
cûí
; \

630 
	`INCPTR
(2, 
p
); \

631 
	`GETLONG
(
l
, 
p
); \

632 
cidnßddr
 = 
	`ht⁄l
(
l
); \

633 
no
.
√g
 = 1; \

634 
code
 \

635 }

	)

641 
	`NAKCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
, go->old_addrs,

642 i‡(
go
->
ac˚±_loˇl
 && 
cüddr1
) {

643 
åy
.
ouøddr
 = 
cüddr1
;

644 
	`IPCPDEBUG
((
LOG_INFO
, "local IPáddress %s\n",

645 
	`öë_¡ﬂ
(
cüddr1
)));

647 i‡(
go
->
ac˚±_ªmŸe
 && 
cüddr2
) {

648 
åy
.
hißddr
 = 
cüddr2
;

649 
	`IPCPDEBUG
((
LOG_INFO
, "remote IPáddress %s\n",

650 
	`öë_¡ﬂ
(
cüddr2
)));

660 
	`NAKCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
,

661 i‡(
cûí
 =
CILEN_VJ
) {

662 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
);

663 
	`GETCHAR
(
cicÊag
, 
p
);

664 i‡(
cish‹t
 =
IPCP_VJ_COMP
) {

665 
åy
.
ﬁd_vj
 = 0;

666 i‡(
cimax¶Ÿödex
 < 
go
->
max¶Ÿödex
) {

667 
åy
.
max¶Ÿödex
 = 
cimax¶Ÿödex
;

669 i‡(!
cicÊag
) {

670 
åy
.
cÊag
 = 0;

673 
åy
.
√g_vj
 = 0;

676 i‡(
cish‹t
 =
IPCP_VJ_COMP
 || cish‹à=
IPCP_VJ_COMP_OLD
) {

677 
åy
.
ﬁd_vj
 = 1;

678 
åy
.
vj_¥Ÿocﬁ
 = 
cish‹t
;

680 
åy
.
√g_vj
 = 0;

685 
	`NAKCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
,

686 
åy
.
dnßddr
[0] = 
cidnßddr
;

687 
	`IPCPDEBUG
((
LOG_INFO
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

690 
	`NAKCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
,

691 
åy
.
dnßddr
[1] = 
cidnßddr
;

692 
	`IPCPDEBUG
((
LOG_INFO
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
cidnßddr
)));

701 
Àn
 > 
CILEN_VOID
) {

702 
	`GETCHAR
(
côy≥
, 
p
);

703 
	`GETCHAR
(
cûí
, 
p
);

704 if–(
Àn
 -
cûí
) < 0 ) {

705 
bad
;

707 
√xt
 = 
p
 + 
cûí
 - 2;

709 
côy≥
) {

710 
CI_COMPRESSTYPE
:

711 i‡(
go
->
√g_vj
 || 
no
.neg_vj ||

712 (
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
)) {

713 
bad
;

715 
no
.
√g_vj
 = 1;

717 
CI_ADDRS
:

718 i‡((
go
->
√g_addr
 && go->
ﬁd_addrs
Ë|| 
no
.old_addrs

719 || 
cûí
 !
CILEN_ADDRS
) {

720 
bad
;

722 
åy
.
√g_addr
 = 1;

723 
åy
.
ﬁd_addrs
 = 1;

724 
	`GETLONG
(
l
, 
p
);

725 
cüddr1
 = 
	`ht⁄l
(
l
);

726 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

727 
åy
.
ouøddr
 = 
cüddr1
;

729 
	`GETLONG
(
l
, 
p
);

730 
cüddr2
 = 
	`ht⁄l
(
l
);

731 i‡(
cüddr2
 && 
go
->
ac˚±_ªmŸe
) {

732 
åy
.
hißddr
 = 
cüddr2
;

734 
no
.
ﬁd_addrs
 = 1;

736 
CI_ADDR
:

737 i‡(
go
->
√g_addr
 || 
no
.√g_add∏|| 
cûí
 !
CILEN_ADDR
) {

738 
bad
;

740 
åy
.
ﬁd_addrs
 = 0;

741 
	`GETLONG
(
l
, 
p
);

742 
cüddr1
 = 
	`ht⁄l
(
l
);

743 i‡(
cüddr1
 && 
go
->
ac˚±_loˇl
) {

744 
åy
.
ouøddr
 = 
cüddr1
;

746 i‡(
åy
.
ouøddr
 != 0) {

747 
åy
.
√g_addr
 = 1;

749 
no
.
√g_addr
 = 1;

752 
p
 = 
√xt
;

756 i‡(
Àn
 != 0) {

757 
bad
;

763 i‡(
f
->
°©e
 !
LS_OPENED
) {

764 *
go
 = 
åy
;

769 
bad
:

770 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_nakci:Ñeceived bad Nak!\n"));

772 
	}
}

779 
	$ù˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

781 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

782 
u_ch¨
 
cimax¶Ÿödex
, 
ciÊag
, 
cûí
;

783 
u_sh‹t
 
cish‹t
;

784 
u32_t
 
cû⁄g
;

785 
ù˝_›ti⁄s
 
åy
;

787 
åy
 = *
go
;

793 
	#REJCIADDR
(
›t
, 
√g
, 
ﬁd
, 
vÆ1
, 
vÆ2
) \

794 i‡(
go
->
√g
 && \

795 
Àn
 >(
cûí
 = 
ﬁd
? 
CILEN_ADDRS
: 
CILEN_ADDR
) && \

796 
p
[1] =
cûí
 && \

797 
p
[0] =
›t
) { \

798 
u32_t
 
l
; \

799 
Àn
 -
cûí
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
l
, 
p
); \

802 
cû⁄g
 = 
	`ht⁄l
(
l
); \

804 i‡(
cû⁄g
 !
vÆ1
) { \

805 
bad
; \

807 i‡(
ﬁd
) { \

808 
	`GETLONG
(
l
, 
p
); \

809 
cû⁄g
 = 
	`ht⁄l
(
l
); \

811 i‡(
cû⁄g
 !
vÆ2
) { \

812 
bad
; \

815 
åy
.
√g
 = 0; \

816 }

	)

818 
	#REJCIVJ
(
›t
, 
√g
, 
vÆ
, 
ﬁd
, 
max¶Ÿ
, 
cÊag
) \

819 i‡(
go
->
√g
 && \

820 
p
[1] =(
ﬁd
? 
CILEN_COMPRESS
 : 
CILEN_VJ
) && \

821 
Àn
 >
p
[1] && \

822 
p
[0] =
›t
) { \

823 
Àn
 -
p
[1]; \

824 
	`INCPTR
(2, 
p
); \

825 
	`GETSHORT
(
cish‹t
, 
p
); \

827 i‡(
cish‹t
 !
vÆ
) { \

828 
bad
; \

830 i‡(!
ﬁd
) { \

831 
	`GETCHAR
(
cimax¶Ÿödex
, 
p
); \

832 i‡(
cimax¶Ÿödex
 !
max¶Ÿ
) { \

833 
bad
; \

835 
	`GETCHAR
(
ciÊag
, 
p
); \

836 i‡(
ciÊag
 !
cÊag
) { \

837 
bad
; \

840 
åy
.
√g
 = 0; \

841 }

	)

843 
	#REJCIDNS
(
›t
, 
√g
, 
dnßddr
) \

844 i‡(
go
->
√g
 && \

845 ((
cûí
 = 
p
[1]Ë=
CILEN_ADDR
) && \

846 
Àn
 >
cûí
 && \

847 
p
[0] =
›t
) { \

848 
u32_t
 
l
; \

849 
Àn
 -
cûí
; \

850 
	`INCPTR
(2, 
p
); \

851 
	`GETLONG
(
l
, 
p
); \

852 
cû⁄g
 = 
	`ht⁄l
(
l
); \

854 i‡(
cû⁄g
 !
dnßddr
) { \

855 
bad
; \

857 
åy
.
√g
 = 0; \

858 }

	)

860 
	`REJCIADDR
((
go
->
ﬁd_addrs
? 
CI_ADDRS
: 
CI_ADDR
), 
√g_addr
,

861 
go
->
ﬁd_addrs
, go->
ouøddr
, go->
hißddr
);

863 
	`REJCIVJ
(
CI_COMPRESSTYPE
, 
√g_vj
, 
go
->
vj_¥Ÿocﬁ
, go->
ﬁd_vj
,

864 
go
->
max¶Ÿödex
, go->
cÊag
);

866 
	`REJCIDNS
(
CI_MS_DNS1
, 
ªq_dns1
, 
go
->
dnßddr
[0]);

868 
	`REJCIDNS
(
CI_MS_DNS2
, 
ªq_dns2
, 
go
->
dnßddr
[1]);

873 i‡(
Àn
 != 0) {

874 
bad
;

879 i‡(
f
->
°©e
 !
LS_OPENED
) {

880 *
go
 = 
åy
;

884 
bad
:

885 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_rejci:Ñeceived bad Reject!\n"));

887 
	}
}

898 
	$ù˝_ªqci
(
fsm
 *
f
, 
u_ch¨
 *
öp
 ,*
Àn
 ,
ªje˘_if_dißgªe
)

900 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

901 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

902 
ù˝_›ti⁄s
 *
ao
 = &
ù˝_Ælow›ti⁄s
[
f
->
unô
];

903 #ifde‡
OLD_CI_ADDRS


904 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

906 
u_ch¨
 *
cù
, *
√xt
;

907 
u_sh‹t
 
cûí
, 
côy≥
;

908 
u_sh‹t
 
cish‹t
;

909 
u32_t
 
é
, 
cüddr1
;

910 #ifde‡
OLD_CI_ADDRS


911 
u32_t
 
cüddr2
;

913 
rc
 = 
CONFACK
;

914 
‹c
;

915 
u_ch¨
 *
p
;

916 
u_ch¨
 *
u˝
 = 
öp
;

917 
l
 = *
Àn
;

918 
u_ch¨
 
max¶Ÿödex
, 
cÊag
;

919 
d
;

921 
cis_ª˚ived
[
f
->
unô
] = 1;

926 
	`BZERO
(
ho
, (*ho));

931 
√xt
 = 
öp
;

932 
l
) {

933 
‹c
 = 
CONFACK
;

934 
cù
 = 
p
 = 
√xt
;

935 i‡(
l
 < 2 ||

936 
p
[1] < 2 ||

937 
p
[1] > 
l
) {

938 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: bad CIÜength!\n"));

939 
‹c
 = 
CONFREJ
;

940 
cûí
 = 
l
;

941 
l
 = 0;

942 
ídswôch
;

944 
	`GETCHAR
(
côy≥
, 
p
);

945 
	`GETCHAR
(
cûí
, 
p
);

946 
l
 -
cûí
;

947 
√xt
 +
cûí
;

949 
côy≥
) {

950 #ifde‡
OLD_CI_ADDRS


951 
CI_ADDRS
:

952 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci:Ñeceived ADDRS\n"));

953 i‡(!
ao
->
√g_addr
 ||

954 
cûí
 !
CILEN_ADDRS
) {

955 
‹c
 = 
CONFREJ
;

965 
	`GETLONG
(
é
, 
p
);

966 
cüddr1
 = 
	`ht⁄l
(
é
);

967 
	`IPCPDEBUG
((
LOG_INFO
, "hi†add∏%s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

968 i‡(
cüddr1
 !
wo
->
hißddr


969 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

970 
‹c
 = 
CONFNAK
;

971 i‡(!
ªje˘_if_dißgªe
) {

972 
	`DECPTR
((
u32_t
), 
p
);

973 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

974 
	`PUTLONG
(
é
, 
p
);

976 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

980 
‹c
 = 
CONFREJ
;

981 
wo
->
ªq_addr
 = 0;

989 
	`GETLONG
(
é
, 
p
);

990 
cüddr2
 = 
	`ht⁄l
(
é
);

991 
	`IPCPDEBUG
((
LOG_INFO
, "ou∏add∏%s\n", 
	`öë_¡ﬂ
(
cüddr2
)));

992 i‡(
cüddr2
 !
wo
->
ouøddr
) {

993 i‡(
cüddr2
 =0 || !
wo
->
ac˚±_loˇl
) {

994 
‹c
 = 
CONFNAK
;

995 i‡(!
ªje˘_if_dißgªe
) {

996 
	`DECPTR
((
u32_t
), 
p
);

997 
é
 = 
	`¡ohl
(
wo
->
ouøddr
);

998 
	`PUTLONG
(
é
, 
p
);

1001 
go
->
ouøddr
 = 
cüddr2
;

1005 
ho
->
√g_addr
 = 1;

1006 
ho
->
ﬁd_addrs
 = 1;

1007 
ho
->
hißddr
 = 
cüddr1
;

1008 
ho
->
ouøddr
 = 
cüddr2
;

1012 
CI_ADDR
:

1013 i‡(!
ao
->
√g_addr
) {

1014 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDRÇotállowed\n"));

1015 
‹c
 = 
CONFREJ
;

1017 } i‡(
cûí
 !
CILEN_ADDR
) {

1018 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Reject ADDR badÜen\n"));

1019 
‹c
 = 
CONFREJ
;

1029 
	`GETLONG
(
é
, 
p
);

1030 
cüddr1
 = 
	`ht⁄l
(
é
);

1031 i‡(
cüddr1
 !
wo
->
hißddr


1032 && (
cüddr1
 =0 || !
wo
->
ac˚±_ªmŸe
)) {

1033 
‹c
 = 
CONFNAK
;

1034 i‡(!
ªje˘_if_dißgªe
) {

1035 
	`DECPTR
((
u32_t
), 
p
);

1036 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1037 
	`PUTLONG
(
é
, 
p
);

1039 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nak ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1040 } i‡(
cüddr1
 =0 && 
wo
->
hißddr
 == 0) {

1044 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1045 
‹c
 = 
CONFREJ
;

1046 
wo
->
ªq_addr
 = 0;

1050 
ho
->
√g_addr
 = 1;

1051 
ho
->
hißddr
 = 
cüddr1
;

1052 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: ADDR %s\n", 
	`öë_¡ﬂ
(
cüddr1
)));

1055 
CI_MS_DNS1
:

1056 
CI_MS_DNS2
:

1058 
d
 = 
côy≥
 =
CI_MS_DNS2
;

1061 i‡(
ao
->
dnßddr
[
d
] == 0 ||

1062 
cûí
 !
CILEN_ADDR
) {

1063 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög DNS%d Reque°\n", 
d
+1));

1064 
‹c
 = 
CONFREJ
;

1067 
	`GETLONG
(
é
, 
p
);

1068 i‡(
	`ht⁄l
(
é
Ë!
ao
->
dnßddr
[
d
]) {

1069 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Naking DNS%d Request %d\n",

1070 
d
+1, 
	`öë_¡ﬂ
(
é
)));

1071 
	`DECPTR
((
u32_t
), 
p
);

1072 
é
 = 
	`¡ohl
(
ao
->
dnßddr
[
d
]);

1073 
	`PUTLONG
(
é
, 
p
);

1074 
‹c
 = 
CONFNAK
;

1076 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived DNS%d Reque°\n", 
d
+1));

1079 
CI_MS_WINS1
:

1080 
CI_MS_WINS2
:

1082 
d
 = 
côy≥
 =
CI_MS_WINS2
;

1083 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñe˚ived WINS%d Reque°\n", 
d
+1));

1086 i‡(
ao
->
wößddr
[
d
] == 0 ||

1087 
cûí
 !
CILEN_ADDR
) {

1088 
‹c
 = 
CONFREJ
;

1091 
	`GETLONG
(
é
, 
p
);

1092 i‡(
	`ht⁄l
(
é
Ë!
ao
->
wößddr
[
d
]) {

1093 
	`DECPTR
((
u32_t
), 
p
);

1094 
é
 = 
	`¡ohl
(
ao
->
wößddr
[
d
]);

1095 
	`PUTLONG
(
é
, 
p
);

1096 
‹c
 = 
CONFNAK
;

1100 
CI_COMPRESSTYPE
:

1101 i‡(!
ao
->
√g_vj
) {

1102 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: Rejecting COMPRESSTYPEÇotállowed\n"));

1103 
‹c
 = 
CONFREJ
;

1105 } i‡(
cûí
 !
CILEN_VJ
 && cûí !
CILEN_COMPRESS
) {

1106 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPEÜí=%d\n", 
cûí
));

1107 
‹c
 = 
CONFREJ
;

1110 
	`GETSHORT
(
cish‹t
, 
p
);

1112 i‡(!(
cish‹t
 =
IPCP_VJ_COMP
 ||

1113 (
cish‹t
 =
IPCP_VJ_COMP_OLD
 && 
cûí
 =
CILEN_COMPRESS
))) {

1114 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög COMPRESSTYPE %d\n", 
cish‹t
));

1115 
‹c
 = 
CONFREJ
;

1119 
ho
->
√g_vj
 = 1;

1120 
ho
->
vj_¥Ÿocﬁ
 = 
cish‹t
;

1121 i‡(
cûí
 =
CILEN_VJ
) {

1122 
	`GETCHAR
(
max¶Ÿödex
, 
p
);

1123 i‡(
max¶Ÿödex
 > 
ao
->maxslotindex) {

1124 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ max slŸ %d\n", 
max¶Ÿödex
));

1125 
‹c
 = 
CONFNAK
;

1126 i‡(!
ªje˘_if_dißgªe
) {

1127 
	`DECPTR
(1, 
p
);

1128 
	`PUTCHAR
(
ao
->
max¶Ÿödex
, 
p
);

1131 
	`GETCHAR
(
cÊag
, 
p
);

1132 i‡(
cÊag
 && !
ao
->cflag) {

1133 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Nakög VJ cÊag %d\n", 
cÊag
));

1134 
‹c
 = 
CONFNAK
;

1135 i‡(!
ªje˘_if_dißgªe
) {

1136 
	`DECPTR
(1, 
p
);

1137 
	`PUTCHAR
(
wo
->
cÊag
, 
p
);

1140 
ho
->
max¶Ÿödex
 = maxslotindex;

1141 
ho
->
cÊag
 = cflag;

1143 
ho
->
ﬁd_vj
 = 1;

1144 
ho
->
max¶Ÿödex
 = 
MAX_SLOTS
 - 1;

1145 
ho
->
cÊag
 = 1;

1147 
	`IPCPDEBUG
((
LOG_INFO
,

1149 
ho
->
vj_¥Ÿocﬁ
, ho->
ﬁd_vj
, ho->
max¶Ÿödex
, ho->
cÊag
));

1153 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci: Reje˘ög unknow¿CIÅy≥ %d\n", 
côy≥
));

1154 
‹c
 = 
CONFREJ
;

1158 
ídswôch
:

1159 i‡(
‹c
 =
CONFACK
 &&

1160 
rc
 !
CONFACK
) {

1164 i‡(
‹c
 =
CONFNAK
) {

1165 i‡(
ªje˘_if_dißgªe
) {

1166 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RejectingÅoo manyÇaks\n"));

1167 
‹c
 = 
CONFREJ
;

1169 i‡(
rc
 =
CONFREJ
) {

1172 i‡(
rc
 =
CONFACK
) {

1173 
rc
 = 
CONFNAK
;

1174 
u˝
 = 
öp
;

1179 i‡(
‹c
 =
CONFREJ
 &&

1180 
rc
 !
CONFREJ
) {

1181 
rc
 = 
CONFREJ
;

1182 
u˝
 = 
öp
;

1186 i‡(
u˝
 !
cù
) {

1187 
	`BCOPY
(
cù
, 
u˝
, 
cûí
);

1191 
	`INCPTR
(
cûí
, 
u˝
);

1201 i‡(
rc
 !
CONFREJ
 && !
ho
->
√g_addr
 &&

1202 
wo
->
ªq_addr
 && !
ªje˘_if_dißgªe
) {

1203 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp_reqci: RequestingÖeeráddress\n"));

1204 i‡(
rc
 =
CONFACK
) {

1205 
rc
 = 
CONFNAK
;

1206 
u˝
 = 
öp
;

1207 
wo
->
ªq_addr
 = 0;

1209 
	`PUTCHAR
(
CI_ADDR
, 
u˝
);

1210 
	`PUTCHAR
(
CILEN_ADDR
, 
u˝
);

1211 
é
 = 
	`¡ohl
(
wo
->
hißddr
);

1212 
	`PUTLONG
(
é
, 
u˝
);

1215 *
Àn
 = ()(
u˝
 - 
öp
);

1216 
	`IPCPDEBUG
((
LOG_INFO
, "ù˝_ªqci:Ñëu∫ög C⁄figuª-%s\n", 
	`CODENAME
(
rc
)));

1217  (
rc
);

1218 
	}
}

1227 
	$ù_check_›ti⁄s
(
u_l⁄g
 
loˇlAddr
)

1229 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[0];

1235 i‡(
wo
->
ouøddr
 =0 && !
µp_£âögs
.
dißbÀ_deÁu…ù
) {

1236 
wo
->
ac˚±_loˇl
 = 1;

1237 
wo
->
ouøddr
 = 
	`ht⁄l
(
loˇlAddr
);

1239 
	}
}

1249 
	$ù˝_up
(
fsm
 *
f
)

1251 
u32_t
 
mask
;

1252 
ù˝_›ti⁄s
 *
ho
 = &
ù˝_his›ti⁄s
[
f
->
unô
];

1253 
ù˝_›ti⁄s
 *
go
 = &
ù˝_gŸ›ti⁄s
[
f
->
unô
];

1254 
ù˝_›ti⁄s
 *
wo
 = &
ù˝_w™t›ti⁄s
[
f
->
unô
];

1256 
	`≈_up
(
f
->
unô
, 
PPP_IP
);

1257 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: up\n"));

1262 i‡(!
ho
->
√g_addr
) {

1263 
ho
->
hißddr
 = 
wo
->hisaddr;

1266 i‡(
ho
->
hißddr
 == 0) {

1267 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÑemote IPáddress\n"));

1268 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÑemote IPáddress");

1271 i‡(
go
->
ouøddr
 == 0) {

1272 
	`IPCPDEBUG
((
LOG_ERR
, "CouldÇot determineÜocal IPáddress\n"));

1273 
	`ù˝_˛o£
(
f
->
unô
, "CouldÇot determineÜocal IPáddress");

1277 i‡(
µp_£âögs
.
u£≥îdns
 && (
go
->
dnßddr
[0] || go->dnsaddr[1])) {

1284 i‡(!
	`auth_ù_addr
(
f
->
unô
, 
ho
->
hißddr
)) {

1285 
	`IPCPDEBUG
((
LOG_ERR
, "Peer isÇotáuthorizedÅo useÑemoteáddress %s\n",

1286 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1287 
	`ù˝_˛o£
(
f
->
unô
, "UnauthorizedÑemote IPáddress");

1292 
	`sifvjcomp
(
f
->
unô
, 
ho
->
√g_vj
, ho->
cÊag
, ho->
max¶Ÿödex
);

1297 
mask
 = 
	`GëMask
(
go
->
ouøddr
);

1299 i‡(!
	`siÁddr
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
, 
mask
, go->
dnßddr
[0], go->dnsaddr[1])) {

1300 
	`IPCPDEBUG
((
LOG_WARNING
, "sifaddr failed\n"));

1301 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1306 i‡(!
	`sifup
(
f
->
unô
)) {

1307 
	`IPCPDEBUG
((
LOG_WARNING
, "sifup failed\n"));

1308 
	`ù˝_˛o£
(
f
->
unô
, "Interface configuration failed");

1312 
	`si‚pmode
(
f
->
unô
, 
PPP_IP
, 
NPMODE_PASS
);

1315 i‡(
ù˝_w™t›ti⁄s
[
f
->
unô
].
deÁu…_rouã
) {

1316 i‡(
	`sifdeÁu…rouã
(
f
->
unô
, 
go
->
ouøddr
, 
ho
->
hißddr
)) {

1317 
deÁu…_rouã_£t
[
f
->
unô
] = 1;

1321 
	`IPCPDEBUG
((
LOG_NOTICE
, "loˇ» IPáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
ouøddr
)));

1322 
	`IPCPDEBUG
((
LOG_NOTICE
, "ªmŸêIPáddªs†%s\n", 
	`öë_¡ﬂ
(
ho
->
hißddr
)));

1323 i‡(
go
->
dnßddr
[0]) {

1324 
	`IPCPDEBUG
((
LOG_NOTICE
, "¥im¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[0])));

1326 i‡(
go
->
dnßddr
[1]) {

1327 
	`IPCPDEBUG
((
LOG_NOTICE
, "£c⁄d¨y DNSáddªs†%s\n", 
	`öë_¡ﬂ
(
go
->
dnßddr
[1])));

1329 
	}
}

1339 
	$ù˝_down
(
fsm
 *
f
)

1341 
	`IPCPDEBUG
((
LOG_INFO
, "ipcp: down\n"));

1342 
	`≈_down
(
f
->
unô
, 
PPP_IP
);

1343 
	`sifvjcomp
(
f
->
unô
, 0, 0, 0);

1345 
	`sifdown
(
f
->
unô
);

1346 
	`ù˝_˛ór_addrs
(
f
->
unô
);

1347 
	}
}

1354 
	$ù˝_˛ór_addrs
(
unô
)

1356 
u32_t
 
ouøddr
, 
hißddr
;

1358 
ouøddr
 = 
ù˝_gŸ›ti⁄s
[
unô
].ouraddr;

1359 
hißddr
 = 
ù˝_his›ti⁄s
[
unô
].hisaddr;

1360 i‡(
deÁu…_rouã_£t
[
unô
]) {

1361 
	`cifdeÁu…rouã
(
unô
, 
ouøddr
, 
hißddr
);

1362 
deÁu…_rouã_£t
[
unô
] = 0;

1364 
	`ciÁddr
(
unô
, 
ouøddr
, 
hißddr
);

1365 
	}
}

1372 
	$ù˝_föished
(
fsm
 *
f
)

1374 
	`≈_föished
(
f
->
unô
, 
PPP_IP
);

1375 
	}
}

1379 
ù˝_¥öçkt
(
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1381 
	`LWIP_UNUSED_ARG
(
p
);

1382 
	`LWIP_UNUSED_ARG
(
∂í
);

1383 
	`LWIP_UNUSED_ARG
(
¥öãr
);

1384 
	`LWIP_UNUSED_ARG
(
¨g
);

1386 
	}
}

1393 
	#IP_HDRLEN
 20

	)

1394 
	#IP_OFFMASK
 0x1fff

	)

1395 
	#IPPROTO_TCP
 6

	)

1396 
	#TCP_HDRLEN
 20

	)

1397 
	#TH_FIN
 0x01

	)

1404 
	#√t_sh‹t
(
x
Ë(((x)[0] << 8Ë+ (x)[1])

	)

1405 
	#gë_ùhl
(
x
Ë(((*)(x))[0] & 0xF)

	)

1406 
	#gë_ùoff
(
x
Ë
	`√t_sh‹t
((*)(xË+ 6)

	)

1407 
	#gë_ù¥Ÿo
(
x
Ë(((*)(x))[9])

	)

1408 
	#gë_t˝off
(
x
Ë(((*)(x))[12] >> 4)

	)

1409 
	#gë_t˝Êags
(
x
Ë(((*)(x))[13])

	)

1412 
	$ù_a˘ive_pkt
(
u_ch¨
 *
pkt
, 
Àn
)

1414 
u_ch¨
 *
t˝
;

1415 
hÀn
;

1417 
Àn
 -
PPP_HDRLEN
;

1418 
pkt
 +
PPP_HDRLEN
;

1419 i‡(
Àn
 < 
IP_HDRLEN
) {

1422 i‡((
	`gë_ùoff
(
pkt
Ë& 
IP_OFFMASK
) != 0) {

1425 i‡(
	`gë_ù¥Ÿo
(
pkt
Ë!
IPPROTO_TCP
) {

1428 
hÀn
 = 
	`gë_ùhl
(
pkt
) * 4;

1429 i‡(
Àn
 < 
hÀn
 + 
TCP_HDRLEN
) {

1432 
t˝
 = 
pkt
 + 
hÀn
;

1433 i‡((
	`gë_t˝Êags
(
t˝
Ë& 
TH_FIN
Ë!0 && 
Àn
 =
hÀn
 + 
	`gë_t˝off
(tcp) * 4) {

1437 
	}
}

	@net/lwip/netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

63 
	#CI_ADDRS
 1

	)

64 
	#CI_COMPRESSTYPE
 2

	)

65 
	#CI_ADDR
 3

	)

67 
	#CI_MS_WINS1
 128

	)

68 
	#CI_MS_DNS1
 129

	)

69 
	#CI_MS_WINS2
 130

	)

70 
	#CI_MS_DNS2
 131

	)

72 
	#IPCP_VJMODE_OLD
 1

	)

73 
	#IPCP_VJMODE_RFC1172
 2

	)

74 
	#IPCP_VJMODE_RFC1332
 3

	)

77 
	#IPCP_VJ_COMP
 0x002d

	)

78 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

86 
	sù˝_›ti⁄s
 {

87 
u_öt
 
	m√g_addr
 : 1;

88 
u_öt
 
	mﬁd_addrs
 : 1;

89 
u_öt
 
	mªq_addr
 : 1;

90 
u_öt
 
	mdeÁu…_rouã
 : 1;

91 
u_öt
 
	m¥oxy_¨p
 : 1;

92 
u_öt
 
	m√g_vj
 : 1;

93 
u_öt
 
	mﬁd_vj
 : 1;

94 
u_öt
 
	mac˚±_loˇl
 : 1;

95 
u_öt
 
	mac˚±_ªmŸe
 : 1;

96 
u_öt
 
	mªq_dns1
 : 1;

97 
u_öt
 
	mªq_dns2
 : 1;

98 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

99 
u_ch¨
 
	mmax¶Ÿödex
;

100 
u_ch¨
 
	mcÊag
;

101 
u32_t
 
	mouøddr
, 
	mhißddr
;

102 
u32_t
 
	mdnßddr
[2];

103 
u32_t
 
	mwößddr
[2];

104 } 
	tù˝_›ti⁄s
;

111 
fsm
 
ù˝_fsm
[];

112 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

113 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

114 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

115 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

117 
¥Ÿít
 
ù˝_¥Ÿít
;

	@net/lwip/netif/ppp/lcp.c

54 
	~"lwù/›t.h
"

56 #i‡
PPP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"fsm.h
"

62 
	~"ch≠.h
"

63 
	~"magic.h
"

64 
	~"auth.h
"

65 
	~"l˝.h
"

67 
	~<°rög.h
>

69 #i‡
PPPOE_SUPPORT


70 
	~"√tif/µp_€.h
"

72 
	#PPPOE_MAXMTU
 
PPP_MAXMRU


	)

82 
	#CILEN_VOID
 2

	)

83 
	#CILEN_CHAR
 3

	)

84 
	#CILEN_SHORT
 4

	)

85 
	#CILEN_CHAP
 5

	)

86 
	#CILEN_LONG
 6

	)

87 
	#CILEN_LQR
 8

	)

88 
	#CILEN_CBCP
 3

	)

97 
l˝_ª£tci
 (
fsm
*);

98 
l˝_cûí
 (
fsm
*);

99 
l˝_addci
 (
fsm
*, 
u_ch¨
*, *);

100 
l˝_ackci
 (
fsm
*, 
u_ch¨
*, );

101 
l˝_«kci
 (
fsm
*, 
u_ch¨
*, );

102 
l˝_ªjci
 (
fsm
*, 
u_ch¨
*, );

103 
l˝_ªqci
 (
fsm
*, 
u_ch¨
*, *, );

104 
l˝_up
 (
fsm
*);

105 
l˝_down
 (
fsm
*);

106 
l˝_°¨tög
 (
fsm
*);

107 
l˝_föished
 (
fsm
*);

108 
l˝_extcode
 (
fsm
*, , 
u_ch¨
, u_char*, );

110 
l˝_ΩrŸªj
 (
fsm
*, 
u_ch¨
*, );

115 
l˝_echo_lowîup
 ();

116 
l˝_echo_lowîdown
 ();

117 
L˝EchoTimeout
 (*);

118 
l˝_ª˚ived_echo_ª∂y
 (
fsm
*, , 
u_ch¨
*, );

119 
L˝SídEchoReque°
 (
fsm
*);

120 
L˝LökFaûuª
 (
fsm
*);

121 
L˝EchoCheck
 (
fsm
*);

127 
l˝_öput
 (, 
u_ch¨
 *, );

128 
l˝_¥Ÿªj
 ();

130 
	#CODENAME
(
x
Ë((xË=
CONFACK
 ? "ACK" : (xË=
CONFNAK
 ? "NAK" : "REJ")

	)

137 
LökPha£
 
	gl˝_pha£
[
NUM_PPP
];

138 
l˝_›ti⁄s
 
	gl˝_w™t›ti⁄s
[
NUM_PPP
];

139 
l˝_›ti⁄s
 
	gl˝_gŸ›ti⁄s
[
NUM_PPP
];

140 
l˝_›ti⁄s
 
	gl˝_Ælow›ti⁄s
[
NUM_PPP
];

141 
l˝_›ti⁄s
 
	gl˝_his›ti⁄s
[
NUM_PPP
];

142 
ext_accm
 
	gxmô_accm
[
NUM_PPP
];

149 
fsm
 
	gl˝_fsm
[
NUM_PPP
];

150 
u_öt
 
	gl˝_echo_öãrvÆ
 = 
LCP_ECHOINTERVAL
;

151 
u_öt
 
	gl˝_echo_Áûs
 = 
LCP_MAXECHOFAILS
;

152 
u32_t
 
	gl˝_echos_≥ndög
 = 0;

153 
u32_t
 
	gl˝_echo_numbî
 = 0;

154 
u32_t
 
	gl˝_echo_timî_ru¬ög
 = 0;

156 
u_ch¨
 
	g«k_buf„r
[
PPP_MRU
];

158 
fsm_ˇŒbacks
 
	gl˝_ˇŒbacks
 = {

159 
l˝_ª£tci
,

160 
l˝_cûí
,

161 
l˝_addci
,

162 
l˝_ackci
,

163 
l˝_«kci
,

164 
l˝_ªjci
,

165 
l˝_ªqci
,

166 
l˝_up
,

167 
l˝_down
,

168 
l˝_°¨tög
,

169 
l˝_föished
,

170 
NULL
,

171 
NULL
,

172 
l˝_extcode
,

176 
¥Ÿít
 
	gl˝_¥Ÿít
 = {

177 
PPP_LCP
,

178 
l˝_öô
,

179 
l˝_öput
,

180 
l˝_¥Ÿªj
,

181 
l˝_lowîup
,

182 
l˝_lowîdown
,

183 
l˝_›í
,

184 
l˝_˛o£
,

186 
l˝_¥öçkt
,

187 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL


198 
	gl˝_lo›backÁû
 = 
DEFLOOPBACKFAIL
;

209 
	$l˝_öô
(
unô
)

211 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

212 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

213 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
unô
];

215 
f
->
unô
 = unit;

216 
f
->
¥Ÿocﬁ
 = 
PPP_LCP
;

217 
f
->
ˇŒbacks
 = &
l˝_ˇŒbacks
;

219 
	`fsm_öô
(
f
);

221 
wo
->
∑ssive
 = 0;

222 
wo
->
sûít
 = 0;

223 
wo
->
ª°¨t
 = 0;

224 
wo
->
√g_mru
 = 1;

225 
wo
->
mru
 = 
PPP_DEFMRU
;

226 
wo
->
√g_asyncm≠
 = 1;

227 
wo
->
asyncm≠
 = 0x00000000l;

228 
wo
->
√g_ch≠
 = 0;

229 
wo
->
√g_u∑p
 = 0;

230 
wo
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

231 
wo
->
√g_magi˙umbî
 = 1;

232 
wo
->
√g_pcom¥essi⁄
 = 1;

233 
wo
->
√g_accom¥essi⁄
 = 1;

234 
wo
->
√g_lqr
 = 0;

235 
wo
->
√g_cb˝
 = 0;

237 
ao
->
√g_mru
 = 1;

238 
ao
->
mru
 = 
PPP_MAXMRU
;

239 
ao
->
√g_asyncm≠
 = 1;

240 
ao
->
asyncm≠
 = 0x00000000l;

241 
ao
->
√g_ch≠
 = (
CHAP_SUPPORT
 != 0);

242 
ao
->
ch≠_mdty≥
 = 
CHAP_DIGEST_MD5
;

243 
ao
->
√g_u∑p
 = (
PAP_SUPPORT
 != 0);

244 
ao
->
√g_magi˙umbî
 = 1;

245 
ao
->
√g_pcom¥essi⁄
 = 1;

246 
ao
->
√g_accom¥essi⁄
 = 1;

247 
ao
->
√g_lqr
 = 0;

248 
ao
->
√g_cb˝
 = (
CBCP_SUPPORT
 != 0);

254 
	`mem£t
(
xmô_accm
[
unô
], 0, (xmit_accm[0]));

255 
xmô_accm
[
unô
][15] = 0x60;

256 
xmô_accm
[
unô
][0] = (
u_ch¨
)((
ao
->
asyncm≠
 & 0xFF));

257 
xmô_accm
[
unô
][1] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 8) & 0xFF);

258 
xmô_accm
[
unô
][2] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 16) & 0xFF);

259 
xmô_accm
[
unô
][3] = (
u_ch¨
)((
ao
->
asyncm≠
 >> 24) & 0xFF);

260 
	`LCPDEBUG
((
LOG_INFO
, "lcp_init: xmit_accm=%X %X %X %X\n",

261 
xmô_accm
[
unô
][0],

262 
xmô_accm
[
unô
][1],

263 
xmô_accm
[
unô
][2],

264 
xmô_accm
[
unô
][3]));

266 
l˝_pha£
[
unô
] = 
PHASE_INITIALIZE
;

267 
	}
}

274 
	$l˝_›í
(
unô
)

276 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

277 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

279 
f
->
Êags
 = 0;

280 i‡(
wo
->
∑ssive
) {

281 
f
->
Êags
 |
OPT_PASSIVE
;

283 i‡(
wo
->
sûít
) {

284 
f
->
Êags
 |
OPT_SILENT
;

286 
	`fsm_›í
(
f
);

288 
l˝_pha£
[
unô
] = 
PHASE_ESTABLISH
;

289 
	}
}

296 
	$l˝_˛o£
(
unô
, *
ªas⁄
)

298 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

300 i‡(
l˝_pha£
[
unô
] !
PHASE_DEAD
) {

301 
l˝_pha£
[
unô
] = 
PHASE_TERMINATE
;

303 i‡(
f
->
°©e
 =
LS_STOPPED
 && f->
Êags
 & (
OPT_PASSIVE
|
OPT_SILENT
)) {

310 
f
->
°©e
 = 
LS_CLOSED
;

311 
	`l˝_föished
(
f
);

313 
	`fsm_˛o£
(&
l˝_fsm
[
unô
], 
ªas⁄
);

315 
	}
}

322 
	$l˝_lowîup
(
unô
)

324 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
unô
];

331 
	`µp_£t_xaccm
(
unô
, &
xmô_accm
[unit]);

332 
	`µp_£nd_c⁄fig
(
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

333 
	`µp_ªcv_c⁄fig
(
unô
, 
PPP_MRU
, 0x00000000l,

334 
wo
->
√g_pcom¥essi⁄
, wo->
√g_accom¥essi⁄
);

335 
≥î_mru
[
unô
] = 
PPP_MRU
;

336 
l˝_Ælow›ti⁄s
[
unô
].
asyncm≠
 = (
u_l⁄g
)
xmô_accm
[unit][0]

337 | ((
u_l⁄g
)
xmô_accm
[
unô
][1] << 8)

338 | ((
u_l⁄g
)
xmô_accm
[
unô
][2] << 16)

339 | ((
u_l⁄g
)
xmô_accm
[
unô
][3] << 24);

340 
	`LCPDEBUG
((
LOG_INFO
, "lcp_lowerup:ásyncmap=%X %X %X %X\n",

341 
xmô_accm
[
unô
][3],

342 
xmô_accm
[
unô
][2],

343 
xmô_accm
[
unô
][1],

344 
xmô_accm
[
unô
][0]));

346 
	`fsm_lowîup
(&
l˝_fsm
[
unô
]);

347 
	}
}

354 
	$l˝_lowîdown
(
unô
)

356 
	`fsm_lowîdown
(&
l˝_fsm
[
unô
]);

357 
	}
}

363 
	$l˝_•rŸªj
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

370 
	`fsm_sd©a
(&
l˝_fsm
[
unô
], 
PROTREJ
, ++l˝_fsm[unô].
id
, 
p
, 
Àn
);

371 
	}
}

382 
	$l˝_öput
(
unô
, 
u_ch¨
 *
p
, 
Àn
)

384 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

386 
	`fsm_öput
(
f
, 
p
, 
Àn
);

387 
	}
}

394 
	$l˝_extcode
(
fsm
 *
f
, 
code
, 
u_ch¨
 
id
, u_ch¨ *
öp
, 
Àn
)

396 
u_ch¨
 *
magp
;

398  
code
 ){

399 
PROTREJ
:

400 
	`l˝_ΩrŸªj
(
f
, 
öp
, 
Àn
);

403 
ECHOREQ
:

404 i‡(
f
->
°©e
 !
LS_OPENED
) {

407 
	`LCPDEBUG
((
LOG_INFO
, "l˝: Echo-Reque°, Rcvd id %d\n", 
id
));

408 
magp
 = 
öp
;

409 
	`PUTLONG
(
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
, 
magp
);

410 
	`fsm_sd©a
(
f
, 
ECHOREP
, 
id
, 
öp
, 
Àn
);

413 
ECHOREP
:

414 
	`l˝_ª˚ived_echo_ª∂y
(
f
, 
id
, 
öp
, 
Àn
);

417 
DISCREQ
:

424 
	}
}

433 
	$l˝_ΩrŸªj
(
fsm
 *
f
, 
u_ch¨
 *
öp
, 
Àn
)

435 
i
;

436 
¥Ÿít
 *
¥Ÿp
;

437 
u_sh‹t
 
¥Ÿ
;

439 i‡(
Àn
 <  (
u_sh‹t
)) {

440 
	`LCPDEBUG
((
LOG_INFO
, "lcp_rprotrej: Rcvd short Protocol-RejectÖacket!\n"));

444 
	`GETSHORT
(
¥Ÿ
, 
öp
);

446 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ΩrŸªj: Rcvd PrŸocﬁ-Reje˘Öackë f‹ %x!\n", 
¥Ÿ
));

452 if–
f
->
°©e
 !
LS_OPENED
 ) {

453 
	`LCPDEBUG
((
LOG_INFO
, "PrŸocﬁ-Reje˘ disˇrded: LCP i¿°©ê%d\n", 
f
->
°©e
));

460 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

461 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =
¥Ÿ
 &&ÖrŸp->
íabÀd_Êag
) {

462 (*
¥Ÿp
->
¥Ÿªj
)(
f
->
unô
);

467 
	`LCPDEBUG
((
LOG_WARNING
, "PrŸocﬁ-Reje˘ f‹ unsuµ‹ãdÖrŸocﬁ 0x%x\n", 
¥Ÿ
));

468 
	}
}

475 
	$l˝_¥Ÿªj
(
unô
)

477 
	`LWIP_UNUSED_ARG
(
unô
);

481 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_protrej: Received Protocol-Reject for LCP!\n"));

482 
	`fsm_¥Ÿªje˘
(&
l˝_fsm
[
unô
]);

483 
	}
}

490 
	$l˝_ª£tci
(
fsm
 *
f
)

492 
l˝_w™t›ti⁄s
[
f
->
unô
].
magi˙umbî
 = 
	`magic
();

493 
l˝_w™t›ti⁄s
[
f
->
unô
].
numlo›s
 = 0;

494 
l˝_gŸ›ti⁄s
[
f
->
unô
] = 
l˝_w™t›ti⁄s
[f->unit];

495 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

496 
	`auth_ª£t
(
f
->
unô
);

497 
	}
}

503 
	$l˝_cûí
(
fsm
 *
f
)

505 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

507 
	#LENCIVOID
(
√g
Ë(“egË? 
CILEN_VOID
 : 0)

	)

508 
	#LENCICHAP
(
√g
Ë(“egË? 
CILEN_CHAP
 : 0)

	)

509 
	#LENCISHORT
(
√g
Ë(“egË? 
CILEN_SHORT
 : 0)

	)

510 
	#LENCILONG
(
√g
Ë(“egË? 
CILEN_LONG
 : 0)

	)

511 
	#LENCILQR
(
√g
Ë(“egË? 
CILEN_LQR
: 0)

	)

512 
	#LENCICBCP
(
√g
Ë(“egË? 
CILEN_CBCP
: 0)

	)

517  (
	`LENCISHORT
(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) +

518 
	`LENCILONG
(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) +

519 
	`LENCICHAP
(
go
->
√g_ch≠
) +

520 
	`LENCISHORT
(!
go
->
√g_ch≠
 && go->
√g_u∑p
) +

521 
	`LENCILQR
(
go
->
√g_lqr
) +

522 
	`LENCICBCP
(
go
->
√g_cb˝
) +

523 
	`LENCILONG
(
go
->
√g_magi˙umbî
) +

524 
	`LENCIVOID
(
go
->
√g_pcom¥essi⁄
) +

525 
	`LENCIVOID
(
go
->
√g_accom¥essi⁄
));

526 
	}
}

533 
	$l˝_addci
(
fsm
 *
f
, 
u_ch¨
 *
u˝
, *
À≈
)

535 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

536 
u_ch¨
 *
°¨t_u˝
 = 
u˝
;

538 
	#ADDCIVOID
(
›t
, 
√g
) \

539 i‡(
√g
) { \

540 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: o±=%d\n", 
›t
)); \

541 
	`PUTCHAR
(
›t
, 
u˝
); \

542 
	`PUTCHAR
(
CILEN_VOID
, 
u˝
); \

543 }

	)

544 
	#ADDCISHORT
(
›t
, 
√g
, 
vÆ
) \

545 i‡(
√g
) { \

546 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: INT o±=%d %X\n", 
›t
, 
vÆ
)); \

547 
	`PUTCHAR
(
›t
, 
u˝
); \

548 
	`PUTCHAR
(
CILEN_SHORT
, 
u˝
); \

549 
	`PUTSHORT
(
vÆ
, 
u˝
); \

550 }

	)

551 
	#ADDCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

552 i‡(
√g
) { \

553 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAP o±=%d %X\n", 
›t
, 
vÆ
)); \

554 
	`PUTCHAR
(
›t
, 
u˝
); \

555 
	`PUTCHAR
(
CILEN_CHAP
, 
u˝
); \

556 
	`PUTSHORT
(
vÆ
, 
u˝
); \

557 
	`PUTCHAR
(
dige°
, 
u˝
); \

558 }

	)

559 
	#ADDCILONG
(
›t
, 
√g
, 
vÆ
) \

560 i‡(
√g
) { \

561 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: L o±=%d %lX\n", 
›t
, 
vÆ
)); \

562 
	`PUTCHAR
(
›t
, 
u˝
); \

563 
	`PUTCHAR
(
CILEN_LONG
, 
u˝
); \

564 
	`PUTLONG
(
vÆ
, 
u˝
); \

565 }

	)

566 
	#ADDCILQR
(
›t
, 
√g
, 
vÆ
) \

567 i‡(
√g
) { \

568 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: LQR o±=%d %lX\n", 
›t
, 
vÆ
)); \

569 
	`PUTCHAR
(
›t
, 
u˝
); \

570 
	`PUTCHAR
(
CILEN_LQR
, 
u˝
); \

571 
	`PUTSHORT
(
PPP_LQR
, 
u˝
); \

572 
	`PUTLONG
(
vÆ
, 
u˝
); \

573 }

	)

574 
	#ADDCICHAR
(
›t
, 
√g
, 
vÆ
) \

575 i‡(
√g
) { \

576 
	`LCPDEBUG
((
LOG_INFO
, "l˝_addci: CHAR o±=%d %X '%z'\n", 
›t
, 
vÆ
, val)); \

577 
	`PUTCHAR
(
›t
, 
u˝
); \

578 
	`PUTCHAR
(
CILEN_CHAR
, 
u˝
); \

579 
	`PUTCHAR
(
vÆ
, 
u˝
); \

580 }

	)

582 
	`ADDCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

583 
	`ADDCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

584 
	`ADDCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

585 
	`ADDCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

586 
	`ADDCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

587 
	`ADDCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

588 
	`ADDCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

589 
	`ADDCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

590 
	`ADDCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

592 i‡(
u˝
 - 
°¨t_u˝
 !*
À≈
) {

594 
	`LCPDEBUG
((
LOG_ERR
, "Bug inÜcp_addci: wrongÜength\n"));

596 
	}
}

608 
	$l˝_ackci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

610 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

611 
u_ch¨
 
cûí
, 
côy≥
, 
cich¨
;

612 
u_sh‹t
 
cish‹t
;

613 
u32_t
 
cû⁄g
;

620 
	#ACKCIVOID
(
›t
, 
√g
) \

621 i‡(
√g
) { \

622 i‡((
Àn
 -
CILEN_VOID
) < 0) \

623 
bad
; \

624 
	`GETCHAR
(
côy≥
, 
p
); \

625 
	`GETCHAR
(
cûí
, 
p
); \

626 i‡(
cûí
 !
CILEN_VOID
 || 
côy≥
 !
›t
) \

627 
bad
; \

628 }

	)

629 
	#ACKCISHORT
(
›t
, 
√g
, 
vÆ
) \

630 i‡(
√g
) { \

631 i‡((
Àn
 -
CILEN_SHORT
) < 0) \

632 
bad
; \

633 
	`GETCHAR
(
côy≥
, 
p
); \

634 
	`GETCHAR
(
cûí
, 
p
); \

635 i‡(
cûí
 !
CILEN_SHORT
 || 
côy≥
 !
›t
) \

636 
bad
; \

637 
	`GETSHORT
(
cish‹t
, 
p
); \

638 i‡(
cish‹t
 !
vÆ
) \

639 
bad
; \

640 }

	)

641 
	#ACKCICHAR
(
›t
, 
√g
, 
vÆ
) \

642 i‡(
√g
) { \

643 i‡((
Àn
 -
CILEN_CHAR
) < 0) \

644 
bad
; \

645 
	`GETCHAR
(
côy≥
, 
p
); \

646 
	`GETCHAR
(
cûí
, 
p
); \

647 i‡(
cûí
 !
CILEN_CHAR
 || 
côy≥
 !
›t
) \

648 
bad
; \

649 
	`GETCHAR
(
cich¨
, 
p
); \

650 i‡(
cich¨
 !
vÆ
) \

651 
bad
; \

652 }

	)

653 
	#ACKCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

654 i‡(
√g
) { \

655 i‡((
Àn
 -
CILEN_CHAP
) < 0) \

656 
bad
; \

657 
	`GETCHAR
(
côy≥
, 
p
); \

658 
	`GETCHAR
(
cûí
, 
p
); \

659 i‡(
cûí
 !
CILEN_CHAP
 || 
côy≥
 !
›t
) \

660 
bad
; \

661 
	`GETSHORT
(
cish‹t
, 
p
); \

662 i‡(
cish‹t
 !
vÆ
) \

663 
bad
; \

664 
	`GETCHAR
(
cich¨
, 
p
); \

665 i‡(
cich¨
 !
dige°
) \

666 
bad
; \

667 }

	)

668 
	#ACKCILONG
(
›t
, 
√g
, 
vÆ
) \

669 i‡(
√g
) { \

670 i‡((
Àn
 -
CILEN_LONG
) < 0) \

671 
bad
; \

672 
	`GETCHAR
(
côy≥
, 
p
); \

673 
	`GETCHAR
(
cûí
, 
p
); \

674 i‡(
cûí
 !
CILEN_LONG
 || 
côy≥
 !
›t
) \

675 
bad
; \

676 
	`GETLONG
(
cû⁄g
, 
p
); \

677 i‡(
cû⁄g
 !
vÆ
) \

678 
bad
; \

679 }

	)

680 
	#ACKCILQR
(
›t
, 
√g
, 
vÆ
) \

681 i‡(
√g
) { \

682 i‡((
Àn
 -
CILEN_LQR
) < 0) \

683 
bad
; \

684 
	`GETCHAR
(
côy≥
, 
p
); \

685 
	`GETCHAR
(
cûí
, 
p
); \

686 i‡(
cûí
 !
CILEN_LQR
 || 
côy≥
 !
›t
) \

687 
bad
; \

688 
	`GETSHORT
(
cish‹t
, 
p
); \

689 i‡(
cish‹t
 !
PPP_LQR
) \

690 
bad
; \

691 
	`GETLONG
(
cû⁄g
, 
p
); \

692 i‡(
cû⁄g
 !
vÆ
) \

693 
bad
; \

694 }

	)

696 
	`ACKCISHORT
(
CI_MRU
, 
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
, go->mru);

697 
	`ACKCILONG
(
CI_ASYNCMAP
, 
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl, go->asyncmap);

698 
	`ACKCICHAP
(
CI_AUTHTYPE
, 
go
->
√g_ch≠
, 
PPP_CHAP
, go->
ch≠_mdty≥
);

699 
	`ACKCISHORT
(
CI_AUTHTYPE
, !
go
->
√g_ch≠
 && go->
√g_u∑p
, 
PPP_PAP
);

700 
	`ACKCILQR
(
CI_QUALITY
, 
go
->
√g_lqr
, go->
lqr_≥riod
);

701 
	`ACKCICHAR
(
CI_CALLBACK
, 
go
->
√g_cb˝
, 
CBCP_OPT
);

702 
	`ACKCILONG
(
CI_MAGICNUMBER
, 
go
->
√g_magi˙umbî
, go->
magi˙umbî
);

703 
	`ACKCIVOID
(
CI_PCOMPRESSION
, 
go
->
√g_pcom¥essi⁄
);

704 
	`ACKCIVOID
(
CI_ACCOMPRESSION
, 
go
->
√g_accom¥essi⁄
);

709 i‡(
Àn
 != 0) {

710 
bad
;

712 
	`LCPDEBUG
((
LOG_INFO
, "lcp_acki: Ack\n"));

714 
bad
:

715 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_acki:Ñeceived bad Ack!\n"));

717 
	}
}

730 
	$l˝_«kci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

732 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

733 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

734 
u_ch¨
 
côy≥
, 
cich¨
, *
√xt
;

735 
u_sh‹t
 
cish‹t
;

736 
u32_t
 
cû⁄g
;

737 
l˝_›ti⁄s
 
no
;

738 
l˝_›ti⁄s
 
åy
;

739 
lo›ed_back
 = 0;

740 
cûí
;

742 
	`BZERO
(&
no
, (no));

743 
åy
 = *
go
;

750 
	#NAKCIVOID
(
›t
, 
√g
, 
code
) \

751 i‡(
go
->
√g
 && \

752 
Àn
 >
CILEN_VOID
 && \

753 
p
[1] =
CILEN_VOID
 && \

754 
p
[0] =
›t
) { \

755 
Àn
 -
CILEN_VOID
; \

756 
	`INCPTR
(
CILEN_VOID
, 
p
); \

757 
no
.
√g
 = 1; \

758 
code
 \

759 }

	)

760 
	#NAKCICHAP
(
›t
, 
√g
, 
code
) \

761 i‡(
go
->
√g
 && \

762 
Àn
 >
CILEN_CHAP
 && \

763 
p
[1] =
CILEN_CHAP
 && \

764 
p
[0] =
›t
) { \

765 
Àn
 -
CILEN_CHAP
; \

766 
	`INCPTR
(2, 
p
); \

767 
	`GETSHORT
(
cish‹t
, 
p
); \

768 
	`GETCHAR
(
cich¨
, 
p
); \

769 
no
.
√g
 = 1; \

770 
code
 \

771 }

	)

772 
	#NAKCICHAR
(
›t
, 
√g
, 
code
) \

773 i‡(
go
->
√g
 && \

774 
Àn
 >
CILEN_CHAR
 && \

775 
p
[1] =
CILEN_CHAR
 && \

776 
p
[0] =
›t
) { \

777 
Àn
 -
CILEN_CHAR
; \

778 
	`INCPTR
(2, 
p
); \

779 
	`GETCHAR
(
cich¨
, 
p
); \

780 
no
.
√g
 = 1; \

781 
code
 \

782 }

	)

783 
	#NAKCISHORT
(
›t
, 
√g
, 
code
) \

784 i‡(
go
->
√g
 && \

785 
Àn
 >
CILEN_SHORT
 && \

786 
p
[1] =
CILEN_SHORT
 && \

787 
p
[0] =
›t
) { \

788 
Àn
 -
CILEN_SHORT
; \

789 
	`INCPTR
(2, 
p
); \

790 
	`GETSHORT
(
cish‹t
, 
p
); \

791 
no
.
√g
 = 1; \

792 
code
 \

793 }

	)

794 
	#NAKCILONG
(
›t
, 
√g
, 
code
) \

795 i‡(
go
->
√g
 && \

796 
Àn
 >
CILEN_LONG
 && \

797 
p
[1] =
CILEN_LONG
 && \

798 
p
[0] =
›t
) { \

799 
Àn
 -
CILEN_LONG
; \

800 
	`INCPTR
(2, 
p
); \

801 
	`GETLONG
(
cû⁄g
, 
p
); \

802 
no
.
√g
 = 1; \

803 
code
 \

804 }

	)

805 
	#NAKCILQR
(
›t
, 
√g
, 
code
) \

806 i‡(
go
->
√g
 && \

807 
Àn
 >
CILEN_LQR
 && \

808 
p
[1] =
CILEN_LQR
 && \

809 
p
[0] =
›t
) { \

810 
Àn
 -
CILEN_LQR
; \

811 
	`INCPTR
(2, 
p
); \

812 
	`GETSHORT
(
cish‹t
, 
p
); \

813 
	`GETLONG
(
cû⁄g
, 
p
); \

814 
no
.
√g
 = 1; \

815 
code
 \

816 }

	)

825 i‡(
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
) {

826 
	`NAKCISHORT
(
CI_MRU
, 
√g_mru
,

827 i‡(
cish‹t
 <
wo
->
mru
 || cish‹à< 
PPP_DEFMRU
) {

828 
åy
.
mru
 = 
cish‹t
;

836 i‡(
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl) {

837 
	`NAKCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
,

838 
åy
.
asyncm≠
 = 
go
->asyncm≠ | 
cû⁄g
;

847 i‡((
go
->
√g_ch≠
 || go->
√g_u∑p
)

848 && 
Àn
 >
CILEN_SHORT


849 && 
p
[0] =
CI_AUTHTYPE
 &&Ö[1] >
CILEN_SHORT
 &&Ö[1] <
Àn
) {

850 
cûí
 = 
p
[1];

851 
Àn
 -
cûí
;

852 
no
.
√g_ch≠
 = 
go
->neg_chap;

853 
no
.
√g_u∑p
 = 
go
->neg_upap;

854 
	`INCPTR
(2, 
p
);

855 
	`GETSHORT
(
cish‹t
, 
p
);

856 i‡(
cish‹t
 =
PPP_PAP
 && 
cûí
 =
CILEN_SHORT
) {

862 i‡(!
go
->
√g_ch≠
) {

863 
bad
;

865 
åy
.
√g_ch≠
 = 0;

867 } i‡(
cish‹t
 =
PPP_CHAP
 && 
cûí
 =
CILEN_CHAP
) {

868 
	`GETCHAR
(
cich¨
, 
p
);

869 i‡(
go
->
√g_ch≠
) {

875 i‡(
cich¨
 !
go
->
ch≠_mdty≥
) {

876 
åy
.
√g_ch≠
 = 0;

882 
åy
.
√g_u∑p
 = 0;

890 i‡(
go
->
√g_ch≠
) {

891 
åy
.
√g_ch≠
 = 0;

893 
åy
.
√g_u∑p
 = 0;

895 
p
 +
cûí
 - 
CILEN_SHORT
;

904 
	`NAKCILQR
(
CI_QUALITY
, 
√g_lqr
,

905 i‡(
cish‹t
 !
PPP_LQR
) {

906 
åy
.
√g_lqr
 = 0;

908 
åy
.
lqr_≥riod
 = 
cû⁄g
;

915 
	`NAKCICHAR
(
CI_CALLBACK
, 
√g_cb˝
,

916 
åy
.
√g_cb˝
 = 0;

922 
	`NAKCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
,

923 
åy
.
magi˙umbî
 = 
	`magic
();

924 
lo›ed_back
 = 1;

932 
	`NAKCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
,

933 
åy
.
√g_pcom¥essi⁄
 = 0;

935 
	`NAKCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
,

936 
åy
.
√g_accom¥essi⁄
 = 0;

955 
Àn
 > 
CILEN_VOID
) {

956 
	`GETCHAR
(
côy≥
, 
p
);

957 
	`GETCHAR
(
cûí
, 
p
);

958 i‡(
cûí
 < 
CILEN_VOID
 || (
Àn
 -= cilen) < 0) {

959 
bad
;

961 
√xt
 = 
p
 + 
cûí
 - 2;

963 
côy≥
) {

964 
CI_MRU
:

965 i‡((
go
->
√g_mru
 && go->
mru
 !
PPP_DEFMRU
)

966 || 
no
.
√g_mru
 || 
cûí
 !
CILEN_SHORT
) {

967 
bad
;

969 
	`GETSHORT
(
cish‹t
, 
p
);

970 i‡(
cish‹t
 < 
PPP_DEFMRU
) {

971 
åy
.
mru
 = 
cish‹t
;

974 
CI_ASYNCMAP
:

975 i‡((
go
->
√g_asyncm≠
 && go->
asyncm≠
 != 0xFFFFFFFFl)

976 || 
no
.
√g_asyncm≠
 || 
cûí
 !
CILEN_LONG
) {

977 
bad
;

980 
CI_AUTHTYPE
:

981 i‡(
go
->
√g_ch≠
 || 
no
.√g_ch≠ || go->
√g_u∑p
 ||Ço.neg_upap) {

982 
bad
;

985 
CI_MAGICNUMBER
:

986 i‡(
go
->
√g_magi˙umbî
 || 
no
.neg_magicnumber ||

987 
cûí
 !
CILEN_LONG
) {

988 
bad
;

991 
CI_PCOMPRESSION
:

992 i‡(
go
->
√g_pcom¥essi⁄
 || 
no
.neg_pcompression

993 || 
cûí
 !
CILEN_VOID
) {

994 
bad
;

997 
CI_ACCOMPRESSION
:

998 i‡(
go
->
√g_accom¥essi⁄
 || 
no
.neg_accompression

999 || 
cûí
 !
CILEN_VOID
) {

1000 
bad
;

1003 
CI_QUALITY
:

1004 i‡(
go
->
√g_lqr
 || 
no
.√g_lq∏|| 
cûí
 !
CILEN_LQR
) {

1005 
bad
;

1009 
p
 = 
√xt
;

1013 i‡(
Àn
 != 0) {

1014 
bad
;

1020 i‡(
f
->
°©e
 !
LS_OPENED
) {

1021 i‡(
lo›ed_back
) {

1022 i‡(++
åy
.
numlo›s
 >
l˝_lo›backÁû
) {

1023 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜine isÜooped back.\n"));

1024 
	`l˝_˛o£
(
f
->
unô
, "Loopback detected");

1027 
åy
.
numlo›s
 = 0;

1029 *
go
 = 
åy
;

1034 
bad
:

1035 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_nakci:Ñeceived bad Nak!\n"));

1037 
	}
}

1050 
	$l˝_ªjci
(
fsm
 *
f
, 
u_ch¨
 *
p
, 
Àn
)

1052 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1053 
u_ch¨
 
cich¨
;

1054 
u_sh‹t
 
cish‹t
;

1055 
u32_t
 
cû⁄g
;

1056 
l˝_›ti⁄s
 
åy
;

1058 
åy
 = *
go
;

1065 
	#REJCIVOID
(
›t
, 
√g
) \

1066 i‡(
go
->
√g
 && \

1067 
Àn
 >
CILEN_VOID
 && \

1068 
p
[1] =
CILEN_VOID
 && \

1069 
p
[0] =
›t
) { \

1070 
Àn
 -
CILEN_VOID
; \

1071 
	`INCPTR
(
CILEN_VOID
, 
p
); \

1072 
åy
.
√g
 = 0; \

1073 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªjci: void o± %dÑeje˘ed\n", 
›t
)); \

1074 }

	)

1075 
	#REJCISHORT
(
›t
, 
√g
, 
vÆ
) \

1076 i‡(
go
->
√g
 && \

1077 
Àn
 >
CILEN_SHORT
 && \

1078 
p
[1] =
CILEN_SHORT
 && \

1079 
p
[0] =
›t
) { \

1080 
Àn
 -
CILEN_SHORT
; \

1081 
	`INCPTR
(2, 
p
); \

1082 
	`GETSHORT
(
cish‹t
, 
p
); \

1084 i‡(
cish‹t
 !
vÆ
) { \

1085 
bad
; \

1087 
åy
.
√g
 = 0; \

1088 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: sh‹à›à%dÑeje˘ed\n", 
›t
)); \

1089 }

	)

1090 
	#REJCICHAP
(
›t
, 
√g
, 
vÆ
, 
dige°
) \

1091 i‡(
go
->
√g
 && \

1092 
Àn
 >
CILEN_CHAP
 && \

1093 
p
[1] =
CILEN_CHAP
 && \

1094 
p
[0] =
›t
) { \

1095 
Àn
 -
CILEN_CHAP
; \

1096 
	`INCPTR
(2, 
p
); \

1097 
	`GETSHORT
(
cish‹t
, 
p
); \

1098 
	`GETCHAR
(
cich¨
, 
p
); \

1100 i‡(
cish‹t
 !
vÆ
 || 
cich¨
 !
dige°
) { \

1101 
bad
; \

1103 
åy
.
√g
 = 0; \

1104 
åy
.
√g_u∑p
 = 0; \

1105 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: ch≠ o± %dÑeje˘ed\n", 
›t
)); \

1106 }

	)

1107 
	#REJCILONG
(
›t
, 
√g
, 
vÆ
) \

1108 i‡(
go
->
√g
 && \

1109 
Àn
 >
CILEN_LONG
 && \

1110 
p
[1] =
CILEN_LONG
 && \

1111 
p
[0] =
›t
) { \

1112 
Àn
 -
CILEN_LONG
; \

1113 
	`INCPTR
(2, 
p
); \

1114 
	`GETLONG
(
cû⁄g
, 
p
); \

1116 i‡(
cû⁄g
 !
vÆ
) { \

1117 
bad
; \

1119 
åy
.
√g
 = 0; \

1120 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci:Ü⁄g o± %dÑeje˘ed\n", 
›t
)); \

1121 }

	)

1122 
	#REJCILQR
(
›t
, 
√g
, 
vÆ
) \

1123 i‡(
go
->
√g
 && \

1124 
Àn
 >
CILEN_LQR
 && \

1125 
p
[1] =
CILEN_LQR
 && \

1126 
p
[0] =
›t
) { \

1127 
Àn
 -
CILEN_LQR
; \

1128 
	`INCPTR
(2, 
p
); \

1129 
	`GETSHORT
(
cish‹t
, 
p
); \

1130 
	`GETLONG
(
cû⁄g
, 
p
); \

1132 i‡(
cish‹t
 !
PPP_LQR
 || 
cû⁄g
 !
vÆ
) { \

1133 
bad
; \

1135 
åy
.
√g
 = 0; \

1136 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: LQR o± %dÑeje˘ed\n", 
›t
)); \

1137 }

	)

1138 
	#REJCICBCP
(
›t
, 
√g
, 
vÆ
) \

1139 i‡(
go
->
√g
 && \

1140 
Àn
 >
CILEN_CBCP
 && \

1141 
p
[1] =
CILEN_CBCP
 && \

1142 
p
[0] =
›t
) { \

1143 
Àn
 -
CILEN_CBCP
; \

1144 
	`INCPTR
(2, 
p
); \

1145 
	`GETCHAR
(
cich¨
, 
p
); \

1147 i‡(
cich¨
 !
vÆ
) { \

1148 
bad
; \

1150 
åy
.
√g
 = 0; \

1151 
	`LCPDEBUG
((
LOG_INFO
,"l˝_ªjci: CÆlback o± %dÑeje˘ed\n", 
›t
)); \

1152 }

	)

1154 
	`REJCISHORT
(
CI_MRU
, 
√g_mru
, 
go
->
mru
);

1155 
	`REJCILONG
(
CI_ASYNCMAP
, 
√g_asyncm≠
, 
go
->
asyncm≠
);

1156 
	`REJCICHAP
(
CI_AUTHTYPE
, 
√g_ch≠
, 
PPP_CHAP
, 
go
->
ch≠_mdty≥
);

1157 i‡(!
go
->
√g_ch≠
) {

1158 
	`REJCISHORT
(
CI_AUTHTYPE
, 
√g_u∑p
, 
PPP_PAP
);

1160 
	`REJCILQR
(
CI_QUALITY
, 
√g_lqr
, 
go
->
lqr_≥riod
);

1161 
	`REJCICBCP
(
CI_CALLBACK
, 
√g_cb˝
, 
CBCP_OPT
);

1162 
	`REJCILONG
(
CI_MAGICNUMBER
, 
√g_magi˙umbî
, 
go
->
magi˙umbî
);

1163 
	`REJCIVOID
(
CI_PCOMPRESSION
, 
√g_pcom¥essi⁄
);

1164 
	`REJCIVOID
(
CI_ACCOMPRESSION
, 
√g_accom¥essi⁄
);

1169 i‡(
Àn
 != 0) {

1170 
bad
;

1175 i‡(
f
->
°©e
 !
LS_OPENED
) {

1176 *
go
 = 
åy
;

1180 
bad
:

1181 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_rejci:Ñeceived bad Reject!\n"));

1183 
	}
}

1194 
	$l˝_ªqci
(
fsm
 *
f
,

1195 
u_ch¨
 *
öp
,

1196 *
À≈
,

1197 
ªje˘_if_dißgªe
)

1199 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1200 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1201 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1202 
u_ch¨
 *
cù
, *
√xt
;

1203 
cûí
, 
côy≥
, 
cich¨
;

1204 
u_sh‹t
 
cish‹t
;

1205 
u32_t
 
cû⁄g
;

1206 
rc
 = 
CONFACK
;

1207 
‹c
;

1208 
u_ch¨
 *
p
;

1209 
u_ch¨
 *
ªjp
;

1210 
u_ch¨
 *
«kp
;

1211 
l
 = *
À≈
;

1212 #i‡
TRACELCP
 > 0

1213 
åa˚Buf
[80];

1214 
åa˚Ndx
 = 0;

1220 
	`BZERO
(
ho
, (*ho));

1225 
√xt
 = 
öp
;

1226 
«kp
 = 
«k_buf„r
;

1227 
ªjp
 = 
öp
;

1228 
l
) {

1229 
‹c
 = 
CONFACK
;

1230 
cù
 = 
p
 = 
√xt
;

1231 i‡(
l
 < 2 ||

1232 
p
[1] < 2 ||

1233 
p
[1] > 
l
) {

1234 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: bad CIÜength!\n"));

1235 
‹c
 = 
CONFREJ
;

1236 
cûí
 = 
l
;

1237 
l
 = 0;

1238 
côy≥
 = 0;

1239 
ídswôch
;

1241 
	`GETCHAR
(
côy≥
, 
p
);

1242 
	`GETCHAR
(
cûí
, 
p
);

1243 
l
 -
cûí
;

1244 
√xt
 +
cûí
;

1246 
côy≥
) {

1247 
CI_MRU
:

1248 i‡(!
ao
->
√g_mru
) {

1249 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU -Çotállowed\n"));

1250 
‹c
 = 
CONFREJ
;

1252 } i‡(
cûí
 !
CILEN_SHORT
) {

1253 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject MRU - badÜength\n"));

1254 
‹c
 = 
CONFREJ
;

1257 
	`GETSHORT
(
cish‹t
, 
p
);

1264 i‡(
cish‹t
 < 
PPP_MINMRU
) {

1265 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak - MRUÅoo small\n"));

1266 
‹c
 = 
CONFNAK
;

1267 
	`PUTCHAR
(
CI_MRU
, 
«kp
);

1268 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1269 
	`PUTSHORT
(
PPP_MINMRU
, 
«kp
);

1272 
ho
->
√g_mru
 = 1;

1273 
ho
->
mru
 = 
cish‹t
;

1274 #i‡
TRACELCP
 > 0

1275 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MRU %d", 
cish‹t
);

1276 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1280 
CI_ASYNCMAP
:

1281 i‡(!
ao
->
√g_asyncm≠
) {

1282 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAPÇotállowed\n"));

1283 
‹c
 = 
CONFREJ
;

1285 } i‡(
cûí
 !
CILEN_LONG
) {

1286 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject ASYNCMAP badÜength\n"));

1287 
‹c
 = 
CONFREJ
;

1290 
	`GETLONG
(
cû⁄g
, 
p
);

1296 i‡((
ao
->
asyncm≠
 & ~
cû⁄g
) != 0) {

1297 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Nak ASYNCMAP %lX missing %lX\n",

1298 
cû⁄g
, 
ao
->
asyncm≠
));

1299 
‹c
 = 
CONFNAK
;

1300 
	`PUTCHAR
(
CI_ASYNCMAP
, 
«kp
);

1301 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1302 
	`PUTLONG
(
ao
->
asyncm≠
 | 
cû⁄g
, 
«kp
);

1305 
ho
->
√g_asyncm≠
 = 1;

1306 
ho
->
asyncm≠
 = 
cû⁄g
;

1307 #i‡
TRACELCP
 > 0

1308 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " ASYNCMAP=%lX", 
cû⁄g
);

1309 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1313 
CI_AUTHTYPE
:

1314 i‡(
cûí
 < 
CILEN_SHORT
) {

1315 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPE missingárg\n"));

1316 
‹c
 = 
CONFREJ
;

1318 } i‡(!(
ao
->
√g_u∑p
 ||áo->
√g_ch≠
)) {

1322 
	`LCPDEBUG
((
LOG_INFO
, "lcp_reqci: Reject AUTHTYPEÇotállowed\n"));

1323 
‹c
 = 
CONFREJ
;

1326 
	`GETSHORT
(
cish‹t
, 
p
);

1339 i‡(
cish‹t
 =
PPP_PAP
) {

1340 i‡(
ho
->
√g_ch≠
) {

1341 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAPálreadyáccepted\n"));

1342 
‹c
 = 
CONFREJ
;

1344 } i‡(
cûí
 !
CILEN_SHORT
) {

1345 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE PAP badÜen\n"));

1346 
‹c
 = 
CONFREJ
;

1349 i‡(!
ao
->
√g_u∑p
) {

1350 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE PAPÇotállowed\n"));

1351 
‹c
 = 
CONFNAK
;

1352 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1353 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1354 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1355 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1358 
ho
->
√g_u∑p
 = 1;

1359 #i‡
TRACELCP
 > 0

1360 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " PAP (%X)", 
cish‹t
);

1361 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1365 i‡(
cish‹t
 =
PPP_CHAP
) {

1366 i‡(
ho
->
√g_u∑p
) {

1367 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAPáccepted PAP\n"));

1368 
‹c
 = 
CONFREJ
;

1370 } i‡(
cûí
 !
CILEN_CHAP
) {

1371 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Reject AUTHTYPE CHAP badÜen\n"));

1372 
‹c
 = 
CONFREJ
;

1375 i‡(!
ao
->
√g_ch≠
) {

1376 
	`LCPDEBUG
((
LOG_WARNING
, "lcp_reqci: Nak AUTHTYPE CHAPÇotállowed\n"));

1377 
‹c
 = 
CONFNAK
;

1378 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1379 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1380 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1383 
	`GETCHAR
(
cich¨
, 
p
);

1384 i‡(
cich¨
 !
CHAP_DIGEST_MD5


1385 #ifde‡
CHAPMS


1386 && 
cich¨
 !
CHAP_MICROSOFT


1389 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE CHAP dige°=%d\n", 
cich¨
));

1390 
‹c
 = 
CONFNAK
;

1391 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1392 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1393 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1394 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1397 #i‡
TRACELCP
 > 0

1398 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " CHAP %X,%d", 
cish‹t
, 
cich¨
);

1399 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1401 
ho
->
ch≠_mdty≥
 = 
cich¨
;

1402 
ho
->
√g_ch≠
 = 1;

1411 
‹c
 = 
CONFNAK
;

1412 
	`PUTCHAR
(
CI_AUTHTYPE
, 
«kp
);

1413 i‡(
ao
->
√g_ch≠
) {

1414 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq CHAP\n", 
cish‹t
));

1415 
	`PUTCHAR
(
CILEN_CHAP
, 
«kp
);

1416 
	`PUTSHORT
(
PPP_CHAP
, 
«kp
);

1417 
	`PUTCHAR
(
ao
->
ch≠_mdty≥
, 
«kp
);

1419 
	`LCPDEBUG
((
LOG_WARNING
, "l˝_ªqci: Nak AUTHTYPE %dÑeq PAP\n", 
cish‹t
));

1420 
	`PUTCHAR
(
CILEN_SHORT
, 
«kp
);

1421 
	`PUTSHORT
(
PPP_PAP
, 
«kp
);

1425 
CI_QUALITY
:

1426 
	`GETSHORT
(
cish‹t
, 
p
);

1427 
	`GETLONG
(
cû⁄g
, 
p
);

1428 #i‡
TRACELCP
 > 0

1429 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " QUALITY (%x %x)", 
cish‹t
, (Ë
cû⁄g
);

1430 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1433 i‡(!
ao
->
√g_lqr
 ||

1434 
cûí
 !
CILEN_LQR
) {

1435 
‹c
 = 
CONFREJ
;

1443 i‡(
cish‹t
 !
PPP_LQR
) {

1444 
‹c
 = 
CONFNAK
;

1445 
	`PUTCHAR
(
CI_QUALITY
, 
«kp
);

1446 
	`PUTCHAR
(
CILEN_LQR
, 
«kp
);

1447 
	`PUTSHORT
(
PPP_LQR
, 
«kp
);

1448 
	`PUTLONG
(
ao
->
lqr_≥riod
, 
«kp
);

1453 
CI_MAGICNUMBER
:

1454 i‡(!(
ao
->
√g_magi˙umbî
 || 
go
->neg_magicnumber) ||

1455 
cûí
 !
CILEN_LONG
) {

1456 
‹c
 = 
CONFREJ
;

1459 
	`GETLONG
(
cû⁄g
, 
p
);

1460 #i‡
TRACELCP
 > 0

1461 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " MAGICNUMBER (%lX)", 
cû⁄g
);

1462 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1468 i‡(
go
->
√g_magi˙umbî
 &&

1469 
cû⁄g
 =
go
->
magi˙umbî
) {

1470 
cû⁄g
 = 
	`magic
();

1471 
‹c
 = 
CONFNAK
;

1472 
	`PUTCHAR
(
CI_MAGICNUMBER
, 
«kp
);

1473 
	`PUTCHAR
(
CILEN_LONG
, 
«kp
);

1474 
	`PUTLONG
(
cû⁄g
, 
«kp
);

1477 
ho
->
√g_magi˙umbî
 = 1;

1478 
ho
->
magi˙umbî
 = 
cû⁄g
;

1482 
CI_PCOMPRESSION
:

1483 #i‡
TRACELCP
 > 0

1484 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " PCOMPRESSION");

1485 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1487 i‡(!
ao
->
√g_pcom¥essi⁄
 ||

1488 
cûí
 !
CILEN_VOID
) {

1489 
‹c
 = 
CONFREJ
;

1492 
ho
->
√g_pcom¥essi⁄
 = 1;

1495 
CI_ACCOMPRESSION
:

1496 #i‡
TRACELCP
 > 0

1497 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " ACCOMPRESSION");

1498 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1500 i‡(!
ao
->
√g_accom¥essi⁄
 ||

1501 
cûí
 !
CILEN_VOID
) {

1502 
‹c
 = 
CONFREJ
;

1505 
ho
->
√g_accom¥essi⁄
 = 1;

1508 
CI_MRRU
:

1509 #i‡
TRACELCP
 > 0

1510 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_MRRU");

1511 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1513 
‹c
 = 
CONFREJ
;

1516 
CI_SSNHF
:

1517 #i‡
TRACELCP
 > 0

1518 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_SSNHF");

1519 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1521 
‹c
 = 
CONFREJ
;

1524 
CI_EPDISC
:

1525 #i‡
TRACELCP
 > 0

1526 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], (traceBuf), " CI_EPDISC");

1527 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1529 
‹c
 = 
CONFREJ
;

1533 #i‡
TRACELCP


1534 
	`¢¥ötf
(&
åa˚Buf
[
åa˚Ndx
], —ø˚Buf), " unknow¿%d", 
côy≥
);

1535 
åa˚Ndx
 = 
	`°æí
(
åa˚Buf
);

1537 
‹c
 = 
CONFREJ
;

1541 
ídswôch
:

1542 #i‡
TRACELCP


1543 i‡(
åa˚Ndx
 >= 80 - 32) {

1544 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñcvd%s\n", 
åa˚Buf
));

1545 
åa˚Ndx
 = 0;

1548 i‡(
‹c
 =
CONFACK
 &&

1549 
rc
 !
CONFACK
) {

1553 i‡(
‹c
 =
CONFNAK
) {

1554 i‡(
ªje˘_if_dißgªe


1555 && 
côy≥
 !
CI_MAGICNUMBER
) {

1556 
‹c
 = 
CONFREJ
;

1558 i‡(
rc
 =
CONFREJ
) {

1561 
rc
 = 
CONFNAK
;

1564 i‡(
‹c
 =
CONFREJ
) {

1565 
rc
 = 
CONFREJ
;

1566 i‡(
cù
 !
ªjp
) {

1567 
	`BCOPY
(
cù
, 
ªjp
, 
cûí
);

1569 
	`INCPTR
(
cûí
, 
ªjp
);

1580 
rc
) {

1581 
CONFACK
:

1582 *
À≈
 = ()(
√xt
 - 
öp
);

1584 
CONFNAK
:

1588 *
À≈
 = ()(
«kp
 - 
«k_buf„r
);

1589 
	`BCOPY
(
«k_buf„r
, 
öp
, *
À≈
);

1591 
CONFREJ
:

1592 *
À≈
 = ()(
ªjp
 - 
öp
);

1596 #i‡
TRACELCP
 > 0

1597 i‡(
åa˚Ndx
 > 0) {

1598 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci: %s\n", 
åa˚Buf
));

1601 
	`LCPDEBUG
((
LOG_INFO
, "l˝_ªqci:Ñëu∫ög CONF%s.\n", 
	`CODENAME
(
rc
)));

1602  (
rc
);

1603 
	}
}

1610 
	$l˝_up
(
fsm
 *
f
)

1612 
l˝_›ti⁄s
 *
wo
 = &
l˝_w™t›ti⁄s
[
f
->
unô
];

1613 
l˝_›ti⁄s
 *
ho
 = &
l˝_his›ti⁄s
[
f
->
unô
];

1614 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1615 
l˝_›ti⁄s
 *
ao
 = &
l˝_Ælow›ti⁄s
[
f
->
unô
];

1617 i‡(!
go
->
√g_magi˙umbî
) {

1618 
go
->
magi˙umbî
 = 0;

1620 i‡(!
ho
->
√g_magi˙umbî
) {

1621 
ho
->
magi˙umbî
 = 0;

1630 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
	`LWIP_MIN
(
ao
->
mru
, (
ho
->
√g_mru
? ho->mru: 
PPP_MRU
)),

1631 (
ho
->
√g_asyncm≠
? ho->
asyncm≠
: 0xffffffffl),

1632 
ho
->
√g_pcom¥essi⁄
, ho->
√g_accom¥essi⁄
);

1638 
	`µp_ªcv_c⁄fig
(
f
->
unô
, (
go
->
√g_mru
? 
	`LWIP_MAX
(
wo
->
mru
, go->mru): 
PPP_MRU
),

1639 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1640 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1642 i‡(
ho
->
√g_mru
) {

1643 
≥î_mru
[
f
->
unô
] = 
ho
->
mru
;

1646 
	`l˝_echo_lowîup
(
f
->
unô
);

1648 
	`lök_e°ablished
(
f
->
unô
);

1649 
	}
}

1658 
	$l˝_down
(
fsm
 *
f
)

1660 
l˝_›ti⁄s
 *
go
 = &
l˝_gŸ›ti⁄s
[
f
->
unô
];

1662 
	`l˝_echo_lowîdown
(
f
->
unô
);

1664 
	`lök_down
(
f
->
unô
);

1666 
	`µp_£nd_c⁄fig
(
f
->
unô
, 
PPP_MRU
, 0xffffffffl, 0, 0);

1667 
	`µp_ªcv_c⁄fig
(
f
->
unô
, 
PPP_MRU
,

1668 (
go
->
√g_asyncm≠
? go->
asyncm≠
: 0x00000000),

1669 
go
->
√g_pcom¥essi⁄
, go->
√g_accom¥essi⁄
);

1670 
≥î_mru
[
f
->
unô
] = 
PPP_MRU
;

1671 
	}
}

1678 
	$l˝_°¨tög
(
fsm
 *
f
)

1680 
	`lök_ªquúed
(
f
->
unô
);

1681 
	}
}

1688 
	$l˝_föished
(
fsm
 *
f
)

1690 
	`lök_ãrmö©ed
(
f
->
unô
);

1691 
	}
}

1700 
¥öt_°rög
–*
p
, 
Àn
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1702 
c
;

1704 
	`¥öãr
(
¨g
, "\"");

1705 ; 
Àn
 > 0; --len) {

1706 
c
 = *
p
++;

1707 i‡(' ' <
c
 && c <= '~') {

1708 i‡(
c
 == '\\' || c == '"') {

1709 
	`¥öãr
(
¨g
, "\\");

1711 
	`¥öãr
(
¨g
, "%c", 
c
);

1713 
c
) {

1715 
	`¥öãr
(
¨g
, "\\n");

1718 
	`¥öãr
(
¨g
, "\\r");

1721 
	`¥öãr
(
¨g
, "\\t");

1724 
	`¥öãr
(
¨g
, "\\%.3o", 
c
);

1728 
	`¥öãr
(
¨g
, "\"");

1729 
	}
}

1735 *
	gl˝_codíames
[] = {

1742 
l˝_¥öçkt
–
u_ch¨
 *
p
, 
∂í
, (*
¥öãr
Ë(*, *, ...), *
¨g
)

1744 
code
, 
id
, 
Àn
, 
ﬁí
;

1745 
u_ch¨
 *
p°¨t
, *
›ãnd
;

1746 
u_sh‹t
 
cish‹t
;

1747 
u32_t
 
cû⁄g
;

1749 i‡(
∂í
 < 
HEADERLEN
) {

1752 
p°¨t
 = 
p
;

1753 
	`GETCHAR
(
code
, 
p
);

1754 
	`GETCHAR
(
id
, 
p
);

1755 
	`GETSHORT
(
Àn
, 
p
);

1756 i‡(
Àn
 < 
HEADERLEN
 ||Üí > 
∂í
) {

1760 i‡(
code
 >1 && codê<(
l˝_codíames
) / (*)) {

1761 
	`¥öãr
(
¨g
, " %s", 
l˝_codíames
[
code
-1]);

1763 
	`¥öãr
(
¨g
, " code=0x%x", 
code
);

1765 
	`¥öãr
(
¨g
, " id=0x%x", 
id
);

1766 
Àn
 -
HEADERLEN
;

1767 
code
) {

1768 
CONFREQ
:

1769 
CONFACK
:

1770 
CONFNAK
:

1771 
CONFREJ
:

1773 
Àn
 >= 2) {

1774 
	`GETCHAR
(
code
, 
p
);

1775 
	`GETCHAR
(
ﬁí
, 
p
);

1776 
p
 -= 2;

1777 i‡(
ﬁí
 < 2 || oÀ¿> 
Àn
) {

1780 
	`¥öãr
(
¨g
, " <");

1781 
Àn
 -
ﬁí
;

1782 
›ãnd
 = 
p
 + 
ﬁí
;

1783 
code
) {

1784 
CI_MRU
:

1785 i‡(
ﬁí
 =
CILEN_SHORT
) {

1786 
p
 += 2;

1787 
	`GETSHORT
(
cish‹t
, 
p
);

1788 
	`¥öãr
(
¨g
, "mru %d", 
cish‹t
);

1791 
CI_ASYNCMAP
:

1792 i‡(
ﬁí
 =
CILEN_LONG
) {

1793 
p
 += 2;

1794 
	`GETLONG
(
cû⁄g
, 
p
);

1795 
	`¥öãr
(
¨g
, "asyncm≠ 0x%lx", 
cû⁄g
);

1798 
CI_AUTHTYPE
:

1799 i‡(
ﬁí
 >
CILEN_SHORT
) {

1800 
p
 += 2;

1801 
	`¥öãr
(
¨g
, "auth ");

1802 
	`GETSHORT
(
cish‹t
, 
p
);

1803 
cish‹t
) {

1804 
PPP_PAP
:

1805 
	`¥öãr
(
¨g
, "pap");

1807 
PPP_CHAP
:

1808 
	`¥öãr
(
¨g
, "chap");

1811 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1815 
CI_QUALITY
:

1816 i‡(
ﬁí
 >
CILEN_SHORT
) {

1817 
p
 += 2;

1818 
	`¥öãr
(
¨g
, "quality ");

1819 
	`GETSHORT
(
cish‹t
, 
p
);

1820 
cish‹t
) {

1821 
PPP_LQR
:

1822 
	`¥öãr
(
¨g
, "lqr");

1825 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1829 
CI_CALLBACK
:

1830 i‡(
ﬁí
 >
CILEN_CHAR
) {

1831 
p
 += 2;

1832 
	`¥öãr
(
¨g
, "callback ");

1833 
	`GETSHORT
(
cish‹t
, 
p
);

1834 
cish‹t
) {

1835 
CBCP_OPT
:

1836 
	`¥öãr
(
¨g
, "CBCP");

1839 
	`¥öãr
(
¨g
, "0x%x", 
cish‹t
);

1843 
CI_MAGICNUMBER
:

1844 i‡(
ﬁí
 =
CILEN_LONG
) {

1845 
p
 += 2;

1846 
	`GETLONG
(
cû⁄g
, 
p
);

1847 
	`¥öãr
(
¨g
, "magi¯0x%x", 
cû⁄g
);

1850 
CI_PCOMPRESSION
:

1851 i‡(
ﬁí
 =
CILEN_VOID
) {

1852 
p
 += 2;

1853 
	`¥öãr
(
¨g
, "pcomp");

1856 
CI_ACCOMPRESSION
:

1857 i‡(
ﬁí
 =
CILEN_VOID
) {

1858 
p
 += 2;

1859 
	`¥öãr
(
¨g
, "accomp");

1863 
p
 < 
›ãnd
) {

1864 
	`GETCHAR
(
code
, 
p
);

1865 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1867 
	`¥öãr
(
¨g
, ">");

1871 
TERMACK
:

1872 
TERMREQ
:

1873 i‡(
Àn
 > 0 && *
p
 >= ' ' && *p < 0x7f) {

1874 
	`¥öãr
(
¨g
, " ");

1875 
	`¥öt_°rög
((*)
p
, 
Àn
, 
¥öãr
, 
¨g
);

1876 
p
 +
Àn
;

1877 
Àn
 = 0;

1881 
ECHOREQ
:

1882 
ECHOREP
:

1883 
DISCREQ
:

1884 i‡(
Àn
 >= 4) {

1885 
	`GETLONG
(
cû⁄g
, 
p
);

1886 
	`¥öãr
(
¨g
, " magic=0x%x", 
cû⁄g
);

1887 
p
 += 4;

1888 
Àn
 -= 4;

1894 ; 
Àn
 > 0; --len) {

1895 
	`GETCHAR
(
code
, 
p
);

1896 
	`¥öãr
(
¨g
, " %.2x", 
code
);

1899  ()(
p
 - 
p°¨t
);

1900 
	}
}

1907 
	$L˝LökFaûuª
 (
fsm
 *
f
)

1909 i‡(
f
->
°©e
 =
LS_OPENED
) {

1910 
	`LCPDEBUG
((
LOG_INFO
, "Nÿª•⁄£Åÿ%dÉcho-ªque°s\n", 
l˝_echos_≥ndög
));

1911 
	`LCPDEBUG
((
LOG_NOTICE
, "SerialÜinkáppearsÅo be disconnected.\n"));

1912 
	`l˝_˛o£
(
f
->
unô
, "PeerÇotÑesponding");

1914 
	}
}

1920 
	$L˝EchoCheck
 (
fsm
 *
f
)

1922 
	`L˝SídEchoReque°
 (
f
);

1927 
	`LWIP_ASSERT
("l˝_echo_timî_ru¬ög =0", 
l˝_echo_timî_ru¬ög
 == 0);

1929 
	`TIMEOUT
 (
L˝EchoTimeout
, 
f
, 
l˝_echo_öãrvÆ
);

1930 
l˝_echo_timî_ru¬ög
 = 1;

1931 
	}
}

1937 
	$L˝EchoTimeout
 (*
¨g
)

1939 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

1940 
l˝_echo_timî_ru¬ög
 = 0;

1941 
	`L˝EchoCheck
 ((
fsm
 *Ë
¨g
);

1943 
	}
}

1949 
	$l˝_ª˚ived_echo_ª∂y
 (
fsm
 *
f
, 
id
, 
u_ch¨
 *
öp
, 
Àn
)

1951 
u32_t
 
magic
;

1953 
	`LWIP_UNUSED_ARG
(
id
);

1956 i‡(
Àn
 < 4) {

1957 
	`LCPDEBUG
((
LOG_WARNING
, "l˝:Ñe˚ived sh‹àEcho-Rïly,Üígth %d\n", 
Àn
));

1960 
	`GETLONG
(
magic
, 
öp
);

1961 i‡(
l˝_gŸ›ti⁄s
[
f
->
unô
].
√g_magi˙umbî
 && 
magic
 =l˝_gŸ›ti⁄s[f->unô].
magi˙umbî
) {

1962 
	`LCPDEBUG
((
LOG_WARNING
, "appearÅo haveÑeceived our ownÉcho-reply!\n"));

1967 
l˝_echos_≥ndög
 = 0;

1968 
	}
}

1974 
	$L˝SídEchoReque°
 (
fsm
 *
f
)

1976 
u32_t
 
l˝_magic
;

1977 
u_ch¨
 
pkt
[4], *
pkç
;

1982 i‡(
l˝_echo_Áûs
 != 0) {

1983 i‡(
l˝_echos_≥ndög
++ >
l˝_echo_Áûs
) {

1984 
	`L˝LökFaûuª
(
f
);

1985 
l˝_echos_≥ndög
 = 0;

1992 i‡(
f
->
°©e
 =
LS_OPENED
) {

1993 
l˝_magic
 = 
l˝_gŸ›ti⁄s
[
f
->
unô
].
magi˙umbî
;

1994 
pkç
 = 
pkt
;

1995 
	`PUTLONG
(
l˝_magic
, 
pkç
);

1996 
	`fsm_sd©a
(
f
, 
ECHOREQ
, (
u_ch¨
)(
l˝_echo_numbî
++ & 0xFF), 
pkt
, ()(
pkç
 -Ökt));

1998 
	}
}

2005 
	$l˝_echo_lowîup
 (
unô
)

2007 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2010 
l˝_echos_≥ndög
 = 0;

2011 
l˝_echo_numbî
 = 0;

2012 
l˝_echo_timî_ru¬ög
 = 0;

2015 i‡(
l˝_echo_öãrvÆ
 != 0) {

2016 
	`L˝EchoCheck
 (
f
);

2018 
	}
}

2025 
	$l˝_echo_lowîdown
 (
unô
)

2027 
fsm
 *
f
 = &
l˝_fsm
[
unô
];

2029 i‡(
l˝_echo_timî_ru¬ög
 != 0) {

2030 
	`UNTIMEOUT
 (
L˝EchoTimeout
, 
f
);

2031 
l˝_echo_timî_ru¬ög
 = 0;

2033 
	}
}

	@net/lwip/netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

63 
	#CI_MRU
 1

	)

64 
	#CI_ASYNCMAP
 2

	)

65 
	#CI_AUTHTYPE
 3

	)

66 
	#CI_QUALITY
 4

	)

67 
	#CI_MAGICNUMBER
 5

	)

68 
	#CI_PCOMPRESSION
 7

	)

69 
	#CI_ACCOMPRESSION
 8

	)

70 
	#CI_CALLBACK
 13

	)

71 
	#CI_MRRU
 17

	)

72 
	#CI_SSNHF
 18

	)

73 
	#CI_EPDISC
 19

	)

78 
	#PROTREJ
 8

	)

79 
	#ECHOREQ
 9

	)

80 
	#ECHOREP
 10

	)

81 
	#DISCREQ
 11

	)

82 
	#CBCP_OPT
 6

	)

92 
	sl˝_›ti⁄s
 {

93 
u_öt
 
	m∑ssive
 : 1;

94 
u_öt
 
	msûít
 : 1;

95 
u_öt
 
	mª°¨t
 : 1;

96 
u_öt
 
	m√g_mru
 : 1;

97 
u_öt
 
	m√g_asyncm≠
 : 1;

98 
u_öt
 
	m√g_u∑p
 : 1;

99 
u_öt
 
	m√g_ch≠
 : 1;

100 
u_öt
 
	m√g_magi˙umbî
 : 1;

101 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

102 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

103 
u_öt
 
	m√g_lqr
 : 1;

104 
u_öt
 
	m√g_cb˝
 : 1;

105 #ifde‡
PPP_MULTILINK


106 
u_öt
 
	m√g_mºu
 : 1;

107 
u_öt
 
	m√g_s¢hf
 : 1;

108 
u_öt
 
	m√g_ídpoöt
 : 1;

110 
u_sh‹t
 
	mmru
;

111 #ifde‡
PPP_MULTILINK


112 
u_sh‹t
 
	mmºu
;

114 
u_ch¨
 
	mch≠_mdty≥
;

115 
u32_t
 
	masyncm≠
;

116 
u32_t
 
	mmagi˙umbî
;

117 
	mnumlo›s
;

118 
u32_t
 
	mlqr_≥riod
;

119 #ifde‡
PPP_MULTILINK


120 
ïdisc
 
	mídpoöt
;

122 } 
	tl˝_›ti⁄s
;

128 
	mPHASE_DEAD
 = 0,

129 
	mPHASE_INITIALIZE
,

130 
	mPHASE_ESTABLISH
,

131 
	mPHASE_AUTHENTICATE
,

132 
	mPHASE_CALLBACK
,

133 
	mPHASE_NETWORK
,

134 
	mPHASE_TERMINATE


135 } 
	tLökPha£
;

142 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

143 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

144 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

145 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

146 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

147 
ext_accm
 
xmô_accm
[];

154 
l˝_öô
 ();

155 
l˝_›í
 ();

156 
l˝_˛o£
 (, *);

157 
l˝_lowîup
 ();

158 
l˝_lowîdown
();

159 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

161 
¥Ÿít
 
l˝_¥Ÿít
;

165 
	#DEFLOOPBACKFAIL
 10

	)

	@net/lwip/netif/ppp/magic.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 
	~"µp.h
"

57 
	~"øndm.h
"

58 
	~"magic.h
"

69 
	$magicInô
()

72 
	}
}

77 
u32_t
 
	$magic
()

79  
	`avR™dom
();

80 
	}
}

	@net/lwip/netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

62 
magicInô
();

65 
u32_t
 
magic
();

	@net/lwip/netif/ppp/md5.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 #i‡
CHAP_SUPPORT
 || 
MD5_SUPPORT


40 
	~"µp.h
"

41 
	~"µpdebug.h
"

43 
	~"md5.h
"

57 
Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
);

59 
	gPADDING
[64] = {

71 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

72 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

73 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

74 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

77 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

81 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

82 {(
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

83 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

84 (
a
Ë+(
b
); \

85 }

	)

86 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

87 {(
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

88 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

89 (
a
Ë+(
b
); \

90 }

	)

91 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

92 {(
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

93 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

94 (
a
Ë+(
b
); \

95 }

	)

96 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) \

97 {(
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
u32_t
)(
ac
); \

98 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

99 (
a
Ë+(
b
); \

100 }

	)

102 #ifde‡
__STDC__


103 
	#UL
(
x
Ëx##
UL


	)

105 #ifde‡
WIN32


106 
	#UL
(
x
Ëx##
UL


	)

108 
	#UL
(
x
Ë
	)
x

116 
	$MD5Inô
 (
MD5_CTX
 *
mdC⁄ãxt
)

118 
mdC⁄ãxt
->
i
[0] = mdC⁄ãxt->i[1] = (
u32_t
)0;

121 
mdC⁄ãxt
->
buf
[0] = (
u32_t
)0x67452301UL;

122 
mdC⁄ãxt
->
buf
[1] = (
u32_t
)0xefcdab89UL;

123 
mdC⁄ãxt
->
buf
[2] = (
u32_t
)0x98badcfeUL;

124 
mdC⁄ãxt
->
buf
[3] = (
u32_t
)0x10325476UL;

125 
	}
}

132 
	$MD5Upd©e
(
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
)

134 
u32_t
 
ö
[16];

135 
mdi
;

136 
i
, 
ii
;

139 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%.*H\n", 
öLí
, 
	`MIN
(öLí, 20Ë* 2, 
öBuf
);

140 
	`µp_åa˚
(
LOG_INFO
, "MD5Upd©e: %u:%s\n", 
öLí
, 
öBuf
);

144 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

147 i‡((
mdC⁄ãxt
->
i
[0] + ((
u32_t
)
öLí
 << 3)) < mdContext->i[0]) {

148 
mdC⁄ãxt
->
i
[1]++;

150 
mdC⁄ãxt
->
i
[0] +((
u32_t
)
öLí
 << 3);

151 
mdC⁄ãxt
->
i
[1] +((
u32_t
)
öLí
 >> 29);

153 
öLí
--) {

155 
mdC⁄ãxt
->
ö
[
mdi
++] = *
öBuf
++;

158 i‡(
mdi
 == 0x40) {

159 
i
 = 0, 
ii
 = 0; i < 16; i++, ii += 4) {

160 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

161 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

162 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

163 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

165 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

166 
mdi
 = 0;

169 
	}
}

175 
	$MD5FöÆ
 (
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
)

177 
u32_t
 
ö
[16];

178 
mdi
;

179 
i
, 
ii
;

180 
∑dLí
;

183 
ö
[14] = 
mdC⁄ãxt
->
i
[0];

184 
ö
[15] = 
mdC⁄ãxt
->
i
[1];

187 
mdi
 = ()((
mdC⁄ãxt
->
i
[0] >> 3) & 0x3F);

190 
∑dLí
 = (
mdi
 < 56) ? (56 - mdi) : (120 - mdi);

191 
	`MD5Upd©e
 (
mdC⁄ãxt
, 
PADDING
, 
∑dLí
);

194 
i
 = 0, 
ii
 = 0; i < 14; i++, ii += 4) {

195 
ö
[
i
] = (((
u32_t
)
mdC⁄ãxt
->ö[
ii
+3]) << 24) |

196 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+2]) << 16) |

197 (((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
+1]) << 8) |

198 ((
u32_t
)
mdC⁄ãxt
->
ö
[
ii
]);

200 
	`Tønsf‹m
 (
mdC⁄ãxt
->
buf
, 
ö
);

203 
i
 = 0, 
ii
 = 0; i < 4; i++, ii += 4) {

204 
mdC⁄ãxt
->
dige°
[
ii
] = ()(mdC⁄ãxt->
buf
[
i
] & 0xFF);

205 
mdC⁄ãxt
->
dige°
[
ii
+1] =

206 ()((
mdC⁄ãxt
->
buf
[
i
] >> 8) & 0xFF);

207 
mdC⁄ãxt
->
dige°
[
ii
+2] =

208 ()((
mdC⁄ãxt
->
buf
[
i
] >> 16) & 0xFF);

209 
mdC⁄ãxt
->
dige°
[
ii
+3] =

210 ()((
mdC⁄ãxt
->
buf
[
i
] >> 24) & 0xFF);

212 
	`SMEMCPY
(
hash
, 
mdC⁄ãxt
->
dige°
, 16);

213 
	}
}

218 
	$Tønsf‹m
 (
u32_t
 *
buf
, u32_à*
ö
)

220 
u32_t
 
a
 = 
buf
[0], 
b
 = buf[1], 
c
 = buf[2], 
d
 = buf[3];

223 
	#S11
 7

	)

224 
	#S12
 12

	)

225 
	#S13
 17

	)

226 
	#S14
 22

	)

227 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S11
, 
	`UL
(3614090360));

228 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 1], 
S12
, 
	`UL
(3905402710));

229 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S13
, 
	`UL
( 606105819));

230 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 3], 
S14
, 
	`UL
(3250441966));

231 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S11
, 
	`UL
(4118548399));

232 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 5], 
S12
, 
	`UL
(1200080426));

233 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S13
, 
	`UL
(2821735955));

234 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 7], 
S14
, 
	`UL
(4249261313));

235 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S11
, 
	`UL
(1770035416));

236 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 9], 
S12
, 
	`UL
(2336552879));

237 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S13
, 
	`UL
(4294925233));

238 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[11], 
S14
, 
	`UL
(2304563134));

239 
	`FF
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S11
, 
	`UL
(1804603682));

240 
	`FF
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[13], 
S12
, 
	`UL
(4254626195));

241 
	`FF
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S13
, 
	`UL
(2792965006));

242 
	`FF
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[15], 
S14
, 
	`UL
(1236535329));

245 
	#S21
 5

	)

246 
	#S22
 9

	)

247 
	#S23
 14

	)

248 
	#S24
 20

	)

249 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S21
, 
	`UL
(4129170786));

250 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 6], 
S22
, 
	`UL
(3225465664));

251 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S23
, 
	`UL
( 643717713));

252 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 0], 
S24
, 
	`UL
(3921069994));

253 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S21
, 
	`UL
(3593408605));

254 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[10], 
S22
, 
	`UL
( 38016083));

255 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S23
, 
	`UL
(3634488961));

256 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 4], 
S24
, 
	`UL
(3889429448));

257 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S21
, 
	`UL
( 568446438));

258 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[14], 
S22
, 
	`UL
(3275163606));

259 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S23
, 
	`UL
(4107603335));

260 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 8], 
S24
, 
	`UL
(1163531501));

261 
	`GG
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S21
, 
	`UL
(2850285829));

262 
	`GG
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 2], 
S22
, 
	`UL
(4243563512));

263 
	`GG
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S23
, 
	`UL
(1735328473));

264 
	`GG
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[12], 
S24
, 
	`UL
(2368359562));

267 
	#S31
 4

	)

268 
	#S32
 11

	)

269 
	#S33
 16

	)

270 
	#S34
 23

	)

271 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 5], 
S31
, 
	`UL
(4294588738));

272 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 8], 
S32
, 
	`UL
(2272392833));

273 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[11], 
S33
, 
	`UL
(1839030562));

274 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[14], 
S34
, 
	`UL
(4259657740));

275 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 1], 
S31
, 
	`UL
(2763975236));

276 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 4], 
S32
, 
	`UL
(1272893353));

277 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 7], 
S33
, 
	`UL
(4139469664));

278 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[10], 
S34
, 
	`UL
(3200236656));

279 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[13], 
S31
, 
	`UL
( 681279174));

280 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 0], 
S32
, 
	`UL
(3936430074));

281 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 3], 
S33
, 
	`UL
(3572445317));

282 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 6], 
S34
, 
	`UL
( 76029189));

283 
	`HH
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 9], 
S31
, 
	`UL
(3654602809));

284 
	`HH
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[12], 
S32
, 
	`UL
(3873151461));

285 
	`HH
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[15], 
S33
, 
	`UL
( 530742520));

286 
	`HH
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 2], 
S34
, 
	`UL
(3299628645));

289 
	#S41
 6

	)

290 
	#S42
 10

	)

291 
	#S43
 15

	)

292 
	#S44
 21

	)

293 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 0], 
S41
, 
	`UL
(4096336452));

294 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 7], 
S42
, 
	`UL
(1126891415));

295 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[14], 
S43
, 
	`UL
(2878612391));

296 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 5], 
S44
, 
	`UL
(4237533241));

297 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[12], 
S41
, 
	`UL
(1700485571));

298 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[ 3], 
S42
, 
	`UL
(2399980690));

299 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[10], 
S43
, 
	`UL
(4293915773));

300 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 1], 
S44
, 
	`UL
(2240044497));

301 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 8], 
S41
, 
	`UL
(1873313359));

302 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[15], 
S42
, 
	`UL
(4264355552));

303 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 6], 
S43
, 
	`UL
(2734768916));

304 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[13], 
S44
, 
	`UL
(1309151649));

305 
	`II
 ( 
a
, 
b
, 
c
, 
d
, 
ö
[ 4], 
S41
, 
	`UL
(4149444226));

306 
	`II
 ( 
d
, 
a
, 
b
, 
c
, 
ö
[11], 
S42
, 
	`UL
(3174756917));

307 
	`II
 ( 
c
, 
d
, 
a
, 
b
, 
ö
[ 2], 
S43
, 
	`UL
( 718787259));

308 
	`II
 ( 
b
, 
c
, 
d
, 
a
, 
ö
[ 9], 
S44
, 
	`UL
(3951481745));

310 
buf
[0] +
a
;

311 
buf
[1] +
b
;

312 
buf
[2] +
c
;

313 
buf
[3] +
d
;

314 
	}
}

	@net/lwip/netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@net/lwip/netif/ppp/pap.c

52 
	~"lwù/›t.h
"

54 #i‡
PPP_SUPPORT


56 #i‡
PAP_SUPPORT


58 
	~"µp.h
"

59 
	~"µpdebug.h
"

61 
	~"auth.h
"

62 
	~"∑p.h
"

70 
u∑p_öô
 ();

71 
u∑p_lowîup
 ();

72 
u∑p_lowîdown
 ();

73 
u∑p_öput
 (, 
u_ch¨
 *, );

74 
u∑p_¥Ÿªj
 ();

76 
u∑p_timeout
 (*);

77 
u∑p_ªqtimeout
(*);

78 
u∑p_øuthªq
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

79 
u∑p_øuthack
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

80 
u∑p_øuth«k
 (
u∑p_°©e
 *, 
u_ch¨
 *, , );

81 
u∑p_ßuthªq
 (
u∑p_°©e
 *);

82 
u∑p_§e•
 (
u∑p_°©e
 *, 
u_ch¨
, u_char, *, );

88 
¥Ÿít
 
	g∑p_¥Ÿít
 = {

89 
PPP_PAP
,

90 
u∑p_öô
,

91 
u∑p_öput
,

92 
u∑p_¥Ÿªj
,

93 
u∑p_lowîup
,

94 
u∑p_lowîdown
,

95 
NULL
,

96 
NULL
,

98 
u∑p_¥öçkt
,

99 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL


110 
u∑p_°©e
 
	gu∑p
[
NUM_PPP
];

121 
	$u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
)

123 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

126 
u
->
us_u£r
 = 
lu£r
;

127 
u
->
us_u£æí
 = 
	`°æí
(
lu£r
);

128 
u
->
us_∑sswd
 = 
Õassw‹d
;

129 
u
->
us_∑sswdÀn
 = 
	`°æí
(
Õassw‹d
);

130 
	}
}

139 
	$u∑p_authwôh≥î
(
unô
, *
u£r
, *
∑ssw‹d
)

141 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

143 
	`UPAPDEBUG
((
LOG_INFO
, "upap_authwithpeer: %d user=%sÖassword=%s s=%d\n",

144 
unô
, 
u£r
, 
∑ssw‹d
, 
u
->
us_˛õ¡°©e
));

146 
	`u∑p_£éogö∑sswd
(
unô
, 
u£r
, 
∑ssw‹d
);

148 
u
->
us_å™smôs
 = 0;

151 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
 ||

152 
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

153 
u
->
us_˛õ¡°©e
 = 
UPAPCS_PENDING
;

157 
	`u∑p_ßuthªq
(
u
);

158 
	}
}

167 
	$u∑p_auth≥î
(
unô
)

169 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

172 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
 ||

173 
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

174 
u
->
us_£rvî°©e
 = 
UPAPSS_PENDING
;

178 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

179 i‡(
u
->
us_ªqtimeout
 > 0) {

180 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

182 
	}
}

193 
	$u∑p_öô
(
unô
)

195 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

197 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_öô: %d\n", 
unô
));

198 
u
->
us_unô
 = 
unô
;

199 
u
->
us_u£r
 = 
NULL
;

200 
u
->
us_u£æí
 = 0;

201 
u
->
us_∑sswd
 = 
NULL
;

202 
u
->
us_∑sswdÀn
 = 0;

203 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

204 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

205 
u
->
us_id
 = 0;

206 
u
->
us_timeouâime
 = 
UPAP_DEFTIMEOUT
;

207 
u
->
us_maxå™smôs
 = 10;

208 
u
->
us_ªqtimeout
 = 
UPAP_DEFREQTIME
;

209 
	}
}

215 
	$u∑p_timeout
(*
¨g
)

217 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

219 
	`UPAPDEBUG
((
LOG_INFO
, "upap_timeout: %dÅimeout %dÉxpired s=%d\n",

220 
u
->
us_unô
, u->
us_timeouâime
, u->
us_˛õ¡°©e
));

222 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

226 i‡(
u
->
us_å™smôs
 >u->
us_maxå™smôs
) {

228 
	`UPAPDEBUG
((
LOG_ERR
, "NoÑesponseÅo PAPáuthenticate-requests\n"));

229 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

230 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

234 
	`u∑p_ßuthªq
(
u
);

235 
	}
}

242 
	$u∑p_ªqtimeout
(*
¨g
)

244 
u∑p_°©e
 *
u
 = (u∑p_°©ê*Ë
¨g
;

246 i‡(
u
->
us_£rvî°©e
 !
UPAPSS_LISTEN
) {

250 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

251 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

252 
	}
}

261 
	$u∑p_lowîup
(
unô
)

263 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

265 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîup: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

267 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_INITIAL
) {

268 
u
->
us_˛õ¡°©e
 = 
UPAPCS_CLOSED
;

269 } i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_PENDING
) {

270 
	`u∑p_ßuthªq
(
u
);

273 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_INITIAL
) {

274 
u
->
us_£rvî°©e
 = 
UPAPSS_CLOSED
;

275 } i‡(
u
->
us_£rvî°©e
 =
UPAPSS_PENDING
) {

276 
u
->
us_£rvî°©e
 = 
UPAPSS_LISTEN
;

277 i‡(
u
->
us_ªqtimeout
 > 0) {

278 
	`TIMEOUT
(
u∑p_ªqtimeout
, 
u
, u->
us_ªqtimeout
);

281 
	}
}

290 
	$u∑p_lowîdown
(
unô
)

292 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

294 
	`UPAPDEBUG
((
LOG_INFO
, "u∑p_lowîdown: %d s=%d\n", 
unô
, 
u
->
us_˛õ¡°©e
));

296 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

297 
	`UNTIMEOUT
(
u∑p_timeout
, 
u
);

299 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
 && u->
us_ªqtimeout
 > 0) {

300 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

303 
u
->
us_˛õ¡°©e
 = 
UPAPCS_INITIAL
;

304 
u
->
us_£rvî°©e
 = 
UPAPSS_INITIAL
;

305 
	}
}

314 
	$u∑p_¥Ÿªj
(
unô
)

316 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

318 i‡(
u
->
us_˛õ¡°©e
 =
UPAPCS_AUTHREQ
) {

319 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed dueÅoÖrotocol-reject\n"));

320 
	`auth_wôh≥î_Áû
(
unô
, 
PPP_PAP
);

322 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_LISTEN
) {

323 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication ofÖeer failed (protocol-reject)\n"));

324 
	`auth_≥î_Áû
(
unô
, 
PPP_PAP
);

326 
	`u∑p_lowîdown
(
unô
);

327 
	}
}

334 
	$u∑p_öput
(
unô
, 
u_ch¨
 *
ö∑ckë
, 
l
)

336 
u∑p_°©e
 *
u
 = &
u∑p
[
unô
];

337 
u_ch¨
 *
öp
;

338 
u_ch¨
 
code
, 
id
;

339 
Àn
;

345 
öp
 = 
ö∑ckë
;

346 i‡(
l
 < 
UPAP_HEADERLEN
) {

347 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd short header.\n"));

350 
	`GETCHAR
(
code
, 
öp
);

351 
	`GETCHAR
(
id
, 
öp
);

352 
	`GETSHORT
(
Àn
, 
öp
);

353 i‡(
Àn
 < 
UPAP_HEADERLEN
) {

354 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd illegalÜength.\n"));

357 i‡(
Àn
 > 
l
) {

358 
	`UPAPDEBUG
((
LOG_INFO
, "pap_input:Ñcvd shortÖacket.\n"));

361 
Àn
 -
UPAP_HEADERLEN
;

366 
code
) {

367 
UPAP_AUTHREQ
:

368 
	`u∑p_øuthªq
(
u
, 
öp
, 
id
, 
Àn
);

371 
UPAP_AUTHACK
:

372 
	`u∑p_øuthack
(
u
, 
öp
, 
id
, 
Àn
);

375 
UPAP_AUTHNAK
:

376 
	`u∑p_øuth«k
(
u
, 
öp
, 
id
, 
Àn
);

382 
	}
}

389 
	$u∑p_øuthªq
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

391 
u_ch¨
 
ru£æí
, 
ΩasswdÀn
;

392 *
ru£r
, *
Ωasswd
;

393 
ªtcode
;

394 *
msg
;

395 
msgÀn
;

397 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth: Rcvd id %d.\n", 
id
));

399 i‡(
u
->
us_£rvî°©e
 < 
UPAPSS_LISTEN
) {

407 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_OPEN
) {

408 
	`u∑p_§e•
(
u
, 
UPAP_AUTHACK
, 
id
, "", 0);

411 i‡(
u
->
us_£rvî°©e
 =
UPAPSS_BADAUTH
) {

412 
	`u∑p_§e•
(
u
, 
UPAP_AUTHNAK
, 
id
, "", 0);

419 i‡(
Àn
 <  (
u_ch¨
)) {

420 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

423 
	`GETCHAR
(
ru£æí
, 
öp
);

424 
Àn
 - (
u_ch¨
Ë+ 
ru£æí
 +  (u_char);

425 i‡(
Àn
 < 0) {

426 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

429 
ru£r
 = (*Ë
öp
;

430 
	`INCPTR
(
ru£æí
, 
öp
);

431 
	`GETCHAR
(
ΩasswdÀn
, 
öp
);

432 i‡(
Àn
 < 
ΩasswdÀn
) {

433 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauth:Ñcvd shortÖacket.\n"));

436 
Ωasswd
 = (*Ë
öp
;

441 
ªtcode
 = 
	`check_∑sswd
(
u
->
us_unô
, 
ru£r
, 
ru£æí
, 
Ωasswd
, 
ΩasswdÀn
, &
msg
, &
msgÀn
);

442 
	`BZERO
(
Ωasswd
, 
ΩasswdÀn
);

444 
	`u∑p_§e•
(
u
, 
ªtcode
, 
id
, 
msg
, 
msgÀn
);

446 i‡(
ªtcode
 =
UPAP_AUTHACK
) {

447 
u
->
us_£rvî°©e
 = 
UPAPSS_OPEN
;

448 
	`auth_≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
, 
ru£r
, 
ru£æí
);

450 
u
->
us_£rvî°©e
 = 
UPAPSS_BADAUTH
;

451 
	`auth_≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

454 i‡(
u
->
us_ªqtimeout
 > 0) {

455 
	`UNTIMEOUT
(
u∑p_ªqtimeout
, 
u
);

457 
	}
}

464 
	$u∑p_øuthack
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

466 
u_ch¨
 
msgÀn
;

467 *
msg
;

469 
	`LWIP_UNUSED_ARG
(
id
);

471 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuthack: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

473 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

480 i‡(
Àn
 <  (
u_ch¨
)) {

481 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

484 
	`GETCHAR
(
msgÀn
, 
öp
);

485 
Àn
 - (
u_ch¨
);

486 i‡(
Àn
 < 
msgÀn
) {

487 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthack:Ñcvd shortÖacket.\n"));

490 
msg
 = (*Ë
öp
;

491 
	`PRINTMSG
(
msg
, 
msgÀn
);

493 
u
->
us_˛õ¡°©e
 = 
UPAPCS_OPEN
;

495 
	`auth_wôh≥î_suc˚ss
(
u
->
us_unô
, 
PPP_PAP
);

496 
	}
}

503 
	$u∑p_øuth«k
(
u∑p_°©e
 *
u
, 
u_ch¨
 *
öp
, 
id
, 
Àn
)

505 
u_ch¨
 
msgÀn
;

506 *
msg
;

508 
	`LWIP_UNUSED_ARG
(
id
);

510 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_øuth«k: Rcvd id %d s=%d\n", 
id
, 
u
->
us_˛õ¡°©e
));

512 i‡(
u
->
us_˛õ¡°©e
 !
UPAPCS_AUTHREQ
) {

519 i‡(
Àn
 <  (
u_ch¨
)) {

520 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

523 
	`GETCHAR
(
msgÀn
, 
öp
);

524 
Àn
 - (
u_ch¨
);

525 i‡(
Àn
 < 
msgÀn
) {

526 
	`UPAPDEBUG
((
LOG_INFO
, "pap_rauthnak:Ñcvd shortÖacket.\n"));

529 
msg
 = (*Ë
öp
;

530 
	`PRINTMSG
(
msg
, 
msgÀn
);

532 
u
->
us_˛õ¡°©e
 = 
UPAPCS_BADAUTH
;

534 
	`UPAPDEBUG
((
LOG_ERR
, "PAPáuthentication failed\n"));

535 
	`auth_wôh≥î_Áû
(
u
->
us_unô
, 
PPP_PAP
);

536 
	}
}

543 
	$u∑p_ßuthªq
(
u∑p_°©e
 *
u
)

545 
u_ch¨
 *
ouç
;

546 
ouéí
;

548 
ouéí
 = 
UPAP_HEADERLEN
 + 2 *  (
u_ch¨
)

549 + 
u
->
us_u£æí
 + u->
us_∑sswdÀn
;

550 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

552 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

554 
	`PUTCHAR
(
UPAP_AUTHREQ
, 
ouç
);

555 
	`PUTCHAR
(++
u
->
us_id
, 
ouç
);

556 
	`PUTSHORT
(
ouéí
, 
ouç
);

557 
	`PUTCHAR
(
u
->
us_u£æí
, 
ouç
);

558 
	`BCOPY
(
u
->
us_u£r
, 
ouç
, u->
us_u£æí
);

559 
	`INCPTR
(
u
->
us_u£æí
, 
ouç
);

560 
	`PUTCHAR
(
u
->
us_∑sswdÀn
, 
ouç
);

561 
	`BCOPY
(
u
->
us_∑sswd
, 
ouç
, u->
us_∑sswdÀn
);

563 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

565 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_ßuth: Síàid %d\n", 
u
->
us_id
));

567 
	`TIMEOUT
(
u∑p_timeout
, 
u
, u->
us_timeouâime
);

568 ++
u
->
us_å™smôs
;

569 
u
->
us_˛õ¡°©e
 = 
UPAPCS_AUTHREQ
;

570 
	}
}

577 
	$u∑p_§e•
(
u∑p_°©e
 *
u
, 
u_ch¨
 
code
, u_ch¨ 
id
, *
msg
, 
msgÀn
)

579 
u_ch¨
 *
ouç
;

580 
ouéí
;

582 
ouéí
 = 
UPAP_HEADERLEN
 +  (
u_ch¨
Ë+ 
msgÀn
;

583 
ouç
 = 
ouçackë_buf
[
u
->
us_unô
];

584 
	`MAKEHEADER
(
ouç
, 
PPP_PAP
);

586 
	`PUTCHAR
(
code
, 
ouç
);

587 
	`PUTCHAR
(
id
, 
ouç
);

588 
	`PUTSHORT
(
ouéí
, 
ouç
);

589 
	`PUTCHAR
(
msgÀn
, 
ouç
);

590 
	`BCOPY
(
msg
, 
ouç
, 
msgÀn
);

591 
	`µpWrôe
(
u
->
us_unô
, 
ouçackë_buf
[u->us_unô], 
ouéí
 + 
PPP_HDRLEN
);

593 
	`UPAPDEBUG
((
LOG_INFO
, "∑p_§e•: Síàcodê%d, id %d s=%d\n", 
code
, 
id
, 
u
->
us_˛õ¡°©e
));

594 
	}
}

600 
u∑p_¥öçkt
(

601 
u_ch¨
 *
p
,

602 
∂í
,

603 (*
¥öãr
) (*, *, ...),

604 *
¨g


607 
	`LWIP_UNUSED_ARG
(
p
);

608 
	`LWIP_UNUSED_ARG
(
∂í
);

609 
	`LWIP_UNUSED_ARG
(
¥öãr
);

610 
	`LWIP_UNUSED_ARG
(
¨g
);

612 
	}
}

	@net/lwip/netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


63 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

69 
	#UPAP_AUTHREQ
 1

	)

70 
	#UPAP_AUTHACK
 2

	)

71 
	#UPAP_AUTHNAK
 3

	)

76 
	#UPAPCS_INITIAL
 0

	)

77 
	#UPAPCS_CLOSED
 1

	)

78 
	#UPAPCS_PENDING
 2

	)

79 
	#UPAPCS_AUTHREQ
 3

	)

80 
	#UPAPCS_OPEN
 4

	)

81 
	#UPAPCS_BADAUTH
 5

	)

86 
	#UPAPSS_INITIAL
 0

	)

87 
	#UPAPSS_CLOSED
 1

	)

88 
	#UPAPSS_PENDING
 2

	)

89 
	#UPAPSS_LISTEN
 3

	)

90 
	#UPAPSS_OPEN
 4

	)

91 
	#UPAPSS_BADAUTH
 5

	)

101 
	su∑p_°©e
 {

102 
	mus_unô
;

103 c⁄° *
	mus_u£r
;

104 
	mus_u£æí
;

105 c⁄° *
	mus_∑sswd
;

106 
	mus_∑sswdÀn
;

107 
	mus_˛õ¡°©e
;

108 
	mus_£rvî°©e
;

109 
u_ch¨
 
	mus_id
;

110 
	mus_timeouâime
;

111 
	mus_å™smôs
;

112 
	mus_maxå™smôs
;

113 
	mus_ªqtimeout
;

114 } 
	tu∑p_°©e
;

121 
u∑p_°©e
 
u∑p
[];

123 
u∑p_£éogö∑sswd
(
unô
, c⁄° *
lu£r
, c⁄° *
Õassw‹d
);

124 
u∑p_authwôh≥î
 (, *, *);

125 
u∑p_auth≥î
 ();

127 
¥Ÿít
 
∑p_¥Ÿít
;

	@net/lwip/netif/ppp/ppp.c

82 
	~"lwù/›t.h
"

84 #i‡
PPP_SUPPORT


86 
	~"lwù/ù.h
"

88 
	~"µp.h
"

89 
	~"µpdebug.h
"

91 
	~"øndm.h
"

92 
	~"fsm.h
"

93 #i‡
PAP_SUPPORT


94 
	~"∑p.h
"

96 #i‡
CHAP_SUPPORT


97 
	~"ch≠.h
"

99 
	~"ù˝.h
"

100 
	~"l˝.h
"

101 
	~"magic.h
"

102 
	~"auth.h
"

103 #i‡
VJ_SUPPORT


104 
	~"vj.h
"

106 #i‡
PPPOE_SUPPORT


107 
	~"√tif/µp_€.h
"

110 
	~<°rög.h
>

119 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

120 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

121 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

126 
	mPDIDLE
 = 0,

127 
	mPDSTART
,

128 
	mPDADDRESS
,

129 
	mPDCONTROL
,

130 
	mPDPROTOCOL1
,

131 
	mPDPROTOCOL2
,

132 
	mPDDATA


133 } 
	tPPPDevSèãs
;

135 
	#ESCAPE_P
(
accm
, 
c
Ë(◊ccm)[(cË>> 3] & 
µpACCMMask
[¯& 0x07])

	)

143 
	sPPPC⁄åﬁ_s
 {

144 
	m›íFœg
;

145 #i‡
PPPOE_SUPPORT


146 
√tif
 *
	mëhif
;

147 
µp€_so·c
 *
	mµp€_sc
;

149 
	mif_up
;

150 
	mîrCode
;

151 #i‡
PPPOS_SUPPORT


152 
sio_fd_t
 
	mfd
;

153 
	mkûl_lök
;

154 
	msig_hup
;

155 
pbuf
 *
	möHód
, *
	möTaû
;

156 
PPPDevSèãs
 
	möSèã
;

157 
	möEsˇ≥d
;

158 
u16_t
 
	möPrŸocﬁ
;

159 
u16_t
 
	möFCS
;

161 
	mmtu
;

162 
	mpcomp
;

163 
	maccomp
;

164 
u_l⁄g
 
	mœ°XMô
;

165 
ext_accm
 
	möACCM
;

166 
ext_accm
 
	moutACCM
;

167 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


168 
	mvjE«bÀd
;

169 
vjcom¥ess
 
	mvjComp
;

172 
√tif
 
	m√tif
;

174 
µp_addrs
 
	maddrs
;

176 (*
	mlökSètusCB
)(*
	m˘x
, 
	mîrCode
, *
	m¨g
);

177 *
	mlökSètusCtx
;

179 } 
	tPPPC⁄åﬁ
;

186 
	s≈io˘l
 {

187 
	m¥Ÿocﬁ
;

188 
NPmode
 
	mmode
;

196 #i‡
PPPOS_SUPPORT


197 
µpMaö
(*
pd
);

198 
µpDr›
(
PPPC⁄åﬁ
 *
pc
);

199 
µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
);

206 
u_l⁄g
 
	gsub√tMask
;

208 
PPPC⁄åﬁ
 
	gµpC⁄åﬁ
[
NUM_PPP
];

215 
¥Ÿít
 *
	gµp_¥Ÿocﬁs
[] = {

216 &
l˝_¥Ÿít
,

217 #i‡
PAP_SUPPORT


218 &
∑p_¥Ÿít
,

220 #i‡
CHAP_SUPPORT


221 &
ch≠_¥Ÿít
,

223 #i‡
CBCP_SUPPORT


224 &
cb˝_¥Ÿít
,

226 &
ù˝_¥Ÿít
,

227 #i‡
CCP_SUPPORT


228 &
c˝_¥Ÿít
,

230 
NULL


238 
u_ch¨
 *
	gouçackë_buf
[
NUM_PPP
];

245 #i‡
PPPOS_SUPPORT


249 c⁄° 
u_sh‹t
 
	gfc°ab
[256] = {

286 
u_ch¨
 
	gµpACCMMask
[] = {

299 
	$µpMaöWakeup
(
pd
)

301 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaöWakeup: unô %d\n", 
pd
));

302 
	`sio_ªad_ab‹t
(
µpC⁄åﬁ
[
pd
].
fd
);

303 
	}
}

307 
	$µpLökTîmö©ed
(
pd
)

309 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

311 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökTîmö©ed: unô %d\n", 
pd
));

313 #i‡
PPPOE_SUPPORT


314 if(
pc
->
ëhif
) {

315 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

319 #i‡
PPPOS_SUPPORT


320 
	`µpMaöWakeup
(
pd
);

323 
	}
}

326 
	$µpLökDown
(
pd
)

328 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

330 
	`PPPDEBUG
((
LOG_DEBUG
, "µpLökDown: unô %d\n", 
pd
));

332 #i‡
PPPOE_SUPPORT


333 if(
pc
->
ëhif
) {

334 
	`µp€_disc⁄√˘
(
pc
->
µp€_sc
);

338 #i‡
PPPOS_SUPPORT


339 
	`µpMaöWakeup
(
pd
);

342 
	}
}

351 
	$µpSèπCB
(*
¨g
)

353 
pd
 = ()
¨g
;

355 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSèπCB: unô %d\n", 
pd
));

356 
	`l˝_lowîup
(
pd
);

357 
	`l˝_›í
(
pd
);

358 
	}
}

361 
	$µpSt›CB
(*
¨g
)

363 
pd
 = ()
¨g
;

365 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSt›CB: unô %d\n", 
pd
));

366 
	`l˝_˛o£
(
pd
, "UserÑequest");

367 
	}
}

370 
	$µpHupCB
(*
¨g
)

372 
pd
 = ()
¨g
;

374 
	`PPPDEBUG
((
LOG_DEBUG
, "µpHupCB: unô %d\n", 
pd
));

375 
	`l˝_lowîdown
(
pd
);

376 
	`lök_ãrmö©ed
(
pd
);

377 
	}
}

384 
µp_£âögs
 
	gµp_£âögs
;

386 
îr_t


387 
	$µpInô
()

389 
¥Ÿít
 *
¥Ÿp
;

390 
i
, 
j
;

392 
	`mem£t
(&
µp_£âögs
, 0, (ppp_settings));

393 
µp_£âögs
.
u£≥îdns
 = 1;

394 
	`µpSëAuth
(
PPPAUTHTYPE_NONE
, 
NULL
, NULL);

396 
	`magicInô
();

398 
i
 = 0; i < 
NUM_PPP
; i++) {

399 
µpC⁄åﬁ
[
i
].
›íFœg
 = 0;

401 
sub√tMask
 = 
	`ht⁄l
(0xffffff00);

403 
ouçackë_buf
[
i
] = (
u_ch¨
 *)
	`mem_mÆloc
(
PPP_MRU
+
PPP_HDRLEN
);

404 if(!
ouçackë_buf
[
i
]) {

405  
ERR_MEM
;

411 
j
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[j]Ë!
NULL
; ++j) {

412 (*
¥Ÿp
->
öô
)(
i
);

416 #i‡
LINK_STATS


419 
	`mem£t
(&
lwù_°©s
.
lök
, 0, (lwip_stats.link));

422 #i‡
PPPOE_SUPPORT


423 
	`µp€_öô
();

426  
ERR_OK
;

427 
	}
}

430 
	$µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
)

432 
authTy≥
) {

433 
PPPAUTHTYPE_NONE
:

435 #ifde‡
LWIP_PPP_STRICT_PAP_REJECT


436 
µp_£âögs
.
ªfu£_∑p
 = 1;

439 
µp_£âögs
.
ªfu£_∑p
 = 0;

441 
µp_£âögs
.
ªfu£_ch≠
 = 1;

444 
PPPAUTHTYPE_ANY
:

464 
µp_£âögs
.
ªfu£_∑p
 = 0;

465 
µp_£âögs
.
ªfu£_ch≠
 = 0;

468 
PPPAUTHTYPE_PAP
:

469 
µp_£âögs
.
ªfu£_∑p
 = 0;

470 
µp_£âögs
.
ªfu£_ch≠
 = 1;

473 
PPPAUTHTYPE_CHAP
:

474 
µp_£âögs
.
ªfu£_∑p
 = 1;

475 
µp_£âögs
.
ªfu£_ch≠
 = 0;

479 if(
u£r
) {

480 
	`°∫˝y
(
µp_£âögs
.
u£r
, user, (ppp_settings.user)-1);

481 
µp_£âögs
.
u£r
[(ppp_settings.user)-1] = '\0';

483 
µp_£âögs
.
u£r
[0] = '\0';

486 if(
∑sswd
) {

487 
	`°∫˝y
(
µp_£âögs
.
∑sswd
,Öasswd, (ppp_settings.passwd)-1);

488 
µp_£âögs
.
∑sswd
[(ppp_settings.passwd)-1] = '\0';

490 
µp_£âögs
.
∑sswd
[0] = '\0';

492 
	}
}

494 #i‡
PPPOS_SUPPORT


503 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

505 
PPPC⁄åﬁ
 *
pc
;

506 
pd
;

509 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

511 i‡(
pd
 >
NUM_PPP
) {

512 
pd
 = 
PPPERR_OPEN
;

514 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

518 i‡(
pd
 >= 0) {

519 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

521 
	`l˝_öô
(
pd
);

522 
pc
 = &
µpC⁄åﬁ
[
pd
];

523 
pc
->
fd
 = fd;

524 #i‡
PPPOE_SUPPORT


525 
pc
->
ëhif

NULL
;

527 
pc
->
kûl_lök
 = 0;

528 
pc
->
sig_hup
 = 0;

529 
pc
->
if_up
 = 0;

530 
pc
->
îrCode
 = 0;

531 
pc
->
öSèã
 = 
PDIDLE
;

532 
pc
->
öHód
 = 
NULL
;

533 
pc
->
öTaû
 = 
NULL
;

534 
pc
->
öEsˇ≥d
 = 0;

535 
pc
->
œ°XMô
 = 0;

537 #i‡
VJ_SUPPORT


538 
pc
->
vjE«bÀd
 = 0;

539 
	`vj_com¥ess_öô
(&
pc
->
vjComp
);

546 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

547 
pc
->
öACCM
[15] = 0x60;

548 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

549 
pc
->
outACCM
[15] = 0x60;

551 
pc
->
lökSètusCB
 =ÜinkStatusCB;

552 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

554 
	`sys_thªad_√w
(
PPP_THREAD_NAME
, 
µpMaö
, (*)
pd
, 
PPP_THREAD_STACKSIZE
, 
PPP_THREAD_PRIO
);

555 if(!
lökSètusCB
) {

556 
pd
 >0 && !
pc
->
if_up
) {

557 
	`sys_m¶ìp
(500);

558 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

559 
	`µpClo£
(
pd
);

560 i‡(
pc
->
îrCode
) {

561 
pd
 = 
pc
->
îrCode
;

563 
pd
 = 
PPPERR_CONNECT
;

570  
pd
;

571 
	}
}

574 #i‡
PPPOE_SUPPORT


575 
µpOvîEthî√tLökSètusCB
(
pd
, 
up
);

578 
	$µpOvîEthî√tClo£
(
pd
)

580 
PPPC⁄åﬁ
* 
pc
 = &
µpC⁄åﬁ
[
pd
];

583 
	`l˝_˛o£
(
pd
, 
NULL
);

585 
	`µp€_de°roy
(&
pc
->
√tif
);

586 
	}
}

588 
µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
)

590 
PPPC⁄åﬁ
 *
pc
;

591 
pd
;

593 
	`LWIP_UNUSED_ARG
(
£rvi˚_«me
);

594 
	`LWIP_UNUSED_ARG
(
c⁄˚¡øt‹_«me
);

597 
pd
 = 0;Öd < 
NUM_PPP
 && 
µpC⁄åﬁ
[pd].
›íFœg
 != 0;Öd++);

598 i‡(
pd
 >
NUM_PPP
) {

599 
pd
 = 
PPPERR_OPEN
;

601 
µpC⁄åﬁ
[
pd
].
›íFœg
 = !0;

605 i‡(
pd
 >= 0) {

607 
µpC⁄åﬁ
[
pd
].
›íFœg
 = 1;

609 
	`l˝_öô
(
pd
);

611 
l˝_w™t›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

612 
l˝_w™t›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

613 
l˝_w™t›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

614 
l˝_w™t›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

616 
l˝_Ælow›ti⁄s
[
pd
].
mru
 = 
PPPOE_MAXMTU
;

617 
l˝_Ælow›ti⁄s
[
pd
].
√g_asyncm≠
 = 0;

618 
l˝_Ælow›ti⁄s
[
pd
].
√g_pcom¥essi⁄
 = 0;

619 
l˝_Ælow›ti⁄s
[
pd
].
√g_accom¥essi⁄
 = 0;

621 
pc
 = &
µpC⁄åﬁ
[
pd
];

622 
pc
->
if_up
 = 0;

623 
pc
->
îrCode
 = 0;

624 
pc
->
œ°XMô
 = 0;

625 #i‡
PPPOS_SUPPORT


626 
pc
->
kûl_lök
 = 0;

627 
pc
->
sig_hup
 = 0;

628 
pc
->
öSèã
 = 
PDIDLE
;

629 
pc
->
öHód
 = 
NULL
;

630 
pc
->
öTaû
 = 
NULL
;

631 
pc
->
öEsˇ≥d
 = 0;

632 #i‡
VJ_SUPPORT


633 
pc
->
vjE«bÀd
 = 0;

636 
pc
->
ëhif
=Éthif;

638 
	`mem£t
(
pc
->
öACCM
, 0, (
ext_accm
));

639 
	`mem£t
(
pc
->
outACCM
, 0, (
ext_accm
));

641 
pc
->
lökSètusCB
 =ÜinkStatusCB;

642 
pc
->
lökSètusCtx
 =ÜinkStatusCtx;

644 if(
	`µp€_¸óã
(
ëhif
, 
pd
, 
µpOvîEthî√tLökSètusCB
, &
pc
->
µp€_sc
Ë!
ERR_OK
) {

645 
pc
->
›íFœg
 = 0;

646  
PPPERR_OPEN
;

649 
	`µp€_c⁄√˘
(
pc
->
µp€_sc
);

651 if(!
lökSètusCB
) {

652 
pd
 >0 && !
pc
->
if_up
) {

653 
	`sys_m¶ìp
(500);

654 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

655 
	`µpClo£
(
pd
);

656 i‡(
pc
->
îrCode
) {

657 
pd
 = 
pc
->
îrCode
;

659 
pd
 = 
PPPERR_CONNECT
;

666  
pd
;

667 
	}
}

675 
	$µpClo£
(
pd
)

677 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

678 
°
 = 0;

681 #i‡
PPPOE_SUPPORT


682 if(
pc
->
ëhif
) {

683 
	`PPPDEBUG
((
LOG_DEBUG
, "µpClo£: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

684 
pc
->
îrCode
 = 
PPPERR_USER
;

686 
	`t˝ù_ˇŒback
(
µpSt›CB
, (*)
pd
);

690 #i‡
PPPOS_SUPPORT


691 
pc
->
kûl_lök
 = !0;

692 
	`µpMaöWakeup
(
pd
);

696 if(!
pc
->
lökSètusCB
) {

697 
°
 >0 && 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

698 
	`sys_m¶ìp
(500);

703  
°
;

704 
	}
}

708 
	$µpSigHUP
(
pd
)

710 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

712 #i‡
PPPOE_SUPPORT


713 if(
pc
->
ëhif
) {

714 
	`PPPDEBUG
((
LOG_DEBUG
, "µpSigHUP: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

715 
	`t˝ù_ˇŒback
(
µpHupCB
, (*)
pd
);

719 #i‡
PPPOS_SUPPORT


720 
pc
->
sig_hup
 = 1;

721 
	`µpMaöWakeup
(
pd
);

724 
	}
}

726 #i‡
PPPOS_SUPPORT


728 
	$nPut
(
PPPC⁄åﬁ
 *
pc
, 
pbuf
 *
nb
)

730 
pbuf
 *
b
;

731 
c
;

733 
b
 = 
nb
; b !
NULL
; b = b->
√xt
) {

734 if((
c
 = 
	`sio_wrôe
(
pc
->
fd
, 
b
->
∑ylﬂd
, b->
Àn
)) != b->len) {

735 
	`PPPDEBUG
((
LOG_WARNING
,

736 "PPPÇPut: incom∂ëêsio_wrôe(%d,, %uË%d\n", 
pc
->
fd
, 
b
->
Àn
, 
c
));

737 
	`LINK_STATS_INC
(
lök
.
îr
);

738 
pc
->
œ°XMô
 = 0;

743 
	`pbuf_‰ì
(
nb
);

744 
	`LINK_STATS_INC
(
lök
.
xmô
);

745 
	}
}

753 
pbuf
 *

754 
	$µpAµíd
(
u_ch¨
 
c
, 
pbuf
 *
nb
, 
ext_accm
 *
outACCM
)

756 
pbuf
 *
tb
 = 
nb
;

762 i‡(
nb
 && (
PBUF_POOL_BUFSIZE
 -Çb->
Àn
) < 2) {

763 
tb
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

764 i‡(
tb
) {

765 
nb
->
√xt
 = 
tb
;

767 
	`LINK_STATS_INC
(
lök
.
memîr
);

769 
nb
 = 
tb
;

772 i‡(
nb
) {

773 i‡(
outACCM
 && 
	`ESCAPE_P
(*outACCM, 
c
)) {

774 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
PPP_ESCAPE
;

775 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
 ^ 
PPP_TRANS
;

777 *((
u_ch¨
*)
nb
->
∑ylﬂd
 +Çb->
Àn
++Ë
c
;

781  
tb
;

782 
	}
}

785 #i‡
PPPOE_SUPPORT


786 
îr_t


787 
	$µpifOuçutOvîEthî√t
(
pd
, 
pbuf
 *
p
)

789 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

790 
pbuf
 *
pb
;

791 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

792 
i
=0;

794 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + (
¥Ÿocﬁ
), 
PBUF_RAM
);

795 if(!
pb
) {

796 
	`LINK_STATS_INC
(
lök
.
memîr
);

797 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

798  
ERR_MEM
;

801 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

803 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

805 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

806 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
++Ë(
¥Ÿocﬁ
 >> 8) & 0xFF;

808 *((
u_ch¨
*)
pb
->
∑ylﬂd
 + 
i
Ë
¥Ÿocﬁ
 & 0xFF;

810 
	`pbuf_chaö
(
pb
, 
p
);

812 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

813 
	`LINK_STATS_INC
(
lök
.
îr
);

814  
PPPERR_DEVICE
;

817 
	`LINK_STATS_INC
(
lök
.
xmô
);

818  
ERR_OK
;

819 
	}
}

823 
îr_t


824 
	$µpifOuçut
(
√tif
 *√tif, 
pbuf
 *
pb
, 
ù_addr
 *
ùaddr
)

826 
pd
 = ()
√tif
->
°©e
;

827 
u_sh‹t
 
¥Ÿocﬁ
 = 
PPP_IP
;

828 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

829 #i‡
PPPOS_SUPPORT


830 
u_öt
 
fcsOut
 = 
PPP_INITFCS
;

831 
pbuf
 *
hódMB
 = 
NULL
, *
èûMB
 = NULL, *
p
;

832 
u_ch¨
 
c
;

835 
	`LWIP_UNUSED_ARG
(
ùaddr
);

840 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
 || !
pb
) {

841 
	`PPPDEBUG
((
LOG_WARNING
, "pppifOutput[%d]: badÖarmsÖrot=%dÖb=%p\n",

842 
pd
, 
¥Ÿocﬁ
, 
pb
));

843 
	`LINK_STATS_INC
(
lök
.
›ãº
);

844 
	`LINK_STATS_INC
(
lök
.
dr›
);

845  
ERR_ARG
;

849 i‡(
l˝_pha£
[
pd
] =
PHASE_DEAD
) {

850 
	`PPPDEBUG
((
LOG_ERR
, "µpifOuçut[%d]:ÜökÇŸ up\n", 
pd
));

851 
	`LINK_STATS_INC
(
lök
.
πîr
);

852 
	`LINK_STATS_INC
(
lök
.
dr›
);

853  
ERR_RTE
;

856 #i‡
PPPOE_SUPPORT


857 if(
pc
->
ëhif
) {

858  
	`µpifOuçutOvîEthî√t
(
pd
, 
pb
);

862 #i‡
PPPOS_SUPPORT


864 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

865 i‡(
hódMB
 =
NULL
) {

866 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: fú°áŒo¯Áû\n", 
pd
));

867 
	`LINK_STATS_INC
(
lök
.
memîr
);

868 
	`LINK_STATS_INC
(
lök
.
dr›
);

869  
ERR_MEM
;

872 #i‡
VJ_SUPPORT


877 i‡(
¥Ÿocﬁ
 =
PPP_IP
 && 
pc
->
vjE«bÀd
) {

878 
	`vj_com¥ess_t˝
(&
pc
->
vjComp
, 
pb
)) {

879 
TYPE_IP
:

883 
TYPE_COMPRESSED_TCP
:

884 
¥Ÿocﬁ
 = 
PPP_VJC_COMP
;

886 
TYPE_UNCOMPRESSED_TCP
:

887 
¥Ÿocﬁ
 = 
PPP_VJC_UNCOMP
;

890 
	`PPPDEBUG
((
LOG_WARNING
, "µpifOuçut[%d]: bad IPÖackë\n", 
pd
));

891 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

892 
	`LINK_STATS_INC
(
lök
.
dr›
);

893 
	`pbuf_‰ì
(
hódMB
);

894  
ERR_VAL
;

899 
èûMB
 = 
hódMB
;

902 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

903 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

906 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

907 i‡(!
pc
->
accomp
) {

908 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_ALLSTATIONS
);

909 
èûMB
 = 
	`µpAµíd
(
PPP_ALLSTATIONS
,ÅaûMB, &
pc
->
outACCM
);

910 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
PPP_UI
);

911 
èûMB
 = 
	`µpAµíd
(
PPP_UI
,ÅaûMB, &
pc
->
outACCM
);

913 i‡(!
pc
->
pcomp
 || 
¥Ÿocﬁ
 > 0xFF) {

914 
c
 = (
¥Ÿocﬁ
 >> 8) & 0xFF;

915 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

916 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

918 
c
 = 
¥Ÿocﬁ
 & 0xFF;

919 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

920 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

923 
p
 = 
pb
;Ö;Ö =Ö->
√xt
) {

924 
n
;

925 
u_ch¨
 *
sPå
;

927 
sPå
 = (
u_ch¨
*)
p
->
∑ylﬂd
;

928 
n
 = 
p
->
Àn
;

929 
n
-- > 0) {

930 
c
 = *
sPå
++;

933 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

936 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

941 
c
 = ~
fcsOut
 & 0xFF;

942 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

943 
c
 = (~
fcsOut
 >> 8) & 0xFF;

944 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

945 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

948 i‡(!
èûMB
) {

949 
	`PPPDEBUG
((
LOG_WARNING
,

951 
pd
, 
¥Ÿocﬁ
));

952 
	`pbuf_‰ì
(
hódMB
);

953 
	`LINK_STATS_INC
(
lök
.
memîr
);

954 
	`LINK_STATS_INC
(
lök
.
dr›
);

955  
ERR_MEM
;

959 
	`PPPDEBUG
((
LOG_INFO
, "µpifOuçut[%d]:ÖrŸo=0x%04X\n", 
pd
, 
¥Ÿocﬁ
));

961 
	`nPut
(
pc
, 
hódMB
);

964  
ERR_OK
;

965 
	}
}

970 
	$µpIOCé
(
pd
, 
cmd
, *
¨g
)

972 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

973 
°
 = 0;

975 i‡(
pd
 < 0 ||Öd >
NUM_PPP
) {

976 
°
 = 
PPPERR_PARAM
;

978 
cmd
) {

979 
PPPCTLG_UPSTATUS
:

980 i‡(
¨g
) {

981 *(*)
¨g
 = ()(
pc
->
if_up
);

983 
°
 = 
PPPERR_PARAM
;

986 
PPPCTLS_ERRCODE
:

987 i‡(
¨g
) {

988 
pc
->
îrCode
 = *(*)
¨g
;

990 
°
 = 
PPPERR_PARAM
;

993 
PPPCTLG_ERRCODE
:

994 i‡(
¨g
) {

995 *(*)
¨g
 = ()(
pc
->
îrCode
);

997 
°
 = 
PPPERR_PARAM
;

1000 #i‡
PPPOS_SUPPORT


1001 
PPPCTLG_FD
:

1002 i‡(
¨g
) {

1003 *(
sio_fd_t
 *)
¨g
 = 
pc
->
fd
;

1005 
°
 = 
PPPERR_PARAM
;

1010 
°
 = 
PPPERR_PARAM
;

1015  
°
;

1016 
	}
}

1021 
u_öt


1022 
	$µpMTU
(
pd
)

1024 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1025 
u_öt
 
°
;

1028 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1029 
°
 = 0;

1031 
°
 = 
pc
->
mtu
;

1034  
°
;

1035 
	}
}

1037 #i‡
PPPOE_SUPPORT


1039 
	$µpWrôeOvîEthî√t
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1041 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1042 
pbuf
 *
pb
;

1045 
s
 += 2;

1046 
n
 -= 2;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
µp€_hdæí
 + 
n
, 
PBUF_RAM
);

1049 if(!
pb
) {

1050 
	`LINK_STATS_INC
(
lök
.
memîr
);

1051 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1052  
PPPERR_ALLOC
;

1055 
	`pbuf_hódî
(
pb
, -
µp€_hdæí
);

1057 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1059 
	`SMEMCPY
(
pb
->
∑ylﬂd
, 
s
, 
n
);

1061 if(
	`µp€_xmô
(
pc
->
µp€_sc
, 
pb
Ë!
ERR_OK
) {

1062 
	`LINK_STATS_INC
(
lök
.
îr
);

1063  
PPPERR_DEVICE
;

1066 
	`LINK_STATS_INC
(
lök
.
xmô
);

1067  
PPPERR_NONE
;

1068 
	}
}

1077 
	$µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
)

1079 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1080 #i‡
PPPOS_SUPPORT


1081 
u_ch¨
 
c
;

1082 
u_öt
 
fcsOut
;

1083 
pbuf
 *
hódMB
, *
èûMB
;

1086 #i‡
PPPOE_SUPPORT


1087 if(
pc
->
ëhif
) {

1088  
	`µpWrôeOvîEthî√t
(
pd
, 
s
, 
n
);

1092 #i‡
PPPOS_SUPPORT


1093 
hódMB
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1094 i‡(
hódMB
 =
NULL
) {

1095 
	`LINK_STATS_INC
(
lök
.
memîr
);

1096 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1097  
PPPERR_ALLOC
;

1100 
èûMB
 = 
hódMB
;

1104 i‡((
	`sys_jiffõs
(Ë- 
pc
->
œ°XMô
Ë>
PPP_MAXIDLEFLAG
) {

1105 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1107 
pc
->
œ°XMô
 = 
	`sys_jiffõs
();

1109 
fcsOut
 = 
PPP_INITFCS
;

1111 
n
-- > 0) {

1112 
c
 = *
s
++;

1115 
fcsOut
 = 
	`PPP_FCS
(fcsOut, 
c
);

1118 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1122 
c
 = ~
fcsOut
 & 0xFF;

1123 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1124 
c
 = (~
fcsOut
 >> 8) & 0xFF;

1125 
èûMB
 = 
	`µpAµíd
(
c
,ÅaûMB, &
pc
->
outACCM
);

1126 
èûMB
 = 
	`µpAµíd
(
PPP_FLAG
,ÅaûMB, 
NULL
);

1130 i‡(!
èûMB
) {

1131 
	`PPPDEBUG
((
LOG_WARNING
,

1132 "µpWrôe[%d]: AŒo¯î∏- dr›pögÖbu‡Àn=%d\n", 
pd
, 
hódMB
->
Àn
));

1134 
	`pbuf_‰ì
(
hódMB
);

1135 
	`LINK_STATS_INC
(
lök
.
memîr
);

1136 
	`LINK_STATS_INC
(
lök
.
¥Ÿîr
);

1137  
PPPERR_ALLOC
;

1140 
	`PPPDEBUG
((
LOG_INFO
, "µpWrôe[%d]:Üí=%d\n", 
pd
, 
hódMB
->
Àn
));

1142 
	`nPut
(
pc
, 
hódMB
);

1145  
PPPERR_NONE
;

1146 
	}
}

1153 
	$µp_£nd_c⁄fig
–
unô
, 
mtu
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1155 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1156 
i
;

1158 
pc
->
mtu
 = mtu;

1159 
pc
->
pcomp
 =Öcomp;

1160 
pc
->
accomp
 =áccomp;

1163 
i
 = 0; i < 32/8; i++) {

1164 
pc
->
outACCM
[
i
] = (
u_ch¨
)((
asyncm≠
 >> (8 * i)) & 0xFF);

1166 
	`PPPDEBUG
((
LOG_INFO
, "ppp_send_config[%d]: outACCM=%X %X %X %X\n",

1167 
unô
,

1168 
pc
->
outACCM
[0],Öc->outACCM[1],Öc->outACCM[2],Öc->outACCM[3]));

1169 
	}
}

1176 
	$µp_£t_xaccm
(
unô
, 
ext_accm
 *
accm
)

1178 
	`SMEMCPY
(
µpC⁄åﬁ
[
unô
].
outACCM
, 
accm
, (
ext_accm
));

1179 
	`PPPDEBUG
((
LOG_INFO
, "ppp_set_xaccm[%d]: outACCM=%X %X %X %X\n",

1180 
unô
,

1181 
µpC⁄åﬁ
[
unô
].
outACCM
[0],

1182 
µpC⁄åﬁ
[
unô
].
outACCM
[1],

1183 
µpC⁄åﬁ
[
unô
].
outACCM
[2],

1184 
µpC⁄åﬁ
[
unô
].
outACCM
[3]));

1185 
	}
}

1193 
	$µp_ªcv_c⁄fig
–
unô
, 
mru
, 
u32_t
 
asyncm≠
, 
pcomp
, 
accomp
)

1195 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
unô
];

1196 
i
;

1198 
	`LWIP_UNUSED_ARG
(
accomp
);

1199 
	`LWIP_UNUSED_ARG
(
pcomp
);

1200 
	`LWIP_UNUSED_ARG
(
mru
);

1203 
i
 = 0; i < 32 / 8; i++) {

1204 
pc
->
öACCM
[
i
] = (
u_ch¨
)(
asyncm≠
 >> (i * 8));

1206 
	`PPPDEBUG
((
LOG_INFO
, "ppp_recv_config[%d]: inACCM=%X %X %X %X\n",

1207 
unô
,

1208 
pc
->
öACCM
[0],Öc->inACCM[1],Öc->inACCM[2],Öc->inACCM[3]));

1209 
	}
}

1219 
	$c˝_ã°
–
unô
, 
›t_Àn
, 
f‹_å™smô
, 
u_ch¨
 *
›t_±r
)

1222 
	}
}

1228 
	$c˝_Êags_£t
(
unô
, 
is›í
, 
isup
)

1231 
	}
}

1239 
	$c˝_Áèl_îr‹
(
unô
)

1243 
	}
}

1250 
	$gë_idÀ_time
(
u
, 
µp_idÀ
 *
ù
)

1253 
	`LWIP_UNUSED_ARG
(
u
);

1254 
	`LWIP_UNUSED_ARG
(
ù
);

1257 
	}
}

1268 
u32_t


1269 
	$GëMask
(
u32_t
 
addr
)

1271 
u32_t
 
mask
, 
nmask
;

1273 
	`ht⁄l
(
addr
);

1274 i‡(
	`IN_CLASSA
(
addr
)) {

1275 
nmask
 = 
IN_CLASSA_NET
;

1276 } i‡(
	`IN_CLASSB
(
addr
)) {

1277 
nmask
 = 
IN_CLASSB_NET
;

1279 
nmask
 = 
IN_CLASSC_NET
;

1283 
mask
 = 
sub√tMask
 | 
	`ht⁄l
(
nmask
);

1290  
mask
;

1291 
	}
}

1297 
	$sifvjcomp
–
pd
, 
vjcomp
, 
cidcomp
, 
maxcid
)

1299 #i‡
PPPOS_SUPPORT
 && 
VJ_SUPPORT


1300 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1302 
pc
->
vjE«bÀd
 = 
vjcomp
;

1303 
pc
->
vjComp
.
com¥essSlŸ
 = 
cidcomp
;

1304 
pc
->
vjComp
.
maxSlŸIndex
 = 
maxcid
;

1305 
	`PPPDEBUG
((
LOG_INFO
, "sifvjcomp: VJ compressÉnable=%d slot=%d max slot=%d\n",

1306 
vjcomp
, 
cidcomp
, 
maxcid
));

1310 
	}
}

1315 
îr_t


1316 
	$µpifNëifInô
(
√tif
 *netif)

1318 
√tif
->
«me
[0] = 'p';

1319 
√tif
->
«me
[1] = 'p';

1320 
√tif
->
ouçut
 = 
µpifOuçut
;

1321 
√tif
->
mtu
 = 
	`µpMTU
((Íëif->
°©e
);

1322  
ERR_OK
;

1323 
	}
}

1330 
	$sifup
(
pd
)

1332 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1333 
°
 = 1;

1335 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1336 
°
 = 0;

1337 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1339 
	`√tif_ªmove
(&
pc
->
√tif
);

1340 i‡(
	`√tif_add
(&
pc
->
√tif
, &pc->
addrs
.
our_ùaddr
, &pc->addrs.
√tmask
, &pc->addrs.
his_ùaddr
, (*)
pd
, 
µpifNëifInô
, 
ù_öput
)) {

1341 
	`√tif_£t_up
(&
pc
->
√tif
);

1342 #i‡
LWIP_DHCP


1344 
pc
->
√tif
.
dh˝
 = (dh˝ *Ë&pc->
addrs
;

1346 
pc
->
if_up
 = 1;

1347 
pc
->
îrCode
 = 
PPPERR_NONE
;

1349 
	`PPPDEBUG
((
LOG_DEBUG
, "sifup: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1350 if(
pc
->
lökSètusCB
) {

1351 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
, &pc->
addrs
);

1354 
°
 = 0;

1355 
	`PPPDEBUG
((
LOG_ERR
, "sifup[%d]:Çëif_add faûed\n", 
pd
));

1359  
°
;

1360 
	}
}

1366 
	$si‚pmode
(
u
, 
¥Ÿo
, 
NPmode
 
mode
)

1368 
	`LWIP_UNUSED_ARG
(
u
);

1369 
	`LWIP_UNUSED_ARG
(
¥Ÿo
);

1370 
	`LWIP_UNUSED_ARG
(
mode
);

1372 
	}
}

1378 
	$sifdown
(
pd
)

1380 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1381 
°
 = 1;

1383 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1384 
°
 = 0;

1385 
	`PPPDEBUG
((
LOG_WARNING
, "sifdown[%d]: badÖ¨ms\n", 
pd
));

1387 
pc
->
if_up
 = 0;

1388 
	`√tif_ªmove
(&
pc
->
√tif
);

1389 
	`PPPDEBUG
((
LOG_DEBUG
, "sifdown: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1390 if(
pc
->
lökSètusCB
) {

1391 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
, 
PPPERR_CONNECT
, 
NULL
);

1394  
°
;

1395 
	}
}

1407 
	$siÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
, u32_à
m
, u32_à
ns1
, u32_à
ns2
)

1409 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1410 
°
 = 1;

1412 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1413 
°
 = 0;

1414 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1416 
	`SMEMCPY
(&
pc
->
addrs
.
our_ùaddr
, &
o
, (o));

1417 
	`SMEMCPY
(&
pc
->
addrs
.
his_ùaddr
, &
h
, (h));

1418 
	`SMEMCPY
(&
pc
->
addrs
.
√tmask
, &
m
, (m));

1419 
	`SMEMCPY
(&
pc
->
addrs
.
dns1
, &
ns1
, (ns1));

1420 
	`SMEMCPY
(&
pc
->
addrs
.
dns2
, &
ns2
, (ns2));

1422  
°
;

1423 
	}
}

1433 
	$ciÁddr
–
pd
, 
u32_t
 
o
, u32_à
h
)

1435 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1436 
°
 = 1;

1438 
	`LWIP_UNUSED_ARG
(
o
);

1439 
	`LWIP_UNUSED_ARG
(
h
);

1440 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1441 
°
 = 0;

1442 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1444 
	`IP4_ADDR
(&
pc
->
addrs
.
our_ùaddr
, 0,0,0,0);

1445 
	`IP4_ADDR
(&
pc
->
addrs
.
his_ùaddr
, 0,0,0,0);

1446 
	`IP4_ADDR
(&
pc
->
addrs
.
√tmask
, 255,255,255,0);

1447 
	`IP4_ADDR
(&
pc
->
addrs
.
dns1
, 0,0,0,0);

1448 
	`IP4_ADDR
(&
pc
->
addrs
.
dns2
, 0,0,0,0);

1450  
°
;

1451 
	}
}

1457 
	$sifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1459 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1460 
°
 = 1;

1462 
	`LWIP_UNUSED_ARG
(
l
);

1463 
	`LWIP_UNUSED_ARG
(
g
);

1465 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1466 
°
 = 0;

1467 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1469 
	`√tif_£t_deÁu…
(&
pc
->
√tif
);

1474  
°
;

1475 
	}
}

1481 
	$cifdeÁu…rouã
(
pd
, 
u32_t
 
l
, u32_à
g
)

1483 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1484 
°
 = 1;

1486 
	`LWIP_UNUSED_ARG
(
l
);

1487 
	`LWIP_UNUSED_ARG
(
g
);

1489 i‡(
pd
 < 0 ||Öd >
NUM_PPP
 || !
pc
->
›íFœg
) {

1490 
°
 = 0;

1491 
	`PPPDEBUG
((
LOG_WARNING
, "sifup[%d]: badÖ¨ms\n", 
pd
));

1493 
	`√tif_£t_deÁu…
(
NULL
);

1496  
°
;

1497 
	}
}

1503 #i‡
PPPOS_SUPPORT


1507 
	$µpMaö
(*
¨g
)

1509 
pd
 = ()
¨g
;

1510 
pbuf
 *
p
;

1511 
PPPC⁄åﬁ
* 
pc
;

1512 
c
;

1514 
pc
 = &
µpC⁄åﬁ
[
pd
];

1516 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
PPP_MRU
+
PPP_HDRLEN
, 
PBUF_RAM
);

1517 i‡(!
p
) {

1518 
	`LWIP_ASSERT
("∞!NULL", 
p
);

1519 
pc
->
îrCode
 = 
PPPERR_ALLOC
;

1520 
out
;

1526 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1527 
	`t˝ù_ˇŒback
(
µpSèπCB
, 
¨g
);

1528 
l˝_pha£
[
pd
] !
PHASE_DEAD
) {

1529 i‡(
pc
->
kûl_lök
) {

1530 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d kûl_lök ->ÖµSt›CB\n", 
pd
));

1531 
pc
->
îrCode
 = 
PPPERR_USER
;

1533 
	`t˝ù_ˇŒback
(
µpSt›CB
, 
¨g
);

1534 
pc
->
kûl_lök
 = 0;

1535 } i‡(
pc
->
sig_hup
) {

1536 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sig_hu∞->ÖµHupCB\n", 
pd
));

1537 
pc
->
sig_hup
 = 0;

1538 
	`t˝ù_ˇŒback
(
µpHupCB
, 
¨g
);

1540 
c
 = 
	`sio_ªad
(
pc
->
fd
, 
p
->
∑ylﬂd
,Ö->
Àn
);

1541 if(
c
 > 0) {

1542 
	`µpInProc
(
pd
, 
p
->
∑ylﬂd
, 
c
);

1544 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d sio_ªadÜí=%dÑëu∫ed %d\n", 
pd
, 
p
->
Àn
, 
c
));

1545 
	`sys_m¶ìp
(1);

1549 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: PHASE_DEAD\n", 
pd
));

1550 
	`µpDr›
(
pc
);

1551 
	`pbuf_‰ì
(
p
);

1553 
out
:

1554 
	`PPPDEBUG
((
LOG_DEBUG
, "µpMaö: unô %d:ÜökSètusCB=%lxÉºCode=%d\n", 
pd
, 
pc
->
lökSètusCB
,Öc->
îrCode
));

1555 if(
pc
->
lökSètusCB
) {

1556 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1559 
pc
->
›íFœg
 = 0;

1560 
	}
}

1563 #i‡
PPPOE_SUPPORT


1566 
	$µpOvîEthî√tInôFaûed
(* 
¨g
)

1568 
PPPC⁄åﬁ
* 
pc
;

1569 
pd
 = ()
¨g
;

1571 
	`µpHupCB
(
¨g
);

1572 
	`µpSt›CB
(
¨g
);

1574 
pc
 = &
µpC⁄åﬁ
[
pd
];

1575 
	`µp€_de°roy
(&
pc
->
√tif
);

1576 
pc
->
›íFœg
 = 0;

1578 if(
pc
->
lökSètusCB
) {

1579 
pc
->
	`lökSètusCB
’c->
lökSètusCtx
,Öc->
îrCode
 ?Öc->îrCodê: 
PPPERR_PROTOCOL
, 
NULL
);

1581 
	}
}

1584 
	$µpOvîEthî√tLökSètusCB
(
pd
, 
up
)

1586 if(
up
) {

1587 
	`PPPDEBUG
((
LOG_INFO
, "µpMaö: unô %d: C⁄√˘ög\n", 
pd
));

1588 
	`t˝ù_ˇŒback
(
µpSèπCB
, (*)
pd
);

1590 
PPPC⁄åﬁ
* 
pc
;

1591 
pc
 = &
µpC⁄åﬁ
[
pd
];

1592 
	`t˝ù_ˇŒback
(
µpOvîEthî√tInôFaûed
, (*)
pd
);

1594 
	}
}

1597 
pbuf
 *

1598 
	$µpSögÀBuf
(
pbuf
 *
p
)

1600 
pbuf
 *
q
, *
b
;

1601 
u_ch¨
 *
∂
;

1603 if(
p
->
tŸ_Àn
 =p->
Àn
) {

1604  
p
;

1607 
q
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

1608 if(!
q
) {

1609 
	`PPPDEBUG
((
LOG_ERR
,

1610 "µpSögÀBuf: u«bÀÅÿÆlo¯√w bu‡(%d)\n", 
p
->
tŸ_Àn
));

1611  
p
;

1614 
b
 = 
p
, 
∂
 = 
q
->
∑ylﬂd
; b !
NULL
; b = b->
√xt
) {

1615 
	`MEMCPY
(
∂
, 
b
->
∑ylﬂd
, b->
Àn
);

1616 
∂
 +
b
->
Àn
;

1619 
	`pbuf_‰ì
(
p
);

1621  
q
;

1622 
	}
}

1624 
	sµpI≈utHódî
 {

1625 
	munô
;

1626 
u16_t
 
	m¥Ÿo
;

1634 
	$µpI≈ut
(*
¨g
)

1636 
pbuf
 *
nb
 = (pbu‡*)
¨g
;

1637 
u16_t
 
¥Ÿocﬁ
;

1638 
pd
;

1640 
pd
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
unô
;

1641 
¥Ÿocﬁ
 = ((
µpI≈utHódî
 *)
nb
->
∑ylﬂd
)->
¥Ÿo
;

1643 if(
	`pbuf_hódî
(
nb
, -()(
µpI≈utHódî
))) {

1644 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1645 
dr›
;

1648 
	`LINK_STATS_INC
(
lök
.
ªcv
);

1655 if((
l˝_pha£
[
pd
] <
PHASE_AUTHENTICATE
Ë&& (
¥Ÿocﬁ
 !
PPP_LCP
)) {

1656 if(!((
¥Ÿocﬁ
 =
PPP_LQR
Ë|| (¥Ÿocﬁ =
PPP_PAP
Ë|| (¥Ÿocﬁ =
PPP_CHAP
)) ||

1657 (
l˝_pha£
[
pd
] !
PHASE_AUTHENTICATE
)) {

1658 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut: disˇrdögÖrŸÿ0x%04X i¿pha£ %d\n", 
¥Ÿocﬁ
, 
l˝_pha£
[
pd
]));

1659 
dr›
;

1663 
¥Ÿocﬁ
) {

1664 
PPP_VJC_COMP
:

1665 #i‡
VJ_SUPPORT


1666 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_com∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1671 i‡((
	`vj_uncom¥ess_t˝
(&
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&& (µpC⁄åﬁ[pd].
√tif
.
öput
)) {

1672 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1676 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ com¥es£d\n", 
pd
));

1679 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: dr› VJ Com∞ö %d:%s\n", 
pd
, 
nb
->
Àn
,Çb->
∑ylﬂd
));

1683 
PPP_VJC_UNCOMP
:

1684 #i‡
VJ_SUPPORT


1685 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: vj_u¿öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1690 i‡((
	`vj_uncom¥ess_uncomp
(
nb
, &
µpC⁄åﬁ
[
pd
].
vjComp
Ë>0Ë&&ÖµC⁄åﬁ[pd].
√tif
.
öput
) {

1691 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1695 
	`PPPDEBUG
((
LOG_WARNING
, "µpI≈ut[%d]: Dr›pög VJ uncom¥es£d\n", 
pd
));

1698 
	`PPPDEBUG
((
LOG_INFO
,

1700 
pd
, 
nb
->
Àn
, 
	`LWIP_MIN
“b->À¿* 2, 40),Çb->
∑ylﬂd
));

1704 
PPP_IP
:

1705 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: i∞öÖbu‡Àn=%d\n", 
pd
, 
nb
->
Àn
));

1706 i‡(
µpC⁄åﬁ
[
pd
].
√tif
.
öput
) {

1707 
µpC⁄åﬁ
[
pd
].
√tif
.
	`öput
(
nb
, &pppControl[pd].netif);

1713 
¥Ÿít
 *
¥Ÿp
;

1714 
i
;

1719 
i
 = 0; (
¥Ÿp
 = 
µp_¥Ÿocﬁs
[i]Ë!
NULL
; ++i) {

1720 i‡(
¥Ÿp
->
¥Ÿocﬁ
 =¥Ÿocﬁ &&ÖrŸp->
íabÀd_Êag
) {

1721 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]: %†Àn=%d\n", 
pd
, 
¥Ÿp
->
«me
, 
nb
->
Àn
));

1722 
nb
 = 
	`µpSögÀBuf
(nb);

1723 (*
¥Ÿp
->
öput
)(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1724 
out
;

1729 
	`PPPDEBUG
((
LOG_INFO
, "µpI≈ut[%d]:Ñeje˘ög unsuµ‹ãdÖrŸÿ0x%04XÜí=%d\n", 
pd
, 
¥Ÿocﬁ
, 
nb
->
Àn
));

1730 i‡(
	`pbuf_hódî
(
nb
, (
¥Ÿocﬁ
))) {

1731 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

1732 
dr›
;

1734 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1735 
¥Ÿocﬁ
 = 
	`ht⁄s
(protocol);

1736 
	`SMEMCPY
(
nb
->
∑ylﬂd
, &
¥Ÿocﬁ
, (protocol));

1738 
	`l˝_•rŸªj
(
pd
, 
nb
->
∑ylﬂd
,Çb->
Àn
);

1743 
dr›
:

1744 
	`LINK_STATS_INC
(
lök
.
dr›
);

1746 
out
:

1747 
	`pbuf_‰ì
(
nb
);

1749 
	}
}

1751 #i‡
PPPOS_SUPPORT


1756 
	$µpDr›
(
PPPC⁄åﬁ
 *
pc
)

1758 i‡(
pc
->
öHód
 !
NULL
) {

1760 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›: %d:%.*H\n", 
pc
->
öHód
->
Àn
, 
	`mö
(60,Öc->öHód->À¿* 2),Öc->öHód->
∑ylﬂd
));

1762 
	`PPPDEBUG
((
LOG_INFO
, "µpDr›:Öbu‡Àn=%d\n", 
pc
->
öHód
->
Àn
));

1763 i‡(
pc
->
öTaû
 && (pc->öTaû !pc->
öHód
)) {

1764 
	`pbuf_‰ì
(
pc
->
öTaû
);

1766 
	`pbuf_‰ì
(
pc
->
öHód
);

1767 
pc
->
öHód
 = 
NULL
;

1768 
pc
->
öTaû
 = 
NULL
;

1770 #i‡
VJ_SUPPORT


1771 
	`vj_uncom¥ess_îr
(&
pc
->
vjComp
);

1774 
	`LINK_STATS_INC
(
lök
.
dr›
);

1775 
	}
}

1781 
	$µpInProc
(
pd
, 
u_ch¨
 *
s
, 
l
)

1783 
PPPC⁄åﬁ
 *
pc
 = &
µpC⁄åﬁ
[
pd
];

1784 
pbuf
 *
√xtNBuf
;

1785 
u_ch¨
 
curCh¨
;

1787 
	`PPPDEBUG
((
LOG_DEBUG
, "µpInProc[%d]: gŸ %d byãs\n", 
pd
, 
l
));

1788 
l
-- > 0) {

1789 
curCh¨
 = *
s
++;

1792 i‡(
	`ESCAPE_P
(
pc
->
öACCM
, 
curCh¨
)) {

1798 i‡(
curCh¨
 =
PPP_ESCAPE
) {

1799 
pc
->
öEsˇ≥d
 = 1;

1801 } i‡(
curCh¨
 =
PPP_FLAG
) {

1803 i‡(
pc
->
öSèã
 <
PDADDRESS
) {

1806 } i‡(
pc
->
öSèã
 < 
PDDATA
) {

1807 
	`PPPDEBUG
((
LOG_WARNING
,

1809 
pd
, 
pc
->
öSèã
));

1810 
	`LINK_STATS_INC
(
lök
.
À√º
);

1811 
	`µpDr›
(
pc
);

1813 } i‡(
pc
->
öFCS
 !
PPP_GOODFCS
) {

1814 
	`PPPDEBUG
((
LOG_INFO
,

1816 
pd
, 
pc
->
öFCS
,Öc->
öPrŸocﬁ
));

1817 
	`LINK_STATS_INC
(
lök
.
chkîr
);

1818 
	`µpDr›
(
pc
);

1822 if(
pc
->
öTaû
->
Àn
 >= 2) {

1823 
pc
->
öTaû
->
Àn
 -= 2;

1825 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1826 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1827 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1830 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1831 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1832 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1835 
	`pbuf_ªÆloc
(
pc
->
öHód
,Öc->öHód->
tŸ_Àn
 - 2);

1839 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pc
->
öHód
Ë!
ERR_OK
) {

1840 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1841 
	`pbuf_‰ì
(
pc
->
öHód
);

1842 
	`LINK_STATS_INC
(
lök
.
dr›
);

1844 
pc
->
öHód
 = 
NULL
;

1845 
pc
->
öTaû
 = 
NULL
;

1849 
pc
->
öFCS
 = 
PPP_INITFCS
;

1850 
pc
->
öSèã
 = 
PDADDRESS
;

1851 
pc
->
öEsˇ≥d
 = 0;

1855 
	`PPPDEBUG
((
LOG_WARNING
,

1856 "µpInProc[%d]: Dr›pög ACCM ch¨ <%d>\n", 
pd
, 
curCh¨
));

1861 i‡(
pc
->
öEsˇ≥d
) {

1862 
pc
->
öEsˇ≥d
 = 0;

1863 
curCh¨
 ^
PPP_TRANS
;

1867 
pc
->
öSèã
) {

1868 
PDIDLE
:

1871 i‡(
curCh¨
 !
PPP_ALLSTATIONS
) {

1876 
PDSTART
:

1878 
pc
->
öFCS
 = 
PPP_INITFCS
;

1881 
PDADDRESS
:

1882 i‡(
curCh¨
 =
PPP_ALLSTATIONS
) {

1883 
pc
->
öSèã
 = 
PDCONTROL
;

1888 
PDCONTROL
:

1890 i‡(
curCh¨
 =
PPP_UI
) {

1891 
pc
->
öSèã
 = 
PDPROTOCOL1
;

1896 
	`PPPDEBUG
((
LOG_WARNING
,

1897 "µpInProc[%d]: InvÆid c⁄åﬁ <%d>\n", 
pd
, 
curCh¨
));

1898 
pc
->
öSèã
 = 
PDSTART
;

1901 
PDPROTOCOL1
:

1904 i‡(
curCh¨
 & 1) {

1905 
pc
->
öPrŸocﬁ
 = 
curCh¨
;

1906 
pc
->
öSèã
 = 
PDDATA
;

1908 
pc
->
öPrŸocﬁ
 = (
u_öt
)
curCh¨
 << 8;

1909 
pc
->
öSèã
 = 
PDPROTOCOL2
;

1912 
PDPROTOCOL2
:

1913 
pc
->
öPrŸocﬁ
 |
curCh¨
;

1914 
pc
->
öSèã
 = 
PDDATA
;

1916 
PDDATA
:

1918 i‡(
pc
->
öTaû
 =
NULL
 ||Öc->öTaû->
Àn
 =
PBUF_POOL_BUFSIZE
) {

1919 if(
pc
->
öTaû
) {

1920 
pc
->
öTaû
->
tŸ_Àn
 =Öc->öTaû->
Àn
;

1921 i‡(
pc
->
öTaû
 !pc->
öHód
) {

1922 
	`pbuf_ˇt
(
pc
->
öHód
,Öc->
öTaû
);

1926 
√xtNBuf
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 0, 
PBUF_POOL
);

1927 i‡(
√xtNBuf
 =
NULL
) {

1931 
	`PPPDEBUG
((
LOG_ERR
, "µpInProc[%d]: NO FREE MBUFS!\n", 
pd
));

1932 
	`LINK_STATS_INC
(
lök
.
memîr
);

1933 
	`µpDr›
(
pc
);

1934 
pc
->
öSèã
 = 
PDSTART
;

1937 i‡(
pc
->
öHód
 =
NULL
) {

1938 
µpI≈utHódî
 *
pih
 = 
√xtNBuf
->
∑ylﬂd
;

1940 
pih
->
unô
 = 
pd
;

1941 
pih
->
¥Ÿo
 = 
pc
->
öPrŸocﬁ
;

1943 
√xtNBuf
->
Àn
 +(*
pih
);

1945 
pc
->
öHód
 = 
√xtNBuf
;

1947 
pc
->
öTaû
 = 
√xtNBuf
;

1950 ((
u_ch¨
*)
pc
->
öTaû
->
∑ylﬂd
)[pc->öTaû->
Àn
++] = 
curCh¨
;

1955 
pc
->
öFCS
 = 
	`PPP_FCS
’c->öFCS, 
curCh¨
);

1959 
	`avR™domize
();

1960 
	}
}

1963 #i‡
PPPOE_SUPPORT


1965 
	$µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
)

1967 
µpI≈utHódî
 *
pih
;

1968 
u16_t
 
öPrŸocﬁ
;

1970 if(
pb
->
Àn
 < (
öPrŸocﬁ
)) {

1971 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet:Åoo small forÖrotocol field\n"));

1972 
dr›
;

1975 
öPrŸocﬁ
 = (((
u8_t
 *)
pb
->
∑ylﬂd
)[0] << 8) | ((u8_t*)pb->payload)[1];

1978 i‡(
	`pbuf_hódî
(
pb
, (*
pih
Ë- (
öPrŸocﬁ
)) != 0) {

1979 
	`PPPDEBUG
((
LOG_ERR
, "pppInProcOverEthernet: couldÇotállocateÑoom for header\n"));

1980 
dr›
;

1983 
pih
 = 
pb
->
∑ylﬂd
;

1985 
pih
->
unô
 = 
pd
;

1986 
pih
->
¥Ÿo
 = 
öPrŸocﬁ
;

1989 if(
	`t˝ù_ˇŒback
(
µpI≈ut
, 
pb
Ë!
ERR_OK
) {

1990 
	`PPPDEBUG
((
LOG_ERR
, "µpInProcOvîEthî√t[%d]:Å˝ù_ˇŒback(ËÁûed, dr›pögÖackë\n", 
pd
));

1991 
dr›
;

1996 
dr›
:

1997 
	`LINK_STATS_INC
(
lök
.
dr›
);

1998 
	`pbuf_‰ì
(
pb
);

2000 
	}
}

	@net/lwip/netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/≠i.h
"

44 
	~"lwù/sockës.h
"

45 
	~"lwù/°©s.h
"

46 
	~"lwù/mem.h
"

47 
	~"lwù/t˝ù.h
"

48 
	~"lwù/√tif.h
"

96 
	#TIMEOUT
(
f
, 
a
, 
t
Ë
	`sys_u¡imeout
((f), (a)), 
	`sys_timeout
(—)*1000, (f), (a))

	)

97 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

100 #i‚de‡
__u_ch¨_deföed


103 
	tu_l⁄g
;

104 
	tu_öt
;

105 
	tu_sh‹t
;

106 
	tu_ch¨
;

118 
	#PPP_HDRLEN
 4

	)

119 
	#PPP_FCSLEN
 2

	)

125 
	#PPP_ALLSTATIONS
 0xf‡

	)

126 
	#PPP_UI
 0x03

	)

127 
	#PPP_FLAG
 0x7ê

	)

128 
	#PPP_ESCAPE
 0x7d

	)

129 
	#PPP_TRANS
 0x20

	)

134 
	#PPP_IP
 0x21

	)

135 
	#PPP_AT
 0x29

	)

136 
	#PPP_VJC_COMP
 0x2d

	)

137 
	#PPP_VJC_UNCOMP
 0x2‡

	)

138 
	#PPP_COMP
 0xfd

	)

139 
	#PPP_IPCP
 0x8021

	)

140 
	#PPP_ATCP
 0x8029

	)

141 
	#PPP_CCP
 0x80fd

	)

142 
	#PPP_LCP
 0xc021

	)

143 
	#PPP_PAP
 0xc023

	)

144 
	#PPP_LQR
 0xc025

	)

145 
	#PPP_CHAP
 0xc223

	)

146 
	#PPP_CBCP
 0xc029

	)

151 
	#PPP_INITFCS
 0xfff‡

	)

152 
	#PPP_GOODFCS
 0xf0b8

	)

153 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

158 
u_ch¨
 
	text_accm
[32];

163 
	eNPmode
 {

164 
	mNPMODE_PASS
,

165 
	mNPMODE_DROP
,

166 
	mNPMODE_ERROR
,

167 
	mNPMODE_QUEUE


176 
	#GETCHAR
(
c
, 
˝
) { \

177 (
c
Ë*(
˝
)++; \

178 }

	)

179 
	#PUTCHAR
(
c
, 
˝
) { \

180 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

181 }

	)

184 
	#GETSHORT
(
s
, 
˝
) { \

185 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

186 (
s
Ë|*(
˝
); (cp)++; \

187 }

	)

188 
	#PUTSHORT
(
s
, 
˝
) { \

189 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

190 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

191 }

	)

193 
	#GETLONG
(
l
, 
˝
) { \

194 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

195 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

196 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; \

198 }

	)

199 
	#PUTLONG
(
l
, 
˝
) { \

200 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

201 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

203 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

204 }

	)

207 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

208 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

210 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

211 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

212 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

214 #i‡
PPP_DEBUG


215 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`µp_åa˚
(
LOG_INFO
, "RemŸêmesßge: %s\n", m); }

	)

217 
	#PRINTMSG
(
m
, 
l
)

	)

223 
	#MAKEHEADER
(
p
, 
t
) { \

224 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

225 
	`PUTCHAR
(
PPP_UI
, 
p
); \

226 
	`PUTSHORT
(
t
, 
p
); }

	)

233 
	#PPPERR_NONE
 0

	)

234 
	#PPPERR_PARAM
 -1

	)

235 
	#PPPERR_OPEN
 -2

	)

236 
	#PPPERR_DEVICE
 -3

	)

237 
	#PPPERR_ALLOC
 -4

	)

238 
	#PPPERR_USER
 -5

	)

239 
	#PPPERR_CONNECT
 -6

	)

240 
	#PPPERR_AUTHFAIL
 -7

	)

241 
	#PPPERR_PROTOCOL
 -8

	)

250 
	#PPPCTLG_UPSTATUS
 100

	)

251 
	#PPPCTLS_ERRCODE
 101

	)

252 
	#PPPCTLG_ERRCODE
 102

	)

253 
	#PPPCTLG_FD
 103

	)

263 
	s¥Ÿít
 {

264 
u_sh‹t
 
	m¥Ÿocﬁ
;

266 (*
	möô
Ë(
	munô
);

268 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

270 (*
	m¥Ÿªj
Ë(
	munô
);

272 (*
	mlowîup
Ë(
	munô
);

274 (*
	mlowîdown
Ë(
	munô
);

276 (*
	m›í
Ë(
	munô
);

278 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

281 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

282 (*
	m¥öãr
) (*, *, ...),

283 *
	m¨g
);

285 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

287 
	míabÀd_Êag
;

288 *
	m«me
;

291 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

293 (*
	mdem™d_c⁄f
Ë(
	munô
);

295 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

303 
	sµp_idÀ
 {

304 
u_sh‹t
 
	mxmô_idÀ
;

305 
u_sh‹t
 
	mªcv_idÀ
;

308 
	sµp_£âögs
 {

310 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

311 
u_öt
 
	mauth_ªquúed
 : 1;

312 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

313 
u_öt
 
	mªfu£_∑p
 : 1;

314 
u_öt
 
	mªfu£_ch≠
 : 1;

315 
u_öt
 
	mu£ho°«me
 : 1;

316 
u_öt
 
	mu£≥îdns
 : 1;

318 
u_sh‹t
 
	midÀ_time_limô
;

319 
	mmaxc⁄√˘
;

321 
	mu£r
 [
MAXNAMELEN
 + 1];

322 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

323 
	mour_«me
 [
MAXNAMELEN
 + 1];

324 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

327 
	sµp_addrs
 {

328 
ù_addr
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

336 
u_ch¨
 *
ouçackë_buf
[
NUM_PPP
];

338 
µp_£âögs
Öpp_settings;

340 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

348 
îr_t
 
µpInô
();

369 
	eµpAuthTy≥
 {

370 
	mPPPAUTHTYPE_NONE
,

371 
	mPPPAUTHTYPE_ANY
,

372 
	mPPPAUTHTYPE_PAP
,

373 
	mPPPAUTHTYPE_CHAP


376 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

385 
µpOvîSîülO≥n
(
sio_fd_t
 
fd
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

390 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
, (*
lökSètusCB
)(*
˘x
, 
îrCode
, *
¨g
), *
lökSètusCtx
);

393 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

400 
	`µpClo£
(
pd
);

405 
	`µpSigHUP
(
pd
);

411 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

416 
u_öt
 
	`µpMTU
(
pd
);

422 
	`µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

424 
	`µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

426 
pbuf
 *
	`µpSögÀBuf
(pbu‡*
p
);

428 
	`µpLökTîmö©ed
(
pd
);

430 
	`µpLökDown
(
pd
);

432 
	`µpMaöWakeup
(
pd
);

435 
	`µp_£nd_c⁄fig
 (, , 
u32_t
, , );

437 
	`µp_£t_xaccm
 (, 
ext_accm
 *);

439 
	`µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

441 
	`gë_idÀ_time
 (, 
µp_idÀ
 *);

444 
	`sifvjcomp
 (, , , );

446 
	`sifup
 ();

448 
	`si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

450 
	`sifdown
 ();

452 
	`siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

454 
	`ciÁddr
 (, 
u32_t
, u32_t);

456 
	`sifdeÁu…rouã
 (, 
u32_t
, u32_t);

458 
	`cifdeÁu…rouã
 (, 
u32_t
, u32_t);

461 
u32_t
 
	`GëMask
 (u32_t);

	@net/lwip/netif/ppp/ppp_oe.c

71 
	~"lwù/›t.h
"

73 #i‡
PPPOE_SUPPORT


75 
	~"µp.h
"

76 
	~"µpdebug.h
"

78 
	~"lwù/sys.h
"

80 
	~"√tif/µp_€.h
"

81 
	~"√tif/ëh¨p.h
"

83 
	~<°rög.h
>

84 
	~<°dio.h
>

87 #i‚de‡
_SYS_QUEUE_H_


88 
	#_SYS_QUEUE_H_


	)

104 
	#LIST_HEAD
(
«me
, 
ty≥
) \

105 
	s«me
 { \

106 
ty≥
 *
lh_fú°
; \

107 }

	)

109 
	#LIST_HEAD_INITIALIZER
(
hód
) \

110 { 
NULL
 }

	)

112 
	#LIST_ENTRY
(
ty≥
) \

114 
ty≥
 *
À_√xt
; \

115 
ty≥
 **
À_¥ev
; \

116 }

	)

122 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

124 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

126 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

127 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

128 (
v¨
); \

129 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

131 
	#LIST_INIT
(
hód
) do { \

132 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

133 } 0)

	)

135 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

136 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
) \

137 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

138 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

139 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

140 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

141 } 0)

	)

143 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

144 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

145 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

146 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

147 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

148 } 0)

	)

150 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

151 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

152 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

153 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

154 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

155 } 0)

	)

157 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

159 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

160 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

161 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

162 (
ñm
)->
fõld
.
À_¥ev
; \

163 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

164 } 0)

	)

170 
	#PPPOE_ADD_16
(
PTR
, 
VAL
) \

171 *(
PTR
)++ = (
VAL
) / 256; \

172 *(
PTR
)++ = (
VAL
Ë% 256

	)

175 
	#PPPOE_ADD_HEADER
(
PTR
, 
CODE
, 
SESS
, 
LEN
) \

176 *(
PTR
)++ = 
PPPOE_VERTYPE
; \

177 *(
PTR
)++ = (
CODE
); \

178 
	`PPPOE_ADD_16
(
PTR
, 
SESS
); \

179 
	`PPPOE_ADD_16
(
PTR
, 
LEN
)

	)

181 
	#PPPOE_DISC_TIMEOUT
 (5*1000Ë

	)

182 
	#PPPOE_SLOW_RETRY
 (60*1000Ë

	)

183 
	#PPPOE_DISC_MAXPADI
 4

	)

184 
	#PPPOE_DISC_MAXPADR
 2

	)

186 #ifde‡
PPPOE_SERVER


188 
	#IFF_PASSIVE
 
IFF_LINK0


	)

191 
	sµp€_so·c
 {

192 
LIST_ENTRY
(
µp€_so·c
Ë
	msc_li°
;

193 
√tif
 *
	msc_ëhif
;

194 
	msc_pd
;

195 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

197 
	msc_°©e
;

198 
ëh_addr
 
	msc_de°
;

199 
u16_t
 
	msc_£ssi⁄
;

201 *
	msc_£rvi˚_«me
;

202 *
	msc_c⁄˚¡øt‹_«me
;

203 
u8_t
 *
	msc_ac_cookõ
;

204 
size_t
 
	msc_ac_cookõ_Àn
;

205 #ifde‡
PPPOE_SERVER


206 
u8_t
 *
	msc_hunique
;

207 
size_t
 
	msc_hunique_Àn
;

209 
	msc_∑di_ªåõd
;

210 
	msc_∑dr_ªåõd
;

214 
µp€_di•©ch_disc_pkt
(
√tif
 *, 
pbuf
 *);

217 
µp€_do_disc⁄√˘
(
µp€_so·c
 *);

218 
µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *);

219 
µp€_˛ór_so·c
(
µp€_so·c
 *, const *);

222 
µp€_timeout
(*);

225 
îr_t
 
µp€_£nd_∑di
(
µp€_so·c
 *);

226 
îr_t
 
µp€_£nd_∑dr
(
µp€_so·c
 *);

227 #ifde‡
PPPOE_SERVER


228 
îr_t
 
µp€_£nd_∑do
(
µp€_so·c
 *);

229 
îr_t
 
µp€_£nd_∑ds
(
µp€_so·c
 *);

231 
îr_t
 
µp€_£nd_∑dt
(
√tif
 *, 
u_öt
, c⁄° 
u8_t
 *);

234 
µp€_so·c
 * 
µp€_föd_so·c_by_£ssi⁄
(
u_öt
, 
√tif
 *);

235 
µp€_so·c
 * 
µp€_föd_so·c_by_hunique
(
u8_t
 *, 
size_t
, 
√tif
 *);

237 
	$LIST_HEAD
(
µp€_so·c_hód
, 
µp€_so·c
Ë
µp€_so·c_li°
;

239 
µp€_hdæí
;

242 
	$µp€_öô
()

244 
µp€_hdæí
 = (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
;

245 
	`LIST_INIT
(&
µp€_so·c_li°
);

246 
	}
}

248 
îr_t


249 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
)

251 
µp€_so·c
 *
sc
;

253 
sc
 = 
	`mem_mÆloc
((
µp€_so·c
));

254 if(!
sc
) {

255 *
s˝å
 = 
NULL
;

256  
ERR_MEM
;

258 
	`mem£t
(
sc
, 0, (
µp€_so·c
));

261 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

263 
sc
->
sc_pd
 = 
pd
;

264 
sc
->
sc_lökSètusCB
 = 
lökSètusCB
;

265 
sc
->
sc_ëhif
 = 
ëhif
;

267 
	`LIST_INSERT_HEAD
(&
µp€_so·c_li°
, 
sc
, 
sc_li°
);

269 *
s˝å
 = 
sc
;

271  
ERR_OK
;

272 
	}
}

274 
îr_t


275 
	$µp€_de°roy
(
√tif
 *
iÂ
)

277 
µp€_so·c
 * 
sc
;

279 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

280 i‡(
sc
->
sc_ëhif
 =
iÂ
) {

285 if(!(
sc
 && (sc->
sc_ëhif
 =
iÂ
))) {

286  
ERR_IF
;

289 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

290 
	`LIST_REMOVE
(
sc
, 
sc_li°
);

292 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
) {

293 
	`mem_‰ì
(
sc
->
sc_c⁄˚¡øt‹_«me
);

295 i‡(
sc
->
sc_£rvi˚_«me
) {

296 
	`mem_‰ì
(
sc
->
sc_£rvi˚_«me
);

298 i‡(
sc
->
sc_ac_cookõ
) {

299 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

301 
	`mem_‰ì
(
sc
);

303  
ERR_OK
;

304 
	}
}

312 
µp€_so·c
 *

313 
	$µp€_föd_so·c_by_£ssi⁄
(
u_öt
 
£ssi⁄
, 
√tif
 *
rcvif
)

315 
µp€_so·c
 *
sc
;

317 i‡(
£ssi⁄
 == 0) {

318  
NULL
;

321 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

322 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION


323 && 
sc
->
sc_£ssi⁄
 =
£ssi⁄
) {

324 i‡(
sc
->
sc_ëhif
 =
rcvif
) {

325  
sc
;

327  
NULL
;

331  
NULL
;

332 
	}
}

336 
µp€_so·c
 *

337 
	$µp€_föd_so·c_by_hunique
(
u8_t
 *
tokí
, 
size_t
 
Àn
, 
√tif
 *
rcvif
)

339 
µp€_so·c
 *
sc
, *
t
;

341 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

342  
NULL
;

345 i‡(
Àn
 ! 
sc
) {

346  
NULL
;

348 
	`MEMCPY
(&
t
, 
tokí
, 
Àn
);

350 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

351 i‡(
sc
 =
t
) {

356 i‡(
sc
 =
NULL
) {

357 
	`PPPDEBUG
((
LOG_DEBUG
, "pppoe:álien host uniqueÅag,Ço session found\n"));

358  
NULL
;

362 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_PADI_SENT
 || sc->sc_°©ê>
PPPOE_STATE_SESSION
) {

363 
	`¥ötf
("%c%c%"
U16_F
": host uniqueÅag found, but it belongsÅoá connection in state %d\n",

364 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_°©e
);

365  
NULL
;

367 i‡(
sc
->
sc_ëhif
 !
rcvif
) {

368 
	`¥ötf
("%c%c%"
U16_F
": wrong interface,Çotáccepting host unique\n",

369 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

370  
NULL
;

372  
sc
;

373 
	}
}

376 
	$µp€_lök°©us_up
(*
¨g
)

378 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

380 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 1);

381 
	}
}

385 
	$µp€_di•©ch_disc_pkt
(
√tif
 *√tif, 
pbuf
 *
pb
)

387 
u16_t
 
èg
, 
Àn
;

388 
u16_t
 
£ssi⁄
, 
∂í
;

389 
µp€_so·c
 *
sc
;

390 c⁄° *
îr_msg
;

391 
dev«me
[6];

392 *
îr‹
;

393 
u8_t
 *
ac_cookõ
;

394 
size_t
 
ac_cookõ_Àn
;

395 #ifde‡
PPPOE_SERVER


396 
u8_t
 *
hunique
;

397 
size_t
 
hunique_Àn
;

399 
µp€hdr
 *
ph
;

400 
µp€èg
 
±
;

401 
off
 = 0, 
îr
, 
îr‹èg
;

402 
ëh_hdr
 *
ëhhdr
;

404 
pb
 = 
	`µpSögÀBuf
(pb);

406 
	`°r˝y
(
dev«me
, "pppoe");

407 
îr_msg
 = 
NULL
;

408 
îr‹èg
 = 0;

409 i‡(
pb
->
Àn
 < (*
ëhhdr
)) {

410 
d⁄e
;

412 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

413 
off
 +(*
ëhhdr
);

415 
ac_cookõ
 = 
NULL
;

416 
ac_cookõ_Àn
 = 0;

417 #ifde‡
PPPOE_SERVER


418 
hunique
 = 
NULL
;

419 
hunique_Àn
 = 0;

421 
£ssi⁄
 = 0;

422 i‡(
pb
->
Àn
 - 
off
 <
PPPOE_HEADERLEN
) {

423 
	`¥ötf
("µp€:ÖackëÅoÿsh‹t: %d\n", 
pb
->
Àn
);

424 
d⁄e
;

427 
ph
 = (
µp€hdr
 *Ë(
ëhhdr
 + 1);

428 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

429 
	`¥ötf
("µp€: unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

430 
d⁄e
;

432 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

433 
∂í
 = 
	`¡ohs
(
ph
->plen);

434 
off
 +(*
ph
);

436 i‡(
∂í
 + 
off
 > 
pb
->
Àn
) {

437 
	`¥ötf
("pppoe:Öacket content doesÇot fit: dataávailable = %d,Öacket size = %u\n",

438 
pb
->
Àn
 - 
off
, 
∂í
);

439 
d⁄e
;

441 if(
pb
->
tŸ_Àn
 =pb->
Àn
) {

442 
pb
->
tŸ_Àn
 =Öb->
Àn
 = 
off
 + 
∂í
;

444 
èg
 = 0;

445 
Àn
 = 0;

446 
sc
 = 
NULL
;

447 
off
 + (
±
Ë<
pb
->
Àn
) {

448 
	`MEMCPY
(&
±
, (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
, (pt));

449 
èg
 = 
	`¡ohs
(
±
.tag);

450 
Àn
 = 
	`¡ohs
(
±
.len);

451 i‡(
off
 + (
±
Ë+ 
Àn
 > 
pb
->len) {

452 
	`¥ötf
("µp€:Åag 0x%xÜí 0x%x i†toÿl⁄g\n", 
èg
, 
Àn
);

453 
d⁄e
;

455 
èg
) {

456 
PPPOE_TAG_EOL
:

457 
bªakbªak
;

458 
PPPOE_TAG_SNAME
:

460 
PPPOE_TAG_ACNAME
:

462 
PPPOE_TAG_HUNIQUE
:

463 i‡(
sc
 !
NULL
) {

466 #ifde‡
PPPOE_SERVER


467 
hunique
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

468 
hunique_Àn
 = 
Àn
;

470 
sc
 = 
	`µp€_föd_so·c_by_hunique
((
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
, 
√tif
);

471 i‡(
sc
 !
NULL
) {

472 
	`¢¥ötf
(
dev«me
, (dev«me), "%c%c%"
U16_F
, 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

475 
PPPOE_TAG_ACCOOKIE
:

476 i‡(
ac_cookõ
 =
NULL
) {

477 
ac_cookõ
 = (
u8_t
*)
pb
->
∑ylﬂd
 + 
off
 + (
±
);

478 
ac_cookõ_Àn
 = 
Àn
;

481 
PPPOE_TAG_SNAME_ERR
:

482 
îr_msg
 = "SERVICE NAME ERROR";

483 
îr‹èg
 = 1;

485 
PPPOE_TAG_ACSYS_ERR
:

486 
îr_msg
 = "AC SYSTEM ERROR";

487 
îr‹èg
 = 1;

489 
PPPOE_TAG_GENERIC_ERR
:

490 
îr_msg
 = "GENERIC ERROR";

491 
îr‹èg
 = 1;

494 i‡(
îr_msg
) {

495 
îr‹
 = 
NULL
;

496 i‡(
îr‹èg
 && 
Àn
) {

497 
îr‹
 = 
	`mem_mÆloc
(
Àn
+1);

498 i‡(
îr‹
) {

499 
	`°∫˝y
(
îr‹
, (*)
pb
->
∑ylﬂd
 + 
off
 + (
±
), 
Àn
);

500 
îr‹
[
Àn
-1] = '\0';

503 i‡(
îr‹
) {

504 
	`¥ötf
("%s: %s: %s\n", 
dev«me
, 
îr_msg
, 
îr‹
);

505 
	`mem_‰ì
(
îr‹
);

507 
	`¥ötf
("%s: %s\n", 
dev«me
, 
îr_msg
);

509 i‡(
îr‹èg
) {

510 
d⁄e
;

513 
off
 +(
±
Ë+ 
Àn
;

516 
bªakbªak
:;

517 
ph
->
code
) {

518 
PPPOE_CODE_PADI
:

519 #ifde‡
PPPOE_SERVER


524 i‡(
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

525 
d⁄e
;

527 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

528 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
)) {

531 i‡(!(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

534 i‡(
sc
->
sc_°©e
 =
PPPOE_STATE_INITIAL
) {

538 i‡(
sc
 =
NULL
) {

540 
d⁄e
;

542 i‡(
hunique
) {

543 i‡(
sc
->
sc_hunique
) {

544 
	`mem_‰ì
(
sc
->
sc_hunique
);

546 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

547 i‡(
sc
->
sc_hunique
 =
NULL
) {

548 
d⁄e
;

550 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

551 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

553 
	`MEMCPY
(&
sc
->
sc_de°
, 
eh
->
ëhî_sho°
,  sc->sc_dest);

554 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADO_SENT
;

555 
	`µp€_£nd_∑do
(
sc
);

558 
PPPOE_CODE_PADR
:

559 #ifde‡
PPPOE_SERVER


563 i‡(
ac_cookõ
 =
NULL
) {

565 
	`¥ötf
("pppoe:Ñeceived PADR butÇot includesác_cookie\n");

566 
d⁄e
;

568 
sc
 = 
	`µp€_föd_so·c_by_hunique
(
ac_cookõ
, 
ac_cookõ_Àn
, 
√tif
);

569 i‡(
sc
 =
NULL
) {

571 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

572 
	`¥ötf
("pppoe:Ñeceived PADR but couldÇot findÑequest for it\n");

574 
d⁄e
;

576 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

577 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADR\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

578 
d⁄e
;

580 i‡(
hunique
) {

581 i‡(
sc
->
sc_hunique
) {

582 
	`mem_‰ì
(
sc
->
sc_hunique
);

584 
sc
->
sc_hunique
 = 
	`mem_mÆloc
(
hunique_Àn
);

585 i‡(
sc
->
sc_hunique
 =
NULL
) {

586 
d⁄e
;

588 
sc
->
sc_hunique_Àn
 = 
hunique_Àn
;

589 
	`MEMCPY
(
sc
->
sc_hunique
, 
hunique
, 
hunique_Àn
);

591 
	`µp€_£nd_∑ds
(
sc
);

592 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

593 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

597 
d⁄e
;

599 
PPPOE_CODE_PADO
:

600 i‡(
sc
 =
NULL
) {

602 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

603 
	`¥ötf
("pppoe:Ñeceived PADO but couldÇot findÑequest for it\n");

605 
d⁄e
;

607 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADI_SENT
) {

608 
	`¥ötf
("%c%c%"
U16_F
":Ñe˚ived u√x≥˘ed PADO\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

609 
d⁄e
;

611 i‡(
ac_cookõ
) {

612 i‡(
sc
->
sc_ac_cookõ
) {

613 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

615 
sc
->
sc_ac_cookõ
 = 
	`mem_mÆloc
(
ac_cookõ_Àn
);

616 i‡(
sc
->
sc_ac_cookõ
 =
NULL
) {

617 
d⁄e
;

619 
sc
->
sc_ac_cookõ_Àn
 = 
ac_cookõ_Àn
;

620 
	`MEMCPY
(
sc
->
sc_ac_cookõ
, 
ac_cookõ
, 
ac_cookõ_Àn
);

622 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhhdr
->
§c
.
addr
, (sc->sc_dest.addr));

623 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

624 
sc
->
sc_∑dr_ªåõd
 = 0;

625 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADR_SENT
;

626 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

627 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

629 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

631 
PPPOE_CODE_PADS
:

632 i‡(
sc
 =
NULL
) {

633 
d⁄e
;

635 
sc
->
sc_£ssi⁄
 = 
£ssi⁄
;

636 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

637 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%x c⁄√˘ed\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
£ssi⁄
));

638 
sc
->
sc_°©e
 = 
PPPOE_STATE_SESSION
;

639 
	`t˝ù_timeout
 (100, 
µp€_lök°©us_up
, 
sc
);

641 
PPPOE_CODE_PADT
:

642 i‡(
sc
 =
NULL
) {

643 
d⁄e
;

645 
	`µp€_˛ór_so·c
(
sc
, "received PADT");

648 if(
sc
) {

649 
	`¥ötf
("%c%c%"
U16_F
": unknown code (0x%04x) session = 0x%04x\n",

650 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

651 
ph
->
code
, 
£ssi⁄
);

653 
	`¥ötf
("µp€: unknow¿codê(0x%04xË£ssi⁄ = 0x%04x\n", 
ph
->
code
, 
£ssi⁄
);

658 
d⁄e
:

659 
	`pbuf_‰ì
(
pb
);

661 
	}
}

664 
	$µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
)

667 i‡(!
	`LIST_EMPTY
(&
µp€_so·c_li°
)) {

668 
	`µp€_di•©ch_disc_pkt
(
√tif
, 
p
);

670 
	`pbuf_‰ì
(
p
);

672 
	}
}

675 
	$µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
pb
)

677 
u16_t
 
£ssi⁄
, 
∂í
;

678 
µp€_so·c
 *
sc
;

679 
µp€hdr
 *
ph
;

680 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


681 
u8_t
 
sho°
[
ETHER_ADDR_LEN
];

684 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


685 
	`MEMCPY
(
sho°
, ((
ëh_hdr
 *)
pb
->
∑ylﬂd
)->
§c
.
addr
, (shost));

687 i‡(
	`pbuf_hódî
(
pb
, -()(
ëh_hdr
)) != 0) {

689 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header failed\n"));

690 
	`LINK_STATS_INC
(
lök
.
À√º
);

691 
dr›
;

694 
pb
 = 
	`µpSögÀBuf
 (pb);

696 i‡(
pb
->
Àn
 <
PPPOE_HEADERLEN
) {

697 
	`¥ötf
("µp€ (d©a): dr›pögÅoÿsh‹à∑ckë: %d byãs\n", 
pb
->
Àn
);

698 
dr›
;

701 i‡(
pb
->
Àn
 < (*
ph
)) {

702 
	`¥ötf
("pppoe_data_input: couldÇot get PPPoE header\n");

703 
dr›
;

705 
ph
 = (
µp€hdr
 *)
pb
->
∑ylﬂd
;

707 i‡(
ph
->
vîty≥
 !
PPPOE_VERTYPE
) {

708 
	`¥ötf
("µp€ (d©a): unknow¿vîsi⁄/ty≥Öackë: 0x%x\n", 
ph
->
vîty≥
);

709 
dr›
;

711 i‡(
ph
->
code
 != 0) {

712 
dr›
;

715 
£ssi⁄
 = 
	`¡ohs
(
ph
->session);

716 
sc
 = 
	`µp€_föd_so·c_by_£ssi⁄
(
£ssi⁄
, 
√tif
);

717 i‡(
sc
 =
NULL
) {

718 #ifde‡
PPPOE_TERM_UNKNOWN_SESSIONS


719 
	`¥ötf
("µp€: i≈uàf‹ unknow¿£ssi⁄ 0x%x, sídög PADT\n", 
£ssi⁄
);

720 
	`µp€_£nd_∑dt
(
√tif
, 
£ssi⁄
, 
sho°
);

722 
dr›
;

725 
∂í
 = 
	`¡ohs
(
ph
->plen);

727 i‡(
	`pbuf_hódî
(
pb
, -()(
PPPOE_HEADERLEN
)) != 0) {

729 
	`PPPDEBUG
((
LOG_ERR
, "pppoe_data_input:Öbuf_header PPPOE_HEADERLEN failed\n"));

730 
	`LINK_STATS_INC
(
lök
.
À√º
);

731 
dr›
;

734 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€_d©a_öput: %c%c%"
U16_F
":Ökthdr.len=%d,Öppoe.len=%d\n",

735 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
,

736 
pb
->
Àn
, 
∂í
));

738 i‡(
pb
->
Àn
 < 
∂í
) {

739 
dr›
;

742 
	`µpInProcOvîEthî√t
(
sc
->
sc_pd
, 
pb
);

746 
dr›
:

747 
	`pbuf_‰ì
(
pb
);

748 
	}
}

750 
îr_t


751 
	$µp€_ouçut
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

753 
ëh_hdr
 *
ëhhdr
;

754 
u16_t
 
ëy≥
;

755 
îr_t
 
ªs
;

757 i‡(!
sc
->
sc_ëhif
) {

758 
	`pbuf_‰ì
(
pb
);

759  
ERR_IF
;

762 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

763 
ëy≥
 = 
sc
->
sc_°©e
 =
PPPOE_STATE_SESSION
 ? 
ETHTYPE_PPPOE
 : 
ETHTYPE_PPPOEDISC
;

764 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ëy≥
);

765 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, 
sc
->
sc_de°
.addr, (ethhdr->dest.addr));

766 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
sc
->
sc_ëhif
->
hwaddr
)->addr, (ethhdr->src.addr));

768 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
" (%xË°©e=%d, sessi⁄=0x%x ouçuà-> %02"
X16_F
":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F",Üen=%d\n",

769 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
ëy≥
,

770 
sc
->
sc_°©e
, sc->
sc_£ssi⁄
,

771 
sc
->
sc_de°
.
addr
[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],

772 
pb
->
tŸ_Àn
));

774 
ªs
 = 
sc
->
sc_ëhif
->
	`lökouçut
(sc->sc_ëhif, 
pb
);

776 
	`pbuf_‰ì
(
pb
);

778  
ªs
;

779 
	}
}

781 
îr_t


782 
	$µp€_£nd_∑di
(
µp€_so·c
 *
sc
)

784 
pbuf
 *
pb
;

785 
u8_t
 *
p
;

786 
Àn
, 
l1
 = 0, 
l2
 = 0;

788 i‡(
sc
->
sc_°©e
 >
PPPOE_STATE_PADI_SENT
) {

789 
	`PPPDEBUG
((
LOG_ERR
, "ERROR:Öµ€_£nd_∑dòö sèã %d", 
sc
->
sc_°©e
));

793 
Àn
 = 2 + 2 + 2 + 2 +  
sc
;

794 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

795 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

796 
Àn
 +
l1
;

798 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

799 
l2
 = 
	`°æí
(
sc
->
sc_c⁄˚¡øt‹_«me
);

800 
Àn
 +2 + 2 + 
l2
;

804 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

805 i‡(!
pb
) {

806  
ERR_MEM
;

809 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

811 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADI
, 0, 
Àn
);

812 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

813 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

814 
	`PPPOE_ADD_16
(
p
, 
l1
);

815 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

816 
p
 +
l1
;

818 
	`PPPOE_ADD_16
(
p
, 0);

820 i‡(
sc
->
sc_c⁄˚¡øt‹_«me
 !
NULL
) {

821 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACNAME
);

822 
	`PPPOE_ADD_16
(
p
, 
l2
);

823 
	`MEMCPY
(
p
, 
sc
->
sc_c⁄˚¡øt‹_«me
, 
l2
);

824 
p
 +
l2
;

826 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

827 
	`PPPOE_ADD_16
(
p
, (
sc
));

828 
	`MEMCPY
(
p
, &
sc
,  sc);

831  
	`µp€_ouçut
(
sc
, 
pb
);

832 
	}
}

835 
	$µp€_timeout
(*
¨g
)

837 
ªåy_waô
, 
îr
;

838 
µp€_so·c
 *
sc
 = (µp€_so·c*)
¨g
;

840 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
":Åimeout\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

842 
sc
->
sc_°©e
) {

843 
PPPOE_STATE_PADI_SENT
:

855 
ªåy_waô
 = 
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
);

857 
sc
->
sc_∑di_ªåõd
++;

858 i‡(
sc
->
sc_∑di_ªåõd
 >
PPPOE_DISC_MAXPADI
) {

860 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_LINK1
) == 0) {

862 
ªåy_waô
 = 
PPPOE_SLOW_RETRY
;

866 
	`µp€_ab‹t_c⁄√˘
(
sc
);

870 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

871 
sc
->
sc_∑di_ªåõd
--;

872 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿå™smô PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

874 
	`t˝ù_timeout
(
ªåy_waô
, 
µp€_timeout
, 
sc
);

877 
PPPOE_STATE_PADR_SENT
:

878 
sc
->
sc_∑dr_ªåõd
++;

879 i‡(
sc
->
sc_∑dr_ªåõd
 >
PPPOE_DISC_MAXPADR
) {

880 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

881 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

882 
sc
->
sc_∑dr_ªåõd
 = 0;

883 i‡((
îr
 = 
	`µp€_£nd_∑di
(
sc
)) != 0) {

884 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

886 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑di_ªåõd
), 
µp€_timeout
, sc);

889 i‡((
îr
 = 
	`µp€_£nd_∑dr
(
sc
)) != 0) {

890 
sc
->
sc_∑dr_ªåõd
--;

891 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADR,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

893 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
 * (1 + 
sc
->
sc_∑dr_ªåõd
), 
µp€_timeout
, sc);

895 
PPPOE_STATE_CLOSING
:

896 
	`µp€_do_disc⁄√˘
(
sc
);

901 
	}
}

905 
	$µp€_c⁄√˘
(
µp€_so·c
 *
sc
)

907 
îr
;

909 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_INITIAL
) {

910  
EBUSY
;

913 #ifde‡
PPPOE_SERVER


915 i‡((
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_PASSIVE
)) {

920 
sc
->
sc_°©e
 = 
PPPOE_STATE_PADI_SENT
;

921 
sc
->
sc_∑dr_ªåõd
 = 0;

922 
îr
 = 
	`µp€_£nd_∑di
(
sc
);

923 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": faûedÅÿ£nd PADI,Éº‹=%d\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, 
îr
));

924 
	`t˝ù_timeout
(
PPPOE_DISC_TIMEOUT
, 
µp€_timeout
, 
sc
);

925  
îr
;

926 
	}
}

930 
	$µp€_disc⁄√˘
(
µp€_so·c
 *
sc
)

932 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

940 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

941 
	`t˝ù_timeout
(20, 
µp€_timeout
, 
sc
);

942 
	}
}

945 
	$µp€_do_disc⁄√˘
(
µp€_so·c
 *
sc
)

947 
îr
;

949 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

950 
îr
 = 
EBUSY
;

952 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": disc⁄√˘ög\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

953 
îr
 = 
	`µp€_£nd_∑dt
(
sc
->
sc_ëhif
, sc->
sc_£ssi⁄
, (c⁄° 
u8_t
 *)&sc->
sc_de°
);

957 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

958 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

959 i‡(
sc
->
sc_ac_cookõ
) {

960 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

961 
sc
->
sc_ac_cookõ
 = 
NULL
;

963 
sc
->
sc_ac_cookõ_Àn
 = 0;

964 #ifde‡
PPPOE_SERVER


965 i‡(
sc
->
sc_hunique
) {

966 
	`mem_‰ì
(
sc
->
sc_hunique
);

967 
sc
->
sc_hunique
 = 
NULL
;

969 
sc
->
sc_hunique_Àn
 = 0;

971 
sc
->
sc_£ssi⁄
 = 0;

973 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

975  
îr
;

976 
	}
}

980 
	$µp€_ab‹t_c⁄√˘
(
µp€_so·c
 *
sc
)

982 
	`¥ötf
("%c%c%"
U16_F
": couldÇŸÉ°ablish c⁄√˘i⁄\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

983 
sc
->
sc_°©e
 = 
PPPOE_STATE_CLOSING
;

985 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

988 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

989 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

990 
	}
}

993 
îr_t


994 
	$µp€_£nd_∑dr
(
µp€_so·c
 *
sc
)

996 
pbuf
 *
pb
;

997 
u8_t
 *
p
;

998 
size_t
 
Àn
, 
l1
 = 0;

1000 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADR_SENT
) {

1001  
ERR_CONN
;

1004 
Àn
 = 2 + 2 + 2 + 2 + (
sc
);

1005 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1006 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1007 
Àn
 +
l1
;

1009 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1010 
Àn
 +2 + 2 + 
sc
->
sc_ac_cookõ_Àn
;

1012 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1013 i‡(!
pb
) {

1014  
ERR_MEM
;

1016 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1017 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADR
, 0, 
Àn
);

1018 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1019 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1020 
	`PPPOE_ADD_16
(
p
, 
l1
);

1021 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1022 
p
 +
l1
;

1024 
	`PPPOE_ADD_16
(
p
, 0);

1026 i‡(
sc
->
sc_ac_cookõ_Àn
 > 0) {

1027 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1028 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_ac_cookõ_Àn
);

1029 
	`MEMCPY
(
p
, 
sc
->
sc_ac_cookõ
, sc->
sc_ac_cookõ_Àn
);

1030 
p
 +
sc
->
sc_ac_cookõ_Àn
;

1032 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1033 
	`PPPOE_ADD_16
(
p
, (
sc
));

1034 
	`MEMCPY
(
p
, &
sc
,  sc);

1036  
	`µp€_ouçut
(
sc
, 
pb
);

1037 
	}
}

1040 
îr_t


1041 
	$µp€_£nd_∑dt
(
√tif
 *
outgoög_if
, 
u_öt
 
£ssi⁄
, c⁄° 
u8_t
 *
de°
)

1043 
pbuf
 *
pb
;

1044 
ëh_hdr
 *
ëhhdr
;

1045 
îr_t
 
ªs
;

1046 
u8_t
 *
p
;

1048 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
, 
PBUF_RAM
);

1049 i‡(!
pb
) {

1050  
ERR_MEM
;

1053 
ëhhdr
 = (
ëh_hdr
 *)
pb
->
∑ylﬂd
;

1054 
ëhhdr
->
ty≥
 = 
	`ht⁄s
(
ETHTYPE_PPPOEDISC
);

1055 
	`MEMCPY
(
ëhhdr
->
de°
.
addr
, dest, (ethhdr->dest.addr));

1056 
	`MEMCPY
(
ëhhdr
->
§c
.
addr
, ((
ëh_addr
 *)
outgoög_if
->
hwaddr
)->addr, (ethhdr->src.addr));

1058 
p
 = (
u8_t
*)(
ëhhdr
 + 1);

1059 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADT
, 
£ssi⁄
, 0);

1061 
ªs
 = 
outgoög_if
->
	`lökouçut
(outgoög_if, 
pb
);

1063 
	`pbuf_‰ì
(
pb
);

1065  
ªs
;

1066 
	}
}

1068 #ifde‡
PPPOE_SERVER


1069 
îr_t


1070 
	$µp€_£nd_∑do
(
µp€_so·c
 *
sc
)

1072 
pbuf
 *
pb
;

1073 
u8_t
 *
p
;

1074 
size_t
 
Àn
;

1076 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1077  
ERR_CONN
;

1081 
Àn
 = 0;

1083 
Àn
 +2 + 2 + (
sc
);

1085 
Àn
 +2 + 2 + 
sc
->
sc_hunique_Àn
;

1086 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1087 i‡(!
pb
) {

1088  
ERR_MEM
;

1090 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1091 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADO
, 0, 
Àn
);

1092 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_ACCOOKIE
);

1093 
	`PPPOE_ADD_16
(
p
, (
sc
));

1094 
	`MEMCPY
(
p
, &
sc
, (sc));

1095 
p
 +(
sc
);

1096 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1097 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1098 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1099  
	`µp€_ouçut
(
sc
, 
pb
);

1100 
	}
}

1102 
îr_t


1103 
	$µp€_£nd_∑ds
(
µp€_so·c
 *
sc
)

1105 
pbuf
 *
pb
;

1106 
u8_t
 *
p
;

1107 
size_t
 
Àn
, 
l1
 = 0;

1109 i‡(
sc
->
sc_°©e
 !
PPPOE_STATE_PADO_SENT
) {

1110  
ERR_CONN
;

1113 
sc
->
sc_£ssi⁄
 = 
m⁄o_time
.
tv_£c
 % 0xff + 1;

1115 
Àn
 = 0;

1117 
Àn
 +2 + 2 + 2 + 2 + 
sc
->
sc_hunique_Àn
;

1118 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1119 
l1
 = 
	`°æí
(
sc
->
sc_£rvi˚_«me
);

1120 
Àn
 +
l1
;

1122 
pb
 = 
	`pbuf_Æloc
(
PBUF_LINK
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
 + 
Àn
, 
PBUF_RAM
);

1123 i‡(!
pb
) {

1124  
ERR_MEM
;

1126 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 +  (
ëh_hdr
);

1127 
	`PPPOE_ADD_HEADER
(
p
, 
PPPOE_CODE_PADS
, 
sc
->
sc_£ssi⁄
, 
Àn
);

1128 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_SNAME
);

1129 i‡(
sc
->
sc_£rvi˚_«me
 !
NULL
) {

1130 
	`PPPOE_ADD_16
(
p
, 
l1
);

1131 
	`MEMCPY
(
p
, 
sc
->
sc_£rvi˚_«me
, 
l1
);

1132 
p
 +
l1
;

1134 
	`PPPOE_ADD_16
(
p
, 0);

1136 
	`PPPOE_ADD_16
(
p
, 
PPPOE_TAG_HUNIQUE
);

1137 
	`PPPOE_ADD_16
(
p
, 
sc
->
sc_hunique_Àn
);

1138 
	`MEMCPY
(
p
, 
sc
->
sc_hunique
, sc->
sc_hunique_Àn
);

1139  
	`µp€_ouçut
(
sc
, 
pb
);

1140 
	}
}

1143 
îr_t


1144 
	$µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
)

1146 
u8_t
 *
p
;

1147 
size_t
 
Àn
;

1150 i‡(
sc
->
sc_°©e
 < 
PPPOE_STATE_SESSION
) {

1152 
	`pbuf_‰ì
(
pb
);

1153  
ERR_CONN
;

1156 
Àn
 = 
pb
->
tŸ_Àn
;

1159 i‡(
	`pbuf_hódî
(
pb
, (
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
) != 0) {

1161 
	`PPPDEBUG
((
LOG_ERR
, "µp€: %c%c%"
U16_F
":Öµ€_xmô: couldÇŸáŒoˇãÑoom f‹ hódî\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
));

1162 
	`LINK_STATS_INC
(
lök
.
À√º
);

1163 
	`pbuf_‰ì
(
pb
);

1164  
ERR_BUF
;

1167 
p
 = (
u8_t
*)
pb
->
∑ylﬂd
 + (
ëh_hdr
);

1168 
	`PPPOE_ADD_HEADER
(
p
, 0, 
sc
->
sc_£ssi⁄
, 
Àn
);

1170  
	`µp€_ouçut
(
sc
, 
pb
);

1171 
	}
}

1175 
	$µp€_iÁâach_hook
(*
¨g
, 
pbuf
 **
mp
, 
√tif
 *
iÂ
, 
dú
)

1177 
µp€_so·c
 *
sc
;

1178 
s
;

1180 i‡(
mp
 !(
pbuf
 **)
PFIL_IFNET_DETACH
) {

1184 
	`LIST_FOREACH
(
sc
, &
µp€_so·c_li°
, 
sc_li°
) {

1185 i‡(
sc
->
sc_ëhif
 !
iÂ
) {

1188 i‡(
sc
->
sc_•µ
.
µ_if
.
if_Êags
 & 
IFF_UP
) {

1189 
sc
->
sc_•µ
.
µ_if
.
if_Êags
 &~(
IFF_UP
|
IFF_RUNNING
);

1190 
	`¥ötf
("%c%c%"
U16_F
":Éthernet interface detached, going down\n",

1191 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
);

1193 
sc
->
sc_ëhif
 = 
NULL
;

1194 
	`µp€_˛ór_so·c
(
sc
, "ethernet interface detached");

1198 
	}
}

1202 
	$µp€_˛ór_so·c
(
µp€_so·c
 *
sc
, c⁄° *
mesßge
)

1204 
	`LWIP_UNUSED_ARG
(
mesßge
);

1207 
	`t˝ù_u¡imeout
(
µp€_timeout
, 
sc
);

1208 
	`PPPDEBUG
((
LOG_DEBUG
, "µp€: %c%c%"
U16_F
": sessi⁄ 0x%xÅîmö©ed, %s\n", 
sc
->
sc_ëhif
->
«me
[0], sc->sc_ëhif->«me[1], sc->sc_ëhif->
num
, sc->
sc_£ssi⁄
, 
mesßge
));

1211 
sc
->
sc_°©e
 = 
PPPOE_STATE_INITIAL
;

1214 
sc
->
	`sc_lökSètusCB
(sc->
sc_pd
, 0);

1217 
	`MEMCPY
(&
sc
->
sc_de°
, 
ëhbrﬂdˇ°
.
addr
, (sc->sc_dest));

1218 i‡(
sc
->
sc_ac_cookõ
) {

1219 
	`mem_‰ì
(
sc
->
sc_ac_cookõ
);

1220 
sc
->
sc_ac_cookõ
 = 
NULL
;

1222 
sc
->
sc_ac_cookõ_Àn
 = 0;

1223 
sc
->
sc_£ssi⁄
 = 0;

1224 
	}
}

	@net/lwip/netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

44 
	mLOG_CRITICAL
 = 0,

45 
	mLOG_ERR
 = 1,

46 
	mLOG_NOTICE
 = 2,

47 
	mLOG_WARNING
 = 3,

48 
	mLOG_INFO
 = 5,

49 
	mLOG_DETAIL
 = 6,

50 
	mLOG_DEBUG
 = 7

51 } 
	tLogCodes
;

60 
µp_åa˚
(
Àvñ
, c⁄° *
f‹m©
,...);

62 
	#TRACELCP
 
PPP_DEBUG


	)

64 #i‡
PPP_DEBUG


66 
	#AUTHDEBUG
(
a
Ë
µp_åa˚
 
	)
a

67 
	#IPCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

68 
	#UPAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

69 
	#LCPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

70 
	#FSMDEBUG
(
a
Ë
µp_åa˚
 
	)
a

71 
	#CHAPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

72 
	#PPPDEBUG
(
a
Ë
µp_åa˚
 
	)
a

76 
	#AUTHDEBUG
(
a
)

	)

77 
	#IPCPDEBUG
(
a
)

	)

78 
	#UPAPDEBUG
(
a
)

	)

79 
	#LCPDEBUG
(
a
)

	)

80 
	#FSMDEBUG
(
a
)

	)

81 
	#CHAPDEBUG
(
a
)

	)

82 
	#PPPDEBUG
(
a
)

	)

	@net/lwip/netif/ppp/randm.c

34 
	~"lwù/›t.h
"

36 #i‡
PPP_SUPPORT


38 
	~"md5.h
"

39 
	~"øndm.h
"

41 
	~"µp.h
"

42 
	~"µpdebug.h
"

45 #i‡
MD5_SUPPORT


46 
	#RANDPOOLSZ
 16

	)

51 
	gøndPoﬁ
[
RANDPOOLSZ
];

52 
	gøndCou¡
 = 0;

67 
	$avR™domInô
()

69 
	`avChu∫R™d
(
NULL
, 0);

70 
	}
}

83 
	$avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
)

85 
MD5_CTX
 
md5
;

88 
	`MD5Inô
(&
md5
);

89 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

90 i‡(
øndD©a
) {

91 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndD©a
, 
øndLí
);

95 
foob¨
;

96 } 
sysD©a
;

99 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
sysD©a
, (sysData));

101 
	`MD5FöÆ
((
u_ch¨
 *)
øndPoﬁ
, &
md5
);

103 
	}
}

122 
	$avGíR™d
(*
buf
, 
u32_t
 
bufLí
)

124 
MD5_CTX
 
md5
;

125 
u_ch¨
 
tmp
[16];

126 
u32_t
 
n
;

128 
bufLí
 > 0) {

129 
n
 = 
	`LWIP_MIN
(
bufLí
, 
RANDPOOLSZ
);

130 
	`MD5Inô
(&
md5
);

131 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)
øndPoﬁ
, (randPool));

132 
	`MD5Upd©e
(&
md5
, (
u_ch¨
 *)&
øndCou¡
, (randCount));

133 
	`MD5FöÆ
(
tmp
, &
md5
);

134 
øndCou¡
++;

135 
	`MEMCPY
(
buf
, 
tmp
, 
n
);

136 
buf
 +
n
;

137 
bufLí
 -
n
;

139 
	}
}

144 
u32_t


145 
	$avR™dom
()

147 
u32_t
 
√wR™d
;

149 
	`avGíR™d
((*)&
√wR™d
, (newRand));

151  
√wR™d
;

152 
	}
}

159 
	gavR™domized
 = 0;

160 
u32_t
 
	gavR™domSìd
 = 0;

181 
	$avR™domInô
()

185 
u32_t
 *
Õå1
 = (u32_à*)((*)&
˛ockBuf
[3]);

197 
	`ªadClk
();

198 
avR™domSìd
 +*(
u32_t
 *)
˛ockBuf
 + *
Õå1
 + 
OSIdÀCå


199 + 
	`µp_mtime
(Ë+ ((
u32_t
)
TM1
 << 16) + TM1;

201 
avR™domSìd
 +
	`sys_jiffõs
();

205 
	`§™d
(()
avR™domSìd
);

206 
	}
}

216 
	$avR™domize
()

218 
u32_t
 
œ°_jiffõs
;

220 i‡(!
avR™domized
) {

221 
avR™domized
 = !0;

222 
	`avR™domInô
();

226 
avR™domSìd
 +(
	`sys_jiffõs
(Ë- 
œ°_jiffõs
);

228 
œ°_jiffõs
 = 
	`sys_jiffõs
();

229 
	}
}

240 
u32_t


241 
	$avR™dom
()

243  ((((
u32_t
)
	`ønd
(Ë<< 16Ë+Ñ™d()Ë+ 
avR™domSìd
);

244 
	}
}

	@net/lwip/netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@net/lwip/netif/ppp/vj.c

31 
	~"lwù/›t.h
"

33 #i‡
PPP_SUPPORT


35 
	~"µp.h
"

36 
	~"µpdebug.h
"

38 
	~"vj.h
"

40 
	~<°rög.h
>

42 #i‡
VJ_SUPPORT


44 #i‡
LINK_STATS


45 
	#INCR
(
cou¡î
Ë++
comp
->
°©s
.
	)
counter

47 
	#INCR
(
cou¡î
)

	)

50 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

51 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl_v
&0xf)

	)

52 
	#gëth_off
(
ba£
Ë(((ba£).
th_x2_off
&0xf0)>>4)

	)

54 
	#gëù_hl
(
ba£
Ë((ba£).
ù_hl
)

	)

55 
	#gëth_off
(
ba£
Ë((ba£).
th_off
)

	)

59 
	$vj_com¥ess_öô
(
vjcom¥ess
 *
comp
)

61 
u_öt
 
i
;

62 
c°©e
 *
t°©e
 = 
comp
->tstate;

64 #i‡
MAX_SLOTS
 == 0

65 
	`mem£t
((*)
comp
, 0, (*comp));

67 
comp
->
maxSlŸIndex
 = 
MAX_SLOTS
 - 1;

68 
comp
->
com¥essSlŸ
 = 0;

69 
i
 = 
MAX_SLOTS
 - 1; i > 0; --i) {

70 
t°©e
[
i
].
cs_id
 = i;

71 
t°©e
[
i
].
cs_√xt
 = &tstate[i - 1];

73 
t°©e
[0].
cs_√xt
 = &t°©e[
MAX_SLOTS
 - 1];

74 
t°©e
[0].
cs_id
 = 0;

75 
comp
->
œ°_cs
 = &
t°©e
[0];

76 
comp
->
œ°_ªcv
 = 255;

77 
comp
->
œ°_xmô
 = 255;

78 
comp
->
Êags
 = 
VJF_TOSS
;

79 
	}
}

86 
	#ENCODE
(
n
) { \

87 i‡((
u_sh‹t
)(
n
) >= 256) { \

88 *
˝
++ = 0; \

89 
˝
[1] = (
n
); \

90 
˝
[0] = (
n
) >> 8; \

91 
˝
 += 2; \

93 *
˝
++ = (
n
); \

95 }

	)

96 
	#ENCODEZ
(
n
) { \

97 i‡((
u_sh‹t
)(
n
) >= 256 || (u_short)(n) == 0) { \

98 *
˝
++ = 0; \

99 
˝
[1] = (
n
); \

100 
˝
[0] = (
n
) >> 8; \

101 
˝
 += 2; \

103 *
˝
++ = (
n
); \

105 }

	)

107 
	#DECODEL
(
f
) { \

108 i‡(*
˝
 == 0) {\

109 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ ((
˝
[1] << 8) | cp[2]); \

110 (
f
Ë
	`ht⁄l
(
tmp
); \

111 
˝
 += 3; \

113 
u32_t
 
tmp
 = 
	`¡ohl
(
f
Ë+ (u32_t)*
˝
++; \

114 (
f
Ë
	`ht⁄l
(
tmp
); \

116 }

	)

118 
	#DECODES
(
f
) { \

119 i‡(*
˝
 == 0) {\

120 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (((u_sh‹t)
˝
[1] << 8) | cp[2]); \

121 (
f
Ë
	`ht⁄s
(
tmp
); \

122 
˝
 += 3; \

124 
u_sh‹t
 
tmp
 = 
	`¡ohs
(
f
Ë+ (u_sh‹t)*
˝
++; \

125 (
f
Ë
	`ht⁄s
(
tmp
); \

127 }

	)

129 
	#DECODEU
(
f
) { \

130 i‡(*
˝
 == 0) {\

131 (
f
Ë
	`ht⁄s
(((
u_sh‹t
)
˝
[1] << 8) | cp[2]); \

132 
˝
 += 3; \

134 (
f
Ë
	`ht⁄s
((
u_sh‹t
)*
˝
++); \

136 }

	)

145 
u_öt


146 
	$vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
)

148 
ù
 *ù = (ù *)
pb
->
∑ylﬂd
;

149 
c°©e
 *
cs
 = 
comp
->
œ°_cs
->
cs_√xt
;

150 
u_sh‹t
 
hÀn
 = 
	`gëù_hl
(*
ù
);

151 
t˝hdr
 *
Ÿh
;

152 
t˝hdr
 *
th
;

153 
u_sh‹t
 
dñèS
, 
dñèA
;

154 
u_l⁄g
 
dñèL
;

155 
u_öt
 
ch™ges
 = 0;

156 
u_ch¨
 
√w_£q
[16];

157 
u_ch¨
 *
˝
 = 
√w_£q
;

162 i‡(
ù
->
ù_p
 !
IPPROTO_TCP
) {

163  (
TYPE_IP
);

171 i‡((
ù
->
ù_off
 & 
	`ht⁄s
(0x3fff)Ë|| 
pb
->
tŸ_Àn
 < 40) {

172  (
TYPE_IP
);

174 
th
 = (
t˝hdr
 *)&((*)
ù
)[
hÀn
];

175 i‡((
th
->
th_Êags
 & (
TCP_SYN
|
TCP_FIN
|
TCP_RST
|
TCP_ACK
)) != TCP_ACK) {

176  (
TYPE_IP
);

185 
	`INCR
(
vjs_∑ckës
);

186 i‡(
ù
->
ù_§c
.
s_addr
 !
cs
->
cs_ù
.ip_src.s_addr

187 || 
ù
->
ù_d°
.
s_addr
 !
cs
->
cs_ù
.ip_dst.s_addr

188 || *(*)
th
 !((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

201 
c°©e
 *
lcs
;

202 
c°©e
 *
œ°cs
 = 
comp
->
œ°_cs
;

205 
lcs
 = 
cs
; c†cs->
cs_√xt
;

206 
	`INCR
(
vjs_£¨ches
);

207 i‡(
ù
->
ù_§c
.
s_addr
 =
cs
->
cs_ù
.ip_src.s_addr

208 && 
ù
->
ù_d°
.
s_addr
 =
cs
->
cs_ù
.ip_dst.s_addr

209 && *(*)
th
 =((*)&
cs
->
cs_ù
)[
	`gëù_hl
(cs->cs_ip)]) {

210 
found
;

212 } 
cs
 !
œ°cs
);

222 
	`INCR
(
vjs_mis£s
);

223 
comp
->
œ°_cs
 = 
lcs
;

224 
hÀn
 +
	`gëth_off
(*
th
);

225 
hÀn
 <<= 2;

227 i‡(
hÀn
 > 
pb
->
Àn
) {

228  (
TYPE_IP
);

230 
uncom¥es£d
;

232 
found
:

236 i‡(
cs
 =
œ°cs
) {

237 
comp
->
œ°_cs
 = 
lcs
;

239 
lcs
->
cs_√xt
 = 
cs
->cs_next;

240 
cs
->
cs_√xt
 = 
œ°cs
->cs_next;

241 
œ°cs
->
cs_√xt
 = 
cs
;

245 
Ÿh
 = (
t˝hdr
 *)&((*)&
cs
->
cs_ù
)[
hÀn
];

246 
dñèS
 = 
hÀn
;

247 
hÀn
 +
	`gëth_off
(*
th
);

248 
hÀn
 <<= 2;

250 i‡(
hÀn
 > 
pb
->
Àn
) {

251 
	`PPPDEBUG
((
LOG_INFO
, "vj_com¥ess_t˝: hódîÜí %d s∑n†buf„rs\n", 
hÀn
));

252  (
TYPE_IP
);

266 i‡(((
u_sh‹t
 *)
ù
)[0] !((u_sh‹à*)&
cs
->
cs_ù
)[0]

267 || ((
u_sh‹t
 *)
ù
)[3] !((u_sh‹à*)&
cs
->
cs_ù
)[3]

268 || ((
u_sh‹t
 *)
ù
)[4] !((u_sh‹à*)&
cs
->
cs_ù
)[4]

269 || 
	`gëth_off
(*
th
Ë!gëth_off(*
Ÿh
)

270 || (
dñèS
 > 5 && 
	`BCMP
(
ù
 + 1, &
cs
->
cs_ù
 + 1, (deltaS - 5) << 2))

271 || (
	`gëth_off
(*
th
Ë> 5 && 
	`BCMP
—h + 1, 
Ÿh
 + 1, (getth_off(*th) - 5) << 2))) {

272 
uncom¥es£d
;

281 i‡(
th
->
th_Êags
 & 
TCP_URG
) {

282 
dñèS
 = 
	`¡ohs
(
th
->
th_uΩ
);

283 
	`ENCODEZ
(
dñèS
);

284 
ch™ges
 |
NEW_U
;

285 } i‡(
th
->
th_uΩ
 !
Ÿh
->th_urp) {

290 
uncom¥es£d
;

293 i‡((
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
th
->
th_wö
Ë-Çtohs(
Ÿh
->th_win))) != 0) {

294 
	`ENCODE
(
dñèS
);

295 
ch™ges
 |
NEW_W
;

298 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_ack
Ë-Çtohl(
Ÿh
->th_ack)) != 0) {

299 i‡(
dñèL
 > 0xffff) {

300 
uncom¥es£d
;

302 
dñèA
 = (
u_sh‹t
)
dñèL
;

303 
	`ENCODE
(
dñèA
);

304 
ch™ges
 |
NEW_A
;

307 i‡((
dñèL
 = 
	`¡ohl
(
th
->
th_£q
Ë-Çtohl(
Ÿh
->th_seq)) != 0) {

308 i‡(
dñèL
 > 0xffff) {

309 
uncom¥es£d
;

311 
dñèS
 = (
u_sh‹t
)
dñèL
;

312 
	`ENCODE
(
dñèS
);

313 
ch™ges
 |
NEW_S
;

316 
ch™ges
) {

326 i‡(
ù
->
ù_Àn
 !
cs
->
cs_ù
.ip_len &&

327 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë=
hÀn
) {

333 
SPECIAL_I
:

334 
SPECIAL_D
:

339 
uncom¥es£d
;

341 
NEW_S
|
NEW_A
:

342 i‡(
dñèS
 =
dñèA
 && dñèS =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

344 
ch™ges
 = 
SPECIAL_I
;

345 
˝
 = 
√w_£q
;

349 
NEW_S
:

350 i‡(
dñèS
 =
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- 
hÀn
) {

352 
ch™ges
 = 
SPECIAL_D
;

353 
˝
 = 
√w_£q
;

358 
dñèS
 = (
u_sh‹t
)(
	`¡ohs
(
ù
->
ù_id
Ë-Çtohs(
cs
->
cs_ù
.ip_id));

359 i‡(
dñèS
 != 1) {

360 
	`ENCODEZ
(
dñèS
);

361 
ch™ges
 |
NEW_I
;

363 i‡(
th
->
th_Êags
 & 
TCP_PSH
) {

364 
ch™ges
 |
TCP_PUSH_BIT
;

370 
dñèA
 = 
	`¡ohs
(
th
->
th_sum
);

371 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

382 
dñèS
 = (
u_sh‹t
)(
˝
 - 
√w_£q
);

383 i‡(!
comp
->
com¥essSlŸ
 || comp->
œ°_xmô
 !
cs
->
cs_id
) {

384 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

385 
hÀn
 -
dñèS
 + 4;

386 if(
	`pbuf_hódî
(
pb
, -
hÀn
)){

388 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

390 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

391 *
˝
++ = 
ch™ges
 | 
NEW_C
;

392 *
˝
++ = 
cs
->
cs_id
;

394 
hÀn
 -
dñèS
 + 3;

395 if(
	`pbuf_hódî
(
pb
, -
hÀn
)) {

397 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

399 
˝
 = (
u_ch¨
 *)
pb
->
∑ylﬂd
;

400 *
˝
++ = 
ch™ges
;

402 *
˝
++ = 
dñèA
 >> 8;

403 *
˝
++ = 
dñèA
;

404 
	`BCOPY
(
√w_£q
, 
˝
, 
dñèS
);

405 
	`INCR
(
vjs_com¥es£d
);

406  (
TYPE_COMPRESSED_TCP
);

413 
uncom¥es£d
:

414 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

415 
ù
->
ù_p
 = 
cs
->
cs_id
;

416 
comp
->
œ°_xmô
 = 
cs
->
cs_id
;

417  (
TYPE_UNCOMPRESSED_TCP
);

418 
	}
}

424 
	$vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
)

426 
comp
->
Êags
 |
VJF_TOSS
;

427 
	`INCR
(
vjs_îr‹ö
);

428 
	}
}

435 
	$vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
)

437 
u_öt
 
hÀn
;

438 
c°©e
 *
cs
;

439 
ù
 *ip;

441 
ù
 = (ù *)
nb
->
∑ylﬂd
;

442 
hÀn
 = 
	`gëù_hl
(*
ù
) << 2;

443 i‡(
ù
->
ù_p
 >
MAX_SLOTS


444 || 
hÀn
 + (
t˝hdr
Ë> 
nb
->
Àn


445 || (
hÀn
 +
	`gëth_off
(*((
t˝hdr
 *)&((*)
ù
)[hlen])) << 2)

446 > 
nb
->
Àn


447 || 
hÀn
 > 
MAX_HDR
) {

448 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_uncomp: bad cid=%d, hlen=%d buflen=%d\n",

449 
ù
->
ù_p
, 
hÀn
, 
nb
->
Àn
));

450 
comp
->
Êags
 |
VJF_TOSS
;

451 
	`INCR
(
vjs_îr‹ö
);

454 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
 = 
ù
->
ù_p
];

455 
comp
->
Êags
 &=~ 
VJF_TOSS
;

456 
ù
->
ù_p
 = 
IPPROTO_TCP
;

457 
	`BCOPY
(
ù
, &
cs
->
cs_ù
, 
hÀn
);

458 
cs
->
cs_hÀn
 = 
hÀn
;

459 
	`INCR
(
vjs_uncom¥es£dö
);

461 
	}
}

472 
	$vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
)

474 
u_ch¨
 *
˝
;

475 
t˝hdr
 *
th
;

476 
c°©e
 *
cs
;

477 
u_sh‹t
 *
bp
;

478 
pbuf
 *
n0
 = *
nb
;

479 
u32_t
 
tmp
;

480 
u_öt
 
vjÀn
, 
hÀn
, 
ch™ges
;

482 
	`INCR
(
vjs_com¥es£dö
);

483 
˝
 = (
u_ch¨
 *)
n0
->
∑ylﬂd
;

484 
ch™ges
 = *
˝
++;

485 i‡(
ch™ges
 & 
NEW_C
) {

490 i‡(*
˝
 >
MAX_SLOTS
) {

491 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncom¥ess_t˝: bad cid=%d\n", *
˝
));

492 
bad
;

495 
comp
->
Êags
 &=~ 
VJF_TOSS
;

496 
comp
->
œ°_ªcv
 = *
˝
++;

503 i‡(
comp
->
Êags
 & 
VJF_TOSS
) {

504 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp:Åossing\n"));

505 
	`INCR
(
vjs_tos£d
);

509 
cs
 = &
comp
->
r°©e
[comp->
œ°_ªcv
];

510 
hÀn
 = 
	`gëù_hl
(
cs
->
cs_ù
) << 2;

511 
th
 = (
t˝hdr
 *)&((
u_ch¨
 *)&
cs
->
cs_ù
)[
hÀn
];

512 
th
->
th_sum
 = 
	`ht⁄s
((*
˝
 << 8) | cp[1]);

513 
˝
 += 2;

514 i‡(
ch™ges
 & 
TCP_PUSH_BIT
) {

515 
th
->
th_Êags
 |
TCP_PSH
;

517 
th
->
th_Êags
 &=~ 
TCP_PSH
;

520 
ch™ges
 & 
SPECIALS_MASK
) {

521 
SPECIAL_I
:

523 
u32_t
 
i
 = 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

525 
tmp
 = 
	`¡ohl
(
th
->
th_ack
Ë+ 
i
;

526 
th
->
th_ack
 = 
	`ht⁄l
(
tmp
);

527 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
i
;

528 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

532 
SPECIAL_D
:

534 
tmp
 = 
	`¡ohl
(
th
->
th_£q
Ë+ 
	`¡ohs
(
cs
->
cs_ù
.
ù_Àn
Ë- cs->
cs_hÀn
;

535 
th
->
th_£q
 = 
	`ht⁄l
(
tmp
);

539 i‡(
ch™ges
 & 
NEW_U
) {

540 
th
->
th_Êags
 |
TCP_URG
;

541 
	`DECODEU
(
th
->
th_uΩ
);

543 
th
->
th_Êags
 &=~ 
TCP_URG
;

545 i‡(
ch™ges
 & 
NEW_W
) {

546 
	`DECODES
(
th
->
th_wö
);

548 i‡(
ch™ges
 & 
NEW_A
) {

549 
	`DECODEL
(
th
->
th_ack
);

551 i‡(
ch™ges
 & 
NEW_S
) {

552 
	`DECODEL
(
th
->
th_£q
);

556 i‡(
ch™ges
 & 
NEW_I
) {

557 
	`DECODES
(
cs
->
cs_ù
.
ù_id
);

559 
cs
->
cs_ù
.
ù_id
 = 
	`¡ohs
(cs->cs_ip.ip_id) + 1;

560 
cs
->
cs_ù
.
ù_id
 = 
	`ht⁄s
(cs->cs_ip.ip_id);

568 
vjÀn
 = (
u_sh‹t
)(
˝
 - (
u_ch¨
*)
n0
->
∑ylﬂd
);

569 i‡(
n0
->
Àn
 < 
vjÀn
) {

574 
	`PPPDEBUG
((
LOG_INFO
, "vj_uncompress_tcp: head buffer %dÅoo short %d\n",

575 
n0
->
Àn
, 
vjÀn
));

576 
bad
;

579 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


580 
tmp
 = 
n0
->
tŸ_Àn
 - 
vjÀn
 + 
cs
->
cs_hÀn
;

581 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
tmp
);

583 
cs
->
cs_ù
.
ù_Àn
 = 
	`ht⁄s
(
n0
->
tŸ_Àn
 - 
vjÀn
 + cs->
cs_hÀn
);

587 
bp
 = (
u_sh‹t
 *Ë&
cs
->
cs_ù
;

588 
cs
->
cs_ù
.
ù_sum
 = 0;

589 
tmp
 = 0; 
hÀn
 > 0; hlen -= 2) {

590 
tmp
 +*
bp
++;

592 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

593 
tmp
 = (tmp & 0xffff) + (tmp >> 16);

594 
cs
->
cs_ù
.
ù_sum
 = (
u_sh‹t
)(~
tmp
);

597 if(
	`pbuf_hódî
(
n0
, -((
s16_t
)(
vjÀn
)))) {

599 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

600 
bad
;

603 if(
	`LWIP_MEM_ALIGN
(
n0
->
∑ylﬂd
) !=Ç0->payload) {

604 
pbuf
 *
≈
, *
q
;

605 
u8_t
 *
buÂå
;

607 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
n0
->
Àn
 + 
cs
->
cs_hÀn
, 
PBUF_POOL
);

608 if(!
≈
) {

609 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Ñealign failed\n"));

610 
bad
;

613 if(
	`pbuf_hódî
(
≈
, -
cs
->
cs_hÀn
)) {

615 
	`LWIP_ASSERT
("pbuf_header failed\n", 0);

616 
bad
;

619 
buÂå
 = 
n0
->
∑ylﬂd
;

620 
q
 = 
≈
; q !
NULL
; q = q->
√xt
) {

621 
	`MEMCPY
(
q
->
∑ylﬂd
, 
buÂå
, q->
Àn
);

622 
buÂå
 +
q
->
Àn
;

625 if(
n0
->
√xt
) {

626 
	`pbuf_chaö
(
≈
, 
n0
->
√xt
);

627 
	`pbuf_dechaö
(
n0
);

629 
	`pbuf_‰ì
(
n0
);

630 
n0
 = 
≈
;

633 if(
	`pbuf_hódî
(
n0
, 
cs
->
cs_hÀn
)) {

634 
pbuf
 *
≈
;

636 
	`LWIP_ASSERT
("vj_uncom¥ess_t˝: cs->cs_hÀ¿<PBUF_POOL_BUFSIZE", 
cs
->
cs_hÀn
 <
PBUF_POOL_BUFSIZE
);

637 
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
cs
->
cs_hÀn
, 
PBUF_POOL
);

638 if(!
≈
) {

639 
	`PPPDEBUG
((
LOG_WARNING
, "vj_uncompress_tcp:Örepend failed\n"));

640 
bad
;

642 
	`pbuf_ˇt
(
≈
, 
n0
);

643 
n0
 = 
≈
;

645 
	`LWIP_ASSERT
("n0->À¿>cs->cs_hÀn", 
n0
->
Àn
 >
cs
->
cs_hÀn
);

646 
	`MEMCPY
(
n0
->
∑ylﬂd
, &
cs
->
cs_ù
, cs->
cs_hÀn
);

648 *
nb
 = 
n0
;

650  
vjÀn
;

652 
bad
:

653 
comp
->
Êags
 |
VJF_TOSS
;

654 
	`INCR
(
vjs_îr‹ö
);

656 
	}
}

	@net/lwip/netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"vjbsdhdr.h
"

30 
	#MAX_SLOTS
 16

	)

31 
	#MAX_HDR
 128

	)

77 
	#TYPE_IP
 0x40

	)

78 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

79 
	#TYPE_COMPRESSED_TCP
 0x80

	)

80 
	#TYPE_ERROR
 0x00

	)

83 
	#NEW_C
 0x40

	)

84 
	#NEW_I
 0x20

	)

85 
	#NEW_S
 0x08

	)

86 
	#NEW_A
 0x04

	)

87 
	#NEW_W
 0x02

	)

88 
	#NEW_U
 0x01

	)

91 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

92 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

95 
	#TCP_PUSH_BIT
 0x10

	)

104 
	sc°©e
 {

105 
c°©e
 *
	mcs_√xt
;

106 
u_sh‹t
 
	mcs_hÀn
;

107 
u_ch¨
 
	mcs_id
;

108 
u_ch¨
 
	mcs_fûÀr
;

110 
	mcsu_hdr
[
MAX_HDR
];

111 
ù
 
	mcsu_ù
;

112 } 
	mvjcs_u
;

114 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

115 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

118 
	svj°©
 {

119 
	mvjs_∑ckës
;

120 
	mvjs_com¥es£d
;

121 
	mvjs_£¨ches
;

122 
	mvjs_mis£s
;

123 
	mvjs_uncom¥es£dö
;

124 
	mvjs_com¥es£dö
;

125 
	mvjs_îr‹ö
;

126 
	mvjs_tos£d
;

132 
	svjcom¥ess
 {

133 
c°©e
 *
	mœ°_cs
;

134 
u_ch¨
 
	mœ°_ªcv
;

135 
u_ch¨
 
	mœ°_xmô
;

136 
u_sh‹t
 
	mÊags
;

137 
u_ch¨
 
	mmaxSlŸIndex
;

138 
u_ch¨
 
	mcom¥essSlŸ
;

139 #i‡
LINK_STATS


140 
vj°©
 
	m°©s
;

142 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

143 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

147 
	#VJF_TOSS
 1U

	)

149 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

150 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

151 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

152 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@net/lwip/netif/ppp/vjbsdhdr.h

1 #i‚de‡
VJBSDHDR_H


2 
	#VJBSDHDR_H


	)

4 
	~"lwù/t˝.h
"

13 
PACK_STRUCT_BEGIN


14 
	sù


16 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

17 
u_ch¨
 
	mù_hl_v
;

19 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


20 
	mù_hl
:4,

21 
	mù_v
 :4;

22 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


23 
	mù_v
 :4,

24 
	mù_hl
:4;

26 
	mCOMPLAIN
 - 
NO
 
BYTE
 
ORDER
 
	mSELECTED
!

29 
u_ch¨
 
	mù_tos
;

30 
u_sh‹t
 
	mù_Àn
;

31 
u_sh‹t
 
	mù_id
;

32 
u_sh‹t
 
	mù_off
;

33 
	#IP_DF
 0x4000

	)

34 
	#IP_MF
 0x2000

	)

35 
	#IP_OFFMASK
 0x1ff‡

	)

36 
u_ch¨
 
	mù_âl
;

37 
u_ch¨
 
	mù_p
;

38 
u_sh‹t
 
	mù_sum
;

39 
ö_addr
 
	mù_§c
,
	mù_d°
;

41 
PACK_STRUCT_END


43 
u32_t
 
	tt˝_£q
;

49 
PACK_STRUCT_BEGIN


50 
	st˝hdr


52 
u_sh‹t
 
	mth_•‹t
;

53 
u_sh‹t
 
	mth_dp‹t
;

54 
t˝_£q
 
	mth_£q
;

55 
t˝_£q
 
	mth_ack
;

56 #i‡
deföed
(
NO_CHAR_BITFIELDS
)

57 
u_ch¨
 
	mth_x2_off
;

59 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


60 
	mth_x2
 :4,

61 
	mth_off
:4;

63 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


64 
	mth_off
:4,

65 
	mth_x2
 :4;

68 
u_ch¨
 
	mth_Êags
;

69 
u_sh‹t
 
	mth_wö
;

70 
u_sh‹t
 
	mth_sum
;

71 
u_sh‹t
 
	mth_uΩ
;

73 
	gPACK_STRUCT_END


	@net/lwip/netif/slipif.c

45 
	~"√tif/¶ùif.h
"

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_HAVE_SLIPIF


50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/sys.h
"

53 
	~"lwù/°©s.h
"

54 
	~"lwù/¢mp.h
"

55 
	~"lwù/sio.h
"

57 
	#SLIP_END
 0300

	)

58 
	#SLIP_ESC
 0333

	)

59 
	#SLIP_ESC_END
 0334

	)

60 
	#SLIP_ESC_ESC
 0335

	)

62 
	#MAX_SIZE
 1500

	)

74 
îr_t


75 
	$¶ùif_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr
 *
ùaddr
)

77 
pbuf
 *
q
;

78 
u16_t
 
i
;

79 
u8_t
 
c
;

81 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

82 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

83 
	`LWIP_ASSERT
("∞!NULL", (
p
 !
NULL
));

85 
	`LWIP_UNUSED_ARG
(
ùaddr
);

88 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

90 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

91 
i
 = 0; i < 
q
->
Àn
; i++) {

92 
c
 = ((
u8_t
 *)
q
->
∑ylﬂd
)[
i
];

93 
c
) {

94 
SLIP_END
:

95 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

96 
	`sio_£nd
(
SLIP_ESC_END
, 
√tif
->
°©e
);

98 
SLIP_ESC
:

99 
	`sio_£nd
(
SLIP_ESC
, 
√tif
->
°©e
);

100 
	`sio_£nd
(
SLIP_ESC_ESC
, 
√tif
->
°©e
);

103 
	`sio_£nd
(
c
, 
√tif
->
°©e
);

108 
	`sio_£nd
(
SLIP_END
, 
√tif
->
°©e
);

109  
ERR_OK
;

110 
	}
}

120 
pbuf
 *

121 
	$¶ùif_öput
(
√tif
 *netif)

123 
u8_t
 
c
;

125 
pbuf
 *
p
, *
q
;

126 
u16_t
 
ªcved
;

127 
u16_t
 
i
;

129 
	`LWIP_ASSERT
("√ti‡!NULL", (
√tif
 !
NULL
));

130 
	`LWIP_ASSERT
("√tif->°©ê!NULL", (
√tif
->
°©e
 !
NULL
));

132 
q
 = 
p
 = 
NULL
;

133 
ªcved
 = 
i
 = 0;

134 
c
 = 0;

137 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

138 
c
) {

139 
SLIP_END
:

140 i‡(
ªcved
 > 0) {

143 
	`pbuf_ªÆloc
(
q
, 
ªcved
);

145 
	`LINK_STATS_INC
(
lök
.
ªcv
);

147 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif: GotÖacket\n"));

148  
q
;

152 
SLIP_ESC
:

153 
c
 = 
	`sio_ªcv
(
√tif
->
°©e
);

154 
c
) {

155 
SLIP_ESC_END
:

156 
c
 = 
SLIP_END
;

158 
SLIP_ESC_ESC
:

159 
c
 = 
SLIP_ESC
;

166 i‡(
p
 =
NULL
) {

168 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:álloc\n"));

169 
p
 = 
	`pbuf_Æloc
(
PBUF_LINK
, 
PBUF_POOL_BUFSIZE
, 
PBUF_POOL
);

171 i‡(
p
 =
NULL
) {

172 
	`LINK_STATS_INC
(
lök
.
dr›
);

173 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("slipif_input:ÇoÇewÖbuf! (DROP)\n"));

178 i‡(
q
 !
NULL
) {

180 
	`pbuf_ˇt
(
q
, 
p
);

183 
q
 = 
p
;

188 i‡((
p
 !
NULL
Ë&& (
ªcved
 <
MAX_SIZE
)) {

189 ((
u8_t
 *)
p
->
∑ylﬂd
)[
i
] = 
c
;

190 
ªcved
++;

191 
i
++;

192 i‡(
i
 >
p
->
Àn
) {

194 
i
 = 0;

195 i‡(
p
->
√xt
 !
NULL
 &&Ö->√xt->
Àn
 > 0) {

197 
p
 =Ö->
√xt
;

201 
p
 = 
NULL
;

208  
NULL
;

209 
	}
}

211 #i‡!
NO_SYS


220 
	$¶ùif_lo›
(*
nf
)

222 
pbuf
 *
p
;

223 
√tif
 *√ti‡(√ti‡*)
nf
;

226 
p
 = 
	`¶ùif_öput
(
√tif
);

227 i‡(
p
 !
NULL
) {

228 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

229 
	`pbuf_‰ì
(
p
);

230 
p
 = 
NULL
;

234 
	}
}

250 
îr_t


251 
	$¶ùif_öô
(
√tif
 *netif)

254 
	`LWIP_DEBUGF
(
SLIP_DEBUG
, ("¶ùif_öô:Çëif->num=%"
U16_F
"\n", (
u16_t
)
√tif
->
num
));

256 
√tif
->
«me
[0] = 's';

257 
√tif
->
«me
[1] = 'l';

258 
√tif
->
ouçut
 = 
¶ùif_ouçut
;

259 
√tif
->
mtu
 = 
MAX_SIZE
;

260 
√tif
->
Êags
 = 
NETIF_FLAG_POINTTOPOINT
;

263 
√tif
->
°©e
 = 
	`sio_›í
“ëif->
num
);

264 i‡(!
√tif
->
°©e
) {

266  
ERR_IF
;

273 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_¶ù
, 0);

276 
	`sys_thªad_√w
(
SLIPIF_THREAD_NAME
, 
¶ùif_lo›
, 
√tif
, 
SLIPIF_THREAD_STACKSIZE
, 
SLIPIF_THREAD_PRIO
);

277  
ERR_OK
;

278 
	}
}

	@net/ns.h

1 
	~<öc/ns.h
>

2 
	~<öc/lib.h
>

4 
	#IP
 "10.0.2.15"

	)

5 
	#MASK
 "255.255.255.0"

	)

6 
	#DEFAULT
 "10.0.2.2"

	)

8 
	#TIMER_INTERVAL
 250

	)

11 
	#QUEUE_SIZE
 20

	)

12 
	#REQVA
 (0x0ffff000 - 
QUEUE_SIZE
 * 
PGSIZE
)

	)

15 
timî
(
ívid_t
 
ns_ívid
, 
uöt32_t
 
öôül_to
);

18 
öput
(
ívid_t
 
ns_ívid
);

21 
ouçut
(
ívid_t
 
ns_ívid
);

	@net/output.c

1 
	~"ns.h
"

3 
Nsùc
 
nsùcbuf
;

6 
	$ouçut
(
ívid_t
 
ns_ívid
)

8 
bö¨y«me
 = "ns_output";

13 
	}
}

	@net/serv.c

6 
	~<öc/x86.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/ív.h
>

9 
	~<öc/ns.h
>

10 
	~<öc/lib.h
>

12 
	~<¨ch/≥º‹.h
>

13 
	~<¨ch/thªad.h
>

14 
	~<lwù/sockës.h
>

15 
	~<lwù/√tif.h
>

16 
	~<lwù/°©s.h
>

17 
	~<lwù/sys.h
>

18 
	~<lwù/t˝.h
>

19 
	~<lwù/udp.h
>

20 
	~<lwù/dh˝.h
>

21 
	~<lwù/t˝ù.h
>

22 
	~<lwù/°©s.h
>

23 
	~<lwù/√tbuf.h
>

24 
	~<√tif/ëh¨p.h
>

25 
	~<jif/jif.h
>

27 
	~"ns.h
"

30 
	gî∫o
;

32 
√tif
 
	gnif
;

34 
	#debug
 0

	)

36 
	stimî_thªad
 {

37 
uöt32_t
 
	mm£c
;

38 (*
	mfunc
)();

39 c⁄° *
	m«me
;

42 
timî_thªad
 
	gt_¨p
;

43 
timî_thªad
 
	gt_t˝f
;

44 
timî_thªad
 
	gt_t˝s
;

46 
ívid_t
 
	gtimî_ívid
;

47 
ívid_t
 
	göput_ívid
;

48 
ívid_t
 
	gouçut_ívid
;

50 
boﬁ
 
	gbu£
[
QUEUE_SIZE
];

51 
	$√xt_i
(
i
Ë{  (i+1Ë% 
QUEUE_SIZE
; 
	}
}

52 
	$¥ev_i
(
i
Ë{  (ò? i-1 : 
QUEUE_SIZE
-1); 
	}
}

55 
	$gë_buf„r
() {

56 *
va
;

58 
i
;

59 
i
 = 0; i < 
QUEUE_SIZE
; i++)

60 i‡(!
bu£
[
i
]) ;

62 i‡(
i
 =
QUEUE_SIZE
) {

63 
	`∑nic
("NS: buffer overflow");

67 
va
 = (*)(
REQVA
 + 
i
 * 
PGSIZE
);

68 
bu£
[
i
] = 1;

70  
va
;

71 
	}
}

74 
	$put_buf„r
(*
va
) {

75 
i
 = ((
uöt32_t
)
va
 - 
REQVA
Ë/ 
PGSIZE
;

76 
bu£
[
i
] = 0;

77 
	}
}

80 
	$lwù_öô
(
√tif
 *
nif
, *
if_°©e
,

81 
uöt32_t
 
öô_addr
, uöt32_à
öô_mask
, uöt32_à
öô_gw
)

83 
ù_addr
 
ùaddr
, 
√tmask
, 
g©eway
;

84 
ùaddr
.
addr
 = 
öô_addr
;

85 
√tmask
.
addr
 = 
öô_mask
;

86 
g©eway
.
addr
 = 
öô_gw
;

88 i‡(0 =
	`√tif_add
(
nif
, &
ùaddr
, &
√tmask
, &
g©eway
,

89 
if_°©e
,

90 
jif_öô
,

91 
ù_öput
))

92 
	`∑nic
("lwip_init:Érror inÇetif_add\n");

94 
	`√tif_£t_deÁu…
(
nif
);

95 
	`√tif_£t_up
(
nif
);

96 
	}
}

98 
__©åibuã__
((
n‹ëu∫
))

99 
	$√t_timî
(
uöt32_t
 
¨g
)

101 
timî_thªad
 *
t
 = (timî_thªad *Ë
¨g
;

104 
uöt32_t
 
cur
 = 
	`sys_time_m£c
();

106 
	`lwù_c‹e_lock
();

107 
t
->
	`func
();

108 
	`lwù_c‹e_u∆ock
();

110 
	`thªad_waô
(0, 0, 
cur
 + 
t
->
m£c
);

112 
	}
}

115 
°¨t_timî
(
timî_thªad
 *
t
, (*
func
)(), c⁄° *
«me
, 
m£c
)

117 
t
->
m£c
 = msec;

118 
t
->
func
 = func;

119 
t
->
«me
 =Çame;

120 
r
 = 
	`thªad_¸óã
(0, 
«me
, &
√t_timî
, (
uöt32_t
)
t
);

121 i‡(
r
 < 0)

122 
	`∑nic
("ˇ¬Ÿ cª©êtimîÅhªad: %s", 
	`e2s
(
r
));

123 
	}
}

126 
	$t˝ù_öô_d⁄e
(*
¨g
)

128 
uöt32_t
 *
d⁄e
 = 
¨g
;

129 *
d⁄e
 = 1;

130 
	`thªad_wakeup
(
d⁄e
);

131 
	}
}

134 
	$£rve_öô
(
uöt32_t
 
ùaddr
, uöt32_à
√tmask
, uöt32_à
gw
)

136 
r
;

137 
	`lwù_c‹e_lock
();

139 
uöt32_t
 
d⁄e
 = 0;

140 
	`t˝ù_öô
(&
t˝ù_öô_d⁄e
, &
d⁄e
);

141 
	`lwù_c‹e_u∆ock
();

142 
	`thªad_waô
(&
d⁄e
, 0, (
uöt32_t
)~0);

143 
	`lwù_c‹e_lock
();

145 
	`lwù_öô
(&
nif
, &
ouçut_ívid
, 
ùaddr
, 
√tmask
, 
gw
);

147 
	`°¨t_timî
(&
t_¨p
, &
ëh¨p_tmr
, "¨∞timî", 
ARP_TMR_INTERVAL
);

148 
	`°¨t_timî
(&
t_t˝f
, &
t˝_Á°tmr
, "t˝ fÅimî", 
TCP_FAST_INTERVAL
);

149 
	`°¨t_timî
(&
t_t˝s
, &
t˝_¶owtmr
, "t˝ sÅimî", 
TCP_SLOW_INTERVAL
);

151 
ö_addr
 
ü
 = {
ùaddr
};

152 
	`˝rötf
("ns: %02x:%02x:%02x:%02x:%02x:%02x"

154 
nif
.
hwaddr
[0],Çif.hwaddr[1],Çif.hwaddr[2],

155 
nif
.
hwaddr
[3],Çif.hwaddr[4],Çif.hwaddr[5],

156 
	`öë_¡ﬂ
(
ü
));

158 
	`lwù_c‹e_u∆ock
();

160 
	`˝rötf
("NS: TCP/IP initialized.\n");

161 
	}
}

164 
	$¥o˚ss_timî
(
ívid_t
 
ívid
) {

165 
uöt32_t
 
°¨t
, 
now
, 
to
;

167 i‡(
ívid
 !
timî_ívid
) {

168 
	`˝rötf
("NS:Ñe˚ivedÅimî i¡îru± fromÉnvid %xÇŸÅimîÉnv\n", 
ívid
);

172 
°¨t
 = 
	`sys_time_m£c
();

173 
	`thªad_yõld
();

174 
now
 = 
	`sys_time_m£c
();

176 
to
 = 
TIMER_INTERVAL
 - (
now
 - 
°¨t
);

177 
	`ùc_£nd
(
ívid
, 
to
, 0, 0);

178 
	}
}

180 
	s°_¨gs
 {

181 
öt32_t
 
	mªqno
;

182 
uöt32_t
 
	mwhom
;

183 
Nsùc
 *
	mªq
;

187 
	$£rve_thªad
(
uöt32_t
 
a
) {

188 
°_¨gs
 *
¨gs
 = (°_¨g†*)
a
;

189 
Nsùc
 *
ªq
 = 
¨gs
->req;

190 
r
;

192 
¨gs
->
ªqno
) {

193 
NSREQ_ACCEPT
:

195 
N§ë_ac˚±
 
ªt
;

196 
r
 = 
	`lwù_ac˚±
(
ªq
->
ac˚±
.
ªq_s
, &
ªt
.
ªt_addr
,

197 &
ªt
.
ªt_addæí
);

198 
	`memmove
(
ªq
, &
ªt
, Ñet);

201 
NSREQ_BIND
:

202 
r
 = 
	`lwù_böd
(
ªq
->
böd
.
ªq_s
, &ªq->böd.
ªq_«me
,

203 
ªq
->
böd
.
ªq_«mñí
);

205 
NSREQ_SHUTDOWN
:

206 
r
 = 
	`lwù_shutdown
(
ªq
->
shutdown
.
ªq_s
,Ñeq->shutdown.
ªq_how
);

208 
NSREQ_CLOSE
:

209 
r
 = 
	`lwù_˛o£
(
ªq
->
˛o£
.
ªq_s
);

211 
NSREQ_CONNECT
:

212 
r
 = 
	`lwù_c⁄√˘
(
ªq
->
c⁄√˘
.
ªq_s
, &ªq->c⁄√˘.
ªq_«me
,

213 
ªq
->
c⁄√˘
.
ªq_«mñí
);

215 
NSREQ_LISTEN
:

216 
r
 = 
	`lwù_li°í
(
ªq
->
li°í
.
ªq_s
,Ñeq->li°í.
ªq_backlog
);

218 
NSREQ_RECV
:

221 
r
 = 
	`lwù_ªcv
(
ªq
->
ªcv
.
ªq_s
,Ñeq->
ªcvRë
.
ªt_buf
,

222 
ªq
->
ªcv
.
ªq_Àn
,Ñeq->ªcv.
ªq_Êags
);

224 
NSREQ_SEND
:

225 
r
 = 
	`lwù_£nd
(
ªq
->
£nd
.
ªq_s
, &ªq->£nd.
ªq_buf
,

226 
ªq
->
£nd
.
ªq_size
,Ñeq->£nd.
ªq_Êags
);

228 
NSREQ_SOCKET
:

229 
r
 = 
	`lwù_sockë
(
ªq
->
sockë
.
ªq_domaö
,Ñeq->sockë.
ªq_ty≥
,

230 
ªq
->
sockë
.
ªq_¥Ÿocﬁ
);

232 
NSREQ_INPUT
:

233 
	`jif_öput
(&
nif
, (*)&
ªq
->
pkt
);

234 
r
 = 0;

237 
	`˝rötf
("InvÆidÑeque° codê%d from %08x\n", 
¨gs
->
whom
,árgs->
ªq
);

238 
r
 = -
E_INVAL
;

242 i‡(
r
 == -1) {

243 
buf
[100];

244 
	`¢¥ötf
(
buf
,  buf, "n†ªqÅy≥ %d", 
¨gs
->
ªqno
);

245 
	`≥º‹
(
buf
);

248 i‡(
¨gs
->
ªqno
 !
NSREQ_INPUT
)

249 
	`ùc_£nd
(
¨gs
->
whom
, 
r
, 0, 0);

251 
	`put_buf„r
(
¨gs
->
ªq
);

252 
	`sys_∑ge_unm≠
(0, (*Ë
¨gs
->
ªq
);

253 
	`‰ì
(
¨gs
);

254 
	}
}

257 
	$£rve
() {

258 
öt32_t
 
ªqno
;

259 
uöt32_t
 
whom
;

260 
i
, 
≥rm
;

261 *
va
;

267 
i
 = 0; 
	`thªad_wakeups_≥ndög
() && i < 32; ++i)

268 
	`thªad_yõld
();

270 
≥rm
 = 0;

271 
va
 = 
	`gë_buf„r
();

272 
ªqno
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, (*Ë
va
, &
≥rm
);

273 i‡(
debug
) {

274 
	`˝rötf
("n†ªq %d from %08x\n", 
ªqno
, 
whom
);

278 i‡(
ªqno
 =
NSREQ_TIMER
) {

279 
	`¥o˚ss_timî
(
whom
);

280 
	`put_buf„r
(
va
);

285 i‡(!(
≥rm
 & 
PTE_P
)) {

286 
	`˝rötf
("InvÆidÑeque° from %08x:Çÿ¨gumíà∑ge\n", 
whom
);

292 
°_¨gs
 *
¨gs
 = 
	`mÆloc
((st_args));

293 i‡(!
¨gs
)

294 
	`∑nic
("couldÇotállocateÅhreadárgs structure");

296 
¨gs
->
ªqno
 =Ñeqno;

297 
¨gs
->
whom
 = whom;

298 
¨gs
->
ªq
 = 
va
;

300 
	`thªad_¸óã
(0, "£rve_thªad", 
£rve_thªad
, (
uöt32_t
)
¨gs
);

301 
	`thªad_yõld
();

303 
	}
}

306 
	$tmaö
(
uöt32_t
 
¨g
) {

307 
	`£rve_öô
(
	`öë_addr
(
IP
),

308 
	`öë_addr
(
MASK
),

309 
	`öë_addr
(
DEFAULT
));

310 
	`£rve
();

311 
	}
}

314 
	$umaö
()

316 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

318 
bö¨y«me
 = "ns";

321 
timî_ívid
 = 
	`f‹k
();

322 i‡(
timî_ívid
 < 0)

323 
	`∑nic
("error forking");

324 i‡(
timî_ívid
 == 0) {

325 
	`timî
(
ns_ívid
, 
TIMER_INTERVAL
);

331 
öput_ívid
 = 
	`f‹k
();

332 i‡(
öput_ívid
 < 0)

333 
	`∑nic
("error forking");

334 i‡(
öput_ívid
 == 0) {

335 
	`öput
(
ns_ívid
);

341 
ouçut_ívid
 = 
	`f‹k
();

342 i‡(
ouçut_ívid
 < 0)

343 
	`∑nic
("error forking");

344 i‡(
ouçut_ívid
 == 0) {

345 
	`ouçut
(
ns_ívid
);

351 
	`thªad_öô
();

352 
	`thªad_¸óã
(0, "maö", 
tmaö
, 0);

353 
	`thªad_yõld
();

355 
	}
}

	@net/testinput.c

1 
	~"ns.h
"

2 
	~<√tif/ëh¨p.h
>

4 
ívid_t
 
	gouçut_ívid
;

5 
ívid_t
 
	göput_ívid
;

7 
jif_pkt
 *
	gpkt
 = (jif_pkt*)
REQVA
;

11 
	$™noun˚
()

19 
uöt8_t
 
mac
[6] = {0x52, 0x54, 0x00, 0x12, 0x34, 0x56};

20 
uöt32_t
 
myù
 = 
	`öë_addr
(
IP
);

21 
uöt32_t
 
gwù
 = 
	`öë_addr
(
DEFAULT
);

22 
r
;

24 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
pkt
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

25 
	`∑nic
("sys_∑ge_m≠: %e", 
r
);

27 
ëh¨p_hdr
 *
¨p
 = (ëh¨p_hdr*)
pkt
->
jp_d©a
;

28 
pkt
->
jp_Àn
 = (*
¨p
);

30 
	`mem£t
(
¨p
->
ëhhdr
.
de°
.
addr
, 0xff, 
ETHARP_HWADDR_LEN
);

31 
	`mem˝y
(
¨p
->
ëhhdr
.
§c
.
addr
, 
mac
, 
ETHARP_HWADDR_LEN
);

32 
¨p
->
ëhhdr
.
ty≥
 = 
	`ht⁄s
(
ETHTYPE_ARP
);

33 
¨p
->
hwty≥
 = 
	`ht⁄s
(1);

34 
¨p
->
¥Ÿo
 = 
	`ht⁄s
(
ETHTYPE_IP
);

35 
¨p
->
_hwÀn_¥Ÿﬁí
 = 
	`ht⁄s
((
ETHARP_HWADDR_LEN
 << 8) | 4);

36 
¨p
->
›code
 = 
	`ht⁄s
(
ARP_REQUEST
);

37 
	`mem˝y
(
¨p
->
shwaddr
.
addr
, 
mac
, 
ETHARP_HWADDR_LEN
);

38 
	`mem˝y
(
¨p
->
sùaddr
.
addrw
, &
myù
, 4);

39 
	`mem£t
(
¨p
->
dhwaddr
.
addr
, 0x00, 
ETHARP_HWADDR_LEN
);

40 
	`mem˝y
(
¨p
->
dùaddr
.
addrw
, &
gwù
, 4);

42 
	`ùc_£nd
(
ouçut_ívid
, 
NSREQ_OUTPUT
, 
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

43 
	`sys_∑ge_unm≠
(0, 
pkt
);

44 
	}
}

47 
	$hexdump
(c⁄° *
¥efix
, c⁄° *
d©a
, 
Àn
)

49 
i
;

50 
buf
[80];

51 *
íd
 = 
buf
 + (buf);

52 *
out
 = 
NULL
;

53 
i
 = 0; i < 
Àn
; i++) {

54 i‡(
i
 % 16 == 0)

55 
out
 = 
buf
 + 
	`¢¥ötf
(buf, 
íd
 - buf,

56 "%s%04x ", 
¥efix
, 
i
);

57 
out
 +
	`¢¥ötf
(out, 
íd
 - out, "%02x", ((
uöt8_t
*)
d©a
)[
i
]);

58 i‡(
i
 % 16 =15 || i =
Àn
 - 1)

59 
	`˝rötf
("%.*s\n", 
out
 - 
buf
, buf);

60 i‡(
i
 % 2 == 1)

61 *(
out
++) = ' ';

62 i‡(
i
 % 16 == 7)

63 *(
out
++) = ' ';

65 
	}
}

68 
	$umaö
()

70 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

71 
i
, 
r
;

73 
bö¨y«me
 = "testinput";

75 
ouçut_ívid
 = 
	`f‹k
();

76 i‡(
ouçut_ívid
 < 0)

77 
	`∑nic
("error forking");

78 i‡(
ouçut_ívid
 == 0) {

79 
	`ouçut
(
ns_ívid
);

83 
öput_ívid
 = 
	`f‹k
();

84 i‡(
öput_ívid
 < 0)

85 
	`∑nic
("error forking");

86 i‡(
öput_ívid
 == 0) {

87 
	`öput
(
ns_ívid
);

91 
	`˝rötf
("Sending ARPánnouncement...\n");

92 
	`™noun˚
();

94 
	`˝rötf
("Waiting forÖackets...\n");

96 
ívid_t
 
whom
;

97 
≥rm
;

99 
öt32_t
 
ªq
 = 
	`ùc_ªcv
((öt32_à*)&
whom
, 
pkt
, &
≥rm
);

100 i‡(
ªq
 < 0)

101 
	`∑nic
("ùc_ªcv: %e", 
ªq
);

102 i‡(
whom
 !
öput_ívid
)

103 
	`∑nic
("IPC from u√x≥˘edÉnvú⁄míà%08x", 
whom
);

104 i‡(
ªq
 !
NSREQ_INPUT
)

105 
	`∑nic
("U√x≥˘ed IPC %d", 
ªq
);

107 
	`hexdump
("öput: ", 
pkt
->
jp_d©a
,Ökt->
jp_Àn
);

108 
	`˝rötf
("\n");

110 
	}
}

	@net/testoutput.c

1 
	~"ns.h
"

3 #i‚de‡
TESTOUTPUT_COUNT


4 
	#TESTOUTPUT_COUNT
 10

	)

7 
ívid_t
 
	gouçut_ívid
;

9 
jif_pkt
 *
	gpkt
 = (jif_pkt*)
REQVA
;

13 
	$umaö
()

15 
ívid_t
 
ns_ívid
 = 
	`sys_gëívid
();

16 
i
, 
r
;

18 
bö¨y«me
 = "testoutput";

20 
ouçut_ívid
 = 
	`f‹k
();

21 i‡(
ouçut_ívid
 < 0)

22 
	`∑nic
("error forking");

23 i‡(
ouçut_ívid
 == 0) {

24 
	`ouçut
(
ns_ívid
);

28 
i
 = 0; i < 
TESTOUTPUT_COUNT
; i++) {

29 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
pkt
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

30 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

31 
pkt
->
jp_Àn
 = 
	`¢¥ötf
’kt->
jp_d©a
,

32 
PGSIZE
 - (
pkt
->
jp_Àn
),

33 "Packë %02d", 
i
);

34 
	`˝rötf
("TønsmôtögÖackë %d\n", 
i
);

35 
	`ùc_£nd
(
ouçut_ívid
, 
NSREQ_OUTPUT
, 
pkt
, 
PTE_P
|
PTE_W
|
PTE_U
);

36 
	`sys_∑ge_unm≠
(0, 
pkt
);

40 
i
 = 0; i < 
TESTOUTPUT_COUNT
*2; i++)

41 
	`sys_yõld
();

42 
	}
}

	@net/timer.c

1 
	~"ns.h
"

4 
	$timî
(
ívid_t
 
ns_ívid
, 
uöt32_t
 
öôül_to
) {

5 
uöt32_t
 
°›
 = 
	`sys_time_m£c
(Ë+ 
öôül_to
;

7 
bö¨y«me
 = "ns_timer";

10 
	`sys_time_m£c
(Ë< 
°›
) {

11 
	`sys_yõld
();

14 
	`ùc_£nd
(
ns_ívid
, 
NSREQ_TIMER
, 0, 0);

17 
uöt32_t
 
to
, 
whom
;

18 
to
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, 0, 0);

20 i‡(
whom
 !
ns_ívid
) {

21 
	`˝rötf
("NS TIMER:ÅimîÅhªad gŸ IPC mesßgê‰omÉnv %xÇŸ NS\n", 
whom
);

25 
°›
 = 
	`sys_time_m£c
(Ë+ 
to
;

29 
	}
}

	@user/echosrv.c

1 
	~<öc/lib.h
>

2 
	~<lwù/sockës.h
>

3 
	~<lwù/öë.h
>

5 
	#PORT
 7

	)

7 
	#BUFFSIZE
 32

	)

8 
	#MAXPENDING
 5

9 

	)

11 
	$dõ
(*
m
)

13 
	`˝rötf
("%s\n", 
m
);

14 
	`exô
();

15 
	}
}

18 
	$h™dÀ_˛õ¡
(
sock
)

20 
buf„r
[
BUFFSIZE
];

21 
ª˚ived
 = -1;

23 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

24 
	`dõ
("FailedÅoÑeceive initial bytes from client");

27 
ª˚ived
 > 0) {

29 i‡(
	`wrôe
(
sock
, 
buf„r
, 
ª˚ived
) !=Ñeceived)

30 
	`dõ
("FailedÅo send bytesÅo client");

33 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

34 
	`dõ
("FailedÅoÑeceiveádditional bytes from client");

36 
	`˛o£
(
sock
);

37 
	}
}

40 
	$umaö
()

42 
£rvîsock
, 
˛õ¡sock
;

43 
sockaddr_ö
 
echo£rvî
, 
echo˛õ¡
;

44 
buf„r
[
BUFFSIZE
];

45 
echﬁí
;

46 
ª˚ived
 = 0;

49 i‡((
£rvîsock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

50 
	`dõ
("FailedÅo create socket");

52 
	`˝rötf
("opened socket\n");

55 
	`mem£t
(&
echo£rvî
, 0, (echoserver));

56 
echo£rvî
.
sö_Ámûy
 = 
AF_INET
;

57 
echo£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

58 
echo£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

60 
	`˝rötf
("tryingÅo bind\n");

63 i‡(
	`böd
(
£rvîsock
, (
sockaddr
 *Ë&
echo£rvî
,

64 (
echo£rvî
)) < 0) {

65 
	`dõ
("FailedÅo bindÅhe server socket");

69 i‡(
	`li°í
(
£rvîsock
, 
MAXPENDING
) < 0)

70 
	`dõ
("FailedÅoÜisten on server socket");

72 
	`˝rötf
("bound\n");

76 
˛õ¡Àn
 = (
echo˛õ¡
);

78 i‡((
˛õ¡sock
 =

79 
	`ac˚±
(
£rvîsock
, (
sockaddr
 *Ë&
echo˛õ¡
,

80 &
˛õ¡Àn
)) < 0) {

81 
	`dõ
("FailedÅoáccept client connection");

83 
	`˝rötf
("Clõ¡ c⁄√˘ed: %s\n", 
	`öë_¡ﬂ
(
echo˛õ¡
.
sö_addr
));

84 
	`h™dÀ_˛õ¡
(
˛õ¡sock
);

87 
	`˛o£
(
£rvîsock
);

90 
	}
}

	@user/echotest.c

1 
	~<öc/lib.h
>

2 
	~<lwù/sockës.h
>

3 
	~<lwù/öë.h
>

5 
	#BUFFSIZE
 32

	)

6 
	#IPADDR
 "10.0.2.15"

	)

7 
	#PORT
 10000

	)

9 *
	gmsg
 = "Hello world!\n";

12 
	$dõ
(*
m
)

14 
	`˝rötf
("%s\n", 
m
);

15 
	`exô
();

16 
	}
}

18 
	$umaö
()

20 
sock
;

21 
sockaddr_ö
 
echo£rvî
;

22 
buf„r
[
BUFFSIZE
];

23 
echﬁí
;

24 
ª˚ived
 = 0;

26 
	`˝rötf
("ConnectingÅo:\n");

27 
	`˝rötf
("\tùáddªs†%†%x\n", 
IPADDR
, 
	`öë_addr
(IPADDR));

30 i‡((
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

31 
	`dõ
("FailedÅo create socket");

33 
	`˝rötf
("opened socket\n");

36 
	`mem£t
(&
echo£rvî
, 0, (echoserver));

37 
echo£rvî
.
sö_Ámûy
 = 
AF_INET
;

38 
echo£rvî
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
IPADDR
);

39 
echo£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

41 
	`˝rötf
("tryingÅo connectÅo server\n");

44 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *Ë&
echo£rvî
, (echoserver)) < 0)

45 
	`dõ
("FailedÅo connect with server");

47 
	`˝rötf
("connectedÅo server\n");

50 
echﬁí
 = 
	`°æí
(
msg
);

51 i‡(
	`wrôe
(
sock
, 
msg
, 
echﬁí
) !=Écholen)

52 
	`dõ
("Mismatch inÇumber of sent bytes");

55 
	`˝rötf
("Received: \n");

56 
ª˚ived
 < 
echﬁí
) {

57 
byãs
 = 0;

58 i‡((
byãs
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
-1)) < 1) {

59 
	`dõ
("FailedÅoÑeceive bytes from server");

61 
ª˚ived
 +
byãs
;

62 
buf„r
[
byãs
] = '\0';

63 
	`˝rötf
(
buf„r
);

65 
	`˝rötf
("\n");

67 
	`˛o£
(
sock
);

69 
	}
}

	@user/forktree.c

3 
	~<öc/lib.h
>

5 
	#DEPTH
 3

	)

7 
f‹kåì
(c⁄° *
cur
);

10 
	$f‹kchûd
(c⁄° *
cur
, 
bønch
)

12 
nxt
[
DEPTH
+1];

14 i‡(
	`°æí
(
cur
Ë>
DEPTH
)

17 
	`¢¥ötf
(
nxt
, 
DEPTH
+1, "%s%c", 
cur
, 
bønch
);

18 i‡(
	`sf‹k
() == 0) {

19 
	`f‹kåì
(
nxt
);

20 
	`exô
();

22 
	}
}

25 
	$f‹kåì
(c⁄° *
cur
)

27 
	`˝rötf
("%04x: Iám '%s'\n", 
	`sys_gëívid
(), 
cur
);

29 
	`f‹kchûd
(
cur
, '0');

30 
	`f‹kchûd
(
cur
, '1');

31 
	}
}

34 
	$umaö
()

36 
	`f‹kåì
("");

37 
	}
}

	@user/hello.c

2 
	~<öc/lib.h
>

5 
	$umaö
()

7 
	`˝rötf
("hello, world\n");

8 
	`˝rötf
("òamÉnvú⁄míà%08x\n", 
ív
->
ív_id
);

9 
	}
}

	@user/httpd.c

1 
	~<öc/lib.h
>

2 
	~<lwù/sockës.h
>

3 
	~<lwù/öë.h
>

5 
	#PORT
 80

	)

6 
	#VERSION
 "0.1"

	)

7 
	#HTTP_VERSION
 "1.0"

	)

9 
	#E_BAD_REQ
 1000

	)

11 
	#BUFFSIZE
 512

	)

12 
	#MAXPENDING
 5

13 

	)

14 
	shâp_ªque°
 {

15 
	msock
;

16 *
	muæ
;

17 *
	mvîsi⁄
;

20 
	sª•⁄˚_hódî
 {

21 
	mcode
;

22 *
	mhódî
;

25 
ª•⁄˚_hódî
 
	ghódîs
[] = {

26 { 200, "HTTP/" 
HTTP_VERSION
 " 200 OK\r\n"

27 "Sîvî: jhâpd/" 
VERSION
 "\r\n"},

31 
	sîr‹_mesßges
 {

32 
	mcode
;

33 *
	mmsg
;

36 
îr‹_mesßges
 
	gîr‹s
[] = {

42 
	$dõ
(*
m
)

44 
	`˝rötf
("%s\n", 
m
);

45 
	`exô
();

46 
	}
}

49 
	$ªq_‰ì
(
hâp_ªque°
 *
ªq
)

51 
	`‰ì
(
ªq
->
uæ
);

52 
	`‰ì
(
ªq
->
vîsi⁄
);

53 
	}
}

56 
	$£nd_hódî
(
hâp_ªque°
 *
ªq
, 
code
)

58 
ª•⁄˚_hódî
 *
h
 = 
hódîs
;

59 
h
->
code
 !0 && h->
hódî
!= 0) {

60 i‡(
h
->
code
 == code)

62 
h
++;

65 i‡(
h
->
code
 == 0)

68 
Àn
 = 
	`°æí
(
h
->
hódî
);

69 i‡(
	`wrôe
(
ªq
->
sock
, 
h
->
hódî
, 
Àn
) !=Üen) {

70 
	`dõ
("FailedÅo send bytesÅo client");

74 
	}
}

77 
	$£nd_d©a
(
hâp_ªque°
 *
ªq
, 
fd
)

80 
	`∑nic
("send_dataÇot implemented");

81 
	}
}

84 
	$£nd_size
(
hâp_ªque°
 *
ªq
, 
off_t
 
size
)

86 
buf
[64];

87 
r
;

89 
r
 = 
	`¢¥ötf
(
buf
, 64, "C⁄ã¡-Lígth: %ld\r\n", ()
size
);

90 i‡(
r
 > 63)

91 
	`∑nic
("bufferÅoo small!");

93 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

97 
	}
}

100 
	$mime_ty≥
(c⁄° *
fûe
)

104 
	}
}

107 
	$£nd_c⁄ã¡_ty≥
(
hâp_ªque°
 *
ªq
)

109 
buf
[128];

110 
r
;

111 c⁄° *
ty≥
;

113 
ty≥
 = 
	`mime_ty≥
(
ªq
->
uæ
);

114 i‡(!
ty≥
)

117 
r
 = 
	`¢¥ötf
(
buf
, 128, "C⁄ã¡-Ty≥: %s\r\n", 
ty≥
);

118 i‡(
r
 > 127)

119 
	`∑nic
("bufferÅoo small!");

121 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

125 
	}
}

128 
	$£nd_hódî_fö
(
hâp_ªque°
 *
ªq
)

130 *
fö
 = "\r\n";

131 
fö_Àn
 = 
	`°æí
(
fö
);

133 i‡(
	`wrôe
(
ªq
->
sock
, 
fö
, 
fö_Àn
) != fin_len)

137 
	}
}

141 
	$hâp_ªque°_∑r£
(
hâp_ªque°
 *
ªq
, *
ªque°
)

143 c⁄° *
uæ
;

144 c⁄° *
vîsi⁄
;

145 
uæ_Àn
, 
vîsi⁄_Àn
;

147 i‡(!
ªq
)

150 i‡(
	`°∫cmp
(
ªque°
, "GET ", 4) != 0)

151  -
E_BAD_REQ
;

154 
ªque°
 += 4;

157 
uæ
 = 
ªque°
;

158 *
ªque°
 && *request != ' ')

159 
ªque°
++;

160 
uæ_Àn
 = 
ªque°
 - 
uæ
;

162 
ªq
->
uæ
 = 
	`mÆloc
(
uæ_Àn
 + 1);

163 
	`memmove
(
ªq
->
uæ
, uæ, 
uæ_Àn
);

164 
ªq
->
uæ
[
uæ_Àn
] = '\0';

167 
ªque°
++;

169 
vîsi⁄
 = 
ªque°
;

170 *
ªque°
 && *request != '\n')

171 
ªque°
++;

172 
vîsi⁄_Àn
 = 
ªque°
 - 
vîsi⁄
;

174 
ªq
->
vîsi⁄
 = 
	`mÆloc
(
vîsi⁄_Àn
 + 1);

175 
	`memmove
(
ªq
->
vîsi⁄
, vîsi⁄, 
vîsi⁄_Àn
);

176 
ªq
->
vîsi⁄
[
vîsi⁄_Àn
] = '\0';

181 
	}
}

184 
	$£nd_îr‹
(
hâp_ªque°
 *
ªq
, 
code
)

186 
buf
[512];

187 
r
;

189 
îr‹_mesßges
 *
e
 = 
îr‹s
;

190 
e
->
code
 !0 &&É->
msg
 != 0) {

191 i‡(
e
->
code
 == code)

193 
e
++;

196 i‡(
e
->
code
 == 0)

199 
r
 = 
	`¢¥ötf
(
buf
, 512, "HTTP/" 
HTTP_VERSION
" %d %s\r\n"

200 "Sîvî: jhâpd/" 
VERSION
 "\r\n"

205 
e
->
code
,É->
msg
,É->code,É->msg);

207 i‡(
	`wrôe
(
ªq
->
sock
, 
buf
, 
r
) !=Ñ)

211 
	}
}

214 
	$£nd_fûe
(
hâp_ªque°
 *
ªq
)

216 
r
;

217 
off_t
 
fûe_size
 = -1;

218 
fd
;

226 
	`∑nic
("send_fileÇot implemented");

228 i‡((
r
 = 
	`£nd_hódî
(
ªq
, 200)) < 0)

229 
íd
;

231 i‡((
r
 = 
	`£nd_size
(
ªq
, 
fûe_size
)) < 0)

232 
íd
;

234 i‡((
r
 = 
	`£nd_c⁄ã¡_ty≥
(
ªq
)) < 0)

235 
íd
;

237 i‡((
r
 = 
	`£nd_hódî_fö
(
ªq
)) < 0)

238 
íd
;

240 
r
 = 
	`£nd_d©a
(
ªq
, 
fd
);

242 
íd
:

243 
	`˛o£
(
fd
);

244  
r
;

245 
	}
}

248 
	$h™dÀ_˛õ¡
(
sock
)

250 
hâp_ªque°
 
c⁄_d
;

251 
r
;

252 
buf„r
[
BUFFSIZE
];

253 
ª˚ived
 = -1;

254 
hâp_ªque°
 *
ªq
 = &
c⁄_d
;

259 i‡((
ª˚ived
 = 
	`ªad
(
sock
, 
buf„r
, 
BUFFSIZE
)) < 0)

260 
	`∑nic
("failedÅoÑead");

262 
	`mem£t
(
ªq
, 0, (req));

264 
ªq
->
sock
 = sock;

266 
r
 = 
	`hâp_ªque°_∑r£
(
ªq
, 
buf„r
);

267 i‡(
r
 =-
E_BAD_REQ
)

268 
	`£nd_îr‹
(
ªq
, 400);

269 i‡(
r
 < 0)

270 
	`∑nic
("parse failed");

272 
	`£nd_fûe
(
ªq
);

274 
	`ªq_‰ì
(
ªq
);

280 
	`˛o£
(
sock
);

281 
	}
}

284 
	$umaö
()

286 
£rvîsock
, 
˛õ¡sock
;

287 
sockaddr_ö
 
£rvî
, 
˛õ¡
;

289 
bö¨y«me
 = "jhttpd";

292 i‡((
£rvîsock
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
)) < 0)

293 
	`dõ
("FailedÅo create socket");

296 
	`mem£t
(&
£rvî
, 0, (server));

297 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

298 
£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

299 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(
PORT
);

302 i‡(
	`böd
(
£rvîsock
, (
sockaddr
 *Ë&
£rvî
,

303 (
£rvî
)) < 0)

305 
	`dõ
("FailedÅo bindÅhe server socket");

309 i‡(
	`li°í
(
£rvîsock
, 
MAXPENDING
) < 0)

310 
	`dõ
("FailedÅoÜisten on server socket");

312 
	`˝rötf
("Waiting for http connections...\n");

315 
˛õ¡Àn
 = (
˛õ¡
);

317 i‡((
˛õ¡sock
 = 
	`ac˚±
(
£rvîsock
,

318 (
sockaddr
 *Ë&
˛õ¡
,

319 &
˛õ¡Àn
)) < 0)

321 
	`dõ
("FailedÅoáccept client connection");

323 
	`h™dÀ_˛õ¡
(
˛õ¡sock
);

326 
	`˛o£
(
£rvîsock
);

329 
	}
}

	@user/icode.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
fd
, 
n
, 
r
;

7 
buf
[512+1];

9 
bö¨y«me
 = "icode";

11 
	`˝rötf
("icode startup\n");

13 
	`˝rötf
("icode: open /motd\n");

14 i‡((
fd
 = 
	`›í
("/mŸd", 
O_RDONLY
)) < 0)

15 
	`∑nic
("icode: o≥¿/mŸd: %e", 
fd
);

17 
	`˝rötf
("icode:Ñead /motd\n");

18 (
n
 = 
	`ªad
(
fd
, 
buf
,  buf-1)) > 0)

19 
	`sys_˝uts
(
buf
, 
n
);

21 
	`˝rötf
("icode: close /motd\n");

22 
	`˛o£
(
fd
);

24 
	`˝rötf
("icode: spawn /init\n");

25 i‡((
r
 = 
	`•aw∆
("/init", "init", "initarg1", "initarg2", (*)0)) < 0)

26 
	`∑nic
("icode: s∑w¿/öô: %e", 
r
);

28 
	`˝rötf
("icode:Éxiting\n");

29 
	}
}

	@user/idle.c

3 
	~<öc/x86.h
>

4 
	~<öc/lib.h
>

7 
	$umaö
()

9 
bö¨y«me
 = "idle";

17 
	`sys_yõld
();

27 
	`bªakpoöt
();

29 
	}
}

	@user/init.c

1 
	~<öc/lib.h
>

4 
	mmsg1
[5000];

5 
	mmsg2
[1000];

6 } 
	gd©a
 = {

11 
	gbss
[6000];

14 
	$sum
(c⁄° *
s
, 
n
)

16 
i
, 
tŸ
 = 0;

17 
i
 = 0; i < 
n
; i++)

18 
tŸ
 ^
i
 * 
s
[i];

19  
tŸ
;

20 
	}
}

23 
	$umaö
(
¨gc
, **
¨gv
)

25 
i
, 
r
, 
x
, 
w™t
;

27 
	`˝rötf
("init:Ñunning\n");

29 
w™t
 = 0xf989e;

30 i‡((
x
 = 
	`sum
((*)&
d©a
,  d©a)Ë!
w™t
)

31 
	`˝rötf
("init: data isÇot initialized: got sum %08x wanted %08x\n",

32 
x
, 
w™t
);

34 
	`˝rötf
("init: data seems okay\n");

35 i‡((
x
 = 
	`sum
(
bss
,  bss)) != 0)

36 
	`˝rötf
("bs†i†nŸ inôülized: w™ãd sum 0 gŸ %08x\n", 
x
);

38 
	`˝rötf
("init: bss seems okay\n");

40 
	`˝rötf
("init:árgs:");

41 
i
 = 0; i < 
¨gc
; i++)

42 
	`˝rötf
(" '%s'", 
¨gv
[
i
]);

43 
	`˝rötf
("\n");

45 
	`˝rötf
("init:Éxiting\n");

46 
	}
}

	@user/pingpong.c

4 
	~<öc/lib.h
>

7 
	$umaö
()

9 
ívid_t
 
who
;

11 i‡((
who
 = 
	`f‹k
()) != 0) {

13 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

14 
	`ùc_£nd
(
who
, 0, 0, 0);

18 
uöt32_t
 
i
 = 
	`ùc_ªcv
(&
who
, 0, 0);

19 
	`˝rötf
("%x gŸ %d from %x\n", 
	`sys_gëívid
(), 
i
, 
who
);

20 i‡(
i
 == 10)

22 
i
++;

23 
	`ùc_£nd
(
who
, 
i
, 0, 0);

24 i‡(
i
 == 10)

28 
	}
}

	@user/primes.c

11 
	~<öc/lib.h
>

14 
	$¥imïroc
()

16 
i
, 
id
, 
p
;

17 
ívid_t
 
ívid
;

20 
t›
:

21 
p
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

22 
	`˝rötf
("%d ", 
p
);

25 i‡((
id
 = 
	`f‹k
()) < 0)

26 
	`∑nic
("f‹k: %e", 
id
);

27 i‡(
id
 == 0)

28 
t›
;

32 
i
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

33 i‡(
i
 % 
p
)

34 
	`ùc_£nd
(
id
, 
i
, 0, 0);

36 
	}
}

39 
	$umaö
()

41 
i
, 
id
;

44 i‡((
id
 = 
	`f‹k
()) < 0)

45 
	`∑nic
("f‹k: %e", 
id
);

46 i‡(
id
 == 0)

47 
	`¥imïroc
();

50 
i
 = 2; ; i++)

51 
	`ùc_£nd
(
id
, 
i
, 0, 0);

52 
	}
}

	@user/spawnhello.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
ív
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("hello", "hello", 0)) < 0)

9 
	`∑nic
("•awn(hñloËÁûed: %e", 
r
);

10 
	}
}

	@user/spawninit.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
ív
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("init", "init", "one", "two", 0)) < 0)

9 
	`∑nic
("•aw∆(öôËÁûed: %e", 
r
);

10 
	}
}

	@user/testfile.c

1 
	~<öc/lib.h
>

3 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

5 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

8 
	$x›í
(c⁄° *
∑th
, 
mode
)

10 
Fsùc
 
fsùcbuf
;

12 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

13 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

15 
	`ùc_£nd
(
ívs
[1].
ív_id
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

16  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

17 
	}
}

20 
	$umaö
()

22 
r
;

23 
Fd
 *
fd
;

24 
Fd
 
fdc›y
;

25 
Sèt
 
°
;

26 
buf
[512];

29 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

30 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

31 i‡(
r
 >= 0)

32 
	`∑nic
("serve_open /not-found succeeded!");

34 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

35 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

36 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

37 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

38 
	`˝rötf
("serve_open is good\n");

40 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

41 
	`∑nic
("fûe_°©: %e", 
r
);

42 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

43 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

44 
	`˝rötf
("file_stat is good\n");

46 
	`mem£t
(
buf
, 0,  buf);

47 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

48 
	`∑nic
("fûe_ªad: %e", 
r
);

49 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

50 
	`∑nic
("file_readÑeturned wrong data");

51 
	`˝rötf
("file_read is good\n");

53 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

54 
	`∑nic
("fûe_˛o£: %e", 
r
);

55 
	`˝rötf
("file_close is good\n");

61 
fdc›y
 = *
FVA
;

62 
	`sys_∑ge_unm≠
(0, 
FVA
);

64 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

65 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

66 
	`˝rötf
("stale fileid is good\n");

69 i‡((
r
 = 
	`x›í
("/√w-fûe", 
O_RDWR
|
O_CREAT
)) < 0)

70 
	`∑nic
("£rve_›í /√w-fûe: %e", 
r
);

72 i‡((
r
 = 
devfûe
.
	`dev_wrôe
(
FVA
, 
msg
, 
	`°æí
(msg))) != strlen(msg))

73 
	`∑nic
("fûe_wrôe: %e", 
r
);

74 
	`˝rötf
("file_write is good\n");

76 
FVA
->
fd_off£t
 = 0;

77 
	`mem£t
(
buf
, 0,  buf);

78 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

79 
	`∑nic
("fûe_ªadá·î fûe_wrôe: %e", 
r
);

80 i‡(
r
 !
	`°æí
(
msg
))

81 
	`∑nic
("fûe_ªadá·î fûe_wrôêªtu∫ed wr⁄gÜígth: %d", 
r
);

82 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

83 
	`∑nic
("file_readáfter file_writeÑeturned wrong data");

84 
	`˝rötf
("file_readáfter file_write is good\n");

87 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

88 
	`∑nic
("›í /nŸ-found: %e", 
r
);

89 i‡(
r
 >= 0)

90 
	`∑nic
("open /not-found succeeded!");

92 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

93 
	`∑nic
("›í /√wmŸd: %e", 
r
);

94 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

95 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

96 
	`∑nic
("open didÇot fill struct Fd correctly\n");

97 
	`˝rötf
("open is good\n");

98 
	}
}

	@user/testtime.c

1 
	~<öc/lib.h
>

2 
	~<öc/x86.h
>

5 
	$¶ìp
(
£c
)

7 
íd
 = 
	`sys_time_m£c
(Ë+ 
£c
 * 1000;

8 
	`sys_time_m£c
(Ë< 
íd
)

9 
	`sys_yõld
();

10 
	}
}

13 
	$umaö
(
¨gc
, **
¨gv
)

15 
i
;

17 
	`¶ìp
(2);

19 
	`˝rötf
("starting count down: ");

20 
i
 = 5; i >= 0; i--) {

21 
	`˝rötf
("%d ", 
i
);

22 
	`¶ìp
(1);

24 
	`˝rötf
("\n");

25 
	`bªakpoöt
();

26 
	}
}

	@user/writemotd.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
rfd
, 
wfd
;

7 
buf
[512];

8 
n
, 
r
;

10 i‡((
rfd
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

11 
	`∑nic
("›í /√wmŸd: %e", 
rfd
);

12 i‡((
wfd
 = 
	`›í
("/mŸd", 
O_RDWR
)) < 0)

13 
	`∑nic
("›í /mŸd: %e", 
wfd
);

14 
	`˝rötf
("fûêdes¸ùt‹†%d %d\n", 
rfd
, 
wfd
);

15 i‡(
rfd
 =
wfd
)

16 
	`∑nic
("open /newmotdánd /motd give same file descriptor");

18 
	`˝rötf
("OLD MOTD\n===\n");

19 (
n
 = 
	`ªad
(
wfd
, 
buf
,  buf-1)) > 0)

20 
	`sys_˝uts
(
buf
, 
n
);

21 
	`˝rötf
("===\n");

22 
	`£ek
(
wfd
, 0);

24 i‡((
r
 = 
	`·runˇã
(
wfd
, 0)) < 0)

25 
	`∑nic
("åunˇã /mŸd: %e", 
r
);

27 
	`˝rötf
("NEW MOTD\n===\n");

28 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0) {

29 
	`sys_˝uts
(
buf
, 
n
);

30 i‡((
r
 = 
	`wrôe
(
wfd
, 
buf
, 
n
)) !=Ç)

31 
	`∑nic
("wrôê/mŸd: %e", 
r
);

33 
	`˝rötf
("===\n");

35 i‡(
n
 < 0)

36 
	`∑nic
("ªad /√wmŸd: %e", 
n
);

38 
	`˛o£
(
rfd
);

39 
	`˛o£
(
wfd
);

40 
	}
}

	@
1
.
0
238
4965
boot/main.c
fs/bc.c
fs/fs.c
fs/fs.h
fs/fsformat.c
fs/ide.c
fs/serv.c
fs/test.c
inc/args.h
inc/assert.h
inc/elf.h
inc/env.h
inc/error.h
inc/fd.h
inc/fs.h
inc/isareg.h
inc/kbdreg.h
inc/lib.h
inc/malloc.h
inc/memlayout.h
inc/mmu.h
inc/ns.h
inc/queue.h
inc/stab.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/syscall.h
inc/timerreg.h
inc/trap.h
inc/types.h
inc/x86.h
kern/console.c
kern/console.h
kern/dis-asm.h
kern/disas.c
kern/disas.h
kern/e100.c
kern/e100.h
kern/env.c
kern/env.h
kern/i386-dis.c
kern/init.c
kern/kclock.c
kern/kclock.h
kern/kdebug.c
kern/kdebug.h
kern/monitor.c
kern/monitor.h
kern/pci.c
kern/pci.h
kern/pcireg.h
kern/picirq.c
kern/picirq.h
kern/pmap.c
kern/pmap.h
kern/printf.c
kern/sched.c
kern/sched.h
kern/syscall.c
kern/syscall.h
kern/time.c
kern/time.h
kern/trap.c
kern/trap.h
lib/console.c
lib/exit.c
lib/fd.c
lib/file.c
lib/fork.c
lib/fprintf.c
lib/ipc.c
lib/libmain.c
lib/malloc.c
lib/nsipc.c
lib/pageref.c
lib/panic.c
lib/pgfault.c
lib/printf.c
lib/printfmt.c
lib/readline.c
lib/sockets.c
lib/spawn.c
lib/string.c
lib/syscall.c
net/input.c
net/lwip/api/api_lib.c
net/lwip/api/api_msg.c
net/lwip/api/err.c
net/lwip/api/netbuf.c
net/lwip/api/netdb.c
net/lwip/api/netifapi.c
net/lwip/api/sockets.c
net/lwip/api/tcpip.c
net/lwip/core/dhcp.c
net/lwip/core/dns.c
net/lwip/core/init.c
net/lwip/core/ipv4/autoip.c
net/lwip/core/ipv4/icmp.c
net/lwip/core/ipv4/igmp.c
net/lwip/core/ipv4/inet.c
net/lwip/core/ipv4/inet_chksum.c
net/lwip/core/ipv4/ip.c
net/lwip/core/ipv4/ip_addr.c
net/lwip/core/ipv4/ip_frag.c
net/lwip/core/ipv6/icmp6.c
net/lwip/core/ipv6/inet6.c
net/lwip/core/ipv6/ip6.c
net/lwip/core/ipv6/ip6_addr.c
net/lwip/core/mem.c
net/lwip/core/memp.c
net/lwip/core/netif.c
net/lwip/core/pbuf.c
net/lwip/core/raw.c
net/lwip/core/snmp/asn1_dec.c
net/lwip/core/snmp/asn1_enc.c
net/lwip/core/snmp/mib2.c
net/lwip/core/snmp/mib_structs.c
net/lwip/core/snmp/msg_in.c
net/lwip/core/snmp/msg_out.c
net/lwip/core/stats.c
net/lwip/core/sys.c
net/lwip/core/tcp.c
net/lwip/core/tcp_in.c
net/lwip/core/tcp_out.c
net/lwip/core/udp.c
net/lwip/include/ipv4/lwip/autoip.h
net/lwip/include/ipv4/lwip/icmp.h
net/lwip/include/ipv4/lwip/igmp.h
net/lwip/include/ipv4/lwip/inet.h
net/lwip/include/ipv4/lwip/inet_chksum.h
net/lwip/include/ipv4/lwip/ip.h
net/lwip/include/ipv4/lwip/ip_addr.h
net/lwip/include/ipv4/lwip/ip_frag.h
net/lwip/include/ipv6/lwip/icmp.h
net/lwip/include/ipv6/lwip/inet.h
net/lwip/include/ipv6/lwip/ip.h
net/lwip/include/ipv6/lwip/ip_addr.h
net/lwip/include/lwip/api.h
net/lwip/include/lwip/api_msg.h
net/lwip/include/lwip/arch.h
net/lwip/include/lwip/debug.h
net/lwip/include/lwip/def.h
net/lwip/include/lwip/dhcp.h
net/lwip/include/lwip/dns.h
net/lwip/include/lwip/err.h
net/lwip/include/lwip/init.h
net/lwip/include/lwip/mem.h
net/lwip/include/lwip/memp.h
net/lwip/include/lwip/memp_std.h
net/lwip/include/lwip/netbuf.h
net/lwip/include/lwip/netdb.h
net/lwip/include/lwip/netif.h
net/lwip/include/lwip/netifapi.h
net/lwip/include/lwip/opt.h
net/lwip/include/lwip/pbuf.h
net/lwip/include/lwip/raw.h
net/lwip/include/lwip/sio.h
net/lwip/include/lwip/snmp.h
net/lwip/include/lwip/snmp_asn1.h
net/lwip/include/lwip/snmp_msg.h
net/lwip/include/lwip/snmp_structs.h
net/lwip/include/lwip/sockets.h
net/lwip/include/lwip/stats.h
net/lwip/include/lwip/sys.h
net/lwip/include/lwip/tcp.h
net/lwip/include/lwip/tcpip.h
net/lwip/include/lwip/udp.h
net/lwip/include/netif/etharp.h
net/lwip/include/netif/loopif.h
net/lwip/include/netif/ppp_oe.h
net/lwip/include/netif/slipif.h
net/lwip/jos/arch/cc.h
net/lwip/jos/arch/i386/setjmp.h
net/lwip/jos/arch/perf.h
net/lwip/jos/arch/perror.c
net/lwip/jos/arch/perror.h
net/lwip/jos/arch/setjmp.h
net/lwip/jos/arch/sys_arch.c
net/lwip/jos/arch/sys_arch.h
net/lwip/jos/arch/thread.c
net/lwip/jos/arch/thread.h
net/lwip/jos/arch/threadq.h
net/lwip/jos/jif/jif.c
net/lwip/jos/jif/jif.h
net/lwip/jos/lwipopts.h
net/lwip/netif/etharp.c
net/lwip/netif/ethernetif.c
net/lwip/netif/loopif.c
net/lwip/netif/ppp/auth.c
net/lwip/netif/ppp/auth.h
net/lwip/netif/ppp/chap.c
net/lwip/netif/ppp/chap.h
net/lwip/netif/ppp/chpms.c
net/lwip/netif/ppp/chpms.h
net/lwip/netif/ppp/fsm.c
net/lwip/netif/ppp/fsm.h
net/lwip/netif/ppp/ipcp.c
net/lwip/netif/ppp/ipcp.h
net/lwip/netif/ppp/lcp.c
net/lwip/netif/ppp/lcp.h
net/lwip/netif/ppp/magic.c
net/lwip/netif/ppp/magic.h
net/lwip/netif/ppp/md5.c
net/lwip/netif/ppp/md5.h
net/lwip/netif/ppp/pap.c
net/lwip/netif/ppp/pap.h
net/lwip/netif/ppp/ppp.c
net/lwip/netif/ppp/ppp.h
net/lwip/netif/ppp/ppp_oe.c
net/lwip/netif/ppp/pppdebug.h
net/lwip/netif/ppp/randm.c
net/lwip/netif/ppp/randm.h
net/lwip/netif/ppp/vj.c
net/lwip/netif/ppp/vj.h
net/lwip/netif/ppp/vjbsdhdr.h
net/lwip/netif/slipif.c
net/ns.h
net/output.c
net/serv.c
net/testinput.c
net/testoutput.c
net/timer.c
user/echosrv.c
user/echotest.c
user/forktree.c
user/hello.c
user/httpd.c
user/icode.c
user/idle.c
user/init.c
user/pingpong.c
user/primes.c
user/spawnhello.c
user/spawninit.c
user/testfile.c
user/testtime.c
user/writemotd.c
