cscope 15 /home/wuxy/mitjos/lab5 -q 0000002243 0000261682
	@boot/main.c

1 
	~<öc/x86.h
>

2 
	~<öc/ñf.h
>

32 
	#SECTSIZE
 512

	)

33 
	#ELFHDR
 ((
Elf
 *) 0x10000)

34 

	)

35 
ªad£˘
(*, 
uöt32_t
);

36 
ªad£g
(
uöt32_t
, uint32_t, uint32_t);

39 
	$boŸmaö
()

41 
Proghdr
 *
ph
, *
ïh
;

44 
	`ªad£g
((
uöt32_t
Ë
ELFHDR
, 
SECTSIZE
*8, 0);

47 i‡(
ELFHDR
->
e_magic
 !
ELF_MAGIC
)

48 
bad
;

51 
ph
 = (
Proghdr
 *Ë((
uöt8_t
 *Ë
ELFHDR
 + ELFHDR->
e_phoff
);

52 
ïh
 = 
ph
 + 
ELFHDR
->
e_phnum
;

53 ; 
ph
 < 
ïh
;Öh++)

54 
	`ªad£g
(
ph
->
p_va
,Öh->
p_memsz
,Öh->
p_off£t
);

58 (((*)()Ë(
ELFHDR
->
e_íåy
 & 0xFFFFFF))();

60 
bad
:

61 
	`outw
(0x8A00, 0x8A00);

62 
	`outw
(0x8A00, 0x8E00);

65 
	}
}

70 
	$ªad£g
(
uöt32_t
 
va
, uöt32_à
cou¡
, uöt32_à
off£t
)

72 
uöt32_t
 
íd_va
;

74 
va
 &= 0xFFFFFF;

75 
íd_va
 = 
va
 + 
cou¡
;

78 
va
 &~(
SECTSIZE
 - 1);

81 
off£t
 = (off£à/ 
SECTSIZE
) + 1;

86 
va
 < 
íd_va
) {

87 
	`ªad£˘
((
uöt8_t
*Ë
va
, 
off£t
);

88 
va
 +
SECTSIZE
;

89 
off£t
++;

91 
	}
}

94 
	$waôdisk
()

97 (
	`öb
(0x1F7) & 0xC0) != 0x40)

99 
	}
}

102 
	$ªad£˘
(*
d°
, 
uöt32_t
 
off£t
)

105 
	`waôdisk
();

107 
	`outb
(0x1F2, 1);

108 
	`outb
(0x1F3, 
off£t
);

109 
	`outb
(0x1F4, 
off£t
 >> 8);

110 
	`outb
(0x1F5, 
off£t
 >> 16);

111 
	`outb
(0x1F6, (
off£t
 >> 24) | 0xE0);

112 
	`outb
(0x1F7, 0x20);

115 
	`waôdisk
();

118 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

119 
	}
}

	@fs/bc.c

2 
	~"fs.h
"

6 
	$diskaddr
(
uöt32_t
 
blockno
)

8 i‡(
blockno
 =0 || (
su≥r
 && blocknÿ>su≥r->
s_nblocks
))

9 
	`∑nic
("bad blockÇumbî %08x i¿diskaddr", 
blockno
);

10  (*Ë(
DISKMAP
 + 
blockno
 * 
BLKSIZE
);

11 
	}
}

14 
boﬁ


15 
	$va_is_m≠≥d
(*
va
)

17  (
vpd
[
	`PDX
(
va
)] & 
PTE_P
Ë&& (
v±
[
	`VPN
(va)] & PTE_P);

18 
	}
}

21 
boﬁ


22 
	$va_is_dúty
(*
va
)

24  (
v±
[
	`VPN
(
va
)] & 
PTE_D
) != 0;

25 
	}
}

31 
	$bc_pgÁu…
(
UTøp‰ame
 *
utf
)

33 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

34 
uöt32_t
 
blockno
 = ((uöt32_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

35 
r
;

38 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

39 
	`∑nic
("page fault in FS:Éip %08x, va %08x,Érr %04x",

40 
utf
->
utf_eù
, 
addr
, utf->
utf_îr
);

49 i‡(
su≥r
 && 
blockno
 >su≥r->
s_nblocks
)

50 
	`∑nic
("ªadögÇ⁄-exi°íàblock %08x\n", 
blockno
);

53 i‡(
bôm≠
 && 
	`block_is_‰ì
(
blockno
))

54 
	`∑nic
("ªadög fªêblock %08x\n", 
blockno
);

55 
	}
}

65 
	$Êush_block
(*
addr
)

67 
uöt32_t
 
blockno
 = ((uöt32_t)
addr
 - 
DISKMAP
Ë/ 
BLKSIZE
;

69 i‡(
addr
 < (*)
DISKMAP
 ||ádd∏>(*)(DISKMAP + 
DISKSIZE
))

70 
	`∑nic
("Êush_block o‡bad v®%08x", 
addr
);

73 
	`∑nic
("flush_blockÇot implemented");

74 
	}
}

79 
	$check_bc
()

81 
Su≥r
 
backup
;

84 
	`memmove
(&
backup
, 
	`diskaddr
(1),  backup);

87 
	`°r˝y
(
	`diskaddr
(1), "OOPS!\n");

88 
	`Êush_block
(
	`diskaddr
(1));

89 
	`as£π
(
	`va_is_m≠≥d
(
	`diskaddr
(1)));

90 
	`as£π
(!
	`va_is_dúty
(
	`diskaddr
(1)));

93 
	`sys_∑ge_unm≠
(0, 
	`diskaddr
(1));

94 
	`as£π
(!
	`va_is_m≠≥d
(
	`diskaddr
(1)));

97 
	`as£π
(
	`°rcmp
(
	`diskaddr
(1), "OOPS!\n") == 0);

100 
	`memmove
(
	`diskaddr
(1), &
backup
,  backup);

101 
	`Êush_block
(
	`diskaddr
(1));

103 
	`˝rötf
("block cache is good\n");

104 
	}
}

107 
	$bc_öô
()

109 
	`£t_pgÁu…_h™dÀr
(
bc_pgÁu…
);

110 
	`check_bc
();

111 
	}
}

	@fs/fs.c

1 
	~<öc/°rög.h
>

3 
	~"fs.h
"

11 
	$check_su≥r
()

13 i‡(
su≥r
->
s_magic
 !
FS_MAGIC
)

14 
	`∑nic
("bad file system magicÇumber");

16 i‡(
su≥r
->
s_nblocks
 > 
DISKSIZE
/
BLKSIZE
)

17 
	`∑nic
("file system isÅooÜarge");

19 
	`˝rötf
("superblock is good\n");

20 
	}
}

28 
boﬁ


29 
	$block_is_‰ì
(
uöt32_t
 
blockno
)

31 i‡(
su≥r
 =0 || 
blockno
 >su≥r->
s_nblocks
)

33 i‡(
bôm≠
[
blockno
 / 32] & (1 << (blockno % 32)))

36 
	}
}

40 
	$‰ì_block
(
uöt32_t
 
blockno
)

43 i‡(
blockno
 == 0)

44 
	`∑nic
("attemptÅo free zero block");

45 
bôm≠
[
blockno
/32] |= 1<<(blockno%32);

46 
	}
}

57 
	$Æloc_block
()

64 
	`∑nic
("alloc_blockÇot implemented");

65  -
E_NO_DISK
;

66 
	}
}

73 
	$check_bôm≠
()

75 
uöt32_t
 
i
;

78 
i
 = 0; i * 
BLKBITSIZE
 < 
su≥r
->
s_nblocks
; i++)

79 
	`as£π
(!
	`block_is_‰ì
(2+
i
));

82 
	`as£π
(!
	`block_is_‰ì
(0));

83 
	`as£π
(!
	`block_is_‰ì
(1));

85 
	`˝rötf
("bitmap is good\n");

86 
	}
}

94 
	$fs_öô
()

96 
	`°©ic_as£π
((
Fûe
) == 256);

99 i‡(
	`ide_¥obe_disk1
())

100 
	`ide_£t_disk
(1);

102 
	`ide_£t_disk
(0);

104 
	`bc_öô
();

107 
su≥r
 = 
	`diskaddr
(1);

109 
bôm≠
 = 
	`diskaddr
(2);

111 
	`check_su≥r
();

112 
	`check_bôm≠
();

113 
	}
}

132 
	$fûe_block_wÆk
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, uöt32_à**
µdiskbno
, 
boﬁ
 
Æloc
)

135 
	`∑nic
("file_block_walkÇot implemented");

136 
	}
}

147 
	$fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
, **
blk
)

150 
	`∑nic
("file_get_blockÇot implemented");

151 
	}
}

158 
	$dú_lookup
(
Fûe
 *
dú
, c⁄° *
«me
, Fûê**
fûe
)

160 
r
;

161 
uöt32_t
 
i
, 
j
, 
nblock
;

162 *
blk
;

163 
Fûe
 *
f
;

168 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

169 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

170 
i
 = 0; i < 
nblock
; i++) {

171 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

172  
r
;

173 
f
 = (
Fûe
*Ë
blk
;

174 
j
 = 0; j < 
BLKFILES
; j++)

175 i‡(
	`°rcmp
(
f
[
j
].
f_«me
, 
«me
) == 0) {

176 *
fûe
 = &
f
[
j
];

180  -
E_NOT_FOUND
;

181 
	}
}

186 
	$dú_Æloc_fûe
(
Fûe
 *
dú
, Fûê**
fûe
)

188 
r
;

189 
uöt32_t
 
nblock
, 
i
, 
j
;

190 *
blk
;

191 
Fûe
 *
f
;

193 
	`as£π
((
dú
->
f_size
 % 
BLKSIZE
) == 0);

194 
nblock
 = 
dú
->
f_size
 / 
BLKSIZE
;

195 
i
 = 0; i < 
nblock
; i++) {

196 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

197  
r
;

198 
f
 = (
Fûe
*Ë
blk
;

199 
j
 = 0; j < 
BLKFILES
; j++)

200 i‡(
f
[
j
].
f_«me
[0] == '\0') {

201 *
fûe
 = &
f
[
j
];

205 
dú
->
f_size
 +
BLKSIZE
;

206 i‡((
r
 = 
	`fûe_gë_block
(
dú
, 
i
, &
blk
)) < 0)

207  
r
;

208 
f
 = (
Fûe
*Ë
blk
;

209 *
fûe
 = &
f
[0];

211 
	}
}

215 
	$skù_¶ash
(c⁄° *
p
)

217 *
p
 == '/')

218 
p
++;

219  
p
;

220 
	}
}

229 
	$wÆk_∑th
(c⁄° *
∑th
, 
Fûe
 **
pdú
, Fûê**
pf
, *
œ°ñem
)

231 c⁄° *
p
;

232 
«me
[
MAXNAMELEN
];

233 
Fûe
 *
dú
, *
f
;

234 
r
;

238 
∑th
 = 
	`skù_¶ash
(path);

239 
f
 = &
su≥r
->
s_roŸ
;

240 
dú
 = 0;

241 
«me
[0] = 0;

243 i‡(
pdú
)

244 *
pdú
 = 0;

245 *
pf
 = 0;

246 *
∑th
 != '\0') {

247 
dú
 = 
f
;

248 
p
 = 
∑th
;

249 *
∑th
 != '/' && *path != '\0')

250 
∑th
++;

251 i‡(
∑th
 - 
p
 >
MAXNAMELEN
)

252  -
E_BAD_PATH
;

253 
	`memmove
(
«me
, 
p
, 
∑th
 -Ö);

254 
«me
[
∑th
 - 
p
] = '\0';

255 
∑th
 = 
	`skù_¶ash
(path);

257 i‡(
dú
->
f_ty≥
 !
FTYPE_DIR
)

258  -
E_NOT_FOUND
;

260 i‡((
r
 = 
	`dú_lookup
(
dú
, 
«me
, &
f
)) < 0) {

261 i‡(
r
 =-
E_NOT_FOUND
 && *
∑th
 == '\0') {

262 i‡(
pdú
)

263 *
pdú
 = 
dú
;

264 i‡(
œ°ñem
)

265 
	`°r˝y
(
œ°ñem
, 
«me
);

266 *
pf
 = 0;

268  
r
;

272 i‡(
pdú
)

273 *
pdú
 = 
dú
;

274 *
pf
 = 
f
;

276 
	}
}

285 
	$fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
pf
)

287 
«me
[
MAXNAMELEN
];

288 
r
;

289 
Fûe
 *
dú
, *
f
;

291 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, &
dú
, &
f
, 
«me
)) == 0)

292  -
E_FILE_EXISTS
;

293 i‡(
r
 !-
E_NOT_FOUND
 || 
dú
 == 0)

294  
r
;

295 i‡(
	`dú_Æloc_fûe
(
dú
, &
f
) < 0)

296  
r
;

297 
	`°r˝y
(
f
->
f_«me
, 
«me
);

298 *
pf
 = 
f
;

299 
	`fûe_Êush
(
dú
);

301 
	}
}

306 
	$fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
pf
)

308  
	`wÆk_∑th
(
∑th
, 0, 
pf
, 0);

309 
	}
}

314 
ssize_t


315 
	$fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

317 
r
, 
bn
;

318 
off_t
 
pos
;

319 *
blk
;

321 i‡(
off£t
 >
f
->
f_size
)

324 
cou¡
 = 
	`MIN
(cou¡, 
f
->
f_size
 - 
off£t
);

326 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

327 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

328  
r
;

329 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

330 
	`memmove
(
buf
, 
blk
 + 
pos
 % 
BLKSIZE
, 
bn
);

331 
pos
 +
bn
;

332 
buf
 +
bn
;

335  
cou¡
;

336 
	}
}

343 
	$fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
)

345 
r
, 
bn
;

346 
off_t
 
pos
;

347 *
blk
;

350 i‡(
off£t
 + 
cou¡
 > 
f
->
f_size
)

351 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
off£t
 + 
cou¡
)) < 0)

352  
r
;

354 
pos
 = 
off£t
;Öo†< off£à+ 
cou¡
; ) {

355 i‡((
r
 = 
	`fûe_gë_block
(
f
, 
pos
 / 
BLKSIZE
, &
blk
)) < 0)

356  
r
;

357 
bn
 = 
	`MIN
(
BLKSIZE
 - 
pos
 % BLKSIZE, 
off£t
 + 
cou¡
 -Öos);

358 
	`memmove
(
blk
 + 
pos
 % 
BLKSIZE
, 
buf
, 
bn
);

359 
pos
 +
bn
;

360 
buf
 +
bn
;

363  
cou¡
;

364 
	}
}

369 
	$fûe_‰ì_block
(
Fûe
 *
f
, 
uöt32_t
 
fûebno
)

371 
r
;

372 
uöt32_t
 *
±r
;

374 i‡((
r
 = 
	`fûe_block_wÆk
(
f
, 
fûebno
, &
±r
, 0)) < 0)

375  
r
;

376 i‡(*
±r
) {

377 
	`‰ì_block
(*
±r
);

378 *
±r
 = 0;

381 
	}
}

393 
	$fûe_åunˇã_blocks
(
Fûe
 *
f
, 
off_t
 
√wsize
)

395 
r
;

396 
uöt32_t
 
bno
, 
ﬁd_nblocks
, 
√w_nblocks
;

398 
ﬁd_nblocks
 = (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE;

399 
√w_nblocks
 = (
√wsize
 + 
BLKSIZE
 - 1) / BLKSIZE;

400 
bno
 = 
√w_nblocks
; bnÿ< 
ﬁd_nblocks
; bno++)

401 i‡((
r
 = 
	`fûe_‰ì_block
(
f
, 
bno
)) < 0)

402 
	`˝rötf
("w¨nög: fûe_‰ì_block: %e", 
r
);

404 i‡(
√w_nblocks
 <
NDIRECT
 && 
f
->
f_ödúe˘
) {

405 
	`‰ì_block
(
f
->
f_ödúe˘
);

406 
f
->
f_ödúe˘
 = 0;

408 
	}
}

412 
	$fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
)

414 i‡(
f
->
f_size
 > 
√wsize
)

415 
	`fûe_åunˇã_blocks
(
f
, 
√wsize
);

416 
f
->
f_size
 = 
√wsize
;

417 
	`Êush_block
(
f
);

419 
	}
}

426 
	$fûe_Êush
(
Fûe
 *
f
)

428 
i
;

429 
uöt32_t
 *
pdiskbno
;

431 
i
 = 0; i < (
f
->
f_size
 + 
BLKSIZE
 - 1) / BLKSIZE; i++) {

432 i‡(
	`fûe_block_wÆk
(
f
, 
i
, &
pdiskbno
, 0) < 0 ||

433 
pdiskbno
 =
NULL
 || *pdiskbno == 0)

435 
	`Êush_block
(
	`diskaddr
(*
pdiskbno
));

437 
	`Êush_block
(
f
);

438 i‡(
f
->
f_ödúe˘
)

439 
	`Êush_block
(
	`diskaddr
(
f
->
f_ödúe˘
));

440 
	}
}

444 
	$fûe_ªmove
(c⁄° *
∑th
)

446 
r
;

447 
Fûe
 *
f
;

449 i‡((
r
 = 
	`wÆk_∑th
(
∑th
, 0, &
f
, 0)) < 0)

450  
r
;

452 
	`fûe_åunˇã_blocks
(
f
, 0);

453 
f
->
f_«me
[0] = '\0';

454 
f
->
f_size
 = 0;

455 
	`Êush_block
(
f
);

458 
	}
}

462 
	$fs_sync
()

464 
i
;

465 
i
 = 1; i < 
su≥r
->
s_nblocks
; i++)

466 
	`Êush_block
(
	`diskaddr
(
i
));

467 
	}
}

	@fs/fs.h

1 
	~<öc/fs.h
>

2 
	~<öc/lib.h
>

4 
	#SECTSIZE
 512

5 
	#BLKSECTS
 (
BLKSIZE
 / 
SECTSIZE
)

6 

	)

9 
	#DISKMAP
 0x10000000

	)

12 
	#DISKSIZE
 0xC0000000

	)

14 
Su≥r
 *
	gsu≥r
;

15 
uöt32_t
 *
	gbôm≠
;

18 
boﬁ
 
ide_¥obe_disk1
();

19 
ide_£t_disk
(
diskno
);

20 
ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
);

21 
ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
);

24 * 
diskaddr
(
uöt32_t
 
blockno
);

25 
boﬁ
 
va_is_m≠≥d
(*
va
);

26 
boﬁ
 
va_is_dúty
(*
va
);

27 
Êush_block
(*
addr
);

28 
bc_öô
();

31 
fs_öô
();

32 
fûe_gë_block
(
Fûe
 *
f
, 
uöt32_t
 
fûe_blockno
, **
pblk
);

33 
fûe_¸óã
(c⁄° *
∑th
, 
Fûe
 **
f
);

34 
fûe_›í
(c⁄° *
∑th
, 
Fûe
 **
f
);

35 
ssize_t
 
fûe_ªad
(
Fûe
 *
f
, *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

36 
fûe_wrôe
(
Fûe
 *
f
, c⁄° *
buf
, 
size_t
 
cou¡
, 
off_t
 
off£t
);

37 
fûe_£t_size
(
Fûe
 *
f
, 
off_t
 
√wsize
);

38 
fûe_Êush
(
Fûe
 *
f
);

39 
fûe_ªmove
(c⁄° *
∑th
);

40 
fs_sync
();

43 
boﬁ
 
block_is_‰ì
(
uöt32_t
 
blockno
);

44 
Æloc_block
();

47 
fs_ã°
();

	@fs/fsformat.c

6 
	#off_t
 
xxx_off_t


	)

7 
	#boﬁ
 
xxx_boﬁ


	)

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<öây≥s.h
>

12 
	~<°d¨g.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<uni°d.h
>

17 
	~<sys/mm™.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/ty≥s.h
>

20 #unde‡
off_t


21 #unde‡
boﬁ


25 
	#JOS_INC_TYPES_H


	)

27 
uöt32_t
 
	tphyßddr_t
;

28 
uöt32_t
 
	toff_t
;

29 
	tboﬁ
;

31 
	~<öc/mmu.h
>

32 
	~<öc/fs.h
>

34 
	#ROUNDUP
(
n
, 
v
Ë(“Ë- 1 + (vË- (“Ë- 1Ë% (v))

	)

35 
	#MAX_DIR_ENTS
 128

	)

37 
	sDú


39 
Fûe
 *
	mf
;

40 
Fûe
 *
	míts
;

41 
	mn
;

44 
uöt32_t
 
	gnblocks
;

45 *
	gdiskm≠
, *
	gdiskpos
;

46 
Su≥r
 *
	gsu≥r
;

47 
uöt32_t
 *
	gbôm≠
;

50 
	$∑nic
(c⁄° *
fmt
, ...)

52 
va_li°
 
≠
;

54 
	`va_°¨t
(
≠
, 
fmt
);

55 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

56 
	`va_íd
(
≠
);

57 
	`Âutc
('\n', 
°dîr
);

58 
	`ab‹t
();

59 
	}
}

62 
	$ªadn
(
f
, *
out
, 
size_t
 
n
)

64 
size_t
 
p
 = 0;

65 
p
 < 
n
) {

66 
size_t
 
m
 = 
	`ªad
(
f
, 
out
 + 
p
, 
n
 -Ö);

67 i‡(
m
 < 0)

68 
	`∑nic
("ªad: %s", 
	`°ªº‹
(
î∫o
));

69 i‡(
m
 == 0)

70 
	`∑nic
("read: Unexpected EOF");

71 
p
 +
m
;

73 
	}
}

75 
uöt32_t


76 
	$blockof
(*
pos
)

78  ((*)
pos
 - 
diskm≠
Ë/ 
BLKSIZE
;

79 
	}
}

82 
	$Æloc
(
uöt32_t
 
byãs
)

84 *
°¨t
 = 
diskpos
;

85 
diskpos
 +
	`ROUNDUP
(
byãs
, 
BLKSIZE
);

86 i‡(
	`blockof
(
diskpos
Ë>
nblocks
)

87 
	`∑nic
("out of disk blocks");

88  
°¨t
;

89 
	}
}

92 
	$›ídisk
(c⁄° *
«me
)

94 
r
, 
diskfd
, 
nbôblocks
;

96 i‡((
diskfd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_CREAT
, 0666)) < 0)

97 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

99 i‡((
r
 = 
	`·runˇã
(
diskfd
, 0)) < 0

100 || (
r
 = 
	`·runˇã
(
diskfd
, 
nblocks
 * 
BLKSIZE
)) < 0)

101 
	`∑nic
("åunˇã %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

103 i‡((
diskm≠
 = 
	`mm≠
(
NULL
, 
nblocks
 * 
BLKSIZE
, 
PROT_READ
|
PROT_WRITE
,

104 
MAP_SHARED
, 
diskfd
, 0)Ë=
MAP_FAILED
)

105 
	`∑nic
("mm≠ %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

107 
	`˛o£
(
diskfd
);

109 
diskpos
 = 
diskm≠
;

110 
	`Æloc
(
BLKSIZE
);

111 
su≥r
 = 
	`Æloc
(
BLKSIZE
);

112 
su≥r
->
s_magic
 = 
FS_MAGIC
;

113 
su≥r
->
s_nblocks
 = 
nblocks
;

114 
su≥r
->
s_roŸ
.
f_ty≥
 = 
FTYPE_DIR
;

115 
	`°r˝y
(
su≥r
->
s_roŸ
.
f_«me
, "/");

117 
nbôblocks
 = (
nblocks
 + 
BLKBITSIZE
 - 1) / BLKBITSIZE;

118 
bôm≠
 = 
	`Æloc
(
nbôblocks
);

119 
	`mem£t
(
bôm≠
, 0xFF, 
nbôblocks
 * 
BLKSIZE
);

120 
	}
}

123 
	$föishdisk
()

125 
r
, 
i
;

127 
i
 = 0; i < 
	`blockof
(
diskpos
); ++i)

128 
bôm≠
[
i
/32] &= ~(1<<(i%32));

130 i‡((
r
 = 
	`msync
(
diskm≠
, 
nblocks
 * 
BLKSIZE
, 
MS_SYNC
)) < 0)

131 
	`∑nic
("msync: %s", 
	`°ªº‹
(
î∫o
));

132 
	}
}

135 
	$föishfûe
(
Fûe
 *
f
, 
uöt32_t
 
°¨t
, uöt32_à
Àn
)

137 
i
;

138 
f
->
f_size
 = 
Àn
;

139 
Àn
 = 
	`ROUNDUP
÷í, 
BLKSIZE
);

140 
i
 = 0; i < 
Àn
 / 
BLKSIZE
 && i < 
NDIRECT
; ++i)

141 
f
->
f_dúe˘
[
i
] = 
°¨t
 + i;

142 i‡(
i
 =
NDIRECT
) {

143 
uöt32_t
 *
öd
 = 
	`Æloc
(
BLKSIZE
);

144 
f
->
f_ödúe˘
 = 
	`blockof
(
öd
);

145 ; 
i
 < 
Àn
 / 
BLKSIZE
; ++i)

146 
öd
[
i
 - 
NDIRECT
] = 
°¨t
 + i;

148 
	}
}

151 
	$°¨tdú
(
Fûe
 *
f
, 
Dú
 *
dout
)

153 
dout
->
f
 = f;

154 
dout
->
íts
 = 
	`mÆloc
(
MAX_DIR_ENTS
 *  *dout->ents);

155 
dout
->
n
 = 0;

156 
	}
}

158 
Fûe
 *

159 
	$dúadd
(
Dú
 *
d
, 
uöt32_t
 
ty≥
, c⁄° *
«me
)

161 
Fûe
 *
out
 = &
d
->
íts
[d->
n
++];

162 i‡(
d
->
n
 > 
MAX_DIR_ENTS
)

163 
	`∑nic
("too many directoryÉntries");

164 
	`°r˝y
(
out
->
f_«me
, 
«me
);

165 
out
->
f_ty≥
 = 
ty≥
;

166  
out
;

167 
	}
}

170 
	$föishdú
(
Dú
 *
d
)

172 
size
 = 
d
->
n
 * (
Fûe
);

173 
Fûe
 *
°¨t
 = 
	`Æloc
(
size
);

174 
	`memmove
(
°¨t
, 
d
->
íts
, 
size
);

175 
	`föishfûe
(
d
->
f
, 
	`blockof
(
°¨t
), 
	`ROUNDUP
(
size
, 
BLKSIZE
));

176 
	`‰ì
(
d
->
íts
);

177 
d
->
íts
 = 
NULL
;

178 
	}
}

181 
	$wrôefûe
(
Dú
 *
dú
, c⁄° *
«me
)

183 
r
, 
fd
;

184 
Fûe
 *
f
;

185 
°©
 
°
;

186 c⁄° *
œ°
;

187 *
°¨t
;

189 i‡((
fd
 = 
	`›í
(
«me
, 
O_RDONLY
)) < 0)

190 
	`∑nic
("›í %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

191 i‡((
r
 = 
	`f°©
(
fd
, &
°
)) < 0)

192 
	`∑nic
("°© %s: %s", 
«me
, 
	`°ªº‹
(
î∫o
));

193 i‡(!
	`S_ISREG
(
°
.
°_mode
))

194 
	`∑nic
("%†i†nŸáÑeguœ∏fûe", 
«me
);

195 i‡(
°
.
°_size
 >
MAXFILESIZE
)

196 
	`∑nic
("%†toÿœrge", 
«me
);

198 
œ°
 = 
	`°ºchr
(
«me
, '/');

199 i‡(
œ°
)

200 
œ°
++;

202 
œ°
 = 
«me
;

204 
f
 = 
	`dúadd
(
dú
, 
FTYPE_REG
, 
œ°
);

205 
°¨t
 = 
	`Æloc
(
°
.
°_size
);

206 
	`ªadn
(
fd
, 
°¨t
, 
°
.
°_size
);

207 
	`föishfûe
(
f
, 
	`blockof
(
°¨t
), 
°
.
°_size
);

208 
	`˛o£
(
fd
);

209 
	}
}

212 
	$ußge
()

214 
	`Ârötf
(
°dîr
, "Usage: fsformat fs.img NBLOCKS files...\n");

215 
	`exô
(2);

216 
	}
}

219 
	$maö
(
¨gc
, **
¨gv
)

221 
i
;

222 *
s
;

223 
Dú
 
roŸ
;

225 
	`as£π
(
BLKSIZE
 % (
Fûe
) == 0);

227 i‡(
¨gc
 < 3)

228 
	`ußge
();

230 
nblocks
 = 
	`°πﬁ
(
¨gv
[2], &
s
, 0);

231 i‡(*
s
 || s =
¨gv
[2] || 
nblocks
 < 2 ||Çblocks > 1024)

232 
	`ußge
();

234 
	`›ídisk
(
¨gv
[1]);

236 
	`°¨tdú
(&
su≥r
->
s_roŸ
, &
roŸ
);

237 
i
 = 3; i < 
¨gc
; i++)

238 
	`wrôefûe
(&
roŸ
, 
¨gv
[
i
]);

239 
	`föishdú
(&
roŸ
);

241 
	`föishdisk
();

243 
	}
}

	@fs/ide.c

7 
	~"fs.h
"

8 
	~<öc/x86.h
>

10 
	#IDE_BSY
 0x80

	)

11 
	#IDE_DRDY
 0x40

	)

12 
	#IDE_DF
 0x20

	)

13 
	#IDE_ERR
 0x01

	)

15 
	gdiskno
 = 1;

18 
	$ide_waô_ªady
(
boﬁ
 
check_îr‹
)

20 
r
;

22 ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DRDY
)) != IDE_DRDY)

25 i‡(
check_îr‹
 && (
r
 & (
IDE_DF
|
IDE_ERR
)) != 0)

28 
	}
}

30 
boﬁ


31 
	$ide_¥obe_disk1
()

33 
r
, 
x
;

36 
	`ide_waô_ªady
(0);

39 
	`outb
(0x1F6, 0xE0 | (1<<4));

42 
x
 = 0;

43 
x
 < 1000 && ((
r
 = 
	`öb
(0x1F7)Ë& (
IDE_BSY
|
IDE_DF
|
IDE_ERR
)) != 0;

44 
x
++)

48 
	`outb
(0x1F6, 0xE0 | (0<<4));

50 
	`˝rötf
("Devi˚ 1Öª£n˚: %d\n", (
x
 < 1000));

51  (
x
 < 1000);

52 
	}
}

55 
	$ide_£t_disk
(
d
)

57 i‡(
d
 != 0 && d != 1)

58 
	`∑nic
("bad diskÇumber");

59 
diskno
 = 
d
;

60 
	}
}

63 
	$ide_ªad
(
uöt32_t
 
£˙o
, *
d°
, 
size_t
 
n£cs
)

65 
r
;

67 
	`as£π
(
n£cs
 <= 256);

69 
	`ide_waô_ªady
(0);

71 
	`outb
(0x1F2, 
n£cs
);

72 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

73 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

74 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

75 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

76 
	`outb
(0x1F7, 0x20);

78 ; 
n£cs
 > 0;Ç£cs--, 
d°
 +
SECTSIZE
) {

79 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

80  
r
;

81 
	`ö¶
(0x1F0, 
d°
, 
SECTSIZE
/4);

85 
	}
}

88 
	$ide_wrôe
(
uöt32_t
 
£˙o
, c⁄° *
§c
, 
size_t
 
n£cs
)

90 
r
;

92 
	`as£π
(
n£cs
 <= 256);

94 
	`ide_waô_ªady
(0);

96 
	`outb
(0x1F2, 
n£cs
);

97 
	`outb
(0x1F3, 
£˙o
 & 0xFF);

98 
	`outb
(0x1F4, (
£˙o
 >> 8) & 0xFF);

99 
	`outb
(0x1F5, (
£˙o
 >> 16) & 0xFF);

100 
	`outb
(0x1F6, 0xE0 | ((
diskno
&1)<<4Ë| ((
£˙o
>>24)&0x0F));

101 
	`outb
(0x1F7, 0x30);

103 ; 
n£cs
 > 0;Ç£cs--, 
§c
 +
SECTSIZE
) {

104 i‡((
r
 = 
	`ide_waô_ªady
(1)) < 0)

105  
r
;

106 
	`out¶
(0x1F0, 
§c
, 
SECTSIZE
/4);

110 
	}
}

	@fs/serv.c

6 
	~<öc/x86.h
>

7 
	~<öc/°rög.h
>

9 
	~"fs.h
"

12 
	#debug
 0

	)

32 
	sO≥nFûe
 {

33 
uöt32_t
 
	mo_fûeid
;

34 
Fûe
 *
	mo_fûe
;

35 
	mo_mode
;

36 
Fd
 *
	mo_fd
;

40 
	#MAXOPEN
 1024

	)

41 
	#FILEVA
 0xD0000000

	)

44 
O≥nFûe
 
	g›íèb
[
MAXOPEN
] = {

49 
Fsùc
 *
	gf§eq
 = (Fsipc *)0x0ffff000;

52 
	$£rve_öô
()

54 
i
;

55 
uöçå_t
 
va
 = 
FILEVA
;

56 
i
 = 0; i < 
MAXOPEN
; i++) {

57 
›íèb
[
i
].
o_fûeid
 = i;

58 
›íèb
[
i
].
o_fd
 = (
Fd
*Ë
va
;

59 
va
 +
PGSIZE
;

61 
	}
}

65 
	$›ífûe_Æloc
(
O≥nFûe
 **
o
)

67 
i
, 
r
;

70 
i
 = 0; i < 
MAXOPEN
; i++) {

71 
	`∑gîef
(
›íèb
[
i
].
o_fd
)) {

73 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
›íèb
[
i
].
o_fd
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

74  
r
;

77 
›íèb
[
i
].
o_fûeid
 +
MAXOPEN
;

78 *
o
 = &
›íèb
[
i
];

79 
	`mem£t
(
›íèb
[
i
].
o_fd
, 0, 
PGSIZE
);

80  (*
o
)->
o_fûeid
;

83  -
E_MAX_OPEN
;

84 
	}
}

88 
	$›ífûe_lookup
(
ívid_t
 
ívid
, 
uöt32_t
 
fûeid
, 
O≥nFûe
 **
po
)

90 
O≥nFûe
 *
o
;

92 
o
 = &
›íèb
[
fûeid
 % 
MAXOPEN
];

93 i‡(
	`∑gîef
(
o
->
o_fd
Ë=1 || o->
o_fûeid
 !
fûeid
)

94  -
E_INVAL
;

95 *
po
 = 
o
;

97 
	}
}

103 
	$£rve_›í
(
ívid_t
 
ívid
, 
F§eq_›í
 *
ªq
,

104 **
pg_°‹e
, *
≥rm_°‹e
)

106 
∑th
[
MAXPATHLEN
];

107 
Fûe
 *
f
;

108 
fûeid
;

109 
r
;

110 
O≥nFûe
 *
o
;

112 i‡(
debug
)

113 
	`˝rötf
("£rve_›í %08x %†0x%x\n", 
ívid
, 
ªq
->
ªq_∑th
,Ñeq->
ªq_omode
);

116 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

117 
∑th
[
MAXPATHLEN
-1] = 0;

120 i‡((
r
 = 
	`›ífûe_Æloc
(&
o
)) < 0) {

121 i‡(
debug
)

122 
	`˝rötf
("›ífûe_Ælo¯Áûed: %e", 
r
);

123  
r
;

125 
fûeid
 = 
r
;

128 i‡(
ªq
->
ªq_omode
 & 
O_CREAT
) {

129 i‡((
r
 = 
	`fûe_¸óã
(
∑th
, &
f
)) < 0) {

130 i‡(!(
ªq
->
ªq_omode
 & 
O_EXCL
Ë&& 
r
 =-
E_FILE_EXISTS
)

131 
åy_›í
;

132 i‡(
debug
)

133 
	`˝rötf
("fûe_¸óã faûed: %e", 
r
);

134  
r
;

137 
åy_›í
:

138 i‡((
r
 = 
	`fûe_›í
(
∑th
, &
f
)) < 0) {

139 i‡(
debug
)

140 
	`˝rötf
("fûe_›í faûed: %e", 
r
);

141  
r
;

146 i‡(
ªq
->
ªq_omode
 & 
O_TRUNC
) {

147 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0) {

148 i‡(
debug
)

149 
	`˝rötf
("fûe_£t_sizêÁûed: %e", 
r
);

150  
r
;

155 
o
->
o_fûe
 = 
f
;

158 
o
->
o_fd
->
fd_fûe
.
id
 = o->
o_fûeid
;

159 
o
->
o_fd
->
fd_omode
 = 
ªq
->
ªq_omode
 & 
O_ACCMODE
;

160 
o
->
o_fd
->
fd_dev_id
 = 
devfûe
.
dev_id
;

161 
o
->
o_mode
 = 
ªq
->
ªq_omode
;

163 i‡(
debug
)

164 
	`˝rötf
("£ndög suc˚ss,Öagê%08x\n", (
uöçå_t
Ë
o
->
o_fd
);

167 *
pg_°‹e
 = 
o
->
o_fd
;

168 *
≥rm_°‹e
 = 
PTE_P
|
PTE_U
|
PTE_W
;

170 
	}
}

175 
	$£rve_£t_size
(
ívid_t
 
ívid
, 
F§eq_£t_size
 *
ªq
)

177 
O≥nFûe
 *
o
;

178 
r
;

180 i‡(
debug
)

181 
	`˝rötf
("£rve_£t_sizê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_size
);

188 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

189  
r
;

193  
	`fûe_£t_size
(
o
->
o_fûe
, 
ªq
->
ªq_size
);

194 
	}
}

201 
	$£rve_ªad
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

203 
F§eq_ªad
 *
ªq
 = &
ùc
->
ªad
;

204 
F§ë_ªad
 *
ªt
 = &
ùc
->
ªadRë
;

206 i‡(
debug
)

207 
	`˝rötf
("£rve_ªad %08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

218 
	`∑nic
("serve_readÇot implemented");

219 
	}
}

226 
	$£rve_wrôe
(
ívid_t
 
ívid
, 
F§eq_wrôe
 *
ªq
)

228 i‡(
debug
)

229 
	`˝rötf
("£rve_wrôê%08x %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
,Ñeq->
ªq_n
);

232 
	`∑nic
("serve_writeÇot implemented");

233 
	}
}

238 
	$£rve_°©
(
ívid_t
 
ívid
, 
Fsùc
 *
ùc
)

240 
F§eq_°©
 *
ªq
 = &
ùc
->
°©
;

241 
F§ë_°©
 *
ªt
 = &
ùc
->
°©Rë
;

242 
O≥nFûe
 *
o
;

243 
r
;

245 i‡(
debug
)

246 
	`˝rötf
("£rve_°© %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

248 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

249  
r
;

251 
	`°r˝y
(
ªt
->
ªt_«me
, 
o
->
o_fûe
->
f_«me
);

252 
ªt
->
ªt_size
 = 
o
->
o_fûe
->
f_size
;

253 
ªt
->
ªt_isdú
 = (
o
->
o_fûe
->
f_ty≥
 =
FTYPE_DIR
);

255 
	}
}

259 
	$£rve_Êush
(
ívid_t
 
ívid
, 
F§eq_Êush
 *
ªq
)

261 
O≥nFûe
 *
o
;

262 
r
;

264 i‡(
debug
)

265 
	`˝rötf
("£rve_Êush %08x %08x\n", 
ívid
, 
ªq
->
ªq_fûeid
);

267 i‡((
r
 = 
	`›ífûe_lookup
(
ívid
, 
ªq
->
ªq_fûeid
, &
o
)) < 0)

268  
r
;

269 
	`fûe_Êush
(
o
->
o_fûe
);

271 
	}
}

275 
	$£rve_ªmove
(
ívid_t
 
ívid
, 
F§eq_ªmove
 *
ªq
)

277 
∑th
[
MAXPATHLEN
];

278 
r
;

280 i‡(
debug
)

281 
	`˝rötf
("£rve_ªmovê%08x %s\n", 
ívid
, 
ªq
->
ªq_∑th
);

287 
	`memmove
(
∑th
, 
ªq
->
ªq_∑th
, 
MAXPATHLEN
);

288 
∑th
[
MAXPATHLEN
-1] = 0;

291  
	`fûe_ªmove
(
∑th
);

292 
	}
}

296 
	$£rve_sync
(
ívid_t
 
ívid
, 
Fsùc
 *
ªq
)

298 
	`fs_sync
();

300 
	}
}

302 (*
	tfsh™dÀr
)(
	tívid_t
 
	tívid
, 
	tFsùc
 *
	tªq
);

304 
fsh™dÀr
 
h™dÀrs
[] = {

307 [
FSREQ_SET_SIZE
] = (
fsh™dÀr
)
£rve_£t_size
,

308 [
FSREQ_READ
] = 
£rve_ªad
,

309 [
FSREQ_WRITE
] = (
fsh™dÀr
)
£rve_wrôe
,

310 [
FSREQ_STAT
] = 
£rve_°©
,

311 [
FSREQ_FLUSH
] = (
fsh™dÀr
)
£rve_Êush
,

312 [
FSREQ_REMOVE
] = (
fsh™dÀr
)
£rve_ªmove
,

313 [
FSREQ_SYNC
] = 
£rve_sync


314 
	}
};

315 
	#NHANDLERS
 ((
h™dÀrs
)/(h™dÀrs[0]))

	)

318 
	$£rve
()

320 
uöt32_t
 
ªq
, 
whom
;

321 
≥rm
, 
r
;

322 *
pg
;

325 
≥rm
 = 0;

326 
ªq
 = 
	`ùc_ªcv
((
öt32_t
 *Ë&
whom
, 
f§eq
, &
≥rm
);

327 i‡(
debug
)

328 
	`˝rötf
("fsÑeq %d from %08x [page %08x: %s]\n",

329 
ªq
, 
whom
, 
v±
[
	`VPN
(
f§eq
)], fsreq);

332 i‡(!(
≥rm
 & 
PTE_P
)) {

333 
	`˝rötf
("InvalidÑequest from %08x:ÇoárgumentÖage\n",

334 
whom
);

338 
pg
 = 
NULL
;

339 i‡(
ªq
 =
FSREQ_OPEN
) {

340 
r
 = 
	`£rve_›í
(
whom
, (
F§eq_›í
*)
f§eq
, &
pg
, &
≥rm
);

341 } i‡(
ªq
 < 
NHANDLERS
 && 
h™dÀrs
[req]) {

342 
r
 = 
h™dÀrs
[
ªq
](
whom
, 
f§eq
);

344 
	`˝rötf
("InvÆidÑeque° codê%d from %08x\n", 
whom
, 
ªq
);

345 
r
 = -
E_INVAL
;

347 
	`ùc_£nd
(
whom
, 
r
, 
pg
, 
≥rm
);

348 
	`sys_∑ge_unm≠
(0, 
f§eq
);

350 
	}
}

353 
	$umaö
()

355 
	`°©ic_as£π
((
Fûe
) == 256);

356 
bö¨y«me
 = "fs";

357 
	`˝rötf
("FS isÑunning\n");

360 
	`outw
(0x8A00, 0x8A00);

361 
	`˝rötf
("FS can do I/O\n");

363 
	`£rve_öô
();

364 
	`fs_öô
();

365 
	`fs_ã°
();

367 
	`£rve
();

368 
	}
}

	@fs/test.c

2 
	~<öc/x86.h
>

3 
	~<öc/°rög.h
>

5 
	~"fs.h
"

7 *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

10 
	$fs_ã°
()

12 
Fûe
 *
f
;

13 
r
;

14 *
blk
;

15 
uöt32_t
 *
bôs
;

18 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
PGSIZE
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

19 
	`∑nic
("sys_∑ge_Æloc: %e", 
r
);

20 
bôs
 = (
uöt32_t
*Ë
PGSIZE
;

21 
	`memmove
(
bôs
, 
bôm≠
, 
PGSIZE
);

23 i‡((
r
 = 
	`Æloc_block
()) < 0)

24 
	`∑nic
("Æloc_block: %e", 
r
);

26 
	`as£π
(
bôs
[
r
/32] & (1 << (r%32)));

28 
	`as£π
(!(
bôm≠
[
r
/32] & (1 << (r%32))));

29 
	`˝rötf
("alloc_block is good\n");

31 i‡((
r
 = 
	`fûe_›í
("/nŸ-found", &
f
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

32 
	`∑nic
("fûe_›í /nŸ-found: %e", 
r
);

33 i‡(
r
 == 0)

34 
	`∑nic
("file_open /not-found succeeded!");

35 i‡((
r
 = 
	`fûe_›í
("/√wmŸd", &
f
)) < 0)

36 
	`∑nic
("fûe_›í /√wmŸd: %e", 
r
);

37 
	`˝rötf
("file_open is good\n");

39 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

40 
	`∑nic
("fûe_gë_block: %e", 
r
);

41 i‡(
	`°rcmp
(
blk
, 
msg
) != 0)

42 
	`∑nic
("file_get_blockÑeturned wrong data");

43 
	`˝rötf
("file_get_block is good\n");

45 *(vﬁ©ûê*)
blk
 = *(volatile *)blk;

46 
	`as£π
((
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

47 
	`fûe_Êush
(
f
);

48 
	`as£π
(!(
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

49 
	`˝rötf
("file_flush is good\n");

51 i‡((
r
 = 
	`fûe_£t_size
(
f
, 0)) < 0)

52 
	`∑nic
("fûe_£t_size: %e", 
r
);

53 
	`as£π
(
f
->
f_dúe˘
[0] == 0);

54 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

55 
	`˝rötf
("file_truncate is good\n");

57 i‡((
r
 = 
	`fûe_£t_size
(
f
, 
	`°æí
(
msg
))) < 0)

58 
	`∑nic
("fûe_£t_sizê2: %e", 
r
);

59 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

60 i‡((
r
 = 
	`fûe_gë_block
(
f
, 0, &
blk
)) < 0)

61 
	`∑nic
("fûe_gë_block 2: %e", 
r
);

62 
	`°r˝y
(
blk
, 
msg
);

63 
	`as£π
((
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

64 
	`fûe_Êush
(
f
);

65 
	`as£π
(!(
v±
[
	`VPN
(
blk
)] & 
PTE_D
));

66 
	`as£π
(!(
v±
[
	`VPN
(
f
)] & 
PTE_D
));

67 
	`˝rötf
("fileÑewrite is good\n");

68 
	}
}

	@inc/args.h

74 *
¨gv0
;

76 
	#_ARGSET
(
x
Ë(xË0

	)

77 
	#_ARGUSED
(
x
Ëi‡(xË{ } 

	)

79 
	#ARGBEGIN
 (
¨gv
?0:◊rgv=(*)&
¨gc
)),(
¨gv0
?0:(argv0=*argv)),\

80 
¨gv
++,
¨gc
--;\

81 
¨gv
[0] &&árgv[0][0]=='-' &&árgv[0][1];\

82 
¨gc
--, 
¨gv
++) {\

83 *
_¨gs
, *
_¨gt
;\

84 
_¨gc
;\

85 
_¨gs
 = &
¨gv
[0][1];\

86 if(
_¨gs
[0]=='-' && _args[1]==0){\

87 
¨gc
--; 
¨gv
++; ;\

89 
_¨gc
 = 0;\

90 *
_¨gs
 && (
_¨gc
 = *_args++))\

91 
_¨gc
)

	)

92 
	#ARGEND
 
	`_ARGSET
(
_¨gt
);
	`_ARGUSED
(_¨gt);_ARGUSED(
_¨gc
);_ARGUSED(
_¨gs
);}_ARGUSED(
¨gv
);_ARGUSED(
¨gc
);

	)

93 
	#ARGF
(Ë(
_¨gt
=
_¨gs
, _args="",\

94 (*
_¨gt
? _¨gt: 
¨gv
[1]? (
¨gc
--, *++¨gv): 0))

	)

95 
	#EARGF
(
x
Ë(
_¨gt
=
_¨gs
, _args="",\

96 (*
_¨gt
? _¨gt: 
¨gv
[1]? (
¨gc
--, *++¨gv): ((
x
), 
	`ab‹t
(), (*)0)))

	)

98 
	#ARGC
(Ë
_¨gc


	)

	@inc/assert.h

3 #i‚de‡
JOS_INC_ASSERT_H


4 
	#JOS_INC_ASSERT_H


	)

6 
	~<öc/°dio.h
>

8 
_w¨n
(const *, , const *, ...);

9 
	$_∑nic
(c⁄° *, , c⁄° *, ...Ë
	`__©åibuã__
((
n‹ëu∫
));

11 
	#w¨n
(...Ë
	`_w¨n
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

12 
	#∑nic
(...Ë
	`_∑nic
(
__FILE__
, 
__LINE__
, 
__VA_ARGS__
)

	)

14 
	#as£π
(
x
) \

15 dÿ{ i‡(!(
x
)Ë
	`∑nic
("as£πi⁄ faûed: %s", #x); 
	}
} 0)

	)

18 
	#°©ic_as£π
(
x
ËxË0: (x):

	)

	@inc/elf.h

1 #i‚de‡
JOS_INC_ELF_H


2 
	#JOS_INC_ELF_H


	)

4 
	#ELF_MAGIC
 0x464C457FU

	)

6 
	sElf
 {

7 
uöt32_t
 
	me_magic
;

8 
uöt8_t
 
	me_ñf
[12];

9 
uöt16_t
 
	me_ty≥
;

10 
uöt16_t
 
	me_machöe
;

11 
uöt32_t
 
	me_vîsi⁄
;

12 
uöt32_t
 
	me_íåy
;

13 
uöt32_t
 
	me_phoff
;

14 
uöt32_t
 
	me_shoff
;

15 
uöt32_t
 
	me_Êags
;

16 
uöt16_t
 
	me_ehsize
;

17 
uöt16_t
 
	me_phítsize
;

18 
uöt16_t
 
	me_phnum
;

19 
uöt16_t
 
	me_shítsize
;

20 
uöt16_t
 
	me_shnum
;

21 
uöt16_t
 
	me_sh°∫dx
;

24 
	sProghdr
 {

25 
uöt32_t
 
	mp_ty≥
;

26 
uöt32_t
 
	mp_off£t
;

27 
uöt32_t
 
	mp_va
;

28 
uöt32_t
 
	mp_∑
;

29 
uöt32_t
 
	mp_fûesz
;

30 
uöt32_t
 
	mp_memsz
;

31 
uöt32_t
 
	mp_Êags
;

32 
uöt32_t
 
	mp_Æign
;

35 
	sSe˘hdr
 {

36 
uöt32_t
 
	msh_«me
;

37 
uöt32_t
 
	msh_ty≥
;

38 
uöt32_t
 
	msh_Êags
;

39 
uöt32_t
 
	msh_addr
;

40 
uöt32_t
 
	msh_off£t
;

41 
uöt32_t
 
	msh_size
;

42 
uöt32_t
 
	msh_lök
;

43 
uöt32_t
 
	msh_öfo
;

44 
uöt32_t
 
	msh_addølign
;

45 
uöt32_t
 
	msh_ítsize
;

49 
	#ELF_PROG_LOAD
 1

	)

52 
	#ELF_PROG_FLAG_EXEC
 1

	)

53 
	#ELF_PROG_FLAG_WRITE
 2

	)

54 
	#ELF_PROG_FLAG_READ
 4

	)

57 
	#ELF_SHT_NULL
 0

	)

58 
	#ELF_SHT_PROGBITS
 1

	)

59 
	#ELF_SHT_SYMTAB
 2

	)

60 
	#ELF_SHT_STRTAB
 3

	)

63 
	#ELF_SHN_UNDEF
 0

	)

	@inc/env.h

3 #i‚de‡
JOS_INC_ENV_H


4 
	#JOS_INC_ENV_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<öc/queue.h
>

8 
	~<öc/å≠.h
>

9 
	~<öc/memœyout.h
>

11 
öt32_t
 
	tívid_t
;

29 
	#LOG2NENV
 10

	)

30 
	#NENV
 (1 << 
LOG2NENV
)

	)

31 
	#ENVX
(
ívid
Ë(”nvidË& (
NENV
 - 1))

	)

34 
	#ENV_FREE
 0

	)

35 
	#ENV_RUNNABLE
 1

	)

36 
	#ENV_NOT_RUNNABLE
 2

	)

38 
	sEnv
 {

39 
Tøp‰ame
 
	mív_tf
;

40 
LIST_ENTRY
(
Env
Ë
	mív_lök
;

41 
ívid_t
 
	mív_id
;

42 
ívid_t
 
	mív_∑ª¡_id
;

43 
	mív_°©us
;

44 
uöt32_t
 
	mív_runs
;

47 
pde_t
 *
	mív_pgdú
;

48 
phyßddr_t
 
	mív_¸3
;

51 *
	mív_pgÁu…_upˇŒ
;

54 
boﬁ
 
	mív_ùc_ªcvög
;

55 *
	mív_ùc_d°va
;

56 
uöt32_t
 
	mív_ùc_vÆue
;

57 
ívid_t
 
	mív_ùc_‰om
;

58 
	mív_ùc_≥rm
;

	@inc/error.h

3 #i‚de‡
JOS_INC_ERROR_H


4 
	#JOS_INC_ERROR_H


	)

7 
	#E_UNSPECIFIED
 1

8 
	#E_BAD_ENV
 2

10 
	#E_INVAL
 3

11 
	#E_NO_MEM
 4

12 
	#E_NO_FREE_ENV
 5

14 
	#E_FAULT
 6

15 

	)

16 
	#E_IPC_NOT_RECV
 7

17 
	#E_EOF
 8

18 

	)

20 
	#E_NO_DISK
 9

21 
	#E_MAX_OPEN
 10

22 
	#E_NOT_FOUND
 11

23 
	#E_BAD_PATH
 12

24 
	#E_FILE_EXISTS
 13

25 
	#E_NOT_EXEC
 14

26 
	#E_NOT_SUPP
 15

27 

	)

28 
	#MAXERROR
 15

	)

	@inc/fd.h

5 #i‚de‡
JOS_INC_FD_H


6 
	#JOS_INC_FD_H


	)

8 
	~<öc/ty≥s.h
>

9 
	~<öc/fs.h
>

12 
	gFd
;

13 
	gSèt
;

14 
	gDev
;

16 
	sDev
 {

17 
	mdev_id
;

18 *
	mdev_«me
;

19 
ssize_t
 (*
dev_ªad
)(
Fd
 *
	mfd
, *
	mbuf
, 
size_t
 
	mÀn
);

20 
ssize_t
 (*
dev_wrôe
)(
Fd
 *
	mfd
, c⁄° *
	mbuf
, 
size_t
 
	mÀn
);

21 (*
	mdev_˛o£
)(
Fd
 *
	mfd
);

22 (*
	mdev_°©
)(
Fd
 *
	mfd
, 
Sèt
 *
	m°©
);

23 (*
	mdev_åunc
)(
Fd
 *
	mfd
, 
off_t
 
	mÀngth
);

26 
	sFdFûe
 {

27 
	mid
;

30 
	sFd
 {

31 
	mfd_dev_id
;

32 
off_t
 
	mfd_off£t
;

33 
	mfd_omode
;

36 
FdFûe
 
	mfd_fûe
;

40 
	sSèt
 {

41 
	m°_«me
[
MAXNAMELEN
];

42 
off_t
 
	m°_size
;

43 
	m°_isdú
;

44 
Dev
 *
	m°_dev
;

47 * 
fd2d©a
(
Fd
 *
fd
);

48 
fd2num
(
Fd
 *
fd
);

49 
fd_Æloc
(
Fd
 **
fd_°‹e
);

50 
fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
);

51 
fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
);

52 
dev_lookup
(
devid
, 
Dev
 **
dev_°‹e
);

54 
Dev
 
devfûe
;

	@inc/fs.h

3 #i‚de‡
JOS_INC_FS_H


4 
	#JOS_INC_FS_H


	)

6 
	~<öc/ty≥s.h
>

7 
	~<öc/mmu.h
>

12 
	#BLKSIZE
 
PGSIZE


	)

13 
	#BLKBITSIZE
 (
BLKSIZE
 * 8)

	)

17 
	#MAXNAMELEN
 128

	)

20 
	#MAXPATHLEN
 1024

	)

23 
	#NDIRECT
 10

	)

25 
	#NINDIRECT
 (
BLKSIZE
 / 4)

	)

27 
	#MAXFILESIZE
 ((
NDIRECT
 + 
NINDIRECT
Ë* 
BLKSIZE
)

	)

29 
	sFûe
 {

30 
	mf_«me
[
MAXNAMELEN
];

31 
off_t
 
	mf_size
;

32 
uöt32_t
 
	mf_ty≥
;

36 
uöt32_t
 
	mf_dúe˘
[
NDIRECT
];

37 
uöt32_t
 
	mf_ödúe˘
;

41 
uöt8_t
 
	mf_∑d
[256 - 
MAXNAMELEN
 - 8 - 4*
NDIRECT
 - 4];

42 } 
__©åibuã__
((
∑cked
));

45 
	#BLKFILES
 (
BLKSIZE
 / (
Fûe
))

	)

48 
	#FTYPE_REG
 0

49 
	#FTYPE_DIR
 1

50 

	)

54 
	#FS_MAGIC
 0x4A0530AE

55 

	)

56 
	sSu≥r
 {

57 
uöt32_t
 
	ms_magic
;

58 
uöt32_t
 
	ms_nblocks
;

59 
Fûe
 
	ms_roŸ
;

64 
	mFSREQ_OPEN
 = 1,

65 
	mFSREQ_SET_SIZE
,

67 
	mFSREQ_READ
,

68 
	mFSREQ_WRITE
,

70 
	mFSREQ_STAT
,

71 
	mFSREQ_FLUSH
,

72 
	mFSREQ_REMOVE
,

73 
	mFSREQ_SYNC


76 
	uFsùc
 {

77 
	sF§eq_›í
 {

78 
	mªq_∑th
[
MAXPATHLEN
];

79 
	mªq_omode
;

80 } 
	m›í
;

81 
	sF§eq_£t_size
 {

82 
	mªq_fûeid
;

83 
off_t
 
	mªq_size
;

84 } 
	m£t_size
;

85 
	sF§eq_ªad
 {

86 
	mªq_fûeid
;

87 
size_t
 
	mªq_n
;

88 } 
	mªad
;

89 
	sF§ë_ªad
 {

90 
	mªt_buf
[
PGSIZE
];

91 } 
	mªadRë
;

92 
	sF§eq_wrôe
 {

93 
	mªq_fûeid
;

94 
size_t
 
	mªq_n
;

95 
	mªq_buf
[
PGSIZE
 - ((Ë+ (
size_t
))];

96 } 
	mwrôe
;

97 
	sF§eq_°©
 {

98 
	mªq_fûeid
;

99 } 
	m°©
;

100 
	sF§ë_°©
 {

101 
	mªt_«me
[
MAXNAMELEN
];

102 
off_t
 
	mªt_size
;

103 
	mªt_isdú
;

104 } 
	m°©Rë
;

105 
	sF§eq_Êush
 {

106 
	mªq_fûeid
;

107 } 
	mÊush
;

108 
	sF§eq_ªmove
 {

109 
	mªq_∑th
[
MAXPATHLEN
];

110 } 
	mªmove
;

	@inc/isareg.h

14 #i‚de‡
IO_ISABEGIN


15 
	#IO_ISABEGIN
 0x000

	)

18 
	#IO_DMA1
 0x000

	)

19 
	#IO_ICU1
 0x020

	)

20 
	#IO_PMP1
 0x026

	)

21 
	#IO_TIMER1
 0x040

	)

22 
	#IO_TIMER2
 0x048

	)

23 
	#IO_KBD
 0x060

	)

24 
	#IO_PPI
 0x061

	)

25 
	#IO_RTC
 0x070

	)

26 
	#IO_NMI
 
IO_RTC


	)

27 
	#IO_DMAPG
 0x080

	)

28 
	#IO_ICU2
 0x0A0

	)

29 
	#IO_DMA2
 0x0C0

	)

30 
	#IO_NPX
 0x0F0

	)

35 
	#IO_WD2
 0x170

	)

36 
	#IO_PMP2
 0x178

	)

40 
	#IO_WD1
 0x1f0

	)

41 
	#IO_GAME
 0x200

	)

45 
	#IO_BMS2
 0x238

	)

46 
	#IO_BMS1
 0x23¯

	)

50 
	#IO_LPT2
 0x278

	)

54 
	#IO_COM4
 0x2e8

	)

58 
	#IO_COM2
 0x2f8

	)

62 
	#IO_BT0
 0x330

	)

63 
	#IO_AHA0
 0x330

	)

64 
	#IO_UHA0
 0x330

	)

65 
	#IO_BT1
 0x334

	)

66 
	#IO_AHA1
 0x334

	)

70 
	#IO_WDS
 0x350

	)

74 
	#IO_FD2
 0x370

	)

75 
	#IO_LPT1
 0x378

	)

79 
	#IO_MDA
 0x3B0

	)

80 
	#IO_LPT3
 0x3BC

	)

81 
	#IO_VGA
 0x3C0

	)

82 
	#IO_CGA
 0x3D0

	)

86 
	#IO_COM3
 0x3e8

	)

87 
	#IO_FD1
 0x3f0

	)

88 
	#IO_COM1
 0x3f8

	)

90 
	#IO_ISAEND
 0x3FF

	)

99 #i‚def 
IO_ISASIZES


100 
	#IO_ISASIZES


	)

102 
	#IO_COMSIZE
 8

	)

103 
	#IO_CGASIZE
 16

	)

104 
	#IO_DMASIZE
 16

	)

105 
	#IO_DPGSIZE
 32

	)

106 
	#IO_FDCSIZE
 8

	)

107 
	#IO_WDCSIZE
 8

	)

108 
	#IO_GAMSIZE
 16

	)

109 
	#IO_ICUSIZE
 16

	)

110 
	#IO_KBDSIZE
 16

	)

111 
	#IO_LPTSIZE
 8

	)

112 
	#IO_MDASIZE
 16

	)

113 
	#IO_RTCSIZE
 16

	)

114 
	#IO_TMRSIZE
 16

	)

115 
	#IO_NPXSIZE
 16

	)

116 
	#IO_VGASIZE
 16

	)

117 
	#IO_PMPSIZE
 2

	)

124 #i‚def 
IOM_BEGIN


125 
	#IOM_BEGIN
 0x0a0000

	)

126 
	#IOM_END
 0x100000

	)

127 
	#IOM_SIZE
 (
IOM_END
 - 
IOM_BEGIN
)

	)

	@inc/kbdreg.h

1 #i‚de‡
JOS_KBDREG_H


2 
	#JOS_KBDREG_H


	)

5 
	#KEY_HOME
 0xE0

	)

6 
	#KEY_END
 0xE1

	)

7 
	#KEY_UP
 0xE2

	)

8 
	#KEY_DN
 0xE3

	)

9 
	#KEY_LF
 0xE4

	)

10 
	#KEY_RT
 0xE5

	)

11 
	#KEY_PGUP
 0xE6

	)

12 
	#KEY_PGDN
 0xE7

	)

13 
	#KEY_INS
 0xE8

	)

14 
	#KEY_DEL
 0xE9

	)

19 
	#KBSTATP
 0x64

	)

20 
	#KBS_DIB
 0x01

	)

21 
	#KBS_IBF
 0x02

	)

22 
	#KBS_WARM
 0x04

	)

23 
	#KBS_OCMD
 0x08

	)

24 
	#KBS_NOSEC
 0x10

	)

25 
	#KBS_TERR
 0x20

	)

26 
	#KBS_RERR
 0x40

	)

27 
	#KBS_PERR
 0x80

	)

29 
	#KBCMDP
 0x64

	)

30 
	#KBC_RAMREAD
 0x20

	)

31 
	#KBC_RAMWRITE
 0x60

	)

32 
	#KBC_AUXDISABLE
 0xa7

	)

33 
	#KBC_AUXENABLE
 0xa8

	)

34 
	#KBC_AUXTEST
 0xa9

	)

35 
	#KBC_KBDECHO
 0xd2

	)

36 
	#KBC_AUXECHO
 0xd3

	)

37 
	#KBC_AUXWRITE
 0xd4

	)

38 
	#KBC_SELFTEST
 0xØ

	)

39 
	#KBC_KBDTEST
 0xab

	)

40 
	#KBC_KBDDISABLE
 0xad

	)

41 
	#KBC_KBDENABLE
 0x´

	)

42 
	#KBC_PULSE0
 0x„

	)

43 
	#KBC_PULSE1
 0xfd

	)

44 
	#KBC_PULSE2
 0xfb

	)

45 
	#KBC_PULSE3
 0xf7

	)

47 
	#KBDATAP
 0x60

	)

48 
	#KBOUTP
 0x60

	)

50 
	#K_RDCMDBYTE
 0x20

	)

51 
	#K_LDCMDBYTE
 0x60

	)

53 
	#KC8_TRANS
 0x40

	)

54 
	#KC8_MDISABLE
 0x20

	)

55 
	#KC8_KDISABLE
 0x10

	)

56 
	#KC8_IGNSEC
 0x08

	)

57 
	#KC8_CPU
 0x04

	)

58 
	#KC8_MENABLE
 0x02

	)

59 
	#KC8_KENABLE
 0x01

	)

60 
	#CMDBYTE
 (
KC8_TRANS
|
KC8_CPU
|
KC8_MENABLE
|
KC8_KENABLE
)

	)

63 
	#KBC_RESET
 0xFF

	)

64 
	#KBC_RESEND
 0xFE

	)

65 
	#KBC_SETDEFAULT
 0xF6

	)

66 
	#KBC_DISABLE
 0xF5

	)

67 
	#KBC_ENABLE
 0xF4

	)

68 
	#KBC_TYPEMATIC
 0xF3

	)

69 
	#KBC_SETTABLE
 0xF0

	)

70 
	#KBC_MODEIND
 0xED

	)

71 
	#KBC_ECHO
 0xEE

	)

74 
	#KBR_EXTENDED
 0xE0

	)

75 
	#KBR_RESEND
 0xFE

	)

76 
	#KBR_ACK
 0xFA

	)

77 
	#KBR_OVERRUN
 0x00

	)

78 
	#KBR_FAILURE
 0xFD

	)

79 
	#KBR_BREAK
 0xF0

	)

80 
	#KBR_RSTDONE
 0xAA

	)

81 
	#KBR_ECHO
 0xEE

	)

	@inc/lib.h

7 #i‚de‡
JOS_INC_LIB_H


8 
	#JOS_INC_LIB_H
 1

	)

10 
	~<öc/ty≥s.h
>

11 
	~<öc/°dio.h
>

12 
	~<öc/°d¨g.h
>

13 
	~<öc/°rög.h
>

14 
	~<öc/îr‹.h
>

15 
	~<öc/as£π.h
>

16 
	~<öc/ív.h
>

17 
	~<öc/memœyout.h
>

18 
	~<öc/sysˇŒ.h
>

19 
	~<öc/å≠.h
>

20 
	~<öc/fs.h
>

21 
	~<öc/fd.h
>

22 
	~<öc/¨gs.h
>

24 
	#USED
(
x
Ë()(x)

	)

27 *
bö¨y«me
;

28 vﬁ©ûê
Env
 *
ív
;

29 vﬁ©ûê
Env
 
ívs
[
NENV
];

30 vﬁ©ûê
Page
 
∑ges
[];

31 
exô
();

34 
£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
));

37 * 
	`ªadlöe
(c⁄° *
buf
);

40 
	`sys_˝uts
(c⁄° *
°rög
, 
size_t
 
Àn
);

41 
	`sys_cgëc
();

42 
ívid_t
 
	`sys_gëívid
();

43 
	`sys_ív_de°roy
(
ívid_t
);

44 
	`sys_yõld
();

45 
ívid_t
 
	`sys_exof‹k
();

46 
	`sys_ív_£t_°©us
(
ívid_t
 
ív
, 
°©us
);

47 
	`sys_ív_£t_å≠‰ame
(
ívid_t
 
ív
, 
Tøp‰ame
 *
tf
);

48 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ív
, *
upˇŒ
);

49 
	`sys_∑ge_Æloc
(
ívid_t
 
ív
, *
pg
, 
≥rm
);

50 
	`sys_∑ge_m≠
(
ívid_t
 
§c_ív
, *
§c_pg
,

51 
ívid_t
 
d°_ív
, *
d°_pg
, 
≥rm
);

52 
	`sys_∑ge_unm≠
(
ívid_t
 
ív
, *
pg
);

53 
	`sys_ùc_åy_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

54 
	`sys_ùc_ªcv
(*
rcv_pg
);

57 
__ölöe
 
ívid_t
 
	$sys_exof‹k
(Ë
	`__©åibuã__
((
Æways_ölöe
));

58 
__ölöe
 
ívid_t


59 
	$sys_exof‹k
()

61 
ívid_t
 
ªt
;

62 
__asm
 
	`__vﬁ©ûe
("int %2"

63 : "˜" (
ªt
)

64 : "a" (
SYS_exof‹k
),

65 "i" (
T_SYSCALL
)

67  
ªt
;

68 
	}
}

71 
ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆue
, *
pg
, 
≥rm
);

72 
öt32_t
 
ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
);

75 
	#PTE_SHARE
 0x400

	)

76 
ívid_t
 
f‹k
();

77 
ívid_t
 
sf‹k
();

80 
˛o£
(
fd
);

81 
ssize_t
 
ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
);

82 
ssize_t
 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
);

83 
£ek
(
fd
, 
off_t
 
off£t
);

84 
˛o£_Æl
();

85 
ssize_t
 
ªadn
(
fd
, *
buf
, 
size_t
 
nbyãs
);

86 
dup
(
ﬁdfd
, 
√wfd
);

87 
f°©
(
fd
, 
Sèt
 *
°©buf
);

88 
°©
(c⁄° *
∑th
, 
Sèt
 *
°©buf
);

91 
›í
(c⁄° *
∑th
, 
mode
);

92 
·runˇã
(
fd
, 
off_t
 
size
);

93 
ªmove
(c⁄° *
∑th
);

94 
sync
();

97 
∑gîef
(*
addr
);

101 
ívid_t
 
•awn
(c⁄° *
¥ogøm
, c⁄° **
¨gv
);

102 
ívid_t
 
•aw∆
(c⁄° *
¥ogøm
, c⁄° *
¨g0
, ...);

106 
	#O_RDONLY
 0x0000

	)

107 
	#O_WRONLY
 0x0001

	)

108 
	#O_RDWR
 0x0002

	)

109 
	#O_ACCMODE
 0x0003

	)

111 
	#O_CREAT
 0x0100

	)

112 
	#O_TRUNC
 0x0200

	)

113 
	#O_EXCL
 0x0400

	)

114 
	#O_MKDIR
 0x0800

	)

	@inc/malloc.h

1 #i‚de‡
JOS_INC_MALLOC_H


2 
	#JOS_INC_MALLOC_H
 1

	)

4 *
mÆloc
(
size_t
 
size
);

5 
‰ì
(*
addr
);

	@inc/memlayout.h

1 #i‚de‡
JOS_INC_MEMLAYOUT_H


2 
	#JOS_INC_MEMLAYOUT_H


	)

4 #i‚de‡
__ASSEMBLER__


5 
	~<öc/ty≥s.h
>

6 
	~<öc/queue.h
>

7 
	~<öc/mmu.h
>

16 
	#GD_KT
 0x08

17 
	#GD_KD
 0x10

18 
	#GD_UT
 0x18

19 
	#GD_UD
 0x20

20 
	#GD_TSS
 0x28

21 

	)

82 
	#KERNBASE
 0xF0000000

	)

87 
	#IOPHYSMEM
 0x0A0000

	)

88 
	#EXTPHYSMEM
 0x100000

	)

94 
	#VPT
 (
KERNBASE
 - 
PTSIZE
)

	)

95 
	#KSTACKTOP
 
VPT


	)

96 
	#KSTKSIZE
 (8*
PGSIZE
)

97 
	#ULIM
 (
KSTACKTOP
 - 
PTSIZE
)

	)

105 
	#UVPT
 (
ULIM
 - 
PTSIZE
)

	)

107 
	#UPAGES
 (
UVPT
 - 
PTSIZE
)

	)

109 
	#UENVS
 (
UPAGES
 - 
PTSIZE
)

	)

116 
	#UTOP
 
UENVS


	)

118 
	#UXSTACKTOP
 
UTOP


	)

121 
	#USTACKTOP
 (
UTOP
 - 2*
PGSIZE
)

	)

124 
	#UTEXT
 (2*
PTSIZE
)

	)

127 
	#UTEMP
 ((*Ë
PTSIZE
)

	)

130 
	#PFTEMP
 (
UTEMP
 + 
PTSIZE
 - 
PGSIZE
)

	)

132 
	#USTABDATA
 (
PTSIZE
 / 2)

	)

135 #i‚de‡
__ASSEMBLER__


151 
uöt32_t
 
	t±e_t
;

152 
uöt32_t
 
	tpde_t
;

154 vﬁ©ûê
±e_t
 
v±
[];

155 vﬁ©ûê
pde_t
 
vpd
[];

166 
LIST_HEAD
(
Page_li°
, 
Page
);

167 
	$LIST_ENTRY
(
	tPage
Ë
	tPage_LIST_íåy_t
;

169 
	sPage
 {

170 
Page_LIST_íåy_t
 
µ_lök
;

177 
uöt16_t
 
µ_ªf
;

	@inc/mmu.h

1 #i‚de‡
JOS_INC_MMU_H


2 
	#JOS_INC_MMU_H


	)

30 
	#PPN
(
∑
Ë(((
uöçå_t
Ë’a)Ë>> 
PTXSHIFT
)

	)

31 
	#VPN
(
œ
Ë
	`PPN
(la)

32 

	)

34 
	#PDX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PDXSHIFT
Ë& 0x3FF)

	)

35 
	#VPD
(
œ
Ë
	`PDX
(la)

36 

	)

38 
	#PTX
(
œ
Ë((((
uöçå_t
Ë÷a)Ë>> 
PTXSHIFT
Ë& 0x3FF)

	)

41 
	#PGOFF
(
œ
Ë(((
uöçå_t
Ë÷a)Ë& 0xFFF)

	)

44 
	#PGADDR
(
d
, 
t
, 
o
Ë((*Ë((dË<< 
PDXSHIFT
 | (tË<< 
PTXSHIFT
 | (o)))

	)

47 
	#NPDENTRIES
 1024

48 
	#NPTENTRIES
 1024

49 

	)

50 
	#PGSIZE
 4096

51 
	#PGSHIFT
 12

52 

	)

53 
	#PTSIZE
 (
PGSIZE
*
NPTENTRIES
)

54 
	#PTSHIFT
 22

55 

	)

56 
	#PTXSHIFT
 12

57 
	#PDXSHIFT
 22

58 

	)

60 
	#PTE_P
 0x001

61 
	#PTE_W
 0x002

62 
	#PTE_U
 0x004

63 
	#PTE_PWT
 0x008

64 
	#PTE_PCD
 0x010

65 
	#PTE_A
 0x020

66 
	#PTE_D
 0x040

67 
	#PTE_PS
 0x080

68 
	#PTE_MBZ
 0x180

69 

	)

72 
	#PTE_AVAIL
 0xE00

73 

	)

75 
	#PTE_USER
 (
PTE_AVAIL
 | 
PTE_P
 | 
PTE_W
 | 
PTE_U
)

	)

78 
	#PTE_ADDR
(
±e
Ë((
phyßddr_t
Ë’ãË& ~0xFFF)

	)

81 
	#CR0_PE
 0x00000001

82 
	#CR0_MP
 0x00000002

83 
	#CR0_EM
 0x00000004

84 
	#CR0_TS
 0x00000008

85 
	#CR0_ET
 0x00000010

86 
	#CR0_NE
 0x00000020

87 
	#CR0_WP
 0x00010000

88 
	#CR0_AM
 0x00040000

89 
	#CR0_NW
 0x20000000

90 
	#CR0_CD
 0x40000000

91 
	#CR0_PG
 0x80000000

92 

	)

93 
	#CR4_PCE
 0x00000100

94 
	#CR4_MCE
 0x00000040

95 
	#CR4_PSE
 0x00000010

96 
	#CR4_DE
 0x00000008

97 
	#CR4_TSD
 0x00000004

98 
	#CR4_PVI
 0x00000002

99 
	#CR4_VME
 0x00000001

100 

	)

102 
	#FL_CF
 0x00000001

103 
	#FL_PF
 0x00000004

104 
	#FL_AF
 0x00000010

105 
	#FL_ZF
 0x00000040

106 
	#FL_SF
 0x00000080

107 
	#FL_TF
 0x00000100

108 
	#FL_IF
 0x00000200

109 
	#FL_DF
 0x00000400

110 
	#FL_OF
 0x00000800

111 
	#FL_IOPL_MASK
 0x00003000

112 
	#FL_IOPL_0
 0x00000000

113 
	#FL_IOPL_1
 0x00001000

114 
	#FL_IOPL_2
 0x00002000

115 
	#FL_IOPL_3
 0x00003000

116 
	#FL_NT
 0x00004000

117 
	#FL_RF
 0x00010000

118 
	#FL_VM
 0x00020000

119 
	#FL_AC
 0x00040000

120 
	#FL_VIF
 0x00080000

121 
	#FL_VIP
 0x00100000

122 
	#FL_ID
 0x00200000

123 

	)

125 
	#FEC_PR
 0x1

126 
	#FEC_WR
 0x2

127 
	#FEC_U
 0x4

128 

	)

136 #ifde‡
__ASSEMBLER__


141 
	#SEG_NULL
 \

142 .
w‹d
 0, 0; \

143 .
byã
 0, 0, 0, 0

	)

144 
	#SEG
(
ty≥
,
ba£
,
lim
) \

145 .
	`w‹d
 (((
lim
Ë>> 12Ë& 0xffff), ((
ba£
) & 0xffff); \

146 .
	`byã
 (((
ba£
Ë>> 16Ë& 0xff), (0x90 | (
ty≥
)), \

147 (0xC0 | (((
lim
Ë>> 28Ë& 0xf)), (((
ba£
Ë>> 24Ë& 0xff)

	)

151 
	~<öc/ty≥s.h
>

154 
	sSegdesc
 {

155 
	msd_lim_15_0
 : 16;

156 
	msd_ba£_15_0
 : 16;

157 
	msd_ba£_23_16
 : 8;

158 
	msd_ty≥
 : 4;

159 
	msd_s
 : 1;

160 
	msd_d∂
 : 2;

161 
	msd_p
 : 1;

162 
	msd_lim_19_16
 : 4;

163 
	msd_avl
 : 1;

164 
	msd_rsv1
 : 1;

165 
	msd_db
 : 1;

166 
	msd_g
 : 1;

167 
	msd_ba£_31_24
 : 8;

170 
	#SEG_NULL
 (
Segdesc
){ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	)

172 
	#SEG_FAULT
 (
Segdesc
){ 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 }

	)

174 
	#SEG
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

175 { ((
lim
Ë>> 12Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

176 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 28, 0, 0, 1, 1, \

177 (Ë(
ba£
Ë>> 24 }

	)

178 
	#SEG16
(
ty≥
, 
ba£
, 
lim
, 
d∂
Ë(
Segdesc
) \

179 { (
lim
Ë& 0xffff, (
ba£
) & 0xffff, ((base) >> 16) & 0xff, \

180 
ty≥
, 1, 
d∂
, 1, (Ë(
lim
) >> 16, 0, 0, 1, 0, \

181 (Ë(
ba£
Ë>> 24 }

	)

186 
	#STA_X
 0x8

187 
	#STA_E
 0x4

188 
	#STA_C
 0x4

189 
	#STA_W
 0x2

190 
	#STA_R
 0x2

191 
	#STA_A
 0x1

192 

	)

194 
	#STS_T16A
 0x1

195 
	#STS_LDT
 0x2

196 
	#STS_T16B
 0x3

197 
	#STS_CG16
 0x4

198 
	#STS_TG
 0x5

199 
	#STS_IG16
 0x6

200 
	#STS_TG16
 0x7

201 
	#STS_T32A
 0x9

202 
	#STS_T32B
 0xB

203 
	#STS_CG32
 0xC

204 
	#STS_IG32
 0xE

205 
	#STS_TG32
 0xF

206 

	)

214 #i‚de‡
__ASSEMBLER__


217 
	sTask°©e
 {

218 
uöt32_t
 
	mts_lök
;

219 
uöçå_t
 
	mts_e•0
;

220 
uöt16_t
 
	mts_ss0
;

221 
uöt16_t
 
	mts_∑ddög1
;

222 
uöçå_t
 
	mts_e•1
;

223 
uöt16_t
 
	mts_ss1
;

224 
uöt16_t
 
	mts_∑ddög2
;

225 
uöçå_t
 
	mts_e•2
;

226 
uöt16_t
 
	mts_ss2
;

227 
uöt16_t
 
	mts_∑ddög3
;

228 
phyßddr_t
 
	mts_¸3
;

229 
uöçå_t
 
	mts_eù
;

230 
uöt32_t
 
	mts_eÊags
;

231 
uöt32_t
 
	mts_óx
;

232 
uöt32_t
 
	mts_ecx
;

233 
uöt32_t
 
	mts_edx
;

234 
uöt32_t
 
	mts_ebx
;

235 
uöçå_t
 
	mts_e•
;

236 
uöçå_t
 
	mts_ebp
;

237 
uöt32_t
 
	mts_esi
;

238 
uöt32_t
 
	mts_edi
;

239 
uöt16_t
 
	mts_es
;

240 
uöt16_t
 
	mts_∑ddög4
;

241 
uöt16_t
 
	mts_cs
;

242 
uöt16_t
 
	mts_∑ddög5
;

243 
uöt16_t
 
	mts_ss
;

244 
uöt16_t
 
	mts_∑ddög6
;

245 
uöt16_t
 
	mts_ds
;

246 
uöt16_t
 
	mts_∑ddög7
;

247 
uöt16_t
 
	mts_fs
;

248 
uöt16_t
 
	mts_∑ddög8
;

249 
uöt16_t
 
	mts_gs
;

250 
uöt16_t
 
	mts_∑ddög9
;

251 
uöt16_t
 
	mts_ldt
;

252 
uöt16_t
 
	mts_∑ddög10
;

253 
uöt16_t
 
	mts_t
;

254 
uöt16_t
 
	mts_iomb
;

258 
	sG©edesc
 {

259 
	mgd_off_15_0
 : 16;

260 
	mgd_ss
 : 16;

261 
	mgd_¨gs
 : 5;

262 
	mgd_rsv1
 : 3;

263 
	mgd_ty≥
 : 4;

264 
	mgd_s
 : 1;

265 
	mgd_d∂
 : 2;

266 
	mgd_p
 : 1;

267 
	mgd_off_31_16
 : 16;

284 
	#SETGATE
(
g©e
, 
i°øp
, 
£l
, 
off
, 
d∂
) \

286 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

287 (
g©e
).
gd_ss
 = (
£l
); \

288 (
g©e
).
gd_¨gs
 = 0; \

289 (
g©e
).
gd_rsv1
 = 0; \

290 (
g©e
).
gd_ty≥
 = (
i°øp
Ë? 
STS_TG32
 : 
STS_IG32
; \

291 (
g©e
).
gd_s
 = 0; \

292 (
g©e
).
gd_d∂
 = (
d∂
); \

293 (
g©e
).
gd_p
 = 1; \

294 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

295 }

	)

298 
	#SETCALLGATE
(
g©e
, 
ss
, 
off
, 
d∂
) \

300 (
g©e
).
gd_off_15_0
 = (
uöt32_t
Ë(
off
) & 0xffff; \

301 (
g©e
).
gd_ss
 = (
ss
); \

302 (
g©e
).
gd_¨gs
 = 0; \

303 (
g©e
).
gd_rsv1
 = 0; \

304 (
g©e
).
gd_ty≥
 = 
STS_CG32
; \

305 (
g©e
).
gd_s
 = 0; \

306 (
g©e
).
gd_d∂
 = (
d∂
); \

307 (
g©e
).
gd_p
 = 1; \

308 (
g©e
).
gd_off_31_16
 = (
uöt32_t
Ë(
off
) >> 16; \

309 }

	)

312 
	sP£udodesc
 {

313 
uöt16_t
 
	mpd_lim
;

314 
uöt32_t
 
	mpd_ba£
;

315 } 
__©åibuã__
 ((
∑cked
));

	@inc/queue.h

35 #i‚de‡
JOS_INC_QUEUE_H


36 
	#JOS_INC_QUEUE_H


	)

52 
	sFrob


54 
	m‰obozz
;

55 
LIST_ENTRY
(
Frob
Ë
	m‰ob_lök
;

58 
	$LIST_HEAD
(
Frob_li°
, 
Frob
)

60 
Frob_li°
 
Êi°
;

62 
	`LIST_INIT
(&
Êi°
);

63 
Êi°
 = 
	`LIST_HEAD_INITIALIZER
(&flist);

65 if(
	$LIST_EMPTY
(&
Êi°
))

66 
	`¥ötf
("list isÉmpty\n");

68 
Frob
 *
f
 = 
	`LIST_FIRST
(&
Êi°
);

69 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

70 
f
 = 
	`LIST_NEXT
(f, 
‰ob_lök
);

72 
f
=
	`LIST_FIRST
(&
Êi°
); f != 0;

73 
f
 = 
	$LIST_NEXT
(
f
, 
‰ob_lök
))

74 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

76 
	$LIST_FOREACH
(
f
, &
Êi°
, 
‰ob_lök
)

77 
	`¥ötf
("‡%d\n", 
f
->
‰obozz
);

79 
f
 = 
	`LIST_NEXT
(
	`LIST_FIRST
(&
Êi°
));

80 
	`LIST_INSERT_AFTER
(
f
, 
g
, 
‰ob_lök
);

81 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

82 
	`LIST_INSERT_BEFORE
(
f
, 
g
, 
‰ob_lök
);

83 
	`LIST_REMOVE
(
g
, 
‰ob_lök
);

84 
	`LIST_INSERT_HEAD
(&
Êi°
, 
g
, 
‰ob_lök
);

109 
	#LIST_HEAD
(
«me
, 
ty≥
) \

110 
	s«me
 { \

111 
ty≥
 *
lh_fú°
; \

112 }

	)

118 
	#LIST_HEAD_INITIALIZER
(
hód
) \

119 { 
NULL
 
	}

	)
}

129 
	#LIST_ENTRY
(
ty≥
) \

131 
ty≥
 *
À_√xt
; \

132 
ty≥
 **
À_¥ev
; \

133 }

	)

142 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

147 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

153 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

160 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

161 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

162 (
v¨
); \

163 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

168 
	#LIST_INIT
(
hód
) do { \

169 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

170 } 0)

	)

177 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

178 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

179 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

180 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

181 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

182 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

183 } 0)

	)

190 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

191 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

192 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

193 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

194 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

195 } 0)

	)

201 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

202 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

203 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

204 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

205 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

206 } 0)

	)

212 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

213 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

214 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

215 (
ñm
)->
fõld
.
À_¥ev
; \

216 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

217 } 0)

	)

	@inc/stab.h

1 #i‚de‡
JOS_STAB_H


2 
	#JOS_STAB_H


	)

3 
	~<öc/ty≥s.h
>

15 
	#N_GSYM
 0x20

16 
	#N_FNAME
 0x22

17 
	#N_FUN
 0x24

18 
	#N_STSYM
 0x26

19 
	#N_LCSYM
 0x28

20 
	#N_MAIN
 0x2a

21 
	#N_PC
 0x30

22 
	#N_RSYM
 0x40

23 
	#N_SLINE
 0x44

24 
	#N_DSLINE
 0x46

25 
	#N_BSLINE
 0x48

26 
	#N_SSYM
 0x60

27 
	#N_SO
 0x64

28 
	#N_LSYM
 0x80

29 
	#N_BINCL
 0x82

30 
	#N_SOL
 0x84

31 
	#N_PSYM
 0xa0

32 
	#N_EINCL
 0xa2

33 
	#N_ENTRY
 0xa4

34 
	#N_LBRAC
 0xc0

35 
	#N_EXCL
 0xc2

36 
	#N_RBRAC
 0xe0

37 
	#N_BCOMM
 0xe2

38 
	#N_ECOMM
 0xe4

39 
	#N_ECOML
 0xe8

40 
	#N_LENG
 0xfe

41 

	)

43 
	sSèb
 {

44 
uöt32_t
 
	mn_°rx
;

45 
uöt8_t
 
	mn_ty≥
;

46 
uöt8_t
 
	mn_Ÿhî
;

47 
uöt16_t
 
	mn_desc
;

48 
uöçå_t
 
	mn_vÆue
;

	@inc/stdarg.h

3 #i‚de‡
JOS_INC_STDARG_H


4 
	#JOS_INC_STDARG_H


	)

6 
__buûtö_va_li°
 
	tva_li°
;

8 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
◊p,Üa°)

	)

10 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
◊p,Åy≥)

	)

12 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@inc/stdio.h

1 #i‚de‡
JOS_INC_STDIO_H


2 
	#JOS_INC_STDIO_H


	)

4 
	~<öc/°d¨g.h
>

6 #i‚de‡
NULL


7 
	#NULL
 ((*Ë0)

	)

11 
˝utch¨
(
c
);

12 
gëch¨
();

13 
isc⁄s
(
fd
);

16 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

17 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
);

18 
	`¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, ...);

19 
	`v¢¥ötf
(*
°r
, 
size
, c⁄° *
fmt
, 
va_li°
);

22 
	`˝rötf
(c⁄° *
fmt
, ...);

23 
	`v˝rötf
(c⁄° *
fmt
, 
va_li°
);

26 
	`¥ötf
(c⁄° *
fmt
, ...);

27 
	`Ârötf
(
fd
, c⁄° *
fmt
, ...);

28 
	`vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
);

31 * 
	`ªadlöe
(c⁄° *
¥om±
);

	@inc/string.h

1 #i‚de‡
JOS_INC_STRING_H


2 
	#JOS_INC_STRING_H


	)

4 
	~<öc/ty≥s.h
>

6 
°æí
(c⁄° *
s
);

7 
°∫Àn
(c⁄° *
s
, 
size_t
 
size
);

8 * 
°r˝y
(*
d°
, c⁄° *
§c
);

9 * 
°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
);

10 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

12 
p°r˝y
(*
buf
, 
buf_size
, c⁄° *
°r
);

13 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

14 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
size
);

15 * 
°rchr
(c⁄° *
s
, 
c
);

16 * 
°rföd
(c⁄° *
s
, 
c
);

18 * 
mem£t
(*
d°
, 
c
, 
size_t
 
Àn
);

20 * 
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
);

21 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

22 * 
memföd
(c⁄° *
s
, 
c
, 
size_t
 
Àn
);

24 
°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
);

	@inc/syscall.h

1 #i‚de‡
JOS_INC_SYSCALL_H


2 
	#JOS_INC_SYSCALL_H


	)

7 
	mSYS_˝uts
 = 0,

8 
	mSYS_cgëc
,

9 
	mSYS_gëívid
,

10 
	mSYS_ív_de°roy
,

11 
	mSYS_∑ge_Æloc
,

12 
	mSYS_∑ge_m≠
,

13 
	mSYS_∑ge_unm≠
,

14 
	mSYS_exof‹k
,

15 
	mSYS_ív_£t_°©us
,

16 
	mSYS_ív_£t_å≠‰ame
,

17 
	mSYS_ív_£t_pgÁu…_upˇŒ
,

18 
	mSYS_yõld
,

19 
	mSYS_ùc_åy_£nd
,

20 
	mSYS_ùc_ªcv
,

21 
	mNSYSCALLS


	@inc/timerreg.h

42 
	#TIMER_FREQ
 1193182

	)

43 
	#TIMER_DIV
(
x
Ë((
TIMER_FREQ
+(x)/2)/(x))

	)

48 
	#TIMER_CNTR0
 (
IO_TIMER1
 + 0Ë

	)

49 
	#TIMER_CNTR1
 (
IO_TIMER1
 + 1Ë

	)

50 
	#TIMER_CNTR2
 (
IO_TIMER1
 + 2Ë

	)

51 
	#TIMER_MODE
 (
IO_TIMER1
 + 3Ë

	)

52 
	#TIMER_SEL0
 0x00

	)

53 
	#TIMER_SEL1
 0x40

	)

54 
	#TIMER_SEL2
 0x80

	)

55 
	#TIMER_INTTC
 0x00

	)

56 
	#TIMER_ONESHOT
 0x02

	)

57 
	#TIMER_RATEGEN
 0x04

	)

58 
	#TIMER_SQWAVE
 0x06

	)

59 
	#TIMER_SWSTROBE
 0x08

	)

60 
	#TIMER_HWSTROBE
 0x0®

	)

61 
	#TIMER_LATCH
 0x00

	)

62 
	#TIMER_LSB
 0x10

	)

63 
	#TIMER_MSB
 0x20

	)

64 
	#TIMER_16BIT
 0x30

	)

65 
	#TIMER_BCD
 0x01

	)

	@inc/trap.h

1 #i‚de‡
JOS_INC_TRAP_H


2 
	#JOS_INC_TRAP_H


	)

6 
	#T_DIVIDE
 0

7 
	#T_DEBUG
 1

8 
	#T_NMI
 2

9 
	#T_BRKPT
 3

10 
	#T_OFLOW
 4

11 
	#T_BOUND
 5

12 
	#T_ILLOP
 6

13 
	#T_DEVICE
 7

14 
	#T_DBLFLT
 8

16 
	#T_TSS
 10

17 
	#T_SEGNP
 11

18 
	#T_STACK
 12

19 
	#T_GPFLT
 13

20 
	#T_PGFLT
 14

22 
	#T_FPERR
 16

23 
	#T_ALIGN
 17

24 
	#T_MCHK
 18

25 
	#T_SIMDERR
 19

26 

	)

29 
	#T_SYSCALL
 48

30 
	#T_DEFAULT
 500

31 

	)

33 
	#IRQ_TIMER
 0

	)

34 
	#IRQ_KBD
 1

	)

35 
	#IRQ_SERIAL
 4

	)

36 
	#IRQ_SPURIOUS
 7

	)

37 
	#IRQ_IDE
 14

	)

38 
	#IRQ_ERROR
 19

	)

40 #i‚de‡
__ASSEMBLER__


42 
	~<öc/ty≥s.h
>

44 
	sPushRegs
 {

46 
uöt32_t
 
	mªg_edi
;

47 
uöt32_t
 
	mªg_esi
;

48 
uöt32_t
 
	mªg_ebp
;

49 
uöt32_t
 
	mªg_€•
;

50 
uöt32_t
 
	mªg_ebx
;

51 
uöt32_t
 
	mªg_edx
;

52 
uöt32_t
 
	mªg_ecx
;

53 
uöt32_t
 
	mªg_óx
;

54 } 
__©åibuã__
((
∑cked
));

56 
	sTøp‰ame
 {

57 
PushRegs
 
	mtf_ªgs
;

58 
uöt16_t
 
	mtf_es
;

59 
uöt16_t
 
	mtf_∑ddög1
;

60 
uöt16_t
 
	mtf_ds
;

61 
uöt16_t
 
	mtf_∑ddög2
;

62 
uöt32_t
 
	mtf_å≠no
;

64 
uöt32_t
 
	mtf_îr
;

65 
uöçå_t
 
	mtf_eù
;

66 
uöt16_t
 
	mtf_cs
;

67 
uöt16_t
 
	mtf_∑ddög3
;

68 
uöt32_t
 
	mtf_eÊags
;

70 
uöçå_t
 
	mtf_e•
;

71 
uöt16_t
 
	mtf_ss
;

72 
uöt16_t
 
	mtf_∑ddög4
;

73 } 
__©åibuã__
((
∑cked
));

75 
	sUTøp‰ame
 {

77 
uöt32_t
 
	mutf_Áu…_va
;

78 
uöt32_t
 
	mutf_îr
;

80 
PushRegs
 
	mutf_ªgs
;

81 
uöçå_t
 
	mutf_eù
;

82 
uöt32_t
 
	mutf_eÊags
;

84 
uöçå_t
 
	mutf_e•
;

85 } 
__©åibuã__
((
∑cked
));

91 
	#SIZEOF_STRUCT_TRAPFRAME
 0x44

	)

	@inc/types.h

1 #i‚de‡
JOS_INC_TYPES_H


2 
	#JOS_INC_TYPES_H


	)

4 #i‚de‡
NULL


5 
	#NULL
 ((*Ë0)

	)

9 
	tboﬁ
;

12 
__sig√d
 
	töt8_t
;

13 
	tuöt8_t
;

14 
	töt16_t
;

15 
	tuöt16_t
;

16 
	töt32_t
;

17 
	tuöt32_t
;

18 
	töt64_t
;

19 
	tuöt64_t
;

25 
öt32_t
 
	töçå_t
;

26 
uöt32_t
 
	tuöçå_t
;

27 
uöt32_t
 
	tphyßddr_t
;

30 
uöt32_t
 
	tµn_t
;

33 
uöt32_t
 
	tsize_t
;

36 
öt32_t
 
	tssize_t
;

39 
öt32_t
 
	toff_t
;

41 
uöt64_t
 
	tbfd_vma
;

42 
öt64_t
 
	tbfd_sig√d_vma
;

43 
uöt8_t
 
	tbfd_byã
;

45 
	#MIN
(
_a
, 
_b
) \

47 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

48 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

49 
__a
 <
__b
 ? __a : __b; \

50 })

	)

51 
	#MAX
(
_a
, 
_b
) \

53 
	`ty≥of
(
_a
Ë
__a
 = (_a); \

54 
	`ty≥of
(
_b
Ë
__b
 = (_b); \

55 
__a
 >
__b
 ? __a : __b; \

56 })

	)

60 
	#ROUNDDOWN
(
a
, 
n
) \

62 
uöt32_t
 
__a
 = (uöt32_tË(
a
); \

63 (
	`ty≥of
(
a
)Ë(
__a
 - __®% (
n
)); \

64 })

	)

66 
	#ROUNDUP
(
a
, 
n
) \

68 
uöt32_t
 
__n
 = (uöt32_tË(
n
); \

69 (
	`ty≥of
(
a
)Ë(
	`ROUNDDOWN
((
uöt32_t
Ë◊Ë+ 
__n
 - 1, __n)); \

70 })

	)

73 
	#off£tof
(
ty≥
, 
membî
Ë((
size_t
Ë(&(—y≥*)0)->membî))

	)

	@inc/x86.h

1 #i‚de‡
JOS_INC_X86_H


2 
	#JOS_INC_X86_H


	)

4 
	~<öc/ty≥s.h
>

6 
__ölöe
 
	$bªakpoöt
(Ë
	`__©åibuã__
((
Æways_ölöe
));

7 
__ölöe
 
uöt8_t
 
	$öb
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

8 
__ölöe
 
	$ösb
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

9 
__ölöe
 
uöt16_t
 
	$öw
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

10 
__ölöe
 
	$ösw
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

11 
__ölöe
 
uöt32_t
 
	$öl
(
p‹t
Ë
	`__©åibuã__
((
Æways_ölöe
));

12 
__ölöe
 
	$ö¶
(
p‹t
, *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

13 
__ölöe
 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

14 
__ölöe
 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

15 
__ölöe
 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

16 
__ölöe
 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

17 
__ölöe
 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
Ë
	`__©åibuã__
((
Æways_ölöe
));

18 
__ölöe
 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
Ë
	`__©åibuã__
((
Æways_ölöe
));

19 
__ölöe
 
	$övÕg
(*
addr
Ë
	`__©åibuã__
((
Æways_ölöe
));

20 
__ölöe
 
	$lidt
(*
p
Ë
	`__©åibuã__
((
Æways_ölöe
));

21 
__ölöe
 
	$Œdt
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

22 
__ölöe
 
	$…r
(
uöt16_t
 
£l
Ë
	`__©åibuã__
((
Æways_ölöe
));

23 
__ölöe
 
	$l¸0
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

24 
__ölöe
 
uöt32_t
 
	$r¸0
(Ë
	`__©åibuã__
((
Æways_ölöe
));

25 
__ölöe
 
uöt32_t
 
	$r¸2
(Ë
	`__©åibuã__
((
Æways_ölöe
));

26 
__ölöe
 
	$l¸3
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

27 
__ölöe
 
uöt32_t
 
	$r¸3
(Ë
	`__©åibuã__
((
Æways_ölöe
));

28 
__ölöe
 
	$l¸4
(
uöt32_t
 
vÆ
Ë
	`__©åibuã__
((
Æways_ölöe
));

29 
__ölöe
 
uöt32_t
 
	$r¸4
(Ë
	`__©åibuã__
((
Æways_ölöe
));

30 
__ölöe
 
	$ébÊush
(Ë
	`__©åibuã__
((
Æways_ölöe
));

31 
__ölöe
 
uöt32_t
 
	$ªad_eÊags
(Ë
	`__©åibuã__
((
Æways_ölöe
));

32 
__ölöe
 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
Ë
	`__©åibuã__
((
Æways_ölöe
));

33 
__ölöe
 
uöt32_t
 
	$ªad_ebp
(Ë
	`__©åibuã__
((
Æways_ölöe
));

34 
__ölöe
 
uöt32_t
 
	$ªad_e•
(Ë
	`__©åibuã__
((
Æways_ölöe
));

35 
__ölöe
 
	$wrôe_e•
(
uöt32_t
 
e•
Ë
	`__©åibuã__
((
Æways_ölöe
));

36 
__ölöe
 
	`˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
);

37 
__ölöe
 
uöt64_t
 
	$ªad_tsc
(Ë
	`__©åibuã__
((
Æways_ölöe
));

39 
__ölöe
 

40 
	$bªakpoöt
()

42 
__asm
 
	`__vﬁ©ûe
("int3");

43 
	}
}

45 
__ölöe
 
uöt8_t


46 
	$öb
(
p‹t
)

48 
uöt8_t
 
d©a
;

49 
__asm
 
	`__vﬁ©ûe
("öb %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

50  
d©a
;

51 
	}
}

53 
__ölöe
 

54 
	$ösb
(
p‹t
, *
addr
, 
˙t
)

56 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsb" :

57 "=D" (
addr
), "=c" (
˙t
) :

58 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

60 
	}
}

62 
__ölöe
 
uöt16_t


63 
	$öw
(
p‹t
)

65 
uöt16_t
 
d©a
;

66 
__asm
 
	`__vﬁ©ûe
("öw %w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

67  
d©a
;

68 
	}
}

70 
__ölöe
 

71 
	$ösw
(
p‹t
, *
addr
, 
˙t
)

73 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsw" :

74 "=D" (
addr
), "=c" (
˙t
) :

75 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

77 
	}
}

79 
__ölöe
 
uöt32_t


80 
	$öl
(
p‹t
)

82 
uöt32_t
 
d©a
;

83 
__asm
 
	`__vﬁ©ûe
("ö»%w1,%0" : "˜" (
d©a
Ë: "d" (
p‹t
));

84  
d©a
;

85 
	}
}

87 
__ölöe
 

88 
	$ö¶
(
p‹t
, *
addr
, 
˙t
)

90 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\tinsl" :

91 "=D" (
addr
), "=c" (
˙t
) :

92 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

94 
	}
}

96 
__ölöe
 

97 
	$outb
(
p‹t
, 
uöt8_t
 
d©a
)

99 
__asm
 
	`__vﬁ©ûe
("outb %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

100 
	}
}

102 
__ölöe
 

103 
	$outsb
(
p‹t
, c⁄° *
addr
, 
˙t
)

105 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsb" :

106 "=S" (
addr
), "=c" (
˙t
) :

107 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

109 
	}
}

111 
__ölöe
 

112 
	$outw
(
p‹t
, 
uöt16_t
 
d©a
)

114 
__asm
 
	`__vﬁ©ûe
("outw %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

115 
	}
}

117 
__ölöe
 

118 
	$outsw
(
p‹t
, c⁄° *
addr
, 
˙t
)

120 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsw" :

121 "=S" (
addr
), "=c" (
˙t
) :

122 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

124 
	}
}

126 
__ölöe
 

127 
	$out¶
(
p‹t
, c⁄° *
addr
, 
˙t
)

129 
__asm
 
	`__vﬁ©ûe
("cld\n\trepne\n\toutsl" :

130 "=S" (
addr
), "=c" (
˙t
) :

131 "d" (
p‹t
), "0" (
addr
), "1" (
˙t
) :

133 
	}
}

135 
__ölöe
 

136 
	$oué
(
p‹t
, 
uöt32_t
 
d©a
)

138 
__asm
 
	`__vﬁ©ûe
("oué %0,%w1" : : "a" (
d©a
), "d" (
p‹t
));

139 
	}
}

141 
__ölöe
 

142 
	$övÕg
(*
addr
)

144 
__asm
 
	`__vﬁ©ûe
("övÕg (%0)" : : "r" (
addr
) : "memory");

145 
	}
}

147 
__ölöe
 

148 
	$lidt
(*
p
)

150 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
p
));

151 
	}
}

153 
__ölöe
 

154 
	$Œdt
(
uöt16_t
 
£l
)

156 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

157 
	}
}

159 
__ölöe
 

160 
	$…r
(
uöt16_t
 
£l
)

162 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

163 
	}
}

165 
__ölöe
 

166 
	$l¸0
(
uöt32_t
 
vÆ
)

168 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸0" : : "r" (
vÆ
));

169 
	}
}

171 
__ölöe
 
uöt32_t


172 
	$r¸0
()

174 
uöt32_t
 
vÆ
;

175 
__asm
 
	`__vﬁ©ûe
("mov»%%¸0,%0" : "Ù" (
vÆ
));

176  
vÆ
;

177 
	}
}

179 
__ölöe
 
uöt32_t


180 
	$r¸2
()

182 
uöt32_t
 
vÆ
;

183 
__asm
 
	`__vﬁ©ûe
("mov»%%¸2,%0" : "Ù" (
vÆ
));

184  
vÆ
;

185 
	}
}

187 
__ölöe
 

188 
	$l¸3
(
uöt32_t
 
vÆ
)

190 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
vÆ
));

191 
	}
}

193 
__ölöe
 
uöt32_t


194 
	$r¸3
()

196 
uöt32_t
 
vÆ
;

197 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
vÆ
));

198  
vÆ
;

199 
	}
}

201 
__ölöe
 

202 
	$l¸4
(
uöt32_t
 
vÆ
)

204 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸4" : : "r" (
vÆ
));

205 
	}
}

207 
__ölöe
 
uöt32_t


208 
	$r¸4
()

210 
uöt32_t
 
¸4
;

211 
__asm
 
	`__vﬁ©ûe
("mov»%%¸4,%0" : "Ù" (
¸4
));

212  
¸4
;

213 
	}
}

215 
__ölöe
 

216 
	$ébÊush
()

218 
uöt32_t
 
¸3
;

219 
__asm
 
	`__vﬁ©ûe
("mov»%%¸3,%0" : "Ù" (
¸3
));

220 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%¸3" : : "r" (
¸3
));

221 
	}
}

223 
__ölöe
 
uöt32_t


224 
	$ªad_eÊags
()

226 
uöt32_t
 
eÊags
;

227 
__asm
 
	`__vﬁ©ûe
("pushÊ;Ö›»%0" : "Ù" (
eÊags
));

228  
eÊags
;

229 
	}
}

231 
__ölöe
 

232 
	$wrôe_eÊags
(
uöt32_t
 
eÊags
)

234 
__asm
 
	`__vﬁ©ûe
("push»%0;Ö›Ê" : : "r" (
eÊags
));

235 
	}
}

237 
__ölöe
 
uöt32_t


238 
	$ªad_ebp
()

240 
uöt32_t
 
ebp
;

241 
__asm
 
	`__vﬁ©ûe
("mov»%%ebp,%0" : "Ù" (
ebp
));

242  
ebp
;

243 
	}
}

245 
__ölöe
 
uöt32_t


246 
	$ªad_e•
()

248 
uöt32_t
 
e•
;

249 
__asm
 
	`__vﬁ©ûe
("mov»%%e•,%0" : "Ù" (
e•
));

250  
e•
;

251 
	}
}

253 
__ölöe
 

254 
	$wrôe_e•
(
uöt32_t
 
e•
)

256 
__asm
 
	`__vﬁ©ûe
("mov»%0,%%e•" : : "r" (
e•
));

257 
	}
}

258 
__ölöe
 

259 
	$˝uid
(
uöt32_t
 
öfo
, uöt32_à*
óxp
, uöt32_à*
ebxp
, uöt32_à*
ecxp
, uöt32_à*
edxp
)

261 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

262 
asm
 volatile("cpuid"

263 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
)

264 : "a" (
öfo
));

265 i‡(
óxp
)

266 *
óxp
 = 
óx
;

267 i‡(
ebxp
)

268 *
ebxp
 = 
ebx
;

269 i‡(
ecxp
)

270 *
ecxp
 = 
ecx
;

271 i‡(
edxp
)

272 *
edxp
 = 
edx
;

273 
	}
}

275 
__ölöe
 
uöt64_t


276 
	$ªad_tsc
()

278 
uöt64_t
 
tsc
;

279 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "=A" (
tsc
));

280  
tsc
;

281 
	}
}

	@kern/console.c

3 
	~<öc/x86.h
>

4 
	~<öc/memœyout.h
>

5 
	~<öc/kbdªg.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/c⁄sﬁe.h
>

10 
	~<kîn/picúq.h
>

12 
c⁄s_öå
((*
¥oc
)());

13 
	`c⁄s_putc
(
c
);

17 
	$dñay
()

19 
	`öb
(0x84);

20 
	`öb
(0x84);

21 
	`öb
(0x84);

22 
	`öb
(0x84);

23 
	}
}

27 
	#COM1
 0x3F8

	)

29 
	#COM_RX
 0

30 
	#COM_TX
 0

31 
	#COM_DLL
 0

32 
	#COM_DLM
 1

33 
	#COM_IER
 1

34 
	#COM_IER_RDI
 0x01

35 
	#COM_IIR
 2

36 
	#COM_FCR
 2

37 
	#COM_LCR
 3

38 
	#COM_LCR_DLAB
 0x80

39 
	#COM_LCR_WLEN8
 0x03

40 
	#COM_MCR
 4

41 
	#COM_MCR_RTS
 0x02

42 
	#COM_MCR_DTR
 0x01

43 
	#COM_MCR_OUT2
 0x08

44 
	#COM_LSR
 5

45 
	#COM_LSR_DATA
 0x01

46 
	#COM_LSR_TXRDY
 0x20

47 
	#COM_LSR_TSRE
 0x40

48 

	)

49 
boﬁ
 
	g£rül_exi°s
;

52 
	$£rül_¥oc_d©a
()

54 i‡(!(
	`öb
(
COM1
+
COM_LSR
Ë& 
COM_LSR_DATA
))

56  
	`öb
(
COM1
+
COM_RX
);

57 
	}
}

60 
	$£rül_öå
()

62 i‡(
£rül_exi°s
)

63 
	`c⁄s_öå
(
£rül_¥oc_d©a
);

64 
	}
}

67 
	$£rül_putc
(
c
)

69 
i
;

71 
i
 = 0;

72 !(
	`öb
(
COM1
 + 
COM_LSR
Ë& 
COM_LSR_TXRDY
Ë&& 
i
 < 12800;

73 
i
++)

74 
	`dñay
();

76 
	`outb
(
COM1
 + 
COM_TX
, 
c
);

77 
	}
}

80 
	$£rül_öô
()

83 
	`outb
(
COM1
+
COM_FCR
, 0);

86 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_DLAB
);

87 
	`outb
(
COM1
+
COM_DLL
, (
uöt8_t
) (115200 / 9600));

88 
	`outb
(
COM1
+
COM_DLM
, 0);

91 
	`outb
(
COM1
+
COM_LCR
, 
COM_LCR_WLEN8
 & ~
COM_LCR_DLAB
);

94 
	`outb
(
COM1
+
COM_MCR
, 0);

96 
	`outb
(
COM1
+
COM_IER
, 
COM_IER_RDI
);

100 
£rül_exi°s
 = (
	`öb
(
COM1
+
COM_LSR
) != 0xFF);

101 (Ë
	`öb
(
COM1
+
COM_IIR
);

102 (Ë
	`öb
(
COM1
+
COM_RX
);

104 
	}
}

113 
	$Õt_putc
(
c
)

115 
i
;

117 
i
 = 0; !(
	`öb
(0x378+1) & 0x80) && i < 12800; i++)

118 
	`dñay
();

119 
	`outb
(0x378+0, 
c
);

120 
	`outb
(0x378+2, 0x08|0x04|0x01);

121 
	`outb
(0x378+2, 0x08);

122 
	}
}

129 
	gaddr_6845
;

130 
uöt16_t
 *
	g¸t_buf
;

131 
uöt16_t
 
	g¸t_pos
;

134 
	$cga_öô
()

136 vﬁ©ûê
uöt16_t
 *
˝
;

137 
uöt16_t
 
was
;

138 
pos
;

140 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
CGA_BUF
);

141 
was
 = *
˝
;

142 *
˝
 = (
uöt16_t
) 0xA55A;

143 i‡(*
˝
 != 0xA55A) {

144 
˝
 = (
uöt16_t
*Ë(
KERNBASE
 + 
MONO_BUF
);

145 
addr_6845
 = 
MONO_BASE
;

147 *
˝
 = 
was
;

148 
addr_6845
 = 
CGA_BASE
;

152 
	`outb
(
addr_6845
, 14);

153 
pos
 = 
	`öb
(
addr_6845
 + 1) << 8;

154 
	`outb
(
addr_6845
, 15);

155 
pos
 |
	`öb
(
addr_6845
 + 1);

157 
¸t_buf
 = (
uöt16_t
*Ë
˝
;

158 
¸t_pos
 = 
pos
;

159 
	}
}

164 
	$cga_putc
(
c
)

167 i‡(!(
c
 & ~0xFF))

168 
c
 |= 0x0700;

170 
c
 & 0xff) {

172 i‡(
¸t_pos
 > 0) {

173 
¸t_pos
--;

174 
¸t_buf
[
¸t_pos
] = (
c
 & ~0xff) | ' ';

178 
¸t_pos
 +
CRT_COLS
;

181 
¸t_pos
 -(¸t_po†% 
CRT_COLS
);

184 
	`c⁄s_putc
(' ');

185 
	`c⁄s_putc
(' ');

186 
	`c⁄s_putc
(' ');

187 
	`c⁄s_putc
(' ');

188 
	`c⁄s_putc
(' ');

191 
¸t_buf
[
¸t_pos
++] = 
c
;

196 i‡(
¸t_pos
 >
CRT_SIZE
) {

197 
i
;

199 
	`memmove
(
¸t_buf
, cπ_bu‡+ 
CRT_COLS
, (
CRT_SIZE
 - CRT_COLSË* (
uöt16_t
));

200 
i
 = 
CRT_SIZE
 - 
CRT_COLS
; i < CRT_SIZE; i++)

201 
¸t_buf
[
i
] = 0x0700 | ' ';

202 
¸t_pos
 -
CRT_COLS
;

206 
	`outb
(
addr_6845
, 14);

207 
	`outb
(
addr_6845
 + 1, 
¸t_pos
 >> 8);

208 
	`outb
(
addr_6845
, 15);

209 
	`outb
(
addr_6845
 + 1, 
¸t_pos
);

210 
	}
}

215 
	#NO
 0

	)

217 
	#SHIFT
 (1<<0)

	)

218 
	#CTL
 (1<<1)

	)

219 
	#ALT
 (1<<2)

	)

221 
	#CAPSLOCK
 (1<<3)

	)

222 
	#NUMLOCK
 (1<<4)

	)

223 
	#SCROLLLOCK
 (1<<5)

	)

225 
	#E0ESC
 (1<<6)

	)

227 
uöt8_t
 
	gshi·code
[256] =

229 [0x1D] = 
CTL
,

230 [0x2A] = 
SHIFT
,

231 [0x36] = 
SHIFT
,

232 [0x38] = 
ALT
,

233 [0x9D] = 
CTL
,

234 [0xB8] = 
ALT


237 
uöt8_t
 
	gtoggÀcode
[256] =

239 [0x3A] = 
CAPSLOCK
,

240 [0x45] = 
NUMLOCK
,

241 [0x46] = 
SCROLLLOCK


244 
uöt8_t
 
	gn‹mÆm≠
[256] =

246 
NO
, 0x1B, '1', '2', '3', '4', '5', '6',

249 'o', 'p', '[', ']', '\n', 
NO
, 'a', 's',

251 '\'', '`', 
NO
, '\\', 'z', 'x', 'c', 'v',

252 'b', 'n', 'm', ',', '.', '/', 
NO
, '*',

253 
NO
, ' ', NO, NO, NO, NO, NO, NO,

254 
NO
, NO, NO, NO, NO, NO, NO, '7',

256 '2', '3', '0', '.', 
NO
, NO, NO, NO,

257 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

258 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

259 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

260 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

261 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

262 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


265 
uöt8_t
 
	gshi·m≠
[256] =

267 
NO
, 033, '!', '@', '#', '$', '%', '^',

270 'O', 'P', '{', '}', '\n', 
NO
, 'A', 'S',

272 '"', '~', 
NO
, '|', 'Z', 'X', 'C', 'V',

273 'B', 'N', 'M', '<', '>', '?', 
NO
, '*',

274 
NO
, ' ', NO, NO, NO, NO, NO, NO,

275 
NO
, NO, NO, NO, NO, NO, NO, '7',

277 '2', '3', '0', '.', 
NO
, NO, NO, NO,

278 [0xC7] = 
KEY_HOME
, [0x9C] = '\n' ,

279 [0xB5] = '/' , [0xC8] = 
KEY_UP
,

280 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

281 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

282 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

283 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


286 
	#C
(
x
Ë(x - '@')

	)

288 
uöt8_t
 
	g˘lm≠
[256] =

290 
NO
, NO, NO, NO, NO, NO, NO, NO,

291 
NO
, NO, NO, NO, NO, NO, NO, NO,

292 
C
('Q'), C('W'), C('E'), C('R'), C('T'), C('Y'), C('U'), C('I'),

293 
C
('O'), C('P'), 
NO
, NO, '\r', NO, C('A'), C('S'),

294 
C
('D'), C('F'), C('G'), C('H'), C('J'), C('K'), C('L'), 
NO
,

295 
NO
, NO, NO, 
C
('\\'), C('Z'), C('X'), C('C'), C('V'),

296 
C
('B'), C('N'), C('M'), 
NO
, NO, C('/'), NO, NO,

297 [0x97] = 
KEY_HOME
,

298 [0xB5] = 
C
('/'), [0xC8] = 
KEY_UP
,

299 [0xC9] = 
KEY_PGUP
, [0xCB] = 
KEY_LF
,

300 [0xCD] = 
KEY_RT
, [0xCF] = 
KEY_END
,

301 [0xD0] = 
KEY_DN
, [0xD1] = 
KEY_PGDN
,

302 [0xD2] = 
KEY_INS
, [0xD3] = 
KEY_DEL


305 
uöt8_t
 *
	gch¨code
[4] = {

306 
n‹mÆm≠
,

307 
shi·m≠
,

308 
˘lm≠
,

309 
˘lm≠


317 
	$kbd_¥oc_d©a
()

319 
c
;

320 
uöt8_t
 
d©a
;

321 
uöt32_t
 
shi·
;

323 i‡((
	`öb
(
KBSTATP
Ë& 
KBS_DIB
) == 0)

326 
d©a
 = 
	`öb
(
KBDATAP
);

328 i‡(
d©a
 == 0xE0) {

330 
shi·
 |
E0ESC
;

332 } i‡(
d©a
 & 0x80) {

334 
d©a
 = (
shi·
 & 
E0ESC
 ? data : data & 0x7F);

335 
shi·
 &~(
shi·code
[
d©a
] | 
E0ESC
);

337 } i‡(
shi·
 & 
E0ESC
) {

339 
d©a
 |= 0x80;

340 
shi·
 &~
E0ESC
;

343 
shi·
 |
shi·code
[
d©a
];

344 
shi·
 ^
toggÀcode
[
d©a
];

346 
c
 = 
ch¨code
[
shi·
 & (
CTL
 | 
SHIFT
)][
d©a
];

347 i‡(
shi·
 & 
CAPSLOCK
) {

348 i‡('a' <
c
 && c <= 'z')

349 
c
 += 'A' - 'a';

350 i‡('A' <
c
 && c <= 'Z')

351 
c
 += 'a' - 'A';

356 i‡(!(~
shi·
 & (
CTL
 | 
ALT
)Ë&& 
c
 =
KEY_DEL
) {

357 
	`˝rötf
("Rebooting!\n");

358 
	`outb
(0x92, 0x3);

361  
c
;

362 
	}
}

365 
	$kbd_öå
()

367 
	`c⁄s_öå
(
kbd_¥oc_d©a
);

368 
	}
}

371 
	$kbd_öô
()

374 
	`kbd_öå
();

375 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<1));

376 
	}
}

385 
	#CONSBUFSIZE
 512

	)

388 
uöt8_t
 
	mbuf
[
CONSBUFSIZE
];

389 
uöt32_t
 
	mΩos
;

390 
uöt32_t
 
	mwpos
;

391 } 
	gc⁄s
;

396 
c⁄s_öå
((*
¥oc
)())

398 
c
;

400 (
c
 = (*
¥oc
)()) != -1) {

401 i‡(
c
 == 0)

403 
c⁄s
.
buf
[c⁄s.
wpos
++] = 
c
;

404 i‡(
c⁄s
.
wpos
 =
CONSBUFSIZE
)

405 
c⁄s
.
wpos
 = 0;

407 
	}
}

411 
	$c⁄s_gëc
()

413 
c
;

418 
	`£rül_öå
();

419 
	`kbd_öå
();

422 i‡(
c⁄s
.
Ωos
 !c⁄s.
wpos
) {

423 
c
 = 
c⁄s
.
buf
[c⁄s.
Ωos
++];

424 i‡(
c⁄s
.
Ωos
 =
CONSBUFSIZE
)

425 
c⁄s
.
Ωos
 = 0;

426  
c
;

429 
	}
}

433 
	$c⁄s_putc
(
c
)

435 
	`£rül_putc
(
c
);

436 
	`Õt_putc
(
c
);

437 
	`cga_putc
(
c
);

438 
	}
}

442 
	$c⁄s_öô
()

444 
	`cga_öô
();

445 
	`kbd_öô
();

446 
	`£rül_öô
();

448 i‡(!
£rül_exi°s
)

449 
	`˝rötf
("SerialÖort doesÇotÉxist!\n");

450 
	}
}

456 
	$˝utch¨
(
c
)

458 
	`c⁄s_putc
(
c
);

459 
	}
}

462 
	$gëch¨
()

464 
c
;

466 (
c
 = 
	`c⁄s_gëc
()) == 0)

468  
c
;

469 
	}
}

472 
	$isc⁄s
(
fdnum
)

476 
	}
}

	@kern/console.h

3 #i‚de‡
_CONSOLE_H_


4 
	#_CONSOLE_H_


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/ty≥s.h
>

11 
	#MONO_BASE
 0x3B4

	)

12 
	#MONO_BUF
 0xB0000

	)

13 
	#CGA_BASE
 0x3D4

	)

14 
	#CGA_BUF
 0xB8000

	)

16 
	#CRT_ROWS
 25

	)

17 
	#CRT_COLS
 80

	)

18 
	#CRT_SIZE
 (
CRT_ROWS
 * 
CRT_COLS
)

	)

20 
c⁄s_öô
();

21 
c⁄s_gëc
();

23 
kbd_öå
();

24 
£rül_öå
();

	@kern/dis-asm.h

9 #i‚de‡
DIS_ASM_H


10 
	#DIS_ASM_H


	)

11 
	~<öc/ty≥s.h
>

12 
	~<öc/°dio.h
>

13 
	~<öc/as£π.h
>

14 
	~<öc/°rög.h
>

16 
	#PARAMS
(
x
Ë
	)
x

17 *
	tPTR
;

18 
	#•rötf_vma
(
s
,
x
Ë
	`•rötf
 (s, "%0x", x)

	)

19 
	#¢¥ötf_vma
(
s
,
ss
,
x
Ë
	`¢¥ötf
 (s, ss, "%0x", x)

	)

21 
	#BFD64


	)

23 
	ebfd_Êavour
 {

24 
	mbfd_èrgë_unknown_Êavour
,

25 
	mbfd_èrgë_aout_Êavour
,

26 
	mbfd_èrgë_coff_Êavour
,

27 
	mbfd_èrgë_ecoff_Êavour
,

28 
	mbfd_èrgë_ñf_Êavour
,

29 
	mbfd_èrgë_õì_Êavour
,

30 
	mbfd_èrgë_∆m_Êavour
,

31 
	mbfd_èrgë_ﬂsys_Êavour
,

32 
	mbfd_èrgë_ãkhex_Êavour
,

33 
	mbfd_èrgë_§ec_Êavour
,

34 
	mbfd_èrgë_ihex_Êavour
,

35 
	mbfd_èrgë_som_Êavour
,

36 
	mbfd_èrgë_os9k_Êavour
,

37 
	mbfd_èrgë_vîßdos_Êavour
,

38 
	mbfd_èrgë_msdos_Êavour
,

39 
	mbfd_èrgë_evax_Êavour


42 
	ebfd_ídün
 { 
	mBFD_ENDIAN_BIG
, 
	mBFD_ENDIAN_LITTLE
, 
	mBFD_ENDIAN_UNKNOWN
 };

44 
	ebfd_¨chôe˘uª


46 
	mbfd_¨ch_unknown
,

47 
	mbfd_¨ch_obscuª
,

48 
	mbfd_¨ch_m68k
,

49 
	#bfd_mach_m68000
 1

	)

50 
	#bfd_mach_m68008
 2

	)

51 
	#bfd_mach_m68010
 3

	)

52 
	#bfd_mach_m68020
 4

	)

53 
	#bfd_mach_m68030
 5

	)

54 
	#bfd_mach_m68040
 6

	)

55 
	#bfd_mach_m68060
 7

	)

56 
	#bfd_mach_˝u32
 8

	)

57 
	#bfd_mach_mcf5200
 9

	)

58 
	#bfd_mach_mcf5206e
 10

	)

59 
	#bfd_mach_mcf5307
 11

	)

60 
	#bfd_mach_mcf5407
 12

	)

61 
	#bfd_mach_mcf528x
 13

	)

62 
	#bfd_mach_mcfv4e
 14

	)

63 
	#bfd_mach_mcf521x
 15

	)

64 
	#bfd_mach_mcf5249
 16

	)

65 
	#bfd_mach_mcf547x
 17

	)

66 
	#bfd_mach_mcf548x
 18

	)

67 
	mbfd_¨ch_vax
,

68 
	mbfd_¨ch_i960
,

77 
	#bfd_mach_i960_c‹e
 1

	)

78 
	#bfd_mach_i960_ka_ß
 2

	)

79 
	#bfd_mach_i960_kb_sb
 3

	)

80 
	#bfd_mach_i960_mc
 4

	)

81 
	#bfd_mach_i960_xa
 5

	)

82 
	#bfd_mach_i960_ˇ
 6

	)

83 
	#bfd_mach_i960_jx
 7

	)

84 
	#bfd_mach_i960_hx
 8

	)

86 
	mbfd_¨ch_a29k
,

87 
	mbfd_¨ch_•¨c
,

88 
	#bfd_mach_•¨c
 1

	)

90 
	#bfd_mach_•¨c_•¨˛ë
 2

	)

91 
	#bfd_mach_•¨c_•¨˛ôe
 3

	)

92 
	#bfd_mach_•¨c_v8∂us
 4

	)

93 
	#bfd_mach_•¨c_v8∂uß
 5

	)

94 
	#bfd_mach_•¨c_•¨˛ôe_À
 6

	)

95 
	#bfd_mach_•¨c_v9
 7

	)

96 
	#bfd_mach_•¨c_v9a
 8

	)

97 
	#bfd_mach_•¨c_v8∂usb
 9

	)

98 
	#bfd_mach_•¨c_v9b
 10

	)

100 
	#bfd_mach_•¨c_v9_p
(
mach
) \

101 ((
mach
Ë>
bfd_mach_•¨c_v8∂us
 && (machË<
bfd_mach_•¨c_v9b
 \

102 && (
mach
Ë!
bfd_mach_•¨c_•¨˛ôe_À
)

	)

103 
	mbfd_¨ch_mùs
,

104 
	#bfd_mach_mùs3000
 3000

	)

105 
	#bfd_mach_mùs3900
 3900

	)

106 
	#bfd_mach_mùs4000
 4000

	)

107 
	#bfd_mach_mùs4010
 4010

	)

108 
	#bfd_mach_mùs4100
 4100

	)

109 
	#bfd_mach_mùs4300
 4300

	)

110 
	#bfd_mach_mùs4400
 4400

	)

111 
	#bfd_mach_mùs4600
 4600

	)

112 
	#bfd_mach_mùs4650
 4650

	)

113 
	#bfd_mach_mùs5000
 5000

	)

114 
	#bfd_mach_mùs6000
 6000

	)

115 
	#bfd_mach_mùs8000
 8000

	)

116 
	#bfd_mach_mùs10000
 10000

	)

117 
	#bfd_mach_mùs16
 16

	)

118 
	mbfd_¨ch_i386
,

119 
	#bfd_mach_i386_i386
 0

	)

120 
	#bfd_mach_i386_i8086
 1

	)

121 
	#bfd_mach_i386_i386_öãl_sy¡ax
 2

	)

122 
	#bfd_mach_x86_64
 3

	)

123 
	#bfd_mach_x86_64_öãl_sy¡ax
 4

	)

124 
	mbfd_¨ch_we32k
,

125 
	mbfd_¨ch_èh€
,

126 
	mbfd_¨ch_i860
,

127 
	mbfd_¨ch_romp
,

128 
	mbfd_¨ch_Ælü¡
,

129 
	mbfd_¨ch_c⁄vex
,

130 
	mbfd_¨ch_m88k
,

131 
	mbfd_¨ch_pyømid
,

132 
	mbfd_¨ch_h8300
,

133 
	#bfd_mach_h8300
 1

	)

134 
	#bfd_mach_h8300h
 2

	)

135 
	#bfd_mach_h8300s
 3

	)

136 
	mbfd_¨ch_powîpc
,

137 
	#bfd_mach_µc
 0

	)

138 
	#bfd_mach_µc64
 1

	)

139 
	#bfd_mach_µc_403
 403

	)

140 
	#bfd_mach_µc_403gc
 4030

	)

141 
	#bfd_mach_µc_e500
 500

	)

142 
	#bfd_mach_µc_505
 505

	)

143 
	#bfd_mach_µc_601
 601

	)

144 
	#bfd_mach_µc_602
 602

	)

145 
	#bfd_mach_µc_603
 603

	)

146 
	#bfd_mach_µc_ec603e
 6031

	)

147 
	#bfd_mach_µc_604
 604

	)

148 
	#bfd_mach_µc_620
 620

	)

149 
	#bfd_mach_µc_630
 630

	)

150 
	#bfd_mach_µc_750
 750

	)

151 
	#bfd_mach_µc_860
 860

	)

152 
	#bfd_mach_µc_a35
 35

	)

153 
	#bfd_mach_µc_rs64ii
 642

	)

154 
	#bfd_mach_µc_rs64iii
 643

	)

155 
	#bfd_mach_µc_7400
 7400

	)

156 
	mbfd_¨ch_rs6000
,

157 
	mbfd_¨ch_hµa
,

158 
	#bfd_mach_hµa10
 10

	)

159 
	#bfd_mach_hµa11
 11

	)

160 
	#bfd_mach_hµa20
 20

	)

161 
	#bfd_mach_hµa20w
 25

	)

162 
	mbfd_¨ch_d10v
,

163 
	mbfd_¨ch_z8k
,

164 
	#bfd_mach_z8001
 1

	)

165 
	#bfd_mach_z8002
 2

	)

166 
	mbfd_¨ch_h8500
,

167 
	mbfd_¨ch_sh
,

168 
	#bfd_mach_sh
 1

	)

169 
	#bfd_mach_sh2
 0x20

	)

170 
	#bfd_mach_sh_d•
 0x2d

	)

171 
	#bfd_mach_sh2a
 0x2a

	)

172 
	#bfd_mach_sh2a_noÂu
 0x2b

	)

173 
	#bfd_mach_sh2e
 0x2e

	)

174 
	#bfd_mach_sh3
 0x30

	)

175 
	#bfd_mach_sh3_nommu
 0x31

	)

176 
	#bfd_mach_sh3_d•
 0x3d

	)

177 
	#bfd_mach_sh3e
 0x3e

	)

178 
	#bfd_mach_sh4
 0x40

	)

179 
	#bfd_mach_sh4_noÂu
 0x41

	)

180 
	#bfd_mach_sh4_nommu_noÂu
 0x42

	)

181 
	#bfd_mach_sh4a
 0x4a

	)

182 
	#bfd_mach_sh4a_noÂu
 0x4b

	)

183 
	#bfd_mach_sh4Æ_d•
 0x4d

	)

184 
	#bfd_mach_sh5
 0x50

	)

185 
	mbfd_¨ch_Æpha
,

186 
	#bfd_mach_Æpha
 1

	)

187 
	mbfd_¨ch_¨m
,

188 
	#bfd_mach_¨m_unknown
 0

	)

189 
	#bfd_mach_¨m_2
 1

	)

190 
	#bfd_mach_¨m_2a
 2

	)

191 
	#bfd_mach_¨m_3
 3

	)

192 
	#bfd_mach_¨m_3M
 4

	)

193 
	#bfd_mach_¨m_4
 5

	)

194 
	#bfd_mach_¨m_4T
 6

	)

195 
	#bfd_mach_¨m_5
 7

	)

196 
	#bfd_mach_¨m_5T
 8

	)

197 
	#bfd_mach_¨m_5TE
 9

	)

198 
	#bfd_mach_¨m_XSˇÀ
 10

	)

199 
	#bfd_mach_¨m_ï9312
 11

	)

200 
	#bfd_mach_¨m_iWMMXt
 12

	)

201 
	#bfd_mach_¨m_iWMMXt2
 13

	)

202 
	mbfd_¨ch_ns32k
,

203 
	mbfd_¨ch_w65
,

204 
	mbfd_¨ch_tic30
,

205 
	mbfd_¨ch_v850
,

206 
	#bfd_mach_v850
 0

	)

207 
	mbfd_¨ch_¨c
,

208 
	#bfd_mach_¨c_ba£
 0

	)

209 
	mbfd_¨ch_m32r
,

210 
	#bfd_mach_m32r
 0

	)

211 
	mbfd_¨ch_mn10200
,

212 
	mbfd_¨ch_mn10300
,

213 
	mbfd_¨ch_¸is
,

214 
	#bfd_mach_¸is_v0_v10
 255

	)

215 
	#bfd_mach_¸is_v32
 32

	)

216 
	#bfd_mach_¸is_v10_v32
 1032

	)

217 
	mbfd_¨ch_œ°


219 
	#bfd_mach_s390_31
 31

	)

220 
	#bfd_mach_s390_64
 64

	)

222 
	ssymbﬁ_ˇche_íåy


224 c⁄° *
	m«me
;

227 
PTR
 
	mp
;

228 
bfd_vma
 
	mi
;

229 } 
	mud©a
;

230 } 
	tasymbﬁ
;

234 
	edis_ö¢_ty≥
 {

235 
	mdis_n⁄ö¢
,

236 
	mdis_n⁄bønch
,

237 
	mdis_bønch
,

238 
	mdis_c⁄dbønch
,

239 
	mdis_j§
,

240 
	mdis_c⁄dj§
,

241 
	mdis_dªf
,

242 
	mdis_dªf2


255 
	sdißs£mbÀ_öfo
 {

258 
PTR
 
	m≠∂iˇti⁄_d©a
;

264 
bfd_Êavour
 
	mÊavour
;

266 
bfd_¨chôe˘uª
 
	m¨ch
;

268 
	mmach
;

270 
bfd_ídün
 
	mídün
;

277 
asymbﬁ
 **
	msymbﬁs
;

279 
	mnum_symbﬁs
;

284 
	mÊags
;

285 
	#INSN_HAS_RELOC
 0x80000000

	)

286 
PTR
 
	m¥iv©e_d©a
;

293 (*
	mªad_mem‹y_func
)

294 
PARAMS
 ((
bfd_vma
 
memaddr
,
bfd_byã
 *
myaddr
,
Àngth
,
dißs£mbÀ_öfo
 *
öfo
));

300 (*
	mmem‹y_îr‹_func
)

301 
PARAMS
 ((
°©us
, 
bfd_vma
 
memaddr
, 
dißs£mbÀ_öfo
 *
öfo
));

304 (*
	m¥öt_addªss_func
)

305 
PARAMS
 ((
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
));

314 (* 
	msymbﬁ_©_addªss_func
)

315 
PARAMS
 ((
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 * 
öfo
));

318 
bfd_byã
 *
	mbuf„r
;

319 
bfd_vma
 
	mbuf„r_vma
;

320 
	mbuf„r_Àngth
;

326 
	mbyãs_≥r_löe
;

333 
	mbyãs_≥r_chunk
;

334 
bfd_ídün
 
	mdi•œy_ídün
;

343 
	mö¢_öfo_vÆid
;

344 
	mbønch_dñay_ö¢s
;

346 
	md©a_size
;

347 
dis_ö¢_ty≥
 
	mö¢_ty≥
;

348 
bfd_vma
 
	mèrgë
;

350 
bfd_vma
 
	mèrgë2
;

353 * 
	mdißs£mbÀr_›ti⁄s
;

355 } 
	tdißs£mbÀ_öfo
;

360 (*
	tdißs£mbÀr_·y≥
)

361 
	tPARAMS
((
	tbfd_vma
, 
	tdißs£mbÀ_öfo
 *));

363 
¥öt_ö¢_big_mùs
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

364 
¥öt_ö¢_lôée_mùs
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

365 
¥öt_ö¢_i386
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

366 
¥öt_ö¢_m68k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

367 
¥öt_ö¢_z8001
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

368 
¥öt_ö¢_z8002
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

369 
¥öt_ö¢_h8300
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

370 
¥öt_ö¢_h8300h
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

371 
¥öt_ö¢_h8300s
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

372 
¥öt_ö¢_h8500
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

373 
¥öt_ö¢_Æpha
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

374 
dißs£mbÀr_·y≥
 
¨c_gë_dißs£mbÀr
 
	`PARAMS
 ((, ));

375 
¥öt_ö¢_¨m
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

376 
¥öt_ö¢_•¨c
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

377 
¥öt_ö¢_big_a29k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

378 
¥öt_ö¢_lôée_a29k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

379 
¥öt_ö¢_i960
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

380 
¥öt_ö¢_sh
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

381 
¥öt_ö¢_shl
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

382 
¥öt_ö¢_hµa
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

383 
¥öt_ö¢_m32r
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

384 
¥öt_ö¢_m88k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

385 
¥öt_ö¢_mn10200
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

386 
¥öt_ö¢_mn10300
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

387 
¥öt_ö¢_ns32k
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

388 
¥öt_ö¢_big_powîpc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

389 
¥öt_ö¢_lôée_powîpc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

390 
¥öt_ö¢_rs6000
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

391 
¥öt_ö¢_w65
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

392 
¥öt_ö¢_d10v
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

393 
¥öt_ö¢_v850
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

394 
¥öt_ö¢_tic30
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

395 
¥öt_ö¢_µc
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

396 
¥öt_ö¢_s390
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

397 
¥öt_ö¢_¸isv32
 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
*));

401 
dißs£mbÀr_·y≥
 
dißs£mbÀr
 
	`PARAMS
 ((
bfd
 *));

410 
buf„r_ªad_mem‹y


411 
	`PARAMS
 ((
bfd_vma
, 
bfd_byã
 *, , 
dißs£mbÀ_öfo
 *));

415 
≥º‹_mem‹y
 
	`PARAMS
 ((, 
bfd_vma
, 
dißs£mbÀ_öfo
 *));

421 
gíîic_¥öt_addªss


422 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

425 
gíîic_symbﬁ_©_addªss


426 
	`PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

430 
	#INIT_DISASSEMBLE_INFO
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
) \

431 (
INFO
).
Êavour
 = 
bfd_èrgë_unknown_Êavour
, \

432 (
INFO
).
¨ch
 = 
bfd_¨ch_unknown
, \

433 (
INFO
).
mach
 = 0, \

434 (
INFO
).
ídün
 = 
BFD_ENDIAN_UNKNOWN
, \

435 
	`INIT_DISASSEMBLE_INFO_NO_ARCH
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
)

	)

442 
	#INIT_DISASSEMBLE_INFO_NO_ARCH
(
INFO
, 
STREAM
, 
FPRINTF_FUNC
) \

443 (
INFO
).
symbﬁs
 = 
NULL
, \

444 (
INFO
).
num_symbﬁs
 = 0, \

445 (
INFO
).
¥iv©e_d©a
 = 
NULL
, \

446 (
INFO
).
buf„r
 = 
NULL
, \

447 (
INFO
).
buf„r_vma
 = 0, \

448 (
INFO
).
buf„r_Àngth
 = 0, \

449 (
INFO
).
ªad_mem‹y_func
 = 
buf„r_ªad_mem‹y
, \

450 (
INFO
).
mem‹y_îr‹_func
 = 
≥º‹_mem‹y
, \

451 (
INFO
).
¥öt_addªss_func
 = 
gíîic_¥öt_addªss
, \

452 (
INFO
).
symbﬁ_©_addªss_func
 = 
gíîic_symbﬁ_©_addªss
, \

453 (
INFO
).
Êags
 = 0, \

454 (
INFO
).
byãs_≥r_löe
 = 0, \

455 (
INFO
).
byãs_≥r_chunk
 = 0, \

456 (
INFO
).
di•œy_ídün
 = 
BFD_ENDIAN_UNKNOWN
, \

457 (
INFO
).
dißs£mbÀr_›ti⁄s
 = 
NULL
, \

458 (
INFO
).
ö¢_öfo_vÆid
 = 0

	)

460 
	#_
(
x
Ë
	)
x

461 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

465 
bfd_vma
 
	`bfd_gël32
 (c⁄° 
bfd_byã
 *
addr
);

466 
bfd_vma
 
	`bfd_gëb32
 (c⁄° 
bfd_byã
 *
addr
);

467 
bfd_vma
 
	`bfd_gël16
 (c⁄° 
bfd_byã
 *
addr
);

468 
bfd_vma
 
	`bfd_gëb16
 (c⁄° 
bfd_byã
 *
addr
);

469 
	ebfd_boﬁón
 {
Ál£
, 
åue
} 
	tboﬁón
;

470 
boﬁón
 
	tbfd_boﬁón
;

	@kern/disas.c

1 
	~<kîn/dis-asm.h
>

2 
	~<kîn/dißs.h
>

3 
	~<öc/îr‹.h
>

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°rög.h
>

10 
	$buf„r_ªad_mem‹y
(
bfd_vma
 
memaddr
,
bfd_byã
 *
myaddr
,
Àngth
,
dißs£mbÀ_öfo
 *
öfo
)

13 i‡((
memaddr
 < 
öfo
->
buf„r_vma
)

14 ||(
memaddr
 + 
Àngth
 > 
öfo
->
buf„r_vma
 + info->
buf„r_Àngth
))

20 
	`memmove
 (
myaddr
, 
öfo
->
buf„r
 + (
memaddr
 - info->
buf„r_vma
), 
Àngth
);

22 
	}
}

26 
	$≥º‹_mem‹y
 (
°©us
, 
bfd_vma
 
memaddr
, 
dißs£mbÀ_öfo
 *
öfo
)

28 i‡(
°©us
 != -1)

30 
	`˝rötf
("Unknow¿îr‹ %d\n", 
°©us
);

34 
	`˝rötf
("Addªs†0x%08x i†ouào‡bounds.\n", 
memaddr
);

35 
	}
}

38 
	$gíîic_¥öt_addªss
 (
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
)

40 
	`˝rötf
("0x%08x",
addr
);

41 
	}
}

46 
	$gíîic_symbﬁ_©_addªss
 (
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
)

49 
	}
}

51 
bfd_vma
 
	$bfd_gël32
 (c⁄° 
bfd_byã
 *
addr
)

53 
v
;

55 
v
 = (Ë
addr
[0];

56 
v
 |(Ë
addr
[1] << 8;

57 
v
 |(Ë
addr
[2] << 16;

58 
v
 |(Ë
addr
[3] << 24;

59  (
bfd_vma
Ë
v
;

60 
	}
}

62 
bfd_vma
 
	$bfd_gëb32
 (c⁄° 
bfd_byã
 *
addr
)

64 
v
;

66 
v
 = (Ë
addr
[0] << 24;

67 
v
 |(Ë
addr
[1] << 16;

68 
v
 |(Ë
addr
[2] << 8;

69 
v
 |(Ë
addr
[3];

70  (
bfd_vma
Ë
v
;

71 
	}
}

73 
bfd_vma
 
	$bfd_gël16
 (c⁄° 
bfd_byã
 *
addr
)

75 
v
;

77 
v
 = (Ë
addr
[0];

78 
v
 |(Ë
addr
[1] << 8;

79  (
bfd_vma
Ë
v
;

80 
	}
}

82 
bfd_vma
 
	$bfd_gëb16
 (c⁄° 
bfd_byã
 *
addr
)

84 
v
;

86 
v
 = (Ë
addr
[0] << 24;

87 
v
 |(Ë
addr
[1] << 16;

88  (
bfd_vma
Ë
v
;

89 
	}
}

91 
	$m⁄ô‹_dißs
(
uöt32_t
 
pc
, 
nb_ö¢
)

93 
cou¡
, 
i
;

94 
dißs£mbÀ_öfo
 
dißsm_öfo
;

95 (*
¥öt_ö¢
)(
bfd_vma
 
pc
, 
dißs£mbÀ_öfo
 *
öfo
);

97 
	`INIT_DISASSEMBLE_INFO
(
dißsm_öfo
, 
NULL
, 
˝rötf
);

103 
dißsm_öfo
.
buf„r_vma
 = 
pc
;

104 
dißsm_öfo
.
buf„r_Àngth
=7;

105 
dißsm_öfo
.
buf„r
=(
bfd_byã
 *)
pc
;

109 
	`˝rötf
("\n");

110 
dißsm_öfo
.
ídün
 = 
BFD_ENDIAN_LITTLE
;

112 
dißsm_öfo
.
mach
 = 
bfd_mach_i386_i386
;

113 
¥öt_ö¢
 = 
¥öt_ö¢_i386
;

115 
i
 = 0; i < 
nb_ö¢
; i++) {

116 
	`˝rötf
("0x%08x: ", 
pc
);

118 
cou¡
 = 
	`¥öt_ö¢
(
pc
, &
dißsm_öfo
);

119 
	`˝rötf
("\n");

120 i‡(
cou¡
 < 0)

122 
pc
 +
cou¡
;

124 
	}
}

	@kern/disas.h

1 #i‚de‡
_KERN_DISAS_H


2 
	#_KERN_DISAS_H


	)

3 
m⁄ô‹_dißs
(
uöt32_t
 
pc
, 
nb_ö¢
);

	@kern/env.c

3 
	~<öc/x86.h
>

4 
	~<öc/mmu.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/ñf.h
>

10 
	~<kîn/ív.h
>

11 
	~<kîn/pm≠.h
>

12 
	~<kîn/å≠.h
>

13 
	~<kîn/m⁄ô‹.h
>

14 
	~<kîn/sched.h
>

16 
Env
 *
	gívs
 = 
NULL
;

17 
Env
 *
	gcuªnv
 = 
NULL
;

18 
Env_li°
 
	gív_‰ì_li°
;

20 
	#ENVGENSHIFT
 12

21 

	)

33 
	$ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
)

35 
Env
 *
e
;

38 i‡(
ívid
 == 0) {

39 *
ív_°‹e
 = 
cuªnv
;

48 
e
 = &
ívs
[
	`ENVX
(
ívid
)];

49 i‡(
e
->
ív_°©us
 =
ENV_FREE
 ||É->
ív_id
 !
ívid
) {

50 *
ív_°‹e
 = 0;

51  -
E_BAD_ENV
;

59 i‡(
check≥rm
 && 
e
 !
cuªnv
 &&É->
ív_∑ª¡_id
 !cuªnv->
ív_id
) {

60 *
ív_°‹e
 = 0;

61  -
E_BAD_ENV
;

64 *
ív_°‹e
 = 
e
;

66 
	}
}

75 
	$ív_öô
()

78 
i
;

79 
	`LIST_INIT
(&
ív_‰ì_li°
);

80 
i
=
NENV
-1;i>=0;i--)

82 
ívs
[
i
].
ív_id
=0;

83 
ívs
[
i
].
ív_°©us
=
ENV_FREE
;

84 
	`LIST_INSERT_HEAD
(&
ív_‰ì_li°
,&
ívs
[
i
],
ív_lök
);

86 
	}
}

99 
	$ív_£tup_vm
(
Env
 *
e
)

101 
i
, 
r
;

102 
Page
 *
p
 = 
NULL
;

105 i‡((
r
 = 
	`∑ge_Æloc
(&
p
)) < 0)

106  
r
;

127 
e
->
ív_¸3
=
	`∑ge2∑
(
p
);

128 
e
->
ív_pgdú
=(
pde_t
*)
	`∑ge2kva
(
p
);

129 
p
->
µ_ªf
++;

130 
	`mem£t
(
e
->
ív_pgdú
,0,
PGSIZE
);

131 
i
=
	`PDX
(
UTOP
);i<
NPDENTRIES
;i++)

132 
e
->
ív_pgdú
[
i
]=
boŸ_pgdú
[i];

135 
e
->
ív_pgdú
[
	`PDX
(
VPT
)] =É->
ív_¸3
 | 
PTE_P
 | 
PTE_W
;

136 
e
->
ív_pgdú
[
	`PDX
(
UVPT
)] =É->
ív_¸3
 | 
PTE_P
 | 
PTE_U
;

139 
	}
}

150 
	$ív_Æloc
(
Env
 **
√wív_°‹e
, 
ívid_t
 
∑ª¡_id
)

152 
öt32_t
 
gíî©i⁄
;

153 
r
;

154 
Env
 *
e
;

156 i‡(!(
e
 = 
	`LIST_FIRST
(&
ív_‰ì_li°
)))

157  -
E_NO_FREE_ENV
;

160 i‡((
r
 = 
	`ív_£tup_vm
(
e
)) < 0)

161  
r
;

164 
gíî©i⁄
 = (
e
->
ív_id
 + (1 << 
ENVGENSHIFT
)Ë& ~(
NENV
 - 1);

165 i‡(
gíî©i⁄
 <= 0)

166 
gíî©i⁄
 = 1 << 
ENVGENSHIFT
;

167 
e
->
ív_id
 = 
gíî©i⁄
 | (ê- 
ívs
);

170 
e
->
ív_∑ª¡_id
 = 
∑ª¡_id
;

171 
e
->
ív_°©us
 = 
ENV_RUNNABLE
;

172 
e
->
ív_runs
 = 0;

178 
	`mem£t
(&
e
->
ív_tf
, 0, (e->env_tf));

185 
e
->
ív_tf
.
tf_ds
 = 
GD_UD
 | 3;

186 
e
->
ív_tf
.
tf_es
 = 
GD_UD
 | 3;

187 
e
->
ív_tf
.
tf_ss
 = 
GD_UD
 | 3;

188 
e
->
ív_tf
.
tf_e•
 = 
USTACKTOP
;

189 
e
->
ív_tf
.
tf_cs
 = 
GD_UT
 | 3;

194 
e
->
ív_tf
.
tf_eÊags
|=
FL_IF
;

196 
e
->
ív_pgÁu…_upˇŒ
 = 0;

199 
e
->
ív_ùc_ªcvög
 = 0;

205 
	`LIST_REMOVE
(
e
, 
ív_lök
);

206 *
√wív_°‹e
 = 
e
;

210 
	}
}

220 
	$£gmít_Æloc
(
Env
 *
e
, *
va
, 
size_t
 
Àn
)

228 
uöçå_t
 
a
,
œ°
;

229 
Page
 *
⁄ïage
;

230 
a
=
	`ROUNDDOWN
((
phyßddr_t
)
va
,
PGSIZE
);

231 
œ°
=
	`ROUNDDOWN
((
phyßddr_t
)(
va
+
Àn
),
PGSIZE
);

233 if(
	`∑ge_Æloc
(&
⁄ïage
)<0)

234 
	`∑nic
("AllocÖhysicalÖage failed!\n");

236 if(
	`∑ge_ö£π
(
e
->
ív_pgdú
,
⁄ïage
,(*)
a
,
PTE_U
|
PTE_W
)<0)

237 
	`∑nic
("InsertÖage failed!\n");

238 if(
a
==
œ°
) ;

239 
a
˜+
PGSIZE
;

241 
	}
}

266 
	$lﬂd_icode
(
Env
 *
e
, 
uöt8_t
 *
bö¨y
, 
size_t
 
size
)

297 
phyßddr_t
 
ﬁd_¸3
;

298 
Elf
 *
ñfhdr
;

299 
Proghdr
 *
ph
,*
ïh
;

300 
Page
 *
⁄ïage
;

302 
ﬁd_¸3
=
	`r¸3
();

303 
	`l¸3
(
e
->
ív_¸3
);

304 
ñfhdr
=(
Elf
*)
bö¨y
;

306 if(
ñfhdr
->
e_magic
!=
ELF_MAGIC
)

307 
	`∑nic
("This binary isÇot ELF format!\n");

308 
ph
 = (
Proghdr
*)(
bö¨y
+
ñfhdr
->
e_phoff
);

309 
ïh
 = 
ph
+
ñfhdr
->
e_phnum
;

310 ;
ph
<
ïh
;ph++){

311 if(
ph
->
p_ty≥
 =
ELF_PROG_LOAD
)

313 
	`£gmít_Æloc
(
e
,(*)
ph
->
p_va
,ph->
p_memsz
);

315 
	`mem£t
((*)(
ph
->
p_va
+ph->
p_fûesz
),0,ph->
p_memsz
-ph->p_filesz);

316 
	`memmove
((*)
ph
->
p_va
,(*)(
bö¨y
+ph->
p_off£t
),ph->
p_fûesz
);

321 
e
->
ív_tf
.
tf_eù
=
ñfhdr
->
e_íåy
;

326 if(
	`∑ge_Æloc
(&
⁄ïage
)<0)

327 
	`∑nic
("Alloc oneÖage inÜoad_icode failed\n");

328 if(
	`∑ge_ö£π
(
e
->
ív_pgdú
,
⁄ïage
,(*)(
USTACKTOP
-
PGSIZE
),
PTE_U
|
PTE_W
)<0)

329 
	`∑nic
("Insert oneÖage inÜoad_icode failed\n");

330 
	`mem£t
((*)(
USTACKTOP
-
PGSIZE
),0,PGSIZE);

331 
	`l¸3
(
ﬁd_¸3
);

332 
	}
}

342 
	$ív_¸óã
(
uöt8_t
 *
bö¨y
, 
size_t
 
size
)

345 
r
;

346 
Env
 *
√wív
;

347 if((
r
=
	`ív_Æloc
(&
√wív
,0))<0)

348 
	`∑nic
("ív_¸óã:%e",
r
);

349 
	`lﬂd_icode
(
√wív
,
bö¨y
,
size
);

350 
	}
}

356 
	$ív_‰ì
(
Env
 *
e
)

358 
±e_t
 *
±
;

359 
uöt32_t
 
pdío
, 
±ío
;

360 
phyßddr_t
 
∑
;

365 i‡(
e
 =
cuªnv
)

366 
	`l¸3
(
boŸ_¸3
);

372 
	`°©ic_as£π
(
UTOP
 % 
PTSIZE
 == 0);

373 
pdío
 = 0;Ödíÿ< 
	`PDX
(
UTOP
);Ödeno++) {

376 i‡(!(
e
->
ív_pgdú
[
pdío
] & 
PTE_P
))

380 
∑
 = 
	`PTE_ADDR
(
e
->
ív_pgdú
[
pdío
]);

381 
±
 = (
±e_t
*Ë
	`KADDR
(
∑
);

384 
±ío
 = 0;Öãnÿ<
	`PTX
(~0);Öteno++) {

385 i‡(
±
[
±ío
] & 
PTE_P
)

386 
	`∑ge_ªmove
(
e
->
ív_pgdú
, 
	`PGADDR
(
pdío
, 
±ío
, 0));

390 
e
->
ív_pgdú
[
pdío
] = 0;

391 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

395 
∑
 = 
e
->
ív_¸3
;

396 
e
->
ív_pgdú
 = 0;

397 
e
->
ív_¸3
 = 0;

398 
	`∑ge_de¸ef
(
	`∑2∑ge
(
∑
));

401 
e
->
ív_°©us
 = 
ENV_FREE
;

402 
	`LIST_INSERT_HEAD
(&
ív_‰ì_li°
, 
e
, 
ív_lök
);

403 
	}
}

411 
	$ív_de°roy
(
Env
 *
e
)

413 
	`ív_‰ì
(
e
);

415 i‡(
cuªnv
 =
e
) {

416 
cuªnv
 = 
NULL
;

417 
	`sched_yõld
();

419 
	}
}

429 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
)

431 
__asm
 
	`__vﬁ©ûe
("movl %0,%%esp\n"

437 : : "g" (
tf
) : "memory");

438 
	`∑nic
("iret failed");

439 
	}
}

448 
	$ív_run
(
Env
 *
e
)

464 
cuªnv
=
e
;

465 
cuªnv
->
ív_runs
++;

466 
	`l¸3
(
cuªnv
->
ív_¸3
);

468 
	`ív_p›_tf
(&
cuªnv
->
ív_tf
);

470 
	}
}

	@kern/env.h

3 #i‚de‡
JOS_KERN_ENV_H


4 
	#JOS_KERN_ENV_H


	)

6 
	~<öc/ív.h
>

8 #i‚de‡
JOS_MULTIENV


11 
	#JOS_MULTIENV
 0

	)

14 
Env
 *
ívs
;

15 
Env
 *
cuªnv
;

17 
LIST_HEAD
(
Env_li°
, 
Env
);

19 
ív_öô
();

20 
ív_Æloc
(
Env
 **
e
, 
ívid_t
 
∑ª¡_id
);

21 
ív_‰ì
(
Env
 *
e
);

22 
ív_¸óã
(
uöt8_t
 *
bö¨y
, 
size_t
 
size
);

23 
ív_de°roy
(
Env
 *
e
);

25 
ívid2ív
(
ívid_t
 
ívid
, 
Env
 **
ív_°‹e
, 
boﬁ
 
check≥rm
);

27 
	$ív_run
(
Env
 *
e
Ë
	`__©åibuã__
((
n‹ëu∫
));

28 
	$ív_p›_tf
(
Tøp‰ame
 *
tf
Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	#ENV_CREATE2
(
°¨t
, 
size
) { \

32 
uöt8_t
 
°¨t
[], 
size
[]; \

33 
	`ív_¸óã
(
°¨t
, ()
size
); \

34 
	}

	)
}

36 
	#ENV_CREATE
(
x
) { \

37 
uöt8_t
 
_bö¨y_obj_
##
x
##
_°¨t
[], \

38 
_bö¨y_obj_
##
x
##
_size
[]; \

39 
	`ív_¸óã
(
_bö¨y_obj_
##
x
##
_°¨t
, \

40 ()
_bö¨y_obj_
##
x
##
_size
); \

41 }

	)

	@kern/i386-dis.c

38 
	~<kîn/dis-asm.h
>

39 
	#MAXLEN
 20

	)

41 #i‚de‡
UNIXWARE_COMPAT


44 
	#UNIXWARE_COMPAT
 1

	)

47 
„tch_d©a
 
PARAMS
 ((
dißs£mbÀ_öfo
 *, 
bfd_byã
 *));

48 
ck¥efix
 
PARAMS
 (());

49 c⁄° *
¥efix_«me
 
PARAMS
 ((, ));

50 
¥öt_ö¢
 
PARAMS
 ((
bfd_vma
, 
dißs£mbÀ_öfo
 *));

51 
doÊﬂt
 
PARAMS
 (());

52 
OP_ST
 
PARAMS
 ((, ));

53 
OP_STi
 
PARAMS
 ((, ));

54 
put›
 
PARAMS
 ((const *, ));

55 
ﬂµíd
 
PARAMS
 ((const *));

56 
≠≥nd_£g
 
PARAMS
 (());

57 
OP_ödúE
 
PARAMS
 ((, ));

58 
¥öt_›î™d_vÆue
 (*
buf
, 
size_t
 
bufsize
, 
hex
,

59 
bfd_vma
 
di•
);

60 
OP_E
 
PARAMS
 ((, ));

61 
OP_G
 
PARAMS
 ((, ));

62 
bfd_vma
 
gë64
 
PARAMS
 (());

63 
bfd_sig√d_vma
 
gë32
 
PARAMS
 (());

64 
bfd_sig√d_vma
 
gë32s
 
PARAMS
 (());

65 
gë16
 
PARAMS
 (());

66 
£t_›
 
PARAMS
 ((
bfd_vma
, ));

67 
OP_REG
 
PARAMS
 ((, ));

68 
OP_IMREG
 
PARAMS
 ((, ));

69 
OP_I
 
PARAMS
 ((, ));

70 
OP_I64
 
PARAMS
 ((, ));

71 
OP_sI
 
PARAMS
 ((, ));

72 
OP_J
 
PARAMS
 ((, ));

73 
OP_SEG
 
PARAMS
 ((, ));

74 
OP_DIR
 
PARAMS
 ((, ));

75 
OP_OFF
 
PARAMS
 ((, ));

76 
OP_OFF64
 
PARAMS
 ((, ));

77 
±r_ªg
 
PARAMS
 ((, ));

78 
OP_ESªg
 
PARAMS
 ((, ));

79 
OP_DSªg
 
PARAMS
 ((, ));

80 
OP_C
 
PARAMS
 ((, ));

81 
OP_D
 
PARAMS
 ((, ));

82 
OP_T
 
PARAMS
 ((, ));

83 
OP_Rd
 
PARAMS
 ((, ));

84 
OP_MMX
 
PARAMS
 ((, ));

85 
OP_XMM
 
PARAMS
 ((, ));

86 
OP_EM
 
PARAMS
 ((, ));

87 
OP_EX
 
PARAMS
 ((, ));

88 
OP_MS
 
PARAMS
 ((, ));

89 
OP_XS
 
PARAMS
 ((, ));

90 
OP_3DNowSuffix
 
PARAMS
 ((, ));

91 
OP_SIMD_Suffix
 
PARAMS
 ((, ));

92 
SIMD_Fixup
 
PARAMS
 ((, ));

93 
BadOp
 
PARAMS
 (());

95 
	sdis_¥iv©e
 {

97 
bfd_byã
 *
	mmax_„tched
;

98 
bfd_byã
 
	mthe_buf„r
[
MAXLEN
];

99 
bfd_vma
 
	mö¢_°¨t
;

100 
	m‹ig_sizeÊag
;

105 
	#FWAIT_OPCODE
 (0x9b)

	)

108 
	gmode_64bô
;

111 
	g¥efixes
;

114 
	gªx
;

116 
	gªx_u£d
;

117 
	#REX_MODE64
 8

	)

118 
	#REX_EXTX
 4

	)

119 
	#REX_EXTY
 2

	)

120 
	#REX_EXTZ
 1

	)

125 
	#USED_REX
(
vÆue
) \

127 i‡(
vÆue
) \

128 
ªx_u£d
 |(
ªx
 & 
vÆue
) ? (value) | 0x40 : 0; \

130 
ªx_u£d
 |= 0x40; \

131 }

	)

135 
	gu£d_¥efixes
;

138 
	#PREFIX_REPZ
 1

	)

139 
	#PREFIX_REPNZ
 2

	)

140 
	#PREFIX_LOCK
 4

	)

141 
	#PREFIX_CS
 8

	)

142 
	#PREFIX_SS
 0x10

	)

143 
	#PREFIX_DS
 0x20

	)

144 
	#PREFIX_ES
 0x40

	)

145 
	#PREFIX_FS
 0x80

	)

146 
	#PREFIX_GS
 0x100

	)

147 
	#PREFIX_DATA
 0x200

	)

148 
	#PREFIX_ADDR
 0x400

	)

149 
	#PREFIX_FWAIT
 0x800

	)

154 
	#FETCH_DATA
(
öfo
, 
addr
) \

155 ((
addr
Ë<((
dis_¥iv©e
 *Ë(
öfo
->
¥iv©e_d©a
))->
max_„tched
 \

156 ? 1 : 
	`„tch_d©a
 ((
öfo
), (
addr
)))

	)

159 
	$„tch_d©a
 (
öfo
, 
addr
)

160 
dißs£mbÀ_öfo
 *
öfo
;

161 
bfd_byã
 *
addr
;

163 
°©us
;

164 
dis_¥iv©e
 *
¥iv
 = (dis_¥iv©ê*Ë
öfo
->
¥iv©e_d©a
;

165 
bfd_vma
 
°¨t_vma
 = 
¥iv
->
ö¢_°¨t
 + (¥iv->
max_„tched
 -Öriv->
the_buf„r
);

167 
°©us
 = (*
öfo
->
ªad_mem‹y_func
)(
°¨t_vma
,
¥iv
->
max_„tched
,
addr
-priv->max_fetched,info);

168 i‡(
°©us
 != 0)

174 i‡(
¥iv
->
max_„tched
 =¥iv->
the_buf„r
)

175 (*
öfo
->
mem‹y_îr‹_func
Ë(
°©us
, 
°¨t_vma
, info);

179 
¥iv
->
max_„tched
 = 
addr
;

181 
	}
}

183 
	#XX
 
NULL
, 0

	)

185 
	#Eb
 
OP_E
, 
b_mode


	)

186 
	#Ev
 
OP_E
, 
v_mode


	)

187 
	#Ed
 
OP_E
, 
d_mode


	)

188 
	#ödúEb
 
OP_ödúE
, 
b_mode


	)

189 
	#ödúEv
 
OP_ödúE
, 
v_mode


	)

190 
	#Ew
 
OP_E
, 
w_mode


	)

191 
	#Ma
 
OP_E
, 
v_mode


	)

192 
	#M
 
OP_E
, 0

	)

193 
	#Mp
 
OP_E
, 0

	)

194 
	#Gb
 
OP_G
, 
b_mode


	)

195 
	#Gv
 
OP_G
, 
v_mode


	)

196 
	#Gd
 
OP_G
, 
d_mode


	)

197 
	#Gw
 
OP_G
, 
w_mode


	)

198 
	#Rd
 
OP_Rd
, 
d_mode


	)

199 
	#Rm
 
OP_Rd
, 
m_mode


	)

200 
	#Ib
 
OP_I
, 
b_mode


	)

201 
	#sIb
 
OP_sI
, 
b_mode


	)

202 
	#Iv
 
OP_I
, 
v_mode


	)

203 
	#Iq
 
OP_I
, 
q_mode


	)

204 
	#Iv64
 
OP_I64
, 
v_mode


	)

205 
	#Iw
 
OP_I
, 
w_mode


	)

206 
	#Jb
 
OP_J
, 
b_mode


	)

207 
	#Jv
 
OP_J
, 
v_mode


	)

208 
	#Cm
 
OP_C
, 
m_mode


	)

209 
	#Dm
 
OP_D
, 
m_mode


	)

210 
	#Td
 
OP_T
, 
d_mode


	)

212 
	#RMeAX
 
OP_REG
, 
eAX_ªg


	)

213 
	#RMeBX
 
OP_REG
, 
eBX_ªg


	)

214 
	#RMeCX
 
OP_REG
, 
eCX_ªg


	)

215 
	#RMeDX
 
OP_REG
, 
eDX_ªg


	)

216 
	#RMeSP
 
OP_REG
, 
eSP_ªg


	)

217 
	#RMeBP
 
OP_REG
, 
eBP_ªg


	)

218 
	#RMeSI
 
OP_REG
, 
eSI_ªg


	)

219 
	#RMeDI
 
OP_REG
, 
eDI_ªg


	)

220 
	#RMrAX
 
OP_REG
, 
rAX_ªg


	)

221 
	#RMrBX
 
OP_REG
, 
rBX_ªg


	)

222 
	#RMrCX
 
OP_REG
, 
rCX_ªg


	)

223 
	#RMrDX
 
OP_REG
, 
rDX_ªg


	)

224 
	#RMrSP
 
OP_REG
, 
rSP_ªg


	)

225 
	#RMrBP
 
OP_REG
, 
rBP_ªg


	)

226 
	#RMrSI
 
OP_REG
, 
rSI_ªg


	)

227 
	#RMrDI
 
OP_REG
, 
rDI_ªg


	)

228 
	#RMAL
 
OP_REG
, 
Æ_ªg


	)

229 
	#RMAL
 
OP_REG
, 
Æ_ªg


	)

230 
	#RMCL
 
OP_REG
, 
˛_ªg


	)

231 
	#RMDL
 
OP_REG
, 
dl_ªg


	)

232 
	#RMBL
 
OP_REG
, 
bl_ªg


	)

233 
	#RMAH
 
OP_REG
, 
ah_ªg


	)

234 
	#RMCH
 
OP_REG
, 
ch_ªg


	)

235 
	#RMDH
 
OP_REG
, 
dh_ªg


	)

236 
	#RMBH
 
OP_REG
, 
bh_ªg


	)

237 
	#RMAX
 
OP_REG
, 
ax_ªg


	)

238 
	#RMDX
 
OP_REG
, 
dx_ªg


	)

240 
	#eAX
 
OP_IMREG
, 
eAX_ªg


	)

241 
	#eBX
 
OP_IMREG
, 
eBX_ªg


	)

242 
	#eCX
 
OP_IMREG
, 
eCX_ªg


	)

243 
	#eDX
 
OP_IMREG
, 
eDX_ªg


	)

244 
	#eSP
 
OP_IMREG
, 
eSP_ªg


	)

245 
	#eBP
 
OP_IMREG
, 
eBP_ªg


	)

246 
	#eSI
 
OP_IMREG
, 
eSI_ªg


	)

247 
	#eDI
 
OP_IMREG
, 
eDI_ªg


	)

248 
	#AL
 
OP_IMREG
, 
Æ_ªg


	)

249 
	#AL
 
OP_IMREG
, 
Æ_ªg


	)

250 
	#CL
 
OP_IMREG
, 
˛_ªg


	)

251 
	#DL
 
OP_IMREG
, 
dl_ªg


	)

252 
	#BL
 
OP_IMREG
, 
bl_ªg


	)

253 
	#AH
 
OP_IMREG
, 
ah_ªg


	)

254 
	#CH
 
OP_IMREG
, 
ch_ªg


	)

255 
	#DH
 
OP_IMREG
, 
dh_ªg


	)

256 
	#BH
 
OP_IMREG
, 
bh_ªg


	)

257 
	#AX
 
OP_IMREG
, 
ax_ªg


	)

258 
	#DX
 
OP_IMREG
, 
dx_ªg


	)

259 
	#ödúDX
 
OP_IMREG
, 
ödú_dx_ªg


	)

261 
	#Sw
 
OP_SEG
, 
w_mode


	)

262 
	#Ap
 
OP_DIR
, 0

	)

263 
	#Ob
 
OP_OFF
, 
b_mode


	)

264 
	#Ob64
 
OP_OFF64
, 
b_mode


	)

265 
	#Ov
 
OP_OFF
, 
v_mode


	)

266 
	#Ov64
 
OP_OFF64
, 
v_mode


	)

267 
	#Xb
 
OP_DSªg
, 
eSI_ªg


	)

268 
	#Xv
 
OP_DSªg
, 
eSI_ªg


	)

269 
	#Yb
 
OP_ESªg
, 
eDI_ªg


	)

270 
	#Yv
 
OP_ESªg
, 
eDI_ªg


	)

271 
	#DSBX
 
OP_DSªg
, 
eBX_ªg


	)

273 
	#es
 
OP_REG
, 
es_ªg


	)

274 
	#ss
 
OP_REG
, 
ss_ªg


	)

275 
	#cs
 
OP_REG
, 
cs_ªg


	)

276 
	#ds
 
OP_REG
, 
ds_ªg


	)

277 
	#fs
 
OP_REG
, 
fs_ªg


	)

278 
	#gs
 
OP_REG
, 
gs_ªg


	)

280 
	#MX
 
OP_MMX
, 0

	)

281 
	#XM
 
OP_XMM
, 0

	)

282 
	#EM
 
OP_EM
, 
v_mode


	)

283 
	#EX
 
OP_EX
, 
v_mode


	)

284 
	#MS
 
OP_MS
, 
v_mode


	)

285 
	#XS
 
OP_XS
, 
v_mode


	)

286 
	#N⁄e
 
OP_E
, 0

	)

287 
	#OPSUF
 
OP_3DNowSuffix
, 0

	)

288 
	#OPSIMD
 
OP_SIMD_Suffix
, 0

	)

290 
	#c⁄d_jump_Êag
 
NULL
, 
c⁄d_jump_mode


	)

291 
	#lo›_jcxz_Êag
 
NULL
, 
lo›_jcxz_mode


	)

294 
	#SUFFIX_ALWAYS
 4

	)

295 
	#AFLAG
 2

	)

296 
	#DFLAG
 1

	)

298 
	#b_mode
 1

	)

299 
	#v_mode
 2

	)

300 
	#w_mode
 3

	)

301 
	#d_mode
 4

	)

302 
	#q_mode
 5

	)

303 
	#x_mode
 6

	)

304 
	#m_mode
 7

	)

305 
	#c⁄d_jump_mode
 8

	)

306 
	#lo›_jcxz_mode
 9

	)

308 
	#es_ªg
 100

	)

309 
	#cs_ªg
 101

	)

310 
	#ss_ªg
 102

	)

311 
	#ds_ªg
 103

	)

312 
	#fs_ªg
 104

	)

313 
	#gs_ªg
 105

	)

315 
	#eAX_ªg
 108

	)

316 
	#eCX_ªg
 109

	)

317 
	#eDX_ªg
 110

	)

318 
	#eBX_ªg
 111

	)

319 
	#eSP_ªg
 112

	)

320 
	#eBP_ªg
 113

	)

321 
	#eSI_ªg
 114

	)

322 
	#eDI_ªg
 115

	)

324 
	#Æ_ªg
 116

	)

325 
	#˛_ªg
 117

	)

326 
	#dl_ªg
 118

	)

327 
	#bl_ªg
 119

	)

328 
	#ah_ªg
 120

	)

329 
	#ch_ªg
 121

	)

330 
	#dh_ªg
 122

	)

331 
	#bh_ªg
 123

	)

333 
	#ax_ªg
 124

	)

334 
	#cx_ªg
 125

	)

335 
	#dx_ªg
 126

	)

336 
	#bx_ªg
 127

	)

337 
	#•_ªg
 128

	)

338 
	#bp_ªg
 129

	)

339 
	#si_ªg
 130

	)

340 
	#di_ªg
 131

	)

342 
	#rAX_ªg
 132

	)

343 
	#rCX_ªg
 133

	)

344 
	#rDX_ªg
 134

	)

345 
	#rBX_ªg
 135

	)

346 
	#rSP_ªg
 136

	)

347 
	#rBP_ªg
 137

	)

348 
	#rSI_ªg
 138

	)

349 
	#rDI_ªg
 139

	)

351 
	#ödú_dx_ªg
 150

	)

353 
	#FLOATCODE
 1

	)

354 
	#USE_GROUPS
 2

	)

355 
	#USE_PREFIX_USER_TABLE
 3

	)

356 
	#X86_64_SPECIAL
 4

	)

358 
	#FLOAT
 
NULL
, NULL, 
FLOATCODE
, NULL, 0, NULL, 0

	)

360 
	#GRP1b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 0, NULL, 0

	)

361 
	#GRP1S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 1, NULL, 0

	)

362 
	#GRP1Ss
 
NULL
, NULL, 
USE_GROUPS
, NULL, 2, NULL, 0

	)

363 
	#GRP2b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 3, NULL, 0

	)

364 
	#GRP2S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 4, NULL, 0

	)

365 
	#GRP2b_⁄e
 
NULL
, NULL, 
USE_GROUPS
, NULL, 5, NULL, 0

	)

366 
	#GRP2S_⁄e
 
NULL
, NULL, 
USE_GROUPS
, NULL, 6, NULL, 0

	)

367 
	#GRP2b_˛
 
NULL
, NULL, 
USE_GROUPS
, NULL, 7, NULL, 0

	)

368 
	#GRP2S_˛
 
NULL
, NULL, 
USE_GROUPS
, NULL, 8, NULL, 0

	)

369 
	#GRP3b
 
NULL
, NULL, 
USE_GROUPS
, NULL, 9, NULL, 0

	)

370 
	#GRP3S
 
NULL
, NULL, 
USE_GROUPS
, NULL, 10, NULL, 0

	)

371 
	#GRP4
 
NULL
, NULL, 
USE_GROUPS
, NULL, 11, NULL, 0

	)

372 
	#GRP5
 
NULL
, NULL, 
USE_GROUPS
, NULL, 12, NULL, 0

	)

373 
	#GRP6
 
NULL
, NULL, 
USE_GROUPS
, NULL, 13, NULL, 0

	)

374 
	#GRP7
 
NULL
, NULL, 
USE_GROUPS
, NULL, 14, NULL, 0

	)

375 
	#GRP8
 
NULL
, NULL, 
USE_GROUPS
, NULL, 15, NULL, 0

	)

376 
	#GRP9
 
NULL
, NULL, 
USE_GROUPS
, NULL, 16, NULL, 0

	)

377 
	#GRP10
 
NULL
, NULL, 
USE_GROUPS
, NULL, 17, NULL, 0

	)

378 
	#GRP11
 
NULL
, NULL, 
USE_GROUPS
, NULL, 18, NULL, 0

	)

379 
	#GRP12
 
NULL
, NULL, 
USE_GROUPS
, NULL, 19, NULL, 0

	)

380 
	#GRP13
 
NULL
, NULL, 
USE_GROUPS
, NULL, 20, NULL, 0

	)

381 
	#GRP14
 
NULL
, NULL, 
USE_GROUPS
, NULL, 21, NULL, 0

	)

382 
	#GRPAMD
 
NULL
, NULL, 
USE_GROUPS
, NULL, 22, NULL, 0

	)

384 
	#PREGRP0
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 0, NULL, 0

	)

385 
	#PREGRP1
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 1, NULL, 0

	)

386 
	#PREGRP2
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 2, NULL, 0

	)

387 
	#PREGRP3
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 3, NULL, 0

	)

388 
	#PREGRP4
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 4, NULL, 0

	)

389 
	#PREGRP5
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 5, NULL, 0

	)

390 
	#PREGRP6
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 6, NULL, 0

	)

391 
	#PREGRP7
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 7, NULL, 0

	)

392 
	#PREGRP8
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 8, NULL, 0

	)

393 
	#PREGRP9
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 9, NULL, 0

	)

394 
	#PREGRP10
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 10, NULL, 0

	)

395 
	#PREGRP11
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 11, NULL, 0

	)

396 
	#PREGRP12
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 12, NULL, 0

	)

397 
	#PREGRP13
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 13, NULL, 0

	)

398 
	#PREGRP14
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 14, NULL, 0

	)

399 
	#PREGRP15
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 15, NULL, 0

	)

400 
	#PREGRP16
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 16, NULL, 0

	)

401 
	#PREGRP17
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 17, NULL, 0

	)

402 
	#PREGRP18
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 18, NULL, 0

	)

403 
	#PREGRP19
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 19, NULL, 0

	)

404 
	#PREGRP20
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 20, NULL, 0

	)

405 
	#PREGRP21
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 21, NULL, 0

	)

406 
	#PREGRP22
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 22, NULL, 0

	)

407 
	#PREGRP23
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 23, NULL, 0

	)

408 
	#PREGRP24
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 24, NULL, 0

	)

409 
	#PREGRP25
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 25, NULL, 0

	)

410 
	#PREGRP26
 
NULL
, NULL, 
USE_PREFIX_USER_TABLE
, NULL, 26, NULL, 0

	)

412 
	#X86_64_0
 
NULL
, NULL, 
X86_64_SPECIAL
, NULL, 0, NULL, 0

	)

414 (*
	t›_πn
Ë
	tPARAMS
 ((
	tbyãmode
, 
	tsizeÊag
));

416 
	sdis386
 {

417 c⁄° *
«me
;

418 
›_πn
 
›1
;

419 
byãmode1
;

420 
›_πn
 
›2
;

421 
byãmode2
;

422 
›_πn
 
›3
;

423 
byãmode3
;

456 c⁄° 
dis386
 dis386[] = {

458 { "addB", 
Eb
, 
Gb
, 
XX
 },

459 { "addS", 
Ev
, 
Gv
, 
XX
 },

460 { "addB", 
Gb
, 
Eb
, 
XX
 },

461 { "addS", 
Gv
, 
Ev
, 
XX
 },

462 { "addB", 
AL
, 
Ib
, 
XX
 },

463 { "addS", 
eAX
, 
Iv
, 
XX
 },

464 { "push{T|}", 
es
, 
XX
, XX },

465 { "p›{T|}", 
es
, 
XX
, XX },

467 { "‹B", 
Eb
, 
Gb
, 
XX
 },

468 { "‹S", 
Ev
, 
Gv
, 
XX
 },

469 { "‹B", 
Gb
, 
Eb
, 
XX
 },

470 { "‹S", 
Gv
, 
Ev
, 
XX
 },

471 { "‹B", 
AL
, 
Ib
, 
XX
 },

472 { "‹S", 
eAX
, 
Iv
, 
XX
 },

473 { "push{T|}", 
cs
, 
XX
, XX },

474 { "(bad)", 
XX
, XX, XX },

476 { "adcB", 
Eb
, 
Gb
, 
XX
 },

477 { "adcS", 
Ev
, 
Gv
, 
XX
 },

478 { "adcB", 
Gb
, 
Eb
, 
XX
 },

479 { "adcS", 
Gv
, 
Ev
, 
XX
 },

480 { "adcB", 
AL
, 
Ib
, 
XX
 },

481 { "adcS", 
eAX
, 
Iv
, 
XX
 },

482 { "push{T|}", 
ss
, 
XX
, XX },

483 { "p›T|}", 
ss
, 
XX
, XX },

485 { "sbbB", 
Eb
, 
Gb
, 
XX
 },

486 { "sbbS", 
Ev
, 
Gv
, 
XX
 },

487 { "sbbB", 
Gb
, 
Eb
, 
XX
 },

488 { "sbbS", 
Gv
, 
Ev
, 
XX
 },

489 { "sbbB", 
AL
, 
Ib
, 
XX
 },

490 { "sbbS", 
eAX
, 
Iv
, 
XX
 },

491 { "push{T|}", 
ds
, 
XX
, XX },

492 { "p›{T|}", 
ds
, 
XX
, XX },

494 { "™dB", 
Eb
, 
Gb
, 
XX
 },

495 { "™dS", 
Ev
, 
Gv
, 
XX
 },

496 { "™dB", 
Gb
, 
Eb
, 
XX
 },

497 { "™dS", 
Gv
, 
Ev
, 
XX
 },

498 { "™dB", 
AL
, 
Ib
, 
XX
 },

499 { "™dS", 
eAX
, 
Iv
, 
XX
 },

500 { "(bad)", 
XX
, XX, XX },

501 { "dØ{|}", 
XX
, XX, XX },

503 { "subB", 
Eb
, 
Gb
, 
XX
 },

504 { "subS", 
Ev
, 
Gv
, 
XX
 },

505 { "subB", 
Gb
, 
Eb
, 
XX
 },

506 { "subS", 
Gv
, 
Ev
, 
XX
 },

507 { "subB", 
AL
, 
Ib
, 
XX
 },

508 { "subS", 
eAX
, 
Iv
, 
XX
 },

509 { "(bad)", 
XX
, XX, XX },

510 { "das{|}", 
XX
, XX, XX },

512 { "x‹B", 
Eb
, 
Gb
, 
XX
 },

513 { "x‹S", 
Ev
, 
Gv
, 
XX
 },

514 { "x‹B", 
Gb
, 
Eb
, 
XX
 },

515 { "x‹S", 
Gv
, 
Ev
, 
XX
 },

516 { "x‹B", 
AL
, 
Ib
, 
XX
 },

517 { "x‹S", 
eAX
, 
Iv
, 
XX
 },

518 { "(bad)", 
XX
, XX, XX },

519 { "Øa{|}", 
XX
, XX, XX },

521 { "cmpB", 
Eb
, 
Gb
, 
XX
 },

522 { "cmpS", 
Ev
, 
Gv
, 
XX
 },

523 { "cmpB", 
Gb
, 
Eb
, 
XX
 },

524 { "cmpS", 
Gv
, 
Ev
, 
XX
 },

525 { "cmpB", 
AL
, 
Ib
, 
XX
 },

526 { "cmpS", 
eAX
, 
Iv
, 
XX
 },

527 { "(bad)", 
XX
, XX, XX },

528 { "Øs{|}", 
XX
, XX, XX },

530 { "öc{S|}", 
RMeAX
, 
XX
, XX },

531 { "öc{S|}", 
RMeCX
, 
XX
, XX },

532 { "öc{S|}", 
RMeDX
, 
XX
, XX },

533 { "öc{S|}", 
RMeBX
, 
XX
, XX },

534 { "öc{S|}", 
RMeSP
, 
XX
, XX },

535 { "öc{S|}", 
RMeBP
, 
XX
, XX },

536 { "öc{S|}", 
RMeSI
, 
XX
, XX },

537 { "öc{S|}", 
RMeDI
, 
XX
, XX },

539 { "dec{S|}", 
RMeAX
, 
XX
, XX },

540 { "dec{S|}", 
RMeCX
, 
XX
, XX },

541 { "dec{S|}", 
RMeDX
, 
XX
, XX },

542 { "dec{S|}", 
RMeBX
, 
XX
, XX },

543 { "dec{S|}", 
RMeSP
, 
XX
, XX },

544 { "dec{S|}", 
RMeBP
, 
XX
, XX },

545 { "dec{S|}", 
RMeSI
, 
XX
, XX },

546 { "dec{S|}", 
RMeDI
, 
XX
, XX },

548 { "pushS", 
RMrAX
, 
XX
, XX },

549 { "pushS", 
RMrCX
, 
XX
, XX },

550 { "pushS", 
RMrDX
, 
XX
, XX },

551 { "pushS", 
RMrBX
, 
XX
, XX },

552 { "pushS", 
RMrSP
, 
XX
, XX },

553 { "pushS", 
RMrBP
, 
XX
, XX },

554 { "pushS", 
RMrSI
, 
XX
, XX },

555 { "pushS", 
RMrDI
, 
XX
, XX },

557 { "p›S", 
RMrAX
, 
XX
, XX },

558 { "p›S", 
RMrCX
, 
XX
, XX },

559 { "p›S", 
RMrDX
, 
XX
, XX },

560 { "p›S", 
RMrBX
, 
XX
, XX },

561 { "p›S", 
RMrSP
, 
XX
, XX },

562 { "p›S", 
RMrBP
, 
XX
, XX },

563 { "p›S", 
RMrSI
, 
XX
, XX },

564 { "p›S", 
RMrDI
, 
XX
, XX },

566 { "pusha{P|}", 
XX
, XX, XX },

567 { "p›a{P|}", 
XX
, XX, XX },

568 { "bound{S|}", 
Gv
, 
Ma
, 
XX
 },

569 { 
X86_64_0
 },

570 { "(bad)", 
XX
, XX, XX },

571 { "(bad)", 
XX
, XX, XX },

572 { "(bad)", 
XX
, XX, XX },

573 { "(bad)", 
XX
, XX, XX },

575 { "pushT", 
Iq
, 
XX
, XX },

576 { "imulS", 
Gv
, 
Ev
, 
Iv
 },

577 { "pushT", 
sIb
, 
XX
, XX },

578 { "imulS", 
Gv
, 
Ev
, 
sIb
 },

579 { "ös{b||b|}", 
Yb
, 
ödúDX
, 
XX
 },

580 { "ös{R||R|}", 
Yv
, 
ödúDX
, 
XX
 },

581 { "outs{b||b|}", 
ödúDX
, 
Xb
, 
XX
 },

582 { "outs{R||R|}", 
ödúDX
, 
Xv
, 
XX
 },

584 { "joH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

585 { "jnoH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

586 { "jbH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

587 { "j´H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

588 { "jeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

589 { "j√H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

590 { "jbeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

591 { "jaH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

593 { "jsH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

594 { "jnsH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

595 { "jpH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

596 { "j≈H", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

597 { "jlH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

598 { "jgeH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

599 { "jÀH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

600 { "jgH", 
Jb
, 
XX
, 
c⁄d_jump_Êag
 },

602 { 
GRP1b
 },

603 { 
GRP1S
 },

604 { "(bad)", 
XX
, XX, XX },

605 { 
GRP1Ss
 },

606 { "ã°B", 
Eb
, 
Gb
, 
XX
 },

607 { "ã°S", 
Ev
, 
Gv
, 
XX
 },

608 { "xchgB", 
Eb
, 
Gb
, 
XX
 },

609 { "xchgS", 
Ev
, 
Gv
, 
XX
 },

611 { "movB", 
Eb
, 
Gb
, 
XX
 },

612 { "movS", 
Ev
, 
Gv
, 
XX
 },

613 { "movB", 
Gb
, 
Eb
, 
XX
 },

614 { "movS", 
Gv
, 
Ev
, 
XX
 },

615 { "movQ", 
Ev
, 
Sw
, 
XX
 },

616 { "ÀaS", 
Gv
, 
M
, 
XX
 },

617 { "movQ", 
Sw
, 
Ev
, 
XX
 },

618 { "p›U", 
Ev
, 
XX
, XX },

620 { "n›", 
XX
, XX, XX },

622 { "xchgS", 
RMeCX
, 
eAX
, 
XX
 },

623 { "xchgS", 
RMeDX
, 
eAX
, 
XX
 },

624 { "xchgS", 
RMeBX
, 
eAX
, 
XX
 },

625 { "xchgS", 
RMeSP
, 
eAX
, 
XX
 },

626 { "xchgS", 
RMeBP
, 
eAX
, 
XX
 },

627 { "xchgS", 
RMeSI
, 
eAX
, 
XX
 },

628 { "xchgS", 
RMeDI
, 
eAX
, 
XX
 },

630 { "cW{tR||tR|}", 
XX
, XX, XX },

631 { "cR{tO||tO|}", 
XX
, XX, XX },

632 { "lˇŒ{T|}", 
Ap
, 
XX
, XX },

633 { "(bad)", 
XX
, XX, XX },

634 { "pushfT", 
XX
, XX, XX },

635 { "p›fT", 
XX
, XX, XX },

636 { "ßhf{|}", 
XX
, XX, XX },

637 { "œhf{|}", 
XX
, XX, XX },

639 { "movB", 
AL
, 
Ob64
, 
XX
 },

640 { "movS", 
eAX
, 
Ov64
, 
XX
 },

641 { "movB", 
Ob64
, 
AL
, 
XX
 },

642 { "movS", 
Ov64
, 
eAX
, 
XX
 },

643 { "movs{b||b|}", 
Yb
, 
Xb
, 
XX
 },

644 { "movs{R||R|}", 
Yv
, 
Xv
, 
XX
 },

645 { "cmps{b||b|}", 
Xb
, 
Yb
, 
XX
 },

646 { "cmps{R||R|}", 
Xv
, 
Yv
, 
XX
 },

648 { "ã°B", 
AL
, 
Ib
, 
XX
 },

649 { "ã°S", 
eAX
, 
Iv
, 
XX
 },

650 { "°osB", 
Yb
, 
AL
, 
XX
 },

651 { "°osS", 
Yv
, 
eAX
, 
XX
 },

652 { "lodsB", 
AL
, 
Xb
, 
XX
 },

653 { "lodsS", 
eAX
, 
Xv
, 
XX
 },

654 { "sˇsB", 
AL
, 
Yb
, 
XX
 },

655 { "sˇsS", 
eAX
, 
Yv
, 
XX
 },

657 { "movB", 
RMAL
, 
Ib
, 
XX
 },

658 { "movB", 
RMCL
, 
Ib
, 
XX
 },

659 { "movB", 
RMDL
, 
Ib
, 
XX
 },

660 { "movB", 
RMBL
, 
Ib
, 
XX
 },

661 { "movB", 
RMAH
, 
Ib
, 
XX
 },

662 { "movB", 
RMCH
, 
Ib
, 
XX
 },

663 { "movB", 
RMDH
, 
Ib
, 
XX
 },

664 { "movB", 
RMBH
, 
Ib
, 
XX
 },

666 { "movS", 
RMeAX
, 
Iv64
, 
XX
 },

667 { "movS", 
RMeCX
, 
Iv64
, 
XX
 },

668 { "movS", 
RMeDX
, 
Iv64
, 
XX
 },

669 { "movS", 
RMeBX
, 
Iv64
, 
XX
 },

670 { "movS", 
RMeSP
, 
Iv64
, 
XX
 },

671 { "movS", 
RMeBP
, 
Iv64
, 
XX
 },

672 { "movS", 
RMeSI
, 
Iv64
, 
XX
 },

673 { "movS", 
RMeDI
, 
Iv64
, 
XX
 },

675 { 
GRP2b
 },

676 { 
GRP2S
 },

677 { "ªtT", 
Iw
, 
XX
, XX },

678 { "ªtT", 
XX
, XX, XX },

679 { "Às{S|}", 
Gv
, 
Mp
, 
XX
 },

680 { "ldsS", 
Gv
, 
Mp
, 
XX
 },

681 { "movA", 
Eb
, 
Ib
, 
XX
 },

682 { "movQ", 
Ev
, 
Iv
, 
XX
 },

684 { "íãrT", 
Iw
, 
Ib
, 
XX
 },

685 { "ÀaveT", 
XX
, XX, XX },

686 { "ÃëP", 
Iw
, 
XX
, XX },

687 { "ÃëP", 
XX
, XX, XX },

688 { "öt3", 
XX
, XX, XX },

689 { "öt", 
Ib
, 
XX
, XX },

690 { "öto{|}", 
XX
, XX, XX },

691 { "úëP", 
XX
, XX, XX },

693 { 
GRP2b_⁄e
 },

694 { 
GRP2S_⁄e
 },

695 { 
GRP2b_˛
 },

696 { 
GRP2S_˛
 },

697 { "Øm{|}", 
sIb
, 
XX
, XX },

698 { "Ød{|}", 
sIb
, 
XX
, XX },

699 { "(bad)", 
XX
, XX, XX },

700 { "xœt", 
DSBX
, 
XX
, XX },

702 { 
FLOAT
 },

703 { 
FLOAT
 },

704 { 
FLOAT
 },

705 { 
FLOAT
 },

706 { 
FLOAT
 },

707 { 
FLOAT
 },

708 { 
FLOAT
 },

709 { 
FLOAT
 },

711 { "lo›√FH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

712 { "lo›eFH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

713 { "lo›FH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

714 { "jEcxzH", 
Jb
, 
XX
, 
lo›_jcxz_Êag
 },

715 { "öB", 
AL
, 
Ib
, 
XX
 },

716 { "öS", 
eAX
, 
Ib
, 
XX
 },

717 { "outB", 
Ib
, 
AL
, 
XX
 },

718 { "outS", 
Ib
, 
eAX
, 
XX
 },

720 { "ˇŒT", 
Jv
, 
XX
, XX },

721 { "jmpT", 
Jv
, 
XX
, XX },

722 { "ljmp{T|}", 
Ap
, 
XX
, XX },

723 { "jmp", 
Jb
, 
XX
, XX },

724 { "öB", 
AL
, 
ödúDX
, 
XX
 },

725 { "öS", 
eAX
, 
ödúDX
, 
XX
 },

726 { "outB", 
ödúDX
, 
AL
, 
XX
 },

727 { "outS", 
ödúDX
, 
eAX
, 
XX
 },

729 { "(bad)", 
XX
, XX, XX },

730 { "(bad)", 
XX
, XX, XX },

731 { "(bad)", 
XX
, XX, XX },

732 { "(bad)", 
XX
, XX, XX },

733 { "h…", 
XX
, XX, XX },

734 { "cmc", 
XX
, XX, XX },

735 { 
GRP3b
 },

736 { 
GRP3S
 },

738 { "˛c", 
XX
, XX, XX },

739 { "°c", 
XX
, XX, XX },

740 { "˛i", 
XX
, XX, XX },

741 { "°i", 
XX
, XX, XX },

742 { "˛d", 
XX
, XX, XX },

743 { "°d", 
XX
, XX, XX },

744 { 
GRP4
 },

745 { 
GRP5
 },

746 
	}
};

748 c⁄° 
dis386
 
	gdis386_twobyã
[] = {

750 { 
GRP6
 },

751 { 
GRP7
 },

752 { "œrS", 
Gv
, 
Ew
, 
XX
 },

753 { "l¶S", 
Gv
, 
Ew
, 
XX
 },

754 { "(bad)", 
XX
, XX, XX },

755 { "sysˇŒ", 
XX
, XX, XX },

756 { "˛ts", 
XX
, XX, XX },

757 { "sy§ëP", 
XX
, XX, XX },

759 { "övd", 
XX
, XX, XX },

760 { "wbövd", 
XX
, XX, XX },

761 { "(bad)", 
XX
, XX, XX },

762 { "ud2a", 
XX
, XX, XX },

763 { "(bad)", 
XX
, XX, XX },

764 { 
GRPAMD
 },

765 { "„mms", 
XX
, XX, XX },

766 { "", 
MX
, 
EM
, 
OPSUF
 },

768 { 
PREGRP8
 },

769 { 
PREGRP9
 },

770 { "movÕX", 
XM
, 
EX
, 
SIMD_Fixup
, 'h' },

771 { "movÕX", 
EX
, 
XM
, 
SIMD_Fixup
, 'h' },

772 { "u≈ckÕX", 
XM
, 
EX
, 
XX
 },

773 { "u≈ckhpX", 
XM
, 
EX
, 
XX
 },

774 { "movhpX", 
XM
, 
EX
, 
SIMD_Fixup
, 'l' },

775 { "movhpX", 
EX
, 
XM
, 
SIMD_Fixup
, 'l' },

777 { 
GRP14
 },

778 { "(bad)", 
XX
, XX, XX },

779 { "(bad)", 
XX
, XX, XX },

780 { "(bad)", 
XX
, XX, XX },

781 { "(bad)", 
XX
, XX, XX },

782 { "(bad)", 
XX
, XX, XX },

783 { "(bad)", 
XX
, XX, XX },

784 { "(bad)", 
XX
, XX, XX },

786 { "movL", 
Rm
, 
Cm
, 
XX
 },

787 { "movL", 
Rm
, 
Dm
, 
XX
 },

788 { "movL", 
Cm
, 
Rm
, 
XX
 },

789 { "movL", 
Dm
, 
Rm
, 
XX
 },

790 { "movL", 
Rd
, 
Td
, 
XX
 },

791 { "(bad)", 
XX
, XX, XX },

792 { "movL", 
Td
, 
Rd
, 
XX
 },

793 { "(bad)", 
XX
, XX, XX },

795 { "mov≠X", 
XM
, 
EX
, 
XX
 },

796 { "mov≠X", 
EX
, 
XM
, 
XX
 },

797 { 
PREGRP2
 },

798 { "mov¡pX", 
Ev
, 
XM
, 
XX
 },

799 { 
PREGRP4
 },

800 { 
PREGRP3
 },

801 { "ucomisX", 
XM
,
EX
, 
XX
 },

802 { "comisX", 
XM
,
EX
, 
XX
 },

804 { "wrm§", 
XX
, XX, XX },

805 { "rdtsc", 
XX
, XX, XX },

806 { "rdm§", 
XX
, XX, XX },

807 { "rdpmc", 
XX
, XX, XX },

808 { "sy£¡î", 
XX
, XX, XX },

809 { "sy£xô", 
XX
, XX, XX },

810 { "(bad)", 
XX
, XX, XX },

811 { "(bad)", 
XX
, XX, XX },

813 { "(bad)", 
XX
, XX, XX },

814 { "(bad)", 
XX
, XX, XX },

815 { "(bad)", 
XX
, XX, XX },

816 { "(bad)", 
XX
, XX, XX },

817 { "(bad)", 
XX
, XX, XX },

818 { "(bad)", 
XX
, XX, XX },

819 { "(bad)", 
XX
, XX, XX },

820 { "(bad)", 
XX
, XX, XX },

822 { "cmovo", 
Gv
, 
Ev
, 
XX
 },

823 { "cmovno", 
Gv
, 
Ev
, 
XX
 },

824 { "cmovb", 
Gv
, 
Ev
, 
XX
 },

825 { "cmov´", 
Gv
, 
Ev
, 
XX
 },

826 { "cmove", 
Gv
, 
Ev
, 
XX
 },

827 { "cmov√", 
Gv
, 
Ev
, 
XX
 },

828 { "cmovbe", 
Gv
, 
Ev
, 
XX
 },

829 { "cmova", 
Gv
, 
Ev
, 
XX
 },

831 { "cmovs", 
Gv
, 
Ev
, 
XX
 },

832 { "cmovns", 
Gv
, 
Ev
, 
XX
 },

833 { "cmovp", 
Gv
, 
Ev
, 
XX
 },

834 { "cmov≈", 
Gv
, 
Ev
, 
XX
 },

835 { "cmovl", 
Gv
, 
Ev
, 
XX
 },

836 { "cmovge", 
Gv
, 
Ev
, 
XX
 },

837 { "cmovÀ", 
Gv
, 
Ev
, 
XX
 },

838 { "cmovg", 
Gv
, 
Ev
, 
XX
 },

840 { "movmskpX", 
Gd
, 
XS
, 
XX
 },

841 { 
PREGRP13
 },

842 { 
PREGRP12
 },

843 { 
PREGRP11
 },

844 { "™dpX", 
XM
, 
EX
, 
XX
 },

845 { "™d≈X", 
XM
, 
EX
, 
XX
 },

846 { "‹pX", 
XM
, 
EX
, 
XX
 },

847 { "x‹pX", 
XM
, 
EX
, 
XX
 },

849 { 
PREGRP0
 },

850 { 
PREGRP10
 },

851 { 
PREGRP17
 },

852 { 
PREGRP16
 },

853 { 
PREGRP14
 },

854 { 
PREGRP7
 },

855 { 
PREGRP5
 },

856 { 
PREGRP6
 },

858 { "pu≈cklbw", 
MX
, 
EM
, 
XX
 },

859 { "pu≈cklwd", 
MX
, 
EM
, 
XX
 },

860 { "pu≈ckldq", 
MX
, 
EM
, 
XX
 },

861 { "∑cksswb", 
MX
, 
EM
, 
XX
 },

862 { "pcmpgtb", 
MX
, 
EM
, 
XX
 },

863 { "pcmpgtw", 
MX
, 
EM
, 
XX
 },

864 { "pcmpgtd", 
MX
, 
EM
, 
XX
 },

865 { "∑ckuswb", 
MX
, 
EM
, 
XX
 },

867 { "pu≈ckhbw", 
MX
, 
EM
, 
XX
 },

868 { "pu≈ckhwd", 
MX
, 
EM
, 
XX
 },

869 { "pu≈ckhdq", 
MX
, 
EM
, 
XX
 },

870 { "∑ckssdw", 
MX
, 
EM
, 
XX
 },

871 { 
PREGRP26
 },

872 { 
PREGRP24
 },

873 { "movd", 
MX
, 
Ed
, 
XX
 },

874 { 
PREGRP19
 },

876 { 
PREGRP22
 },

877 { 
GRP10
 },

878 { 
GRP11
 },

879 { 
GRP12
 },

880 { "pcm≥qb", 
MX
, 
EM
, 
XX
 },

881 { "pcm≥qw", 
MX
, 
EM
, 
XX
 },

882 { "pcm≥qd", 
MX
, 
EM
, 
XX
 },

883 { "emms", 
XX
, XX, XX },

885 { "(bad)", 
XX
, XX, XX },

886 { "(bad)", 
XX
, XX, XX },

887 { "(bad)", 
XX
, XX, XX },

888 { "(bad)", 
XX
, XX, XX },

889 { "(bad)", 
XX
, XX, XX },

890 { "(bad)", 
XX
, XX, XX },

891 { 
PREGRP23
 },

892 { 
PREGRP20
 },

894 { "joH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

895 { "jnoH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

896 { "jbH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

897 { "j´H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

898 { "jeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

899 { "j√H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

900 { "jbeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

901 { "jaH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

903 { "jsH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

904 { "jnsH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

905 { "jpH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

906 { "j≈H", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

907 { "jlH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

908 { "jgeH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

909 { "jÀH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

910 { "jgH", 
Jv
, 
XX
, 
c⁄d_jump_Êag
 },

912 { "£to", 
Eb
, 
XX
, XX },

913 { "£äo", 
Eb
, 
XX
, XX },

914 { "£tb", 
Eb
, 
XX
, XX },

915 { "£èe", 
Eb
, 
XX
, XX },

916 { "£ã", 
Eb
, 
XX
, XX },

917 { "£äe", 
Eb
, 
XX
, XX },

918 { "£tbe", 
Eb
, 
XX
, XX },

919 { "£è", 
Eb
, 
XX
, XX },

921 { "£ts", 
Eb
, 
XX
, XX },

922 { "£äs", 
Eb
, 
XX
, XX },

923 { "£ç", 
Eb
, 
XX
, XX },

924 { "£äp", 
Eb
, 
XX
, XX },

925 { "£é", 
Eb
, 
XX
, XX },

926 { "£tge", 
Eb
, 
XX
, XX },

927 { "£ée", 
Eb
, 
XX
, XX },

928 { "£tg", 
Eb
, 
XX
, XX },

930 { "pushT", 
fs
, 
XX
, XX },

931 { "p›T", 
fs
, 
XX
, XX },

932 { "˝uid", 
XX
, XX, XX },

933 { "btS", 
Ev
, 
Gv
, 
XX
 },

934 { "shldS", 
Ev
, 
Gv
, 
Ib
 },

935 { "shldS", 
Ev
, 
Gv
, 
CL
 },

936 { "(bad)", 
XX
, XX, XX },

937 { "(bad)", 
XX
, XX, XX },

939 { "pushT", 
gs
, 
XX
, XX },

940 { "p›T", 
gs
, 
XX
, XX },

941 { "rsm", 
XX
, XX, XX },

942 { "btsS", 
Ev
, 
Gv
, 
XX
 },

943 { "shrdS", 
Ev
, 
Gv
, 
Ib
 },

944 { "shrdS", 
Ev
, 
Gv
, 
CL
 },

945 { 
GRP13
 },

946 { "imulS", 
Gv
, 
Ev
, 
XX
 },

948 { "cmpxchgB", 
Eb
, 
Gb
, 
XX
 },

949 { "cmpxchgS", 
Ev
, 
Gv
, 
XX
 },

950 { "lssS", 
Gv
, 
Mp
, 
XX
 },

951 { "båS", 
Ev
, 
Gv
, 
XX
 },

952 { "lfsS", 
Gv
, 
Mp
, 
XX
 },

953 { "lgsS", 
Gv
, 
Mp
, 
XX
 },

954 { "movz{bR|x|bR|x}", 
Gv
, 
Eb
, 
XX
 },

955 { "movz{wR|x|wR|x}", 
Gv
, 
Ew
, 
XX
 },

957 { "(bad)", 
XX
, XX, XX },

958 { "ud2b", 
XX
, XX, XX },

959 { 
GRP8
 },

960 { "btcS", 
Ev
, 
Gv
, 
XX
 },

961 { "bsfS", 
Gv
, 
Ev
, 
XX
 },

962 { "b§S", 
Gv
, 
Ev
, 
XX
 },

963 { "movs{bR|x|bR|x}", 
Gv
, 
Eb
, 
XX
 },

964 { "movs{wR|x|wR|x}", 
Gv
, 
Ew
, 
XX
 },

966 { "xaddB", 
Eb
, 
Gb
, 
XX
 },

967 { "xaddS", 
Ev
, 
Gv
, 
XX
 },

968 { 
PREGRP1
 },

969 { "mov¡iS", 
Ev
, 
Gv
, 
XX
 },

970 { "pö§w", 
MX
, 
Ed
, 
Ib
 },

971 { "≥xåw", 
Gd
, 
MS
, 
Ib
 },

972 { "shuÂX", 
XM
, 
EX
, 
Ib
 },

973 { 
GRP9
 },

975 { "bsw≠", 
RMeAX
, 
XX
, XX },

976 { "bsw≠", 
RMeCX
, 
XX
, XX },

977 { "bsw≠", 
RMeDX
, 
XX
, XX },

978 { "bsw≠", 
RMeBX
, 
XX
, XX },

979 { "bsw≠", 
RMeSP
, 
XX
, XX },

980 { "bsw≠", 
RMeBP
, 
XX
, XX },

981 { "bsw≠", 
RMeSI
, 
XX
, XX },

982 { "bsw≠", 
RMeDI
, 
XX
, XX },

984 { "(bad)", 
XX
, XX, XX },

985 { "p§lw", 
MX
, 
EM
, 
XX
 },

986 { "p§ld", 
MX
, 
EM
, 
XX
 },

987 { "p§lq", 
MX
, 
EM
, 
XX
 },

988 { "∑ddq", 
MX
, 
EM
, 
XX
 },

989 { "pmuŒw", 
MX
, 
EM
, 
XX
 },

990 { 
PREGRP21
 },

991 { "pmovmskb", 
Gd
, 
MS
, 
XX
 },

993 { "psubusb", 
MX
, 
EM
, 
XX
 },

994 { "psubusw", 
MX
, 
EM
, 
XX
 },

995 { "pmöub", 
MX
, 
EM
, 
XX
 },

996 { "∑nd", 
MX
, 
EM
, 
XX
 },

997 { "∑ddusb", 
MX
, 
EM
, 
XX
 },

998 { "∑ddusw", 
MX
, 
EM
, 
XX
 },

999 { "pmaxub", 
MX
, 
EM
, 
XX
 },

1000 { "∑ndn", 
MX
, 
EM
, 
XX
 },

1002 { "∑vgb", 
MX
, 
EM
, 
XX
 },

1003 { "p§aw", 
MX
, 
EM
, 
XX
 },

1004 { "p§ad", 
MX
, 
EM
, 
XX
 },

1005 { "∑vgw", 
MX
, 
EM
, 
XX
 },

1006 { "pmulhuw", 
MX
, 
EM
, 
XX
 },

1007 { "pmulhw", 
MX
, 
EM
, 
XX
 },

1008 { 
PREGRP15
 },

1009 { 
PREGRP25
 },

1011 { "psubsb", 
MX
, 
EM
, 
XX
 },

1012 { "psubsw", 
MX
, 
EM
, 
XX
 },

1013 { "pmösw", 
MX
, 
EM
, 
XX
 },

1014 { "p‹", 
MX
, 
EM
, 
XX
 },

1015 { "∑ddsb", 
MX
, 
EM
, 
XX
 },

1016 { "∑ddsw", 
MX
, 
EM
, 
XX
 },

1017 { "pmaxsw", 
MX
, 
EM
, 
XX
 },

1018 { "px‹", 
MX
, 
EM
, 
XX
 },

1020 { "(bad)", 
XX
, XX, XX },

1021 { "p¶lw", 
MX
, 
EM
, 
XX
 },

1022 { "p¶ld", 
MX
, 
EM
, 
XX
 },

1023 { "p¶lq", 
MX
, 
EM
, 
XX
 },

1024 { "pmuludq", 
MX
, 
EM
, 
XX
 },

1025 { "pmaddwd", 
MX
, 
EM
, 
XX
 },

1026 { "pßdbw", 
MX
, 
EM
, 
XX
 },

1027 { 
PREGRP18
 },

1029 { "psubb", 
MX
, 
EM
, 
XX
 },

1030 { "psubw", 
MX
, 
EM
, 
XX
 },

1031 { "psubd", 
MX
, 
EM
, 
XX
 },

1032 { "psubq", 
MX
, 
EM
, 
XX
 },

1033 { "∑ddb", 
MX
, 
EM
, 
XX
 },

1034 { "∑ddw", 
MX
, 
EM
, 
XX
 },

1035 { "∑ddd", 
MX
, 
EM
, 
XX
 },

1036 { "(bad)", 
XX
, XX, XX }

1039 c⁄° 
	g⁄ebyã_has_modrm
[256] = {

1062 c⁄° 
	gtwobyã_has_modrm
[256] = {

1085 c⁄° 
	gtwobyã_u£s_SSE_¥efix
[256] = {

1108 
	gobuf
[100];

1109 *
	gobuÂ
;

1110 
	gs¸©chbuf
[100];

1111 *
	g°¨t_codï
;

1112 *
	gö¢_codï
;

1113 *
	gcodï
;

1114 
dißs£mbÀ_öfo
 *
	gthe_öfo
;

1115 
	gmod
;

1116 
	grm
;

1117 
	gªg
;

1118 
	g√ed_modrm
;

1123 
	#MODRM_CHECK
 i‡(!
√ed_modrm
Ë
	`∑nic
("modî check");

	)

1125 c⁄° * c⁄° *
	g«mes64
;

1126 c⁄° * c⁄° *
	g«mes32
;

1127 c⁄° * c⁄° *
	g«mes16
;

1128 c⁄° * c⁄° *
	g«mes8
;

1129 c⁄° * c⁄° *
	g«mes8ªx
;

1130 c⁄° * c⁄° *
	g«mes_£g
;

1131 c⁄° * c⁄° *
	gödex16
;

1133 c⁄° * c⁄° 
	göãl_«mes64
[] = {

1137 c⁄° * c⁄° 
	göãl_«mes32
[] = {

1141 c⁄° * c⁄° 
	göãl_«mes16
[] = {

1145 c⁄° * c⁄° 
	göãl_«mes8
[] = {

1148 c⁄° * c⁄° 
	göãl_«mes8ªx
[] = {

1152 c⁄° * c⁄° 
	göãl_«mes_£g
[] = {

1155 c⁄° * c⁄° 
	göãl_ödex16
[] = {

1159 c⁄° * c⁄° 
	g©t_«mes64
[] = {

1163 c⁄° * c⁄° 
	g©t_«mes32
[] = {

1167 c⁄° * c⁄° 
	g©t_«mes16
[] = {

1171 c⁄° * c⁄° 
	g©t_«mes8
[] = {

1174 c⁄° * c⁄° 
	g©t_«mes8ªx
[] = {

1178 c⁄° * c⁄° 
	g©t_«mes_£g
[] = {

1181 c⁄° * c⁄° 
	g©t_ödex16
[] = {

1185 c⁄° 
dis386
 
	ggΩs
[][8] = {

1188 { "addA", 
Eb
, 
Ib
, 
XX
 },

1189 { "‹A", 
Eb
, 
Ib
, 
XX
 },

1190 { "adcA", 
Eb
, 
Ib
, 
XX
 },

1191 { "sbbA", 
Eb
, 
Ib
, 
XX
 },

1192 { "™dA", 
Eb
, 
Ib
, 
XX
 },

1193 { "subA", 
Eb
, 
Ib
, 
XX
 },

1194 { "x‹A", 
Eb
, 
Ib
, 
XX
 },

1195 { "cmpA", 
Eb
, 
Ib
, 
XX
 }

1199 { "addQ", 
Ev
, 
Iv
, 
XX
 },

1200 { "‹Q", 
Ev
, 
Iv
, 
XX
 },

1201 { "adcQ", 
Ev
, 
Iv
, 
XX
 },

1202 { "sbbQ", 
Ev
, 
Iv
, 
XX
 },

1203 { "™dQ", 
Ev
, 
Iv
, 
XX
 },

1204 { "subQ", 
Ev
, 
Iv
, 
XX
 },

1205 { "x‹Q", 
Ev
, 
Iv
, 
XX
 },

1206 { "cmpQ", 
Ev
, 
Iv
, 
XX
 }

1210 { "addQ", 
Ev
, 
sIb
, 
XX
 },

1211 { "‹Q", 
Ev
, 
sIb
, 
XX
 },

1212 { "adcQ", 
Ev
, 
sIb
, 
XX
 },

1213 { "sbbQ", 
Ev
, 
sIb
, 
XX
 },

1214 { "™dQ", 
Ev
, 
sIb
, 
XX
 },

1215 { "subQ", 
Ev
, 
sIb
, 
XX
 },

1216 { "x‹Q", 
Ev
, 
sIb
, 
XX
 },

1217 { "cmpQ", 
Ev
, 
sIb
, 
XX
 }

1221 { "rﬁA", 
Eb
, 
Ib
, 
XX
 },

1222 { "r‹A", 
Eb
, 
Ib
, 
XX
 },

1223 { "r˛A", 
Eb
, 
Ib
, 
XX
 },

1224 { "r¸A", 
Eb
, 
Ib
, 
XX
 },

1225 { "shlA", 
Eb
, 
Ib
, 
XX
 },

1226 { "shrA", 
Eb
, 
Ib
, 
XX
 },

1227 { "(bad)", 
XX
, XX, XX },

1228 { "ßrA", 
Eb
, 
Ib
, 
XX
 },

1232 { "rﬁQ", 
Ev
, 
Ib
, 
XX
 },

1233 { "r‹Q", 
Ev
, 
Ib
, 
XX
 },

1234 { "r˛Q", 
Ev
, 
Ib
, 
XX
 },

1235 { "r¸Q", 
Ev
, 
Ib
, 
XX
 },

1236 { "shlQ", 
Ev
, 
Ib
, 
XX
 },

1237 { "shrQ", 
Ev
, 
Ib
, 
XX
 },

1238 { "(bad)", 
XX
, XX, XX },

1239 { "ßrQ", 
Ev
, 
Ib
, 
XX
 },

1243 { "rﬁA", 
Eb
, 
XX
, XX },

1244 { "r‹A", 
Eb
, 
XX
, XX },

1245 { "r˛A", 
Eb
, 
XX
, XX },

1246 { "r¸A", 
Eb
, 
XX
, XX },

1247 { "shlA", 
Eb
, 
XX
, XX },

1248 { "shrA", 
Eb
, 
XX
, XX },

1249 { "(bad)", 
XX
, XX, XX },

1250 { "ßrA", 
Eb
, 
XX
, XX },

1254 { "rﬁQ", 
Ev
, 
XX
, XX },

1255 { "r‹Q", 
Ev
, 
XX
, XX },

1256 { "r˛Q", 
Ev
, 
XX
, XX },

1257 { "r¸Q", 
Ev
, 
XX
, XX },

1258 { "shlQ", 
Ev
, 
XX
, XX },

1259 { "shrQ", 
Ev
, 
XX
, XX },

1260 { "(bad)", 
XX
, XX, XX},

1261 { "ßrQ", 
Ev
, 
XX
, XX },

1265 { "rﬁA", 
Eb
, 
CL
, 
XX
 },

1266 { "r‹A", 
Eb
, 
CL
, 
XX
 },

1267 { "r˛A", 
Eb
, 
CL
, 
XX
 },

1268 { "r¸A", 
Eb
, 
CL
, 
XX
 },

1269 { "shlA", 
Eb
, 
CL
, 
XX
 },

1270 { "shrA", 
Eb
, 
CL
, 
XX
 },

1271 { "(bad)", 
XX
, XX, XX },

1272 { "ßrA", 
Eb
, 
CL
, 
XX
 },

1276 { "rﬁQ", 
Ev
, 
CL
, 
XX
 },

1277 { "r‹Q", 
Ev
, 
CL
, 
XX
 },

1278 { "r˛Q", 
Ev
, 
CL
, 
XX
 },

1279 { "r¸Q", 
Ev
, 
CL
, 
XX
 },

1280 { "shlQ", 
Ev
, 
CL
, 
XX
 },

1281 { "shrQ", 
Ev
, 
CL
, 
XX
 },

1282 { "(bad)", 
XX
, XX, XX },

1283 { "ßrQ", 
Ev
, 
CL
, 
XX
 }

1287 { "ã°A", 
Eb
, 
Ib
, 
XX
 },

1288 { "(bad)", 
Eb
, 
XX
, XX },

1289 { "nŸA", 
Eb
, 
XX
, XX },

1290 { "√gA", 
Eb
, 
XX
, XX },

1291 { "mulA", 
Eb
, 
XX
, XX },

1292 { "imulA", 
Eb
, 
XX
, XX },

1293 { "divA", 
Eb
, 
XX
, XX },

1294 { "idivA", 
Eb
, 
XX
, XX }

1298 { "ã°Q", 
Ev
, 
Iv
, 
XX
 },

1299 { "(bad)", 
XX
, XX, XX },

1300 { "nŸQ", 
Ev
, 
XX
, XX },

1301 { "√gQ", 
Ev
, 
XX
, XX },

1302 { "mulQ", 
Ev
, 
XX
, XX },

1303 { "imulQ", 
Ev
, 
XX
, XX },

1304 { "divQ", 
Ev
, 
XX
, XX },

1305 { "idivQ", 
Ev
, 
XX
, XX },

1309 { "öcA", 
Eb
, 
XX
, XX },

1310 { "decA", 
Eb
, 
XX
, XX },

1311 { "(bad)", 
XX
, XX, XX },

1312 { "(bad)", 
XX
, XX, XX },

1313 { "(bad)", 
XX
, XX, XX },

1314 { "(bad)", 
XX
, XX, XX },

1315 { "(bad)", 
XX
, XX, XX },

1316 { "(bad)", 
XX
, XX, XX },

1320 { "öcQ", 
Ev
, 
XX
, XX },

1321 { "decQ", 
Ev
, 
XX
, XX },

1322 { "ˇŒT", 
ödúEv
, 
XX
, XX },

1323 { "lˇŒT", 
ödúEv
, 
XX
, XX },

1324 { "jmpT", 
ödúEv
, 
XX
, XX },

1325 { "ljmpT", 
ödúEv
, 
XX
, XX },

1326 { "pushU", 
Ev
, 
XX
, XX },

1327 { "(bad)", 
XX
, XX, XX },

1331 { "¶dtQ", 
Ev
, 
XX
, XX },

1332 { "°rQ", 
Ev
, 
XX
, XX },

1333 { "Œdt", 
Ew
, 
XX
, XX },

1334 { "…r", 
Ew
, 
XX
, XX },

1335 { "vîr", 
Ew
, 
XX
, XX },

1336 { "vîw", 
Ew
, 
XX
, XX },

1337 { "(bad)", 
XX
, XX, XX },

1338 { "(bad)", 
XX
, XX, XX }

1342 { "sgdtQ", 
M
, 
XX
, XX },

1343 { "sidtQ", 
M
, 
XX
, XX },

1344 { "lgdtQ", 
M
, 
XX
, XX },

1345 { "lidtQ", 
M
, 
XX
, XX },

1346 { "smswQ", 
Ev
, 
XX
, XX },

1347 { "(bad)", 
XX
, XX, XX },

1348 { "lmsw", 
Ew
, 
XX
, XX },

1349 { "övÕg", 
Ew
, 
XX
, XX },

1353 { "(bad)", 
XX
, XX, XX },

1354 { "(bad)", 
XX
, XX, XX },

1355 { "(bad)", 
XX
, XX, XX },

1356 { "(bad)", 
XX
, XX, XX },

1357 { "btQ", 
Ev
, 
Ib
, 
XX
 },

1358 { "btsQ", 
Ev
, 
Ib
, 
XX
 },

1359 { "båQ", 
Ev
, 
Ib
, 
XX
 },

1360 { "btcQ", 
Ev
, 
Ib
, 
XX
 },

1364 { "(bad)", 
XX
, XX, XX },

1365 { "cmpxchg8b", 
Ev
, 
XX
, XX },

1366 { "(bad)", 
XX
, XX, XX },

1367 { "(bad)", 
XX
, XX, XX },

1368 { "(bad)", 
XX
, XX, XX },

1369 { "(bad)", 
XX
, XX, XX },

1370 { "(bad)", 
XX
, XX, XX },

1371 { "(bad)", 
XX
, XX, XX },

1375 { "(bad)", 
XX
, XX, XX },

1376 { "(bad)", 
XX
, XX, XX },

1377 { "p§lw", 
MS
, 
Ib
, 
XX
 },

1378 { "(bad)", 
XX
, XX, XX },

1379 { "p§aw", 
MS
, 
Ib
, 
XX
 },

1380 { "(bad)", 
XX
, XX, XX },

1381 { "p¶lw", 
MS
, 
Ib
, 
XX
 },

1382 { "(bad)", 
XX
, XX, XX },

1386 { "(bad)", 
XX
, XX, XX },

1387 { "(bad)", 
XX
, XX, XX },

1388 { "p§ld", 
MS
, 
Ib
, 
XX
 },

1389 { "(bad)", 
XX
, XX, XX },

1390 { "p§ad", 
MS
, 
Ib
, 
XX
 },

1391 { "(bad)", 
XX
, XX, XX },

1392 { "p¶ld", 
MS
, 
Ib
, 
XX
 },

1393 { "(bad)", 
XX
, XX, XX },

1397 { "(bad)", 
XX
, XX, XX },

1398 { "(bad)", 
XX
, XX, XX },

1399 { "p§lq", 
MS
, 
Ib
, 
XX
 },

1400 { "p§ldq", 
MS
, 
Ib
, 
XX
 },

1401 { "(bad)", 
XX
, XX, XX },

1402 { "(bad)", 
XX
, XX, XX },

1403 { "p¶lq", 
MS
, 
Ib
, 
XX
 },

1404 { "p¶ldq", 
MS
, 
Ib
, 
XX
 },

1408 { "fxßve", 
Ev
, 
XX
, XX },

1409 { "fxr°‹", 
Ev
, 
XX
, XX },

1410 { "ldmxc§", 
Ev
, 
XX
, XX },

1411 { "°mxc§", 
Ev
, 
XX
, XX },

1412 { "(bad)", 
XX
, XX, XX },

1413 { "l„n˚", 
N⁄e
, 
XX
, XX },

1414 { "m„n˚", 
N⁄e
, 
XX
, XX },

1415 { "s„n˚", 
N⁄e
, 
XX
, XX },

1420 { "¥e„tch¡a", 
Ev
, 
XX
, XX },

1421 { "¥e„tcht0", 
Ev
, 
XX
, XX },

1422 { "¥e„tcht1", 
Ev
, 
XX
, XX },

1423 { "¥e„tcht2", 
Ev
, 
XX
, XX },

1424 { "(bad)", 
XX
, XX, XX },

1425 { "(bad)", 
XX
, XX, XX },

1426 { "(bad)", 
XX
, XX, XX },

1427 { "(bad)", 
XX
, XX, XX },

1431 { "¥e„tch", 
Eb
, 
XX
, XX },

1432 { "¥e„tchw", 
Eb
, 
XX
, XX },

1433 { "(bad)", 
XX
, XX, XX },

1434 { "(bad)", 
XX
, XX, XX },

1435 { "(bad)", 
XX
, XX, XX },

1436 { "(bad)", 
XX
, XX, XX },

1437 { "(bad)", 
XX
, XX, XX },

1438 { "(bad)", 
XX
, XX, XX },

1442 c⁄° 
dis386
 
	g¥efix_u£r_èbÀ
[][4] = {

1445 { "addps", 
XM
, 
EX
, 
XX
 },

1446 { "addss", 
XM
, 
EX
, 
XX
 },

1447 { "addpd", 
XM
, 
EX
, 
XX
 },

1448 { "addsd", 
XM
, 
EX
, 
XX
 },

1452 { "", 
XM
, 
EX
, 
OPSIMD
 },

1453 { "", 
XM
, 
EX
, 
OPSIMD
 },

1454 { "", 
XM
, 
EX
, 
OPSIMD
 },

1455 { "", 
XM
, 
EX
, 
OPSIMD
 },

1459 { "cvçi2ps", 
XM
, 
EM
, 
XX
 },

1460 { "cvtsi2ssY", 
XM
, 
Ev
, 
XX
 },

1461 { "cvçi2pd", 
XM
, 
EM
, 
XX
 },

1462 { "cvtsi2sdY", 
XM
, 
Ev
, 
XX
 },

1466 { "cvçs2pi", 
MX
, 
EX
, 
XX
 },

1467 { "cvtss2siY", 
Gv
, 
EX
, 
XX
 },

1468 { "cvçd2pi", 
MX
, 
EX
, 
XX
 },

1469 { "cvtsd2siY", 
Gv
, 
EX
, 
XX
 },

1473 { "cvâps2pi", 
MX
, 
EX
, 
XX
 },

1474 { "cvâss2siY", 
Gv
, 
EX
, 
XX
 },

1475 { "cvâpd2pi", 
MX
, 
EX
, 
XX
 },

1476 { "cvâsd2siY", 
Gv
, 
EX
, 
XX
 },

1480 { "divps", 
XM
, 
EX
, 
XX
 },

1481 { "divss", 
XM
, 
EX
, 
XX
 },

1482 { "divpd", 
XM
, 
EX
, 
XX
 },

1483 { "divsd", 
XM
, 
EX
, 
XX
 },

1487 { "maxps", 
XM
, 
EX
, 
XX
 },

1488 { "maxss", 
XM
, 
EX
, 
XX
 },

1489 { "maxpd", 
XM
, 
EX
, 
XX
 },

1490 { "maxsd", 
XM
, 
EX
, 
XX
 },

1494 { "möps", 
XM
, 
EX
, 
XX
 },

1495 { "möss", 
XM
, 
EX
, 
XX
 },

1496 { "möpd", 
XM
, 
EX
, 
XX
 },

1497 { "mösd", 
XM
, 
EX
, 
XX
 },

1501 { "movups", 
XM
, 
EX
, 
XX
 },

1502 { "movss", 
XM
, 
EX
, 
XX
 },

1503 { "movupd", 
XM
, 
EX
, 
XX
 },

1504 { "movsd", 
XM
, 
EX
, 
XX
 },

1508 { "movups", 
EX
, 
XM
, 
XX
 },

1509 { "movss", 
EX
, 
XM
, 
XX
 },

1510 { "movupd", 
EX
, 
XM
, 
XX
 },

1511 { "movsd", 
EX
, 
XM
, 
XX
 },

1515 { "muÕs", 
XM
, 
EX
, 
XX
 },

1516 { "mulss", 
XM
, 
EX
, 
XX
 },

1517 { "muÕd", 
XM
, 
EX
, 
XX
 },

1518 { "mulsd", 
XM
, 
EX
, 
XX
 },

1522 { "r˝ps", 
XM
, 
EX
, 
XX
 },

1523 { "r˝ss", 
XM
, 
EX
, 
XX
 },

1524 { "(bad)", 
XM
, 
EX
, 
XX
 },

1525 { "(bad)", 
XM
, 
EX
, 
XX
 },

1529 { "rsqπps", 
XM
, 
EX
, 
XX
 },

1530 { "rsqπss", 
XM
, 
EX
, 
XX
 },

1531 { "(bad)", 
XM
, 
EX
, 
XX
 },

1532 { "(bad)", 
XM
, 
EX
, 
XX
 },

1536 { "sqπps", 
XM
, 
EX
, 
XX
 },

1537 { "sqπss", 
XM
, 
EX
, 
XX
 },

1538 { "sqπpd", 
XM
, 
EX
, 
XX
 },

1539 { "sqπsd", 
XM
, 
EX
, 
XX
 },

1543 { "subps", 
XM
, 
EX
, 
XX
 },

1544 { "subss", 
XM
, 
EX
, 
XX
 },

1545 { "subpd", 
XM
, 
EX
, 
XX
 },

1546 { "subsd", 
XM
, 
EX
, 
XX
 },

1550 { "(bad)", 
XM
, 
EX
, 
XX
 },

1551 { "cvtdq2pd", 
XM
, 
EX
, 
XX
 },

1552 { "cvâpd2dq", 
XM
, 
EX
, 
XX
 },

1553 { "cvçd2dq", 
XM
, 
EX
, 
XX
 },

1557 { "cvtdq2ps", 
XM
, 
EX
, 
XX
 },

1558 { "cvâps2dq",
XM
, 
EX
, 
XX
 },

1559 { "cvçs2dq",
XM
, 
EX
, 
XX
 },

1560 { "(bad)", 
XM
, 
EX
, 
XX
 },

1564 { "cvçs2pd", 
XM
, 
EX
, 
XX
 },

1565 { "cvtss2sd", 
XM
, 
EX
, 
XX
 },

1566 { "cvçd2ps", 
XM
, 
EX
, 
XX
 },

1567 { "cvtsd2ss", 
XM
, 
EX
, 
XX
 },

1571 { "maskmovq", 
MX
, 
MS
, 
XX
 },

1572 { "(bad)", 
XM
, 
EX
, 
XX
 },

1573 { "maskmovdqu", 
XM
, 
EX
, 
XX
 },

1574 { "(bad)", 
XM
, 
EX
, 
XX
 },

1578 { "movq", 
MX
, 
EM
, 
XX
 },

1579 { "movdqu", 
XM
, 
EX
, 
XX
 },

1580 { "movdqa", 
XM
, 
EX
, 
XX
 },

1581 { "(bad)", 
XM
, 
EX
, 
XX
 },

1585 { "movq", 
EM
, 
MX
, 
XX
 },

1586 { "movdqu", 
EX
, 
XM
, 
XX
 },

1587 { "movdqa", 
EX
, 
XM
, 
XX
 },

1588 { "(bad)", 
EX
, 
XM
, 
XX
 },

1592 { "(bad)", 
EX
, 
XM
, 
XX
 },

1593 { "movq2dq", 
XM
, 
MS
, 
XX
 },

1594 { "movq", 
EX
, 
XM
, 
XX
 },

1595 { "movdq2q", 
MX
, 
XS
, 
XX
 },

1599 { "pshufw", 
MX
, 
EM
, 
Ib
 },

1600 { "pshufhw", 
XM
, 
EX
, 
Ib
 },

1601 { "pshufd", 
XM
, 
EX
, 
Ib
 },

1602 { "pshuÊw", 
XM
, 
EX
, 
Ib
 },

1606 { "movd", 
Ed
, 
MX
, 
XX
 },

1607 { "movq", 
XM
, 
EX
, 
XX
 },

1608 { "movd", 
Ed
, 
XM
, 
XX
 },

1609 { "(bad)", 
Ed
, 
XM
, 
XX
 },

1613 { "(bad)", 
MX
, 
EX
, 
XX
 },

1614 { "(bad)", 
XM
, 
EX
, 
XX
 },

1615 { "pu≈ckhqdq", 
XM
, 
EX
, 
XX
 },

1616 { "(bad)", 
XM
, 
EX
, 
XX
 },

1620 { "mov¡q", 
Ev
, 
MX
, 
XX
 },

1621 { "(bad)", 
Ev
, 
XM
, 
XX
 },

1622 { "mov¡dq", 
Ev
, 
XM
, 
XX
 },

1623 { "(bad)", 
Ev
, 
XM
, 
XX
 },

1627 { "(bad)", 
MX
, 
EX
, 
XX
 },

1628 { "(bad)", 
XM
, 
EX
, 
XX
 },

1629 { "pu≈cklqdq", 
XM
, 
EX
, 
XX
 },

1630 { "(bad)", 
XM
, 
EX
, 
XX
 },

1634 c⁄° 
dis386
 
	gx86_64_èbÀ
[][2] = {

1636 { "¨∂", 
Ew
, 
Gw
, 
XX
 },

1637 { "movs{||lq|xd}", 
Gv
, 
Ed
, 
XX
 },

1641 
	#INTERNAL_DISASSEMBLER_ERROR
 
	`_
("<öã∫Æ dißs£mbÀ∏îr‹>")

	)

1644 
	$ck¥efix
 ()

1646 
√wªx
;

1647 
ªx
 = 0;

1648 
¥efixes
 = 0;

1649 
u£d_¥efixes
 = 0;

1650 
ªx_u£d
 = 0;

1653 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

1654 
√wªx
 = 0;

1655 *
codï
)

1674 i‡(
mode_64bô
)

1675 
√wªx
 = *
codï
;

1680 
¥efixes
 |
PREFIX_REPZ
;

1683 
¥efixes
 |
PREFIX_REPNZ
;

1686 
¥efixes
 |
PREFIX_LOCK
;

1689 
¥efixes
 |
PREFIX_CS
;

1692 
¥efixes
 |
PREFIX_SS
;

1695 
¥efixes
 |
PREFIX_DS
;

1698 
¥efixes
 |
PREFIX_ES
;

1701 
¥efixes
 |
PREFIX_FS
;

1704 
¥efixes
 |
PREFIX_GS
;

1707 
¥efixes
 |
PREFIX_DATA
;

1710 
¥efixes
 |
PREFIX_ADDR
;

1712 
FWAIT_OPCODE
:

1716 i‡(
¥efixes
)

1718 
¥efixes
 |
PREFIX_FWAIT
;

1719 
codï
++;

1722 
¥efixes
 = 
PREFIX_FWAIT
;

1728 i‡(
ªx
)

1730 
	`ﬂµíd
 (
	`¥efix_«me
 (
ªx
, 0));

1731 
	`ﬂµíd
 (" ");

1733 
ªx
 = 
√wªx
;

1734 
codï
++;

1736 
	}
}

1742 
	$¥efix_«me
 (
¥ef
, 
sizeÊag
)

1743 
¥ef
;

1744 
sizeÊag
;

1746 
¥ef
)

1800  (
sizeÊag
 & 
DFLAG
) ? "data16" : "data32";

1802 i‡(
mode_64bô
)

1803  (
sizeÊag
 & 
AFLAG
) ? "addr32" : "addr64";

1805  ((
sizeÊag
 & 
AFLAG
Ë&& !
mode_64bô
) ? "addr16" : "addr32";

1806 
FWAIT_OPCODE
:

1809  
NULL
;

1811 
	}
}

1813 
	g›1out
[100], 
	g›2out
[100], 
	g›3out
[100];

1814 
	g›_ad
, 
	g›_ödex
[3];

1815 
bfd_vma
 
	g›_addªss
[3];

1816 
bfd_vma
 
	g›_rùªl
[3];

1817 
bfd_vma
 
	g°¨t_pc
;

1828 
öt8_t
 
	göãl_sy¡ax
;

1829 
	g›í_ch¨
;

1830 
	g˛o£_ch¨
;

1831 
	g£∑øt‹_ch¨
;

1832 
	gsˇÀ_ch¨
;

1835 
	$¥öt_ö¢_i386
 (
pc
, 
öfo
)

1836 
bfd_vma
 
pc
;

1837 
dißs£mbÀ_öfo
 *
öfo
;

1839 
öãl_sy¡ax
 = -1;

1841  
	`¥öt_ö¢
 (
pc
, 
öfo
);

1842 
	}
}

1845 
	$¥öt_ö¢
 (
pc
, 
öfo
)

1846 
bfd_vma
 
pc
;

1847 
dißs£mbÀ_öfo
 *
öfo
;

1849 c⁄° 
dis386
 *
dp
;

1850 
i
;

1851 
two_sour˚_›s
;

1852 *
fú°
, *
£c⁄d
, *
thúd
;

1853 
√edcomma
;

1854 
u£s_SSE_¥efix
;

1855 
sizeÊag
;

1856 c⁄° *
p
;

1857 
dis_¥iv©e
 
¥iv
;

1859 
mode_64bô
 = (
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax


1860 || 
öfo
->
mach
 =
bfd_mach_x86_64
);

1862 i‡(
öãl_sy¡ax
 == -1)

1863 
öãl_sy¡ax
 = (
öfo
->
mach
 =
bfd_mach_i386_i386_öãl_sy¡ax


1864 || 
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax
);

1866 i‡(
öfo
->
mach
 =
bfd_mach_i386_i386


1867 || 
öfo
->
mach
 =
bfd_mach_x86_64


1868 || 
öfo
->
mach
 =
bfd_mach_i386_i386_öãl_sy¡ax


1869 || 
öfo
->
mach
 =
bfd_mach_x86_64_öãl_sy¡ax
)

1870 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1871 i‡(
öfo
->
mach
 =
bfd_mach_i386_i8086
)

1872 
¥iv
.
‹ig_sizeÊag
 = 0;

1874 
	`∑nic
("print_insn:error occured");

1876 
p
 = 
öfo
->
dißs£mbÀr_›ti⁄s
;Ö !
NULL
; )

1878 i‡(
	`°∫cmp
 (
p
, "x86-64", 6) == 0)

1880 
mode_64bô
 = 1;

1881 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1883 i‡(
	`°∫cmp
 (
p
, "i386", 4) == 0)

1885 
mode_64bô
 = 0;

1886 
¥iv
.
‹ig_sizeÊag
 = 
AFLAG
 | 
DFLAG
;

1888 i‡(
	`°∫cmp
 (
p
, "i8086", 5) == 0)

1890 
mode_64bô
 = 0;

1891 
¥iv
.
‹ig_sizeÊag
 = 0;

1893 i‡(
	`°∫cmp
 (
p
, "intel", 5) == 0)

1895 
öãl_sy¡ax
 = 1;

1897 i‡(
	`°∫cmp
 (
p
, "att", 3) == 0)

1899 
öãl_sy¡ax
 = 0;

1901 i‡(
	`°∫cmp
 (
p
, "addr", 4) == 0)

1903 i‡(
p
[4] == '1' &&Ö[5] == '6')

1904 
¥iv
.
‹ig_sizeÊag
 &~
AFLAG
;

1905 i‡(
p
[4] == '3' &&Ö[5] == '2')

1906 
¥iv
.
‹ig_sizeÊag
 |
AFLAG
;

1908 i‡(
	`°∫cmp
 (
p
, "data", 4) == 0)

1910 i‡(
p
[4] == '1' &&Ö[5] == '6')

1911 
¥iv
.
‹ig_sizeÊag
 &~
DFLAG
;

1912 i‡(
p
[4] == '3' &&Ö[5] == '2')

1913 
¥iv
.
‹ig_sizeÊag
 |
DFLAG
;

1915 i‡(
	`°∫cmp
 (
p
, "suffix", 6) == 0)

1916 
¥iv
.
‹ig_sizeÊag
 |
SUFFIX_ALWAYS
;

1918 
p
 = 
	`°rchr
 (p, ',');

1919 i‡(
p
 !
NULL
)

1920 
p
++;

1923 i‡(
öãl_sy¡ax
)

1925 
«mes64
 = 
öãl_«mes64
;

1926 
«mes32
 = 
öãl_«mes32
;

1927 
«mes16
 = 
öãl_«mes16
;

1928 
«mes8
 = 
öãl_«mes8
;

1929 
«mes8ªx
 = 
öãl_«mes8ªx
;

1930 
«mes_£g
 = 
öãl_«mes_£g
;

1931 
ödex16
 = 
öãl_ödex16
;

1932 
›í_ch¨
 = '[';

1933 
˛o£_ch¨
 = ']';

1934 
£∑øt‹_ch¨
 = '+';

1935 
sˇÀ_ch¨
 = '*';

1939 
«mes64
 = 
©t_«mes64
;

1940 
«mes32
 = 
©t_«mes32
;

1941 
«mes16
 = 
©t_«mes16
;

1942 
«mes8
 = 
©t_«mes8
;

1943 
«mes8ªx
 = 
©t_«mes8ªx
;

1944 
«mes_£g
 = 
©t_«mes_£g
;

1945 
ödex16
 = 
©t_ödex16
;

1946 
›í_ch¨
 = '(';

1947 
˛o£_ch¨
 = ')';

1948 
£∑øt‹_ch¨
 = ',';

1949 
sˇÀ_ch¨
 = ',';

1954 
öfo
->
byãs_≥r_löe
 = 7;

1956 
öfo
->
¥iv©e_d©a
 = (
PTR
Ë&
¥iv
;

1957 
¥iv
.
max_„tched
 =Öriv.
the_buf„r
;

1958 
¥iv
.
ö¢_°¨t
 = 
pc
;

1960 
obuf
[0] = 0;

1961 
›1out
[0] = 0;

1962 
›2out
[0] = 0;

1963 
›3out
[0] = 0;

1965 
›_ödex
[0] = op_index[1] = op_index[2] = -1;

1967 
the_öfo
 = 
öfo
;

1969 
°¨t_pc
 = 
pc
;

1970 
°¨t_codï
 = 
¥iv
.
the_buf„r
;

1971 
codï
 = 
¥iv
.
the_buf„r
;

1976 c⁄° *
«me
;

1981 i‡(
codï
 > 
¥iv
.
the_buf„r
)

1983 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

1984 i‡(
«me
 !
NULL
)

2001 
obuÂ
 = 
obuf
;

2002 
	`ck¥efix
 ();

2004 
ö¢_codï
 = 
codï
;

2005 
sizeÊag
 = 
¥iv
.
‹ig_sizeÊag
;

2007 
	`FETCH_DATA
 (
öfo
, 
codï
 + 1);

2009 
two_sour˚_›s
 = (*
codï
 == 0x62) || (*codep == 0xc8);

2011 i‡((
¥efixes
 & 
PREFIX_FWAIT
)

2012 && ((*
codï
 < 0xd8) || (*codep > 0xdf)))

2014 c⁄° *
«me
;

2018 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

2019 i‡(
«me
 =
NULL
)

2020 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2023 
	`˝rötf
("%s",
«me
);

2027 i‡(*
codï
 == 0x0f)

2029 
	`FETCH_DATA
 (
öfo
, 
codï
 + 2);

2030 
dp
 = &
dis386_twobyã
[*++
codï
];

2031 
√ed_modrm
 = 
twobyã_has_modrm
[*
codï
];

2032 
u£s_SSE_¥efix
 = 
twobyã_u£s_SSE_¥efix
[*
codï
];

2037 
dp
 = &
dis386
[*
codï
];

2038 
√ed_modrm
 = 
⁄ebyã_has_modrm
[*
codï
];

2039 
u£s_SSE_¥efix
 = 0;

2042 
codï
++;

2044 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_REPZ
))

2046 
	`ﬂµíd
 ("repz ");

2047 
u£d_¥efixes
 |
PREFIX_REPZ
;

2049 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_REPNZ
))

2051 
	`ﬂµíd
 ("repnz ");

2052 
u£d_¥efixes
 |
PREFIX_REPNZ
;

2054 i‡(
¥efixes
 & 
PREFIX_LOCK
)

2056 
	`ﬂµíd
 ("lock ");

2057 
u£d_¥efixes
 |
PREFIX_LOCK
;

2060 i‡(
¥efixes
 & 
PREFIX_ADDR
)

2062 
sizeÊag
 ^
AFLAG
;

2063 i‡(
dp
->
byãmode3
 !
lo›_jcxz_mode
 || 
öãl_sy¡ax
)

2065 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

2066 
	`ﬂµíd
 ("addr32 ");

2068 
	`ﬂµíd
 ("addr16 ");

2069 
u£d_¥efixes
 |
PREFIX_ADDR
;

2073 i‡(!
u£s_SSE_¥efix
 && (
¥efixes
 & 
PREFIX_DATA
))

2075 
sizeÊag
 ^
DFLAG
;

2076 i‡(
dp
->
byãmode3
 =
c⁄d_jump_mode


2077 && 
dp
->
byãmode1
 =
v_mode


2078 && !
öãl_sy¡ax
)

2080 i‡(
sizeÊag
 & 
DFLAG
)

2081 
	`ﬂµíd
 ("data32 ");

2083 
	`ﬂµíd
 ("data16 ");

2084 
u£d_¥efixes
 |
PREFIX_DATA
;

2088 i‡(
√ed_modrm
)

2090 
	`FETCH_DATA
 (
öfo
, 
codï
 + 1);

2091 
mod
 = (*
codï
 >> 6) & 3;

2092 
ªg
 = (*
codï
 >> 3) & 7;

2093 
rm
 = *
codï
 & 7;

2097 i‡(
dp
->
«me
 =
NULL
 && dp->
byãmode1
 =
FLOATCODE
)

2099 
	`doÊﬂt
 (
sizeÊag
);

2103 
ödex
;

2104 i‡(
dp
->
«me
 =
NULL
)

2106 
dp
->
byãmode1
)

2108 
USE_GROUPS
:

2109 
dp
 = &
gΩs
[dp->
byãmode2
][
ªg
];

2112 
USE_PREFIX_USER_TABLE
:

2113 
ödex
 = 0;

2114 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

2115 i‡(
¥efixes
 & 
PREFIX_REPZ
)

2116 
ödex
 = 1;

2119 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2120 i‡(
¥efixes
 & 
PREFIX_DATA
)

2121 
ödex
 = 2;

2124 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPNZ
);

2125 i‡(
¥efixes
 & 
PREFIX_REPNZ
)

2126 
ödex
 = 3;

2129 
dp
 = &
¥efix_u£r_èbÀ
[dp->
byãmode2
][
ödex
];

2132 
X86_64_SPECIAL
:

2133 
dp
 = &
x86_64_èbÀ
[dp->
byãmode2
][
mode_64bô
];

2137 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

2142 i‡(
	`put›
 (
dp
->
«me
, 
sizeÊag
) == 0)

2144 
obuÂ
 = 
›1out
;

2145 
›_ad
 = 2;

2146 i‡(
dp
->
›1
)

2147 (*
dp
->
›1
Ë(dp->
byãmode1
, 
sizeÊag
);

2151 
obuÂ
 = 
›2out
;

2152 
›_ad
 = 1;

2153 i‡(
dp
->
›2
)

2154 (*
dp
->
›2
Ë(dp->
byãmode2
, 
sizeÊag
);

2156 
obuÂ
 = 
›3out
;

2157 
›_ad
 = 0;

2158 i‡(
dp
->
›3
)

2159 (*
dp
->
›3
Ë(dp->
byãmode3
, 
sizeÊag
);

2167 i‡((
¥efixes
 & ~
u£d_¥efixes
) != 0)

2169 c⁄° *
«me
;

2171 
«me
 = 
	`¥efix_«me
 (
¥iv
.
the_buf„r
[0],Öriv.
‹ig_sizeÊag
);

2172 i‡(
«me
 =
NULL
)

2173 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2176 
	`˝rötf
("%s",
«me
);

2179 i‡(
ªx
 & ~
ªx_u£d
)

2181 c⁄° *
«me
;

2182 
«me
 = 
	`¥efix_«me
 (
ªx
 | 0x40, 
¥iv
.
‹ig_sizeÊag
);

2183 i‡(
«me
 =
NULL
)

2184 
«me
 = 
INTERNAL_DISASSEMBLER_ERROR
;

2187 
	`˝rötf
("%s",
«me
);

2190 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

2191 
i
 = 
	`°æí
 (
obuf
); i < 6; i++)

2192 
	`ﬂµíd
 (" ");

2193 
	`ﬂµíd
 (" ");

2197 
	`˝rötf
("%s",
obuf
);

2201 i‡(
öãl_sy¡ax
 || 
two_sour˚_›s
)

2203 
fú°
 = 
›1out
;

2204 
£c⁄d
 = 
›2out
;

2205 
thúd
 = 
›3out
;

2206 
›_ad
 = 
›_ödex
[0];

2207 
›_ödex
[0] = op_index[2];

2208 
›_ödex
[2] = 
›_ad
;

2212 
fú°
 = 
›3out
;

2213 
£c⁄d
 = 
›2out
;

2214 
thúd
 = 
›1out
;

2216 
√edcomma
 = 0;

2217 i‡(*
fú°
)

2219 i‡(
›_ödex
[0] !-1 && !
›_rùªl
[0])

2220 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[0]], info);

2225 
	`˝rötf
("%s",
fú°
);

2227 
√edcomma
 = 1;

2229 i‡(*
£c⁄d
)

2231 i‡(
√edcomma
)

2235 
	`˝rötf
("%c",',');

2238 i‡(
›_ödex
[1] !-1 && !
›_rùªl
[1])

2239 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[1]], info);

2244 
	`˝rötf
("%s",
£c⁄d
);

2247 
√edcomma
 = 1;

2249 i‡(*
thúd
)

2251 i‡(
√edcomma
)

2255 
	`˝rötf
("%c",',');

2258 i‡(
›_ödex
[2] !-1 && !
›_rùªl
[2])

2259 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë
›_addªss
[
›_ödex
[2]], info);

2264 
	`˝rötf
("%s",
thúd
);

2268 
i
 = 0; i < 3; i++)

2269 i‡(
›_ödex
[
i
] !-1 && 
›_rùªl
[i])

2273 
	`˝rötf
("%s"," #");

2274 (*
öfo
->
¥öt_addªss_func
Ë((
bfd_vma
Ë(
°¨t_pc
 + 
codï
 - 
°¨t_codï


2275 + 
›_addªss
[
›_ödex
[
i
]]), 
öfo
);

2277  
codï
 - 
¥iv
.
the_buf„r
;

2278 
	}
}

2280 c⁄° *
	gÊﬂt_mem
[] = {

2355 
	#ST
 
OP_ST
, 0

	)

2356 
	#STi
 
OP_STi
, 0

	)

2358 
	#FGRPd9_2
 
NULL
, NULL, 0, NULL, 0, NULL, 0

	)

2359 
	#FGRPd9_4
 
NULL
, NULL, 1, NULL, 0, NULL, 0

	)

2360 
	#FGRPd9_5
 
NULL
, NULL, 2, NULL, 0, NULL, 0

	)

2361 
	#FGRPd9_6
 
NULL
, NULL, 3, NULL, 0, NULL, 0

	)

2362 
	#FGRPd9_7
 
NULL
, NULL, 4, NULL, 0, NULL, 0

	)

2363 
	#FGRPda_5
 
NULL
, NULL, 5, NULL, 0, NULL, 0

	)

2364 
	#FGRPdb_4
 
NULL
, NULL, 6, NULL, 0, NULL, 0

	)

2365 
	#FGRPde_3
 
NULL
, NULL, 7, NULL, 0, NULL, 0

	)

2366 
	#FGRPdf_4
 
NULL
, NULL, 8, NULL, 0, NULL, 0

	)

2368 c⁄° 
dis386
 
	gÊﬂt_ªg
[][8] = {

2371 { "Ádd", 
ST
, 
STi
, 
XX
 },

2372 { "fmul", 
ST
, 
STi
, 
XX
 },

2373 { "fcom", 
STi
, 
XX
, XX },

2374 { "fcomp", 
STi
, 
XX
, XX },

2375 { "fsub", 
ST
, 
STi
, 
XX
 },

2376 { "fsubr", 
ST
, 
STi
, 
XX
 },

2377 { "fdiv", 
ST
, 
STi
, 
XX
 },

2378 { "fdivr", 
ST
, 
STi
, 
XX
 },

2382 { "Êd", 
STi
, 
XX
, XX },

2383 { "fxch", 
STi
, 
XX
, XX },

2384 { 
FGRPd9_2
 },

2385 { "(bad)", 
XX
, XX, XX },

2386 { 
FGRPd9_4
 },

2387 { 
FGRPd9_5
 },

2388 { 
FGRPd9_6
 },

2389 { 
FGRPd9_7
 },

2393 { "fcmovb", 
ST
, 
STi
, 
XX
 },

2394 { "fcmove", 
ST
, 
STi
, 
XX
 },

2395 { "fcmovbe",
ST
, 
STi
, 
XX
 },

2396 { "fcmovu", 
ST
, 
STi
, 
XX
 },

2397 { "(bad)", 
XX
, XX, XX },

2398 { 
FGRPda_5
 },

2399 { "(bad)", 
XX
, XX, XX },

2400 { "(bad)", 
XX
, XX, XX },

2404 { "fcmovnb",
ST
, 
STi
, 
XX
 },

2405 { "fcmov√",
ST
, 
STi
, 
XX
 },

2406 { "fcmovnbe",
ST
, 
STi
, 
XX
 },

2407 { "fcmovnu",
ST
, 
STi
, 
XX
 },

2408 { 
FGRPdb_4
 },

2409 { "fucomi", 
ST
, 
STi
, 
XX
 },

2410 { "fcomi", 
ST
, 
STi
, 
XX
 },

2411 { "(bad)", 
XX
, XX, XX },

2415 { "Ádd", 
STi
, 
ST
, 
XX
 },

2416 { "fmul", 
STi
, 
ST
, 
XX
 },

2417 { "(bad)", 
XX
, XX, XX },

2418 { "(bad)", 
XX
, XX, XX },

2419 #i‡
UNIXWARE_COMPAT


2420 { "fsub", 
STi
, 
ST
, 
XX
 },

2421 { "fsubr", 
STi
, 
ST
, 
XX
 },

2422 { "fdiv", 
STi
, 
ST
, 
XX
 },

2423 { "fdivr", 
STi
, 
ST
, 
XX
 },

2425 { "fsubr", 
STi
, 
ST
, 
XX
 },

2426 { "fsub", 
STi
, 
ST
, 
XX
 },

2427 { "fdivr", 
STi
, 
ST
, 
XX
 },

2428 { "fdiv", 
STi
, 
ST
, 
XX
 },

2433 { "f‰ì", 
STi
, 
XX
, XX },

2434 { "(bad)", 
XX
, XX, XX },

2435 { "f°", 
STi
, 
XX
, XX },

2436 { "f°p", 
STi
, 
XX
, XX },

2437 { "fucom", 
STi
, 
XX
, XX },

2438 { "fucomp", 
STi
, 
XX
, XX },

2439 { "(bad)", 
XX
, XX, XX },

2440 { "(bad)", 
XX
, XX, XX },

2444 { "Áddp", 
STi
, 
ST
, 
XX
 },

2445 { "fmuÕ", 
STi
, 
ST
, 
XX
 },

2446 { "(bad)", 
XX
, XX, XX },

2447 { 
FGRPde_3
 },

2448 #i‡
UNIXWARE_COMPAT


2449 { "fsubp", 
STi
, 
ST
, 
XX
 },

2450 { "fsubΩ", 
STi
, 
ST
, 
XX
 },

2451 { "fdivp", 
STi
, 
ST
, 
XX
 },

2452 { "fdivΩ", 
STi
, 
ST
, 
XX
 },

2454 { "fsubΩ", 
STi
, 
ST
, 
XX
 },

2455 { "fsubp", 
STi
, 
ST
, 
XX
 },

2456 { "fdivΩ", 
STi
, 
ST
, 
XX
 },

2457 { "fdivp", 
STi
, 
ST
, 
XX
 },

2462 { "f‰ìp", 
STi
, 
XX
, XX },

2463 { "(bad)", 
XX
, XX, XX },

2464 { "(bad)", 
XX
, XX, XX },

2465 { "(bad)", 
XX
, XX, XX },

2466 { 
FGRPdf_4
 },

2467 { "fucomù",
ST
, 
STi
, 
XX
 },

2468 { "fcomù", 
ST
, 
STi
, 
XX
 },

2469 { "(bad)", 
XX
, XX, XX },

2473 c⁄° *
	gfgΩs
[][8] = {

2522 
	$doÊﬂt
 (
sizeÊag
)

2523 
sizeÊag
;

2525 c⁄° 
dis386
 *
dp
;

2526 
Êﬂt›
;

2528 
Êﬂt›
 = 
codï
[-1];

2530 i‡(
mod
 != 3)

2532 
	`put›
 (
Êﬂt_mem
[(
Êﬂt›
 - 0xd8Ë* 8 + 
ªg
], 
sizeÊag
);

2533 
obuÂ
 = 
›1out
;

2534 i‡(
Êﬂt›
 == 0xdb)

2535 
	`OP_E
 (
x_mode
, 
sizeÊag
);

2536 i‡(
Êﬂt›
 == 0xdd)

2537 
	`OP_E
 (
d_mode
, 
sizeÊag
);

2539 
	`OP_E
 (
v_mode
, 
sizeÊag
);

2543 
MODRM_CHECK
;

2544 
codï
++;

2545 
dp
 = &
Êﬂt_ªg
[
Êﬂt›
 - 0xd8][
ªg
];

2546 i‡(
dp
->
«me
 =
NULL
)

2548 
	`put›
 (
fgΩs
[
dp
->
byãmode1
][
rm
], 
sizeÊag
);

2551 i‡(
Êﬂt›
 =0xd‡&& 
codï
[-1] == 0xe0)

2553 
	`p°r˝y
 (
›1out
, (›1out), 
«mes16
[0]);

2559 
	`put›
 (
dp
->
«me
, 
sizeÊag
);

2561 
obuÂ
 = 
›1out
;

2562 i‡(
dp
->
›1
)

2563 (*
dp
->
›1
Ë(dp->
byãmode1
, 
sizeÊag
);

2564 
obuÂ
 = 
›2out
;

2565 i‡(
dp
->
›2
)

2566 (*
dp
->
›2
Ë(dp->
byãmode2
, 
sizeÊag
);

2568 
	}
}

2571 
	$OP_ST
 (
byãmode
, 
sizeÊag
)

2572 
byãmode
;

2573 
sizeÊag
;

2575 
	`ﬂµíd
 ("%st");

2576 
	}
}

2579 
	$OP_STi
 (
byãmode
, 
sizeÊag
)

2580 
byãmode
;

2581 
sizeÊag
;

2583 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%°(%d)", 
rm
);

2584 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

2585 
	}
}

2589 
	$put›
 (
ãm∂©e
, 
sizeÊag
)

2590 c⁄° *
ãm∂©e
;

2591 
sizeÊag
;

2593 c⁄° *
p
;

2594 
Æt
;

2596 
p
 = 
ãm∂©e
; *p;Ö++)

2598 *
p
)

2601 *
obuÂ
++ = *
p
;

2604 
Æt
 = 0;

2605 i‡(
öãl_sy¡ax
)

2606 
Æt
 += 1;

2607 i‡(
mode_64bô
)

2608 
Æt
 += 2;

2609 
Æt
 != 0)

2611 *++
p
 != '|')

2613 i‡(*
p
 == '}')

2619 
obuÂ
 = 
obuf
 + 5;

2622 i‡(*
p
 == '\0')

2624 
	`∑nic
("putop:erron occured");

2626 
Æt
--;

2630 *++
p
 != '}')

2632 i‡(*
p
 == '\0')

2634 
	`∑nic
("putop:erron occured");

2640 i‡(
öãl_sy¡ax
)

2642 i‡(
mod
 !3 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2643 *
obuÂ
++ = 'b';

2646 i‡(
öãl_sy¡ax
)

2648 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2649 *
obuÂ
++ = 'b';

2652 i‡(
mode_64bô
)

2654 i‡(
sizeÊag
 & 
AFLAG
)

2655 *
obuÂ
++ = 'r';

2657 *
obuÂ
++ = 'e';

2660 i‡(
sizeÊag
 & 
AFLAG
)

2661 *
obuÂ
++ = 'e';

2662 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_ADDR
);

2665 i‡(
öãl_sy¡ax
)

2667 i‡((
¥efixes
 & 
PREFIX_ADDR
Ë|| (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2669 i‡(
sizeÊag
 & 
AFLAG
)

2670 *
obuÂ
++ = 
mode_64bô
 ? 'q' : 'l';

2672 *
obuÂ
++ = 
mode_64bô
 ? 'l' : 'w';

2673 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_ADDR
);

2677 i‡(
öãl_sy¡ax
)

2679 i‡((
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
)) == PREFIX_CS

2680 || (
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
)) == PREFIX_DS)

2682 
u£d_¥efixes
 |
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_DS
);

2683 *
obuÂ
++ = ',';

2684 *
obuÂ
++ = 'p';

2685 i‡(
¥efixes
 & 
PREFIX_DS
)

2686 *
obuÂ
++ = 't';

2688 *
obuÂ
++ = 'n';

2692 i‡(
öãl_sy¡ax
)

2694 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2695 *
obuÂ
++ = 'l';

2698 i‡((
¥efixes
 & 
PREFIX_FWAIT
) == 0)

2699 *
obuÂ
++ = 'n';

2701 
u£d_¥efixes
 |
PREFIX_FWAIT
;

2704 
	`USED_REX
 (
REX_MODE64
);

2705 i‡(
ªx
 & 
REX_MODE64
)

2706 *
obuÂ
++ = 'o';

2708 *
obuÂ
++ = 'd';

2711 i‡(
öãl_sy¡ax
)

2713 i‡(
mode_64bô
)

2715 *
obuÂ
++ = 'q';

2720 i‡(
öãl_sy¡ax
)

2722 i‡((
¥efixes
 & 
PREFIX_DATA
)

2723 || (
ªx
 & 
REX_MODE64
)

2724 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2726 
	`USED_REX
 (
REX_MODE64
);

2727 i‡(
ªx
 & 
REX_MODE64
)

2728 *
obuÂ
++ = 'q';

2731 i‡(
sizeÊag
 & 
DFLAG
)

2732 *
obuÂ
++ = 'l';

2734 *
obuÂ
++ = 'w';

2735 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2740 i‡(
öãl_sy¡ax
)

2742 i‡(
mode_64bô
)

2744 *
obuÂ
++ = 'q';

2749 i‡(
öãl_sy¡ax
)

2751 
	`USED_REX
 (
REX_MODE64
);

2752 i‡(
mod
 !3 || (
sizeÊag
 & 
SUFFIX_ALWAYS
))

2754 i‡(
ªx
 & 
REX_MODE64
)

2755 *
obuÂ
++ = 'q';

2758 i‡(
sizeÊag
 & 
DFLAG
)

2759 *
obuÂ
++ = 'l';

2761 *
obuÂ
++ = 'w';

2762 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2767 
	`USED_REX
 (
REX_MODE64
);

2768 i‡(
öãl_sy¡ax
)

2770 i‡(
ªx
 & 
REX_MODE64
)

2772 *
obuÂ
++ = 'q';

2773 *
obuÂ
++ = 't';

2775 i‡(
sizeÊag
 & 
DFLAG
)

2777 *
obuÂ
++ = 'd';

2778 *
obuÂ
++ = 'q';

2782 *
obuÂ
++ = 'w';

2783 *
obuÂ
++ = 'd';

2788 i‡(
ªx
 & 
REX_MODE64
)

2789 *
obuÂ
++ = 'q';

2790 i‡(
sizeÊag
 & 
DFLAG
)

2791 *
obuÂ
++ = 'l';

2793 *
obuÂ
++ = 'w';

2795 i‡(!(
ªx
 & 
REX_MODE64
))

2796 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2799 i‡(
öãl_sy¡ax
)

2801 i‡(
sizeÊag
 & 
SUFFIX_ALWAYS
)

2803 i‡(
ªx
 & 
REX_MODE64
)

2804 *
obuÂ
++ = 'q';

2807 i‡(
sizeÊag
 & 
DFLAG
)

2808 *
obuÂ
++ = 'l';

2810 *
obuÂ
++ = 'w';

2811 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2816 i‡(
¥efixes
 & 
PREFIX_DATA
)

2817 *
obuÂ
++ = 'd';

2819 *
obuÂ
++ = 's';

2820 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2823 i‡(
öãl_sy¡ax
)

2825 i‡(
ªx
 & 
REX_MODE64
)

2827 
	`USED_REX
 (
REX_MODE64
);

2828 *
obuÂ
++ = 'q';

2834 
	`USED_REX
 (0);

2835 i‡(
ªx
)

2836 *
obuÂ
++ = 'l';

2837 i‡(
sizeÊag
 & 
DFLAG
)

2838 *
obuÂ
++ = 'w';

2840 *
obuÂ
++ = 'b';

2841 i‡(
öãl_sy¡ax
)

2843 i‡(
ªx
)

2845 *
obuÂ
++ = 'q';

2846 *
obuÂ
++ = 'e';

2848 i‡(
sizeÊag
 & 
DFLAG
)

2850 *
obuÂ
++ = 'd';

2851 *
obuÂ
++ = 'e';

2855 *
obuÂ
++ = 'w';

2858 i‡(!
ªx
)

2859 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

2863 *
obuÂ
 = 0;

2865 
	}
}

2868 
	$ﬂµíd
 (
s
)

2869 c⁄° *
s
;

2871 
	`°r˝y
 (
obuÂ
, 
s
);

2872 
obuÂ
 +
	`°æí
 (
s
);

2873 
	}
}

2876 
	$≠≥nd_£g
 ()

2878 i‡(
¥efixes
 & 
PREFIX_CS
)

2880 
u£d_¥efixes
 |
PREFIX_CS
;

2881 
	`ﬂµíd
 ("%cs:" + 
öãl_sy¡ax
);

2883 i‡(
¥efixes
 & 
PREFIX_DS
)

2885 
u£d_¥efixes
 |
PREFIX_DS
;

2886 
	`ﬂµíd
 ("%ds:" + 
öãl_sy¡ax
);

2888 i‡(
¥efixes
 & 
PREFIX_SS
)

2890 
u£d_¥efixes
 |
PREFIX_SS
;

2891 
	`ﬂµíd
 ("%ss:" + 
öãl_sy¡ax
);

2893 i‡(
¥efixes
 & 
PREFIX_ES
)

2895 
u£d_¥efixes
 |
PREFIX_ES
;

2896 
	`ﬂµíd
 ("%es:" + 
öãl_sy¡ax
);

2898 i‡(
¥efixes
 & 
PREFIX_FS
)

2900 
u£d_¥efixes
 |
PREFIX_FS
;

2901 
	`ﬂµíd
 ("%fs:" + 
öãl_sy¡ax
);

2903 i‡(
¥efixes
 & 
PREFIX_GS
)

2905 
u£d_¥efixes
 |
PREFIX_GS
;

2906 
	`ﬂµíd
 ("%gs:" + 
öãl_sy¡ax
);

2908 
	}
}

2911 
	$OP_ödúE
 (
byãmode
, 
sizeÊag
)

2912 
byãmode
;

2913 
sizeÊag
;

2915 i‡(!
öãl_sy¡ax
)

2916 
	`ﬂµíd
 ("*");

2917 
	`OP_E
 (
byãmode
, 
sizeÊag
);

2918 
	}
}

2921 
	$¥öt_›î™d_vÆue
 (*
buf
, 
size_t
 
bufsize
, 
hex
, 
bfd_vma
 
di•
)

2923 i‡(
mode_64bô
)

2925 i‡(
hex
)

2927 
tmp
[30];

2928 
i
;

2929 
buf
[0] = '0';

2930 
buf
[1] = 'x';

2931 
	`¢¥ötf_vma
 (
tmp
, —mp), 
di•
);

2933 
i
 = 0; 
tmp
[i] == '0' &&Åmp[i + 1]; i++);

2934 
	`p°r˝y
 (
buf
 + 2, 
bufsize
 - 2, 
tmp
 + 
i
);

2939 
bfd_sig√d_vma
 
v
 = 
di•
;

2940 
tmp
[30];

2941 
i
;

2942 i‡(
v
 < 0)

2944 *(
buf
++) = '-';

2945 
v
 = -
di•
;

2947 i‡(
v
 < 0)

2949 
	`p°r˝y
 (
buf
, 
bufsize
, "9223372036854775808");

2954 i‡(!
v
)

2956 
	`p°r˝y
 (
buf
, 
bufsize
, "0");

2961 
i
 = 0;

2962 
tmp
[29] = 0;

2963 
v
)

2965 
tmp
[28 - 
i
] = (
v
 % 10) + '0';

2966 
v
 /= 10;

2967 
i
++;

2969 
	`p°r˝y
 (
buf
, 
bufsize
, 
tmp
 + 29 - 
i
);

2975 i‡(
hex
)

2976 
	`¢¥ötf
 (
buf
, 
bufsize
, "0x%x", (Ë
di•
);

2978 
	`¢¥ötf
 (
buf
, 
bufsize
, "%d", (Ë
di•
);

2980 
	}
}

2983 
	$OP_E
 (
byãmode
, 
sizeÊag
)

2984 
byãmode
;

2985 
sizeÊag
;

2987 
bfd_vma
 
di•
;

2988 
add
 = 0;

2989 
rùªl
 = 0;

2990 
	`USED_REX
 (
REX_EXTZ
);

2991 i‡(
ªx
 & 
REX_EXTZ
)

2992 
add
 += 8;

2995 
MODRM_CHECK
;

2996 
codï
++;

2998 i‡(
mod
 == 3)

3000 
byãmode
)

3002 
b_mode
:

3003 
	`USED_REX
 (0);

3004 i‡(
ªx
)

3005 
	`ﬂµíd
 (
«mes8ªx
[
rm
 + 
add
]);

3007 
	`ﬂµíd
 (
«mes8
[
rm
 + 
add
]);

3009 
w_mode
:

3010 
	`ﬂµíd
 (
«mes16
[
rm
 + 
add
]);

3012 
d_mode
:

3013 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3015 
q_mode
:

3016 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3018 
m_mode
:

3019 i‡(
mode_64bô
)

3020 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3022 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3024 
v_mode
:

3025 
	`USED_REX
 (
REX_MODE64
);

3026 i‡(
ªx
 & 
REX_MODE64
)

3027 
	`ﬂµíd
 (
«mes64
[
rm
 + 
add
]);

3028 i‡(
sizeÊag
 & 
DFLAG
)

3029 
	`ﬂµíd
 (
«mes32
[
rm
 + 
add
]);

3031 
	`ﬂµíd
 (
«mes16
[
rm
 + 
add
]);

3032 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3035 i‡(!(
codï
[-2] == 0xAE && codep[-1] == 0xF8 )

3036 && !(
codï
[-2] == 0xAE && codep[-1] == 0xF0 )

3037 && !(
codï
[-2] == 0xAE && codep[-1] == 0xe8 ))

3038 
	`BadOp
 ();

3041 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3047 
di•
 = 0;

3048 
	`≠≥nd_£g
 ();

3050 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

3052 
havesib
;

3053 
haveba£
;

3054 
ba£
;

3055 
ödex
 = 0;

3056 
sˇÀ
 = 0;

3058 
havesib
 = 0;

3059 
haveba£
 = 1;

3060 
ba£
 = 
rm
;

3063 i‡(
ba£
 == 4)

3065 
havesib
 = 1;

3066 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3067 
sˇÀ
 = (*
codï
 >> 6) & 3;

3068 
ödex
 = (*
codï
 >> 3) & 7;

3069 
ba£
 = *
codï
 & 7;

3070 
	`USED_REX
 (
REX_EXTY
);

3071 
	`USED_REX
 (
REX_EXTZ
);

3074 i‡(
ªx
 & 
REX_EXTY
)

3075 
ödex
 += 8;

3076 i‡(
ªx
 & 
REX_EXTZ
)

3077 
ba£
 += 8;

3079 
codï
++;

3083 
mod
)

3086 i‡((
ba£
 & 7) == 5)

3088 
haveba£
 = 0;

3089 i‡(
mode_64bô
 && !
havesib
 && (
sizeÊag
 & 
AFLAG
))

3090 
rùªl
 = 1;

3091 
di•
 = 
	`gë32s
 ();

3095 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3096 
di•
 = *
codï
++;

3097 i‡((
di•
 & 0x80) != 0)

3098 
di•
 -= 0x100;

3101 
di•
 = 
	`gë32s
 ();

3105 i‡(!
öãl_sy¡ax
)

3106 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3108 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), !
rùªl
, 
di•
);

3109 
	`ﬂµíd
 (
s¸©chbuf
);

3110 i‡(
rùªl
)

3112 
	`£t_›
 (
di•
, 1);

3113 
	`ﬂµíd
 ("(%rip)");

3117 i‡(
haveba£
 || (
havesib
 && (
ödex
 !4 || 
sˇÀ
 != 0)))

3119 i‡(
öãl_sy¡ax
)

3121 
byãmode
)

3123 
b_mode
:

3124 
	`ﬂµíd
 ("BYTE PTR ");

3126 
w_mode
:

3127 
	`ﬂµíd
 ("WORD PTR ");

3129 
v_mode
:

3130 
	`ﬂµíd
 ("DWORD PTR ");

3132 
d_mode
:

3133 
	`ﬂµíd
 ("QWORD PTR ");

3135 
m_mode
:

3136 i‡(
mode_64bô
)

3137 
	`ﬂµíd
 ("DWORD PTR ");

3139 
	`ﬂµíd
 ("QWORD PTR ");

3141 
x_mode
:

3142 
	`ﬂµíd
 ("XWORD PTR ");

3149 *
obuÂ
++ = 
›í_ch¨
;

3150 i‡(
öãl_sy¡ax
 && 
rùªl
)

3151 
	`ﬂµíd
 ("rip + ");

3152 *
obuÂ
 = '\0';

3153 
	`USED_REX
 (
REX_EXTZ
);

3154 i‡(!
havesib
 && (
ªx
 & 
REX_EXTZ
))

3155 
ba£
 += 8;

3156 i‡(
haveba£
)

3157 
	`ﬂµíd
 (
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3158 ? 
«mes64
[
ba£
] : 
«mes32
[base]);

3159 i‡(
havesib
)

3161 i‡(
ödex
 != 4)

3163 i‡(
öãl_sy¡ax
)

3165 i‡(
haveba£
)

3167 *
obuÂ
++ = 
£∑øt‹_ch¨
;

3168 *
obuÂ
 = '\0';

3170 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), "%s",

3171 
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3172 ? 
«mes64
[
ödex
] : 
«mes32
[index]);

3175 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), ",%s",

3176 
mode_64bô
 && (
sizeÊag
 & 
AFLAG
)

3177 ? 
«mes64
[
ödex
] : 
«mes32
[index]);

3178 
	`ﬂµíd
 (
s¸©chbuf
);

3180 i‡(!
öãl_sy¡ax


3181 || (
öãl_sy¡ax


3182 && 
byãmode
 !
b_mode


3183 && 
byãmode
 !
w_mode


3184 && 
byãmode
 !
v_mode
))

3186 if(
sˇÀ
){

3187 *
obuÂ
++ = 
sˇÀ_ch¨
;

3188 *
obuÂ
 = '\0';

3189 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%d", 1 << 
sˇÀ
);

3190 
	`ﬂµíd
 (
s¸©chbuf
);

3196 i‡(
öãl_sy¡ax
)

3197 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3200 i‡(
di•
 != 0)

3202 i‡((
bfd_sig√d_vma
Ë
di•
 > 0)

3204 *
obuÂ
++ = '+';

3205 *
obuÂ
 = '\0';

3208 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (scratchbuf), 0,

3209 
di•
);

3210 
	`ﬂµíd
 (
s¸©chbuf
);

3214 *
obuÂ
++ = 
˛o£_ch¨
;

3215 *
obuÂ
 = '\0';

3217 i‡(
öãl_sy¡ax
)

3219 i‡(
mod
 !0 || (
ba£
 & 7) == 5)

3221 i‡(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3222 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
))

3226 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3227 
	`ﬂµíd
 (":");

3229 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
di•
);

3230 
	`ﬂµíd
 (
s¸©chbuf
);

3238 
mod
)

3241 i‡((
rm
 & 7) == 6)

3243 
di•
 = 
	`gë16
 ();

3244 i‡((
di•
 & 0x8000) != 0)

3245 
di•
 -= 0x10000;

3249 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3250 
di•
 = *
codï
++;

3251 i‡((
di•
 & 0x80) != 0)

3252 
di•
 -= 0x100;

3255 
di•
 = 
	`gë16
 ();

3256 i‡((
di•
 & 0x8000) != 0)

3257 
di•
 -= 0x10000;

3261 i‡(!
öãl_sy¡ax
)

3262 i‡(
mod
 !0 || (
rm
 & 7) == 6)

3264 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 0, 
di•
);

3265 
	`ﬂµíd
 (
s¸©chbuf
);

3268 i‡(
mod
 !0 || (
rm
 & 7) != 6)

3270 *
obuÂ
++ = 
›í_ch¨
;

3271 *
obuÂ
 = '\0';

3272 
	`ﬂµíd
 (
ödex16
[
rm
 + 
add
]);

3273 *
obuÂ
++ = 
˛o£_ch¨
;

3274 *
obuÂ
 = '\0';

3280 
	}
}

3283 
	$OP_G
 (
byãmode
, 
sizeÊag
)

3284 
byãmode
;

3285 
sizeÊag
;

3287 
add
 = 0;

3288 
	`USED_REX
 (
REX_EXTX
);

3289 i‡(
ªx
 & 
REX_EXTX
)

3290 
add
 += 8;

3291 
byãmode
)

3293 
b_mode
:

3294 
	`USED_REX
 (0);

3295 i‡(
ªx
)

3296 
	`ﬂµíd
 (
«mes8ªx
[
ªg
 + 
add
]);

3298 
	`ﬂµíd
 (
«mes8
[
ªg
 + 
add
]);

3300 
w_mode
:

3301 
	`ﬂµíd
 (
«mes16
[
ªg
 + 
add
]);

3303 
d_mode
:

3304 
	`ﬂµíd
 (
«mes32
[
ªg
 + 
add
]);

3306 
q_mode
:

3307 
	`ﬂµíd
 (
«mes64
[
ªg
 + 
add
]);

3309 
v_mode
:

3310 
	`USED_REX
 (
REX_MODE64
);

3311 i‡(
ªx
 & 
REX_MODE64
)

3312 
	`ﬂµíd
 (
«mes64
[
ªg
 + 
add
]);

3313 i‡(
sizeÊag
 & 
DFLAG
)

3314 
	`ﬂµíd
 (
«mes32
[
ªg
 + 
add
]);

3316 
	`ﬂµíd
 (
«mes16
[
ªg
 + 
add
]);

3317 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3320 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3323 
	}
}

3325 
bfd_vma


3326 
	$gë64
 ()

3328 
bfd_vma
 
x
;

3329 #ifde‡
BFD64


3330 
a
;

3331 
b
;

3333 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 8);

3334 
a
 = *
codï
++ & 0xff;

3335 
a
 |(*
codï
++ & 0xff) << 8;

3336 
a
 |(*
codï
++ & 0xff) << 16;

3337 
a
 |(*
codï
++ & 0xff) << 24;

3338 
b
 = *
codï
++ & 0xff;

3339 
b
 |(*
codï
++ & 0xff) << 8;

3340 
b
 |(*
codï
++ & 0xff) << 16;

3341 
b
 |(*
codï
++ & 0xff) << 24;

3342 
x
 = 
a
 + ((
bfd_vma
Ë
b
 << 32);

3344 
	`ab‹t
 ();

3345 
	`∑nic
("get64:erron occured");

3346 
x
 = 0;

3348  
x
;

3349 
	}
}

3351 
bfd_sig√d_vma


3352 
	$gë32
 ()

3354 
bfd_sig√d_vma
 
x
 = 0;

3356 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 4);

3357 
x
 = *
codï
++ & (
bfd_sig√d_vma
) 0xff;

3358 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 8;

3359 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 16;

3360 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 24;

3361  
x
;

3362 
	}
}

3364 
bfd_sig√d_vma


3365 
	$gë32s
 ()

3367 
bfd_sig√d_vma
 
x
 = 0;

3369 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 4);

3370 
x
 = *
codï
++ & (
bfd_sig√d_vma
) 0xff;

3371 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 8;

3372 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 16;

3373 
x
 |(*
codï
++ & (
bfd_sig√d_vma
) 0xff) << 24;

3375 
x
 = (x ^ ((
bfd_sig√d_vma
) 1 << 31)) - ((bfd_signed_vma) 1 << 31);

3377  
x
;

3378 
	}
}

3381 
	$gë16
 ()

3383 
x
 = 0;

3385 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 2);

3386 
x
 = *
codï
++ & 0xff;

3387 
x
 |(*
codï
++ & 0xff) << 8;

3388  
x
;

3389 
	}
}

3392 
	$£t_›
 (
›
, 
rùªl
)

3393 
bfd_vma
 
›
;

3394 
rùªl
;

3396 
›_ödex
[
›_ad
] = op_ad;

3397 i‡(
mode_64bô
)

3399 
›_addªss
[
›_ad
] = 
›
;

3400 
›_rùªl
[
›_ad
] = 
rùªl
;

3405 
›_addªss
[
›_ad
] = 
›
 & 0xffffffff;

3406 
›_rùªl
[
›_ad
] = 
rùªl
 & 0xffffffff;

3408 
	}
}

3411 
	$OP_REG
 (
code
, 
sizeÊag
)

3412 
code
;

3413 
sizeÊag
;

3415 c⁄° *
s
;

3416 
add
 = 0;

3417 
	`USED_REX
 (
REX_EXTZ
);

3418 i‡(
ªx
 & 
REX_EXTZ
)

3419 
add
 = 8;

3421 
code
)

3423 
ödú_dx_ªg
:

3424 i‡(
öãl_sy¡ax
)

3425 
s
 = "[dx]";

3427 
s
 = "(%dx)";

3429 
ax_ªg
: 
cx_ªg
: 
dx_ªg
: 
bx_ªg
:

3430 
•_ªg
: 
bp_ªg
: 
si_ªg
: 
di_ªg
:

3431 
s
 = 
«mes16
[
code
 - 
ax_ªg
 + 
add
];

3433 
es_ªg
: 
ss_ªg
: 
cs_ªg
:

3434 
ds_ªg
: 
fs_ªg
: 
gs_ªg
:

3435 
s
 = 
«mes_£g
[
code
 - 
es_ªg
 + 
add
];

3437 
Æ_ªg
: 
ah_ªg
: 
˛_ªg
: 
ch_ªg
:

3438 
dl_ªg
: 
dh_ªg
: 
bl_ªg
: 
bh_ªg
:

3439 
	`USED_REX
 (0);

3440 i‡(
ªx
)

3441 
s
 = 
«mes8ªx
[
code
 - 
Æ_ªg
 + 
add
];

3443 
s
 = 
«mes8
[
code
 - 
Æ_ªg
];

3445 
rAX_ªg
: 
rCX_ªg
: 
rDX_ªg
: 
rBX_ªg
:

3446 
rSP_ªg
: 
rBP_ªg
: 
rSI_ªg
: 
rDI_ªg
:

3447 i‡(
mode_64bô
)

3449 
s
 = 
«mes64
[
code
 - 
rAX_ªg
 + 
add
];

3452 
code
 +
eAX_ªg
 - 
rAX_ªg
;

3454 
eAX_ªg
: 
eCX_ªg
: 
eDX_ªg
: 
eBX_ªg
:

3455 
eSP_ªg
: 
eBP_ªg
: 
eSI_ªg
: 
eDI_ªg
:

3456 
	`USED_REX
 (
REX_MODE64
);

3457 i‡(
ªx
 & 
REX_MODE64
)

3458 
s
 = 
«mes64
[
code
 - 
eAX_ªg
 + 
add
];

3459 i‡(
sizeÊag
 & 
DFLAG
)

3460 
s
 = 
«mes32
[
code
 - 
eAX_ªg
 + 
add
];

3462 
s
 = 
«mes16
[
code
 - 
eAX_ªg
 + 
add
];

3463 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3466 
s
 = 
INTERNAL_DISASSEMBLER_ERROR
;

3469 
	`ﬂµíd
 (
s
);

3470 
	}
}

3473 
	$OP_IMREG
 (
code
, 
sizeÊag
)

3474 
code
;

3475 
sizeÊag
;

3477 c⁄° *
s
;

3479 
code
)

3481 
ödú_dx_ªg
:

3482 i‡(
öãl_sy¡ax
)

3483 
s
 = "[dx]";

3485 
s
 = "(%dx)";

3487 
ax_ªg
: 
cx_ªg
: 
dx_ªg
: 
bx_ªg
:

3488 
•_ªg
: 
bp_ªg
: 
si_ªg
: 
di_ªg
:

3489 
s
 = 
«mes16
[
code
 - 
ax_ªg
];

3491 
es_ªg
: 
ss_ªg
: 
cs_ªg
:

3492 
ds_ªg
: 
fs_ªg
: 
gs_ªg
:

3493 
s
 = 
«mes_£g
[
code
 - 
es_ªg
];

3495 
Æ_ªg
: 
ah_ªg
: 
˛_ªg
: 
ch_ªg
:

3496 
dl_ªg
: 
dh_ªg
: 
bl_ªg
: 
bh_ªg
:

3497 
	`USED_REX
 (0);

3498 i‡(
ªx
)

3499 
s
 = 
«mes8ªx
[
code
 - 
Æ_ªg
];

3501 
s
 = 
«mes8
[
code
 - 
Æ_ªg
];

3503 
eAX_ªg
: 
eCX_ªg
: 
eDX_ªg
: 
eBX_ªg
:

3504 
eSP_ªg
: 
eBP_ªg
: 
eSI_ªg
: 
eDI_ªg
:

3505 
	`USED_REX
 (
REX_MODE64
);

3506 i‡(
ªx
 & 
REX_MODE64
)

3507 
s
 = 
«mes64
[
code
 - 
eAX_ªg
];

3508 i‡(
sizeÊag
 & 
DFLAG
)

3509 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3511 
s
 = 
«mes16
[
code
 - 
eAX_ªg
];

3512 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3515 
s
 = 
INTERNAL_DISASSEMBLER_ERROR
;

3518 
	`ﬂµíd
 (
s
);

3519 
	}
}

3522 
	$OP_I
 (
byãmode
, 
sizeÊag
)

3523 
byãmode
;

3524 
sizeÊag
;

3526 
bfd_sig√d_vma
 
›
;

3527 
bfd_sig√d_vma
 
mask
 = -1;

3529 
byãmode
)

3531 
b_mode
:

3532 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3533 
›
 = *
codï
++;

3534 
mask
 = 0xff;

3536 
q_mode
:

3537 i‡(
mode_64bô
)

3539 
›
 = 
	`gë32s
 ();

3543 
v_mode
:

3544 
	`USED_REX
 (
REX_MODE64
);

3545 i‡(
ªx
 & 
REX_MODE64
)

3546 
›
 = 
	`gë32s
 ();

3547 i‡(
sizeÊag
 & 
DFLAG
)

3549 
›
 = 
	`gë32
 ();

3550 
mask
 = 0xffffffff;

3554 
›
 = 
	`gë16
 ();

3555 
mask
 = 0xfffff;

3557 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3559 
w_mode
:

3560 
mask
 = 0xfffff;

3561 
›
 = 
	`gë16
 ();

3564 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3568 
›
 &
mask
;

3569 
s¸©chbuf
[0] = '$';

3570 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3571 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3572 
s¸©chbuf
[0] = '\0';

3573 
	}
}

3576 
	$OP_I64
 (
byãmode
, 
sizeÊag
)

3577 
byãmode
;

3578 
sizeÊag
;

3580 
bfd_sig√d_vma
 
›
;

3581 
bfd_sig√d_vma
 
mask
 = -1;

3583 i‡(!
mode_64bô
)

3585 
	`OP_I
 (
byãmode
, 
sizeÊag
);

3589 
byãmode
)

3591 
b_mode
:

3592 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3593 
›
 = *
codï
++;

3594 
mask
 = 0xff;

3596 
v_mode
:

3597 
	`USED_REX
 (
REX_MODE64
);

3598 i‡(
ªx
 & 
REX_MODE64
)

3599 
›
 = 
	`gë64
 ();

3600 i‡(
sizeÊag
 & 
DFLAG
)

3602 
›
 = 
	`gë32
 ();

3603 
mask
 = 0xffffffff;

3607 
›
 = 
	`gë16
 ();

3608 
mask
 = 0xfffff;

3610 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3612 
w_mode
:

3613 
mask
 = 0xfffff;

3614 
›
 = 
	`gë16
 ();

3617 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3621 
›
 &
mask
;

3622 
s¸©chbuf
[0] = '$';

3623 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3624 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3625 
s¸©chbuf
[0] = '\0';

3626 
	}
}

3629 
	$OP_sI
 (
byãmode
, 
sizeÊag
)

3630 
byãmode
;

3631 
sizeÊag
;

3633 
bfd_sig√d_vma
 
›
;

3634 
bfd_sig√d_vma
 
mask
 = -1;

3636 
byãmode
)

3638 
b_mode
:

3639 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3640 
›
 = *
codï
++;

3641 i‡((
›
 & 0x80) != 0)

3642 
›
 -= 0x100;

3643 
mask
 = 0xffffffff;

3645 
v_mode
:

3646 
	`USED_REX
 (
REX_MODE64
);

3647 i‡(
ªx
 & 
REX_MODE64
)

3648 
›
 = 
	`gë32s
 ();

3649 i‡(
sizeÊag
 & 
DFLAG
)

3651 
›
 = 
	`gë32s
 ();

3652 
mask
 = 0xffffffff;

3656 
mask
 = 0xffffffff;

3657 
›
 = 
	`gë16
 ();

3658 i‡((
›
 & 0x8000) != 0)

3659 
›
 -= 0x10000;

3661 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3663 
w_mode
:

3664 
›
 = 
	`gë16
 ();

3665 
mask
 = 0xffffffff;

3666 i‡((
›
 & 0x8000) != 0)

3667 
›
 -= 0x10000;

3670 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3674 
s¸©chbuf
[0] = '$';

3675 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
 + 1, (s¸©chbufË- 1, 1, 
›
);

3676 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3677 
	}
}

3680 
	$OP_J
 (
byãmode
, 
sizeÊag
)

3681 
byãmode
;

3682 
sizeÊag
;

3684 
bfd_vma
 
di•
;

3685 
bfd_vma
 
mask
 = -1;

3687 
byãmode
)

3689 
b_mode
:

3690 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

3691 
di•
 = *
codï
++;

3692 i‡((
di•
 & 0x80) != 0)

3693 
di•
 -= 0x100;

3695 
v_mode
:

3696 i‡(
sizeÊag
 & 
DFLAG
)

3697 
di•
 = 
	`gë32s
 ();

3700 
di•
 = 
	`gë16
 ();

3704 
mask
 = 0xffff;

3708 
	`ﬂµíd
 (
INTERNAL_DISASSEMBLER_ERROR
);

3711 
di•
 = (
°¨t_pc
 + 
codï
 - 
°¨t_codï
 + di•Ë& 
mask
;

3712 
	`£t_›
 (
di•
, 0);

3713 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
di•
);

3714 
	`ﬂµíd
 (
s¸©chbuf
);

3715 
	}
}

3718 
	$OP_SEG
 (
dummy
, 
sizeÊag
)

3719 
dummy
;

3720 
sizeÊag
;

3722 
	`ﬂµíd
 (
«mes_£g
[
ªg
]);

3723 
	}
}

3726 
	$OP_DIR
 (
dummy
, 
sizeÊag
)

3727 
dummy
;

3728 
sizeÊag
;

3730 
£g
, 
off£t
;

3732 i‡(
sizeÊag
 & 
DFLAG
)

3734 
off£t
 = 
	`gë32
 ();

3735 
£g
 = 
	`gë16
 ();

3739 
off£t
 = 
	`gë16
 ();

3740 
£g
 = 
	`gë16
 ();

3742 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3743 i‡(
öãl_sy¡ax
)

3744 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "0x%x,0x%x", 
£g
, 
off£t
);

3746 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "$0x%x,$0x%x", 
£g
, 
off£t
);

3747 
	`ﬂµíd
 (
s¸©chbuf
);

3748 
	}
}

3751 
	$OP_OFF
 (
byãmode
, 
sizeÊag
)

3752 
byãmode
;

3753 
sizeÊag
;

3755 
bfd_vma
 
off
;

3757 
	`≠≥nd_£g
 ();

3759 i‡((
sizeÊag
 & 
AFLAG
Ë|| 
mode_64bô
)

3760 
off
 = 
	`gë32
 ();

3762 
off
 = 
	`gë16
 ();

3764 i‡(
öãl_sy¡ax
)

3766 i‡(!(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3767 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
)))

3769 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3770 
	`ﬂµíd
 (":");

3773 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
off
);

3774 
	`ﬂµíd
 (
s¸©chbuf
);

3775 
	}
}

3778 
	$OP_OFF64
 (
byãmode
, 
sizeÊag
)

3779 
byãmode
;

3780 
sizeÊag
;

3782 
bfd_vma
 
off
;

3784 i‡(!
mode_64bô
)

3786 
	`OP_OFF
 (
byãmode
, 
sizeÊag
);

3790 
	`≠≥nd_£g
 ();

3792 
off
 = 
	`gë64
 ();

3794 i‡(
öãl_sy¡ax
)

3796 i‡(!(
¥efixes
 & (
PREFIX_CS
 | 
PREFIX_SS
 | 
PREFIX_DS


3797 | 
PREFIX_ES
 | 
PREFIX_FS
 | 
PREFIX_GS
)))

3799 
	`ﬂµíd
 (
«mes_£g
[
ds_ªg
 - 
es_ªg
]);

3800 
	`ﬂµíd
 (":");

3803 
	`¥öt_›î™d_vÆue
 (
s¸©chbuf
, (s¸©chbuf), 1, 
off
);

3804 
	`ﬂµíd
 (
s¸©chbuf
);

3805 
	}
}

3808 
	$±r_ªg
 (
code
, 
sizeÊag
)

3809 
code
;

3810 
sizeÊag
;

3812 c⁄° *
s
;

3813 i‡(
öãl_sy¡ax
)

3814 
	`ﬂµíd
 ("[");

3816 
	`ﬂµíd
 ("(");

3818 
	`USED_REX
 (
REX_MODE64
);

3819 i‡(
ªx
 & 
REX_MODE64
)

3821 i‡(!(
sizeÊag
 & 
AFLAG
))

3822 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3824 
s
 = 
«mes64
[
code
 - 
eAX_ªg
];

3826 i‡(
sizeÊag
 & 
AFLAG
)

3827 
s
 = 
«mes32
[
code
 - 
eAX_ªg
];

3829 
s
 = 
«mes16
[
code
 - 
eAX_ªg
];

3830 
	`ﬂµíd
 (
s
);

3831 i‡(
öãl_sy¡ax
)

3832 
	`ﬂµíd
 ("]");

3834 
	`ﬂµíd
 (")");

3835 
	}
}

3838 
	$OP_ESªg
 (
code
, 
sizeÊag
)

3839 
code
;

3840 
sizeÊag
;

3842 
	`ﬂµíd
 ("%es:" + 
öãl_sy¡ax
);

3843 
	`±r_ªg
 (
code
, 
sizeÊag
);

3844 
	}
}

3847 
	$OP_DSªg
 (
code
, 
sizeÊag
)

3848 
code
;

3849 
sizeÊag
;

3851 i‡((
¥efixes


3852 & (
PREFIX_CS


3853 | 
PREFIX_DS


3854 | 
PREFIX_SS


3855 | 
PREFIX_ES


3856 | 
PREFIX_FS


3857 | 
PREFIX_GS
)) == 0)

3858 
¥efixes
 |
PREFIX_DS
;

3859 
	`≠≥nd_£g
 ();

3860 
	`±r_ªg
 (
code
, 
sizeÊag
);

3861 
	}
}

3864 
	$OP_C
 (
dummy
, 
sizeÊag
)

3865 
dummy
;

3866 
sizeÊag
;

3868 
add
 = 0;

3869 
	`USED_REX
 (
REX_EXTX
);

3870 i‡(
ªx
 & 
REX_EXTX
)

3871 
add
 = 8;

3872 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%¸%d", 
ªg
 + 
add
);

3873 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3874 
	}
}

3877 
	$OP_D
 (
dummy
, 
sizeÊag
)

3878 
dummy
;

3879 
sizeÊag
;

3881 
add
 = 0;

3882 
	`USED_REX
 (
REX_EXTX
);

3883 i‡(
ªx
 & 
REX_EXTX
)

3884 
add
 = 8;

3885 i‡(
öãl_sy¡ax
)

3886 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "db%d", 
ªg
 + 
add
);

3888 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%db%d", 
ªg
 + 
add
);

3889 
	`ﬂµíd
 (
s¸©chbuf
);

3890 
	}
}

3893 
	$OP_T
 (
dummy
, 
sizeÊag
)

3894 
dummy
;

3895 
sizeÊag
;

3897 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%å%d", 
ªg
);

3898 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3899 
	}
}

3902 
	$OP_Rd
 (
byãmode
, 
sizeÊag
)

3903 
byãmode
;

3904 
sizeÊag
;

3906 i‡(
mod
 == 3)

3907 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3909 
	`BadOp
 ();

3910 
	}
}

3913 
	$OP_MMX
 (
byãmode
, 
sizeÊag
)

3914 
byãmode
;

3915 
sizeÊag
;

3917 
add
 = 0;

3918 
	`USED_REX
 (
REX_EXTX
);

3919 i‡(
ªx
 & 
REX_EXTX
)

3920 
add
 = 8;

3921 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3922 i‡(
¥efixes
 & 
PREFIX_DATA
)

3923 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
ªg
 + 
add
);

3925 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%mm%d", 
ªg
 + 
add
);

3926 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3927 
	}
}

3930 
	$OP_XMM
 (
byãmode
, 
sizeÊag
)

3931 
byãmode
;

3932 
sizeÊag
;

3934 
add
 = 0;

3935 
	`USED_REX
 (
REX_EXTX
);

3936 i‡(
ªx
 & 
REX_EXTX
)

3937 
add
 = 8;

3938 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
ªg
 + 
add
);

3939 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3940 
	}
}

3943 
	$OP_EM
 (
byãmode
, 
sizeÊag
)

3944 
byãmode
;

3945 
sizeÊag
;

3947 
add
 = 0;

3948 i‡(
mod
 != 3)

3950 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3953 
	`USED_REX
 (
REX_EXTZ
);

3954 i‡(
ªx
 & 
REX_EXTZ
)

3955 
add
 = 8;

3958 
MODRM_CHECK
;

3959 
codï
++;

3960 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

3961 i‡(
¥efixes
 & 
PREFIX_DATA
)

3962 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
rm
 + 
add
);

3964 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%mm%d", 
rm
 + 
add
);

3965 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3966 
	}
}

3969 
	$OP_EX
 (
byãmode
, 
sizeÊag
)

3970 
byãmode
;

3971 
sizeÊag
;

3973 
add
 = 0;

3974 i‡(
mod
 != 3)

3976 
	`OP_E
 (
byãmode
, 
sizeÊag
);

3979 
	`USED_REX
 (
REX_EXTZ
);

3980 i‡(
ªx
 & 
REX_EXTZ
)

3981 
add
 = 8;

3984 
MODRM_CHECK
;

3985 
codï
++;

3986 
	`¢¥ötf
 (
s¸©chbuf
, (s¸©chbuf), "%%xmm%d", 
rm
 + 
add
);

3987 
	`ﬂµíd
 (
s¸©chbuf
 + 
öãl_sy¡ax
);

3988 
	}
}

3991 
	$OP_MS
 (
byãmode
, 
sizeÊag
)

3992 
byãmode
;

3993 
sizeÊag
;

3995 i‡(
mod
 == 3)

3996 
	`OP_EM
 (
byãmode
, 
sizeÊag
);

3998 
	`BadOp
 ();

3999 
	}
}

4002 
	$OP_XS
 (
byãmode
, 
sizeÊag
)

4003 
byãmode
;

4004 
sizeÊag
;

4006 i‡(
mod
 == 3)

4007 
	`OP_EX
 (
byãmode
, 
sizeÊag
);

4009 
	`BadOp
 ();

4010 
	}
}

4012 c⁄° *
	gSuffix3DNow
[] = {

4013  
NULL
, NULL, NULL, NULL,

4014  
NULL
, NULL, NULL, NULL,

4015  
NULL
, NULL, NULL, NULL,

4016  "pi2fw", "pi2fd", 
NULL
, NULL,

4017  
NULL
, NULL, NULL, NULL,

4018  
NULL
, NULL, NULL, NULL,

4019  
NULL
, NULL, NULL, NULL,

4020  "pf2iw", "pf2id", 
NULL
, NULL,

4021  
NULL
, NULL, NULL, NULL,

4022  
NULL
, NULL, NULL, NULL,

4023  
NULL
, NULL, NULL, NULL,

4024  
NULL
, NULL, NULL, NULL,

4025  
NULL
, NULL, NULL, NULL,

4026  
NULL
, NULL, NULL, NULL,

4027  
NULL
, NULL, NULL, NULL,

4028  
NULL
, NULL, NULL, NULL,

4029  
NULL
, NULL, NULL, NULL,

4030  
NULL
, NULL, NULL, NULL,

4031  
NULL
, NULL, NULL, NULL,

4032  
NULL
, NULL, NULL, NULL,

4033  
NULL
, NULL, NULL, NULL,

4034  
NULL
, NULL, NULL, NULL,

4035  
NULL
, NULL, NULL, NULL,

4036  
NULL
, NULL, NULL, NULL,

4037  
NULL
, NULL, NULL, NULL,

4038  
NULL
, NULL, NULL, NULL,

4039  
NULL
, NULL, NULL, NULL,

4040  
NULL
, NULL, NULL, NULL,

4041  
NULL
, NULL, NULL, NULL,

4042  
NULL
, NULL, NULL, NULL,

4043  
NULL
, NULL, NULL, NULL,

4044  
NULL
, NULL, NULL, NULL,

4045  
NULL
, NULL, NULL, NULL,

4046  
NULL
, NULL, NULL, NULL,

4047  
NULL
, NULL, "pfnacc", NULL,

4048  
NULL
, NULL, "pfpnacc", NULL,

4049  "pfcmpge", 
NULL
, NULL, NULL,

4050  "pfmö", 
NULL
, "pfrcp", "pfrsqrt",

4051  
NULL
, NULL, "pfsub", NULL,

4052  
NULL
, NULL, "pfadd", NULL,

4053  "pfcmpgt", 
NULL
, NULL, NULL,

4054  "pfmax", 
NULL
, "pfrcpit1", "pfrsqit1",

4055  
NULL
, NULL, "pfsubr", NULL,

4056  
NULL
, NULL, "pfacc", NULL,

4057  "pfcm≥q", 
NULL
, NULL, NULL,

4058  "pfmul", 
NULL
, "pfrcpit2", "pfmulhrw",

4059  
NULL
, NULL, NULL, "pswapd",

4060  
NULL
, NULL, NULL, "pavgusb",

4061  
NULL
, NULL, NULL, NULL,

4062  
NULL
, NULL, NULL, NULL,

4063  
NULL
, NULL, NULL, NULL,

4064  
NULL
, NULL, NULL, NULL,

4065  
NULL
, NULL, NULL, NULL,

4066  
NULL
, NULL, NULL, NULL,

4067  
NULL
, NULL, NULL, NULL,

4068  
NULL
, NULL, NULL, NULL,

4069  
NULL
, NULL, NULL, NULL,

4070  
NULL
, NULL, NULL, NULL,

4071  
NULL
, NULL, NULL, NULL,

4072  
NULL
, NULL, NULL, NULL,

4073  
NULL
, NULL, NULL, NULL,

4074  
NULL
, NULL, NULL, NULL,

4075  
NULL
, NULL, NULL, NULL,

4076  
NULL
, NULL, NULL, NULL,

4080 
	$OP_3DNowSuffix
 (
byãmode
, 
sizeÊag
)

4081 
byãmode
;

4082 
sizeÊag
;

4084 c⁄° *
m√m⁄ic
;

4086 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

4090 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

4091 
m√m⁄ic
 = 
Suffix3DNow
[*
codï
++ & 0xff];

4092 i‡(
m√m⁄ic
)

4093 
	`ﬂµíd
 (
m√m⁄ic
);

4100 
›1out
[0] = '\0';

4101 
›2out
[0] = '\0';

4102 
	`BadOp
 ();

4104 
	}
}

4106 c⁄° *
	gsimd_cmp_›
[] = {

4118 
	$OP_SIMD_Suffix
 (
byãmode
, 
sizeÊag
)

4119 
byãmode
;

4120 
sizeÊag
;

4122 
cmp_ty≥
;

4124 
	`FETCH_DATA
 (
the_öfo
, 
codï
 + 1);

4125 
obuÂ
 = 
obuf
 + 
	`°æí
 (obuf);

4126 
cmp_ty≥
 = *
codï
++ & 0xff;

4127 i‡(
cmp_ty≥
 < 8)

4129 
suffix1
 = 'p', 
suffix2
 = 's';

4130 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

4131 i‡(
¥efixes
 & 
PREFIX_REPZ
)

4132 
suffix1
 = 's';

4135 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_DATA
);

4136 i‡(
¥efixes
 & 
PREFIX_DATA
)

4137 
suffix2
 = 'd';

4140 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPNZ
);

4141 i‡(
¥efixes
 & 
PREFIX_REPNZ
)

4142 
suffix1
 = 's', 
suffix2
 = 'd';

4145 
	`¢¥ötf
 (
s¸©chbuf
, (scratchbuf), "cmp%s%c%c",

4146 
simd_cmp_›
[
cmp_ty≥
], 
suffix1
, 
suffix2
);

4147 
u£d_¥efixes
 |(
¥efixes
 & 
PREFIX_REPZ
);

4148 
	`ﬂµíd
 (
s¸©chbuf
);

4153 
›1out
[0] = '\0';

4154 
›2out
[0] = '\0';

4155 
	`BadOp
 ();

4157 
	}
}

4160 
	$SIMD_Fixup
 (
exåach¨
, 
sizeÊag
)

4161 
exåach¨
;

4162 
sizeÊag
;

4166 i‡(
mod
 == 3)

4168 *
p
 = 
obuf
 + 
	`°æí
 (obuf);

4169 *(
p
 + 1) = '\0';

4170 *
p
 = *(p - 1);

4171 *(
p
 - 1) = *(p - 2);

4172 *(
p
 - 2) = *(p - 3);

4173 *(
p
 - 3Ë
exåach¨
;

4175 
	}
}

4178 
	$BadOp
 ()

4181 
codï
 = 
ö¢_codï
 + 1;

4182 
	`ﬂµíd
 ("(bad)");

4183 
	}
}

	@kern/init.c

3 
	~<öc/°dio.h
>

4 
	~<öc/°rög.h
>

5 
	~<öc/as£π.h
>

7 
	~<kîn/m⁄ô‹.h
>

8 
	~<kîn/c⁄sﬁe.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/k˛ock.h
>

11 
	~<kîn/ív.h
>

12 
	~<kîn/å≠.h
>

13 
	~<kîn/sched.h
>

14 
	~<kîn/picúq.h
>

18 
	$i386_öô
()

20 
ed©a
[], 
íd
[];

25 
	`mem£t
(
ed©a
, 0, 
íd
 -Édata);

29 
	`c⁄s_öô
();

31 
	`˝rötf
("6828 decimal is %o octal!\n", 6828);

34 
	`i386_dëe˘_mem‹y
();

35 
	`i386_vm_öô
();

38 
	`ív_öô
();

39 
	`idt_öô
();

42 
	`pic_öô
();

43 
	`k˛ock_öô
();

46 
	`ENV_CREATE
(
u£r_idÀ
);

49 
	`ENV_CREATE
(
fs_fs
);

51 #i‡
	`deföed
(
TEST
)

53 
	`ENV_CREATE2
(
TEST
, 
TESTSIZE
);

62 
	`sched_yõld
();

63 
	}
}

70 c⁄° *
	g∑nic°r
;

77 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

79 
va_li°
 
≠
;

81 i‡(
∑nic°r
)

82 
dód
;

83 
∑nic°r
 = 
fmt
;

86 
__asm
 
	`__vﬁ©ûe
("cli; cld");

88 
	`va_°¨t
(
≠
, 
fmt
);

89 
	`˝rötf
("kî√»∑ni¯© %s:%d: ", 
fûe
, 
löe
);

90 
	`v˝rötf
(
fmt
, 
≠
);

91 
	`˝rötf
("\n");

92 
	`va_íd
(
≠
);

94 
dód
:

97 
	`m⁄ô‹
(
NULL
);

98 
	}
}

102 
	$_w¨n
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

104 
va_li°
 
≠
;

106 
	`va_°¨t
(
≠
, 
fmt
);

107 
	`˝rötf
("kî√»w¨nögáà%s:%d: ", 
fûe
, 
löe
);

108 
	`v˝rötf
(
fmt
, 
≠
);

109 
	`˝rötf
("\n");

110 
	`va_íd
(
≠
);

111 
	}
}

	@kern/kclock.c

8 
	~<öc/x86.h
>

9 
	~<öc/°dio.h
>

10 
	~<öc/ißªg.h
>

11 
	~<öc/timîªg.h
>

13 
	~<kîn/k˛ock.h
>

14 
	~<kîn/picúq.h
>

18 
	$mc146818_ªad
(
ªg
)

20 
	`outb
(
IO_RTC
, 
ªg
);

21  
	`öb
(
IO_RTC
+1);

22 
	}
}

25 
	$mc146818_wrôe
(
ªg
, 
d©um
)

27 
	`outb
(
IO_RTC
, 
ªg
);

28 
	`outb
(
IO_RTC
+1, 
d©um
);

29 
	}
}

33 
	$k˛ock_öô
()

36 
	`outb
(
TIMER_MODE
, 
TIMER_SEL0
 | 
TIMER_RATEGEN
 | 
TIMER_16BIT
);

37 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) % 256);

38 
	`outb
(
IO_TIMER1
, 
	`TIMER_DIV
(100) / 256);

39 
	`˝rötf
(" SetupÅimer interrupts via 8259A\n");

40 
	`úq_£tmask_8259A
(
úq_mask_8259A
 & ~(1<<0));

41 
	`˝rötf
(" unmaskedÅimer interrupt\n");

42 
	}
}

	@kern/kclock.h

3 #i‚de‡
JOS_KERN_KCLOCK_H


4 
	#JOS_KERN_KCLOCK_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	#IO_RTC
 0x070

	)

11 
	#MC_NVRAM_START
 0xê

	)

12 
	#MC_NVRAM_SIZE
 50

	)

15 
	#NVRAM_BASELO
 (
MC_NVRAM_START
 + 7Ë

	)

16 
	#NVRAM_BASEHI
 (
MC_NVRAM_START
 + 8Ë

	)

19 
	#NVRAM_EXTLO
 (
MC_NVRAM_START
 + 9Ë

	)

20 
	#NVRAM_EXTHI
 (
MC_NVRAM_START
 + 10Ë

	)

23 
	#NVRAM_PEXTLO
 (
MC_NVRAM_START
 + 34Ë

	)

24 
	#NVRAM_PEXTHI
 (
MC_NVRAM_START
 + 35Ë

	)

27 
	#NVRAM_CENTURY
 (
MC_NVRAM_START
 + 36Ë

	)

29 
mc146818_ªad
(
ªg
);

30 
mc146818_wrôe
(
ªg
, 
d©um
);

31 
k˛ock_öô
();

	@kern/kdebug.c

1 
	~<öc/°ab.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/memœyout.h
>

4 
	~<öc/as£π.h
>

6 
	~<kîn/kdebug.h
>

7 
	~<kîn/pm≠.h
>

8 
	~<kîn/ív.h
>

10 c⁄° 
Sèb
 
__STAB_BEGIN__
[];

11 c⁄° 
Sèb
 
__STAB_END__
[];

12 c⁄° 
__STABSTR_BEGIN__
[];

13 c⁄° 
__STABSTR_END__
[];

15 
	sU£rSèbD©a
 {

16 c⁄° 
Sèb
 *
	m°abs
;

17 c⁄° 
Sèb
 *
	m°ab_íd
;

18 c⁄° *
	m°ab°r
;

19 c⁄° *
	m°ab°r_íd
;

60 
	$°ab_bö£¨ch
(c⁄° 
Sèb
 *
°abs
, *
ªgi⁄_À·
, *
ªgi⁄_right
,

61 
ty≥
, 
uöçå_t
 
addr
)

63 
l
 = *
ªgi⁄_À·
, 
r
 = *
ªgi⁄_right
, 
™y_m©ches
 = 0;

65 
l
 <
r
) {

66 
åue_m
 = (
l
 + 
r
Ë/ 2, 
m
 =Årue_m;

69 
m
 >
l
 && 
°abs
[m].
n_ty≥
 !
ty≥
)

70 
m
--;

71 i‡(
m
 < 
l
) {

72 
l
 = 
åue_m
 + 1;

77 
™y_m©ches
 = 1;

78 i‡(
°abs
[
m
].
n_vÆue
 < 
addr
) {

79 *
ªgi⁄_À·
 = 
m
;

80 
l
 = 
åue_m
 + 1;

81 } i‡(
°abs
[
m
].
n_vÆue
 > 
addr
) {

82 *
ªgi⁄_right
 = 
m
 - 1;

83 
r
 = 
m
 - 1;

87 *
ªgi⁄_À·
 = 
m
;

88 
l
 = 
m
;

89 
addr
++;

93 i‡(!
™y_m©ches
)

94 *
ªgi⁄_right
 = *
ªgi⁄_À·
 - 1;

97 
l
 = *
ªgi⁄_right
;

98 
l
 > *
ªgi⁄_À·
 && 
°abs
[l].
n_ty≥
 !
ty≥
;

99 
l
--)

101 *
ªgi⁄_À·
 = 
l
;

103 
	}
}

114 
	$debugöfo_eù
(
uöçå_t
 
addr
, 
Eùdebugöfo
 *
öfo
)

116 c⁄° 
Sèb
 *
°abs
, *
°ab_íd
;

117 c⁄° *
°ab°r
, *
°ab°r_íd
;

118 
lfûe
, 
rfûe
, 
lfun
, 
rfun
, 
Œöe
, 
æöe
;

121 
öfo
->
eù_fûe
 = "<unknown>";

122 
öfo
->
eù_löe
 = 0;

123 
öfo
->
eù_‚_«me
 = "<unknown>";

124 
öfo
->
eù_‚_«mñí
 = 9;

125 
öfo
->
eù_‚_addr
 = 
addr
;

126 
öfo
->
eù_‚_«rg
 = 0;

129 i‡(
addr
 >
ULIM
) {

130 
°abs
 = 
__STAB_BEGIN__
;

131 
°ab_íd
 = 
__STAB_END__
;

132 
°ab°r
 = 
__STABSTR_BEGIN__
;

133 
°ab°r_íd
 = 
__STABSTR_END__
;

140 c⁄° 
U£rSèbD©a
 *
usd
 = (c⁄° U£rSèbD©®*Ë
USTABDATA
;

145 
	`u£r_mem_check
(
cuªnv
,(*)
usd
,(
U£rSèbD©a
),0);

146 
°abs
 = 
usd
->stabs;

147 
°ab_íd
 = 
usd
->stab_end;

148 
°ab°r
 = 
usd
->stabstr;

149 
°ab°r_íd
 = 
usd
->stabstr_end;

153 
	`u£r_mem_check
(
cuªnv
,(*)
°abs
,
°ab_íd
-stabs,0);

154 
	`u£r_mem_check
(
cuªnv
,(*)
°ab°r
,
°ab°r_íd
-stabstr,0);

158 i‡(
°ab°r_íd
 <
°ab°r
 || stabstr_end[-1] != 0)

167 
lfûe
 = 0;

168 
rfûe
 = (
°ab_íd
 - 
°abs
) - 1;

169 
	`°ab_bö£¨ch
(
°abs
, &
lfûe
, &
rfûe
, 
N_SO
, 
addr
);

170 i‡(
lfûe
 == 0)

175 
lfun
 = 
lfûe
;

176 
rfun
 = 
rfûe
;

177 
	`°ab_bö£¨ch
(
°abs
, &
lfun
, &
rfun
, 
N_FUN
, 
addr
);

179 i‡(
lfun
 <
rfun
) {

182 i‡(
°abs
[
lfun
].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

183 
öfo
->
eù_‚_«me
 = 
°ab°r
 + 
°abs
[
lfun
].
n_°rx
;

184 
öfo
->
eù_‚_addr
 = 
°abs
[
lfun
].
n_vÆue
;

185 
addr
 -
öfo
->
eù_‚_addr
;

187 
Œöe
 = 
lfun
;

188 
æöe
 = 
rfun
;

192 
öfo
->
eù_‚_addr
 = 
addr
;

193 
Œöe
 = 
lfûe
;

194 
æöe
 = 
rfûe
;

197 
öfo
->
eù_‚_«mñí
 = 
	`°rföd
(öfo->
eù_‚_«me
, ':') - info->eip_fn_name;

209 
	`°ab_bö£¨ch
(
°abs
,&
Œöe
,&
æöe
,
N_SLINE
,
addr
);

210 if(
Œöe
==0)

212 
öfo
->
eù_löe
=
°abs
[
Œöe
].
n_desc
;

219 
Œöe
 >
lfûe


220 && 
°abs
[
Œöe
].
n_ty≥
 !
N_SOL


221 && (
°abs
[
Œöe
].
n_ty≥
 !
N_SO
 || !°abs[Œöe].
n_vÆue
))

222 
Œöe
--;

223 i‡(
Œöe
 >
lfûe
 && 
°abs
[Œöe].
n_°rx
 < 
°ab°r_íd
 - 
°ab°r
)

224 
öfo
->
eù_fûe
 = 
°ab°r
 + 
°abs
[
Œöe
].
n_°rx
;

229 i‡(
lfun
 < 
rfun
)

230 
Œöe
 = 
lfun
 + 1;

231 
Œöe
 < 
rfun
 && 
°abs
[Œöe].
n_ty≥
 =
N_PSYM
;

232 
Œöe
++)

233 
öfo
->
eù_‚_«rg
++;

236 
	}
}

	@kern/kdebug.h

1 #i‚de‡
JOS_KERN_KDEBUG_H


2 
	#JOS_KERN_KDEBUG_H


	)

4 
	~<öc/ty≥s.h
>

7 
	sEùdebugöfo
 {

8 c⁄° *
	meù_fûe
;

9 
	meù_löe
;

11 c⁄° *
	meù_‚_«me
;

13 
	meù_‚_«mñí
;

14 
uöçå_t
 
	meù_‚_addr
;

15 
	meù_‚_«rg
;

18 
debugöfo_eù
(
uöçå_t
 
eù
, 
Eùdebugöfo
 *
öfo
);

	@kern/monitor.c

4 
	~<öc/°dio.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/memœyout.h
>

7 
	~<öc/as£π.h
>

8 
	~<öc/x86.h
>

9 
	~<öc/mmu.h
>

11 
	~<kîn/c⁄sﬁe.h
>

12 
	~<kîn/m⁄ô‹.h
>

13 
	~<kîn/kdebug.h
>

14 
	~<kîn/å≠.h
>

15 
	~<kîn/pm≠.h
>

16 
	~<kîn/dißs.h
>

17 
	#CMDBUF_SIZE
 80

18 

	)

20 
	sComm™d
 {

21 c⁄° *
	m«me
;

22 c⁄° *
	mdesc
;

24 (*
	mfunc
)(
	m¨gc
, ** 
	m¨gv
, 
Tøp‰ame
* 
	mtf
);

27 
Comm™d
 
	gcomm™ds
[] = {

28 { "hñp", "Di•œyÅhi†li° o‡comm™ds", 
m⁄_hñp
 },

29 { "kînöfo", "Di•œy inf‹m©i⁄ábouàthêkî√l", 
m⁄_kînöfo
 },

30 { "backåa˚","Ru¿®°ack backåa˚",
m⁄_backåa˚
},

31 { "c⁄töue","C⁄töuêtÿexecuã fromÅhêcuºíàbªakpoöt",
m⁄_c⁄töue
},

32 { "°ïi","SigÀ-°ï o√ in°ru˘i⁄áà®time",
m⁄_°ïi
},

33 { "showm≠pögs","Di•œyÅhêphysiˇ»∑gêm≠pög†© vútuÆáddªs£†xxxx",
m⁄_showm≠pögs
},

34 { "≥rmissi⁄","Ch™gêthê≥rmissi⁄ o‡thêphysiˇ»∑gêm≠pög†© vútuÆáddªs£†xxxx,D A PCD PWT U W P",
m⁄_≥rmissi⁄
},

35 { "dumpx", "Dum∞thêc⁄ã¡†o‡®øngêo‡mem‹y giví vútuÆáddªs†ønge", 
m⁄_dumpx
 },

36 { "dumpxp", "Dum∞thêc⁄ã¡†o‡®øngêo‡mem‹y givíÖhysiˇ»addªs†ønge", 
m⁄_dumpxp
 },

38 
	#NCOMMANDS
 ((
comm™ds
)/(comm™ds[0]))

	)

40 
ªad_eù
();

45 
	$m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

47 
i
;

49 
i
 = 0; i < 
NCOMMANDS
; i++)

50 
	`˝rötf
("%†- %s\n", 
comm™ds
[
i
].
«me
, comm™ds[i].
desc
);

52 
	}
}

55 
	$m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

57 
_°¨t
[], 
ëext
[], 
ed©a
[], 
íd
[];

59 
	`˝rötf
("Special kernel symbols:\n");

60 
	`˝rötf
(" _°¨à%08x (vútË %08x (phys)\n", 
_°¨t
, _°¨à- 
KERNBASE
);

61 
	`˝rötf
("Éãxà %08x (vútË %08x (phys)\n", 
ëext
,Éãxà- 
KERNBASE
);

62 
	`˝rötf
("Éd©® %08x (vútË %08x (phys)\n", 
ed©a
,Éd©®- 
KERNBASE
);

63 
	`˝rötf
("Énd %08x (vútË %08x (phys)\n", 
íd
,Énd - 
KERNBASE
);

64 
	`˝rötf
("KernelÉxecutable memory footprint: %dKB\n",

65 (
íd
-
_°¨t
+1023)/1024);

67 
	}
}

70 
	$m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

73 
i
;

74 
Eùdebugöfo
 
eùöfo
;

75 
uöt32_t
 
ebp
,
eù
,
¨g
[5];

76 
ebp
=
	`ªad_ebp
();

78 
	`˝rötf
("Stack backtrace :\n");

81 
eù
=*((
uöt32_t
 *)
ebp
+1);

82 
i
=0;i<5;i++)

83 
¨g
[
i
]=*((
uöt32_t
 *)
ebp
+i+2);

84 
	`˝rötf
("eb∞%08xÉù %08x ",
ebp
,
eù
);

85 
	`˝rötf
("¨g†%08x %08x %08x %08x %08x\n",
¨g
[0],arg[1],arg[2],arg[3],arg[4]);

86 if(!
	`debugöfo_eù
((
uöçå_t
)
eù
,&
eùöfo
))

88 
	`˝rötf
(" %s:%d: %.*s+%d\n",
eùöfo
.
eù_fûe
,eùöfo.
eù_löe
,eùöfo.
eù_‚_«mñí
,eùöfo.
eù_‚_«me
,
eù
-eùöfo.
eù_‚_addr
);

90 
ebp
=*(
uöt32_t
 *)ebp;

91 }
ebp
!=0);

93 
	}
}

94 
uöt32_t


95 
	$gëva
(*
va°rög
,
ba£
)

97 
uöt32_t
 
va
=0;

98 
i
,
Àngth
=0;

99 if(
va°rög
){

100 
Àngth
=0;
va°rög
[length]!='\0';length++);

102 if(
ba£
==16){

103 if(
va°rög
[0]!='0'||va°rög[1]!='x'||(
Àngth
>10)){

104 
	`˝rötf
("Virtual Address isÇot hex!\n");

108 
i
=2;i<
Àngth
;i++){

109 if(
va°rög
[
i
]>='0'&&vastring[i]<='9')

110 
va
=
va°rög
[
i
]-'0'+va*
ba£
;

111 if(
va°rög
[
i
]>='a'&&vastring[i]<='f')

112 
va
=
va°rög
[
i
]-'a'+10+va*
ba£
;

114 
	`˝rötf
("Virtual Address is bad!\n");

115 
va
=0;

120 if(
ba£
==10){

121 
i
=0;i<
Àngth
;i++){

122 if(
va°rög
[
i
]>='0'&&vastring[i]<='9')

123 
va
=
va°rög
[
i
]-'0'+va*
ba£
;

125 
	`˝rötf
("TheÇumber string is bad!\n");

126 
va
=0;

131 
	`˝rötf
("CanÇot handdle\n");

134 
	`˝rötf
("Virtual Address is NULL!\n");

136  
va
;

137 
	}
}

139 
	$m⁄_showm≠pögs
(
¨gc
,**
¨gv
,
Tøp‰ame
 *
tf
)

141 
i
;

142 
uöt32_t
 
a
,
œ
;

143 
±e_t
 *
±e
;

144 
Page
 *
⁄ïage
;

145 
phyßddr_t
 
phyßddr
;

146 if(
¨gc
!=3)

148 
	`˝rötf
("Commandárgument is illegle!\n");

154 
a
=
	`gëva
(
¨gv
[1],16);

155 
œ
=
	`gëva
(
¨gv
[2],16);

158 if((
⁄ïage
=
	`∑ge_lookup
(
boŸ_pgdú
,(*)
a
,&
±e
))){

159 
phyßddr
=
	`∑ge2∑
(
⁄ïage
);

160 
	`˝rötf
("vútuÆáddr=%xÖagêphyßddr=%xÖîmissi⁄: ",
a
,
phyßddr
);

161 if((*
±e
)&
PTE_D
Ë
	`˝rötf
("D ");

162 
	`˝rötf
("- ");

163 if(*
±e
&
PTE_A
Ë
	`˝rötf
("A ");

164 
	`˝rötf
("- ");

165 if(*
±e
&
PTE_PCD
Ë
	`˝rötf
("PCD ");

166 
	`˝rötf
("- ");

167 if(*
±e
&
PTE_PWT
Ë
	`˝rötf
("PWT ");

168 
	`˝rötf
("- ");

169 if(*
±e
&
PTE_U
Ë
	`˝rötf
("U ");

170 
	`˝rötf
("- ");

171 if(*
±e
&
PTE_W
Ë
	`˝rötf
("W ");

172 
	`˝rötf
("- ");

173 
	`˝rötf
("P \n");

175 
	`˝rötf
("thi†physiˇ»∑gêc‹ª•⁄dögÅÿ%x i†nŸÉxôög\n",
a
);

176 if(
a
==
œ
) ;

177 
a
+=
PGSIZE
;

180 
	}
}

182 
	$m⁄_≥rmissi⁄
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

184 
uöt32_t
 
a
=0;

185 
i
;

186 
±e_t
 *
±e
;

187 
Page
 *
⁄ïage
;

188 
›î©‹
,
±e_ch
=0,
±e_≥rm
;

189 if(
¨gc
<4)

191 
	`˝rötf
("Commandárgument is illegle!\n");

194 
a
=
	`gëva
(
¨gv
[2],16);

195 
›î©‹
=
¨gv
[1][0];

196 if((
⁄ïage
=
	`∑ge_lookup
(
boŸ_pgdú
,(*)
a
,&
±e
))){

197 
i
=3;i<
¨gc
;i++)

199 
±e_≥rm
=
¨gv
[
i
][0];

200 
±e_≥rm
){

202 if((
¨gv
[
i
][1]!='\0')&&(argv[i][3]=='\0')){

203 if((
¨gv
[
i
][0]=='P')&&(argv[i][1]=='W')&&(argv[i][2]=='T'))

204 
±e_ch
|=
PTE_PWT
;

205 if((
¨gv
[
i
][0]=='P')&&(argv[i][1]=='C')&&(argv[i][2]=='D'))

206 
±e_ch
|=
PTE_PCD
;

207 {
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]); 0;}

209 if(
¨gv
[
i
][1]=='\0'Ë
±e_ch
|=
PTE_P
;

210 {
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]); 0;}

212 'W':
±e_ch
|=
PTE_W
;;

213 'U':
±e_ch
|=
PTE_U
;;

214 'D':
±e_ch
|=
PTE_D
;;

215 'A':
±e_ch
|=
PTE_A
;;

217 
	`˝rötf
("≥rmissi⁄ %†i†nŸÉxi°\n",
¨gv
[
i
]);

221 
›î©‹
){

223 *
±e
|=
±e_ch
;;

225 if(
±e_ch
&
PTE_P
)

226 {
	`˝rötf
("clearing PTE_P is denied\n"); 0;}

228 {*
±e
&=(~
±e_ch
);;}

230 
	`˝rötf
("›øt‹ %¯i†nŸ sëtög o∏˛órögÖîmissi⁄\n",
›î©‹
);

233 
	`˝rötf
("permission is changed successfully!\n");

235 
	`˝rötf
("thi†physiˇ»∑gêc‹ª•⁄dögÅÿ%x i†nŸÉxôög\n",
a
);

237 
	}
}

240 
	$m⁄_dumpx
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

242 
uöt32_t
 
a
,*
c⁄ã¡
;

243 
i
,
n
;

244 if(
¨gc
<3)

246 
	`˝rötf
("Commandárgument is illegle!\n");

249 
n
=()
	`gëva
(
¨gv
[1],10);

250 
a
=
	`gëva
(
¨gv
[2],16);

251 
c⁄ã¡
=(
uöt32_t
 *)
a
;

252 
i
=0;i<
n
;i++)

253 
	`˝rötf
("%x ",*(
c⁄ã¡
+
i
));

254 
	`˝rötf
("\n");

256 
	}
}

258 
	$m⁄_dumpxp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

260 
uöt32_t
 
va
,
∑
,*
c⁄ã¡
;

261 
i
,
n
;

262 if(
¨gc
<3)

264 
	`˝rötf
("Commandárgument is illegle!\n");

267 
n
=()
	`gëva
(
¨gv
[1],10);

268 
∑
 = 
	`gëva
(
¨gv
[2],16);

269 
va
 = (
uöt32_t
)
	`KADDR
(
∑
);

270 
c⁄ã¡
=(
uöt32_t
 *)
va
;

271 
i
=0;i<
n
;i++)

272 
	`˝rötf
("%x ",*(
c⁄ã¡
+
i
));

273 
	`˝rötf
("\n");

275 
	}
}

277 
	$m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

279 
uöt32_t
 
ªã•
;

280 
Tøp‰ame
 *
tf1
;

281 if(
tf
->
tf_å≠no
==3||tf->tf_trapno==1)

283 
ªã•
=
tf
->
tf_ªgs
.
ªg_€•
-0x20;

286 
tf1
=(
Tøp‰ame
*)
ªã•
;

287 
tf1
->
tf_eÊags
|=0x10000;

288 
tf1
->
tf_eÊags
&=~0x100;

291 
	`wrôe_e•
(
ªã•
);

292 
	`å≠ªt
();

295 
	}
}

297 
	$m⁄_°ïi
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
)

299 
uöt32_t
 
ªã•
;

300 
Tøp‰ame
 *
tf1
;

301 
ªã•
=
tf
->
tf_ªgs
.
ªg_€•
-0x20;

304 
tf1
=(
Tøp‰ame
*)
ªã•
;

305 
	`m⁄ô‹_dißs
(
tf1
->
tf_eù
,1);

308 
tf1
->
tf_eÊags
|=0x100;

311 
	`wrôe_e•
(
ªã•
);

312 
	`å≠ªt
();

314 
	}
}

319 
	#WHITESPACE
 "\t\r\¿"

	)

320 
	#MAXARGS
 16

	)

323 
	$runcmd
(*
buf
, 
Tøp‰ame
 *
tf
)

325 
¨gc
;

326 *
¨gv
[
MAXARGS
];

327 
i
;

330 
¨gc
 = 0;

331 
¨gv
[
¨gc
] = 0;

334 *
buf
 && 
	`°rchr
(
WHITESPACE
, *buf))

335 *
buf
++ = 0;

336 i‡(*
buf
 == 0)

340 i‡(
¨gc
 =
MAXARGS
-1) {

341 
	`˝rötf
("Toÿm™yárgumít†(max %d)\n", 
MAXARGS
);

344 
¨gv
[
¨gc
++] = 
buf
;

345 *
buf
 && !
	`°rchr
(
WHITESPACE
, *buf))

346 
buf
++;

348 
¨gv
[
¨gc
] = 0;

351 i‡(
¨gc
 == 0)

353 
i
 = 0; i < 
NCOMMANDS
; i++) {

354 i‡(
	`°rcmp
(
¨gv
[0], 
comm™ds
[
i
].
«me
) == 0)

355  
comm™ds
[
i
].
	`func
(
¨gc
, 
¨gv
, 
tf
);

357 
	`˝rötf
("Unknow¿comm™d '%s'\n", 
¨gv
[0]);

359 
	}
}

362 
	$m⁄ô‹
(
Tøp‰ame
 *
tf
)

364 *
buf
;

366 
	`˝rötf
("WelcomeÅoÅhe JOS kernel monitor!\n");

367 
	`˝rötf
("Type 'help' foráÜist of commands.\n");

369 i‡(
tf
 !
NULL
)

370 
	`¥öt_å≠‰ame
(
tf
);

373 
buf
 = 
	`ªadlöe
("K> ");

374 i‡(
buf
 !
NULL
)

375 i‡(
	`runcmd
(
buf
, 
tf
) < 0)

378 
	}
}

384 
	$ªad_eù
()

386 
uöt32_t
 
ˇŒîpc
;

387 
__asm
 
	`__vﬁ©ûe
("mov»4(%%ebp), %0" : "Ù" (
ˇŒîpc
));

388  
ˇŒîpc
;

389 
	}
}

	@kern/monitor.h

1 #i‚de‡
JOS_KERN_MONITOR_H


2 
	#JOS_KERN_MONITOR_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	gTøp‰ame
;

12 
m⁄ô‹
(
Tøp‰ame
 *
tf
);

15 
m⁄_hñp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

16 
m⁄_kînöfo
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

17 
m⁄_backåa˚
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

18 
m⁄_showm≠pögs
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

19 
m⁄_≥rmissi⁄
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

20 
m⁄_dumpx
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

21 
m⁄_dumpxp
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

22 
m⁄_c⁄töue
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

23 
m⁄_°ïi
(
¨gc
, **
¨gv
, 
Tøp‰ame
 *
tf
);

	@kern/picirq.c

3 
	~<öc/as£π.h
>

5 
	~<kîn/picúq.h
>

10 
uöt16_t
 
	gúq_mask_8259A
 = 0xFFFF & ~(1<<
IRQ_SLAVE
);

11 
boﬁ
 
	gdidöô
;

15 
	$pic_öô
()

17 
didöô
 = 1;

20 
	`outb
(
IO_PIC1
+1, 0xFF);

21 
	`outb
(
IO_PIC2
+1, 0xFF);

29 
	`outb
(
IO_PIC1
, 0x11);

32 
	`outb
(
IO_PIC1
+1, 
IRQ_OFFSET
);

36 
	`outb
(
IO_PIC1
+1, 1<<
IRQ_SLAVE
);

46 
	`outb
(
IO_PIC1
+1, 0x3);

49 
	`outb
(
IO_PIC2
, 0x11);

50 
	`outb
(
IO_PIC2
+1, 
IRQ_OFFSET
 + 8);

51 
	`outb
(
IO_PIC2
+1, 
IRQ_SLAVE
);

54 
	`outb
(
IO_PIC2
+1, 0x01);

60 
	`outb
(
IO_PIC1
, 0x68);

61 
	`outb
(
IO_PIC1
, 0x0a);

63 
	`outb
(
IO_PIC2
, 0x68);

64 
	`outb
(
IO_PIC2
, 0x0a);

66 i‡(
úq_mask_8259A
 != 0xFFFF)

67 
	`úq_£tmask_8259A
(
úq_mask_8259A
);

68 
	}
}

71 
	$úq_£tmask_8259A
(
uöt16_t
 
mask
)

73 
i
;

74 
úq_mask_8259A
 = 
mask
;

75 i‡(!
didöô
)

77 
	`outb
(
IO_PIC1
+1, ()
mask
);

78 
	`outb
(
IO_PIC2
+1, ()(
mask
 >> 8));

79 
	`˝rötf
("enabled interrupts:");

80 
i
 = 0; i < 16; i++)

81 i‡(~
mask
 & (1<<
i
))

82 
	`˝rötf
(" %d", 
i
);

83 
	`˝rötf
("\n");

84 
	}
}

	@kern/picirq.h

3 #i‚de‡
JOS_KERN_PICIRQ_H


4 
	#JOS_KERN_PICIRQ_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	#MAX_IRQS
 16

10 

	)

12 
	#IO_PIC1
 0x20

13 
	#IO_PIC2
 0xA0

14 

	)

15 
	#IRQ_SLAVE
 2

16 
	#IRQ_OFFSET
 32

17 

	)

19 #i‚de‡
__ASSEMBLER__


21 
	~<öc/ty≥s.h
>

22 
	~<öc/x86.h
>

24 
uöt16_t
 
úq_mask_8259A
;

25 
pic_öô
();

26 
úq_£tmask_8259A
(
uöt16_t
 
mask
);

	@kern/pmap.c

3 
	~<öc/x86.h
>

4 
	~<öc/mmu.h
>

5 
	~<öc/îr‹.h
>

6 
	~<öc/°rög.h
>

7 
	~<öc/as£π.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/k˛ock.h
>

11 
	~<kîn/ív.h
>

14 
phyßddr_t
 
	gmax∑
;

15 
size_t
 
	g≈age
;

16 
size_t
 
	gba£mem
;

17 
size_t
 
	gextmem
;

20 
pde_t
* 
	gboŸ_pgdú
;

21 
phyßddr_t
 
	gboŸ_¸3
;

22 * 
	gboŸ_‰ìmem
;

24 
Page
* 
	g∑ges
;

25 
Page_li°
 
	g∑ge_‰ì_li°
;

33 
Segdesc
 
	ggdt
[] =

36 
SEG_NULL
,

39 [
GD_KT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 0),

42 [
GD_KD
 >> 3] = 
SEG
(
STA_W
, 0x0, 0xffffffff, 0),

45 [
GD_UT
 >> 3] = 
SEG
(
STA_X
 | 
STA_R
, 0x0, 0xffffffff, 3),

48 [
GD_UD
 >> 3] = 
SEG
(
STA_W
, 0x0, 0xffffffff, 3),

51 [
GD_TSS
 >> 3] = 
SEG_NULL


54 
P£udodesc
 
	ggdt_pd
 = {

55 (
gdt
) - 1, () gdt

59 
	$nvøm_ªad
(
r
)

61  
	`mc146818_ªad
(
r
) | (mc146818_read(r + 1) << 8);

62 
	}
}

65 
	$i386_dëe˘_mem‹y
()

68 
ba£mem
 = 
	`ROUNDDOWN
(
	`nvøm_ªad
(
NVRAM_BASELO
)*1024, 
PGSIZE
);

69 
extmem
 = 
	`ROUNDDOWN
(
	`nvøm_ªad
(
NVRAM_EXTLO
)*1024, 
PGSIZE
);

73 i‡(
extmem
)

74 
max∑
 = 
EXTPHYSMEM
 + 
extmem
;

76 
max∑
 = 
ba£mem
;

78 
≈age
 = 
max∑
 / 
PGSIZE
;

80 
	`˝rötf
("Physiˇ»mem‹y: %dKávaûabÀ, ", ()(
max∑
/1024));

81 
	`˝rötf
("ba£ = %dK,Éxãnded = %dK\n", ()(
ba£mem
/1024), ()(
extmem
/1024));

82 
	}
}

88 
check_boŸ_pgdú
();

89 
check_∑ge_Æloc
();

90 
∑ge_check
();

91 
boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
);

107 
	$boŸ_Æloc
(
uöt32_t
 
n
, uöt32_à
Æign
)

109 
íd
[];

110 *
v
;

117 i‡(
boŸ_‰ìmem
 == 0)

118 
boŸ_‰ìmem
 = 
íd
;

126 
boŸ_‰ìmem
=
	`ROUNDUP
(boŸ_‰ìmem,
Æign
);

127 
v
=(*)
boŸ_‰ìmem
;

128 
boŸ_‰ìmem
=boŸ_‰ìmem+
n
;

129  
v
;

131 
	}
}

146 
	$i386_vm_öô
()

148 
pde_t
* 
pgdú
;

149 
uöt32_t
 
¸0
;

150 
size_t
 
n
;

157 
pgdú
 = 
	`boŸ_Æloc
(
PGSIZE
, PGSIZE);

158 
	`mem£t
(
pgdú
, 0, 
PGSIZE
);

159 
boŸ_pgdú
 = 
pgdú
;

160 
boŸ_¸3
 = 
	`PADDR
(
pgdú
);

169 
pgdú
[
	`PDX
(
VPT
)] = 
	`PADDR
’gdú)|
PTE_W
|
PTE_P
;

173 
pgdú
[
	`PDX
(
UVPT
)] = 
	`PADDR
’gdú)|
PTE_U
|
PTE_P
;

182 
∑ges
=(
Page
*)
	`boŸ_Æloc
(
≈age
*(Page),
PGSIZE
);

187 
ívs
=(
Env
*)
	`boŸ_Æloc
(
NENV
*(Env),
PGSIZE
);

193 
	`∑ge_öô
();

195 
	`check_∑ge_Æloc
();

197 
	`∑ge_check
();

209 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
UPAGES
,
≈age
*(
Page
),
	`PADDR
(
∑ges
),
PTE_U
|
PTE_P
);

217 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
UENVS
,
NENV
*(
Env
),
	`PADDR
(
ívs
),
PTE_U
|
PTE_P
);

229 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
KSTACKTOP
-
KSTKSIZE
,KSTKSIZE,
	`PADDR
(
boŸ°ack
),
PTE_W
 |
PTE_P
);

238 
	`boŸ_m≠_£gmít
(
boŸ_pgdú
,
KERNBASE
,0xffffffff-KERNBASE,0x0,
PTE_W
 | 
PTE_P
);

240 
	`check_boŸ_pgdú
();

258 
pgdú
[0] =Ögdú[
	`PDX
(
KERNBASE
)];

261 
	`l¸3
(
boŸ_¸3
);

264 
¸0
 = 
	`r¸0
();

265 
¸0
 |
CR0_PE
|
CR0_PG
|
CR0_AM
|
CR0_WP
|
CR0_NE
|
CR0_TS
|
CR0_EM
|
CR0_MP
;

266 
¸0
 &~(
CR0_TS
|
CR0_EM
);

267 
	`l¸0
(
¸0
);

273 
asm
 volatile("lgdt gdt_pd");

274 
asm
 vﬁ©ûe("movw %%ax,%%gs" :: "a" (
GD_UD
|3));

275 
asm
 vﬁ©ûe("movw %%ax,%%fs" :: "a" (
GD_UD
|3));

276 
asm
 vﬁ©ûe("movw %%ax,%%es" :: "a" (
GD_KD
));

277 
asm
 vﬁ©ûe("movw %%ax,%%ds" :: "a" (
GD_KD
));

278 
asm
 vﬁ©ûe("movw %%ax,%%ss" :: "a" (
GD_KD
));

279 
asm
 vﬁ©ûe("ljm∞%0,$1f\¿1:\n" :: "i" (
GD_KT
));

280 
asm
 volatile("lldt %%ax" :: "a" (0));

286 
pgdú
[0] = 0;

289 
	`l¸3
(
boŸ_¸3
);

290 
	}
}

297 
	$check_∑ge_Æloc
()

299 
Page
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

300 
Page_li°
 
Ê
;

305 
	`LIST_FOREACH
(
µ0
, &
∑ge_‰ì_li°
, 
µ_lök
)

306 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0x97, 128);

308 
	`LIST_FOREACH
(
µ0
, &
∑ge_‰ì_li°
, 
µ_lök
) {

310 
	`as£π
(
µ0
 >
∑ges
);

311 
	`as£π
(
µ0
 < 
∑ges
 + 
≈age
);

314 
	`as£π
(
	`∑ge2∑
(
µ0
) != 0);

315 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
IOPHYSMEM
);

316 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
 - 
PGSIZE
);

317 
	`as£π
(
	`∑ge2∑
(
µ0
Ë!
EXTPHYSMEM
);

318 
	`as£π
(
	`∑ge2kva
(
µ0
Ë!
	`ROUNDDOWN
(
boŸ_‰ìmem
 - 1, 
PGSIZE
));

322 
µ0
 = 
µ1
 = 
µ2
 = 0;

323 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

324 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

325 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

327 
	`as£π
(
µ0
);

328 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

329 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

330 
	`as£π
(
	`∑ge2∑
(
µ0
Ë< 
≈age
*
PGSIZE
);

331 
	`as£π
(
	`∑ge2∑
(
µ1
Ë< 
≈age
*
PGSIZE
);

332 
	`as£π
(
	`∑ge2∑
(
µ2
Ë< 
≈age
*
PGSIZE
);

335 
Ê
 = 
∑ge_‰ì_li°
;

336 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

339 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

342 
	`∑ge_‰ì
(
µ0
);

343 
	`∑ge_‰ì
(
µ1
);

344 
	`∑ge_‰ì
(
µ2
);

345 
µ0
 = 
µ1
 = 
µ2
 = 0;

346 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

347 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

348 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

349 
	`as£π
(
µ0
);

350 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

351 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

352 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

355 
∑ge_‰ì_li°
 = 
Ê
;

358 
	`∑ge_‰ì
(
µ0
);

359 
	`∑ge_‰ì
(
µ1
);

360 
	`∑ge_‰ì
(
µ2
);

362 
	`˝rötf
("check_page_alloc() succeeded!\n");

363 
	}
}

373 
phyßddr_t
 
check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
);

376 
	$check_boŸ_pgdú
()

378 
uöt32_t
 
i
, 
n
;

379 
pde_t
 *
pgdú
;

381 
pgdú
 = 
boŸ_pgdú
;

384 
n
 = 
	`ROUNDUP
(
≈age
*(
Page
), 
PGSIZE
);

385 
i
 = 0; i < 
n
; i +
PGSIZE
)

386 
	`as£π
(
	`check_va2∑
(
pgdú
, 
UPAGES
 + 
i
Ë=
	`PADDR
(
∑ges
) + i);

389 
n
 = 
	`ROUNDUP
(
NENV
*(
Env
), 
PGSIZE
);

390 
i
 = 0; i < 
n
; i +
PGSIZE
)

391 
	`as£π
(
	`check_va2∑
(
pgdú
, 
UENVS
 + 
i
Ë=
	`PADDR
(
ívs
) + i);

394 
i
 = 0; i < 
≈age
 * 
PGSIZE
; i += PGSIZE)

395 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KERNBASE
 + 
i
) == i);

398 
i
 = 0; i < 
KSTKSIZE
; i +
PGSIZE
)

399 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
KSTKSIZE
 + 
i
Ë=
	`PADDR
(
boŸ°ack
) + i);

400 
	`as£π
(
	`check_va2∑
(
pgdú
, 
KSTACKTOP
 - 
PTSIZE
) == ~0);

403 
i
 = 0; i < 
NPDENTRIES
; i++) {

404 
i
) {

405 
	`PDX
(
VPT
):

406 
	`PDX
(
UVPT
):

407 
	`PDX
(
KSTACKTOP
-1):

408 
	`PDX
(
UPAGES
):

409 
	`PDX
(
UENVS
):

410 
	`as£π
(
pgdú
[
i
]);

413 i‡(
i
 >
	`PDX
(
KERNBASE
))

414 
	`as£π
(
pgdú
[
i
]);

416 
	`as£π
(
pgdú
[
i
] == 0);

420 
	`˝rötf
("check_boot_pgdir() succeeded!\n");

421 
	}
}

428 
phyßddr_t


429 
	$check_va2∑
(
pde_t
 *
pgdú
, 
uöçå_t
 
va
)

431 
±e_t
 *
p
;

433 
pgdú
 = &pgdú[
	`PDX
(
va
)];

434 i‡(!(*
pgdú
 & 
PTE_P
))

436 
p
 = (
±e_t
*Ë
	`KADDR
(
	`PTE_ADDR
(*
pgdú
));

437 i‡(!(
p
[
	`PTX
(
va
)] & 
PTE_P
))

439  
	`PTE_ADDR
(
p
[
	`PTX
(
va
)]);

440 
	}
}

455 
	$∑ge_öô
()

471 
i
;

472 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

473 
i
 = 0; i < 
≈age
; i++) {

474 
∑ges
[
i
].
µ_ªf
 = 0;

475 
	`LIST_INSERT_HEAD
(&
∑ge_‰ì_li°
, &
∑ges
[
i
], 
µ_lök
);

477 
∑ges
[0].
µ_ªf
=1;

478 
	`LIST_REMOVE
(&
∑ges
[0],
µ_lök
);

479 
i
=
	`PPN
(
IOPHYSMEM
);i<=PPN(
	`ROUNDUP
(
	`PADDR
(
boŸ_‰ìmem
),
PGSIZE
));i++){

481 
∑ges
[
i
].
µ_ªf
=1;

482 
	`LIST_REMOVE
(&
∑ges
[
i
],
µ_lök
);

484 
	}
}

492 
	$∑ge_öôµ
(
Page
 *
µ
)

494 
	`mem£t
(
µ
, 0, (*pp));

495 
	}
}

512 
	$∑ge_Æloc
(
Page
 **
µ_°‹e
)

515 if(!
	`LIST_EMPTY
(&
∑ge_‰ì_li°
)){

517 *
µ_°‹e
=(
Page
*)
	`LIST_FIRST
(&
∑ge_‰ì_li°
);

518 
	`LIST_REMOVE
(*
µ_°‹e
,
µ_lök
);

519 
	`∑ge_öôµ
(*
µ_°‹e
);

525  -
E_NO_MEM
;

526  -
E_NO_MEM
;

527 
	}
}

534 
	$∑ge_‰ì
(
Page
 *
µ
)

537 if(
∑ges
[
	`∑ge2µn
(
µ
)].
µ_ªf
==0){

538 
	`LIST_INSERT_HEAD
(&
∑ge_‰ì_li°
,
µ
,
µ_lök
);

540 
	}
}

547 
	$∑ge_de¸ef
(
Page
* 
µ
)

549 i‡(--
µ
->
µ_ªf
 == 0)

550 
	`∑ge_‰ì
(
µ
);

551 
	}
}

571 
±e_t
 *

572 
	$pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
)

575 
pde_t
 *
pde
;

576 
±e_t
 *
pgèb
;

577 
±e_t
 *
µ_°‹e
;

578 
Page
 *
pgf‹èb
;

579 
pde
 = &
pgdú
[
	`PDX
(
va
)];

582 if(*
pde
 & 
PTE_P
){

583 
pgèb
 = (
±e_t
*)
	`KADDR
(
	`PTE_ADDR
(*
pde
));

585 if(!
¸óã
)

586  
NULL
;

587 if(
	`∑ge_Æloc
(&
pgf‹èb
)<0)

588  
NULL
;

589 
pgf‹èb
->
µ_ªf
=1;

591 
pgèb
 = (
±e_t
*)
	`KADDR
(
	`∑ge2∑
(
pgf‹èb
));

593 
	`mem£t
(
pgèb
,0,
PGSIZE
);

594 *
pde
 = 
	`PADDR
(
pgèb
Ë| 
PTE_P
 | 
PTE_W
 | 
PTE_U
;

597 
µ_°‹e
=&
pgèb
[
	`PTX
(
va
)];

598  
µ_°‹e
;

600 
	}
}

625 
	$∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
µ
, *
va
, 
≥rm
)

628 
±e_t
 *
±e
;

629 if(!(
±e
=
	`pgdú_wÆk
(
pgdú
, 
va
, 1)))

630  -
E_NO_MEM
;

632 if(*
±e
&
PTE_P
){

633 if(
	`PTE_ADDR
(*
±e
)!=
	`∑ge2∑
(
µ
))

634 
	`∑ge_ªmove
(
pgdú
,
va
);

636 
µ
->
µ_ªf
--;

638 *
±e
 = 
	`∑ge2∑
(
µ
Ë| 
≥rm
 | 
PTE_P
;

640 
µ
->
µ_ªf
++;

641 
	`éb_övÆid©e
(
pgdú
,
va
);

645 
	}
}

658 
	$boŸ_m≠_£gmít
(
pde_t
 *
pgdú
, 
uöçå_t
 
œ
, 
size_t
 
size
, 
phyßddr_t
 
∑
, 
≥rm
)

661 
uöçå_t
 
a
,
œ°
;

662 
±e_t
 *
±e
;

664 
a
=
	`ROUNDDOWN
(
œ
,
PGSIZE
);

665 
œ°
=
	`ROUNDDOWN
(
œ
+
size
-1,
PGSIZE
);

668 
±e
 = 
	`pgdú_wÆk
(
pgdú
,(*)
a
,1);

669 if(
±e
==
NULL
)

671 if(*
±e
&
PTE_P
)

672 
	`∑nic
("remap");

673 *
±e
=
∑
 | 
≥rm
 | 
PTE_P
;

678 if(
a
==
œ°
)

680 
a
+=
PGSIZE
;

681 
∑
+=
PGSIZE
;

684 
	}
}

697 
Page
 *

698 
	$∑ge_lookup
(
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
)

701 
Page
 *
∑gef‹va
;

702 
±e_t
 *
±e
;

703 if(!(
±e
=
	`pgdú_wÆk
(
pgdú
,
va
,0)))

704  
NULL
;

706 
∑gef‹va
=
	`∑2∑ge
(
	`PTE_ADDR
(*
±e
));

708 if(
±e_°‹e
)

709 *
±e_°‹e
=
±e
;

711  
∑gef‹va
;

713 
	}
}

731 
	$∑ge_ªmove
(
pde_t
 *
pgdú
, *
va
)

734 
Page
 *
∑gef‹va
;

735 
±e_t
 *
±e
=
NULL
;

736 if((
∑gef‹va
=
	`∑ge_lookup
(
pgdú
,
va
,&
±e
))){

737 
	`∑ge_de¸ef
(
∑gef‹va
);

739 if(
±e
)

740 *
±e
=0;

741 
	`éb_övÆid©e
(
pgdú
,
va
);

743 
	}
}

750 
	$éb_övÆid©e
(
pde_t
 *
pgdú
, *
va
)

753 i‡(!
cuªnv
 || cuªnv->
ív_pgdú
 =
pgdú
)

754 
	`övÕg
(
va
);

755 
	}
}

757 
uöçå_t
 
	gu£r_mem_check_addr
;

778 
	$u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

781 
uöçå_t
 
a
,
œ°
;

782 
±e_t
 *
±e
;

783 
Page
 *
⁄ïage
;

784 
a
=(
uöçå_t
)
va
;

785 
u£r_mem_check_addr
=
a
;

786 
a
=
	`ROUNDDOWN
◊,
PGSIZE
);

787 
œ°
=
	`ROUNDDOWN
(
a
+
Àn
,
PGSIZE
);

789 if(
a
>=
ULIM
) {

790 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

791 
u£r_mem_check_addr
=
a
;

792  -
E_FAULT
;

795 if(!(
⁄ïage
=
	`∑ge_lookup
(
ív
->
ív_pgdú
,(*)
a
,&
±e
)))

797 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

798 
u£r_mem_check_addr
=
a
;

799  -
E_FAULT
;

801 if(!(*
±e
&
≥rm
))

803 if((
u£r_mem_check_addr
&0xfffff000)!=
a
)

804 
u£r_mem_check_addr
=
a
;

805  -
E_FAULT
;

810 if(
a
==
œ°
)

812 
a
+=
PGSIZE
;

815 
	}
}

825 
	$u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
)

827 i‡(
	`u£r_mem_check
(
ív
, 
va
, 
Àn
, 
≥rm
 | 
PTE_U
) < 0) {

828 
	`˝rötf
("[%08x] user_mem_checkássertion failure for "

829 "v®%08x\n", 
ív
->
ív_id
, 
u£r_mem_check_addr
);

830 
	`ív_de°roy
(
ív
);

832 
	}
}

836 
	$∑ge_check
()

838 
Page
 *
µ
, *
µ0
, *
µ1
, *
µ2
;

839 
Page_li°
 
Ê
;

840 
±e_t
 *
±ï
, *
±ï1
;

841 *
va
;

842 
i
;

845 
µ0
 = 
µ1
 = 
µ2
 = 0;

846 
	`as£π
(
	`∑ge_Æloc
(&
µ0
) == 0);

847 
	`as£π
(
	`∑ge_Æloc
(&
µ1
) == 0);

848 
	`as£π
(
	`∑ge_Æloc
(&
µ2
) == 0);

850 
	`as£π
(
µ0
);

851 
	`as£π
(
µ1
 &&Öp1 !
µ0
);

852 
	`as£π
(
µ2
 &&Öp2 !
µ1
 &&Öp2 !
µ0
);

855 
Ê
 = 
∑ge_‰ì_li°
;

856 
	`LIST_INIT
(&
∑ge_‰ì_li°
);

859 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

862 
	`as£π
(
	`∑ge_lookup
(
boŸ_pgdú
, (*Ë0x0, &
±ï
Ë=
NULL
);

865 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0) < 0);

868 
	`∑ge_‰ì
(
µ0
);

869 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0) == 0);

870 
	`as£π
(
	`PTE_ADDR
(
boŸ_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

871 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0Ë=
	`∑ge2∑
(
µ1
));

872 
	`as£π
(
µ1
->
µ_ªf
 == 1);

873 
	`as£π
(
µ0
->
µ_ªf
 == 1);

876 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 0) == 0);

877 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

878 
	`as£π
(
µ2
->
µ_ªf
 == 1);

881 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

884 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 0) == 0);

885 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

886 
	`as£π
(
µ2
->
µ_ªf
 == 1);

890 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

893 
±ï
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
PGSIZE
)]));

894 
	`as£π
(
	`pgdú_wÆk
(
boŸ_pgdú
, (*)
PGSIZE
, 0Ë=
±ï
+
	`PTX
(PGSIZE));

897 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, (*Ë
PGSIZE
, 
PTE_U
) == 0);

898 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ2
));

899 
	`as£π
(
µ2
->
µ_ªf
 == 1);

900 
	`as£π
(*
	`pgdú_wÆk
(
boŸ_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
);

901 
	`as£π
(
boŸ_pgdú
[0] & 
PTE_U
);

904 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ0
, (*Ë
PTSIZE
, 0) < 0);

907 
	`as£π
(
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, (*Ë
PGSIZE
, 0) == 0);

908 
	`as£π
(!(*
	`pgdú_wÆk
(
boŸ_pgdú
, (*Ë
PGSIZE
, 0Ë& 
PTE_U
));

911 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0Ë=
	`∑ge2∑
(
µ1
));

912 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

914 
	`as£π
(
µ1
->
µ_ªf
 == 2);

915 
	`as£π
(
µ2
->
µ_ªf
 == 0);

918 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=0 &&Ö∞=
µ2
);

921 
	`∑ge_ªmove
(
boŸ_pgdú
, 0x0);

922 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0) == ~0);

923 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
Ë=
	`∑ge2∑
(
µ1
));

924 
	`as£π
(
µ1
->
µ_ªf
 == 1);

925 
	`as£π
(
µ2
->
µ_ªf
 == 0);

928 
	`∑ge_ªmove
(
boŸ_pgdú
, (*Ë
PGSIZE
);

929 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 0x0) == ~0);

930 
	`as£π
(
	`check_va2∑
(
boŸ_pgdú
, 
PGSIZE
) == ~0);

931 
	`as£π
(
µ1
->
µ_ªf
 == 0);

932 
	`as£π
(
µ2
->
µ_ªf
 == 0);

935 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=0 &&Ö∞=
µ1
);

938 
	`as£π
(
	`∑ge_Æloc
(&
µ
Ë=-
E_NO_MEM
);

943 
	`mem£t
(
	`∑ge2kva
(
µ1
), 1, 
PGSIZE
);

944 
	`mem£t
(
	`∑ge2kva
(
µ2
), 2, 
PGSIZE
);

945 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ1
, 0x0, 0);

946 
	`as£π
(
µ1
->
µ_ªf
 == 1);

947 
	`as£π
(*(*)0 == 0x01010101);

948 
	`∑ge_ö£π
(
boŸ_pgdú
, 
µ2
, 0x0, 0);

949 
	`as£π
(*(*)0 == 0x02020202);

950 
	`as£π
(
µ2
->
µ_ªf
 == 1);

951 
	`as£π
(
µ1
->
µ_ªf
 == 0);

952 
	`∑ge_ªmove
(
boŸ_pgdú
, 0x0);

953 
	`as£π
(
µ2
->
µ_ªf
 == 0);

957 
	`as£π
(
	`PTE_ADDR
(
boŸ_pgdú
[0]Ë=
	`∑ge2∑
(
µ0
));

958 
boŸ_pgdú
[0] = 0;

959 
	`as£π
(
µ0
->
µ_ªf
 == 1);

960 
µ0
->
µ_ªf
 = 0;

963 
	`∑ge_‰ì
(
µ0
);

964 
va
 = (*)(
PGSIZE
 * 
NPDENTRIES
 + PGSIZE);

965 
±ï
 = 
	`pgdú_wÆk
(
boŸ_pgdú
, 
va
, 1);

966 
±ï1
 = 
	`KADDR
(
	`PTE_ADDR
(
boŸ_pgdú
[
	`PDX
(
va
)]));

967 
	`as£π
(
±ï
 =
±ï1
 + 
	`PTX
(
va
));

968 
boŸ_pgdú
[
	`PDX
(
va
)] = 0;

969 
µ0
->
µ_ªf
 = 0;

972 
	`mem£t
(
	`∑ge2kva
(
µ0
), 0xFF, 
PGSIZE
);

973 
	`∑ge_‰ì
(
µ0
);

974 
	`pgdú_wÆk
(
boŸ_pgdú
, 0x0, 1);

975 
±ï
 = 
	`∑ge2kva
(
µ0
);

976 
i
=0; i<
NPTENTRIES
; i++)

977 
	`as£π
((
±ï
[
i
] & 
PTE_P
) == 0);

978 
boŸ_pgdú
[0] = 0;

979 
µ0
->
µ_ªf
 = 0;

982 
∑ge_‰ì_li°
 = 
Ê
;

985 
	`∑ge_‰ì
(
µ0
);

986 
	`∑ge_‰ì
(
µ1
);

987 
	`∑ge_‰ì
(
µ2
);

989 
	`˝rötf
("page_check() succeeded!\n");

990 
	}
}

	@kern/pmap.h

3 #i‚de‡
JOS_KERN_PMAP_H


4 
	#JOS_KERN_PMAP_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/memœyout.h
>

10 
	~<öc/as£π.h
>

11 
	gEnv
;

19 
	#PADDR
(
kva
) \

21 
phyßddr_t
 
__m_kva
 = (phyßddr_tË(
kva
); \

22 i‡(
__m_kva
 < 
KERNBASE
) \

23 
	`∑nic
("PADDR cÆÀd wôh invÆid kv®%08lx", 
__m_kva
);\

24 
__m_kva
 - 
KERNBASE
; \

25 })

	)

29 
	#KADDR
(
∑
) \

31 
phyßddr_t
 
__m_∑
 = (
∑
); \

32 
uöt32_t
 
__m_µn
 = 
	`PPN
(
__m_∑
); \

33 i‡(
__m_µn
 >
≈age
) \

34 
	`∑nic
("KADDR cÆÀd wôh invÆidÖ®%08lx", 
__m_∑
);\

35 (*Ë(
__m_∑
 + 
KERNBASE
); \

36 })

	)

40 
boŸ°ackt›
[], 
boŸ°ack
[];

42 
Page
 *
∑ges
;

43 
size_t
 
≈age
;

45 
phyßddr_t
 
boŸ_¸3
;

46 
pde_t
 *
boŸ_pgdú
;

48 
Segdesc
 
gdt
[];

49 
P£udodesc
 
gdt_pd
;

51 
i386_vm_öô
();

52 
i386_dëe˘_mem‹y
();

54 
∑ge_öô
();

55 
∑ge_Æloc
(
Page
 **
µ_°‹e
);

56 
∑ge_‰ì
(
Page
 *
µ
);

57 
∑ge_ö£π
(
pde_t
 *
pgdú
, 
Page
 *
µ
, *
va
, 
≥rm
);

58 
∑ge_ªmove
(
pde_t
 *
pgdú
, *
va
);

59 
Page
 *
∑ge_lookup
(
pde_t
 *
pgdú
, *
va
, 
±e_t
 **
±e_°‹e
);

60 
∑ge_de¸ef
(
Page
 *
µ
);

62 
éb_övÆid©e
(
pde_t
 *
pgdú
, *
va
);

64 
u£r_mem_check
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

65 
u£r_mem_as£π
(
Env
 *
ív
, c⁄° *
va
, 
size_t
 
Àn
, 
≥rm
);

67 
ölöe
 
µn_t


68 
	$∑ge2µn
(
Page
 *
µ
)

70  
µ
 - 
∑ges
;

71 
	}
}

73 
ölöe
 
phyßddr_t


74 
	$∑ge2∑
(
Page
 *
µ
)

76  
	`∑ge2µn
(
µ
Ë<< 
PGSHIFT
;

77 
	}
}

79 
ölöe
 
Page
*

80 
	$∑2∑ge
(
phyßddr_t
 
∑
)

82 i‡(
	`PPN
(
∑
Ë>
≈age
)

83 
	`∑nic
("pa2page called with invalidÖa");

84  &
∑ges
[
	`PPN
(
∑
)];

85 
	}
}

87 
ölöe
 *

88 
	$∑ge2kva
(
Page
 *
µ
)

90  
	`KADDR
(
	`∑ge2∑
(
µ
));

91 
	}
}

93 
±e_t
 *
pgdú_wÆk
(
pde_t
 *
pgdú
, c⁄° *
va
, 
¸óã
);

	@kern/printf.c

4 
	~<öc/ty≥s.h
>

5 
	~<öc/°dio.h
>

6 
	~<öc/°d¨g.h
>

10 
	$putch
(
ch
, *
˙t
)

12 
	`˝utch¨
(
ch
);

13 *
˙t
++;

14 
	}
}

17 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

19 
˙t
 = 0;

21 
	`v¥ötfmt
((*)
putch
, &
˙t
, 
fmt
, 
≠
);

22  
˙t
;

23 
	}
}

26 
	$˝rötf
(c⁄° *
fmt
, ...)

28 
va_li°
 
≠
;

29 
˙t
;

31 
	`va_°¨t
(
≠
, 
fmt
);

32 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

33 
	`va_íd
(
≠
);

35  
˙t
;

36 
	}
}

	@kern/sched.c

1 
	~<öc/as£π.h
>

3 
	~<kîn/ív.h
>

4 
	~<kîn/pm≠.h
>

5 
	~<kîn/m⁄ô‹.h
>

10 
	$sched_yõld
()

22 
uöt32_t
 
ªã•
;

23 
ívid_t
 
ívid
;

24 
ödex
=0,
i
;

25 if(
cuªnv
){

27 
ödex
=
	`ENVX
(
cuªnv
->
ív_id
)-ENVX(
ívs
[0].env_id);

51 
i
=1;i<=
NENV
;i++)

53 
ívid
=(
i
+
ödex
)%
NENV
;

54 if(
ívs
[
ívid
].
ív_°©us
==
ENV_RUNNABLE
)

56 if(
ívid
==0)

59 
	`ív_run
(&
ívs
[
ívid
]);

65 i‡(
ívs
[0].
ív_°©us
 =
ENV_RUNNABLE
)

66 
	`ív_run
(&
ívs
[0]);

68 
	`˝rötf
("DestroyedállÉnvironments -Çothing moreÅo do!\n");

70 
	`m⁄ô‹
(
NULL
);

72 
	}
}

	@kern/sched.h

3 #i‚de‡
JOS_KERN_SCHED_H


4 
	#JOS_KERN_SCHED_H


	)

5 #i‚de‡
JOS_KERNEL


10 
	$sched_yõld
(Ë
	`__©åibuã__
((
n‹ëu∫
));

	@kern/syscall.c

3 
	~<öc/x86.h
>

4 
	~<öc/îr‹.h
>

5 
	~<öc/°rög.h
>

6 
	~<öc/as£π.h
>

8 
	~<kîn/ív.h
>

9 
	~<kîn/pm≠.h
>

10 
	~<kîn/å≠.h
>

11 
	~<kîn/sysˇŒ.h
>

12 
	~<kîn/c⁄sﬁe.h
>

13 
	~<kîn/sched.h
>

19 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

25 
	`u£r_mem_as£π
(
cuªnv
,(*)
s
,
Àn
,0);

27 
	`˝rötf
("%.*s", 
Àn
, 
s
);

28 
	}
}

33 
	$sys_cgëc
()

35  
	`c⁄s_gëc
();

36 
	}
}

39 
ívid_t


40 
	$sys_gëívid
()

42  
cuªnv
->
ív_id
;

43 
	}
}

51 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

53 
r
;

54 
Env
 *
e
;

56 i‡((
r
 = 
	`ívid2ív
(
ívid
, &
e
, 1)) < 0)

57  
r
;

58 
	`ív_de°roy
(
e
);

60 
	}
}

64 
	$sys_yõld
()

66 
	`sched_yõld
();

67 
	}
}

73 
ívid_t


74 
	$sys_exof‹k
()

83 
r
;

84 
Env
 *
chûdív
;

85 if((
r
=
	`ív_Æloc
(&
chûdív
,
cuªnv
->
ív_id
))<0)

87 
	`˝rötf
("env_alloc failed\n");

88  
r
;

90 
chûdív
->
ív_°©us
=
ENV_NOT_RUNNABLE
;

92 
	`memmove
(&
chûdív
->
ív_tf
,&
cuªnv
->ív_tf,(
Tøp‰ame
));

93 
chûdív
->
ív_tf
.
tf_ªgs
.
ªg_óx
=0;

95  
chûdív
->
ív_id
;

97 
	}
}

107 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

116 
r
;

117 
Env
 *
e
;

118 if(
°©us
>2||status<0)

119  -
E_INVAL
;

120 if(
ívid
==0)

121 
e
=
cuªnv
;

123 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

125  
r
;

127 
e
->
ív_°©us
=
°©us
;

130 
	}
}

140 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

145 
	`∑nic
("sys_env_set_trapframeÇot implemented");

146 
	}
}

157 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
func
)

160 
r
;

161 
Env
 *
e
;

162 if(
ívid
==0)

163 
e
=
cuªnv
;

165 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

166  
r
;

167 
e
->
ív_pgÁu…_upˇŒ
=
func
;

170 
	}
}

189 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

199 
r
;

200 
Env
 *
e
;

201 
Page
 *
pg
;

202 
phyßddr_t
 
ﬁd_¸3
;

203 
uöt32_t
 *
∑ge
;

204 if(
ívid
==0)

205 
e
=
cuªnv
;

207 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

209  
r
;

211 if((
uöt32_t
)
va
>=
UTOP
||((uint32_t)va&0xfff))

212  -
E_INVAL
;

213 if(
≥rm
&(~
PTE_USER
))

214  -
E_INVAL
;

215 if((
r
=
	`∑ge_Æloc
(&
pg
))<0)

216  
r
;

217 
∑ge
 = (
uöt32_t
*)
	`KADDR
(
	`∑ge2∑
(
pg
));

219 
	`mem£t
(
∑ge
,0,
PGSIZE
);

220 
ﬁd_¸3
=
	`r¸3
();

221 
	`l¸3
(
e
->
ív_¸3
);

222 if((
r
=
	`∑ge_ö£π
(
e
->
ív_pgdú
,
pg
,
va
,
≥rm
))<0)

224 
	`∑ge_‰ì
(
pg
);

225 
	`l¸3
(
ﬁd_¸3
);

226  
r
;

228 
	`l¸3
(
ﬁd_¸3
);

231 
	}
}

250 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nvid
, *
§cva
,

251 
ívid_t
 
d°ívid
, *
d°va
, 
≥rm
)

261 
r
;

262 
Env
 *
§˚nv
,*
d°ív
;

263 
Page
 *
pg
;

264 
±e_t
 *
±e
;

265 
phyßddr_t
 
ﬁd_¸3
;

267 if(
§˚nvid
==0)

268 
§˚nv
=
cuªnv
;

270 if((
r
=
	`ívid2ív
(
§˚nvid
,&
§˚nv
,1))<0)

272  
r
;

274 if(
d°ívid
==0)

275 
d°ív
=
cuªnv
;

277 if((
r
=
	`ívid2ív
(
d°ívid
,&
d°ív
,1))<0)

279  
r
;

281 if(((
uöt32_t
)
§cva
>=
UTOP
)||((uöt32_t)§cva&0xfff)||((uöt32_t)
d°va
>=UTOP)||((uint32_t)srcva&0xfff))

282  -
E_INVAL
;

283 if(
≥rm
&(~
PTE_USER
))

284  -
E_INVAL
;

285 
ﬁd_¸3
=
	`r¸3
();

286 
	`l¸3
(
§˚nv
->
ív_¸3
);

287 if(!(
pg
=
	`∑ge_lookup
(
§˚nv
->
ív_pgdú
,
§cva
,&
±e
)))

288  -
E_INVAL
;

289 if(!(*
±e
&
PTE_W
)&&(
≥rm
&PTE_W))

290  -
E_INVAL
;

291 
	`l¸3
(
d°ív
->
ív_¸3
);

292 if((
r
=
	`∑ge_ö£π
(
d°ív
->
ív_pgdú
,
pg
,
d°va
,
≥rm
))<0)

293  
r
;

294 
	`l¸3
(
ﬁd_¸3
);

297 
	}
}

307 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

312 
r
;

313 
Env
 *
e
;

314 
phyßddr_t
 
ﬁd_¸3
;

315 if(
ívid
==0)

316 
e
=
cuªnv
;

318 if((
r
=
	`ívid2ív
(
ívid
,&
e
,1))<0)

320  
r
;

322 if((
uöt32_t
)
va
>=
UTOP
||((uint32_t)va&0xfff))

323  -
E_INVAL
;

324 
ﬁd_¸3
=
	`r¸3
();

325 
	`l¸3
(
e
->
ív_¸3
);

326 
	`∑ge_ªmove
(
e
->
ív_pgdú
,
va
);

327 
	`l¸3
(
ﬁd_¸3
);

330 
	}
}

371 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt32_t
 
vÆue
, *
§cva
, 
≥rm
)

374 
r
;

375 
Env
 *
e
;

376 
Page
 *
pg
;

377 
±e_t
 *
±e
;

378 
uöt32_t
 
§ˇddr
=0;

380 if((
ívid
==0)||”nvid==
cuªnv
->
ív_id
))

382 
	`˝rötf
("thêßmê£nd:ívid=%x\n",
cuªnv
->
ív_id
);

383 
e
=
cuªnv
;

386 if((
r
=
	`ívid2ív
(
ívid
,&
e
,0))<0)

388  
r
;

390 if(!
e
->
ív_ùc_ªcvög
)

391  -
E_IPC_NOT_RECV
;

392 if(
§cva
){

393 
§ˇddr
=(
uöt32_t
)
§cva
;

394 if(
§ˇddr
<(
uöt32_t
)
UTOP
){

395 if(
§ˇddr
&0xfff)

396  -
E_INVAL
;

397 if((
r
=
	`sys_∑ge_m≠
(
cuªnv
->
ív_id
,
§cva
,
ívid
,
e
->
ív_ùc_d°va
,
≥rm
))<0)

398  
r
;

401 
≥rm
=0;

402 
e
->
ív_ùc_‰om
=
cuªnv
->
ív_id
;

403 
e
->
ív_ùc_≥rm
=
≥rm
;

404 
e
->
ív_ùc_vÆue
=
vÆue
;

405 
e
->
ív_ùc_ªcvög
=0;

406 
e
->
ív_°©us
=
ENV_RUNNABLE
;

409 
	}
}

423 
	$sys_ùc_ªcv
(*
d°va
)

426 
uöt32_t
 
d°addr
;

427 
d°addr
=(
uöt32_t
)
d°va
;

428 if((
d°addr
<(
uöt32_t
)
UTOP
)&&(dstaddr&0xfff))

429  -
E_INVAL
;

430 
cuªnv
->
ív_ùc_d°va
=
d°va
;

431 
cuªnv
->
ív_ùc_ªcvög
=1;

432 
cuªnv
->
ív_tf
.
tf_ªgs
.
ªg_óx
=0;

433 
cuªnv
->
ív_°©us
=
ENV_NOT_RUNNABLE
;

434 
	`sched_yõld
();

437 
	}
}

441 
öt32_t


442 
	$sysˇŒ
(
uöt32_t
 
sysˇŒno
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

447 
r
;

448 
sysˇŒno
){

449 
SYS_˝uts
:

450 
	`sys_˝uts
((*)
a1
,(
size_t
)
a2
);

452 
SYS_cgëc
:

453  
	`sys_cgëc
();

455 
SYS_gëívid
:

456  
	`sys_gëívid
();

458 
SYS_ív_de°roy
:

459  
	`sys_ív_de°roy
((
ívid_t
)
a1
);

461 
SYS_yõld
:

462 
	`sys_yõld
();

464 
SYS_exof‹k
:

465  
	`sys_exof‹k
();

467 
SYS_ív_£t_°©us
:

468  
	`sys_ív_£t_°©us
((
ívid_t
)
a1
,()
a2
);

470 
SYS_∑ge_Æloc
:

471  
	`sys_∑ge_Æloc
((
ívid_t
)
a1
,(*)
a2
,()
a3
);

473 
SYS_∑ge_m≠
:

474  
	`sys_∑ge_m≠
((
ívid_t
)
a1
,(*)
a2
,”nvid_t)
a3
,(*)
a4
,()
a5
);

476 
SYS_∑ge_unm≠
:

477  
	`sys_∑ge_unm≠
((
ívid_t
)
a1
,(*)
a2
);

479 
SYS_ív_£t_pgÁu…_upˇŒ
:

480  
	`sys_ív_£t_pgÁu…_upˇŒ
((
ívid_t
)
a1
,(*)
a2
);

482 
SYS_ùc_åy_£nd
:

483  
	`sys_ùc_åy_£nd
((
ívid_t
)
a1
,(
uöt32_t
)
a2
,(*)
a3
,()
a4
);

485 
SYS_ùc_ªcv
:

486  
	`sys_ùc_ªcv
((*)
a1
);

489 
	`∑nic
("syscall isÇot implemented");

493 
	}
}

	@kern/syscall.h

1 #i‚de‡
JOS_KERN_SYSCALL_H


2 
	#JOS_KERN_SYSCALL_H


	)

3 #i‚de‡
JOS_KERNEL


7 
	~<öc/sysˇŒ.h
>

9 
öt32_t
 
sysˇŒ
(
uöt32_t
 
num
, uöt32_à
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
);

	@kern/trap.c

1 
	~<öc/mmu.h
>

2 
	~<öc/x86.h
>

3 
	~<öc/as£π.h
>

5 
	~<kîn/pm≠.h
>

6 
	~<kîn/å≠.h
>

7 
	~<kîn/c⁄sﬁe.h
>

8 
	~<kîn/m⁄ô‹.h
>

9 
	~<kîn/ív.h
>

10 
	~<kîn/sysˇŒ.h
>

11 
	~<kîn/sched.h
>

12 
	~<kîn/k˛ock.h
>

13 
	~<kîn/picúq.h
>

15 
Task°©e
 
	gts
;

20 
G©edesc
 
	gidt
[256] = { { 0 } };

21 
P£udodesc
 
	gidt_pd
 = {

22 (
idt
Ë- 1, (
uöt32_t
) idt

25 
uöt32_t
 
ve˘‹s
[];

26 c⁄° *
	$å≠«me
(
å≠no
)

28 c⁄° * c⁄° 
ex˙ames
[] = {

51 i‡(
å≠no
 < (
ex˙ames
)/(excnames[0]))

52  
ex˙ames
[
å≠no
];

53 i‡(
å≠no
 =
T_SYSCALL
)

55 i‡(
å≠no
 >
IRQ_OFFSET
 &&Årapno < IRQ_OFFSET + 16)

58 
	}
}

62 
	$idt_öô
()

64 
Segdesc
 
gdt
[];

67 
i
;

68 
i
=0;i<32;i++)

69 
	`SETGATE
(
idt
[
i
],0,
GD_KT
,
ve˘‹s
[i],0);

70 
	`SETGATE
(
idt
[3],0,
GD_KT
,
ve˘‹s
[3],3);

71 
	`SETGATE
(
idt
[4],0,
GD_KT
,
ve˘‹s
[4],3);

72 
	`SETGATE
(
idt
[5],0,
GD_KT
,
ve˘‹s
[5],3);

73 
i
=32;i<48;i++)

74 
	`SETGATE
(
idt
[
i
],0,
GD_KT
,
ve˘‹s
[i],0);

75 
	`SETGATE
(
idt
[48],0,
GD_KT
,
ve˘‹s
[48],3);

78 
ts
.
ts_e•0
 = 
KSTACKTOP
;

79 
ts
.
ts_ss0
 = 
GD_KD
;

82 
gdt
[
GD_TSS
 >> 3] = 
	`SEG16
(
STS_T32A
, (
uöt32_t
Ë(&
ts
),

83 (
Task°©e
), 0);

84 
gdt
[
GD_TSS
 >> 3].
sd_s
 = 0;

87 
	`…r
(
GD_TSS
);

90 
asm
 volatile("lidt idt_pd");

91 
	}
}

94 
	$¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
)

96 
	`˝rötf
("TRAP fømê© %p\n", 
tf
);

97 
	`¥öt_ªgs
(&
tf
->
tf_ªgs
);

98 
	`˝rötf
("É† 0x----%04x\n", 
tf
->
tf_es
);

99 
	`˝rötf
(" d† 0x----%04x\n", 
tf
->
tf_ds
);

100 
	`˝rötf
("Åø∞0x%08x %s\n", 
tf
->
tf_å≠no
, 
	`å≠«me
(tf->tf_trapno));

101 
	`˝rötf
("Éº 0x%08x\n", 
tf
->
tf_îr
);

102 
	`˝rötf
("Éù 0x%08x\n", 
tf
->
tf_eù
);

103 
	`˝rötf
(" c† 0x----%04x\n", 
tf
->
tf_cs
);

104 
	`˝rötf
(" fœg 0x%08x\n", 
tf
->
tf_eÊags
);

105 
	`˝rötf
("É• 0x%08x\n", 
tf
->
tf_e•
);

106 
	`˝rötf
(" s† 0x----%04x\n", 
tf
->
tf_ss
);

107 
	}
}

110 
	$¥öt_ªgs
(
PushRegs
 *
ªgs
)

112 
	`˝rötf
("Édò 0x%08x\n", 
ªgs
->
ªg_edi
);

113 
	`˝rötf
("Ésò 0x%08x\n", 
ªgs
->
ªg_esi
);

114 
	`˝rötf
("Éb∞ 0x%08x\n", 
ªgs
->
ªg_ebp
);

115 
	`˝rötf
(" oe• 0x%08x\n", 
ªgs
->
ªg_€•
);

116 
	`˝rötf
("Ébx 0x%08x\n", 
ªgs
->
ªg_ebx
);

117 
	`˝rötf
("Édx 0x%08x\n", 
ªgs
->
ªg_edx
);

118 
	`˝rötf
("Écx 0x%08x\n", 
ªgs
->
ªg_ecx
);

119 
	`˝rötf
("Éax 0x%08x\n", 
ªgs
->
ªg_óx
);

120 
	}
}

123 
	$å≠_di•©ch
(
Tøp‰ame
 *
tf
)

127 
tf
->
tf_å≠no
){

128 
T_PGFLT
:

129 
	`∑ge_Áu…_h™dÀr
(
tf
);

131 
T_BRKPT
:

132 
	`m⁄ô‹
(
tf
);

134 
T_DEBUG
:

135 
	`m⁄ô‹
(
tf
);

137 
T_SYSCALL
:

138 
cuªnv
->
ív_tf
.
tf_ªgs
.
ªg_óx
=
	`sysˇŒ
(
tf
->tf_ªgs.ªg_óx,tf->tf_ªgs.
ªg_edx
,tf->tf_ªgs.
ªg_ecx
,tf->tf_ªgs.
ªg_ebx
,tf->tf_ªgs.
ªg_edi
,tf->tf_ªgs.
ªg_esi
);

143 if(
tf
->
tf_å≠no
==
IRQ_OFFSET
 + 
IRQ_TIMER
){

144 
	`sched_yõld
();

149 i‡(
tf
->
tf_å≠no
 =
IRQ_OFFSET
 + 
IRQ_SPURIOUS
) {

150 
	`˝rötf
("Spurious interrupt on irq 7\n");

151 
	`¥öt_å≠‰ame
(
tf
);

158 
	`¥öt_å≠‰ame
(
tf
);

159 i‡(
tf
->
tf_cs
 =
GD_KT
)

160 
	`∑nic
("unhandledÅrap in kernel");

162 
	`ív_de°roy
(
cuªnv
);

166 
	}
}

169 
	$å≠
(
Tøp‰ame
 *
tf
)

173 
asm
 volatile("cld" ::: "cc");

178 
	`as£π
(!(
	`ªad_eÊags
(Ë& 
FL_IF
));

180 i‡((
tf
->
tf_cs
 & 3) == 3) {

185 
	`as£π
(
cuªnv
);

186 
cuªnv
->
ív_tf
 = *
tf
;

188 
tf
 = &
cuªnv
->
ív_tf
;

192 
	`å≠_di•©ch
(
tf
);

197 i‡(
cuªnv
 && cuªnv->
ív_°©us
 =
ENV_RUNNABLE
)

198 
	`ív_run
(
cuªnv
);

200 
	`sched_yõld
();

201 
	}
}

205 
	$∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *
tf
)

207 
uöt32_t
 
Áu…_va
;

210 
Áu…_va
 = 
	`r¸2
();

215 if((
tf
->
tf_cs
&3)==0)

216 
	`∑nic
("Page Fault in Kernel Mode");

249 
UTøp‰ame
 *
utf
;

250 if((
tf
->
tf_îr
&
FEC_U
)&&
cuªnv
->
ív_pgÁu…_upˇŒ
)

252 
	`u£r_mem_as£π
(
cuªnv
,(*)(
UXSTACKTOP
-0x34),0x34,0);

253 if(
tf
->
tf_e•
>(
UXSTACKTOP
-
PGSIZE
)&&tf->tf_esp<UXSTACKTOP)

255 
utf
=(
UTøp‰ame
*)(
tf
->
tf_e•
-0x38);

260 
utf
 = (
UTøp‰ame
*)(
UXSTACKTOP
-0x34);

263 
utf
->
utf_Áu…_va
=
Áu…_va
;

264 
utf
->
utf_îr
=
tf
->
tf_îr
;

265 
utf
->
utf_ªgs
=
tf
->
tf_ªgs
;

266 
utf
->
utf_eù
=
tf
->
tf_eù
;

267 
utf
->
utf_eÊags
=
tf
->
tf_eÊags
;

268 
utf
->
utf_e•
=
tf
->
tf_e•
;

269 
cuªnv
->
ív_tf
.
tf_e•
=(
uöçå_t
)
utf
;

274 if(
cuªnv
->
ív_pgÁu…_upˇŒ
)

276 
	`u£r_mem_as£π
(
cuªnv
,(*)cuªnv->
ív_pgÁu…_upˇŒ
,
PGSIZE
,0);

277 
cuªnv
->
ív_tf
.
tf_eù
=(
uöçå_t
)cuªnv->
ív_pgÁu…_upˇŒ
;

278 
	`ív_run
(
cuªnv
);

282 
	`˝rötf
("[%08x] user fault va %08x ip %08x\n",

283 
cuªnv
->
ív_id
, 
Áu…_va
, 
tf
->
tf_eù
);

284 
	`¥öt_å≠‰ame
(
tf
);

285 
	`ív_de°roy
(
cuªnv
);

286 
	}
}

	@kern/trap.h

3 #i‚de‡
JOS_KERN_TRAP_H


4 
	#JOS_KERN_TRAP_H


	)

5 #i‚de‡
JOS_KERNEL


9 
	~<öc/å≠.h
>

10 
	~<öc/mmu.h
>

13 
G©edesc
 
idt
[];

15 
idt_öô
();

16 
¥öt_ªgs
(
PushRegs
 *
ªgs
);

17 
¥öt_å≠‰ame
(
Tøp‰ame
 *
tf
);

18 
∑ge_Áu…_h™dÀr
(
Tøp‰ame
 *);

19 
backåa˚
(
Tøp‰ame
 *);

21 
å≠ªt
();

	@lib/console.c

2 
	~<öc/°rög.h
>

3 
	~<öc/lib.h
>

6 
	$˝utch¨
(
ch
)

8 
c
 = 
ch
;

12 
	`sys_˝uts
(&
c
, 1);

13 
	}
}

16 
	$gëch¨
()

18 
r
;

20 (
r
 = 
	`sys_cgëc
()) == 0)

21 
	`sys_yõld
();

22  
r
;

23 
	}
}

	@lib/exit.c

2 
	~<öc/lib.h
>

5 
	$exô
()

7 
	`˛o£_Æl
();

8 
	`sys_ív_de°roy
(0);

9 
	}
}

	@lib/fd.c

1 
	~<öc/lib.h
>

3 
	#debug
 0

	)

6 
	#MAXFD
 32

	)

8 
	#FDTABLE
 0xD0000000

	)

11 
	#FILEDATA
 (
FDTABLE
 + 
MAXFD
*
PGSIZE
)

	)

14 
	#INDEX2FD
(
i
Ë((
Fd
*Ë(
FDTABLE
 + (i)*
PGSIZE
))

	)

16 
	#INDEX2DATA
(
i
Ë((*Ë(
FILEDATA
 + (i)*
PGSIZE
))

	)

24 
	$fd2num
(
Fd
 *
fd
)

26  ((
uöçå_t
Ë
fd
 - 
FDTABLE
Ë/ 
PGSIZE
;

27 
	}
}

30 
	$fd2d©a
(
Fd
 *
fd
)

32  
	`INDEX2DATA
(
	`fd2num
(
fd
));

33 
	}
}

51 
	$fd_Æloc
(
Fd
 **
fd_°‹e
)

53 
i
;

54 
Fd
 *
fd
;

56 
i
 = 0; i < 
MAXFD
; i++) {

57 
fd
 = 
	`INDEX2FD
(
i
);

58 i‡((
vpd
[
	`PDX
(
fd
)] & 
PTE_P
Ë=0 || (
v±
[
	`VPN
(fd)] & PTE_P) == 0) {

59 *
fd_°‹e
 = 
fd
;

63 *
fd_°‹e
 = 0;

64  -
E_MAX_OPEN
;

65 
	}
}

74 
	$fd_lookup
(
fdnum
, 
Fd
 **
fd_°‹e
)

76 
Fd
 *
fd
;

78 i‡(
fdnum
 < 0 || fdnum >
MAXFD
) {

79 i‡(
debug
)

80 
	`˝rötf
("[%08x] bad fd %d\n", 
ív
->
ív_id
, 
fd
);

81  -
E_INVAL
;

83 
fd
 = 
	`INDEX2FD
(
fdnum
);

84 i‡(!(
vpd
[
	`PDX
(
fd
)] & 
PTE_P
Ë|| !(
v±
[
	`VPN
(fd)] & PTE_P)) {

85 i‡(
debug
)

86 
	`˝rötf
("[%08x] clo£d fd %d\n", 
ív
->
ív_id
, 
fd
);

87  -
E_INVAL
;

89 *
fd_°‹e
 = 
fd
;

91 
	}
}

101 
	$fd_˛o£
(
Fd
 *
fd
, 
boﬁ
 
mu°_exi°
)

103 
Fd
 *
fd2
;

104 
Dev
 *
dev
;

105 
r
;

106 i‡((
r
 = 
	`fd_lookup
(
	`fd2num
(
fd
), &
fd2
)) < 0

107 || 
fd
 !
fd2
)

108  (
mu°_exi°
 ? 
r
 : 0);

109 i‡((
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) >= 0) {

110 i‡(
dev
->
dev_˛o£
)

111 
r
 = (*
dev
->
dev_˛o£
)(
fd
);

113 
r
 = 0;

117 (Ë
	`sys_∑ge_unm≠
(0, 
fd
);

118  
r
;

119 
	}
}

126 
Dev
 *
	gdevèb
[] =

128 &
devfûe
,

133 
	$dev_lookup
(
dev_id
, 
Dev
 **
dev
)

135 
i
;

136 
i
 = 0; 
devèb
[i]; i++)

137 i‡(
devèb
[
i
]->
dev_id
 == dev_id) {

138 *
dev
 = 
devèb
[
i
];

141 
	`˝rötf
("[%08x] unknow¿devi˚Åy≥ %d\n", 
ív
->
ív_id
, 
dev_id
);

142 *
dev
 = 0;

143  -
E_INVAL
;

144 
	}
}

147 
	$˛o£
(
fdnum
)

149 
Fd
 *
fd
;

150 
r
;

152 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

153  
r
;

155  
	`fd_˛o£
(
fd
, 1);

156 
	}
}

159 
	$˛o£_Æl
()

161 
i
;

162 
i
 = 0; i < 
MAXFD
; i++)

163 
	`˛o£
(
i
);

164 
	}
}

172 
	$dup
(
ﬁdfdnum
, 
√wfdnum
)

174 
r
;

175 *
ova
, *
nva
;

176 
±e_t
 
±e
;

177 
Fd
 *
ﬁdfd
, *
√wfd
;

179 i‡((
r
 = 
	`fd_lookup
(
ﬁdfdnum
, &
ﬁdfd
)) < 0)

180  
r
;

181 
	`˛o£
(
√wfdnum
);

183 
√wfd
 = 
	`INDEX2FD
(
√wfdnum
);

184 
ova
 = 
	`fd2d©a
(
ﬁdfd
);

185 
nva
 = 
	`fd2d©a
(
√wfd
);

187 i‡((
vpd
[
	`PDX
(
ova
)] & 
PTE_P
Ë&& (
v±
[
	`VPN
(ova)] & PTE_P))

188 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ova
, 0, 
nva
, 
v±
[
	`VPN
(ova)] & 
PTE_USER
)) < 0)

189 
îr
;

190 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
ﬁdfd
, 0, 
√wfd
, 
v±
[
	`VPN
(ﬁdfd)] & 
PTE_USER
)) < 0)

191 
îr
;

193  
√wfdnum
;

195 
îr
:

196 
	`sys_∑ge_unm≠
(0, 
√wfd
);

197 
	`sys_∑ge_unm≠
(0, 
nva
);

198  
r
;

199 
	}
}

201 
ssize_t


202 
	$ªad
(
fdnum
, *
buf
, 
size_t
 
n
)

204 
r
;

205 
Dev
 *
dev
;

206 
Fd
 *
fd
;

208 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

209 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

210  
r
;

211 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_WRONLY
) {

212 
	`˝rötf
("[%08x]Ñód %d -- bad mode\n", 
ív
->
ív_id
, 
fdnum
);

213  -
E_INVAL
;

215 i‡(!
dev
->
dev_ªad
)

216  -
E_NOT_SUPP
;

217  (*
dev
->
dev_ªad
)(
fd
, 
buf
, 
n
);

218 
	}
}

220 
ssize_t


221 
	$ªadn
(
fdnum
, *
buf
, 
size_t
 
n
)

223 
m
, 
tŸ
;

225 
tŸ
 = 0;ÅŸ < 
n
;ÅŸ +
m
) {

226 
m
 = 
	`ªad
(
fdnum
, (*)
buf
 + 
tŸ
, 
n
 -Åot);

227 i‡(
m
 < 0)

228  
m
;

229 i‡(
m
 == 0)

232  
tŸ
;

233 
	}
}

235 
ssize_t


236 
	$wrôe
(
fdnum
, c⁄° *
buf
, 
size_t
 
n
)

238 
r
;

239 
Dev
 *
dev
;

240 
Fd
 *
fd
;

242 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

243 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

244  
r
;

245 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

246 
	`˝rötf
("[%08x] wrôê%d -- bad mode\n", 
ív
->
ív_id
, 
fdnum
);

247  -
E_INVAL
;

249 i‡(
debug
)

250 
	`˝rötf
("write %d %p %d via dev %s\n",

251 
fdnum
, 
buf
, 
n
, 
dev
->
dev_«me
);

252 i‡(!
dev
->
dev_wrôe
)

253  -
E_NOT_SUPP
;

254  (*
dev
->
dev_wrôe
)(
fd
, 
buf
, 
n
);

255 
	}
}

258 
	$£ek
(
fdnum
, 
off_t
 
off£t
)

260 
r
;

261 
Fd
 *
fd
;

263 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0)

264  
r
;

265 
fd
->
fd_off£t
 = 
off£t
;

267 
	}
}

270 
	$·runˇã
(
fdnum
, 
off_t
 
√wsize
)

272 
r
;

273 
Dev
 *
dev
;

274 
Fd
 *
fd
;

275 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

276 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

277  
r
;

278 i‡((
fd
->
fd_omode
 & 
O_ACCMODE
Ë=
O_RDONLY
) {

279 
	`˝rötf
("[%08x] ftruncate %d -- bad mode\n",

280 
ív
->
ív_id
, 
fdnum
);

281  -
E_INVAL
;

283 i‡(!
dev
->
dev_åunc
)

284  -
E_NOT_SUPP
;

285  (*
dev
->
dev_åunc
)(
fd
, 
√wsize
);

286 
	}
}

289 
	$f°©
(
fdnum
, 
Sèt
 *
°©
)

291 
r
;

292 
Dev
 *
dev
;

293 
Fd
 *
fd
;

295 i‡((
r
 = 
	`fd_lookup
(
fdnum
, &
fd
)) < 0

296 || (
r
 = 
	`dev_lookup
(
fd
->
fd_dev_id
, &
dev
)) < 0)

297  
r
;

298 i‡(!
dev
->
dev_°©
)

299  -
E_NOT_SUPP
;

300 
°©
->
°_«me
[0] = 0;

301 
°©
->
°_size
 = 0;

302 
°©
->
°_isdú
 = 0;

303 
°©
->
°_dev
 = 
dev
;

304  (*
dev
->
dev_°©
)(
fd
, 
°©
);

305 
	}
}

308 
	$°©
(c⁄° *
∑th
, 
Sèt
 *
°©
)

310 
fd
, 
r
;

312 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) < 0)

313  
fd
;

314 
r
 = 
	`f°©
(
fd
, 
°©
);

315 
	`˛o£
(
fd
);

316  
r
;

317 
	}
}

	@lib/file.c

1 
	~<öc/fs.h
>

2 
	~<öc/°rög.h
>

3 
	~<öc/lib.h
>

5 
	#debug
 0

	)

7 
Fsùc
 
fsùcbuf
;

16 
	$fsùc
(
ty≥
, *
d°va
)

18 i‡(
debug
)

19 
	`˝rötf
("[%08x] fsù¯%d %08x\n", 
ív
->
ív_id
, 
ty≥
, *(
uöt32_t
 *)&
fsùcbuf
);

21 
	`ùc_£nd
(
ívs
[1].
ív_id
, 
ty≥
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

22  
	`ùc_ªcv
(
NULL
, 
d°va
, NULL);

23 
	}
}

25 
devfûe_Êush
(
Fd
 *
fd
);

26 
ssize_t
 
devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
);

27 
ssize_t
 
devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
);

28 
devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°©
);

29 
devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
);

31 
Dev
 
	gdevfûe
 =

33 .
dev_id
 = 'f',

34 .
	gdev_«me
 = "file",

35 .
	gdev_ªad
 = 
devfûe_ªad
,

36 .
	gdev_wrôe
 = 
devfûe_wrôe
,

37 .
	gdev_˛o£
 = 
devfûe_Êush
,

38 .
	gdev_°©
 = 
devfûe_°©
,

39 .
	gdev_åunc
 = 
devfûe_åunc


49 
	$›í
(c⁄° *
∑th
, 
mode
)

66 
	`∑nic
("openÇot implemented");

67 
	}
}

78 
	$devfûe_Êush
(
Fd
 *
fd
)

80 
fsùcbuf
.
Êush
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

81  
	`fsùc
(
FSREQ_FLUSH
, 
NULL
);

82 
	}
}

89 
ssize_t


90 
	$devfûe_ªad
(
Fd
 *
fd
, *
buf
, 
size_t
 
n
)

97 
	`∑nic
("devfile_readÇot implemented");

98 
	}
}

105 
ssize_t


106 
	$devfûe_wrôe
(
Fd
 *
fd
, c⁄° *
buf
, 
size_t
 
n
)

113 
	`∑nic
("devfile_writeÇot implemented");

114 
	}
}

117 
	$devfûe_°©
(
Fd
 *
fd
, 
Sèt
 *
°
)

119 
r
;

121 
fsùcbuf
.
°©
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

122 i‡((
r
 = 
	`fsùc
(
FSREQ_STAT
, 
NULL
)) < 0)

123  
r
;

124 
	`°r˝y
(
°
->
°_«me
, 
fsùcbuf
.
°©Rë
.
ªt_«me
);

125 
°
->
°_size
 = 
fsùcbuf
.
°©Rë
.
ªt_size
;

126 
°
->
°_isdú
 = 
fsùcbuf
.
°©Rë
.
ªt_isdú
;

128 
	}
}

132 
	$devfûe_åunc
(
Fd
 *
fd
, 
off_t
 
√wsize
)

134 
fsùcbuf
.
£t_size
.
ªq_fûeid
 = 
fd
->
fd_fûe
.
id
;

135 
fsùcbuf
.
£t_size
.
ªq_size
 = 
√wsize
;

136  
	`fsùc
(
FSREQ_SET_SIZE
, 
NULL
);

137 
	}
}

141 
	$ªmove
(c⁄° *
∑th
)

143 i‡(
	`°æí
(
∑th
Ë>
MAXPATHLEN
)

144  -
E_BAD_PATH
;

145 
	`°r˝y
(
fsùcbuf
.
ªmove
.
ªq_∑th
, 
∑th
);

146  
	`fsùc
(
FSREQ_REMOVE
, 
NULL
);

147 
	}
}

151 
	$sync
()

156  
	`fsùc
(
FSREQ_SYNC
, 
NULL
);

157 
	}
}

	@lib/fork.c

3 
	~<öc/°rög.h
>

4 
	~<öc/lib.h
>

8 
	#PTE_COW
 0x800

	)

10 
_pgÁu…_upˇŒ
();

16 
	$pgÁu…
(
UTøp‰ame
 *
utf
)

18 *
addr
 = (*Ë
utf
->
utf_Áu…_va
;

19 
uöt32_t
 
îr
 = 
utf
->
utf_îr
;

20 
r
;

29 
pde_t
 *
pde
;

30 
±e_t
 *
±e
;

31 
uöt32_t
 *
va
,*
§cva
,*
d°va
;

32 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

33 if(*
pde
&
PTE_P
)

35 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

38 
	`˝rötf
("addr=%xÉº=%x *pde=%x utf_eù=%x\n",(
uöt32_t
)
addr
,
îr
,*
pde
,
utf
->
utf_eù
);

39 
	`∑nic
("pageÅable for fault va isÇotÉxist");

42 if(!(
îr
&
FEC_WR
)||!(*
±e
&
PTE_COW
))

44 
	`˝rötf
("ívid=%xáddr=%xÉº=%x *±e=%x utf_eù=%x\n",
ív
->
ív_id
,(
uöt32_t
)
addr
,
îr
,*
±e
,
utf
->
utf_eù
);

45 
	`∑nic
("faultingáccess is illegle");

56 if((
r
=
	`sys_∑ge_Æloc
(0,
PFTEMP
,
PTE_W
|
PTE_U
|
PTE_P
))<0)

58 
	`∑nic
("Ælo¯®∑gêf‹ PFTEMP faûed:%e",
r
);

60 
§cva
 = (
uöt32_t
*)((uöt32_t)
addr
&0xfffff000);

61 
d°va
 = (
uöt32_t
*)
PFTEMP
;

63 ;
§cva
<(
uöt32_t
*)(
	`ROUNDUP
(
addr
,
PGSIZE
));srcva++)

65 *
d°va
=*
§cva
;

66 
d°va
++;

68 if((
r
=
	`sys_∑ge_m≠
(0,(*)
PFTEMP
,0,(*)((
uöt32_t
)
addr
&0xfffff000),
PTE_W
|
PTE_U
|
PTE_P
))<0)

70 
	`∑nic
("page mapping failed");

72 
	}
}

86 
	$duµage
(
ívid_t
 
ívid
, 
≤
)

88 
r
;

91 
pde_t
 *
pde
;

92 
±e_t
 *
±e
;

93 *
addr
=(*)(
≤
*
PGSIZE
);

94 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

95 if(*
pde
&
PTE_P
)

97 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

99 
	`∑nic
("pageÅable forÖnÖage isÇotÉxist");

100 if((*
±e
&
PTE_W
)||(*±e&
PTE_COW
))

102 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_COW
|
PTE_U
))<0)

103  
r
;

104 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,0,addr,
PTE_COW
|
PTE_U
))<0)

105  
r
;

108 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_U
|
PTE_P
))<0)

109  
r
;

113 
	}
}

131 
ívid_t


132 
	$f‹k
()

135 
r
;

136 
pde_t
 *
pde
;

137 
±e_t
 *
±e
;

138 
i
;

139 
uöt32_t
 
addr
;

140 
ívid_t
 
ívid
;

141 
ívid
 = 
	`sys_exof‹k
();

142 if(
ívid
 < 0)

143 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

144 if(
ívid
==0)

146 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

150 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

151 
i
=0;i<()
	`VPN
(
UTOP
);i++)

153 if(
i
==()
	`VPN
(
UXSTACKTOP
-
PGSIZE
))

155 
addr
=
i
*
PGSIZE
;

156 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

157 if(*
pde
&
PTE_P
)

159 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

162 if((*
±e
&
PTE_W
)||(*±e&
PTE_COW
))

164 if((
r
=
	`duµage
(
ívid
,
i
))<0)

165  
r
;

168 if((
r
=
	`sys_∑ge_Æloc
(
ívid
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

169  
r
;

170 if((
r
=
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid
,(*)
_pgÁu…_upˇŒ
))<0)

171  
r
;

172 if((
r
=
	`sys_ív_£t_°©us
(
ívid
,
ENV_RUNNABLE
))<0)

173  
r
;

174  
ívid
;

177 
	}
}

179 
	$sduµage
(
ívid_t
 
ívid
, 
≤
)

181 
r
;

184 
pde_t
 *
pde
;

185 
±e_t
 *
±e
;

186 *
addr
=(*)(
≤
*
PGSIZE
);

187 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

188 if(*
pde
&
PTE_P
)

190 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

192 
	`∑nic
("pageÅable forÖnÖage isÇotÉxist");

193 if(*
±e
&
PTE_W
)

196 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_W
|
PTE_U
))<0)

197  
r
;

198 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,0,addr,
PTE_W
|
PTE_U
))<0)

199  
r
;

202 if((
r
=
	`sys_∑ge_m≠
(0,
addr
,
ívid
,addr,
PTE_U
|
PTE_P
))<0)

203  
r
;

207 
	}
}

210 
	$sf‹k
()

212 
r
;

213 
pde_t
 *
pde
;

214 
±e_t
 *
±e
;

215 
i
;

216 
uöt32_t
 
addr
;

217 
ívid_t
 
ívid
;

218 
ívid
 = 
	`sys_exof‹k
();

219 if(
ívid
 < 0)

220 
	`∑nic
("sys_exof‹k: %e", 
ívid
);

221 if(
ívid
==0)

223 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

228 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

229 
	`£t_pgÁu…_h™dÀr
(
pgÁu…
);

230 
i
=0;i<()
	`VPN
(
UTOP
);i++)

232 
addr
=
i
*
PGSIZE
;

233 
pde
 =(
pde_t
*Ë&
vpd
[
	`VPD
(
addr
)];

234 if(*
pde
&
PTE_P
)

236 
±e
=(
±e_t
*)&
v±
[
	`VPN
(
addr
)];

239 if((
i
==()
	`VPN
(
USTACKTOP
-
PGSIZE
))||(i==()VPN(
PFTEMP
)))

242 if((
r
=
	`duµage
(
ívid
,
i
))<0)

243  
r
;

246 if((
r
=
	`sduµage
(
ívid
,
i
))<0)

247  
r
;

249 if((
r
=
	`sys_∑ge_Æloc
(
ívid
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

250  
r
;

251 if((
r
=
	`sys_ív_£t_pgÁu…_upˇŒ
(
ívid
,(*)
_pgÁu…_upˇŒ
))<0)

252  
r
;

253 if((
r
=
	`sys_ív_£t_°©us
(
ívid
,
ENV_RUNNABLE
))<0)

254  
r
;

255  
ívid
;

259 
	}
}

	@lib/fprintf.c

1 
	~<öc/lib.h
>

8 
	s¥ötbuf
 {

9 
	mfd
;

10 
	midx
;

11 
ssize_t
 
	mªsu…
;

12 
	mîr‹
;

13 
	mbuf
[256];

18 
	$wrôebuf
(
¥ötbuf
 *
b
)

20 i‡(
b
->
îr‹
 > 0) {

21 
ssize_t
 
ªsu…
 = 
	`wrôe
(
b
->
fd
, b->
buf
, b->
idx
);

22 i‡(
ªsu…
 > 0)

23 
b
->
ªsu…
 +=Ñesult;

24 i‡(
ªsu…
 !
b
->
idx
)

25 
b
->
îr‹
 = (
ªsu…
 < 0 ?Ñesult : 0);

27 
	}
}

30 
	$putch
(
ch
, *
thunk
)

32 
¥ötbuf
 *
b
 = (¥ötbu‡*Ë
thunk
;

33 
b
->
buf
[b->
idx
++] = 
ch
;

34 i‡(
b
->
idx
 == 256) {

35 
	`wrôebuf
(
b
);

36 
b
->
idx
 = 0;

38 
	}
}

41 
	$vÂrötf
(
fd
, c⁄° *
fmt
, 
va_li°
 
≠
)

43 
¥ötbuf
 
b
;

45 
b
.
fd
 = fd;

46 
b
.
idx
 = 0;

47 
b
.
ªsu…
 = 0;

48 
b
.
îr‹
 = 1;

49 
	`v¥ötfmt
(
putch
, &
b
, 
fmt
, 
≠
);

50 i‡(
b
.
idx
 > 0)

51 
	`wrôebuf
(&
b
);

53  (
b
.
ªsu…
 ? b.ªsu… : b.
îr‹
);

54 
	}
}

57 
	$Ârötf
(
fd
, c⁄° *
fmt
, ...)

59 
va_li°
 
≠
;

60 
˙t
;

62 
	`va_°¨t
(
≠
, 
fmt
);

63 
˙t
 = 
	`vÂrötf
(
fd
, 
fmt
, 
≠
);

64 
	`va_íd
(
≠
);

66  
˙t
;

67 
	}
}

70 
	$¥ötf
(c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

73 
˙t
;

75 
	`va_°¨t
(
≠
, 
fmt
);

76 
˙t
 = 
	`vÂrötf
(1, 
fmt
, 
≠
);

77 
	`va_íd
(
≠
);

79  
˙t
;

80 
	}
}

	@lib/ipc.c

3 
	~<öc/lib.h
>

22 
öt32_t


23 
	$ùc_ªcv
(
ívid_t
 *
‰om_ív_°‹e
, *
pg
, *
≥rm_°‹e
)

26 
r
;

27 *
d°va
=
NULL
;

28 if(
pg
)

29 
d°va
=
pg
;

30 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

31 if(
ív
->
ív_id
==*
‰om_ív_°‹e
)

33 *
‰om_ív_°‹e
=0;

34 *
≥rm_°‹e
=0;

35 
	`˝rötf
("send:theÑeciver is sender\n");

38 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

39 if((
r
=
	`sys_ùc_ªcv
(
d°va
))<0)

41 *
‰om_ív_°‹e
=0;

42 *
≥rm_°‹e
=0;

43 
	`˝rötf
("reciver failed\n");

44  
r
;

47 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

48 if(
‰om_ív_°‹e
)

49 *
‰om_ív_°‹e
=
ív
->
ív_ùc_‰om
;

50 if(
≥rm_°‹e
)

51 *
≥rm_°‹e
=
ív
->
ív_ùc_≥rm
;

52 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

53  
ív
->
ív_ùc_vÆue
;

57 
	}
}

68 
	$ùc_£nd
(
ívid_t
 
to_ív
, 
uöt32_t
 
vÆ
, *
pg
, 
≥rm
)

71 
r
,
i
=0;

72 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

75 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

76 if(
ív
->
ív_id
==
to_ív
){

77 
	`˝rötf
("send:theÑeciver is sender\n");

80 if((
r
=
	`sys_ùc_åy_£nd
(
to_ív
,
vÆ
,
pg
,
≥rm
))<0)

82 if(
r
!=-
E_IPC_NOT_RECV
)

83 
	`∑nic
("£ndÉº‹:%e",
r
);

85 
	`sys_yõld
();

87 }
r
!=0);

90 
	}
}

	@lib/libmain.c

4 
	~<öc/lib.h
>

6 
umaö
(
¨gc
, **
¨gv
);

8 vﬁ©ûê
Env
 *
	gív
;

9 *
	gbö¨y«me
 = "(PROGRAM NAME UNKNOWN)";

12 
	$libmaö
(
¨gc
, **
¨gv
)

16 
ív
 = 0;

17 
ív
 = &
ívs
[
	`ENVX
(
	`sys_gëívid
())];

19 i‡(
¨gc
 > 0)

20 
bö¨y«me
 = 
¨gv
[0];

23 
	`umaö
(
¨gc
, 
¨gv
);

26 
	`exô
();

27 
	}
}

	@lib/pageref.c

1 
	~<öc/lib.h
>

4 
	$∑gîef
(*
v
)

6 
±e_t
 
±e
;

8 i‡(!(
vpd
[
	`PDX
(
v
)] & 
PTE_P
))

10 
±e
 = 
v±
[
	`VPN
(
v
)];

11 i‡(!(
±e
 & 
PTE_P
))

13  
∑ges
[
	`PPN
(
±e
)].
µ_ªf
;

14 
	}
}

	@lib/panic.c

2 
	~<öc/lib.h
>

4 *
	g¨gv0
;

12 
	$_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
fmt
,...)

14 
va_li°
 
≠
;

16 
	`va_°¨t
(
≠
, 
fmt
);

19 i‡(
¨gv0
)

20 
	`˝rötf
("%s: ", 
¨gv0
);

21 
	`˝rötf
("u£∏∑ni¯ö %†© %s:%d: ", 
bö¨y«me
, 
fûe
, 
löe
);

22 
	`v˝rötf
(
fmt
, 
≠
);

23 
	`˝rötf
("\n");

27 
asm
 volatile("int3");

28 
	}
}

	@lib/pgfault.c

7 
	~<öc/lib.h
>

11 
_pgÁu…_upˇŒ
();

14 (*
_pgÁu…_h™dÀr
)(
UTøp‰ame
 *
utf
);

25 
	`£t_pgÁu…_h™dÀr
((*
h™dÀr
)(
UTøp‰ame
 *
utf
))

27 
r
;

29 i‡(
_pgÁu…_h™dÀr
 == 0) {

32 
ív
=(
Env
*)&
ívs
[
	`ENVX
(
	`sys_gëívid
())];

33 if((
r
=
	`sys_∑ge_Æloc
(
ív
->
ív_id
,(*)(
UXSTACKTOP
-
PGSIZE
),
PTE_W
|
PTE_U
|
PTE_P
))<0)

35 
	`∑nic
("AllocáÖage foránÉxception stack failed");

37 
	`sys_ív_£t_pgÁu…_upˇŒ
(
ív
->
ív_id
,(*)
_pgÁu…_upˇŒ
);

42 
_pgÁu…_h™dÀr
 = 
h™dÀr
;

43 
	}
}

	@lib/printf.c

8 
	~<öc/ty≥s.h
>

9 
	~<öc/°dio.h
>

10 
	~<öc/°d¨g.h
>

11 
	~<öc/lib.h
>

19 
	s¥ötbuf
 {

20 
	midx
;

21 
	m˙t
;

22 
	mbuf
[256];

27 
	$putch
(
ch
, 
¥ötbuf
 *
b
)

29 
b
->
buf
[b->
idx
++] = 
ch
;

30 i‡(
b
->
idx
 == 256-1) {

31 
	`sys_˝uts
(
b
->
buf
, b->
idx
);

32 
b
->
idx
 = 0;

34 
b
->
˙t
++;

35 
	}
}

38 
	$v˝rötf
(c⁄° *
fmt
, 
va_li°
 
≠
)

40 
¥ötbuf
 
b
;

42 
b
.
idx
 = 0;

43 
b
.
˙t
 = 0;

44 
	`v¥ötfmt
((*)
putch
, &
b
, 
fmt
, 
≠
);

45 
	`sys_˝uts
(
b
.
buf
, b.
idx
);

47  
b
.
˙t
;

48 
	}
}

51 
	$˝rötf
(c⁄° *
fmt
, ...)

53 
va_li°
 
≠
;

54 
˙t
;

56 
	`va_°¨t
(
≠
, 
fmt
);

57 
˙t
 = 
	`v˝rötf
(
fmt
, 
≠
);

58 
	`va_íd
(
≠
);

60  
˙t
;

61 
	}
}

	@lib/printfmt.c

5 
	~<öc/ty≥s.h
>

6 
	~<öc/°dio.h
>

7 
	~<öc/°rög.h
>

8 
	~<öc/°d¨g.h
>

9 
	~<öc/îr‹.h
>

21 c⁄° * c⁄° 
	gîr‹_°rög
[
MAXERROR
 + 1] =

23 
NULL
,

46 
¥öäum
((*
putch
)(, *), *
putd©
,

47 
num
, 
ba£
, 
width
, 
∑dc
)

50 i‡(
num
 >
ba£
) {

51 
	`¥öäum
(
putch
, 
putd©
, 
num
 / 
ba£
, ba£, 
width
 - 1, 
∑dc
);

54 --
width
 > 0)

55 
	`putch
(
∑dc
, 
putd©
);

59 
	`putch
("0123456789abcdef"[
num
 % 
ba£
], 
putd©
);

60 
	}
}

65 
	$gëuöt
(
va_li°
 *
≠
, 
lÊag
)

67 i‡(
lÊag
 >= 2)

68  
	`va_¨g
(*
≠
, );

69 i‡(
lÊag
)

70  
	`va_¨g
(*
≠
, );

72  
	`va_¨g
(*
≠
, );

73 
	}
}

78 
	$gëöt
(
va_li°
 *
≠
, 
lÊag
)

80 i‡(
lÊag
 >= 2)

81  
	`va_¨g
(*
≠
, );

82 i‡(
lÊag
)

83  
	`va_¨g
(*
≠
, );

85  
	`va_¨g
(*
≠
, );

86 
	}
}

90 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...);

93 
	`v¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, 
va_li°
 
≠
)

95 c⁄° *
p
;

96 
ch
, 
îr
;

97 
num
;

98 
ba£
, 
lÊag
, 
width
, 
¥ecisi⁄
, 
ÆtÊag
;

99 
∑dc
;

102 (
ch
 = *(*Ë
fmt
++) != '%') {

103 i‡(
ch
 == '\0')

105 
	`putch
(
ch
, 
putd©
);

109 
∑dc
 = ' ';

110 
width
 = -1;

111 
¥ecisi⁄
 = -1;

112 
lÊag
 = 0;

113 
ÆtÊag
 = 0;

114 
ªswôch
:

115 
ch
 = *(*Ë
fmt
++) {

119 
∑dc
 = '-';

120 
ªswôch
;

124 
∑dc
 = '0';

125 
ªswôch
;

137 
¥ecisi⁄
 = 0; ; ++
fmt
) {

138 
¥ecisi⁄
 =Öªcisi⁄ * 10 + 
ch
 - '0';

139 
ch
 = *
fmt
;

140 i‡(
ch
 < '0' || ch > '9')

143 
¥o˚ss_¥ecisi⁄
;

146 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

147 
¥o˚ss_¥ecisi⁄
;

150 i‡(
width
 < 0)

151 
width
 = 0;

152 
ªswôch
;

155 
ÆtÊag
 = 1;

156 
ªswôch
;

158 
¥o˚ss_¥ecisi⁄
:

159 i‡(
width
 < 0)

160 
width
 = 
¥ecisi⁄
,Örecision = -1;

161 
ªswôch
;

165 
lÊag
++;

166 
ªswôch
;

170 
	`putch
(
	`va_¨g
(
≠
, ), 
putd©
);

175 
îr
 = 
	`va_¨g
(
≠
, );

176 i‡(
îr
 < 0)

177 
îr
 = -err;

178 i‡(
îr
 > 
MAXERROR
 || (
p
 = 
îr‹_°rög
[îr]Ë=
NULL
)

179 
	`¥ötfmt
(
putch
, 
putd©
, "îr‹ %d", 
îr
);

181 
	`¥ötfmt
(
putch
, 
putd©
, "%s", 
p
);

186 i‡((
p
 = 
	`va_¨g
(
≠
, *)Ë=
NULL
)

187 
p
 = "(null)";

188 i‡(
width
 > 0 && 
∑dc
 != '-')

189 
width
 -
	`°∫Àn
(
p
, 
¥ecisi⁄
); width > 0; width--)

190 
	`putch
(
∑dc
, 
putd©
);

191 ; (
ch
 = *
p
++Ë!'\0' && (
¥ecisi⁄
 < 0 || --¥ecisi⁄ >0); 
width
--)

192 i‡(
ÆtÊag
 && (
ch
 < ' ' || ch > '~'))

193 
	`putch
('?', 
putd©
);

195 
	`putch
(
ch
, 
putd©
);

196 ; 
width
 > 0; width--)

197 
	`putch
(' ', 
putd©
);

202 
num
 = 
	`gëöt
(&
≠
, 
lÊag
);

203 i‡((Ë
num
 < 0) {

204 
	`putch
('-', 
putd©
);

205 
num
 = -()Çum;

207 
ba£
 = 10;

208 
numbî
;

212 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

213 
ba£
 = 10;

214 
numbî
;

222 
num
 = 
	`gëuöt
(&
≠
,
lÊag
);

223 
ba£
=8;

228 
	`putch
('0', 
putd©
);

229 
	`putch
('x', 
putd©
);

230 
num
 = ()

231 (
uöçå_t
Ë
	`va_¨g
(
≠
, *);

232 
ba£
 = 16;

233 
numbî
;

237 
num
 = 
	`gëuöt
(&
≠
, 
lÊag
);

238 
ba£
 = 16;

239 
numbî
:

240 
	`¥öäum
(
putch
, 
putd©
, 
num
, 
ba£
, 
width
, 
∑dc
);

245 
	`putch
(
ch
, 
putd©
);

250 
	`putch
('%', 
putd©
);

251 
fmt
--; fmt[-1] != '%'; fmt--)

256 
	}
}

259 
¥ötfmt
((*
putch
)(, *), *
putd©
, c⁄° *
fmt
, ...)

261 
va_li°
 
≠
;

263 
	`va_°¨t
(
≠
, 
fmt
);

264 
	`v¥ötfmt
(
putch
, 
putd©
, 
fmt
, 
≠
);

265 
	`va_íd
(
≠
);

266 
	}
}

268 
	s•rötbuf
 {

269 *
	mbuf
;

270 *
	mebuf
;

271 
	m˙t
;

275 
	$•röçutch
(
ch
, 
•rötbuf
 *
b
)

277 
b
->
˙t
++;

278 i‡(
b
->
buf
 < b->
ebuf
)

279 *
b
->
buf
++ = 
ch
;

280 
	}
}

283 
	$v¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, 
va_li°
 
≠
)

285 
•rötbuf
 
b
 = {
buf
, buf+
n
-1, 0};

287 i‡(
buf
 =
NULL
 || 
n
 < 1)

288  -
E_INVAL
;

291 
	`v¥ötfmt
((*)
•röçutch
, &
b
, 
fmt
, 
≠
);

294 *
b
.
buf
 = '\0';

296  
b
.
˙t
;

297 
	}
}

300 
	$¢¥ötf
(*
buf
, 
n
, c⁄° *
fmt
, ...)

302 
va_li°
 
≠
;

303 
rc
;

305 
	`va_°¨t
(
≠
, 
fmt
);

306 
rc
 = 
	`v¢¥ötf
(
buf
, 
n
, 
fmt
, 
≠
);

307 
	`va_íd
(
≠
);

309  
rc
;

310 
	}
}

	@lib/readline.c

1 
	~<öc/°dio.h
>

2 
	~<öc/îr‹.h
>

4 
	#BUFLEN
 1024

	)

5 
	gbuf
[
BUFLEN
];

8 
	$ªadlöe
(c⁄° *
¥om±
)

10 
i
, 
c
, 
echoög
;

12 i‡(
¥om±
 !
NULL
)

13 
	`˝rötf
("%s", 
¥om±
);

15 
i
 = 0;

16 
echoög
 = 
	`isc⁄s
(0);

18 
c
 = 
	`gëch¨
();

19 i‡(
c
 < 0) {

20 
	`˝rötf
("ªadÉº‹: %e\n", 
c
);

21  
NULL
;

22 } i‡((
c
 ='\b' || c ='\x7f'Ë&& 
i
 > 0) {

23 i‡(
echoög
)

24 
	`˝utch¨
('\b');

25 
i
--;

26 } i‡(
c
 >' ' && 
i
 < 
BUFLEN
-1) {

27 i‡(
echoög
)

28 
	`˝utch¨
(
c
);

29 
buf
[
i
++] = 
c
;

30 } i‡(
c
 == '\n' || c == '\r') {

31 i‡(
echoög
)

32 
	`˝utch¨
('\n');

33 
buf
[
i
] = 0;

34  
buf
;

37 
	}
}

	@lib/spawn.c

1 
	~<öc/lib.h
>

2 
	~<öc/ñf.h
>

4 
	#UTEMP2USTACK
(
addr
Ë((*Ë◊ddrË+ (
USTACKTOP
 - 
PGSIZE
Ë- 
UTEMP
)

	)

5 
	#UTEMP2
 (
UTEMP
 + 
PGSIZE
)

	)

6 
	#UTEMP3
 (
UTEMP2
 + 
PGSIZE
)

	)

9 
öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
);

10 
m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

11 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
);

19 
	$•awn
(c⁄° *
¥og
, c⁄° **
¨gv
)

21 
ñf_buf
[512];

22 
Tøp‰ame
 
chûd_tf
;

23 
ívid_t
 
chûd
;

25 
fd
, 
i
, 
r
;

26 
Elf
 *
ñf
;

27 
Proghdr
 *
ph
;

28 
≥rm
;

87 i‡((
r
 = 
	`›í
(
¥og
, 
O_RDONLY
)) < 0)

88  
r
;

89 
fd
 = 
r
;

92 
ñf
 = (
Elf
*Ë
ñf_buf
;

93 i‡(
	`ªad
(
fd
, 
ñf_buf
, (elf_buf)) != (elf_buf)

94 || 
ñf
->
e_magic
 !
ELF_MAGIC
) {

95 
	`˛o£
(
fd
);

96 
	`˝rötf
("ñ‡magi¯%08x w™à%08x\n", 
ñf
->
e_magic
, 
ELF_MAGIC
);

97  -
E_NOT_EXEC
;

101 i‡((
r
 = 
	`sys_exof‹k
()) < 0)

102  
r
;

103 
chûd
 = 
r
;

106 
chûd_tf
 = 
ívs
[
	`ENVX
(
chûd
)].
ív_tf
;

107 
chûd_tf
.
tf_eù
 = 
ñf
->
e_íåy
;

109 i‡((
r
 = 
	`öô_°ack
(
chûd
, 
¨gv
, &
chûd_tf
.
tf_e•
)) < 0)

110  
r
;

113 
ph
 = (
Proghdr
*Ë(
ñf_buf
 + 
ñf
->
e_phoff
);

114 
i
 = 0; i < 
ñf
->
e_phnum
; i++, 
ph
++) {

115 i‡(
ph
->
p_ty≥
 !
ELF_PROG_LOAD
)

117 
≥rm
 = 
PTE_P
 | 
PTE_U
;

118 i‡(
ph
->
p_Êags
 & 
ELF_PROG_FLAG_WRITE
)

119 
≥rm
 |
PTE_W
;

120 i‡((
r
 = 
	`m≠_£gmít
(
chûd
, 
ph
->
p_va
,Öh->
p_memsz
,

121 
fd
, 
ph
->
p_fûesz
,Öh->
p_off£t
, 
≥rm
)) < 0)

122 
îr‹
;

124 
	`˛o£
(
fd
);

125 
fd
 = -1;

127 i‡((
r
 = 
	`sys_ív_£t_å≠‰ame
(
chûd
, &
chûd_tf
)) < 0)

128 
	`∑nic
("sys_ív_£t_å≠‰ame: %e", 
r
);

130 i‡((
r
 = 
	`sys_ív_£t_°©us
(
chûd
, 
ENV_RUNNABLE
)) < 0)

131 
	`∑nic
("sys_ív_£t_°©us: %e", 
r
);

133  
chûd
;

135 
îr‹
:

136 
	`sys_ív_de°roy
(
chûd
);

137 
	`˛o£
(
fd
);

138  
r
;

139 
	}
}

143 
	$•aw∆
(c⁄° *
¥og
, c⁄° *
¨g0
, ...)

145  
	`•awn
(
¥og
, &
¨g0
);

146 
	}
}

157 
	$öô_°ack
(
ívid_t
 
chûd
, c⁄° **
¨gv
, 
uöçå_t
 *
öô_e•
)

159 
size_t
 
°rög_size
;

160 
¨gc
, 
i
, 
r
;

161 *
°rög_°‹e
;

162 
uöçå_t
 *
¨gv_°‹e
;

166 
°rög_size
 = 0;

167 
¨gc
 = 0; 
¨gv
[argc] != 0;árgc++)

168 
°rög_size
 +
	`°æí
(
¨gv
[
¨gc
]) + 1;

175 
°rög_°‹e
 = (*Ë
UTEMP
 + 
PGSIZE
 - 
°rög_size
;

178 
¨gv_°‹e
 = (
uöçå_t
*Ë(
	`ROUNDDOWN
(
°rög_°‹e
, 4Ë- 4 * (
¨gc
 + 1));

182 i‡((*Ë(
¨gv_°‹e
 - 2Ë< (*Ë
UTEMP
)

183  -
E_NO_MEM
;

186 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, (*Ë
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

187  
r
;

206 
i
 = 0; i < 
¨gc
; i++) {

207 
¨gv_°‹e
[
i
] = 
	`UTEMP2USTACK
(
°rög_°‹e
);

208 
	`°r˝y
(
°rög_°‹e
, 
¨gv
[
i
]);

209 
°rög_°‹e
 +
	`°æí
(
¨gv
[
i
]) + 1;

211 
¨gv_°‹e
[
¨gc
] = 0;

212 
	`as£π
(
°rög_°‹e
 =(*)
UTEMP
 + 
PGSIZE
);

214 
¨gv_°‹e
[-1] = 
	`UTEMP2USTACK
(argv_store);

215 
¨gv_°‹e
[-2] = 
¨gc
;

217 *
öô_e•
 = 
	`UTEMP2USTACK
(&
¨gv_°‹e
[-2]);

221 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
USTACKTOP
 - 
PGSIZE
), 
PTE_P
 | 
PTE_U
 | 
PTE_W
)) < 0)

222 
îr‹
;

223 i‡((
r
 = 
	`sys_∑ge_unm≠
(0, 
UTEMP
)) < 0)

224 
îr‹
;

228 
îr‹
:

229 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

230  
r
;

231 
	}
}

234 
	$m≠_£gmít
(
ívid_t
 
chûd
, 
uöçå_t
 
va
, 
size_t
 
memsz
,

235 
fd
, 
size_t
 
fûesz
, 
off_t
 
fûeoff£t
, 
≥rm
)

237 
i
, 
r
;

238 *
blk
;

242 i‡((
i
 = 
	`PGOFF
(
va
))) {

243 
va
 -
i
;

244 
memsz
 +
i
;

245 
fûesz
 +
i
;

246 
fûeoff£t
 -
i
;

249 
i
 = 0; i < 
memsz
; i +
PGSIZE
) {

250 i‡(
i
 >
fûesz
) {

252 i‡((
r
 = 
	`sys_∑ge_Æloc
(
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

253  
r
;

256 i‡((
r
 = 
	`sys_∑ge_Æloc
(0, 
UTEMP
, 
PTE_P
|
PTE_U
|
PTE_W
)) < 0)

257  
r
;

258 i‡((
r
 = 
	`£ek
(
fd
, 
fûeoff£t
 + 
i
)) < 0)

259  
r
;

260 i‡((
r
 = 
	`ªad
(
fd
, 
UTEMP
, 
	`MIN
(
PGSIZE
, 
fûesz
-
i
))) < 0)

261  
r
;

262 i‡((
r
 = 
	`sys_∑ge_m≠
(0, 
UTEMP
, 
chûd
, (*Ë(
va
 + 
i
), 
≥rm
)) < 0)

263 
	`∑nic
("•awn: sys_∑ge_m≠ d©a: %e", 
r
);

264 
	`sys_∑ge_unm≠
(0, 
UTEMP
);

268 
	}
}

	@lib/string.c

3 
	~<öc/°rög.h
>

9 
	#ASM
 1

	)

12 
	$°æí
(c⁄° *
s
)

14 
n
;

16 
n
 = 0; *
s
 != '\0'; s++)

17 
n
++;

18  
n
;

19 
	}
}

22 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
size
)

24 
n
;

26 
n
 = 0; 
size
 > 0 && *
s
 != '\0'; s++, size--)

27 
n
++;

28  
n
;

29 
	}
}

32 
	$°r˝y
(*
d°
, c⁄° *
§c
)

34 *
ªt
;

36 
ªt
 = 
d°
;

37 (*
d°
++ = *
§c
++) != '\0')

39  
ªt
;

40 
	}
}

43 
	$°∫˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
) {

44 
size_t
 
i
;

45 *
ªt
;

47 
ªt
 = 
d°
;

48 
i
 = 0; i < 
size
; i++) {

49 *
d°
++ = *
§c
;

51 i‡(*
§c
 != '\0')

52 
§c
++;

54  
ªt
;

55 
	}
}

57 
size_t


58 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
size
)

60 *
d°_ö
;

62 
d°_ö
 = 
d°
;

63 i‡(
size
 > 0) {

64 --
size
 > 0 && *
§c
 != '\0')

65 *
d°
++ = *
§c
++;

66 *
d°
 = '\0';

68  
d°
 - 
d°_ö
;

69 
	}
}

71 
	$p°r˝y
(*
buf
, 
buf_size
, c⁄° *
°r
)

73 
c
;

74 *
q
 = 
buf
;

76 i‡(
buf_size
 <= 0)

80 
c
 = *
°r
++;

81 i‡(
c
 =0 || 
q
 >
buf
 + 
buf_size
 - 1)

83 *
q
++ = 
c
;

85 *
q
 = '\0';

86 
	}
}

88 
	$°rcmp
(c⁄° *
p
, c⁄° *
q
)

90 *
p
 && *∞=*
q
)

91 
p
++, 
q
++;

92  (Ë((Ë*
p
 - (Ë*
q
);

93 
	}
}

96 
	$°∫cmp
(c⁄° *
p
, c⁄° *
q
, 
size_t
 
n
)

98 
n
 > 0 && *
p
 && *∞=*
q
)

99 
n
--, 
p
++, 
q
++;

100 i‡(
n
 == 0)

103  (Ë((Ë*
p
 - (Ë*
q
);

104 
	}
}

109 
	$°rchr
(c⁄° *
s
, 
c
)

111 ; *
s
; s++)

112 i‡(*
s
 =
c
)

113  (*Ë
s
;

115 
	}
}

120 
	$°rföd
(c⁄° *
s
, 
c
)

122 ; *
s
; s++)

123 i‡(*
s
 =
c
)

125  (*Ë
s
;

126 
	}
}

128 #i‡
ASM


130 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

132 *
p
;

134 i‡(
n
 == 0)

135  
v
;

136 i‡(()
v
%4 =0 && 
n
%4 == 0) {

137 
c
 &= 0xFF;

138 
c
 = (c<<24)|(c<<16)|(c<<8)|c;

139 
asm
 volatile("cld;Ñep stosl\n"

140 :: "D" (
v
), "a" (
c
), "c" (
n
/4)

143 
asm
 volatile("cld;Ñep stosb\n"

144 :: "D" (
v
), "a" (
c
), "c" (
n
)

146  
v
;

147 
	}
}

150 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

152 c⁄° *
s
;

153 *
d
;

155 
s
 = 
§c
;

156 
d
 = 
d°
;

157 i‡(
s
 < 
d
 && s + 
n
 > d) {

158 
s
 +
n
;

159 
d
 +
n
;

160 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

161 
asm
 volatile("std;Ñep movsl\n"

162 :: "D" (
d
-4), "S" (
s
-4), "c" (
n
/4) : "cc", "memory");

164 
asm
 volatile("std;Ñep movsb\n"

165 :: "D" (
d
-1), "S" (
s
-1), "c" (
n
) : "cc", "memory");

167 
asm
 volatile("cld" ::: "cc");

169 i‡(()
s
%4 =0 && ()
d
%4 =0 && 
n
%4 == 0)

170 
asm
 volatile("cld;Ñep movsl\n"

171 :: "D" (
d
), "S" (
s
), "c" (
n
/4) : "cc", "memory");

173 
asm
 volatile("cld;Ñep movsb\n"

174 :: "D" (
d
), "S" (
s
), "c" (
n
) : "cc", "memory");

176  
d°
;

177 
	}
}

182 
	$mem£t
(*
v
, 
c
, 
size_t
 
n
)

184 *
p
;

185 
m
;

187 
p
 = 
v
;

188 
m
 = 
n
;

189 --
m
 >= 0)

190 *
p
++ = 
c
;

192  
v
;

193 
	}
}

198 
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

200 c⁄° *
s
;

201 *
d
;

203 
s
 = 
§c
;

204 
d
 = 
d°
;

205 i‡(
s
 < 
d
 && s + 
n
 > d) {

206 
s
 +
n
;

207 
d
 +
n
;

208 
n
-- > 0)

209 *--
d
 = *--
s
;

211 
n
-- > 0)

212 *
d
++ = *
s
++;

214  
d°
;

215 
	}
}

221 
	$mem˝y
(*
d°
, *
§c
, 
size_t
 
n
)

223  
	`memmove
(
d°
, 
§c
, 
n
);

224 
	}
}

227 
	$memcmp
(c⁄° *
v1
, c⁄° *
v2
, 
size_t
 
n
)

229 c⁄° 
uöt8_t
 *
s1
 = (c⁄° uöt8_à*Ë
v1
;

230 c⁄° 
uöt8_t
 *
s2
 = (c⁄° uöt8_à*Ë
v2
;

232 
n
-- > 0) {

233 i‡(*
s1
 !*
s2
)

234  (Ë*
s1
 - (Ë*
s2
;

235 
s1
++, 
s2
++;

239 
	}
}

242 
	$memföd
(c⁄° *
s
, 
c
, 
size_t
 
n
)

244 c⁄° *
íds
 = (c⁄° *Ë
s
 + 
n
;

245 ; 
s
 < 
íds
; s++)

246 i‡(*(c⁄° *Ë
s
 =(Ë
c
)

248  (*Ë
s
;

249 
	}
}

252 
	$°πﬁ
(c⁄° *
s
, **
íd±r
, 
ba£
)

254 
√g
 = 0;

255 
vÆ
 = 0;

258 *
s
 == ' ' || *s == '\t')

259 
s
++;

262 i‡(*
s
 == '+')

263 
s
++;

264 i‡(*
s
 == '-')

265 
s
++, 
√g
 = 1;

268 i‡((
ba£
 =0 || ba£ =16Ë&& (
s
[0] == '0' && s[1] == 'x'))

269 
s
 +2, 
ba£
 = 16;

270 i‡(
ba£
 =0 && 
s
[0] == '0')

271 
s
++, 
ba£
 = 8;

272 i‡(
ba£
 == 0)

273 
ba£
 = 10;

277 
dig
;

279 i‡(*
s
 >= '0' && *s <= '9')

280 
dig
 = *
s
 - '0';

281 i‡(*
s
 >= 'a' && *s <= 'z')

282 
dig
 = *
s
 - 'a' + 10;

283 i‡(*
s
 >= 'A' && *s <= 'Z')

284 
dig
 = *
s
 - 'A' + 10;

287 i‡(
dig
 >
ba£
)

289 
s
++, 
vÆ
 = (vÆ * 
ba£
Ë+ 
dig
;

293 i‡(
íd±r
)

294 *
íd±r
 = (*Ë
s
;

295  (
√g
 ? -
vÆ
 : val);

296 
	}
}

	@lib/syscall.c

3 
	~<öc/sysˇŒ.h
>

4 
	~<öc/lib.h
>

6 
ölöe
 
öt32_t


7 
	$sysˇŒ
(
num
, 
check
, 
uöt32_t
 
a1
, uöt32_à
a2
, uöt32_à
a3
, uöt32_à
a4
, uöt32_à
a5
)

9 
öt32_t
 
ªt
;

23 
asm
 volatile("int %1\n"

24 : "˜" (
ªt
)

25 : "i" (
T_SYSCALL
),

26 "a" (
num
),

27 "d" (
a1
),

28 "c" (
a2
),

29 "b" (
a3
),

30 "D" (
a4
),

31 "S" (
a5
)

34 if(
check
 && 
ªt
 > 0)

35 
	`∑nic
("sysˇŒ %dÑëu∫ed %d (> 0)", 
num
, 
ªt
);

37  
ªt
;

38 
	}
}

41 
	$sys_˝uts
(c⁄° *
s
, 
size_t
 
Àn
)

43 
	`sysˇŒ
(
SYS_˝uts
, 0, (
uöt32_t
)
s
, 
Àn
, 0, 0, 0);

44 
	}
}

47 
	$sys_cgëc
()

49  
	`sysˇŒ
(
SYS_cgëc
, 0, 0, 0, 0, 0, 0);

50 
	}
}

53 
	$sys_ív_de°roy
(
ívid_t
 
ívid
)

55  
	`sysˇŒ
(
SYS_ív_de°roy
, 1, 
ívid
, 0, 0, 0, 0);

56 
	}
}

58 
ívid_t


59 
	$sys_gëívid
()

61  
	`sysˇŒ
(
SYS_gëívid
, 0, 0, 0, 0, 0, 0);

62 
	}
}

65 
	$sys_yõld
()

67 
	`sysˇŒ
(
SYS_yõld
, 0, 0, 0, 0, 0, 0);

68 
	}
}

71 
	$sys_∑ge_Æloc
(
ívid_t
 
ívid
, *
va
, 
≥rm
)

73  
	`sysˇŒ
(
SYS_∑ge_Æloc
, 1, 
ívid
, (
uöt32_t
Ë
va
, 
≥rm
, 0, 0);

74 
	}
}

77 
	$sys_∑ge_m≠
(
ívid_t
 
§˚nv
, *
§cva
,Énvid_à
d°ív
, *
d°va
, 
≥rm
)

79  
	`sysˇŒ
(
SYS_∑ge_m≠
, 1, 
§˚nv
, (
uöt32_t
Ë
§cva
, 
d°ív
, (uöt32_tË
d°va
, 
≥rm
);

80 
	}
}

83 
	$sys_∑ge_unm≠
(
ívid_t
 
ívid
, *
va
)

85  
	`sysˇŒ
(
SYS_∑ge_unm≠
, 1, 
ívid
, (
uöt32_t
Ë
va
, 0, 0, 0);

86 
	}
}

91 
	$sys_ív_£t_°©us
(
ívid_t
 
ívid
, 
°©us
)

93  
	`sysˇŒ
(
SYS_ív_£t_°©us
, 1, 
ívid
, 
°©us
, 0, 0, 0);

94 
	}
}

97 
	$sys_ív_£t_å≠‰ame
(
ívid_t
 
ívid
, 
Tøp‰ame
 *
tf
)

99  
	`sysˇŒ
(
SYS_ív_£t_å≠‰ame
, 1, 
ívid
, (
uöt32_t
Ë
tf
, 0, 0, 0);

100 
	}
}

103 
	$sys_ív_£t_pgÁu…_upˇŒ
(
ívid_t
 
ívid
, *
upˇŒ
)

105  
	`sysˇŒ
(
SYS_ív_£t_pgÁu…_upˇŒ
, 1, 
ívid
, (
uöt32_t
Ë
upˇŒ
, 0, 0, 0);

106 
	}
}

109 
	$sys_ùc_åy_£nd
(
ívid_t
 
ívid
, 
uöt32_t
 
vÆue
, *
§cva
, 
≥rm
)

111  
	`sysˇŒ
(
SYS_ùc_åy_£nd
, 0, 
ívid
, 
vÆue
, (
uöt32_t
Ë
§cva
, 
≥rm
, 0);

112 
	}
}

115 
	$sys_ùc_ªcv
(*
d°va
)

117  
	`sysˇŒ
(
SYS_ùc_ªcv
, 1, (
uöt32_t
)
d°va
, 0, 0, 0, 0);

118 
	}
}

	@user/forktree.c

3 
	~<öc/lib.h
>

5 
	#DEPTH
 3

	)

7 
f‹kåì
(c⁄° *
cur
);

10 
	$f‹kchûd
(c⁄° *
cur
, 
bønch
)

12 
nxt
[
DEPTH
+1];

14 i‡(
	`°æí
(
cur
Ë>
DEPTH
)

17 
	`¢¥ötf
(
nxt
, 
DEPTH
+1, "%s%c", 
cur
, 
bønch
);

18 i‡(
	`sf‹k
() == 0) {

19 
	`f‹kåì
(
nxt
);

20 
	`exô
();

22 
	}
}

25 
	$f‹kåì
(c⁄° *
cur
)

27 
	`˝rötf
("%04x: Iám '%s'\n", 
	`sys_gëívid
(), 
cur
);

29 
	`f‹kchûd
(
cur
, '0');

30 
	`f‹kchûd
(
cur
, '1');

31 
	}
}

34 
	$umaö
()

36 
	`f‹kåì
("");

37 
	}
}

	@user/hello.c

2 
	~<öc/lib.h
>

5 
	$umaö
()

7 
	`˝rötf
("hello, world\n");

8 
	`˝rötf
("òamÉnvú⁄míà%08x\n", 
ív
->
ív_id
);

9 
	}
}

	@user/icode.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
fd
, 
n
, 
r
;

7 
buf
[512+1];

9 
bö¨y«me
 = "icode";

11 
	`˝rötf
("icode startup\n");

13 
	`˝rötf
("icode: open /motd\n");

14 i‡((
fd
 = 
	`›í
("/mŸd", 
O_RDONLY
)) < 0)

15 
	`∑nic
("icode: o≥¿/mŸd: %e", 
fd
);

17 
	`˝rötf
("icode:Ñead /motd\n");

18 (
n
 = 
	`ªad
(
fd
, 
buf
,  buf-1)) > 0)

19 
	`sys_˝uts
(
buf
, 
n
);

21 
	`˝rötf
("icode: close /motd\n");

22 
	`˛o£
(
fd
);

24 
	`˝rötf
("icode: spawn /init\n");

25 i‡((
r
 = 
	`•aw∆
("/init", "init", "initarg1", "initarg2", (*)0)) < 0)

26 
	`∑nic
("icode: s∑w¿/öô: %e", 
r
);

28 
	`˝rötf
("icode:Éxiting\n");

29 
	}
}

	@user/idle.c

3 
	~<öc/x86.h
>

4 
	~<öc/lib.h
>

7 
	$umaö
()

9 
bö¨y«me
 = "idle";

17 
	`sys_yõld
();

27 
	`bªakpoöt
();

29 
	}
}

	@user/init.c

1 
	~<öc/lib.h
>

4 
	mmsg1
[5000];

5 
	mmsg2
[1000];

6 } 
	gd©a
 = {

11 
	gbss
[6000];

14 
	$sum
(c⁄° *
s
, 
n
)

16 
i
, 
tŸ
 = 0;

17 
i
 = 0; i < 
n
; i++)

18 
tŸ
 ^
i
 * 
s
[i];

19  
tŸ
;

20 
	}
}

23 
	$umaö
(
¨gc
, **
¨gv
)

25 
i
, 
r
, 
x
, 
w™t
;

27 
	`˝rötf
("init:Ñunning\n");

29 
w™t
 = 0xf989e;

30 i‡((
x
 = 
	`sum
((*)&
d©a
,  d©a)Ë!
w™t
)

31 
	`˝rötf
("init: data isÇot initialized: got sum %08x wanted %08x\n",

32 
x
, 
w™t
);

34 
	`˝rötf
("init: data seems okay\n");

35 i‡((
x
 = 
	`sum
(
bss
,  bss)) != 0)

36 
	`˝rötf
("bs†i†nŸ inôülized: w™ãd sum 0 gŸ %08x\n", 
x
);

38 
	`˝rötf
("init: bss seems okay\n");

40 
	`˝rötf
("init:árgs:");

41 
i
 = 0; i < 
¨gc
; i++)

42 
	`˝rötf
(" '%s'", 
¨gv
[
i
]);

43 
	`˝rötf
("\n");

45 
	`˝rötf
("init:Éxiting\n");

46 
	}
}

	@user/pingpong.c

4 
	~<öc/lib.h
>

7 
	$umaö
()

9 
ívid_t
 
who
;

11 i‡((
who
 = 
	`f‹k
()) != 0) {

13 
	`˝rötf
("£nd 0 from %xÅÿ%x\n", 
	`sys_gëívid
(), 
who
);

14 
	`ùc_£nd
(
who
, 0, 0, 0);

18 
uöt32_t
 
i
 = 
	`ùc_ªcv
(&
who
, 0, 0);

19 
	`˝rötf
("%x gŸ %d from %x\n", 
	`sys_gëívid
(), 
i
, 
who
);

20 i‡(
i
 == 10)

22 
i
++;

23 
	`ùc_£nd
(
who
, 
i
, 0, 0);

24 i‡(
i
 == 10)

28 
	}
}

	@user/primes.c

11 
	~<öc/lib.h
>

14 
	$¥imïroc
()

16 
i
, 
id
, 
p
;

17 
ívid_t
 
ívid
;

20 
t›
:

21 
p
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

22 
	`˝rötf
("%d ", 
p
);

25 i‡((
id
 = 
	`f‹k
()) < 0)

26 
	`∑nic
("f‹k: %e", 
id
);

27 i‡(
id
 == 0)

28 
t›
;

32 
i
 = 
	`ùc_ªcv
(&
ívid
, 0, 0);

33 i‡(
i
 % 
p
)

34 
	`ùc_£nd
(
id
, 
i
, 0, 0);

36 
	}
}

39 
	$umaö
()

41 
i
, 
id
;

44 i‡((
id
 = 
	`f‹k
()) < 0)

45 
	`∑nic
("f‹k: %e", 
id
);

46 i‡(
id
 == 0)

47 
	`¥imïroc
();

50 
i
 = 2; ; i++)

51 
	`ùc_£nd
(
id
, 
i
, 0, 0);

52 
	}
}

	@user/spawnhello.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
ív
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("hello", "hello", 0)) < 0)

9 
	`∑nic
("•awn(hñloËÁûed: %e", 
r
);

10 
	}
}

	@user/spawninit.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
r
;

7 
	`˝rötf
("òamÖ¨íàívú⁄míà%08x\n", 
ív
->
ív_id
);

8 i‡((
r
 = 
	`•aw∆
("init", "init", "one", "two", 0)) < 0)

9 
	`∑nic
("•aw∆(öôËÁûed: %e", 
r
);

10 
	}
}

	@user/testfile.c

1 
	~<öc/lib.h
>

3 c⁄° *
	gmsg
 = "This isÅhe NEW message ofÅhe day!\n\n";

5 
	#FVA
 ((
Fd
*)0xCCCCC000)

	)

8 
	$x›í
(c⁄° *
∑th
, 
mode
)

10 
Fsùc
 
fsùcbuf
;

12 
	`°r˝y
(
fsùcbuf
.
›í
.
ªq_∑th
, 
∑th
);

13 
fsùcbuf
.
›í
.
ªq_omode
 = 
mode
;

15 
	`ùc_£nd
(
ívs
[1].
ív_id
, 
FSREQ_OPEN
, &
fsùcbuf
, 
PTE_P
 | 
PTE_W
 | 
PTE_U
);

16  
	`ùc_ªcv
(
NULL
, 
FVA
, NULL);

17 
	}
}

20 
	$umaö
()

22 
r
;

23 
Fd
 *
fd
;

24 
Fd
 
fdc›y
;

25 
Sèt
 
°
;

26 
buf
[512];

29 i‡((
r
 = 
	`x›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

30 
	`∑nic
("£rve_›í /nŸ-found: %e", 
r
);

31 i‡(
r
 >= 0)

32 
	`∑nic
("serve_open /not-found succeeded!");

34 i‡((
r
 = 
	`x›í
("/√wmŸd", 
O_RDONLY
)) < 0)

35 
	`∑nic
("£rve_›í /√wmŸd: %e", 
r
);

36 i‡(
FVA
->
fd_dev_id
 !'f' || FVA->
fd_off£t
 !0 || FVA->
fd_omode
 !
O_RDONLY
)

37 
	`∑nic
("serve_open didÇot fill struct Fd correctly\n");

38 
	`˝rötf
("serve_open is good\n");

40 i‡((
r
 = 
devfûe
.
	`dev_°©
(
FVA
, &
°
)) < 0)

41 
	`∑nic
("fûe_°©: %e", 
r
);

42 i‡(
	`°æí
(
msg
Ë!
°
.
°_size
)

43 
	`∑nic
("fûe_°©Ñëu∫ed sizê%d w™ãd %d\n", 
°
.
°_size
, 
	`°æí
(
msg
));

44 
	`˝rötf
("file_stat is good\n");

46 
	`mem£t
(
buf
, 0,  buf);

47 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

48 
	`∑nic
("fûe_ªad: %e", 
r
);

49 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

50 
	`∑nic
("file_readÑeturned wrong data");

51 
	`˝rötf
("file_read is good\n");

53 i‡((
r
 = 
devfûe
.
	`dev_˛o£
(
FVA
)) < 0)

54 
	`∑nic
("fûe_˛o£: %e", 
r
);

55 
	`˝rötf
("file_close is good\n");

61 
fdc›y
 = *
FVA
;

62 
	`sys_∑ge_unm≠
(0, 
FVA
);

64 i‡((
r
 = 
devfûe
.
	`dev_ªad
(&
fdc›y
, 
buf
,  buf)Ë!-
E_INVAL
)

65 
	`∑nic
("£rve_ªad d€†nŸ h™dÀ sèÀ fûeid†c‹ª˘ly: %e", 
r
);

66 
	`˝rötf
("stale fileid is good\n");

69 i‡((
r
 = 
	`x›í
("/√w-fûe", 
O_RDWR
|
O_CREAT
)) < 0)

70 
	`∑nic
("£rve_›í /√w-fûe: %e", 
r
);

72 i‡((
r
 = 
devfûe
.
	`dev_wrôe
(
FVA
, 
msg
, 
	`°æí
(msg))) != strlen(msg))

73 
	`∑nic
("fûe_wrôe: %e", 
r
);

74 
	`˝rötf
("file_write is good\n");

76 
FVA
->
fd_off£t
 = 0;

77 
	`mem£t
(
buf
, 0,  buf);

78 i‡((
r
 = 
devfûe
.
	`dev_ªad
(
FVA
, 
buf
,  buf)) < 0)

79 
	`∑nic
("fûe_ªadá·î fûe_wrôe: %e", 
r
);

80 i‡(
r
 !
	`°æí
(
msg
))

81 
	`∑nic
("fûe_ªadá·î fûe_wrôêªtu∫ed wr⁄gÜígth: %d", 
r
);

82 i‡(
	`°rcmp
(
buf
, 
msg
) != 0)

83 
	`∑nic
("file_readáfter file_writeÑeturned wrong data");

84 
	`˝rötf
("file_readáfter file_write is good\n");

87 i‡((
r
 = 
	`›í
("/nŸ-found", 
O_RDONLY
)Ë< 0 &&Ñ !-
E_NOT_FOUND
)

88 
	`∑nic
("›í /nŸ-found: %e", 
r
);

89 i‡(
r
 >= 0)

90 
	`∑nic
("open /not-found succeeded!");

92 i‡((
r
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

93 
	`∑nic
("›í /√wmŸd: %e", 
r
);

94 
fd
 = (
Fd
*Ë(0xD0000000 + 
r
*
PGSIZE
);

95 i‡(
fd
->
fd_dev_id
 !'f' || fd->
fd_off£t
 !0 || fd->
fd_omode
 !
O_RDONLY
)

96 
	`∑nic
("open didÇot fill struct Fd correctly\n");

97 
	`˝rötf
("open is good\n");

98 
	}
}

	@user/writemotd.c

1 
	~<öc/lib.h
>

4 
	$umaö
()

6 
rfd
, 
wfd
;

7 
buf
[512];

8 
n
, 
r
;

10 i‡((
rfd
 = 
	`›í
("/√wmŸd", 
O_RDONLY
)) < 0)

11 
	`∑nic
("›í /√wmŸd: %e", 
rfd
);

12 i‡((
wfd
 = 
	`›í
("/mŸd", 
O_RDWR
)) < 0)

13 
	`∑nic
("›í /mŸd: %e", 
wfd
);

14 
	`˝rötf
("fûêdes¸ùt‹†%d %d\n", 
rfd
, 
wfd
);

15 i‡(
rfd
 =
wfd
)

16 
	`∑nic
("open /newmotdánd /motd give same file descriptor");

18 
	`˝rötf
("OLD MOTD\n===\n");

19 (
n
 = 
	`ªad
(
wfd
, 
buf
,  buf-1)) > 0)

20 
	`sys_˝uts
(
buf
, 
n
);

21 
	`˝rötf
("===\n");

22 
	`£ek
(
wfd
, 0);

24 i‡((
r
 = 
	`·runˇã
(
wfd
, 0)) < 0)

25 
	`∑nic
("åunˇã /mŸd: %e", 
r
);

27 
	`˝rötf
("NEW MOTD\n===\n");

28 (
n
 = 
	`ªad
(
rfd
, 
buf
,  buf-1)) > 0) {

29 
	`sys_˝uts
(
buf
, 
n
);

30 i‡((
r
 = 
	`wrôe
(
wfd
, 
buf
, 
n
)) !=Ç)

31 
	`∑nic
("wrôê/mŸd: %e", 
r
);

33 
	`˝rötf
("===\n");

35 i‡(
n
 < 0)

36 
	`∑nic
("ªad /√wmŸd: %e", 
n
);

38 
	`˛o£
(
rfd
);

39 
	`˛o£
(
wfd
);

40 
	}
}

	@
1
.
0
85
1084
boot/main.c
fs/bc.c
fs/fs.c
fs/fs.h
fs/fsformat.c
fs/ide.c
fs/serv.c
fs/test.c
inc/args.h
inc/assert.h
inc/elf.h
inc/env.h
inc/error.h
inc/fd.h
inc/fs.h
inc/isareg.h
inc/kbdreg.h
inc/lib.h
inc/malloc.h
inc/memlayout.h
inc/mmu.h
inc/queue.h
inc/stab.h
inc/stdarg.h
inc/stdio.h
inc/string.h
inc/syscall.h
inc/timerreg.h
inc/trap.h
inc/types.h
inc/x86.h
kern/console.c
kern/console.h
kern/dis-asm.h
kern/disas.c
kern/disas.h
kern/env.c
kern/env.h
kern/i386-dis.c
kern/init.c
kern/kclock.c
kern/kclock.h
kern/kdebug.c
kern/kdebug.h
kern/monitor.c
kern/monitor.h
kern/picirq.c
kern/picirq.h
kern/pmap.c
kern/pmap.h
kern/printf.c
kern/sched.c
kern/sched.h
kern/syscall.c
kern/syscall.h
kern/trap.c
kern/trap.h
lib/console.c
lib/exit.c
lib/fd.c
lib/file.c
lib/fork.c
lib/fprintf.c
lib/ipc.c
lib/libmain.c
lib/pageref.c
lib/panic.c
lib/pgfault.c
lib/printf.c
lib/printfmt.c
lib/readline.c
lib/spawn.c
lib/string.c
lib/syscall.c
user/forktree.c
user/hello.c
user/icode.c
user/idle.c
user/init.c
user/pingpong.c
user/primes.c
user/spawnhello.c
user/spawninit.c
user/testfile.c
user/writemotd.c
